;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme lists)
  ((g$list-tail$4906$c1uhW
     g$list-tail$5043$c1uhW
     (case-lambda
       ((g$lst$4934$c1uhW g$index$4935$c1uhW)
        (if ((case-lambda
               ((g$t$4936$c1uhW)
                (if g$t$4936$c1uhW
                  g$t$4936$c1uhW
                  (begin '#f (g$negative?$5292$c1uhW g$index$4935$c1uhW)))))
             (null? g$lst$4934$c1uhW))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$4934$c1uhW
            g$index$4935$c1uhW)
          (if (g$zero?$5293$c1uhW g$index$4935$c1uhW)
            g$lst$4934$c1uhW
            (g$list-tail$4906$c1uhW
              (cdr g$lst$4934$c1uhW)
              (- g$index$4935$c1uhW '1)))))))
   (g$list-ref$4907$c1uhW
     g$list-ref$5044$c1uhW
     (case-lambda
       ((g$lst$4937$c1uhW g$index$4938$c1uhW)
        (car (g$list-tail$4906$c1uhW g$lst$4937$c1uhW g$index$4938$c1uhW)))))
   (g$last-pair$4908$c1uhW
     g$last-pair$5045$c1uhW
     (case-lambda
       ((g$lst$4939$c1uhW)
        (if (null? g$lst$4939$c1uhW)
          g$lst$4939$c1uhW
          (if (null? (cdr g$lst$4939$c1uhW))
            g$lst$4939$c1uhW
            (g$last-pair$4908$c1uhW (cdr g$lst$4939$c1uhW)))))))
   (g$make-list$4909$c1uhW
     g$make-list$5046$c1uhW
     (case-lambda
       ((g$n$4940$c1uhW) (list->vector (make-vector g$n$4940$c1uhW)))
       ((g$n$4941$c1uhW g$fill$4942$c1uhW)
        (list->vector (make-vector g$n$4941$c1uhW g$fill$4942$c1uhW)))))
   (g$find$4910$c1uhW
     g$find$5047$c1uhW
     (case-lambda
       ((g$proc$4943$c1uhW g$l$4944$c1uhW)
        (if (null? g$l$4944$c1uhW)
          '#f
          ((case-lambda
             ((g$e$4945$c1uhW g$r$4946$c1uhW g$proc$4947$c1uhW)
              (if (g$proc$4947$c1uhW g$e$4945$c1uhW)
                g$e$4945$c1uhW
                (g$find$4910$c1uhW g$proc$4947$c1uhW g$r$4946$c1uhW))))
           (car g$l$4944$c1uhW)
           (cdr g$l$4944$c1uhW)
           g$proc$4943$c1uhW)))))
   (g$partition$4911$c1uhW
     g$partition$5048$c1uhW
     (case-lambda
       ((g$proc$4948$c1uhW g$l$4949$c1uhW)
        ((letrec ((g$f$4950$c1uhW
                    (case-lambda
                      ((g$l$4951$c1uhW g$a$4952$c1uhW g$b$4953$c1uhW)
                       (if (null? g$l$4951$c1uhW)
                         (values
                           (reverse! g$a$4952$c1uhW)
                           (reverse! g$b$4953$c1uhW))
                         ((case-lambda
                            ((g$e$4954$c1uhW)
                             (if (g$proc$4948$c1uhW g$e$4954$c1uhW)
                               (g$f$4950$c1uhW
                                 (cdr g$l$4951$c1uhW)
                                 (cons g$e$4954$c1uhW g$a$4952$c1uhW)
                                 g$b$4953$c1uhW)
                               (g$f$4950$c1uhW
                                 (cdr g$l$4951$c1uhW)
                                 g$a$4952$c1uhW
                                 (cons g$e$4954$c1uhW g$b$4953$c1uhW)))))
                          (car g$l$4951$c1uhW)))))))
           g$f$4950$c1uhW)
         g$l$4949$c1uhW
         '()
         '()))))
   (g$remp$4912$c1uhW
     g$remp$5049$c1uhW
     (case-lambda
       ((g$proc$4955$c1uhW g$l$4956$c1uhW)
        ((letrec ((g$f$4957$c1uhW
                    (case-lambda
                      ((g$l$4958$c1uhW g$a$4959$c1uhW)
                       (if (null? g$l$4958$c1uhW)
                         (reverse! g$a$4959$c1uhW)
                         ((case-lambda
                            ((g$e$4960$c1uhW)
                             (if (g$proc$4955$c1uhW g$e$4960$c1uhW)
                               (g$f$4957$c1uhW
                                 (cdr g$l$4958$c1uhW)
                                 g$a$4959$c1uhW)
                               (g$f$4957$c1uhW
                                 (cdr g$l$4958$c1uhW)
                                 (cons g$e$4960$c1uhW g$a$4959$c1uhW)))))
                          (car g$l$4958$c1uhW)))))))
           g$f$4957$c1uhW)
         g$l$4956$c1uhW
         '()))))
   (g$filter$4913$c1uhW
     g$filter$5050$c1uhW
     (case-lambda
       ((g$proc$4961$c1uhW g$l$4962$c1uhW)
        ((letrec ((g$f$4963$c1uhW
                    (case-lambda
                      ((g$l$4964$c1uhW g$a$4965$c1uhW)
                       (if (null? g$l$4964$c1uhW)
                         (reverse! g$a$4965$c1uhW)
                         ((case-lambda
                            ((g$e$4966$c1uhW)
                             (if (g$proc$4961$c1uhW g$e$4966$c1uhW)
                               (g$f$4963$c1uhW
                                 (cdr g$l$4964$c1uhW)
                                 (cons g$e$4966$c1uhW g$a$4965$c1uhW))
                               (g$f$4963$c1uhW
                                 (cdr g$l$4964$c1uhW)
                                 g$a$4965$c1uhW))))
                          (car g$l$4964$c1uhW)))))))
           g$f$4963$c1uhW)
         g$l$4962$c1uhW
         '()))))
   (g$assq$4914$c1uhW
     g$assq$5051$c1uhW
     (case-lambda
       ((g$obj$4967$c1uhW g$lst$4968$c1uhW)
        (if (null? g$lst$4968$c1uhW)
          '#f
          ((case-lambda
             ((g$obj$4969$c1uhW g$t$4970$c1uhW g$r$4971$c1uhW)
              (if (eq? g$obj$4969$c1uhW (car g$t$4970$c1uhW))
                g$t$4970$c1uhW
                (g$assq$4914$c1uhW g$obj$4969$c1uhW g$r$4971$c1uhW))))
           g$obj$4967$c1uhW
           (car g$lst$4968$c1uhW)
           (cdr g$lst$4968$c1uhW))))))
   (g$assv$4915$c1uhW
     g$assv$5052$c1uhW
     (case-lambda
       ((g$obj$4972$c1uhW g$lst$4973$c1uhW)
        (if (null? g$lst$4973$c1uhW)
          '#f
          ((case-lambda
             ((g$obj$4974$c1uhW g$t$4975$c1uhW g$r$4976$c1uhW)
              (if (eqv? g$obj$4974$c1uhW (car g$t$4975$c1uhW))
                g$t$4975$c1uhW
                (g$assv$4915$c1uhW g$obj$4974$c1uhW g$r$4976$c1uhW))))
           g$obj$4972$c1uhW
           (car g$lst$4973$c1uhW)
           (cdr g$lst$4973$c1uhW))))))
   (g$assoc$4916$c1uhW
     g$assoc$5053$c1uhW
     (case-lambda
       ((g$obj$4977$c1uhW g$lst$4978$c1uhW)
        (if (null? g$lst$4978$c1uhW)
          '#f
          ((case-lambda
             ((g$obj$4979$c1uhW g$t$4980$c1uhW g$r$4981$c1uhW)
              (if (equal? g$obj$4979$c1uhW (car g$t$4980$c1uhW))
                g$t$4980$c1uhW
                (g$assoc$4916$c1uhW g$obj$4979$c1uhW g$r$4981$c1uhW))))
           g$obj$4977$c1uhW
           (car g$lst$4978$c1uhW)
           (cdr g$lst$4978$c1uhW))))))
   (g$assp$4917$c1uhW
     g$assp$5054$c1uhW
     (case-lambda
       ((g$p?$4982$c1uhW g$lst$4983$c1uhW)
        (if (null? g$lst$4983$c1uhW)
          '#f
          ((case-lambda
             ((g$p?$4984$c1uhW g$t$4985$c1uhW g$r$4986$c1uhW)
              (if (g$p?$4984$c1uhW (car g$t$4985$c1uhW))
                g$t$4985$c1uhW
                (g$assp$4917$c1uhW g$p?$4984$c1uhW g$r$4986$c1uhW))))
           g$p?$4982$c1uhW
           (car g$lst$4983$c1uhW)
           (cdr g$lst$4983$c1uhW))))))
   (g$memq$4918$c1uhW
     g$memq$5055$c1uhW
     (case-lambda
       ((g$obj$4987$c1uhW g$lst$4988$c1uhW)
        (if (null? g$lst$4988$c1uhW)
          '#f
          (if (eq? g$obj$4987$c1uhW (car g$lst$4988$c1uhW))
            g$lst$4988$c1uhW
            (g$memq$4918$c1uhW g$obj$4987$c1uhW (cdr g$lst$4988$c1uhW)))))))
   (g$memv$4919$c1uhW
     g$memv$5056$c1uhW
     (case-lambda
       ((g$obj$4989$c1uhW g$lst$4990$c1uhW)
        (if (null? g$lst$4990$c1uhW)
          '#f
          (if (eqv? g$obj$4989$c1uhW (car g$lst$4990$c1uhW))
            g$lst$4990$c1uhW
            (g$memv$4919$c1uhW g$obj$4989$c1uhW (cdr g$lst$4990$c1uhW)))))))
   (g$member$4920$c1uhW
     g$member$5057$c1uhW
     (case-lambda
       ((g$obj$4991$c1uhW g$lst$4992$c1uhW)
        (if (null? g$lst$4992$c1uhW)
          '#f
          (if (equal? g$obj$4991$c1uhW (car g$lst$4992$c1uhW))
            g$lst$4992$c1uhW
            (g$member$4920$c1uhW g$obj$4991$c1uhW (cdr g$lst$4992$c1uhW)))))))
   (g$memp$4921$c1uhW
     g$memp$5058$c1uhW
     (case-lambda
       ((g$p?$4993$c1uhW g$lst$4994$c1uhW)
        (if (null? g$lst$4994$c1uhW)
          '#f
          (if (g$p?$4993$c1uhW (car g$lst$4994$c1uhW))
            g$lst$4994$c1uhW
            (g$memp$4921$c1uhW g$p?$4993$c1uhW (cdr g$lst$4994$c1uhW)))))))
   (g$all-empty?$4922$c1uhW
     g$all-empty?$5059$c1uhW
     (case-lambda
       ((g$ls$4995$c1uhW)
        ((case-lambda
           ((g$t$4996$c1uhW)
            (if g$t$4996$c1uhW
              g$t$4996$c1uhW
              (begin
                '#f
                (if (null? (car g$ls$4995$c1uhW))
                  (begin '#f (g$all-empty?$4922$c1uhW (cdr g$ls$4995$c1uhW)))
                  '#f)))))
         (null? g$ls$4995$c1uhW)))))
   (g$split$4923$c1uhW
     g$split$5060$c1uhW
     (case-lambda
       ((g$ls$4997$c1uhW)
        (if (null? g$ls$4997$c1uhW)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$4923$c1uhW (cdr g$ls$4997$c1uhW))))
            (case-lambda
              ((g$cars$4998$c1uhW g$cdrs$4999$c1uhW)
               ((case-lambda
                  ((g$a$5000$c1uhW)
                   (values
                     (cons (car g$a$5000$c1uhW) g$cars$4998$c1uhW)
                     (cons (cdr g$a$5000$c1uhW) g$cdrs$4999$c1uhW))))
                (car g$ls$4997$c1uhW)))))))))
   (g$for-all$4924$c1uhW
     g$for-all$5061$c1uhW
     (case-lambda
       ((g$f$5001$c1uhW . g$args$5002$c1uhW)
        (if (g$all-empty?$4922$c1uhW g$args$5002$c1uhW)
          '#t
          (call-with-values
            (case-lambda (() (g$split$4923$c1uhW g$args$5002$c1uhW)))
            (case-lambda
              ((g$cars$5003$c1uhW g$cdrs$5004$c1uhW)
               (if (g$all-empty?$4922$c1uhW g$cdrs$5004$c1uhW)
                 (apply g$f$5001$c1uhW g$cars$5003$c1uhW)
                 (if (apply g$f$5001$c1uhW g$cars$5003$c1uhW)
                   (begin
                     '#f
                     (apply
                       g$for-all$4924$c1uhW
                       g$f$5001$c1uhW
                       g$cdrs$5004$c1uhW))
                   '#f)))))))))
   (g$exists$4925$c1uhW
     g$exists$5062$c1uhW
     (case-lambda
       ((g$f$5005$c1uhW . g$args$5006$c1uhW)
        (if (g$all-empty?$4922$c1uhW g$args$5006$c1uhW)
          '#f
          (call-with-values
            (case-lambda (() (g$split$4923$c1uhW g$args$5006$c1uhW)))
            (case-lambda
              ((g$cars$5007$c1uhW g$cdrs$5008$c1uhW)
               ((case-lambda
                  ((g$t$5009$c1uhW)
                   (if g$t$5009$c1uhW
                     g$t$5009$c1uhW
                     (begin
                       '#f
                       (apply
                         g$exists$4925$c1uhW
                         g$f$5005$c1uhW
                         g$cdrs$5008$c1uhW)))))
                (apply g$f$5005$c1uhW g$cars$5007$c1uhW)))))))))
   (g$map$4926$c1uhW
     g$map$5063$c1uhW
     (case-lambda
       ((g$proc$5010$c1uhW . g$lists$5011$c1uhW)
        ((letrec ((g$f$5012$c1uhW
                    (case-lambda
                      ((g$lists$5013$c1uhW g$a$5014$c1uhW)
                       (if (g$all-empty?$4922$c1uhW g$lists$5013$c1uhW)
                         (reverse! g$a$5014$c1uhW)
                         (call-with-values
                           (case-lambda
                             (() (g$split$4923$c1uhW g$lists$5013$c1uhW)))
                           (case-lambda
                             ((g$cars$5015$c1uhW g$cdrs$5016$c1uhW)
                              (g$f$5012$c1uhW
                                g$cdrs$5016$c1uhW
                                (cons
                                  (apply g$proc$5010$c1uhW g$cars$5015$c1uhW)
                                  g$a$5014$c1uhW))))))))))
           g$f$5012$c1uhW)
         g$lists$5011$c1uhW
         '()))))
   (g$for-each$4927$c1uhW
     g$for-each$5064$c1uhW
     (case-lambda
       ((g$f$5017$c1uhW . g$args$5018$c1uhW)
        (if (not (g$all-empty?$4922$c1uhW g$args$5018$c1uhW))
          (call-with-values
            (case-lambda (() (g$split$4923$c1uhW g$args$5018$c1uhW)))
            (case-lambda
              ((g$cars$5019$c1uhW g$cdrs$5020$c1uhW)
               (begin
                 (apply g$f$5017$c1uhW g$cars$5019$c1uhW)
                 (apply
                   g$for-each$4927$c1uhW
                   g$f$5017$c1uhW
                   g$cdrs$5020$c1uhW)))))
          (void)))))
   (g$cons*$4928$c1uhW
     g$cons*$5065$c1uhW
     (case-lambda
       ((g$a$5021$c1uhW . g$rest$5022$c1uhW)
        ((letrec ((g$f$5023$c1uhW
                    (case-lambda
                      ((g$a$5024$c1uhW g$rest$5025$c1uhW)
                       (if (null? g$rest$5025$c1uhW)
                         g$a$5024$c1uhW
                         (cons
                           g$a$5024$c1uhW
                           (g$f$5023$c1uhW
                             (car g$rest$5025$c1uhW)
                             (cdr g$rest$5025$c1uhW))))))))
           g$f$5023$c1uhW)
         g$a$5021$c1uhW
         g$rest$5022$c1uhW))))
   (g$fold-left$4929$c1uhW
     g$fold-left$5066$c1uhW
     (case-lambda
       ((g$combine$5026$c1uhW
          g$nil$5027$c1uhW
          g$list1$5028$c1uhW
          .
          g$lists$5029$c1uhW)
        (if (null? g$list1$5028$c1uhW)
          g$nil$5027$c1uhW
          (apply
            g$fold-left$4929$c1uhW
            (g$cons*$4928$c1uhW
              g$combine$5026$c1uhW
              (apply
                g$combine$5026$c1uhW
                (g$cons*$4928$c1uhW
                  g$nil$5027$c1uhW
                  (car g$list1$5028$c1uhW)
                  (g$map$4926$c1uhW car g$lists$5029$c1uhW)))
              (cdr g$list1$5028$c1uhW)
              (g$map$4926$c1uhW cdr g$lists$5029$c1uhW)))))))
   (g$fold-right$4930$c1uhW
     g$fold-right$5067$c1uhW
     (case-lambda
       ((g$combine$5030$c1uhW
          g$nil$5031$c1uhW
          g$list1$5032$c1uhW
          .
          g$lists$5033$c1uhW)
        (if (null? g$list1$5032$c1uhW)
          g$nil$5031$c1uhW
          (apply
            g$combine$5030$c1uhW
            (append
              (list (car g$list1$5032$c1uhW))
              (g$map$4926$c1uhW car g$lists$5033$c1uhW)
              (list
                (apply
                  g$fold-right$4930$c1uhW
                  (g$cons*$4928$c1uhW
                    g$combine$5030$c1uhW
                    g$nil$5031$c1uhW
                    (cdr g$list1$5032$c1uhW)
                    (g$map$4926$c1uhW cdr g$lists$5033$c1uhW))))))))))
   (g$remove$4931$c1uhW
     g$remove$5068$c1uhW
     (case-lambda
       ((g$obj$5034$c1uhW g$list$5035$c1uhW)
        (g$remp$4912$c1uhW
          (case-lambda
            ((g$x$5036$c1uhW) (equal? g$obj$5034$c1uhW g$x$5036$c1uhW)))
          g$list$5035$c1uhW))))
   (g$remv$4932$c1uhW
     g$remv$5069$c1uhW
     (case-lambda
       ((g$obj$5037$c1uhW g$list$5038$c1uhW)
        (g$remp$4912$c1uhW
          (case-lambda
            ((g$x$5039$c1uhW) (eqv? g$obj$5037$c1uhW g$x$5039$c1uhW)))
          g$list$5038$c1uhW))))
   (g$remq$4933$c1uhW
     g$remq$5070$c1uhW
     (case-lambda
       ((g$obj$5040$c1uhW g$list$5041$c1uhW)
        (g$remp$4912$c1uhW
          (case-lambda ((g$x$5042$c1uhW) (eq? g$obj$5040$c1uhW g$x$5042$c1uhW)))
          g$list$5041$c1uhW)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$caar$5071$c1uhW
     g$caar$5263$c1uhW
     (case-lambda ((g$x$5135$c1uhW) (car (car g$x$5135$c1uhW)))))
   (g$cadr$5072$c1uhW
     g$cadr$5264$c1uhW
     (case-lambda ((g$x$5136$c1uhW) (car (cdr g$x$5136$c1uhW)))))
   (g$cdar$5073$c1uhW
     g$cdar$5265$c1uhW
     (case-lambda ((g$x$5137$c1uhW) (cdr (car g$x$5137$c1uhW)))))
   (g$cddr$5074$c1uhW
     g$cddr$5266$c1uhW
     (case-lambda ((g$x$5138$c1uhW) (cdr (cdr g$x$5138$c1uhW)))))
   (g$caaar$5075$c1uhW
     g$caaar$5267$c1uhW
     (case-lambda
       ((g$x$5139$c1uhW) (g$caar$5071$c1uhW (car g$x$5139$c1uhW)))))
   (g$caadr$5076$c1uhW
     g$caadr$5268$c1uhW
     (case-lambda
       ((g$x$5140$c1uhW) (g$caar$5071$c1uhW (cdr g$x$5140$c1uhW)))))
   (g$cadar$5077$c1uhW
     g$cadar$5269$c1uhW
     (case-lambda
       ((g$x$5141$c1uhW) (g$cadr$5072$c1uhW (car g$x$5141$c1uhW)))))
   (g$caddr$5078$c1uhW
     g$caddr$5270$c1uhW
     (case-lambda
       ((g$x$5142$c1uhW) (g$cadr$5072$c1uhW (cdr g$x$5142$c1uhW)))))
   (g$cdaar$5079$c1uhW
     g$cdaar$5271$c1uhW
     (case-lambda
       ((g$x$5143$c1uhW) (g$cdar$5073$c1uhW (car g$x$5143$c1uhW)))))
   (g$cdadr$5080$c1uhW
     g$cdadr$5272$c1uhW
     (case-lambda
       ((g$x$5144$c1uhW) (g$cdar$5073$c1uhW (cdr g$x$5144$c1uhW)))))
   (g$cddar$5081$c1uhW
     g$cddar$5273$c1uhW
     (case-lambda
       ((g$x$5145$c1uhW) (g$cddr$5074$c1uhW (car g$x$5145$c1uhW)))))
   (g$cdddr$5082$c1uhW
     g$cdddr$5274$c1uhW
     (case-lambda
       ((g$x$5146$c1uhW) (g$cddr$5074$c1uhW (cdr g$x$5146$c1uhW)))))
   (g$caaaar$5083$c1uhW
     g$caaaar$5275$c1uhW
     (case-lambda
       ((g$x$5147$c1uhW) (g$caaar$5075$c1uhW (car g$x$5147$c1uhW)))))
   (g$caaadr$5084$c1uhW
     g$caaadr$5276$c1uhW
     (case-lambda
       ((g$x$5148$c1uhW) (g$caaar$5075$c1uhW (cdr g$x$5148$c1uhW)))))
   (g$caadar$5085$c1uhW
     g$caadar$5277$c1uhW
     (case-lambda
       ((g$x$5149$c1uhW) (g$caadr$5076$c1uhW (car g$x$5149$c1uhW)))))
   (g$caaddr$5086$c1uhW
     g$caaddr$5278$c1uhW
     (case-lambda
       ((g$x$5150$c1uhW) (g$caadr$5076$c1uhW (cdr g$x$5150$c1uhW)))))
   (g$cadaar$5087$c1uhW
     g$cadaar$5279$c1uhW
     (case-lambda
       ((g$x$5151$c1uhW) (g$cadar$5077$c1uhW (car g$x$5151$c1uhW)))))
   (g$cadadr$5088$c1uhW
     g$cadadr$5280$c1uhW
     (case-lambda
       ((g$x$5152$c1uhW) (g$cadar$5077$c1uhW (cdr g$x$5152$c1uhW)))))
   (g$caddar$5089$c1uhW
     g$caddar$5281$c1uhW
     (case-lambda
       ((g$x$5153$c1uhW) (g$caddr$5078$c1uhW (car g$x$5153$c1uhW)))))
   (g$cadddr$5090$c1uhW
     g$cadddr$5282$c1uhW
     (case-lambda
       ((g$x$5154$c1uhW) (g$caddr$5078$c1uhW (cdr g$x$5154$c1uhW)))))
   (g$cdaaar$5091$c1uhW
     g$cdaaar$5283$c1uhW
     (case-lambda
       ((g$x$5155$c1uhW) (g$cdaar$5079$c1uhW (car g$x$5155$c1uhW)))))
   (g$cdaadr$5092$c1uhW
     g$cdaadr$5284$c1uhW
     (case-lambda
       ((g$x$5156$c1uhW) (g$cdaar$5079$c1uhW (cdr g$x$5156$c1uhW)))))
   (g$cdadar$5093$c1uhW
     g$cdadar$5285$c1uhW
     (case-lambda
       ((g$x$5157$c1uhW) (g$cdadr$5080$c1uhW (car g$x$5157$c1uhW)))))
   (g$cdaddr$5094$c1uhW
     g$cdaddr$5286$c1uhW
     (case-lambda
       ((g$x$5158$c1uhW) (g$cdadr$5080$c1uhW (cdr g$x$5158$c1uhW)))))
   (g$cddaar$5095$c1uhW
     g$cddaar$5287$c1uhW
     (case-lambda
       ((g$x$5159$c1uhW) (g$cddar$5081$c1uhW (car g$x$5159$c1uhW)))))
   (g$cddadr$5096$c1uhW
     g$cddadr$5288$c1uhW
     (case-lambda
       ((g$x$5160$c1uhW) (g$cddar$5081$c1uhW (cdr g$x$5160$c1uhW)))))
   (g$cdddar$5097$c1uhW
     g$cdddar$5289$c1uhW
     (case-lambda
       ((g$x$5161$c1uhW) (g$cdddr$5082$c1uhW (car g$x$5161$c1uhW)))))
   (g$cddddr$5098$c1uhW
     g$cddddr$5290$c1uhW
     (case-lambda
       ((g$x$5162$c1uhW) (g$cdddr$5082$c1uhW (cdr g$x$5162$c1uhW)))))
   (g$positive?$5099$c1uhW
     g$positive?$5291$c1uhW
     (case-lambda
       ((g$r$5163$c1uhW)
        (begin
          (if (not (real-valued? g$r$5163$c1uhW))
            (assertion-violation 'positive? '"not a real" g$r$5163$c1uhW)
            (void))
          (< '0 g$r$5163$c1uhW)))))
   (g$negative?$5100$c1uhW
     g$negative?$5292$c1uhW
     (case-lambda
       ((g$r$5164$c1uhW)
        (begin
          (if (not (real-valued? g$r$5164$c1uhW))
            (assertion-violation 'negative? '"not a real" g$r$5164$c1uhW)
            (void))
          (> '0 g$r$5164$c1uhW)))))
   (g$zero?$5101$c1uhW
     g$zero?$5293$c1uhW
     (case-lambda
       ((g$r$5165$c1uhW)
        (begin
          (if (not (real-valued? g$r$5165$c1uhW))
            (assertion-violation 'zero? '"not a real" g$r$5165$c1uhW)
            (void))
          (= '0 g$r$5165$c1uhW)))))
   (g$even?$5102$c1uhW
     g$even?$5294$c1uhW
     (case-lambda
       ((g$n$5166$c1uhW)
        (begin
          (if (not (integer-valued? g$n$5166$c1uhW))
            (assertion-violation 'even? '"not a integer" g$n$5166$c1uhW)
            (void))
          (= '0 (mod g$n$5166$c1uhW '2))))))
   (g$odd?$5103$c1uhW
     g$odd?$5295$c1uhW
     (case-lambda
       ((g$n$5167$c1uhW)
        (begin
          (if (not (integer-valued? g$n$5167$c1uhW))
            (assertion-violation 'odd? '"not a integer" g$n$5167$c1uhW)
            (void))
          (= '1 (mod g$n$5167$c1uhW '2))))))
   (g$max$5104$c1uhW
     g$max$5296$c1uhW
     (case-lambda
       ((g$a$5168$c1uhW . g$rest$5169$c1uhW)
        (g$fold-left$5066$c1uhW
          (case-lambda
            ((g$a$5170$c1uhW g$b$5171$c1uhW)
             ((case-lambda
                ((g$r$5172$c1uhW)
                 (if ((case-lambda
                        ((g$t$5173$c1uhW)
                         (if g$t$5173$c1uhW
                           g$t$5173$c1uhW
                           (begin '#f (inexact? g$b$5171$c1uhW)))))
                      (inexact? g$a$5170$c1uhW))
                   (inexact g$r$5172$c1uhW)
                   g$r$5172$c1uhW)))
              (if (< g$a$5170$c1uhW g$b$5171$c1uhW)
                g$b$5171$c1uhW
                g$a$5170$c1uhW))))
          g$a$5168$c1uhW
          g$rest$5169$c1uhW))))
   (g$min$5105$c1uhW
     g$min$5297$c1uhW
     (case-lambda
       ((g$a$5174$c1uhW . g$rest$5175$c1uhW)
        (g$fold-left$5066$c1uhW
          (case-lambda
            ((g$a$5176$c1uhW g$b$5177$c1uhW)
             ((case-lambda
                ((g$r$5178$c1uhW)
                 (if ((case-lambda
                        ((g$t$5179$c1uhW)
                         (if g$t$5179$c1uhW
                           g$t$5179$c1uhW
                           (begin '#f (inexact? g$b$5177$c1uhW)))))
                      (inexact? g$a$5176$c1uhW))
                   (inexact g$r$5178$c1uhW)
                   g$r$5178$c1uhW)))
              (if (> g$a$5176$c1uhW g$b$5177$c1uhW)
                g$b$5177$c1uhW
                g$a$5176$c1uhW))))
          g$a$5174$c1uhW
          g$rest$5175$c1uhW))))
   (g$gcd$5106$c1uhW
     g$gcd$5298$c1uhW
     (case-lambda
       (g$nums$5180$c1uhW
        ((case-lambda
           ((g$t$5181$c1uhW)
            (if (g$memv$5056$c1uhW g$t$5181$c1uhW '(0))
              '0
              (if (g$memv$5056$c1uhW g$t$5181$c1uhW '(1))
                ((case-lambda
                   ((g$n$5182$c1uhW)
                    (begin
                      (if (not (integer-valued? g$n$5182$c1uhW))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$5182$c1uhW)
                        (void))
                      (abs g$n$5182$c1uhW))))
                 (car g$nums$5180$c1uhW))
                (if (g$memv$5056$c1uhW g$t$5181$c1uhW '(2))
                  ((case-lambda
                     ((g$a$5183$c1uhW g$b$5184$c1uhW)
                      (begin
                        (if (not (integer-valued? g$a$5183$c1uhW))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$5183$c1uhW)
                          (void))
                        (if (not (integer-valued? g$b$5184$c1uhW))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$5184$c1uhW)
                          (void))
                        (if (g$zero?$5101$c1uhW g$b$5184$c1uhW)
                          (abs g$a$5183$c1uhW)
                          (abs (g$gcd$5106$c1uhW
                                 g$b$5184$c1uhW
                                 (mod g$a$5183$c1uhW g$b$5184$c1uhW)))))))
                   (car g$nums$5180$c1uhW)
                   (g$cadr$5072$c1uhW g$nums$5180$c1uhW))
                  (g$fold-left$5066$c1uhW
                    g$gcd$5106$c1uhW
                    (abs (car g$nums$5180$c1uhW))
                    (cdr g$nums$5180$c1uhW)))))))
         (length g$nums$5180$c1uhW)))))
   (g$lcm$5107$c1uhW
     g$lcm$5299$c1uhW
     (case-lambda
       (g$nums$5185$c1uhW
        ((case-lambda
           ((g$t$5186$c1uhW)
            (if (g$memv$5056$c1uhW g$t$5186$c1uhW '(0))
              '1
              (if (g$memv$5056$c1uhW g$t$5186$c1uhW '(1))
                ((case-lambda
                   ((g$n$5187$c1uhW)
                    (begin
                      (if (not (integer-valued? g$n$5187$c1uhW))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$5187$c1uhW)
                        (void))
                      (abs g$n$5187$c1uhW))))
                 (car g$nums$5185$c1uhW))
                (if (g$memv$5056$c1uhW g$t$5186$c1uhW '(2))
                  ((case-lambda
                     ((g$a$5188$c1uhW g$b$5189$c1uhW)
                      (begin
                        (if (not (integer-valued? g$a$5188$c1uhW))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$5188$c1uhW)
                          (void))
                        (if (not (integer-valued? g$b$5189$c1uhW))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$5189$c1uhW)
                          (void))
                        (if ((case-lambda
                               ((g$t$5190$c1uhW)
                                (if g$t$5190$c1uhW
                                  g$t$5190$c1uhW
                                  (begin
                                    '#f
                                    (g$zero?$5101$c1uhW g$b$5189$c1uhW)))))
                             (g$zero?$5101$c1uhW g$a$5188$c1uhW))
                          '0
                          (abs (* (/ g$a$5188$c1uhW
                                     (g$gcd$5106$c1uhW
                                       g$a$5188$c1uhW
                                       g$b$5189$c1uhW))
                                  g$b$5189$c1uhW))))))
                   (car g$nums$5185$c1uhW)
                   (g$cadr$5072$c1uhW g$nums$5185$c1uhW))
                  (g$fold-left$5066$c1uhW
                    g$lcm$5107$c1uhW
                    (abs (car g$nums$5185$c1uhW))
                    (cdr g$nums$5185$c1uhW)))))))
         (length g$nums$5185$c1uhW)))))
   (g$string=?$5114$c1uhW
     g$string=?$5300$c1uhW
     (case-lambda
       ((g$a$5191$c1uhW g$b$5192$c1uhW . g$rest$5193$c1uhW)
        (begin
          (if (not (string? g$a$5191$c1uhW))
            (assertion-violation 'string=? '"not a string" g$a$5191$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5194$c1uhW)
               (begin
                 (if (not (string? g$x$5194$c1uhW))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$5194$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5195$c1uhW)
                     (begin
                       (set! g$a$5191$c1uhW g$x$5194$c1uhW)
                       g$r$5195$c1uhW)))
                  (= (string-compare g$a$5191$c1uhW g$x$5194$c1uhW) '0)))))
            (cons g$b$5192$c1uhW g$rest$5193$c1uhW))))))
   (g$string<?$5115$c1uhW
     g$string<?$5301$c1uhW
     (case-lambda
       ((g$a$5196$c1uhW g$b$5197$c1uhW . g$rest$5198$c1uhW)
        (begin
          (if (not (string? g$a$5196$c1uhW))
            (assertion-violation 'string<? '"not a string" g$a$5196$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5199$c1uhW)
               (begin
                 (if (not (string? g$x$5199$c1uhW))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$5199$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5200$c1uhW)
                     (begin
                       (set! g$a$5196$c1uhW g$x$5199$c1uhW)
                       g$r$5200$c1uhW)))
                  (< (string-compare g$a$5196$c1uhW g$x$5199$c1uhW) '0)))))
            (cons g$b$5197$c1uhW g$rest$5198$c1uhW))))))
   (g$string>?$5116$c1uhW
     g$string>?$5302$c1uhW
     (case-lambda
       ((g$a$5201$c1uhW g$b$5202$c1uhW . g$rest$5203$c1uhW)
        (begin
          (if (not (string? g$a$5201$c1uhW))
            (assertion-violation 'string>? '"not a string" g$a$5201$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5204$c1uhW)
               (begin
                 (if (not (string? g$x$5204$c1uhW))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$5204$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5205$c1uhW)
                     (begin
                       (set! g$a$5201$c1uhW g$x$5204$c1uhW)
                       g$r$5205$c1uhW)))
                  (> (string-compare g$a$5201$c1uhW g$x$5204$c1uhW) '0)))))
            (cons g$b$5202$c1uhW g$rest$5203$c1uhW))))))
   (g$string<=?$5117$c1uhW
     g$string<=?$5303$c1uhW
     (case-lambda
       ((g$a$5206$c1uhW g$b$5207$c1uhW . g$rest$5208$c1uhW)
        (begin
          (if (not (string? g$a$5206$c1uhW))
            (assertion-violation 'string<=? '"not a string" g$a$5206$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5209$c1uhW)
               (begin
                 (if (not (string? g$x$5209$c1uhW))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$5209$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5210$c1uhW)
                     (begin
                       (set! g$a$5206$c1uhW g$x$5209$c1uhW)
                       g$r$5210$c1uhW)))
                  (<= (string-compare g$a$5206$c1uhW g$x$5209$c1uhW) '0)))))
            (cons g$b$5207$c1uhW g$rest$5208$c1uhW))))))
   (g$string>=?$5118$c1uhW
     g$string>=?$5304$c1uhW
     (case-lambda
       ((g$a$5211$c1uhW g$b$5212$c1uhW . g$rest$5213$c1uhW)
        (begin
          (if (not (string? g$a$5211$c1uhW))
            (assertion-violation 'string>=? '"not a string" g$a$5211$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5214$c1uhW)
               (begin
                 (if (not (string? g$x$5214$c1uhW))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$5214$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5215$c1uhW)
                     (begin
                       (set! g$a$5211$c1uhW g$x$5214$c1uhW)
                       g$r$5215$c1uhW)))
                  (>= (string-compare g$a$5211$c1uhW g$x$5214$c1uhW) '0)))))
            (cons g$b$5212$c1uhW g$rest$5213$c1uhW))))))
   (g$symbol=?$5119$c1uhW
     g$symbol=?$5305$c1uhW
     (case-lambda
       ((g$a$5216$c1uhW g$b$5217$c1uhW . g$rest$5218$c1uhW)
        (begin
          (if (not (symbol? g$a$5216$c1uhW))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5216$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5219$c1uhW)
               (begin
                 (if (not (symbol? g$x$5219$c1uhW))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$5219$c1uhW)
                   (void))
                 (eq? g$a$5216$c1uhW g$x$5219$c1uhW))))
            (cons g$b$5217$c1uhW g$rest$5218$c1uhW))))))
   (g$boolean=?$5120$c1uhW
     g$boolean=?$5306$c1uhW
     (case-lambda
       ((g$a$5220$c1uhW g$b$5221$c1uhW . g$rest$5222$c1uhW)
        (begin
          (if (not (boolean? g$a$5220$c1uhW))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5220$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5223$c1uhW)
               (begin
                 (if (not (boolean? g$x$5223$c1uhW))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5223$c1uhW)
                   (void))
                 (eq? g$a$5220$c1uhW g$x$5223$c1uhW))))
            (cons g$b$5221$c1uhW g$rest$5222$c1uhW))))))
   (g$char=?$5127$c1uhW
     g$char=?$5307$c1uhW
     (case-lambda
       ((g$a$5224$c1uhW g$b$5225$c1uhW . g$rest$5226$c1uhW)
        (begin
          (if (not (char? g$a$5224$c1uhW))
            (assertion-violation 'char=? '"not a char" g$a$5224$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5227$c1uhW)
               (begin
                 (if (not (char? g$x$5227$c1uhW))
                   (assertion-violation 'char=? '"not a char" g$x$5227$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5228$c1uhW)
                     (begin
                       (set! g$a$5224$c1uhW g$x$5227$c1uhW)
                       g$r$5228$c1uhW)))
                  (= (char->integer g$a$5224$c1uhW)
                     (char->integer g$x$5227$c1uhW))))))
            (cons g$b$5225$c1uhW g$rest$5226$c1uhW))))))
   (g$char<?$5128$c1uhW
     g$char<?$5308$c1uhW
     (case-lambda
       ((g$a$5229$c1uhW g$b$5230$c1uhW . g$rest$5231$c1uhW)
        (begin
          (if (not (char? g$a$5229$c1uhW))
            (assertion-violation 'char<? '"not a char" g$a$5229$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5232$c1uhW)
               (begin
                 (if (not (char? g$x$5232$c1uhW))
                   (assertion-violation 'char<? '"not a char" g$x$5232$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5233$c1uhW)
                     (begin
                       (set! g$a$5229$c1uhW g$x$5232$c1uhW)
                       g$r$5233$c1uhW)))
                  (< (char->integer g$a$5229$c1uhW)
                     (char->integer g$x$5232$c1uhW))))))
            (cons g$b$5230$c1uhW g$rest$5231$c1uhW))))))
   (g$char>?$5129$c1uhW
     g$char>?$5309$c1uhW
     (case-lambda
       ((g$a$5234$c1uhW g$b$5235$c1uhW . g$rest$5236$c1uhW)
        (begin
          (if (not (char? g$a$5234$c1uhW))
            (assertion-violation 'char>? '"not a char" g$a$5234$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5237$c1uhW)
               (begin
                 (if (not (char? g$x$5237$c1uhW))
                   (assertion-violation 'char>? '"not a char" g$x$5237$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5238$c1uhW)
                     (begin
                       (set! g$a$5234$c1uhW g$x$5237$c1uhW)
                       g$r$5238$c1uhW)))
                  (> (char->integer g$a$5234$c1uhW)
                     (char->integer g$x$5237$c1uhW))))))
            (cons g$b$5235$c1uhW g$rest$5236$c1uhW))))))
   (g$char<=?$5130$c1uhW
     g$char<=?$5310$c1uhW
     (case-lambda
       ((g$a$5239$c1uhW g$b$5240$c1uhW . g$rest$5241$c1uhW)
        (begin
          (if (not (char? g$a$5239$c1uhW))
            (assertion-violation 'char<=? '"not a char" g$a$5239$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5242$c1uhW)
               (begin
                 (if (not (char? g$x$5242$c1uhW))
                   (assertion-violation 'char<=? '"not a char" g$x$5242$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5243$c1uhW)
                     (begin
                       (set! g$a$5239$c1uhW g$x$5242$c1uhW)
                       g$r$5243$c1uhW)))
                  (<= (char->integer g$a$5239$c1uhW)
                      (char->integer g$x$5242$c1uhW))))))
            (cons g$b$5240$c1uhW g$rest$5241$c1uhW))))))
   (g$char>=?$5131$c1uhW
     g$char>=?$5311$c1uhW
     (case-lambda
       ((g$a$5244$c1uhW g$b$5245$c1uhW . g$rest$5246$c1uhW)
        (begin
          (if (not (char? g$a$5244$c1uhW))
            (assertion-violation 'char>=? '"not a char" g$a$5244$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5247$c1uhW)
               (begin
                 (if (not (char? g$x$5247$c1uhW))
                   (assertion-violation 'char>=? '"not a char" g$x$5247$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5248$c1uhW)
                     (begin
                       (set! g$a$5244$c1uhW g$x$5247$c1uhW)
                       g$r$5248$c1uhW)))
                  (>= (char->integer g$a$5244$c1uhW)
                      (char->integer g$x$5247$c1uhW))))))
            (cons g$b$5245$c1uhW g$rest$5246$c1uhW))))))
   (g$rationalize$5132$c1uhW
     g$rationalize$5312$c1uhW
     (case-lambda
       ((g$x$5249$c1uhW g$e$5250$c1uhW)
        (if (if (infinite? g$x$5249$c1uhW)
              (begin '#f (infinite? g$e$5250$c1uhW))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5251$c1uhW)
              (if (if (exact? g$x$5249$c1uhW)
                    (begin '#f (exact? g$e$5250$c1uhW))
                    '#f)
                g$r$5251$c1uhW
                (inexact g$r$5251$c1uhW))))
           (apply
             /
             (g$find-ratio$5133$c1uhW g$x$5249$c1uhW g$e$5250$c1uhW)))))))
   (g$find-ratio$5133$c1uhW
     g$find-ratio$5313$c1uhW
     (case-lambda
       ((g$x$5252$c1uhW g$e$5253$c1uhW)
        (g$find-ratio-between$5134$c1uhW
          (- g$x$5252$c1uhW g$e$5253$c1uhW)
          (+ g$x$5252$c1uhW g$e$5253$c1uhW)))))
   (g$find-ratio-between$5134$c1uhW
     g$find-ratio-between$5314$c1uhW
     (case-lambda
       ((g$x$5254$c1uhW g$y$5255$c1uhW)
        (letrec* ((g$sr$5256$c1uhW
                    (case-lambda
                      ((g$x$5258$c1uhW g$y$5259$c1uhW)
                       ((case-lambda
                          ((g$fx$5260$c1uhW g$fy$5261$c1uhW)
                           (if (>= g$fx$5260$c1uhW g$x$5258$c1uhW)
                             (list g$fx$5260$c1uhW '1)
                             (if (= g$fx$5260$c1uhW g$fy$5261$c1uhW)
                               ((case-lambda
                                  ((g$rat$5262$c1uhW)
                                   (list
                                     (+ (g$cadr$5072$c1uhW g$rat$5262$c1uhW)
                                        (* g$fx$5260$c1uhW
                                           (car g$rat$5262$c1uhW)))
                                     (car g$rat$5262$c1uhW))))
                                (g$sr$5256$c1uhW
                                  (/ (- g$y$5259$c1uhW g$fy$5261$c1uhW))
                                  (/ (- g$x$5258$c1uhW g$fx$5260$c1uhW))))
                               (list (+ '1 g$fx$5260$c1uhW) '1)))))
                        (exact (floor g$x$5258$c1uhW))
                        (exact (floor g$y$5259$c1uhW)))))))
          (if (< g$y$5255$c1uhW g$x$5254$c1uhW)
            (g$find-ratio-between$5134$c1uhW g$y$5255$c1uhW g$x$5254$c1uhW)
            (if (>= g$x$5254$c1uhW g$y$5255$c1uhW)
              (list g$x$5254$c1uhW '1)
              (if (g$positive?$5099$c1uhW g$x$5254$c1uhW)
                (g$sr$5256$c1uhW g$x$5254$c1uhW g$y$5255$c1uhW)
                (if (g$negative?$5100$c1uhW g$y$5255$c1uhW)
                  ((case-lambda
                     ((g$rat$5257$c1uhW)
                      (list
                        (- (car g$rat$5257$c1uhW))
                        (g$cadr$5072$c1uhW g$rat$5257$c1uhW))))
                   (g$sr$5256$c1uhW (- g$y$5255$c1uhW) (- g$x$5254$c1uhW)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5503$c1uhW g$using$5536$c1uhW (clr-using-internal 'system))
   (g$using$5505$c1uhW
     g$using$5537$c1uhW
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5506$c1uhW
     g$make-eq-hashtable$5538$c1uhW
     (case-lambda
       (() (g$make-eq-hashtable$5506$c1uhW '32))
       ((g$k$5515$c1uhW)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5515$c1uhW)))))
   (g$make-eqv-hashtable$5507$c1uhW
     g$make-eqv-hashtable$5539$c1uhW
     (case-lambda
       (() (g$make-eqv-hashtable$5507$c1uhW '32))
       ((g$k$5516$c1uhW) (make-hashtable eqv-hash eqv? g$k$5516$c1uhW))))
   (g$hashtable-size$5508$c1uhW
     g$hashtable-size$5540$c1uhW
     (case-lambda
       ((g$ht$5517$c1uhW)
        (clr-call-internal 'hashtable 'get_count g$ht$5517$c1uhW))))
   (g$hashtable-ref$5509$c1uhW
     g$hashtable-ref$5541$c1uhW
     (case-lambda
       ((g$ht$5518$c1uhW g$key$5519$c1uhW g$default$5520$c1uhW)
        (letrec* ((g$r$5521$c1uhW
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5518$c1uhW
                      g$key$5519$c1uhW)))
          (if (not (null? g$r$5521$c1uhW))
            g$r$5521$c1uhW
            g$default$5520$c1uhW)))))
   (g$hashtable-set!$5510$c1uhW
     g$hashtable-set!$5542$c1uhW
     (case-lambda
       ((g$ht$5522$c1uhW g$key$5523$c1uhW g$obj$5524$c1uhW)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5522$c1uhW
          g$key$5523$c1uhW
          g$obj$5524$c1uhW))))
   (g$hashtable-delete!$5511$c1uhW
     g$hashtable-delete!$5543$c1uhW
     (case-lambda
       ((g$ht$5525$c1uhW g$key$5526$c1uhW)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5525$c1uhW
          g$key$5526$c1uhW))))
   (g$hashtable-contains?$5512$c1uhW
     g$hashtable-contains?$5544$c1uhW
     (case-lambda
       ((g$ht$5527$c1uhW g$key$5528$c1uhW)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5527$c1uhW
          g$key$5528$c1uhW))))
   (g$hashtable-update!$5513$c1uhW
     g$hashtable-update!$5545$c1uhW
     (case-lambda
       ((g$ht$5529$c1uhW
          g$key$5530$c1uhW
          g$proc$5531$c1uhW
          g$default$5532$c1uhW)
        (g$hashtable-set!$5510$c1uhW
          g$ht$5529$c1uhW
          g$key$5530$c1uhW
          (g$proc$5531$c1uhW
            (g$hashtable-ref$5509$c1uhW
              g$ht$5529$c1uhW
              g$key$5530$c1uhW
              g$default$5532$c1uhW))))))
   (g$hashtable-clear!$5514$c1uhW
     g$hashtable-clear!$5546$c1uhW
     (case-lambda
       ((g$ht$5533$c1uhW) (g$hashtable-clear!$5514$c1uhW g$ht$5533$c1uhW '32))
       ((g$ht$5534$c1uhW g$k$5535$c1uhW)
        (clr-call-internal 'hashtable 'clear g$ht$5534$c1uhW)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5548$c1uhW g$using$5555$c1uhW (clr-using-internal 'system.io))
   (g$file-exists?$5549$c1uhW
     g$file-exists?$5556$c1uhW
     (case-lambda
       ((g$fn$5552$c1uhW)
        (clr-call-internal 'file 'exists '() g$fn$5552$c1uhW))))
   (g$delete-file$5550$c1uhW
     g$delete-file$5557$c1uhW
     (case-lambda
       ((g$fn$5553$c1uhW)
        (clr-call-internal 'file 'delete '() g$fn$5553$c1uhW))))
   (g$get-directory-name$5551$c1uhW
     g$get-directory-name$5558$c1uhW
     (case-lambda
       ((g$path$5554$c1uhW)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5554$c1uhW)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5559$c1uhW
     g$native-endianness$5670$c1uhW
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5560$c1uhW
     g$bytevector-u16-ref$5671$c1uhW
     (case-lambda
       ((g$bytevector$5588$c1uhW g$k$5589$c1uhW g$endianness$5590$c1uhW)
        (bytevector-uint-ref
          g$bytevector$5588$c1uhW
          g$k$5589$c1uhW
          g$endianness$5590$c1uhW
          '2))))
   (g$bytevector-s16-ref$5561$c1uhW
     g$bytevector-s16-ref$5672$c1uhW
     (case-lambda
       ((g$bytevector$5591$c1uhW g$k$5592$c1uhW g$endianness$5593$c1uhW)
        (bytevector-sint-ref
          g$bytevector$5591$c1uhW
          g$k$5592$c1uhW
          g$endianness$5593$c1uhW
          '2))))
   (g$bytevector-u16-native-ref$5562$c1uhW
     g$bytevector-u16-native-ref$5673$c1uhW
     (case-lambda
       ((g$bytevector$5594$c1uhW g$k$5595$c1uhW)
        (bytevector-uint-ref
          g$bytevector$5594$c1uhW
          g$k$5595$c1uhW
          (g$native-endianness$5559$c1uhW)
          '2))))
   (g$bytevector-s16-native-ref$5563$c1uhW
     g$bytevector-s16-native-ref$5674$c1uhW
     (case-lambda
       ((g$bytevector$5596$c1uhW g$k$5597$c1uhW)
        (bytevector-sint-ref
          g$bytevector$5596$c1uhW
          g$k$5597$c1uhW
          (g$native-endianness$5559$c1uhW)
          '2))))
   (g$bytevector-u16-set!$5564$c1uhW
     g$bytevector-u16-set!$5675$c1uhW
     (case-lambda
       ((g$bytevector$5598$c1uhW
          g$k$5599$c1uhW
          g$n$5600$c1uhW
          g$endianness$5601$c1uhW)
        (bytevector-uint-set!
          g$bytevector$5598$c1uhW
          g$k$5599$c1uhW
          g$n$5600$c1uhW
          g$endianness$5601$c1uhW
          '2))))
   (g$bytevector-s16-set!$5565$c1uhW
     g$bytevector-s16-set!$5676$c1uhW
     (case-lambda
       ((g$bytevector$5602$c1uhW
          g$k$5603$c1uhW
          g$n$5604$c1uhW
          g$endianness$5605$c1uhW)
        (bytevector-sint-set!
          g$bytevector$5602$c1uhW
          g$k$5603$c1uhW
          g$n$5604$c1uhW
          g$endianness$5605$c1uhW
          '2))))
   (g$bytevector-u16-native-set!$5566$c1uhW
     g$bytevector-u16-native-set!$5677$c1uhW
     (case-lambda
       ((g$bytevector$5606$c1uhW g$k$5607$c1uhW g$n$5608$c1uhW)
        (bytevector-uint-set!
          g$bytevector$5606$c1uhW
          g$k$5607$c1uhW
          g$n$5608$c1uhW
          (g$native-endianness$5559$c1uhW)
          '2))))
   (g$bytevector-s16-native-set!$5567$c1uhW
     g$bytevector-s16-native-set!$5678$c1uhW
     (case-lambda
       ((g$bytevector$5609$c1uhW g$k$5610$c1uhW g$n$5611$c1uhW)
        (bytevector-sint-set!
          g$bytevector$5609$c1uhW
          g$k$5610$c1uhW
          g$n$5611$c1uhW
          (g$native-endianness$5559$c1uhW)
          '2))))
   (g$bytevector-u32-ref$5568$c1uhW
     g$bytevector-u32-ref$5679$c1uhW
     (case-lambda
       ((g$bytevector$5612$c1uhW g$k$5613$c1uhW g$endianness$5614$c1uhW)
        (bytevector-uint-ref
          g$bytevector$5612$c1uhW
          g$k$5613$c1uhW
          g$endianness$5614$c1uhW
          '4))))
   (g$bytevector-s32-ref$5569$c1uhW
     g$bytevector-s32-ref$5680$c1uhW
     (case-lambda
       ((g$bytevector$5615$c1uhW g$k$5616$c1uhW g$endianness$5617$c1uhW)
        (bytevector-sint-ref
          g$bytevector$5615$c1uhW
          g$k$5616$c1uhW
          g$endianness$5617$c1uhW
          '4))))
   (g$bytevector-u32-native-ref$5570$c1uhW
     g$bytevector-u32-native-ref$5681$c1uhW
     (case-lambda
       ((g$bytevector$5618$c1uhW g$k$5619$c1uhW)
        (bytevector-uint-ref
          g$bytevector$5618$c1uhW
          g$k$5619$c1uhW
          (g$native-endianness$5559$c1uhW)
          '4))))
   (g$bytevector-s32-native-ref$5571$c1uhW
     g$bytevector-s32-native-ref$5682$c1uhW
     (case-lambda
       ((g$bytevector$5620$c1uhW g$k$5621$c1uhW)
        (bytevector-sint-ref
          g$bytevector$5620$c1uhW
          g$k$5621$c1uhW
          (g$native-endianness$5559$c1uhW)
          '4))))
   (g$bytevector-u32-set!$5572$c1uhW
     g$bytevector-u32-set!$5683$c1uhW
     (case-lambda
       ((g$bytevector$5622$c1uhW
          g$k$5623$c1uhW
          g$n$5624$c1uhW
          g$endianness$5625$c1uhW)
        (bytevector-uint-set!
          g$bytevector$5622$c1uhW
          g$k$5623$c1uhW
          g$n$5624$c1uhW
          g$endianness$5625$c1uhW
          '4))))
   (g$bytevector-s32-set!$5573$c1uhW
     g$bytevector-s32-set!$5684$c1uhW
     (case-lambda
       ((g$bytevector$5626$c1uhW
          g$k$5627$c1uhW
          g$n$5628$c1uhW
          g$endianness$5629$c1uhW)
        (bytevector-sint-set!
          g$bytevector$5626$c1uhW
          g$k$5627$c1uhW
          g$n$5628$c1uhW
          g$endianness$5629$c1uhW
          '4))))
   (g$bytevector-u32-native-set!$5574$c1uhW
     g$bytevector-u32-native-set!$5685$c1uhW
     (case-lambda
       ((g$bytevector$5630$c1uhW g$k$5631$c1uhW g$n$5632$c1uhW)
        (bytevector-uint-set!
          g$bytevector$5630$c1uhW
          g$k$5631$c1uhW
          g$n$5632$c1uhW
          (g$native-endianness$5559$c1uhW)
          '4))))
   (g$bytevector-s32-native-set!$5575$c1uhW
     g$bytevector-s32-native-set!$5686$c1uhW
     (case-lambda
       ((g$bytevector$5633$c1uhW g$k$5634$c1uhW g$n$5635$c1uhW)
        (bytevector-sint-set!
          g$bytevector$5633$c1uhW
          g$k$5634$c1uhW
          g$n$5635$c1uhW
          (g$native-endianness$5559$c1uhW)
          '4))))
   (g$bytevector-u64-ref$5576$c1uhW
     g$bytevector-u64-ref$5687$c1uhW
     (case-lambda
       ((g$bytevector$5636$c1uhW g$k$5637$c1uhW g$endianness$5638$c1uhW)
        (bytevector-uint-ref
          g$bytevector$5636$c1uhW
          g$k$5637$c1uhW
          g$endianness$5638$c1uhW
          '8))))
   (g$bytevector-s64-ref$5577$c1uhW
     g$bytevector-s64-ref$5688$c1uhW
     (case-lambda
       ((g$bytevector$5639$c1uhW g$k$5640$c1uhW g$endianness$5641$c1uhW)
        (bytevector-sint-ref
          g$bytevector$5639$c1uhW
          g$k$5640$c1uhW
          g$endianness$5641$c1uhW
          '8))))
   (g$bytevector-u64-native-ref$5578$c1uhW
     g$bytevector-u64-native-ref$5689$c1uhW
     (case-lambda
       ((g$bytevector$5642$c1uhW g$k$5643$c1uhW)
        (bytevector-uint-ref
          g$bytevector$5642$c1uhW
          g$k$5643$c1uhW
          (g$native-endianness$5559$c1uhW)
          '8))))
   (g$bytevector-s64-native-ref$5579$c1uhW
     g$bytevector-s64-native-ref$5690$c1uhW
     (case-lambda
       ((g$bytevector$5644$c1uhW g$k$5645$c1uhW)
        (bytevector-sint-ref
          g$bytevector$5644$c1uhW
          g$k$5645$c1uhW
          (g$native-endianness$5559$c1uhW)
          '8))))
   (g$bytevector-u64-set!$5580$c1uhW
     g$bytevector-u64-set!$5691$c1uhW
     (case-lambda
       ((g$bytevector$5646$c1uhW
          g$k$5647$c1uhW
          g$n$5648$c1uhW
          g$endianness$5649$c1uhW)
        (bytevector-uint-set!
          g$bytevector$5646$c1uhW
          g$k$5647$c1uhW
          g$n$5648$c1uhW
          g$endianness$5649$c1uhW
          '8))))
   (g$bytevector-s64-set!$5581$c1uhW
     g$bytevector-s64-set!$5692$c1uhW
     (case-lambda
       ((g$bytevector$5650$c1uhW
          g$k$5651$c1uhW
          g$n$5652$c1uhW
          g$endianness$5653$c1uhW)
        (bytevector-sint-set!
          g$bytevector$5650$c1uhW
          g$k$5651$c1uhW
          g$n$5652$c1uhW
          g$endianness$5653$c1uhW
          '8))))
   (g$bytevector-u64-native-set!$5582$c1uhW
     g$bytevector-u64-native-set!$5693$c1uhW
     (case-lambda
       ((g$bytevector$5654$c1uhW g$k$5655$c1uhW g$n$5656$c1uhW)
        (bytevector-uint-set!
          g$bytevector$5654$c1uhW
          g$k$5655$c1uhW
          g$n$5656$c1uhW
          (g$native-endianness$5559$c1uhW)
          '8))))
   (g$bytevector-s64-native-set!$5583$c1uhW
     g$bytevector-s64-native-set!$5694$c1uhW
     (case-lambda
       ((g$bytevector$5657$c1uhW g$k$5658$c1uhW g$n$5659$c1uhW)
        (bytevector-sint-set!
          g$bytevector$5657$c1uhW
          g$k$5658$c1uhW
          g$n$5659$c1uhW
          (g$native-endianness$5559$c1uhW)
          '8))))
   (g$bytevector-ieee-single-native-ref$5584$c1uhW
     g$bytevector-ieee-single-native-ref$5695$c1uhW
     (case-lambda
       ((g$bytevector$5660$c1uhW g$k$5661$c1uhW)
        (if (not (g$zero?$5293$c1uhW (mod g$k$5661$c1uhW '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5661$c1uhW)
          (bytevector-ieee-single-ref
            g$bytevector$5660$c1uhW
            g$k$5661$c1uhW
            (g$native-endianness$5559$c1uhW))))))
   (g$bytevector-ieee-double-native-ref$5585$c1uhW
     g$bytevector-ieee-double-native-ref$5696$c1uhW
     (case-lambda
       ((g$bytevector$5662$c1uhW g$k$5663$c1uhW)
        (if (not (g$zero?$5293$c1uhW (mod g$k$5663$c1uhW '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5663$c1uhW)
          (bytevector-ieee-double-ref
            g$bytevector$5662$c1uhW
            g$k$5663$c1uhW
            (g$native-endianness$5559$c1uhW))))))
   (g$bytevector-ieee-single-native-set!$5586$c1uhW
     g$bytevector-ieee-single-native-set!$5697$c1uhW
     (case-lambda
       ((g$bytevector$5664$c1uhW g$k$5665$c1uhW g$x$5666$c1uhW)
        (if (not (g$zero?$5293$c1uhW (mod g$k$5665$c1uhW '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5665$c1uhW)
          (bytevector-ieee-single-set!
            g$bytevector$5664$c1uhW
            g$k$5665$c1uhW
            g$x$5666$c1uhW
            (g$native-endianness$5559$c1uhW))))))
   (g$bytevector-ieee-double-native-set!$5587$c1uhW
     g$bytevector-ieee-double-native-set!$5698$c1uhW
     (case-lambda
       ((g$bytevector$5667$c1uhW g$k$5668$c1uhW g$x$5669$c1uhW)
        (if (not (g$zero?$5293$c1uhW (mod g$k$5668$c1uhW '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5668$c1uhW)
          (bytevector-ieee-double-set!
            g$bytevector$5667$c1uhW
            g$k$5668$c1uhW
            g$x$5669$c1uhW
            (g$native-endianness$5559$c1uhW)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6690$5699$c1uhW
     g$6690$5794$c1uhW
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6693$c1uhW
       '#f
       '#f
       '#()))
   (g$6692$5700$c1uhW g$6692$5795$c1uhW '#f)
   (g$6691$5701$c1uhW
     g$6691$5796$c1uhW
     (make-record-constructor-descriptor
       g$6690$5699$c1uhW
       '#f
       g$6692$5700$c1uhW))
   (g$&condition?$5702$c1uhW
     g$&condition?$5797$c1uhW
     (record-predicate g$6690$5699$c1uhW))
   (g$make-&condition$5703$c1uhW
     g$make-&condition$5798$c1uhW
     (record-constructor g$6691$5701$c1uhW))
   (g$&condition-rtd$5704$c1uhW
     g$&condition-rtd$5799$c1uhW
     g$6690$5699$c1uhW)
   (g$&condition-rcd$5705$c1uhW
     g$&condition-rcd$5800$c1uhW
     g$6691$5701$c1uhW)
   (g$6706$5706$c1uhW
     g$6706$5801$c1uhW
     (make-record-type-descriptor
       '&message
       g$6690$5699$c1uhW
       'g$6709$c1uhW
       '#f
       '#f
       '#((immutable message))))
   (g$6708$5707$c1uhW g$6708$5802$c1uhW '#f)
   (g$6707$5708$c1uhW
     g$6707$5803$c1uhW
     (make-record-constructor-descriptor
       g$6706$5706$c1uhW
       g$6691$5701$c1uhW
       g$6708$5707$c1uhW))
   (g$6705$5709$c1uhW
     g$6705$5804$c1uhW
     (record-predicate g$6706$5706$c1uhW))
   (g$make-message-condition$5710$c1uhW
     g$make-message-condition$5805$c1uhW
     (record-constructor g$6707$5708$c1uhW))
   (g$6704$5711$c1uhW
     g$6704$5806$c1uhW
     (record-accessor g$6706$5706$c1uhW '0))
   (g$message-condition?$5712$c1uhW
     g$message-condition?$5807$c1uhW
     (condition-predicate g$6706$5706$c1uhW))
   (g$condition-message$5713$c1uhW
     g$condition-message$5808$c1uhW
     (condition-accessor g$6706$5706$c1uhW g$6704$5711$c1uhW))
   (g$6722$5714$c1uhW
     g$6722$5809$c1uhW
     (make-record-type-descriptor
       '&warning
       g$6690$5699$c1uhW
       'g$6725$c1uhW
       '#f
       '#f
       '#()))
   (g$6724$5715$c1uhW g$6724$5810$c1uhW '#f)
   (g$6723$5716$c1uhW
     g$6723$5811$c1uhW
     (make-record-constructor-descriptor
       g$6722$5714$c1uhW
       g$6691$5701$c1uhW
       g$6724$5715$c1uhW))
   (g$6721$5717$c1uhW
     g$6721$5812$c1uhW
     (record-predicate g$6722$5714$c1uhW))
   (g$make-warning$5718$c1uhW
     g$make-warning$5813$c1uhW
     (record-constructor g$6723$5716$c1uhW))
   (g$warning?$5719$c1uhW
     g$warning?$5814$c1uhW
     (condition-predicate g$6722$5714$c1uhW))
   (g$6736$5720$c1uhW
     g$6736$5815$c1uhW
     (make-record-type-descriptor
       '&serious
       g$6690$5699$c1uhW
       'g$6739$c1uhW
       '#f
       '#f
       '#()))
   (g$6738$5721$c1uhW g$6738$5816$c1uhW '#f)
   (g$6737$5722$c1uhW
     g$6737$5817$c1uhW
     (make-record-constructor-descriptor
       g$6736$5720$c1uhW
       g$6691$5701$c1uhW
       g$6738$5721$c1uhW))
   (g$6735$5723$c1uhW
     g$6735$5818$c1uhW
     (record-predicate g$6736$5720$c1uhW))
   (g$make-serious-condition$5724$c1uhW
     g$make-serious-condition$5819$c1uhW
     (record-constructor g$6737$5722$c1uhW))
   (g$serious-condition?$5725$c1uhW
     g$serious-condition?$5820$c1uhW
     (condition-predicate g$6736$5720$c1uhW))
   (g$6750$5726$c1uhW
     g$6750$5821$c1uhW
     (make-record-type-descriptor
       '&error
       g$6736$5720$c1uhW
       'g$6753$c1uhW
       '#f
       '#f
       '#()))
   (g$6752$5727$c1uhW g$6752$5822$c1uhW '#f)
   (g$6751$5728$c1uhW
     g$6751$5823$c1uhW
     (make-record-constructor-descriptor
       g$6750$5726$c1uhW
       g$6737$5722$c1uhW
       g$6752$5727$c1uhW))
   (g$6749$5729$c1uhW
     g$6749$5824$c1uhW
     (record-predicate g$6750$5726$c1uhW))
   (g$make-error$5730$c1uhW
     g$make-error$5825$c1uhW
     (record-constructor g$6751$5728$c1uhW))
   (g$error?$5731$c1uhW
     g$error?$5826$c1uhW
     (condition-predicate g$6750$5726$c1uhW))
   (g$6764$5732$c1uhW
     g$6764$5827$c1uhW
     (make-record-type-descriptor
       '&violation
       g$6736$5720$c1uhW
       'g$6767$c1uhW
       '#f
       '#f
       '#()))
   (g$6766$5733$c1uhW g$6766$5828$c1uhW '#f)
   (g$6765$5734$c1uhW
     g$6765$5829$c1uhW
     (make-record-constructor-descriptor
       g$6764$5732$c1uhW
       g$6737$5722$c1uhW
       g$6766$5733$c1uhW))
   (g$6763$5735$c1uhW
     g$6763$5830$c1uhW
     (record-predicate g$6764$5732$c1uhW))
   (g$make-violation$5736$c1uhW
     g$make-violation$5831$c1uhW
     (record-constructor g$6765$5734$c1uhW))
   (g$violation?$5737$c1uhW
     g$violation?$5832$c1uhW
     (condition-predicate g$6764$5732$c1uhW))
   (g$6778$5738$c1uhW
     g$6778$5833$c1uhW
     (make-record-type-descriptor
       '&assertion
       g$6764$5732$c1uhW
       'g$6781$c1uhW
       '#f
       '#f
       '#()))
   (g$6780$5739$c1uhW g$6780$5834$c1uhW '#f)
   (g$6779$5740$c1uhW
     g$6779$5835$c1uhW
     (make-record-constructor-descriptor
       g$6778$5738$c1uhW
       g$6765$5734$c1uhW
       g$6780$5739$c1uhW))
   (g$6777$5741$c1uhW
     g$6777$5836$c1uhW
     (record-predicate g$6778$5738$c1uhW))
   (g$make-assertion-violation$5742$c1uhW
     g$make-assertion-violation$5837$c1uhW
     (record-constructor g$6779$5740$c1uhW))
   (g$assertion-violation?$5743$c1uhW
     g$assertion-violation?$5838$c1uhW
     (condition-predicate g$6778$5738$c1uhW))
   (g$6793$5744$c1uhW
     g$6793$5839$c1uhW
     (make-record-type-descriptor
       '&irritants
       g$6690$5699$c1uhW
       'g$6796$c1uhW
       '#f
       '#f
       '#((immutable irritants))))
   (g$6795$5745$c1uhW g$6795$5840$c1uhW '#f)
   (g$6794$5746$c1uhW
     g$6794$5841$c1uhW
     (make-record-constructor-descriptor
       g$6793$5744$c1uhW
       g$6691$5701$c1uhW
       g$6795$5745$c1uhW))
   (g$6792$5747$c1uhW
     g$6792$5842$c1uhW
     (record-predicate g$6793$5744$c1uhW))
   (g$make-irritants-condition$5748$c1uhW
     g$make-irritants-condition$5843$c1uhW
     (record-constructor g$6794$5746$c1uhW))
   (g$6791$5749$c1uhW
     g$6791$5844$c1uhW
     (record-accessor g$6793$5744$c1uhW '0))
   (g$irritants-condition?$5750$c1uhW
     g$irritants-condition?$5845$c1uhW
     (condition-predicate g$6793$5744$c1uhW))
   (g$condition-irritants$5751$c1uhW
     g$condition-irritants$5846$c1uhW
     (condition-accessor g$6793$5744$c1uhW g$6791$5749$c1uhW))
   (g$6810$5752$c1uhW
     g$6810$5847$c1uhW
     (make-record-type-descriptor
       '&who
       g$6690$5699$c1uhW
       'g$6813$c1uhW
       '#f
       '#f
       '#((immutable who))))
   (g$6812$5753$c1uhW g$6812$5848$c1uhW '#f)
   (g$6811$5754$c1uhW
     g$6811$5849$c1uhW
     (make-record-constructor-descriptor
       g$6810$5752$c1uhW
       g$6691$5701$c1uhW
       g$6812$5753$c1uhW))
   (g$6809$5755$c1uhW
     g$6809$5850$c1uhW
     (record-predicate g$6810$5752$c1uhW))
   (g$make-who-condition$5756$c1uhW
     g$make-who-condition$5851$c1uhW
     (record-constructor g$6811$5754$c1uhW))
   (g$6808$5757$c1uhW
     g$6808$5852$c1uhW
     (record-accessor g$6810$5752$c1uhW '0))
   (g$who-condition?$5758$c1uhW
     g$who-condition?$5853$c1uhW
     (condition-predicate g$6810$5752$c1uhW))
   (g$condition-who$5759$c1uhW
     g$condition-who$5854$c1uhW
     (condition-accessor g$6810$5752$c1uhW g$6808$5757$c1uhW))
   (g$6826$5760$c1uhW
     g$6826$5855$c1uhW
     (make-record-type-descriptor
       '&non-continuable
       g$6764$5732$c1uhW
       'g$6829$c1uhW
       '#f
       '#f
       '#()))
   (g$6828$5761$c1uhW g$6828$5856$c1uhW '#f)
   (g$6827$5762$c1uhW
     g$6827$5857$c1uhW
     (make-record-constructor-descriptor
       g$6826$5760$c1uhW
       g$6765$5734$c1uhW
       g$6828$5761$c1uhW))
   (g$6825$5763$c1uhW
     g$6825$5858$c1uhW
     (record-predicate g$6826$5760$c1uhW))
   (g$make-non-continuable-violation$5764$c1uhW
     g$make-non-continuable-violation$5859$c1uhW
     (record-constructor g$6827$5762$c1uhW))
   (g$non-continuable-violation?$5765$c1uhW
     g$non-continuable-violation?$5860$c1uhW
     (condition-predicate g$6826$5760$c1uhW))
   (g$6840$5766$c1uhW
     g$6840$5861$c1uhW
     (make-record-type-descriptor
       '&implementation-restriction
       g$6764$5732$c1uhW
       'g$6843$c1uhW
       '#f
       '#f
       '#()))
   (g$6842$5767$c1uhW g$6842$5862$c1uhW '#f)
   (g$6841$5768$c1uhW
     g$6841$5863$c1uhW
     (make-record-constructor-descriptor
       g$6840$5766$c1uhW
       g$6765$5734$c1uhW
       g$6842$5767$c1uhW))
   (g$6839$5769$c1uhW
     g$6839$5864$c1uhW
     (record-predicate g$6840$5766$c1uhW))
   (g$make-implementation-restriction-violation$5770$c1uhW
     g$make-implementation-restriction-violation$5865$c1uhW
     (record-constructor g$6841$5768$c1uhW))
   (g$implementation-restriction-violation?$5771$c1uhW
     g$implementation-restriction-violation?$5866$c1uhW
     (condition-predicate g$6840$5766$c1uhW))
   (g$6854$5772$c1uhW
     g$6854$5867$c1uhW
     (make-record-type-descriptor
       '&lexical
       g$6764$5732$c1uhW
       'g$6857$c1uhW
       '#f
       '#f
       '#()))
   (g$6856$5773$c1uhW g$6856$5868$c1uhW '#f)
   (g$6855$5774$c1uhW
     g$6855$5869$c1uhW
     (make-record-constructor-descriptor
       g$6854$5772$c1uhW
       g$6765$5734$c1uhW
       g$6856$5773$c1uhW))
   (g$6853$5775$c1uhW
     g$6853$5870$c1uhW
     (record-predicate g$6854$5772$c1uhW))
   (g$make-lexical-violation$5776$c1uhW
     g$make-lexical-violation$5871$c1uhW
     (record-constructor g$6855$5774$c1uhW))
   (g$lexical-violation?$5777$c1uhW
     g$lexical-violation?$5872$c1uhW
     (condition-predicate g$6854$5772$c1uhW))
   (g$6870$5778$c1uhW
     g$6870$5873$c1uhW
     (make-record-type-descriptor
       '&syntax
       g$6764$5732$c1uhW
       'g$6873$c1uhW
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6872$5779$c1uhW g$6872$5874$c1uhW '#f)
   (g$6871$5780$c1uhW
     g$6871$5875$c1uhW
     (make-record-constructor-descriptor
       g$6870$5778$c1uhW
       g$6765$5734$c1uhW
       g$6872$5779$c1uhW))
   (g$6869$5781$c1uhW
     g$6869$5876$c1uhW
     (record-predicate g$6870$5778$c1uhW))
   (g$make-syntax-violation$5782$c1uhW
     g$make-syntax-violation$5877$c1uhW
     (record-constructor g$6871$5780$c1uhW))
   (g$6867$5783$c1uhW
     g$6867$5878$c1uhW
     (record-accessor g$6870$5778$c1uhW '0))
   (g$6868$5784$c1uhW
     g$6868$5879$c1uhW
     (record-accessor g$6870$5778$c1uhW '1))
   (g$syntax-violation?$5785$c1uhW
     g$syntax-violation?$5880$c1uhW
     (condition-predicate g$6870$5778$c1uhW))
   (g$syntax-violation-form$5786$c1uhW
     g$syntax-violation-form$5881$c1uhW
     (condition-accessor g$6870$5778$c1uhW g$6867$5783$c1uhW))
   (g$syntax-violation-subform$5787$c1uhW
     g$syntax-violation-subform$5882$c1uhW
     (condition-accessor g$6870$5778$c1uhW g$6868$5784$c1uhW))
   (g$6888$5788$c1uhW
     g$6888$5883$c1uhW
     (make-record-type-descriptor
       '&undefined
       g$6764$5732$c1uhW
       'g$6891$c1uhW
       '#f
       '#f
       '#()))
   (g$6890$5789$c1uhW g$6890$5884$c1uhW '#f)
   (g$6889$5790$c1uhW
     g$6889$5885$c1uhW
     (make-record-constructor-descriptor
       g$6888$5788$c1uhW
       g$6765$5734$c1uhW
       g$6890$5789$c1uhW))
   (g$6887$5791$c1uhW
     g$6887$5886$c1uhW
     (record-predicate g$6888$5788$c1uhW))
   (g$make-undefined-violation$5792$c1uhW
     g$make-undefined-violation$5887$c1uhW
     (record-constructor g$6889$5790$c1uhW))
   (g$undefined-violation?$5793$c1uhW
     g$undefined-violation?$5888$c1uhW
     (condition-predicate g$6888$5788$c1uhW)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5889$c1uhW
     g$append!$5895$c1uhW
     (case-lambda
       ((g$a$5890$c1uhW . g$b$5891$c1uhW)
        (if (null? g$a$5890$c1uhW)
          g$b$5891$c1uhW
          (if (null? g$b$5891$c1uhW)
            g$a$5890$c1uhW
            (begin
              ((letrec ((g$f$5892$c1uhW
                          (case-lambda
                            ((g$a$5893$c1uhW)
                             ((case-lambda
                                ((g$n$5894$c1uhW)
                                 (if (null? g$n$5894$c1uhW)
                                   (set-cdr! g$a$5893$c1uhW g$b$5891$c1uhW)
                                   (g$f$5892$c1uhW g$n$5894$c1uhW))))
                              (cdr g$a$5893$c1uhW))))))
                 g$f$5892$c1uhW)
               g$a$5890$c1uhW)
              g$a$5890$c1uhW)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$5896$c1uhW g$inexact->exact$5916$c1uhW exact)
   (g$exact->inexact$5897$c1uhW g$exact->inexact$5917$c1uhW inexact)
   (g$sign$5898$c1uhW
     g$sign$5918$c1uhW
     (case-lambda
       ((g$n$5904$c1uhW)
        (if (> g$n$5904$c1uhW '0) '1 (if (< g$n$5904$c1uhW '0) '-1 '0)))))
   (g$quotient$5899$c1uhW
     g$quotient$5919$c1uhW
     (case-lambda
       ((g$n1$5905$c1uhW g$n2$5906$c1uhW)
        (begin
          (if (not (integer-valued? g$n1$5905$c1uhW))
            (assertion-violation 'quotient '"not an integer" g$n1$5905$c1uhW)
            (void))
          (if (not (integer-valued? g$n2$5906$c1uhW))
            (assertion-violation 'quotient '"not an integer" g$n2$5906$c1uhW)
            (void))
          (* (g$sign$5898$c1uhW g$n1$5905$c1uhW)
             (g$sign$5898$c1uhW g$n2$5906$c1uhW)
             (div (abs g$n1$5905$c1uhW) (abs g$n2$5906$c1uhW)))))))
   (g$remainder$5900$c1uhW
     g$remainder$5920$c1uhW
     (case-lambda
       ((g$n1$5907$c1uhW g$n2$5908$c1uhW)
        (begin
          (if (not (integer-valued? g$n1$5907$c1uhW))
            (assertion-violation 'remainder '"not an integer" g$n1$5907$c1uhW)
            (void))
          (if (not (integer-valued? g$n2$5908$c1uhW))
            (assertion-violation 'remainder '"not an integer" g$n2$5908$c1uhW)
            (void))
          (* (g$sign$5898$c1uhW g$n1$5907$c1uhW)
             (mod (abs g$n1$5907$c1uhW) (abs g$n2$5908$c1uhW)))))))
   (g$modulo$5901$c1uhW
     g$modulo$5921$c1uhW
     (case-lambda
       ((g$n1$5909$c1uhW g$n2$5910$c1uhW)
        (begin
          (if (not (integer-valued? g$n1$5909$c1uhW))
            (assertion-violation 'modulo '"not an integer" g$n1$5909$c1uhW)
            (void))
          (if (not (integer-valued? g$n2$5910$c1uhW))
            (assertion-violation 'modulo '"not an integer" g$n2$5910$c1uhW)
            (void))
          (* (g$sign$5898$c1uhW g$n2$5910$c1uhW)
             (mod (* (g$sign$5898$c1uhW g$n2$5910$c1uhW) g$n1$5909$c1uhW)
                  (abs g$n2$5910$c1uhW)))))))
   (g$make-promise$5902$c1uhW
     g$make-promise$5922$c1uhW
     (case-lambda
       ((g$proc$5911$c1uhW)
        ((case-lambda
           ((g$result-ready?$5912$c1uhW g$result$5913$c1uhW)
            (case-lambda
              (()
               (if g$result-ready?$5912$c1uhW
                 g$result$5913$c1uhW
                 ((case-lambda
                    ((g$x$5914$c1uhW)
                     (if g$result-ready?$5912$c1uhW
                       g$result$5913$c1uhW
                       (begin
                         (set! g$result-ready?$5912$c1uhW '#t)
                         (set! g$result$5913$c1uhW g$x$5914$c1uhW)
                         g$result$5913$c1uhW))))
                  (g$proc$5911$c1uhW)))))))
         '#f
         '#f))))
   (g$force$5903$c1uhW
     g$force$5923$c1uhW
     (case-lambda ((g$object$5915$c1uhW) (g$object$5915$c1uhW)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5924$c1uhW
     g$split$5949$c1uhW
     (case-lambda
       ((g$ls$5928$c1uhW)
        ((letrec ((g$loop$5929$c1uhW
                    (case-lambda
                      ((g$rest$5930$c1uhW g$left$5931$c1uhW g$right$5932$c1uhW)
                       (if (null? g$rest$5930$c1uhW)
                         (cons g$left$5931$c1uhW g$right$5932$c1uhW)
                         (if (null? (cdr g$rest$5930$c1uhW))
                           (cons
                             (cons (car g$rest$5930$c1uhW) g$left$5931$c1uhW)
                             g$right$5932$c1uhW)
                           (g$loop$5929$c1uhW
                             (g$cddr$5266$c1uhW g$rest$5930$c1uhW)
                             (cons (car g$rest$5930$c1uhW) g$left$5931$c1uhW)
                             (cons
                               (g$cadr$5264$c1uhW g$rest$5930$c1uhW)
                               g$right$5932$c1uhW))))))))
           g$loop$5929$c1uhW)
         g$ls$5928$c1uhW
         '()
         '()))))
   (g$reverse-it$5925$c1uhW
     g$reverse-it$5950$c1uhW
     (case-lambda
       ((g$head$5933$c1uhW g$tail$5934$c1uhW)
        (if (null? g$head$5933$c1uhW)
          g$tail$5934$c1uhW
          (g$reverse-it$5925$c1uhW
            (cdr g$head$5933$c1uhW)
            (cons (car g$head$5933$c1uhW) g$tail$5934$c1uhW))))))
   (g$merge$5926$c1uhW
     g$merge$5951$c1uhW
     (case-lambda
       ((g$list-1$5935$c1uhW g$list-2$5936$c1uhW g$precedes?$5937$c1uhW)
        ((letrec ((g$loop$5938$c1uhW
                    (case-lambda
                      ((g$source-1$5939$c1uhW
                         g$source-2$5940$c1uhW
                         g$so-far$5941$c1uhW)
                       (if (null? g$source-1$5939$c1uhW)
                         (g$reverse-it$5925$c1uhW
                           g$so-far$5941$c1uhW
                           g$source-2$5940$c1uhW)
                         (if (null? g$source-2$5940$c1uhW)
                           (g$reverse-it$5925$c1uhW
                             g$so-far$5941$c1uhW
                             g$source-1$5939$c1uhW)
                           ((case-lambda
                              ((g$car-1$5942$c1uhW g$car-2$5943$c1uhW)
                               (if (g$precedes?$5937$c1uhW
                                     g$car-2$5943$c1uhW
                                     g$car-1$5942$c1uhW)
                                 (g$loop$5938$c1uhW
                                   g$source-1$5939$c1uhW
                                   (cdr g$source-2$5940$c1uhW)
                                   (cons
                                     g$car-2$5943$c1uhW
                                     g$so-far$5941$c1uhW))
                                 (g$loop$5938$c1uhW
                                   g$source-2$5940$c1uhW
                                   (cdr g$source-1$5939$c1uhW)
                                   (cons
                                     g$car-1$5942$c1uhW
                                     g$so-far$5941$c1uhW)))))
                            (car g$source-1$5939$c1uhW)
                            (car g$source-2$5940$c1uhW))))))))
           g$loop$5938$c1uhW)
         g$list-1$5935$c1uhW
         g$list-2$5936$c1uhW
         '()))))
   (g$list-sort$5927$c1uhW
     g$list-sort$5952$c1uhW
     (case-lambda
       ((g$precedes?$5944$c1uhW g$ls$5945$c1uhW)
        (if (null? g$ls$5945$c1uhW)
          '()
          ((letrec ((g$helper$5946$c1uhW
                      (case-lambda
                        ((g$piece$5947$c1uhW)
                         (if (null? (cdr g$piece$5947$c1uhW))
                           g$piece$5947$c1uhW
                           ((case-lambda
                              ((g$parts$5948$c1uhW)
                               (g$merge$5926$c1uhW
                                 (g$helper$5946$c1uhW (car g$parts$5948$c1uhW))
                                 (g$helper$5946$c1uhW (cdr g$parts$5948$c1uhW))
                                 g$precedes?$5944$c1uhW)))
                            (g$split$5924$c1uhW g$piece$5947$c1uhW)))))))
             g$helper$5946$c1uhW)
           g$ls$5945$c1uhW))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$5959$c1uhW
     g$string-ci=?$6025$c1uhW
     (case-lambda
       ((g$a$5975$c1uhW g$b$5976$c1uhW . g$rest$5977$c1uhW)
        (begin
          (if (not (string? g$a$5975$c1uhW))
            (assertion-violation 'string-ci=? '"not a string" g$a$5975$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5978$c1uhW)
               (begin
                 (if (not (string? g$x$5978$c1uhW))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$5978$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5979$c1uhW)
                     (begin
                       (set! g$a$5975$c1uhW g$x$5978$c1uhW)
                       g$r$5979$c1uhW)))
                  (= (string-ci-compare g$a$5975$c1uhW g$x$5978$c1uhW) '0)))))
            (cons g$b$5976$c1uhW g$rest$5977$c1uhW))))))
   (g$string-ci<?$5960$c1uhW
     g$string-ci<?$6026$c1uhW
     (case-lambda
       ((g$a$5980$c1uhW g$b$5981$c1uhW . g$rest$5982$c1uhW)
        (begin
          (if (not (string? g$a$5980$c1uhW))
            (assertion-violation 'string-ci<? '"not a string" g$a$5980$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5983$c1uhW)
               (begin
                 (if (not (string? g$x$5983$c1uhW))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$5983$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5984$c1uhW)
                     (begin
                       (set! g$a$5980$c1uhW g$x$5983$c1uhW)
                       g$r$5984$c1uhW)))
                  (< (string-ci-compare g$a$5980$c1uhW g$x$5983$c1uhW) '0)))))
            (cons g$b$5981$c1uhW g$rest$5982$c1uhW))))))
   (g$string-ci>?$5961$c1uhW
     g$string-ci>?$6027$c1uhW
     (case-lambda
       ((g$a$5985$c1uhW g$b$5986$c1uhW . g$rest$5987$c1uhW)
        (begin
          (if (not (string? g$a$5985$c1uhW))
            (assertion-violation 'string-ci>? '"not a string" g$a$5985$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5988$c1uhW)
               (begin
                 (if (not (string? g$x$5988$c1uhW))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$5988$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5989$c1uhW)
                     (begin
                       (set! g$a$5985$c1uhW g$x$5988$c1uhW)
                       g$r$5989$c1uhW)))
                  (> (string-ci-compare g$a$5985$c1uhW g$x$5988$c1uhW) '0)))))
            (cons g$b$5986$c1uhW g$rest$5987$c1uhW))))))
   (g$string-ci<=?$5962$c1uhW
     g$string-ci<=?$6028$c1uhW
     (case-lambda
       ((g$a$5990$c1uhW g$b$5991$c1uhW . g$rest$5992$c1uhW)
        (begin
          (if (not (string? g$a$5990$c1uhW))
            (assertion-violation 'string-ci<=? '"not a string" g$a$5990$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5993$c1uhW)
               (begin
                 (if (not (string? g$x$5993$c1uhW))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$5993$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5994$c1uhW)
                     (begin
                       (set! g$a$5990$c1uhW g$x$5993$c1uhW)
                       g$r$5994$c1uhW)))
                  (<= (string-ci-compare g$a$5990$c1uhW g$x$5993$c1uhW) '0)))))
            (cons g$b$5991$c1uhW g$rest$5992$c1uhW))))))
   (g$string-ci>=?$5963$c1uhW
     g$string-ci>=?$6029$c1uhW
     (case-lambda
       ((g$a$5995$c1uhW g$b$5996$c1uhW . g$rest$5997$c1uhW)
        (begin
          (if (not (string? g$a$5995$c1uhW))
            (assertion-violation 'string-ci>=? '"not a string" g$a$5995$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$5998$c1uhW)
               (begin
                 (if (not (string? g$x$5998$c1uhW))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$5998$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$5999$c1uhW)
                     (begin
                       (set! g$a$5995$c1uhW g$x$5998$c1uhW)
                       g$r$5999$c1uhW)))
                  (>= (string-ci-compare g$a$5995$c1uhW g$x$5998$c1uhW) '0)))))
            (cons g$b$5996$c1uhW g$rest$5997$c1uhW))))))
   (g$char-ci=?$5970$c1uhW
     g$char-ci=?$6030$c1uhW
     (case-lambda
       ((g$a$6000$c1uhW g$b$6001$c1uhW . g$rest$6002$c1uhW)
        (begin
          (if (not (char? g$a$6000$c1uhW))
            (assertion-violation 'char-ci=? '"not a char" g$a$6000$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$6003$c1uhW)
               (begin
                 (if (not (char? g$x$6003$c1uhW))
                   (assertion-violation 'char-ci=? '"not a char" g$x$6003$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$6004$c1uhW)
                     (begin
                       (set! g$a$6000$c1uhW g$x$6003$c1uhW)
                       g$r$6004$c1uhW)))
                  (= (char->integer (char-upcase g$a$6000$c1uhW))
                     (char->integer (char-upcase g$x$6003$c1uhW)))))))
            (cons g$b$6001$c1uhW g$rest$6002$c1uhW))))))
   (g$char-ci<?$5971$c1uhW
     g$char-ci<?$6031$c1uhW
     (case-lambda
       ((g$a$6005$c1uhW g$b$6006$c1uhW . g$rest$6007$c1uhW)
        (begin
          (if (not (char? g$a$6005$c1uhW))
            (assertion-violation 'char-ci<? '"not a char" g$a$6005$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$6008$c1uhW)
               (begin
                 (if (not (char? g$x$6008$c1uhW))
                   (assertion-violation 'char-ci<? '"not a char" g$x$6008$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$6009$c1uhW)
                     (begin
                       (set! g$a$6005$c1uhW g$x$6008$c1uhW)
                       g$r$6009$c1uhW)))
                  (< (char->integer (char-upcase g$a$6005$c1uhW))
                     (char->integer (char-upcase g$x$6008$c1uhW)))))))
            (cons g$b$6006$c1uhW g$rest$6007$c1uhW))))))
   (g$char-ci>?$5972$c1uhW
     g$char-ci>?$6032$c1uhW
     (case-lambda
       ((g$a$6010$c1uhW g$b$6011$c1uhW . g$rest$6012$c1uhW)
        (begin
          (if (not (char? g$a$6010$c1uhW))
            (assertion-violation 'char-ci>? '"not a char" g$a$6010$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$6013$c1uhW)
               (begin
                 (if (not (char? g$x$6013$c1uhW))
                   (assertion-violation 'char-ci>? '"not a char" g$x$6013$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$6014$c1uhW)
                     (begin
                       (set! g$a$6010$c1uhW g$x$6013$c1uhW)
                       g$r$6014$c1uhW)))
                  (> (char->integer (char-upcase g$a$6010$c1uhW))
                     (char->integer (char-upcase g$x$6013$c1uhW)))))))
            (cons g$b$6011$c1uhW g$rest$6012$c1uhW))))))
   (g$char-ci<=?$5973$c1uhW
     g$char-ci<=?$6033$c1uhW
     (case-lambda
       ((g$a$6015$c1uhW g$b$6016$c1uhW . g$rest$6017$c1uhW)
        (begin
          (if (not (char? g$a$6015$c1uhW))
            (assertion-violation 'char-ci<=? '"not a char" g$a$6015$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$6018$c1uhW)
               (begin
                 (if (not (char? g$x$6018$c1uhW))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$6018$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$6019$c1uhW)
                     (begin
                       (set! g$a$6015$c1uhW g$x$6018$c1uhW)
                       g$r$6019$c1uhW)))
                  (<= (char->integer (char-upcase g$a$6015$c1uhW))
                      (char->integer (char-upcase g$x$6018$c1uhW)))))))
            (cons g$b$6016$c1uhW g$rest$6017$c1uhW))))))
   (g$char-ci>=?$5974$c1uhW
     g$char-ci>=?$6034$c1uhW
     (case-lambda
       ((g$a$6020$c1uhW g$b$6021$c1uhW . g$rest$6022$c1uhW)
        (begin
          (if (not (char? g$a$6020$c1uhW))
            (assertion-violation 'char-ci>=? '"not a char" g$a$6020$c1uhW)
            (void))
          (g$for-all$5061$c1uhW
            (case-lambda
              ((g$x$6023$c1uhW)
               (begin
                 (if (not (char? g$x$6023$c1uhW))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$6023$c1uhW)
                   (void))
                 ((case-lambda
                    ((g$r$6024$c1uhW)
                     (begin
                       (set! g$a$6020$c1uhW g$x$6023$c1uhW)
                       g$r$6024$c1uhW)))
                  (>= (char->integer (char-upcase g$a$6020$c1uhW))
                      (char->integer (char-upcase g$x$6023$c1uhW)))))))
            (cons g$b$6021$c1uhW g$rest$6022$c1uhW)))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$6035$c1uhW
     g$bitwise-if$6066$c1uhW
     (case-lambda
       ((g$ei1$6042$c1uhW g$ei2$6043$c1uhW g$ei3$6044$c1uhW)
        (bitwise-ior
          (bitwise-and g$ei1$6042$c1uhW g$ei2$6043$c1uhW)
          (bitwise-and (bitwise-not g$ei1$6042$c1uhW) g$ei3$6044$c1uhW)))))
   (g$bitwise-copy-bit$6036$c1uhW
     g$bitwise-copy-bit$6067$c1uhW
     (case-lambda
       ((g$ei1$6045$c1uhW g$ei2$6046$c1uhW g$ei3$6047$c1uhW)
        (g$bitwise-if$6035$c1uhW
          (g$bitwise-arithmetic-shift-left$6039$c1uhW '1 g$ei2$6046$c1uhW)
          (g$bitwise-arithmetic-shift-left$6039$c1uhW
            g$ei3$6047$c1uhW
            g$ei2$6046$c1uhW)
          g$ei1$6045$c1uhW))))
   (g$bitwise-bit-field$6037$c1uhW
     g$bitwise-bit-field$6068$c1uhW
     (case-lambda
       ((g$ei1$6048$c1uhW g$ei2$6049$c1uhW g$ei3$6050$c1uhW)
        (g$bitwise-arithmetic-shift-right$6040$c1uhW
          (bitwise-and
            g$ei1$6048$c1uhW
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6039$c1uhW
                '-1
                g$ei3$6050$c1uhW)))
          g$ei2$6049$c1uhW))))
   (g$bitwise-copy-bit-field$6038$c1uhW
     g$bitwise-copy-bit-field$6069$c1uhW
     (case-lambda
       ((g$to$6051$c1uhW g$start$6052$c1uhW g$end$6053$c1uhW g$from$6054$c1uhW)
        (g$bitwise-if$6035$c1uhW
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$6039$c1uhW '-1 g$start$6052$c1uhW)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6039$c1uhW
                '-1
                g$end$6053$c1uhW)))
          (g$bitwise-arithmetic-shift-left$6039$c1uhW
            g$from$6054$c1uhW
            g$start$6052$c1uhW)
          g$to$6051$c1uhW))))
   (g$bitwise-arithmetic-shift-left$6039$c1uhW
     g$bitwise-arithmetic-shift-left$6070$c1uhW
     (case-lambda
       ((g$ei1$6055$c1uhW g$ei2$6056$c1uhW)
        (bitwise-arithmetic-shift g$ei1$6055$c1uhW g$ei2$6056$c1uhW))))
   (g$bitwise-arithmetic-shift-right$6040$c1uhW
     g$bitwise-arithmetic-shift-right$6071$c1uhW
     (case-lambda
       ((g$ei1$6057$c1uhW g$ei2$6058$c1uhW)
        (bitwise-arithmetic-shift g$ei1$6057$c1uhW (- g$ei2$6058$c1uhW)))))
   (g$bitwise-rotate-bit-field$6041$c1uhW
     g$bitwise-rotate-bit-field$6072$c1uhW
     (case-lambda
       ((g$n$6059$c1uhW g$start$6060$c1uhW g$end$6061$c1uhW g$count$6062$c1uhW)
        ((case-lambda
           ((g$width$6063$c1uhW)
            (if (g$positive?$5291$c1uhW g$width$6063$c1uhW)
              ((case-lambda
                 ((g$count$6064$c1uhW g$field$6065$c1uhW)
                  (g$bitwise-copy-bit-field$6038$c1uhW
                    g$n$6059$c1uhW
                    g$start$6060$c1uhW
                    g$end$6061$c1uhW
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$6039$c1uhW
                        g$field$6065$c1uhW
                        g$count$6064$c1uhW)
                      (g$bitwise-arithmetic-shift-right$6040$c1uhW
                        g$field$6065$c1uhW
                        (- g$width$6063$c1uhW g$count$6064$c1uhW))))))
               (mod g$count$6062$c1uhW g$width$6063$c1uhW)
               (g$bitwise-bit-field$6037$c1uhW
                 g$n$6059$c1uhW
                 g$start$6060$c1uhW
                 g$end$6061$c1uhW))
              g$n$6059$c1uhW)))
         (- g$end$6061$c1uhW g$start$6060$c1uhW))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fx*/carry$6073$c1uhW
     g$fx*/carry$6122$c1uhW
     (case-lambda
       ((g$fx1$6083$c1uhW g$fx2$6084$c1uhW g$fx3$6085$c1uhW)
        ((case-lambda
           ((g$s$6086$c1uhW g$e$6087$c1uhW)
            (values
              (mod0 g$s$6086$c1uhW g$e$6087$c1uhW)
              (div0 g$s$6086$c1uhW g$e$6087$c1uhW))))
         (+ (* g$fx1$6083$c1uhW g$fx2$6084$c1uhW) g$fx3$6085$c1uhW)
         (expt '2 (fixnum-width))))))
   (g$fx-/carry$6074$c1uhW
     g$fx-/carry$6123$c1uhW
     (case-lambda
       ((g$fx1$6088$c1uhW g$fx2$6089$c1uhW g$fx3$6090$c1uhW)
        ((case-lambda
           ((g$s$6091$c1uhW g$e$6092$c1uhW)
            (values
              (mod0 g$s$6091$c1uhW g$e$6092$c1uhW)
              (div0 g$s$6091$c1uhW g$e$6092$c1uhW))))
         (- g$fx1$6088$c1uhW g$fx2$6089$c1uhW g$fx3$6090$c1uhW)
         (expt '2 (fixnum-width))))))
   (g$fx+/carry$6075$c1uhW
     g$fx+/carry$6124$c1uhW
     (case-lambda
       ((g$fx1$6093$c1uhW g$fx2$6094$c1uhW g$fx3$6095$c1uhW)
        ((case-lambda
           ((g$s$6096$c1uhW g$e$6097$c1uhW)
            (values
              (mod0 g$s$6096$c1uhW g$e$6097$c1uhW)
              (div0 g$s$6096$c1uhW g$e$6097$c1uhW))))
         (+ g$fx1$6093$c1uhW g$fx2$6094$c1uhW g$fx3$6095$c1uhW)
         (expt '2 (fixnum-width))))))
   (g$fxif$6076$c1uhW
     g$fxif$6125$c1uhW
     (case-lambda
       ((g$fx1$6098$c1uhW g$fx2$6099$c1uhW g$fx3$6100$c1uhW)
        (fxior
          (fxand g$fx1$6098$c1uhW g$fx2$6099$c1uhW)
          (fxand (fxnot g$fx1$6098$c1uhW) g$fx3$6100$c1uhW)))))
   (g$fxcopy-bit$6077$c1uhW
     g$fxcopy-bit$6126$c1uhW
     (case-lambda
       ((g$fx1$6101$c1uhW g$fx2$6102$c1uhW g$fx3$6103$c1uhW)
        (g$fxif$6076$c1uhW
          (g$fxarithmetic-shift-left$6080$c1uhW '1 g$fx2$6102$c1uhW)
          (g$fxarithmetic-shift-left$6080$c1uhW
            g$fx3$6103$c1uhW
            g$fx2$6102$c1uhW)
          g$fx1$6101$c1uhW))))
   (g$fxbit-field$6078$c1uhW
     g$fxbit-field$6127$c1uhW
     (case-lambda
       ((g$fx1$6104$c1uhW g$fx2$6105$c1uhW g$fx3$6106$c1uhW)
        (g$fxarithmetic-shift-right$6081$c1uhW
          (fxand
            g$fx1$6104$c1uhW
            (fxnot (g$fxarithmetic-shift-left$6080$c1uhW '-1 g$fx3$6106$c1uhW)))
          g$fx2$6105$c1uhW))))
   (g$fxcopy-bit-field$6079$c1uhW
     g$fxcopy-bit-field$6128$c1uhW
     (case-lambda
       ((g$to$6107$c1uhW g$start$6108$c1uhW g$end$6109$c1uhW g$from$6110$c1uhW)
        (g$fxif$6076$c1uhW
          (fxand
            (g$fxarithmetic-shift-left$6080$c1uhW '-1 g$start$6108$c1uhW)
            (fxnot (g$fxarithmetic-shift-left$6080$c1uhW '-1 g$end$6109$c1uhW)))
          (g$fxarithmetic-shift-left$6080$c1uhW
            g$from$6110$c1uhW
            g$start$6108$c1uhW)
          g$to$6107$c1uhW))))
   (g$fxarithmetic-shift-left$6080$c1uhW
     g$fxarithmetic-shift-left$6129$c1uhW
     (case-lambda
       ((g$fx1$6111$c1uhW g$fx2$6112$c1uhW)
        (fxarithmetic-shift g$fx1$6111$c1uhW g$fx2$6112$c1uhW))))
   (g$fxarithmetic-shift-right$6081$c1uhW
     g$fxarithmetic-shift-right$6130$c1uhW
     (case-lambda
       ((g$fx1$6113$c1uhW g$fx2$6114$c1uhW)
        (fxarithmetic-shift g$fx1$6113$c1uhW (fx- g$fx2$6114$c1uhW)))))
   (g$fxrotate-bit-field$6082$c1uhW
     g$fxrotate-bit-field$6131$c1uhW
     (case-lambda
       ((g$n$6115$c1uhW g$start$6116$c1uhW g$end$6117$c1uhW g$count$6118$c1uhW)
        ((case-lambda
           ((g$width$6119$c1uhW)
            (if (fxpositive? g$width$6119$c1uhW)
              ((case-lambda
                 ((g$count$6120$c1uhW g$field$6121$c1uhW)
                  (g$fxcopy-bit-field$6079$c1uhW
                    g$n$6115$c1uhW
                    g$start$6116$c1uhW
                    g$end$6117$c1uhW
                    (fxior
                      (g$fxarithmetic-shift-left$6080$c1uhW
                        g$field$6121$c1uhW
                        g$count$6120$c1uhW)
                      (g$fxarithmetic-shift-right$6081$c1uhW
                        g$field$6121$c1uhW
                        (fx- g$width$6119$c1uhW g$count$6120$c1uhW))))))
               (fxmod g$count$6118$c1uhW g$width$6119$c1uhW)
               (g$fxbit-field$6078$c1uhW
                 g$n$6115$c1uhW
                 g$start$6116$c1uhW
                 g$end$6117$c1uhW))
              g$n$6115$c1uhW)))
         (fx- g$end$6117$c1uhW g$start$6116$c1uhW))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$7173$6132$c1uhW
     g$7173$6144$c1uhW
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$7176$c1uhW
       '#f
       '#f
       '#()))
   (g$7175$6133$c1uhW g$7175$6145$c1uhW '#f)
   (g$7174$6134$c1uhW
     g$7174$6146$c1uhW
     (make-record-constructor-descriptor
       g$7173$6132$c1uhW
       &implementation-restriction-rcd
       g$7175$6133$c1uhW))
   (g$7172$6135$c1uhW
     g$7172$6147$c1uhW
     (record-predicate g$7173$6132$c1uhW))
   (g$make-no-infinities-violation$6136$c1uhW
     g$make-no-infinities-violation$6148$c1uhW
     (record-constructor g$7174$6134$c1uhW))
   (g$no-infinities-violation?$6137$c1uhW
     g$no-infinities-violation?$6149$c1uhW
     (condition-predicate g$7173$6132$c1uhW))
   (g$7187$6138$c1uhW
     g$7187$6150$c1uhW
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$7190$c1uhW
       '#f
       '#f
       '#()))
   (g$7189$6139$c1uhW g$7189$6151$c1uhW '#f)
   (g$7188$6140$c1uhW
     g$7188$6152$c1uhW
     (make-record-constructor-descriptor
       g$7187$6138$c1uhW
       &implementation-restriction-rcd
       g$7189$6139$c1uhW))
   (g$7186$6141$c1uhW
     g$7186$6153$c1uhW
     (record-predicate g$7187$6138$c1uhW))
   (g$make-no-nans-violation$6142$c1uhW
     g$make-no-nans-violation$6154$c1uhW
     (record-constructor g$7188$6140$c1uhW))
   (g$no-nans-violation?$6143$c1uhW
     g$no-nans-violation?$6155$c1uhW
     (condition-predicate g$7187$6138$c1uhW)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$7202$6156$c1uhW
     g$7202$6236$c1uhW
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$7205$c1uhW
       '#f
       '#f
       '#()))
   (g$7204$6157$c1uhW g$7204$6237$c1uhW '#f)
   (g$7203$6158$c1uhW
     g$7203$6238$c1uhW
     (make-record-constructor-descriptor
       g$7202$6156$c1uhW
       &error-rcd
       g$7204$6157$c1uhW))
   (g$7201$6159$c1uhW
     g$7201$6239$c1uhW
     (record-predicate g$7202$6156$c1uhW))
   (g$make-i/o-error$6160$c1uhW
     g$make-i/o-error$6240$c1uhW
     (record-constructor g$7203$6158$c1uhW))
   (g$i/o-error?$6161$c1uhW
     g$i/o-error?$6241$c1uhW
     (condition-predicate g$7202$6156$c1uhW))
   (g$7216$6162$c1uhW
     g$7216$6242$c1uhW
     (make-record-type-descriptor
       '&i/o-read
       g$7202$6156$c1uhW
       'g$7219$c1uhW
       '#f
       '#f
       '#()))
   (g$7218$6163$c1uhW g$7218$6243$c1uhW '#f)
   (g$7217$6164$c1uhW
     g$7217$6244$c1uhW
     (make-record-constructor-descriptor
       g$7216$6162$c1uhW
       g$7203$6158$c1uhW
       g$7218$6163$c1uhW))
   (g$7215$6165$c1uhW
     g$7215$6245$c1uhW
     (record-predicate g$7216$6162$c1uhW))
   (g$make-i/o-read-error$6166$c1uhW
     g$make-i/o-read-error$6246$c1uhW
     (record-constructor g$7217$6164$c1uhW))
   (g$i/o-read-error?$6167$c1uhW
     g$i/o-read-error?$6247$c1uhW
     (condition-predicate g$7216$6162$c1uhW))
   (g$7230$6168$c1uhW
     g$7230$6248$c1uhW
     (make-record-type-descriptor
       '&i/o-write
       g$7202$6156$c1uhW
       'g$7233$c1uhW
       '#f
       '#f
       '#()))
   (g$7232$6169$c1uhW g$7232$6249$c1uhW '#f)
   (g$7231$6170$c1uhW
     g$7231$6250$c1uhW
     (make-record-constructor-descriptor
       g$7230$6168$c1uhW
       g$7203$6158$c1uhW
       g$7232$6169$c1uhW))
   (g$7229$6171$c1uhW
     g$7229$6251$c1uhW
     (record-predicate g$7230$6168$c1uhW))
   (g$make-i/o-write-error$6172$c1uhW
     g$make-i/o-write-error$6252$c1uhW
     (record-constructor g$7231$6170$c1uhW))
   (g$i/o-write-error?$6173$c1uhW
     g$i/o-write-error?$6253$c1uhW
     (condition-predicate g$7230$6168$c1uhW))
   (g$7245$6174$c1uhW
     g$7245$6254$c1uhW
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7202$6156$c1uhW
       'g$7248$c1uhW
       '#f
       '#f
       '#((immutable position))))
   (g$7247$6175$c1uhW g$7247$6255$c1uhW '#f)
   (g$7246$6176$c1uhW
     g$7246$6256$c1uhW
     (make-record-constructor-descriptor
       g$7245$6174$c1uhW
       g$7203$6158$c1uhW
       g$7247$6175$c1uhW))
   (g$7244$6177$c1uhW
     g$7244$6257$c1uhW
     (record-predicate g$7245$6174$c1uhW))
   (g$make-i/o-invalid-position-error$6178$c1uhW
     g$make-i/o-invalid-position-error$6258$c1uhW
     (record-constructor g$7246$6176$c1uhW))
   (g$7243$6179$c1uhW
     g$7243$6259$c1uhW
     (record-accessor g$7245$6174$c1uhW '0))
   (g$i/o-invalid-position-error?$6180$c1uhW
     g$i/o-invalid-position-error?$6260$c1uhW
     (condition-predicate g$7245$6174$c1uhW))
   (g$i/o-error-position$6181$c1uhW
     g$i/o-error-position$6261$c1uhW
     (condition-accessor g$7245$6174$c1uhW g$7243$6179$c1uhW))
   (g$7262$6182$c1uhW
     g$7262$6262$c1uhW
     (make-record-type-descriptor
       '&i/o-filename
       g$7202$6156$c1uhW
       'g$7265$c1uhW
       '#f
       '#f
       '#((immutable filename))))
   (g$7264$6183$c1uhW g$7264$6263$c1uhW '#f)
   (g$7263$6184$c1uhW
     g$7263$6264$c1uhW
     (make-record-constructor-descriptor
       g$7262$6182$c1uhW
       g$7203$6158$c1uhW
       g$7264$6183$c1uhW))
   (g$7261$6185$c1uhW
     g$7261$6265$c1uhW
     (record-predicate g$7262$6182$c1uhW))
   (g$make-i/o-filename-error$6186$c1uhW
     g$make-i/o-filename-error$6266$c1uhW
     (record-constructor g$7263$6184$c1uhW))
   (g$7260$6187$c1uhW
     g$7260$6267$c1uhW
     (record-accessor g$7262$6182$c1uhW '0))
   (g$i/o-filename-error?$6188$c1uhW
     g$i/o-filename-error?$6268$c1uhW
     (condition-predicate g$7262$6182$c1uhW))
   (g$i/o-error-filename$6189$c1uhW
     g$i/o-error-filename$6269$c1uhW
     (condition-accessor g$7262$6182$c1uhW g$7260$6187$c1uhW))
   (g$7278$6190$c1uhW
     g$7278$6270$c1uhW
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7262$6182$c1uhW
       'g$7281$c1uhW
       '#f
       '#f
       '#()))
   (g$7280$6191$c1uhW g$7280$6271$c1uhW '#f)
   (g$7279$6192$c1uhW
     g$7279$6272$c1uhW
     (make-record-constructor-descriptor
       g$7278$6190$c1uhW
       g$7263$6184$c1uhW
       g$7280$6191$c1uhW))
   (g$7277$6193$c1uhW
     g$7277$6273$c1uhW
     (record-predicate g$7278$6190$c1uhW))
   (g$make-i/o-file-protection-error$6194$c1uhW
     g$make-i/o-file-protection-error$6274$c1uhW
     (record-constructor g$7279$6192$c1uhW))
   (g$i/o-file-protection-error?$6195$c1uhW
     g$i/o-file-protection-error?$6275$c1uhW
     (condition-predicate g$7278$6190$c1uhW))
   (g$7292$6196$c1uhW
     g$7292$6276$c1uhW
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7278$6190$c1uhW
       'g$7295$c1uhW
       '#f
       '#f
       '#()))
   (g$7294$6197$c1uhW g$7294$6277$c1uhW '#f)
   (g$7293$6198$c1uhW
     g$7293$6278$c1uhW
     (make-record-constructor-descriptor
       g$7292$6196$c1uhW
       g$7279$6192$c1uhW
       g$7294$6197$c1uhW))
   (g$7291$6199$c1uhW
     g$7291$6279$c1uhW
     (record-predicate g$7292$6196$c1uhW))
   (g$make-i/o-file-is-read-only-error$6200$c1uhW
     g$make-i/o-file-is-read-only-error$6280$c1uhW
     (record-constructor g$7293$6198$c1uhW))
   (g$i/o-file-is-read-only-error?$6201$c1uhW
     g$i/o-file-is-read-only-error?$6281$c1uhW
     (condition-predicate g$7292$6196$c1uhW))
   (g$7306$6202$c1uhW
     g$7306$6282$c1uhW
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7262$6182$c1uhW
       'g$7309$c1uhW
       '#f
       '#f
       '#()))
   (g$7308$6203$c1uhW g$7308$6283$c1uhW '#f)
   (g$7307$6204$c1uhW
     g$7307$6284$c1uhW
     (make-record-constructor-descriptor
       g$7306$6202$c1uhW
       g$7263$6184$c1uhW
       g$7308$6203$c1uhW))
   (g$7305$6205$c1uhW
     g$7305$6285$c1uhW
     (record-predicate g$7306$6202$c1uhW))
   (g$make-i/o-file-already-exists-error$6206$c1uhW
     g$make-i/o-file-already-exists-error$6286$c1uhW
     (record-constructor g$7307$6204$c1uhW))
   (g$i/o-file-already-exists-error?$6207$c1uhW
     g$i/o-file-already-exists-error?$6287$c1uhW
     (condition-predicate g$7306$6202$c1uhW))
   (g$7320$6208$c1uhW
     g$7320$6288$c1uhW
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7262$6182$c1uhW
       'g$7323$c1uhW
       '#f
       '#f
       '#()))
   (g$7322$6209$c1uhW g$7322$6289$c1uhW '#f)
   (g$7321$6210$c1uhW
     g$7321$6290$c1uhW
     (make-record-constructor-descriptor
       g$7320$6208$c1uhW
       g$7263$6184$c1uhW
       g$7322$6209$c1uhW))
   (g$7319$6211$c1uhW
     g$7319$6291$c1uhW
     (record-predicate g$7320$6208$c1uhW))
   (g$make-i/o-file-does-not-exist-error$6212$c1uhW
     g$make-i/o-file-does-not-exist-error$6292$c1uhW
     (record-constructor g$7321$6210$c1uhW))
   (g$i/o-file-does-not-exist-error?$6213$c1uhW
     g$i/o-file-does-not-exist-error?$6293$c1uhW
     (condition-predicate g$7320$6208$c1uhW))
   (g$7335$6214$c1uhW
     g$7335$6294$c1uhW
     (make-record-type-descriptor
       '&i/o-port
       g$7202$6156$c1uhW
       'g$7338$c1uhW
       '#f
       '#f
       '#((immutable port))))
   (g$7337$6215$c1uhW g$7337$6295$c1uhW '#f)
   (g$7336$6216$c1uhW
     g$7336$6296$c1uhW
     (make-record-constructor-descriptor
       g$7335$6214$c1uhW
       g$7203$6158$c1uhW
       g$7337$6215$c1uhW))
   (g$7334$6217$c1uhW
     g$7334$6297$c1uhW
     (record-predicate g$7335$6214$c1uhW))
   (g$make-i/o-port-error$6218$c1uhW
     g$make-i/o-port-error$6298$c1uhW
     (record-constructor g$7336$6216$c1uhW))
   (g$7333$6219$c1uhW
     g$7333$6299$c1uhW
     (record-accessor g$7335$6214$c1uhW '0))
   (g$i/o-port-error?$6220$c1uhW
     g$i/o-port-error?$6300$c1uhW
     (condition-predicate g$7335$6214$c1uhW))
   (g$i/o-error-port$6221$c1uhW
     g$i/o-error-port$6301$c1uhW
     (condition-accessor g$7335$6214$c1uhW g$7333$6219$c1uhW))
   (g$7351$6222$c1uhW
     g$7351$6302$c1uhW
     (make-record-type-descriptor
       '&i/o-decoding
       g$7335$6214$c1uhW
       'g$7354$c1uhW
       '#f
       '#f
       '#()))
   (g$7353$6223$c1uhW g$7353$6303$c1uhW '#f)
   (g$7352$6224$c1uhW
     g$7352$6304$c1uhW
     (make-record-constructor-descriptor
       g$7351$6222$c1uhW
       g$7336$6216$c1uhW
       g$7353$6223$c1uhW))
   (g$7350$6225$c1uhW
     g$7350$6305$c1uhW
     (record-predicate g$7351$6222$c1uhW))
   (g$make-i/o-decoding-error$6226$c1uhW
     g$make-i/o-decoding-error$6306$c1uhW
     (record-constructor g$7352$6224$c1uhW))
   (g$i/o-decoding-error?$6227$c1uhW
     g$i/o-decoding-error?$6307$c1uhW
     (condition-predicate g$7351$6222$c1uhW))
   (g$7366$6228$c1uhW
     g$7366$6308$c1uhW
     (make-record-type-descriptor
       '&i/o-encoding
       g$7335$6214$c1uhW
       'g$7369$c1uhW
       '#f
       '#f
       '#((immutable char))))
   (g$7368$6229$c1uhW g$7368$6309$c1uhW '#f)
   (g$7367$6230$c1uhW
     g$7367$6310$c1uhW
     (make-record-constructor-descriptor
       g$7366$6228$c1uhW
       g$7336$6216$c1uhW
       g$7368$6229$c1uhW))
   (g$7365$6231$c1uhW
     g$7365$6311$c1uhW
     (record-predicate g$7366$6228$c1uhW))
   (g$make-i/o-encoding-error$6232$c1uhW
     g$make-i/o-encoding-error$6312$c1uhW
     (record-constructor g$7367$6230$c1uhW))
   (g$7364$6233$c1uhW
     g$7364$6313$c1uhW
     (record-accessor g$7366$6228$c1uhW '0))
   (g$i/o-encoding-error?$6234$c1uhW
     g$i/o-encoding-error?$6314$c1uhW
     (condition-predicate g$7366$6228$c1uhW))
   (g$i/o-encoding-error-char$6235$c1uhW
     g$i/o-encoding-error-char$6315$c1uhW
     (condition-accessor g$7366$6228$c1uhW g$7364$6233$c1uhW)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$6317$c1uhW
     g$using$6333$c1uhW
     (clr-using-internal 'ironscheme.runtime))
   (g$get-output-string$6318$c1uhW
     g$get-output-string$6334$c1uhW
     (case-lambda
       ((g$port$6324$c1uhW)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6324$c1uhW))))
   (g$open-output-string$6319$c1uhW
     g$open-output-string$6335$c1uhW
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6320$c1uhW
     g$open-string-output-port$6336$c1uhW
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6325$c1uhW)
            (values
              g$p$6325$c1uhW
              (case-lambda
                (() (g$get-output-string$6318$c1uhW g$p$6325$c1uhW))))))
         (g$open-output-string$6319$c1uhW)))))
   (g$port?$6321$c1uhW
     g$port?$6337$c1uhW
     (case-lambda
       ((g$obj$6326$c1uhW)
        ((case-lambda
           ((g$t$6327$c1uhW)
            (if g$t$6327$c1uhW
              g$t$6327$c1uhW
              (begin '#f (binary-port? g$obj$6326$c1uhW)))))
         (textual-port? g$obj$6326$c1uhW)))))
   (g$call-with-string-output-port$6322$c1uhW
     g$call-with-string-output-port$6338$c1uhW
     (case-lambda
       ((g$proc$6328$c1uhW)
        ((case-lambda
           ((g$p$6329$c1uhW)
            (begin
              (g$call-with-port$6323$c1uhW g$p$6329$c1uhW g$proc$6328$c1uhW)
              (g$get-output-string$6318$c1uhW g$p$6329$c1uhW))))
         (g$open-output-string$6319$c1uhW)))))
   (g$call-with-port$6323$c1uhW
     g$call-with-port$6339$c1uhW
     (case-lambda
       ((g$port$6330$c1uhW g$proc$6331$c1uhW)
        ((case-lambda
           ((g$r$6332$c1uhW)
            (begin (close-port g$port$6330$c1uhW) g$r$6332$c1uhW)))
         (g$proc$6331$c1uhW g$port$6330$c1uhW))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$6340$c1uhW
     g$peek-char$6382$c1uhW
     (case-lambda
       (() (g$peek-char$6340$c1uhW (current-input-port)))
       ((g$port$6354$c1uhW) (lookahead-char g$port$6354$c1uhW))))
   (g$read-char$6341$c1uhW
     g$read-char$6383$c1uhW
     (case-lambda
       (() (g$read-char$6341$c1uhW (current-input-port)))
       ((g$port$6355$c1uhW) (get-char g$port$6355$c1uhW))))
   (g$write-char$6342$c1uhW
     g$write-char$6384$c1uhW
     (case-lambda
       ((g$chr$6356$c1uhW)
        (g$write-char$6342$c1uhW g$chr$6356$c1uhW (current-output-port)))
       ((g$chr$6357$c1uhW g$port$6358$c1uhW)
        (put-char g$port$6358$c1uhW g$chr$6357$c1uhW))))
   (g$with-input-from-file$6349$c1uhW
     g$with-input-from-file$6385$c1uhW
     (case-lambda
       ((g$filename$6359$c1uhW g$thunk$6360$c1uhW)
        ((case-lambda
           ((g$current-input-port$6363$c1uhW g$t$6364$c1uhW)
            ((case-lambda
               ((g$swap$6365$c1uhW)
                (dynamic-wind
                  g$swap$6365$c1uhW
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6360$c1uhW)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6365$c1uhW)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6366$c1uhW)
                    (begin
                      (g$current-input-port$6363$c1uhW g$t$6364$c1uhW)
                      (set! g$t$6364$c1uhW g$t$6366$c1uhW))))
                 (g$current-input-port$6363$c1uhW)))))))
         current-input-port
         (open-input-file g$filename$6359$c1uhW)))))
   (g$with-output-to-file$6350$c1uhW
     g$with-output-to-file$6386$c1uhW
     (case-lambda
       ((g$filename$6367$c1uhW g$thunk$6368$c1uhW)
        ((case-lambda
           ((g$current-output-port$6371$c1uhW g$t$6372$c1uhW)
            ((case-lambda
               ((g$swap$6373$c1uhW)
                (dynamic-wind
                  g$swap$6373$c1uhW
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6368$c1uhW)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6373$c1uhW)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6374$c1uhW)
                    (begin
                      (g$current-output-port$6371$c1uhW g$t$6372$c1uhW)
                      (set! g$t$6372$c1uhW g$t$6374$c1uhW))))
                 (g$current-output-port$6371$c1uhW)))))))
         current-output-port
         (open-output-file g$filename$6367$c1uhW)))))
   (g$call-with-input-file$6351$c1uhW
     g$call-with-input-file$6387$c1uhW
     (case-lambda
       ((g$filename$6375$c1uhW g$proc$6376$c1uhW)
        ((case-lambda
           ((g$p$6377$c1uhW)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6376$c1uhW g$p$6377$c1uhW)))
              (case-lambda (() (close-input-port g$p$6377$c1uhW))))))
         (open-input-file g$filename$6375$c1uhW)))))
   (g$call-with-output-file$6352$c1uhW
     g$call-with-output-file$6388$c1uhW
     (case-lambda
       ((g$filename$6378$c1uhW g$proc$6379$c1uhW)
        ((case-lambda
           ((g$p$6380$c1uhW)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6379$c1uhW g$p$6380$c1uhW)))
              (case-lambda (() (close-output-port g$p$6380$c1uhW))))))
         (open-output-file g$filename$6378$c1uhW)))))
   (g$newline$6353$c1uhW
     g$newline$6389$c1uhW
     (case-lambda
       (() (g$newline$6353$c1uhW (current-output-port)))
       ((g$port$6381$c1uhW) (display '"
" g$port$6381$c1uhW)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7451$6390$c1uhW
     g$7451$6499$c1uhW
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7453$6391$c1uhW g$7453$6500$c1uhW '#f)
   (g$7452$6392$c1uhW
     g$7452$6501$c1uhW
     (make-record-constructor-descriptor
       g$7451$6390$c1uhW
       '#f
       g$7453$6391$c1uhW))
   (g$enum?$6393$c1uhW
     g$enum?$6502$c1uhW
     (record-predicate g$7451$6390$c1uhW))
   (g$make-enum$6394$c1uhW
     g$make-enum$6503$c1uhW
     (record-constructor g$7452$6392$c1uhW))
   (g$enum-value$6395$c1uhW
     g$enum-value$6504$c1uhW
     (record-accessor g$7451$6390$c1uhW '0))
   (g$enum-info$6396$c1uhW
     g$enum-info$6505$c1uhW
     (record-accessor g$7451$6390$c1uhW '1))
   (g$7464$6397$c1uhW
     g$7464$6506$c1uhW
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7466$6398$c1uhW g$7466$6507$c1uhW '#f)
   (g$7465$6399$c1uhW
     g$7465$6508$c1uhW
     (make-record-constructor-descriptor
       g$7464$6397$c1uhW
       '#f
       g$7466$6398$c1uhW))
   (g$enum-universe?$6400$c1uhW
     g$enum-universe?$6509$c1uhW
     (record-predicate g$7464$6397$c1uhW))
   (g$make-enum-universe$6401$c1uhW
     g$make-enum-universe$6510$c1uhW
     (record-constructor g$7465$6399$c1uhW))
   (g$enum-universe-id$6402$c1uhW
     g$enum-universe-id$6511$c1uhW
     (record-accessor g$7464$6397$c1uhW '0))
   (g$enum-universe-symbols$6403$c1uhW
     g$enum-universe-symbols$6512$c1uhW
     (record-accessor g$7464$6397$c1uhW '1))
   (g$enum-universe-mapping$6404$c1uhW
     g$enum-universe-mapping$6513$c1uhW
     (record-accessor g$7464$6397$c1uhW '2))
   (g$enum-universe-value$6405$c1uhW
     g$enum-universe-value$6514$c1uhW
     (record-accessor g$7464$6397$c1uhW '3))
   (g$enum-type=?$6406$c1uhW
     g$enum-type=?$6515$c1uhW
     (case-lambda
       ((g$enumset1$6428$c1uhW g$enumset2$6429$c1uhW)
        (eq? (g$enum-universe-id$6402$c1uhW
               (g$enum-info$6396$c1uhW g$enumset1$6428$c1uhW))
             (g$enum-universe-id$6402$c1uhW
               (g$enum-info$6396$c1uhW g$enumset2$6429$c1uhW))))))
   (g$get-symbols$6407$c1uhW
     g$get-symbols$6516$c1uhW
     (case-lambda
       ((g$enumset$6430$c1uhW)
        (g$enum-universe-symbols$6403$c1uhW
          (g$enum-info$6396$c1uhW g$enumset$6430$c1uhW)))))
   (g$get-value$6408$c1uhW
     g$get-value$6517$c1uhW
     (case-lambda
       ((g$enumset$6431$c1uhW g$s$6432$c1uhW)
        (g$hashtable-ref$5541$c1uhW
          (g$enum-universe-mapping$6404$c1uhW
            (g$enum-info$6396$c1uhW g$enumset$6431$c1uhW))
          g$s$6432$c1uhW
          '#f))))
   (g$assert-enum$6409$c1uhW
     g$assert-enum$6518$c1uhW
     (case-lambda
       ((g$who$6433$c1uhW g$enumset$6434$c1uhW)
        (if (not (g$enum?$6393$c1uhW g$enumset$6434$c1uhW))
          (assertion-violation
            g$who$6433$c1uhW
            '"not an enumeration"
            g$enumset$6434$c1uhW)
          (void)))))
   (g$make-info$6410$c1uhW
     g$make-info$6519$c1uhW
     (case-lambda
       ((g$symbols$6435$c1uhW)
        ((case-lambda
           ((g$ht$6436$c1uhW)
            ((letrec ((g$f$6437$c1uhW
                        (case-lambda
                          ((g$s$6438$c1uhW g$a$6439$c1uhW g$mask$6440$c1uhW)
                           (if (null? g$s$6438$c1uhW)
                             (values
                               (reverse! g$a$6439$c1uhW)
                               g$ht$6436$c1uhW
                               (- g$mask$6440$c1uhW '1))
                             ((case-lambda
                                ((g$n$6441$c1uhW)
                                 (if (symbol? g$n$6441$c1uhW)
                                   (if (g$hashtable-contains?$5544$c1uhW
                                         g$ht$6436$c1uhW
                                         g$n$6441$c1uhW)
                                     (g$f$6437$c1uhW
                                       (cdr g$s$6438$c1uhW)
                                       g$a$6439$c1uhW
                                       g$mask$6440$c1uhW)
                                     (begin
                                       (g$hashtable-set!$5542$c1uhW
                                         g$ht$6436$c1uhW
                                         g$n$6441$c1uhW
                                         g$mask$6440$c1uhW)
                                       (g$f$6437$c1uhW
                                         (cdr g$s$6438$c1uhW)
                                         (cons g$n$6441$c1uhW g$a$6439$c1uhW)
                                         (g$bitwise-arithmetic-shift-left$6070$c1uhW
                                           g$mask$6440$c1uhW
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6441$c1uhW))))
                              (car g$s$6438$c1uhW)))))))
               g$f$6437$c1uhW)
             g$symbols$6435$c1uhW
             '()
             '1)))
         (g$make-eq-hashtable$5538$c1uhW)))))
   (g$make-name$6411$c1uhW
     g$make-name$6520$c1uhW
     (case-lambda
       ((g$symbols$6442$c1uhW)
        (string->symbol (g$format$6559$c1uhW '"~a" g$symbols$6442$c1uhW)))))
   (g$make-enumeration$6412$c1uhW
     g$make-enumeration$6521$c1uhW
     (case-lambda
       ((g$symbols$6443$c1uhW)
        (call-with-values
          (case-lambda (() (g$make-info$6410$c1uhW g$symbols$6443$c1uhW)))
          (case-lambda
            ((g$s$6447$c1uhW g$mapping$6448$c1uhW g$mask$6449$c1uhW)
             ((case-lambda
                ((g$mask$6450$c1uhW g$mapping$6451$c1uhW g$s$6452$c1uhW)
                 (g$make-enum$6394$c1uhW
                   g$mask$6450$c1uhW
                   (g$make-enum-universe$6401$c1uhW
                     (g$make-name$6411$c1uhW g$s$6452$c1uhW)
                     g$s$6452$c1uhW
                     g$mapping$6451$c1uhW
                     g$mask$6450$c1uhW))))
              g$mask$6449$c1uhW
              g$mapping$6448$c1uhW
              g$s$6447$c1uhW)))))))
   (g$enum-set-universe$6413$c1uhW
     g$enum-set-universe$6522$c1uhW
     (case-lambda
       ((g$enumset$6453$c1uhW)
        (begin
          (g$assert-enum$6409$c1uhW 'enum-set-universe g$enumset$6453$c1uhW)
          ((case-lambda
             ((g$ei$6454$c1uhW)
              (g$make-enum$6394$c1uhW
                (g$enum-universe-value$6405$c1uhW g$ei$6454$c1uhW)
                g$ei$6454$c1uhW)))
           (g$enum-info$6396$c1uhW g$enumset$6453$c1uhW))))))
   (g$enum-set-indexer$6414$c1uhW
     g$enum-set-indexer$6523$c1uhW
     (case-lambda
       ((g$enumset$6455$c1uhW)
        (begin
          (g$assert-enum$6409$c1uhW 'enum-set-indexer g$enumset$6455$c1uhW)
          (case-lambda
            ((g$symbol$6456$c1uhW)
             (begin
               (if (not (symbol? g$symbol$6456$c1uhW))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6456$c1uhW)
                 (void))
               ((case-lambda
                  ((g$v$6457$c1uhW)
                   (if g$v$6457$c1uhW
                     (- (bitwise-length g$v$6457$c1uhW) '1)
                     '#f)))
                (g$get-value$6408$c1uhW
                  g$enumset$6455$c1uhW
                  g$symbol$6456$c1uhW)))))))))
   (g$enum-set-constructor$6415$c1uhW
     g$enum-set-constructor$6524$c1uhW
     (case-lambda
       ((g$enumset$6458$c1uhW)
        (begin
          (g$assert-enum$6409$c1uhW 'enum-set-constructor g$enumset$6458$c1uhW)
          (case-lambda
            ((g$symbols$6459$c1uhW)
             ((letrec ((g$f$6460$c1uhW
                         (case-lambda
                           ((g$v$6461$c1uhW g$s$6462$c1uhW)
                            (if (null? g$s$6462$c1uhW)
                              (g$make-enum$6394$c1uhW
                                g$v$6461$c1uhW
                                (g$enum-info$6396$c1uhW g$enumset$6458$c1uhW))
                              ((case-lambda
                                 ((g$n$6463$c1uhW)
                                  (if (symbol? g$n$6463$c1uhW)
                                    ((case-lambda
                                       ((g$v*$6464$c1uhW)
                                        (if g$v*$6464$c1uhW
                                          (g$f$6460$c1uhW
                                            (bitwise-ior
                                              g$v$6461$c1uhW
                                              g$v*$6464$c1uhW)
                                            (cdr g$s$6462$c1uhW))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6463$c1uhW))))
                                     (g$get-value$6408$c1uhW
                                       g$enumset$6458$c1uhW
                                       g$n$6463$c1uhW))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6463$c1uhW))))
                               (car g$s$6462$c1uhW)))))))
                g$f$6460$c1uhW)
              '0
              g$symbols$6459$c1uhW)))))))
   (g$enum-set->list$6416$c1uhW
     g$enum-set->list$6525$c1uhW
     (case-lambda
       ((g$enumset$6465$c1uhW)
        (begin
          (g$assert-enum$6409$c1uhW 'enum-set->list g$enumset$6465$c1uhW)
          ((case-lambda
             ((g$value$6466$c1uhW)
              ((letrec ((g$f$6467$c1uhW
                          (case-lambda
                            ((g$s$6468$c1uhW g$l$6469$c1uhW)
                             (if (null? g$s$6468$c1uhW)
                               (reverse! g$l$6469$c1uhW)
                               (if (g$zero?$5293$c1uhW
                                     (bitwise-and
                                       (g$get-value$6408$c1uhW
                                         g$enumset$6465$c1uhW
                                         (car g$s$6468$c1uhW))
                                       g$value$6466$c1uhW))
                                 (g$f$6467$c1uhW
                                   (cdr g$s$6468$c1uhW)
                                   g$l$6469$c1uhW)
                                 (g$f$6467$c1uhW
                                   (cdr g$s$6468$c1uhW)
                                   (cons
                                     (car g$s$6468$c1uhW)
                                     g$l$6469$c1uhW))))))))
                 g$f$6467$c1uhW)
               (g$get-symbols$6407$c1uhW g$enumset$6465$c1uhW)
               '())))
           (g$enum-value$6395$c1uhW g$enumset$6465$c1uhW))))))
   (g$enum-set-member?$6417$c1uhW
     g$enum-set-member?$6526$c1uhW
     (case-lambda
       ((g$symbol$6470$c1uhW g$enumset$6471$c1uhW)
        (begin
          (if (not (symbol? g$symbol$6470$c1uhW))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6470$c1uhW)
            (void))
          (g$assert-enum$6409$c1uhW 'enum-set-member? g$enumset$6471$c1uhW)
          ((case-lambda
             ((g$v$6472$c1uhW)
              (if g$v$6472$c1uhW
                (not (g$zero?$5293$c1uhW
                       (bitwise-and
                         g$v$6472$c1uhW
                         (g$enum-value$6395$c1uhW g$enumset$6471$c1uhW))))
                '#f)))
           (g$get-value$6408$c1uhW
             g$enumset$6471$c1uhW
             g$symbol$6470$c1uhW))))))
   (g$enum-set-subset?$6418$c1uhW
     g$enum-set-subset?$6527$c1uhW
     (case-lambda
       ((g$enumset1$6473$c1uhW g$enumset2$6474$c1uhW)
        (begin
          (g$assert-enum$6409$c1uhW 'enum-set-subset? g$enumset1$6473$c1uhW)
          (g$assert-enum$6409$c1uhW 'enum-set-subset? g$enumset2$6474$c1uhW)
          ((case-lambda
             ((g$v1$6475$c1uhW g$v2$6476$c1uhW)
              (if (g$enum-type=?$6406$c1uhW
                    g$enumset1$6473$c1uhW
                    g$enumset2$6474$c1uhW)
                (= (bitwise-and g$v1$6475$c1uhW g$v2$6476$c1uhW)
                   g$v1$6475$c1uhW)
                ((letrec ((g$f$6477$c1uhW
                            (case-lambda
                              ((g$s$6478$c1uhW)
                               (if (null? g$s$6478$c1uhW)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6479$c1uhW g$v2*$6480$c1uhW)
                                     (if g$v2*$6480$c1uhW
                                       ((case-lambda
                                          ((g$has1$6481$c1uhW g$has2$6482$c1uhW)
                                           (if (if g$has1$6481$c1uhW
                                                 (begin
                                                   '#f
                                                   (not g$has2$6482$c1uhW))
                                                 '#f)
                                             '#f
                                             (g$f$6477$c1uhW
                                               (cdr g$s$6478$c1uhW)))))
                                        (not (g$zero?$5293$c1uhW
                                               (bitwise-and
                                                 g$v1$6475$c1uhW
                                                 g$v1*$6479$c1uhW)))
                                        (not (g$zero?$5293$c1uhW
                                               (bitwise-and
                                                 g$v2$6476$c1uhW
                                                 g$v2*$6480$c1uhW))))
                                       '#f)))
                                  (g$get-value$6408$c1uhW
                                    g$enumset1$6473$c1uhW
                                    (car g$s$6478$c1uhW))
                                  (g$get-value$6408$c1uhW
                                    g$enumset2$6474$c1uhW
                                    (car g$s$6478$c1uhW))))))))
                   g$f$6477$c1uhW)
                 (g$get-symbols$6407$c1uhW g$enumset1$6473$c1uhW)))))
           (g$enum-value$6395$c1uhW g$enumset1$6473$c1uhW)
           (g$enum-value$6395$c1uhW g$enumset2$6474$c1uhW))))))
   (g$enum-set=?$6419$c1uhW
     g$enum-set=?$6528$c1uhW
     (case-lambda
       ((g$enumset1$6483$c1uhW g$enumset2$6484$c1uhW)
        (begin
          (g$assert-enum$6409$c1uhW 'enum-set=? g$enumset1$6483$c1uhW)
          (g$assert-enum$6409$c1uhW 'enum-set=? g$enumset2$6484$c1uhW)
          (if (g$enum-set-subset?$6418$c1uhW
                g$enumset1$6483$c1uhW
                g$enumset2$6484$c1uhW)
            (begin
              '#f
              (g$enum-set-subset?$6418$c1uhW
                g$enumset2$6484$c1uhW
                g$enumset1$6483$c1uhW))
            '#f)))))
   (g$enum-set-union$6420$c1uhW
     g$enum-set-union$6529$c1uhW
     (case-lambda
       ((g$enumset1$6485$c1uhW g$enumset2$6486$c1uhW)
        (begin
          (g$assert-enum$6409$c1uhW 'enum-set-union g$enumset1$6485$c1uhW)
          (g$assert-enum$6409$c1uhW 'enum-set-union g$enumset2$6486$c1uhW)
          (if (g$enum-type=?$6406$c1uhW
                g$enumset1$6485$c1uhW
                g$enumset2$6486$c1uhW)
            (g$make-enum$6394$c1uhW
              (bitwise-ior
                (g$enum-value$6395$c1uhW g$enumset1$6485$c1uhW)
                (g$enum-value$6395$c1uhW g$enumset2$6486$c1uhW))
              (g$enum-info$6396$c1uhW g$enumset1$6485$c1uhW))
            '#f)))))
   (g$enum-set-intersection$6421$c1uhW
     g$enum-set-intersection$6530$c1uhW
     (case-lambda
       ((g$enumset1$6487$c1uhW g$enumset2$6488$c1uhW)
        (begin
          (g$assert-enum$6409$c1uhW
            'enum-set-intersection
            g$enumset1$6487$c1uhW)
          (g$assert-enum$6409$c1uhW
            'enum-set-intersection
            g$enumset2$6488$c1uhW)
          (if (g$enum-type=?$6406$c1uhW
                g$enumset1$6487$c1uhW
                g$enumset2$6488$c1uhW)
            (g$make-enum$6394$c1uhW
              (bitwise-and
                (g$enum-value$6395$c1uhW g$enumset1$6487$c1uhW)
                (g$enum-value$6395$c1uhW g$enumset2$6488$c1uhW))
              (g$enum-info$6396$c1uhW g$enumset1$6487$c1uhW))
            '#f)))))
   (g$enum-set-difference$6422$c1uhW
     g$enum-set-difference$6531$c1uhW
     (case-lambda
       ((g$enumset1$6489$c1uhW g$enumset2$6490$c1uhW)
        (begin
          (g$assert-enum$6409$c1uhW 'enum-set-difference g$enumset1$6489$c1uhW)
          (g$assert-enum$6409$c1uhW 'enum-set-difference g$enumset2$6490$c1uhW)
          (if (g$enum-type=?$6406$c1uhW
                g$enumset1$6489$c1uhW
                g$enumset2$6490$c1uhW)
            (g$make-enum$6394$c1uhW
              (bitwise-and
                (g$enum-value$6395$c1uhW g$enumset1$6489$c1uhW)
                (bitwise-not (g$enum-value$6395$c1uhW g$enumset2$6490$c1uhW)))
              (g$enum-info$6396$c1uhW g$enumset1$6489$c1uhW))
            '#f)))))
   (g$enum-set-complement$6423$c1uhW
     g$enum-set-complement$6532$c1uhW
     (case-lambda
       ((g$enumset$6491$c1uhW)
        (begin
          (g$assert-enum$6409$c1uhW 'enum-set-complement g$enumset$6491$c1uhW)
          (g$make-enum$6394$c1uhW
            (bitwise-not (g$enum-value$6395$c1uhW g$enumset$6491$c1uhW))
            (g$enum-info$6396$c1uhW g$enumset$6491$c1uhW))))))
   (g$enum-set-projection$6424$c1uhW
     g$enum-set-projection$6533$c1uhW
     (case-lambda
       ((g$enumset1$6492$c1uhW g$enumset2$6493$c1uhW)
        (begin
          (g$assert-enum$6409$c1uhW 'enum-set-projection g$enumset1$6492$c1uhW)
          (g$assert-enum$6409$c1uhW 'enum-set-projection g$enumset2$6493$c1uhW)
          ((case-lambda
             ((g$v1$6494$c1uhW)
              ((letrec ((g$f$6495$c1uhW
                          (case-lambda
                            ((g$s$6496$c1uhW g$v$6497$c1uhW)
                             (if (null? g$s$6496$c1uhW)
                               (g$make-enum$6394$c1uhW
                                 g$v$6497$c1uhW
                                 (g$enum-info$6396$c1uhW g$enumset2$6493$c1uhW))
                               (if (g$zero?$5293$c1uhW
                                     (bitwise-and
                                       g$v1$6494$c1uhW
                                       (g$get-value$6408$c1uhW
                                         g$enumset1$6492$c1uhW
                                         (car g$s$6496$c1uhW))))
                                 (g$f$6495$c1uhW
                                   (cdr g$s$6496$c1uhW)
                                   g$v$6497$c1uhW)
                                 ((case-lambda
                                    ((g$v2$6498$c1uhW)
                                     (if g$v2$6498$c1uhW
                                       (g$f$6495$c1uhW
                                         (cdr g$s$6496$c1uhW)
                                         (bitwise-ior
                                           g$v$6497$c1uhW
                                           g$v2$6498$c1uhW))
                                       (g$f$6495$c1uhW
                                         (cdr g$s$6496$c1uhW)
                                         g$v$6497$c1uhW))))
                                  (g$get-value$6408$c1uhW
                                    g$enumset2$6493$c1uhW
                                    (car g$s$6496$c1uhW)))))))))
                 g$f$6495$c1uhW)
               (g$get-symbols$6407$c1uhW g$enumset1$6492$c1uhW)
               '0)))
           (g$enum-value$6395$c1uhW g$enumset1$6492$c1uhW)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6425$c1uhW g$p$6426$c1uhW g$wr$6427$c1uhW)
       (g$fprintf$6558$c1uhW
         g$p$6426$c1uhW
         '"#[enum-set ~a]"
         (g$enum-set->list$6416$c1uhW g$x$6425$c1uhW))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6534$c1uhW
     g$dofmt$6556$c1uhW
     (case-lambda
       ((g$p$6538$c1uhW g$cntl$6539$c1uhW g$args$6540$c1uhW)
        ((case-lambda
           ((g$nmax$6541$c1uhW)
            ((letrec ((g$loop$6542$c1uhW
                        (case-lambda
                          ((g$n$6543$c1uhW g$a$6544$c1uhW)
                           (if (fx<=? g$n$6543$c1uhW g$nmax$6541$c1uhW)
                             ((case-lambda
                                ((g$c$6545$c1uhW)
                                 (if (if (g$char=?$5307$c1uhW
                                           g$c$6545$c1uhW
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6543$c1uhW
                                           g$nmax$6541$c1uhW))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6546$c1uhW)
                                       (if (g$memv$5056$c1uhW
                                             g$t$6546$c1uhW
                                             '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6544$c1uhW)
                                             g$p$6538$c1uhW)
                                           (g$loop$6542$c1uhW
                                             (fx+ g$n$6543$c1uhW '2)
                                             (cdr g$a$6544$c1uhW)))
                                         (if (g$memv$5056$c1uhW
                                               g$t$6546$c1uhW
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6544$c1uhW)
                                               g$p$6538$c1uhW)
                                             (g$loop$6542$c1uhW
                                               (fx+ g$n$6543$c1uhW '2)
                                               (cdr g$a$6544$c1uhW)))
                                           (if (g$memv$5056$c1uhW
                                                 g$t$6546$c1uhW
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6544$c1uhW)
                                                   '2)
                                                 g$p$6538$c1uhW)
                                               (g$loop$6542$c1uhW
                                                 (fx+ g$n$6543$c1uhW '2)
                                                 (cdr g$a$6544$c1uhW)))
                                             (if (g$memv$5056$c1uhW
                                                   g$t$6546$c1uhW
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6544$c1uhW)
                                                     '8)
                                                   g$p$6538$c1uhW)
                                                 (g$loop$6542$c1uhW
                                                   (fx+ g$n$6543$c1uhW '2)
                                                   (cdr g$a$6544$c1uhW)))
                                               (if (g$memv$5056$c1uhW
                                                     g$t$6546$c1uhW
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6544$c1uhW)
                                                       '16)
                                                     g$p$6538$c1uhW)
                                                   (g$loop$6542$c1uhW
                                                     (fx+ g$n$6543$c1uhW '2)
                                                     (cdr g$a$6544$c1uhW)))
                                                 (if (g$memv$5056$c1uhW
                                                       g$t$6546$c1uhW
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6544$c1uhW)
                                                         '10)
                                                       g$p$6538$c1uhW)
                                                     (g$loop$6542$c1uhW
                                                       (fx+ g$n$6543$c1uhW '2)
                                                       (cdr g$a$6544$c1uhW)))
                                                   (if (g$memv$5056$c1uhW
                                                         g$t$6546$c1uhW
                                                         '(#\~))
                                                     (begin
                                                       (g$write-char$6384$c1uhW
                                                         '#\~
                                                         g$p$6538$c1uhW)
                                                       (g$loop$6542$c1uhW
                                                         (fx+ g$n$6543$c1uhW '2)
                                                         g$a$6544$c1uhW))
                                                     (begin
                                                       (g$write-char$6384$c1uhW
                                                         g$c$6545$c1uhW
                                                         g$p$6538$c1uhW)
                                                       (g$loop$6542$c1uhW
                                                         (fx+ g$n$6543$c1uhW '1)
                                                         g$a$6544$c1uhW)))))))))))
                                    (string-ref
                                      g$cntl$6539$c1uhW
                                      (fx+ g$n$6543$c1uhW '1)))
                                   (begin
                                     (g$write-char$6384$c1uhW
                                       g$c$6545$c1uhW
                                       g$p$6538$c1uhW)
                                     (g$loop$6542$c1uhW
                                       (fx+ g$n$6543$c1uhW '1)
                                       g$a$6544$c1uhW)))))
                              (string-ref g$cntl$6539$c1uhW g$n$6543$c1uhW))
                             (void))))))
               g$loop$6542$c1uhW)
             '0
             g$args$6540$c1uhW)))
         (fx- (string-length g$cntl$6539$c1uhW) '1)))))
   (g$printf$6535$c1uhW
     g$printf$6557$c1uhW
     (case-lambda
       ((g$control$6547$c1uhW . g$args$6548$c1uhW)
        (g$dofmt$6534$c1uhW
          (current-output-port)
          g$control$6547$c1uhW
          g$args$6548$c1uhW))))
   (g$fprintf$6536$c1uhW
     g$fprintf$6558$c1uhW
     (case-lambda
       ((g$p$6549$c1uhW g$control$6550$c1uhW . g$args$6551$c1uhW)
        (g$dofmt$6534$c1uhW
          g$p$6549$c1uhW
          g$control$6550$c1uhW
          g$args$6551$c1uhW))))
   (g$format$6537$c1uhW
     g$format$6559$c1uhW
     (case-lambda
       ((g$control$6552$c1uhW . g$args$6553$c1uhW)
        (call-with-values
          g$open-string-output-port$6336$c1uhW
          (case-lambda
            ((g$p$6554$c1uhW g$c$6555$c1uhW)
             (begin
               (g$dofmt$6534$c1uhW
                 g$p$6554$c1uhW
                 g$control$6552$c1uhW
                 g$args$6553$c1uhW)
               (g$c$6555$c1uhW)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6560$c1uhW
     g$make-traced-macro$6563$c1uhW
     (case-lambda
       ((g$name$6561$c1uhW g$x$6562$c1uhW)
        (if (procedure? g$x$6562$c1uhW)
          (make-traced-procedure
            g$name$6561$c1uhW
            g$x$6562$c1uhW
            g$syntax->datum$11600$c1uhW)
          (if (g$variable-transformer?$11422$c1uhW g$x$6562$c1uhW)
            (g$make-variable-transformer$11421$c1uhW
              (make-traced-procedure
                g$name$6561$c1uhW
                (g$variable-transformer-procedure$11423$c1uhW g$x$6562$c1uhW)
                g$syntax->datum$11600$c1uhW))
            g$x$6562$c1uhW))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$6564$c1uhW
     g$cps/generate-reference$6825$c1uhW
     (case-lambda
       ((g$variable$6616$c1uhW)
        (g$cps/generate-operand$6568$c1uhW
          (g$make-reference$6594$c1uhW g$variable$6616$c1uhW)))))
   (g$cps/generate-literal$6565$c1uhW
     g$cps/generate-literal$6826$c1uhW
     (case-lambda
       ((g$datum$6617$c1uhW)
        (g$cps/generate-operand$6568$c1uhW
          (g$make-literal$6593$c1uhW g$datum$6617$c1uhW)))))
   (g$cps/generate-abstraction$6566$c1uhW
     g$cps/generate-abstraction$6827$c1uhW
     (case-lambda
       ((g$bvl$6618$c1uhW g$body-generator$6619$c1uhW)
        (g$cps/generate-operand$6568$c1uhW
          (g$make-user-abstraction$6595$c1uhW
            g$bvl$6618$c1uhW
            (case-lambda
              ((g$continuation-variable$6620$c1uhW)
               (g$body-generator$6619$c1uhW
                 (g$variable-continuator$6581$c1uhW
                   g$continuation-variable$6620$c1uhW)))))))))
   (g$cps/generate-abstractions$6567$c1uhW
     g$cps/generate-abstractions$6828$c1uhW
     (case-lambda
       ((g$bvls$6621$c1uhW g$body-generators$6622$c1uhW)
        (g$cps/generate-operand$6568$c1uhW
          (g$make-user-abstractions$6596$c1uhW
            g$bvls$6621$c1uhW
            (g$map$5063$c1uhW
              (case-lambda
                ((g$body-generator$6623$c1uhW)
                 (case-lambda
                   ((g$continuation-variable$6624$c1uhW)
                    (g$body-generator$6623$c1uhW
                      (g$variable-continuator$6581$c1uhW
                        g$continuation-variable$6624$c1uhW))))))
              g$body-generators$6622$c1uhW))))))
   (g$cps/generate-operand$6568$c1uhW
     g$cps/generate-operand$6829$c1uhW
     (case-lambda
       ((g$operand$6625$c1uhW)
        (case-lambda
          ((g$continuator$6626$c1uhW)
           (g$continue-with-operand$6584$c1uhW
             g$continuator$6626$c1uhW
             g$operand$6625$c1uhW))))))
   (g$cps/generate-conditional$6569$c1uhW
     g$cps/generate-conditional$6830$c1uhW
     (case-lambda
       ((g$condition-generator$6627$c1uhW
          g$consequent-generator$6628$c1uhW
          g$alternative-generator$6629$c1uhW)
        (case-lambda
          ((g$continuator$6630$c1uhW)
           (letrec* ((g$if-variable$6631$c1uhW
                       (case-lambda
                         ((g$continuation-variable$6633$c1uhW)
                          ((case-lambda
                             ((g$continuator*$6634$c1uhW)
                              (g$condition-generator$6627$c1uhW
                                (g$conditional-continuator$6580$c1uhW
                                  (case-lambda
                                    ((g$condition$6635$c1uhW)
                                     (g$make-conditional$6603$c1uhW
                                       g$condition$6635$c1uhW
                                       (g$consequent-generator$6628$c1uhW
                                         g$continuator*$6634$c1uhW)
                                       (g$alternative-generator$6629$c1uhW
                                         g$continuator*$6634$c1uhW))))))))
                           (g$variable-continuator$6581$c1uhW
                             g$continuation-variable$6633$c1uhW))))))
             (g$reify-continuation*$6586$c1uhW
               g$continuator$6630$c1uhW
               g$if-variable$6631$c1uhW
               (case-lambda
                 ((g$continuation-abstraction$6632$c1uhW)
                  (g$make-conditional-join$6604$c1uhW
                    g$continuation-abstraction$6632$c1uhW
                    g$if-variable$6631$c1uhW))))))))))
   (g$cps/generate-recursive-bind$6570$c1uhW
     g$cps/generate-recursive-bind$6831$c1uhW
     (case-lambda
       ((g$variables$6636$c1uhW
          g$generators$6637$c1uhW
          g$body-generator$6638$c1uhW)
        (case-lambda
          ((g$continuator$6639$c1uhW)
           (g$make-recursive-bind$6598$c1uhW
             g$variables$6636$c1uhW
             (g$map$5063$c1uhW
               (case-lambda
                 ((g$generator$6640$c1uhW)
                  (case-lambda
                    ((g$continuation-variable$6641$c1uhW)
                     (g$generator$6640$c1uhW
                       (g$variable-continuator$6581$c1uhW
                         g$continuation-variable$6641$c1uhW))))))
               g$generators$6637$c1uhW)
             (g$body-generator$6638$c1uhW
               (g$reified-continuator$6583$c1uhW
                 g$continuator$6639$c1uhW))))))))
   (g$cps/generate-recursive*-bind$6571$c1uhW
     g$cps/generate-recursive*-bind$6832$c1uhW
     (case-lambda
       ((g$variables$6642$c1uhW
          g$generators$6643$c1uhW
          g$body-generator$6644$c1uhW)
        (case-lambda
          ((g$continuator$6645$c1uhW)
           (g$make-recursive*-bind$6599$c1uhW
             g$variables$6642$c1uhW
             (g$map$5063$c1uhW
               (case-lambda
                 ((g$generator$6646$c1uhW)
                  (case-lambda
                    ((g$continuation-variable$6647$c1uhW)
                     (g$generator$6646$c1uhW
                       (g$variable-continuator$6581$c1uhW
                         g$continuation-variable$6647$c1uhW))))))
               g$generators$6643$c1uhW)
             (g$body-generator$6644$c1uhW
               (g$reified-continuator$6583$c1uhW
                 g$continuator$6645$c1uhW))))))))
   (g$cps/generate-recursive*-library-bind$6572$c1uhW
     g$cps/generate-recursive*-library-bind$6833$c1uhW
     (case-lambda
       ((g$name$6648$c1uhW
          g$variables$6649$c1uhW
          g$variables*$6650$c1uhW
          g$generators$6651$c1uhW
          g$body-generator$6652$c1uhW)
        (case-lambda
          ((g$continuator$6653$c1uhW)
           (g$make-recursive*-library-bind$6600$c1uhW
             g$name$6648$c1uhW
             g$variables$6649$c1uhW
             g$variables*$6650$c1uhW
             (g$map$5063$c1uhW
               (case-lambda
                 ((g$generator$6654$c1uhW)
                  (case-lambda
                    ((g$continuation-variable$6655$c1uhW)
                     (g$generator$6654$c1uhW
                       (g$variable-continuator$6581$c1uhW
                         g$continuation-variable$6655$c1uhW))))))
               g$generators$6651$c1uhW)
             (g$body-generator$6652$c1uhW
               (g$reified-continuator$6583$c1uhW
                 g$continuator$6653$c1uhW))))))))
   (g$cps/generate-sequence$6573$c1uhW
     g$cps/generate-sequence$6834$c1uhW
     (case-lambda
       ((g$generators$6656$c1uhW)
        (case-lambda
          ((g$continuator$6657$c1uhW)
           ((letrec ((g$recur$6658$c1uhW
                       (case-lambda
                         ((g$generators$6659$c1uhW)
                          ((car g$generators$6659$c1uhW)
                           ((case-lambda
                              ((g$generators$6660$c1uhW)
                               (if (pair? g$generators$6660$c1uhW)
                                 (g$effect-continuator$6579$c1uhW
                                   (case-lambda
                                     (()
                                      (g$recur$6658$c1uhW
                                        g$generators$6660$c1uhW))))
                                 g$continuator$6657$c1uhW)))
                            (cdr g$generators$6659$c1uhW)))))))
              g$recur$6658$c1uhW)
            g$generators$6656$c1uhW))))))
   (g$cps/generate-assignment$6574$c1uhW
     g$cps/generate-assignment$6835$c1uhW
     (case-lambda
       ((g$location$6661$c1uhW g$expression-generator$6662$c1uhW)
        (case-lambda
          ((g$continuator$6663$c1uhW)
           (g$expression-generator$6662$c1uhW
             (g$operand-continuator$6578$c1uhW
               (case-lambda
                 ((g$operand$6664$c1uhW)
                  (g$make-assignment$6606$c1uhW
                    g$location$6661$c1uhW
                    g$operand$6664$c1uhW
                    (g$continue-with-operand$6584$c1uhW
                      g$continuator$6663$c1uhW
                      '(void))))))))))))
   (g$cps/generate-primitive$6575$c1uhW
     g$cps/generate-primitive$6836$c1uhW
     (case-lambda
       ((g$operator$6665$c1uhW g$operand-generators$6666$c1uhW)
        (case-lambda
          ((g$continuator$6667$c1uhW)
           (g$continue-with-operand$6584$c1uhW
             g$continuator$6667$c1uhW
             (cons
               g$operator$6665$c1uhW
               (g$map$5063$c1uhW
                 (case-lambda
                   ((g$generator$6668$c1uhW)
                    (case-lambda
                      ((g$continuation-variable$6669$c1uhW)
                       (g$generator$6668$c1uhW
                         (g$variable-continuator$6581$c1uhW
                           g$continuation-variable$6669$c1uhW))))))
                 g$operand-generators$6666$c1uhW))))))))
   (g$cps/generate-combination$6576$c1uhW
     g$cps/generate-combination$6837$c1uhW
     (case-lambda
       ((g$operator-generator$6670$c1uhW g$operand-generators$6671$c1uhW)
        (g$cps/generate-subproblems$6577$c1uhW
          (reverse
            (cons
              g$operator-generator$6670$c1uhW
              g$operand-generators$6671$c1uhW))
          (case-lambda
            ((g$operands$6672$c1uhW g$continuator$6673$c1uhW)
             (g$make-combination$6601$c1uhW
               (car g$operands$6672$c1uhW)
               (g$reify-continuation$6585$c1uhW g$continuator$6673$c1uhW)
               (cdr g$operands$6672$c1uhW))))))))
   (g$cps/generate-subproblems$6577$c1uhW
     g$cps/generate-subproblems$6838$c1uhW
     (case-lambda
       ((g$generators$6674$c1uhW g$combiner$6675$c1uhW)
        (case-lambda
          ((g$continuator$6676$c1uhW)
           ((letrec ((g$recur$6677$c1uhW
                       (case-lambda
                         ((g$generators$6678$c1uhW g$operands$6679$c1uhW)
                          (if (pair? g$generators$6678$c1uhW)
                            ((car g$generators$6678$c1uhW)
                             ((case-lambda
                                ((g$generators$6680$c1uhW)
                                 (g$operand-continuator$6578$c1uhW
                                   (case-lambda
                                     ((g$operand$6681$c1uhW)
                                      (g$recur$6677$c1uhW
                                        g$generators$6680$c1uhW
                                        (cons
                                          g$operand$6681$c1uhW
                                          g$operands$6679$c1uhW)))))))
                              (cdr g$generators$6678$c1uhW)))
                            (g$combiner$6675$c1uhW
                              g$operands$6679$c1uhW
                              g$continuator$6676$c1uhW))))))
              g$recur$6677$c1uhW)
            g$generators$6674$c1uhW
            '()))))))
   (g$operand-continuator$6578$c1uhW
     g$operand-continuator$6839$c1uhW
     (case-lambda
       ((g$generator$6682$c1uhW)
        (case-lambda
          ((g$if-operand$6683$c1uhW
             g$if-effect$6684$c1uhW
             g$if-conditional$6685$c1uhW
             g$if-variable$6686$c1uhW
             g$if-inline$6687$c1uhW)
           (begin
             g$if-effect$6684$c1uhW
             g$if-conditional$6685$c1uhW
             g$if-variable$6686$c1uhW
             g$if-inline$6687$c1uhW
             (g$if-operand$6683$c1uhW g$generator$6682$c1uhW)))))))
   (g$effect-continuator$6579$c1uhW
     g$effect-continuator$6840$c1uhW
     (case-lambda
       ((g$generator$6688$c1uhW)
        (case-lambda
          ((g$if-operand$6689$c1uhW
             g$if-effect$6690$c1uhW
             g$if-conditional$6691$c1uhW
             g$if-variable$6692$c1uhW
             g$if-inline$6693$c1uhW)
           (begin
             g$if-operand$6689$c1uhW
             g$if-conditional$6691$c1uhW
             g$if-variable$6692$c1uhW
             g$if-inline$6693$c1uhW
             (g$if-effect$6690$c1uhW g$generator$6688$c1uhW)))))))
   (g$conditional-continuator$6580$c1uhW
     g$conditional-continuator$6841$c1uhW
     (case-lambda
       ((g$generator$6694$c1uhW)
        (case-lambda
          ((g$if-operand$6695$c1uhW
             g$if-effect$6696$c1uhW
             g$if-conditional$6697$c1uhW
             g$if-variable$6698$c1uhW
             g$if-inline$6699$c1uhW)
           (begin
             g$if-operand$6695$c1uhW
             g$if-effect$6696$c1uhW
             g$if-variable$6698$c1uhW
             g$if-inline$6699$c1uhW
             (g$if-conditional$6697$c1uhW g$generator$6694$c1uhW)))))))
   (g$variable-continuator$6581$c1uhW
     g$variable-continuator$6842$c1uhW
     (case-lambda
       ((g$variable$6700$c1uhW)
        (case-lambda
          ((g$if-operand$6701$c1uhW
             g$if-effect$6702$c1uhW
             g$if-conditional$6703$c1uhW
             g$if-variable$6704$c1uhW
             g$if-inline$6705$c1uhW)
           (begin
             g$if-operand$6701$c1uhW
             g$if-effect$6702$c1uhW
             g$if-variable$6704$c1uhW
             g$if-inline$6705$c1uhW
             (g$if-variable$6704$c1uhW g$variable$6700$c1uhW)))))))
   (g$inline-continuator$6582$c1uhW
     g$inline-continuator$6843$c1uhW
     (case-lambda
       ((g$continuation$6706$c1uhW)
        (case-lambda
          ((g$if-operand$6707$c1uhW
             g$if-effect$6708$c1uhW
             g$if-conditional$6709$c1uhW
             g$if-variable$6710$c1uhW
             g$if-inline$6711$c1uhW)
           (begin
             g$if-operand$6707$c1uhW
             g$if-effect$6708$c1uhW
             g$if-conditional$6709$c1uhW
             g$if-variable$6710$c1uhW
             (g$if-inline$6711$c1uhW g$continuation$6706$c1uhW)))))))
   (g$reified-continuator$6583$c1uhW
     g$reified-continuator$6844$c1uhW
     (case-lambda
       ((g$continuator$6712$c1uhW)
        (case-lambda
          ((g$if-operand$6713$c1uhW
             g$if-effect$6714$c1uhW
             g$if-conditional$6715$c1uhW
             g$if-variable$6716$c1uhW
             g$if-inline$6717$c1uhW)
           (begin
             g$if-operand$6713$c1uhW
             g$if-effect$6714$c1uhW
             g$if-conditional$6715$c1uhW
             (g$reify-continuation*$6586$c1uhW
               g$continuator$6712$c1uhW
               g$if-variable$6716$c1uhW
               g$if-inline$6717$c1uhW)))))))
   (g$continue-with-operand$6584$c1uhW
     g$continue-with-operand$6845$c1uhW
     (case-lambda
       ((g$continuator$6718$c1uhW g$operand$6719$c1uhW)
        (g$continuator$6718$c1uhW
          (case-lambda
            ((g$generator$6720$c1uhW)
             (g$generator$6720$c1uhW g$operand$6719$c1uhW)))
          (case-lambda ((g$generator$6721$c1uhW) (g$generator$6721$c1uhW)))
          (case-lambda
            ((g$generator$6722$c1uhW)
             (g$generator$6722$c1uhW
               (g$make-truth-test$6607$c1uhW g$operand$6719$c1uhW))))
          (case-lambda
            ((g$continuation-variable$6723$c1uhW)
             (g$make-return$6602$c1uhW
               (g$make-reference$6594$c1uhW g$continuation-variable$6723$c1uhW)
               (list g$operand$6719$c1uhW))))
          (case-lambda
            ((g$continuation-abstraction$6724$c1uhW)
             (g$make-return$6602$c1uhW
               g$continuation-abstraction$6724$c1uhW
               (list g$operand$6719$c1uhW))))))))
   (g$reify-continuation$6585$c1uhW
     g$reify-continuation$6846$c1uhW
     (case-lambda
       ((g$continuator$6725$c1uhW)
        (g$continuator$6725$c1uhW
          g$operand-continuation-reifier$6588$c1uhW
          g$effect-continuation-reifier$6590$c1uhW
          g$conditional-continuation-reifier$6592$c1uhW
          (case-lambda
            ((g$variable$6726$c1uhW)
             (g$make-reference$6594$c1uhW g$variable$6726$c1uhW)))
          (case-lambda
            ((g$continuation$6727$c1uhW) g$continuation$6727$c1uhW))))))
   (g$reify-continuation*$6586$c1uhW
     g$reify-continuation*$6847$c1uhW
     (case-lambda
       ((g$continuator$6728$c1uhW
          g$if-variable$6729$c1uhW
          g$if-inline$6730$c1uhW)
        (g$continuator$6728$c1uhW
          (g$operand-continuation-reifier*$6587$c1uhW g$if-inline$6730$c1uhW)
          (g$effect-continuation-reifier*$6589$c1uhW g$if-inline$6730$c1uhW)
          (g$conditional-continuation-reifier*$6591$c1uhW
            g$if-inline$6730$c1uhW)
          g$if-variable$6729$c1uhW
          g$if-inline$6730$c1uhW))))
   (g$operand-continuation-reifier*$6587$c1uhW
     g$operand-continuation-reifier*$6848$c1uhW
     (case-lambda
       ((g$receiver$6731$c1uhW)
        (case-lambda
          ((g$generator$6732$c1uhW)
           (g$receiver$6731$c1uhW
             ((case-lambda
                ((g$variable$6733$c1uhW)
                 (g$make-continuation-abstraction$6597$c1uhW
                   (list g$variable$6733$c1uhW)
                   (g$generator$6732$c1uhW
                     (g$make-reference$6594$c1uhW g$variable$6733$c1uhW)))))
              (g$generate-variable$6608$c1uhW 'V))))))))
   (g$operand-continuation-reifier$6588$c1uhW
     g$operand-continuation-reifier$6849$c1uhW
     (g$operand-continuation-reifier*$6587$c1uhW values))
   (g$effect-continuation-reifier*$6589$c1uhW
     g$effect-continuation-reifier*$6850$c1uhW
     (case-lambda
       ((g$receiver$6734$c1uhW)
        (case-lambda
          ((g$generator$6735$c1uhW)
           (g$receiver$6734$c1uhW
             ((case-lambda
                ((g$variable$6736$c1uhW)
                 (g$make-continuation-abstraction$6597$c1uhW
                   g$variable$6736$c1uhW
                   (g$generator$6735$c1uhW))))
              (g$generate-variable$6608$c1uhW 'IGNORE))))))))
   (g$effect-continuation-reifier$6590$c1uhW
     g$effect-continuation-reifier$6851$c1uhW
     (g$effect-continuation-reifier*$6589$c1uhW values))
   (g$conditional-continuation-reifier*$6591$c1uhW
     g$conditional-continuation-reifier*$6852$c1uhW
     (case-lambda
       ((g$receiver$6737$c1uhW)
        (case-lambda
          ((g$generator$6738$c1uhW)
           (g$receiver$6737$c1uhW
             ((case-lambda
                ((g$variable$6739$c1uhW)
                 (g$make-continuation-abstraction$6597$c1uhW
                   (list g$variable$6739$c1uhW)
                   (g$generator$6738$c1uhW
                     (g$make-truth-test$6607$c1uhW
                       (g$make-reference$6594$c1uhW g$variable$6739$c1uhW))))))
              (g$generate-variable$6608$c1uhW 'T))))))))
   (g$conditional-continuation-reifier$6592$c1uhW
     g$conditional-continuation-reifier$6853$c1uhW
     (g$conditional-continuation-reifier*$6591$c1uhW values))
   (g$make-literal$6593$c1uhW
     g$make-literal$6854$c1uhW
     (case-lambda ((g$datum$6740$c1uhW) (list 'quote g$datum$6740$c1uhW))))
   (g$make-reference$6594$c1uhW
     g$make-reference$6855$c1uhW
     (case-lambda ((g$variable$6741$c1uhW) g$variable$6741$c1uhW)))
   (g$make-user-abstraction$6595$c1uhW
     g$make-user-abstraction$6856$c1uhW
     (case-lambda
       ((g$bvl$6742$c1uhW g$body-constructor$6743$c1uhW)
        ((case-lambda
           ((g$continuation$6744$c1uhW)
            (list
              'case-lambda
              (list
                (cons g$continuation$6744$c1uhW g$bvl$6742$c1uhW)
                (g$body-constructor$6743$c1uhW g$continuation$6744$c1uhW)))))
         (g$generate-variable$6608$c1uhW 'C)))))
   (g$make-user-abstractions$6596$c1uhW
     g$make-user-abstractions$6857$c1uhW
     (case-lambda
       ((g$bvls$6745$c1uhW g$body-constructors$6746$c1uhW)
        ((case-lambda
           ((g$continuation$6747$c1uhW)
            (cons
              'case-lambda
              (g$map$5063$c1uhW
                (case-lambda
                  ((g$bvl$6748$c1uhW g$body-constructor$6749$c1uhW)
                   (list
                     (cons g$continuation$6747$c1uhW g$bvl$6748$c1uhW)
                     (g$body-constructor$6749$c1uhW
                       g$continuation$6747$c1uhW))))
                g$bvls$6745$c1uhW
                g$body-constructors$6746$c1uhW))))
         (g$generate-variable$6608$c1uhW 'C)))))
   (g$make-continuation-abstraction$6597$c1uhW
     g$make-continuation-abstraction$6858$c1uhW
     (case-lambda
       ((g$bvl$6750$c1uhW g$body$6751$c1uhW)
        (list 'case-lambda (list g$bvl$6750$c1uhW g$body$6751$c1uhW)))))
   (g$make-recursive-bind$6598$c1uhW
     g$make-recursive-bind$6859$c1uhW
     (case-lambda
       ((g$variables$6752$c1uhW g$constructors$6753$c1uhW g$body$6754$c1uhW)
        (list
          'letrec
          (g$map$5063$c1uhW
            (case-lambda
              ((g$variable$6755$c1uhW g$constructor$6756$c1uhW)
               (list
                 g$variable$6755$c1uhW
                 (cons
                   (g$make-user-abstraction$6595$c1uhW
                     '()
                     g$constructor$6756$c1uhW)
                   '(identity-for-cps)))))
            g$variables$6752$c1uhW
            g$constructors$6753$c1uhW)
          g$body$6754$c1uhW))))
   (g$make-recursive*-bind$6599$c1uhW
     g$make-recursive*-bind$6860$c1uhW
     (case-lambda
       ((g$variables$6757$c1uhW g$constructors$6758$c1uhW g$body$6759$c1uhW)
        (list
          'letrec*
          (g$map$5063$c1uhW
            (case-lambda
              ((g$variable$6760$c1uhW g$constructor$6761$c1uhW)
               (list
                 g$variable$6760$c1uhW
                 (cons
                   (g$make-user-abstraction$6595$c1uhW
                     '()
                     g$constructor$6761$c1uhW)
                   '(identity-for-cps)))))
            g$variables$6757$c1uhW
            g$constructors$6758$c1uhW)
          g$body$6759$c1uhW))))
   (g$make-recursive*-library-bind$6600$c1uhW
     g$make-recursive*-library-bind$6861$c1uhW
     (case-lambda
       ((g$name$6762$c1uhW
          g$variables$6763$c1uhW
          g$variables*$6764$c1uhW
          g$constructors$6765$c1uhW
          g$body$6766$c1uhW)
        (list
          'library-letrec*
          g$name$6762$c1uhW
          (g$map$5063$c1uhW
            (case-lambda
              ((g$variable$6767$c1uhW
                 g$variable*$6768$c1uhW
                 g$constructor$6769$c1uhW)
               (list
                 g$variable$6767$c1uhW
                 g$variable*$6768$c1uhW
                 (cons
                   (g$make-user-abstraction$6595$c1uhW
                     '()
                     g$constructor$6769$c1uhW)
                   '(identity-for-cps)))))
            g$variables$6763$c1uhW
            g$variables*$6764$c1uhW
            g$constructors$6765$c1uhW)
          g$body$6766$c1uhW))))
   (g$make-combination$6601$c1uhW
     g$make-combination$6862$c1uhW
     (case-lambda
       ((g$operator$6770$c1uhW g$continuation$6771$c1uhW g$operands$6772$c1uhW)
        (cons
          g$operator$6770$c1uhW
          (cons g$continuation$6771$c1uhW g$operands$6772$c1uhW)))))
   (g$make-return$6602$c1uhW
     g$make-return$6863$c1uhW
     (case-lambda
       ((g$continuation$6773$c1uhW g$operands$6774$c1uhW)
        (cons g$continuation$6773$c1uhW g$operands$6774$c1uhW))))
   (g$make-conditional$6603$c1uhW
     g$make-conditional$6864$c1uhW
     (case-lambda
       ((g$condition$6775$c1uhW
          g$consequent$6776$c1uhW
          g$alternative$6777$c1uhW)
        (list
          'if
          g$condition$6775$c1uhW
          g$consequent$6776$c1uhW
          g$alternative$6777$c1uhW))))
   (g$make-conditional-join$6604$c1uhW
     g$make-conditional-join$6865$c1uhW
     (case-lambda
       ((g$continuation$6778$c1uhW g$constructor$6779$c1uhW)
        ((case-lambda
           ((g$variable$6780$c1uhW)
            (g$make-let$6605$c1uhW
              (list g$variable$6780$c1uhW)
              (list g$continuation$6778$c1uhW)
              (g$constructor$6779$c1uhW g$variable$6780$c1uhW))))
         (g$generate-variable$6608$c1uhW 'J)))))
   (g$make-let$6605$c1uhW
     g$make-let$6866$c1uhW
     (case-lambda
       ((g$variables$6781$c1uhW g$expressions$6782$c1uhW g$body$6783$c1uhW)
        (cons
          (list 'case-lambda (list g$variables$6781$c1uhW g$body$6783$c1uhW))
          g$expressions$6782$c1uhW))))
   (g$make-assignment$6606$c1uhW
     g$make-assignment$6867$c1uhW
     (case-lambda
       ((g$location$6784$c1uhW g$operand$6785$c1uhW g$expression$6786$c1uhW)
        (list
          'begin
          (list 'set! g$location$6784$c1uhW g$operand$6785$c1uhW)
          g$expression$6786$c1uhW))))
   (g$make-truth-test$6607$c1uhW
     g$make-truth-test$6868$c1uhW
     (case-lambda ((g$operand$6787$c1uhW) g$operand$6787$c1uhW)))
   (g$generate-variable$6608$c1uhW
     g$generate-variable$6869$c1uhW
     (case-lambda ((g$name$6788$c1uhW) (gensym g$name$6788$c1uhW))))
   (g$parse$6609$c1uhW
     g$parse$6870$c1uhW
     (case-lambda
       ((g$x$6789$c1uhW)
        (if (pair? g$x$6789$c1uhW)
          ((case-lambda
             ((g$t$6790$c1uhW)
              (if (g$memv$5056$c1uhW g$t$6790$c1uhW '(quote))
                (g$cps/generate-literal$6565$c1uhW
                  (g$cadr$5264$c1uhW g$x$6789$c1uhW))
                (if (g$memv$5056$c1uhW g$t$6790$c1uhW '(if))
                  (g$cps/generate-conditional$6569$c1uhW
                    (g$parse$6609$c1uhW (g$cadr$5264$c1uhW g$x$6789$c1uhW))
                    (g$parse$6609$c1uhW (g$caddr$5270$c1uhW g$x$6789$c1uhW))
                    (g$parse$6609$c1uhW (g$cadddr$5282$c1uhW g$x$6789$c1uhW)))
                  (if (g$memv$5056$c1uhW g$t$6790$c1uhW '(case-lambda))
                    ((case-lambda
                       ((g$d$6791$c1uhW)
                        (g$cps/generate-abstractions$6567$c1uhW
                          (g$map$5063$c1uhW car g$d$6791$c1uhW)
                          (g$map$5063$c1uhW
                            (case-lambda
                              ((g$e$6792$c1uhW)
                               (g$cps/generate-sequence$6573$c1uhW
                                 (g$map$5063$c1uhW
                                   g$parse$6609$c1uhW
                                   (cdr g$e$6792$c1uhW)))))
                            g$d$6791$c1uhW))))
                     (cdr g$x$6789$c1uhW))
                    (if (g$memv$5056$c1uhW g$t$6790$c1uhW '(letrec))
                      ((case-lambda
                         ((g$bindings$6793$c1uhW g$body*$6794$c1uhW)
                          ((case-lambda
                             ((g$lhs*$6795$c1uhW g$rhs*$6796$c1uhW)
                              (g$cps/generate-recursive-bind$6570$c1uhW
                                g$lhs*$6795$c1uhW
                                (g$map$5063$c1uhW
                                  g$parse$6609$c1uhW
                                  g$rhs*$6796$c1uhW)
                                (g$parse$6609$c1uhW
                                  (cons 'begin g$body*$6794$c1uhW)))))
                           (g$map$5063$c1uhW car g$bindings$6793$c1uhW)
                           (g$map$5063$c1uhW
                             g$cadr$5264$c1uhW
                             g$bindings$6793$c1uhW))))
                       (g$cadr$5264$c1uhW g$x$6789$c1uhW)
                       (g$cddr$5266$c1uhW g$x$6789$c1uhW))
                      (if (g$memv$5056$c1uhW g$t$6790$c1uhW '(letrec*))
                        ((case-lambda
                           ((g$bindings$6797$c1uhW g$body*$6798$c1uhW)
                            ((case-lambda
                               ((g$lhs*$6799$c1uhW g$rhs*$6800$c1uhW)
                                (g$cps/generate-recursive*-bind$6571$c1uhW
                                  g$lhs*$6799$c1uhW
                                  (g$map$5063$c1uhW
                                    g$parse$6609$c1uhW
                                    g$rhs*$6800$c1uhW)
                                  (g$parse$6609$c1uhW
                                    (cons 'begin g$body*$6798$c1uhW)))))
                             (g$map$5063$c1uhW car g$bindings$6797$c1uhW)
                             (g$map$5063$c1uhW
                               g$cadr$5264$c1uhW
                               g$bindings$6797$c1uhW))))
                         (g$cadr$5264$c1uhW g$x$6789$c1uhW)
                         (g$cddr$5266$c1uhW g$x$6789$c1uhW))
                        (if (g$memv$5056$c1uhW
                              g$t$6790$c1uhW
                              '(library-letrec*))
                          ((case-lambda
                             ((g$name$6801$c1uhW g$x$6802$c1uhW)
                              ((case-lambda
                                 ((g$bindings$6803$c1uhW g$body*$6804$c1uhW)
                                  ((case-lambda
                                     ((g$lhs*$6805$c1uhW
                                        g$lhs**$6806$c1uhW
                                        g$rhs*$6807$c1uhW)
                                      (g$cps/generate-recursive*-library-bind$6572$c1uhW
                                        g$name$6801$c1uhW
                                        g$lhs*$6805$c1uhW
                                        g$lhs**$6806$c1uhW
                                        (g$map$5063$c1uhW
                                          g$parse$6609$c1uhW
                                          g$rhs*$6807$c1uhW)
                                        (g$parse$6609$c1uhW
                                          (cons 'begin g$body*$6804$c1uhW)))))
                                   (g$map$5063$c1uhW car g$bindings$6803$c1uhW)
                                   (g$map$5063$c1uhW
                                     g$cadr$5264$c1uhW
                                     g$bindings$6803$c1uhW)
                                   (g$map$5063$c1uhW
                                     g$caddr$5270$c1uhW
                                     g$bindings$6803$c1uhW))))
                               (g$cadr$5264$c1uhW g$x$6802$c1uhW)
                               (g$cddr$5266$c1uhW g$x$6802$c1uhW))))
                           (g$cadr$5264$c1uhW g$x$6789$c1uhW)
                           (cdr g$x$6789$c1uhW))
                          (if (g$memv$5056$c1uhW g$t$6790$c1uhW '(begin))
                            (g$cps/generate-sequence$6573$c1uhW
                              (g$map$5063$c1uhW
                                g$parse$6609$c1uhW
                                (cdr g$x$6789$c1uhW)))
                            (if (g$memv$5056$c1uhW g$t$6790$c1uhW '(set!))
                              (g$cps/generate-assignment$6574$c1uhW
                                (g$cadr$5264$c1uhW g$x$6789$c1uhW)
                                (g$parse$6609$c1uhW
                                  (g$caddr$5270$c1uhW g$x$6789$c1uhW)))
                              (if (list? g$x$6789$c1uhW)
                                (g$cps/generate-combination$6576$c1uhW
                                  (g$parse$6609$c1uhW (car g$x$6789$c1uhW))
                                  (g$map$5063$c1uhW
                                    g$parse$6609$c1uhW
                                    (cdr g$x$6789$c1uhW)))
                                (error
                                  'rewrite
                                  '"invalid form ~s ~s"
                                  g$x$6789$c1uhW
                                  (list? g$x$6789$c1uhW)))))))))))))
           (car g$x$6789$c1uhW))
          (if (symbol? g$x$6789$c1uhW)
            (g$cps/generate-reference$6564$c1uhW g$x$6789$c1uhW)
            (g$cps/generate-literal$6565$c1uhW g$x$6789$c1uhW))))))
   (g$starts-with?$6610$c1uhW
     g$starts-with?$6871$c1uhW
     (case-lambda
       ((g$str$6808$c1uhW g$sub$6809$c1uhW)
        (clr-call-internal
          'system.string
          'startswith
          g$str$6808$c1uhW
          g$sub$6809$c1uhW))))
   (g$special$6611$c1uhW
     g$special$6872$c1uhW
     '(identity-for-cps call/cc call-with-current-continuation))
   (g$primitive?$6612$c1uhW
     g$primitive?$6873$c1uhW
     (case-lambda
       ((g$o$6810$c1uhW)
        (if (if (symbol? g$o$6810$c1uhW)
              (begin
                '#f
                (not (g$memq$5055$c1uhW g$o$6810$c1uhW g$special$6611$c1uhW)))
              '#f)
          (with-exception-handler
            (case-lambda ((g$e$6811$c1uhW) '#f))
            (case-lambda
              (()
               ((case-lambda
                  ((g$b$6812$c1uhW)
                   ((case-lambda
                      ((g$t$6813$c1uhW)
                       (if g$t$6813$c1uhW
                         g$t$6813$c1uhW
                         (begin
                           '#f
                           (g$starts-with?$6610$c1uhW
                             (symbol->string g$o$6810$c1uhW)
                             '"clr-")))))
                    (clr-is-internal
                      'ironscheme.runtime.builtinmethod
                      g$b$6812$c1uhW))))
                (symbol-value? g$o$6810$c1uhW)))))
          '#f))))
   (g$fix-primitives$6613$c1uhW
     g$fix-primitives$6874$c1uhW
     (case-lambda
       ((g$e$6814$c1uhW)
        (if (if (pair? g$e$6814$c1uhW) (begin '#f (list? g$e$6814$c1uhW)) '#f)
          ((case-lambda
             ((g$o$6815$c1uhW)
              (if (eq? g$o$6815$c1uhW 'quote)
                g$e$6814$c1uhW
                (if (eq? g$o$6815$c1uhW 'library-letrec*)
                  ((case-lambda
                     ((g$name$6816$c1uhW g$e$6817$c1uhW)
                      ((case-lambda
                         ((g$bindings$6818$c1uhW g$body*$6819$c1uhW)
                          ((case-lambda
                             ((g$lhs*$6820$c1uhW
                                g$lhs**$6821$c1uhW
                                g$rhs*$6822$c1uhW)
                              (cons
                                'library-letrec*
                                (cons
                                  g$name$6816$c1uhW
                                  (cons
                                    (g$map$5063$c1uhW
                                      list
                                      g$lhs*$6820$c1uhW
                                      g$lhs**$6821$c1uhW
                                      (g$map$5063$c1uhW
                                        g$fix-primitives$6613$c1uhW
                                        g$rhs*$6822$c1uhW))
                                    (g$map$5063$c1uhW
                                      g$fix-primitives$6613$c1uhW
                                      g$body*$6819$c1uhW))))))
                           (g$map$5063$c1uhW car g$bindings$6818$c1uhW)
                           (g$map$5063$c1uhW
                             g$cadr$5264$c1uhW
                             g$bindings$6818$c1uhW)
                           (g$map$5063$c1uhW
                             g$caddr$5270$c1uhW
                             g$bindings$6818$c1uhW))))
                       (g$cadr$5264$c1uhW g$e$6817$c1uhW)
                       (g$cddr$5266$c1uhW g$e$6817$c1uhW))))
                   (g$cadr$5264$c1uhW g$e$6814$c1uhW)
                   (cdr g$e$6814$c1uhW))
                  (if (begin '#f (g$primitive?$6612$c1uhW g$o$6815$c1uhW))
                    (if (pair? (cdr g$e$6814$c1uhW))
                      (list
                        (g$fix-primitives$6613$c1uhW
                          (g$cadr$5264$c1uhW g$e$6814$c1uhW))
                        (cons
                          g$o$6815$c1uhW
                          (g$map$5063$c1uhW
                            g$fix-primitives$6613$c1uhW
                            (g$cddr$5266$c1uhW g$e$6814$c1uhW))))
                      g$e$6814$c1uhW)
                    (cons
                      (g$fix-primitives$6613$c1uhW g$o$6815$c1uhW)
                      (g$map$5063$c1uhW
                        g$fix-primitives$6613$c1uhW
                        (cdr g$e$6814$c1uhW))))))))
           (car g$e$6814$c1uhW))
          (if (g$primitive?$6612$c1uhW g$e$6814$c1uhW)
            (list
              'case-lambda
              (list
                '(k . args)
                (list 'k (cons 'apply (cons g$e$6814$c1uhW '(args))))))
            g$e$6814$c1uhW)))))
   (g$parse->cps$6614$c1uhW
     g$parse->cps$6875$c1uhW
     (case-lambda
       ((g$e$6823$c1uhW)
        ((g$parse$6609$c1uhW g$e$6823$c1uhW)
         (g$variable-continuator$6581$c1uhW 'identity-for-cps)))))
   (g$convert->cps$6615$c1uhW
     g$convert->cps$6876$c1uhW
     (case-lambda
       ((g$e$6824$c1uhW)
        (g$fix-primitives$6613$c1uhW
          (g$parse->cps$6614$c1uhW g$e$6824$c1uhW))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$6877$c1uhW
     g$library-version-mismatch-warning$6973$c1uhW
     (case-lambda
       ((g$name$6950$c1uhW g$depname$6951$c1uhW g$filename$6952$c1uhW)
        (g$fprintf$6558$c1uhW
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$6950$c1uhW
          g$depname$6951$c1uhW
          g$filename$6952$c1uhW))))
   (g$file-locator-resolution-error$6878$c1uhW
     g$file-locator-resolution-error$6974$c1uhW
     (case-lambda
       ((g$libname$6953$c1uhW g$failed-list$6954$c1uhW)
        (letrec* ((g$7958$6955$c1uhW
                    (make-record-type-descriptor
                      '&library-resolution
                      &condition-rtd
                      'g$7961$c1uhW
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$7960$6956$c1uhW '#f)
                  (g$7959$6957$c1uhW
                    (make-record-constructor-descriptor
                      g$7958$6955$c1uhW
                      &condition-rcd
                      g$7960$6956$c1uhW))
                  (g$7957$6958$c1uhW (record-predicate g$7958$6955$c1uhW))
                  (g$make-library-resolution-condition$6959$c1uhW
                    (record-constructor g$7959$6957$c1uhW))
                  (g$7955$6960$c1uhW (record-accessor g$7958$6955$c1uhW '0))
                  (g$7956$6961$c1uhW (record-accessor g$7958$6955$c1uhW '1))
                  (g$library-resolution-condition?$6962$c1uhW
                    (condition-predicate g$7958$6955$c1uhW))
                  (g$condition-library$6963$c1uhW
                    (condition-accessor g$7958$6955$c1uhW g$7955$6960$c1uhW))
                  (g$condition-files$6964$c1uhW
                    (condition-accessor g$7958$6955$c1uhW g$7956$6961$c1uhW)))
          (raise
            (condition
              (g$make-error$5825$c1uhW)
              (g$make-who-condition$5851$c1uhW 'expander)
              (g$make-message-condition$5805$c1uhW
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$6959$c1uhW
                g$libname$6953$c1uhW
                g$failed-list$6954$c1uhW)))))))
   (g$read-library-source-file$6879$c1uhW
     g$read-library-source-file$6975$c1uhW
     (case-lambda
       ((g$file-name$6965$c1uhW)
        (g$with-input-from-file$6385$c1uhW
          g$file-name$6965$c1uhW
          read-annotated))))
   (g$make-parameter$6880$c1uhW
     g$make-parameter$6976$c1uhW
     (case-lambda
       ((g$x$6966$c1uhW)
        (g$make-parameter$6880$c1uhW
          g$x$6966$c1uhW
          (case-lambda ((g$x$6967$c1uhW) g$x$6967$c1uhW))))
       ((g$x$6968$c1uhW g$fender$6969$c1uhW)
        (begin
          (if (not (procedure? g$fender$6969$c1uhW))
            (g$assertion-error$11593$c1uhW
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(89,8) - (89,36)"))
            (void))
          ((case-lambda
             ((g$x$6970$c1uhW)
              (case-lambda
                (() g$x$6970$c1uhW)
                ((g$v$6971$c1uhW)
                 (set! g$x$6970$c1uhW (g$fender$6969$c1uhW g$v$6971$c1uhW))))))
           (g$fender$6969$c1uhW g$x$6968$c1uhW))))))
   (g$file-options-constructor$6948$c1uhW
     g$file-options-constructor$6977$c1uhW
     (g$make-parameter$6880$c1uhW '#f))
   (g$file-options-spec$6949$c1uhW
     g$file-options-spec$6978$c1uhW
     (case-lambda
       ((g$x$6972$c1uhW)
        ((g$file-options-constructor$6948$c1uhW) g$x$6972$c1uhW)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$7174$c1uhW
     g$current-primitive-locations$7219$c1uhW
     (g$make-parameter$6976$c1uhW
       (case-lambda ((g$x$7180$c1uhW) '#f))
       (case-lambda
         ((g$p$7181$c1uhW)
          (begin
            (if (not (procedure? g$p$7181$c1uhW))
              (g$assertion-error$11593$c1uhW
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$7181$c1uhW)))))
   (g$mutable?$7175$c1uhW
     g$mutable?$7220$c1uhW
     (case-lambda
       ((g$x$7182$c1uhW)
        (letrec* ((g$simple?$7183$c1uhW
                    (case-lambda
                      ((g$x$7184$c1uhW)
                       ((case-lambda
                          ((g$t$7185$c1uhW)
                           (if g$t$7185$c1uhW
                             g$t$7185$c1uhW
                             ((case-lambda
                                ((g$t$7186$c1uhW)
                                 (if g$t$7186$c1uhW
                                   g$t$7186$c1uhW
                                   ((case-lambda
                                      ((g$t$7187$c1uhW)
                                       (if g$t$7187$c1uhW
                                         g$t$7187$c1uhW
                                         ((case-lambda
                                            ((g$t$7188$c1uhW)
                                             (if g$t$7188$c1uhW
                                               g$t$7188$c1uhW
                                               ((case-lambda
                                                  ((g$t$7189$c1uhW)
                                                   (if g$t$7189$c1uhW
                                                     g$t$7189$c1uhW
                                                     ((case-lambda
                                                        ((g$t$7190$c1uhW)
                                                         (if g$t$7190$c1uhW
                                                           g$t$7190$c1uhW
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$7184$c1uhW)))))
                                                      (bytevector?
                                                        g$x$7184$c1uhW)))))
                                                (string? g$x$7184$c1uhW)))))
                                          (boolean? g$x$7184$c1uhW)))))
                                    (symbol? g$x$7184$c1uhW)))))
                              (char? g$x$7184$c1uhW)))))
                        (null? g$x$7184$c1uhW))))))
          (not (g$simple?$7183$c1uhW g$x$7182$c1uhW))))))
   (g$rewriter$7176$c1uhW
     g$rewriter$7221$c1uhW
     (case-lambda
       ((g$quote-hack?$7191$c1uhW)
        (letrec* ((g$f$7192$c1uhW
                    (case-lambda
                      ((g$x$7193$c1uhW)
                       (if (pair? g$x$7193$c1uhW)
                         ((case-lambda
                            ((g$t$7194$c1uhW)
                             (if (g$memv$5056$c1uhW g$t$7194$c1uhW '(quote))
                               (if (if g$quote-hack?$7191$c1uhW
                                     (begin
                                       '#f
                                       (g$mutable?$7175$c1uhW
                                         (g$cadr$5264$c1uhW g$x$7193$c1uhW)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$7195$c1uhW)
                                     (begin
                                       (set-symbol-value!
                                         g$g$7195$c1uhW
                                         (g$cadr$5264$c1uhW g$x$7193$c1uhW))
                                       g$g$7195$c1uhW)))
                                  (gensym))
                                 g$x$7193$c1uhW)
                               (if (g$memv$5056$c1uhW
                                     g$t$7194$c1uhW
                                     '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (g$map$5063$c1uhW
                                     (case-lambda
                                       ((g$x$7196$c1uhW)
                                        (cons
                                          (car g$x$7196$c1uhW)
                                          (g$map$5063$c1uhW
                                            g$f$7192$c1uhW
                                            (cdr g$x$7196$c1uhW)))))
                                     (cdr g$x$7193$c1uhW)))
                                 (if (g$memv$5056$c1uhW
                                       g$t$7194$c1uhW
                                       '(lambda))
                                   (g$cons*$5065$c1uhW
                                     'lambda
                                     (g$cadr$5264$c1uhW g$x$7193$c1uhW)
                                     (g$map$5063$c1uhW
                                       g$f$7192$c1uhW
                                       (g$cddr$5266$c1uhW g$x$7193$c1uhW)))
                                   (if (g$memv$5056$c1uhW
                                         g$t$7194$c1uhW
                                         '(letrec))
                                     ((case-lambda
                                        ((g$bindings$7197$c1uhW
                                           g$body*$7198$c1uhW)
                                         ((case-lambda
                                            ((g$lhs*$7199$c1uhW
                                               g$rhs*$7200$c1uhW)
                                             (g$cons*$5065$c1uhW
                                               'letrec
                                               (g$map$5063$c1uhW
                                                 list
                                                 g$lhs*$7199$c1uhW
                                                 (g$map$5063$c1uhW
                                                   g$f$7192$c1uhW
                                                   g$rhs*$7200$c1uhW))
                                               (g$map$5063$c1uhW
                                                 g$f$7192$c1uhW
                                                 g$body*$7198$c1uhW))))
                                          (g$map$5063$c1uhW
                                            car
                                            g$bindings$7197$c1uhW)
                                          (g$map$5063$c1uhW
                                            g$cadr$5264$c1uhW
                                            g$bindings$7197$c1uhW))))
                                      (g$cadr$5264$c1uhW g$x$7193$c1uhW)
                                      (g$cddr$5266$c1uhW g$x$7193$c1uhW))
                                     (if (g$memv$5056$c1uhW
                                           g$t$7194$c1uhW
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$7201$c1uhW
                                             g$body*$7202$c1uhW)
                                           ((case-lambda
                                              ((g$lhs*$7203$c1uhW
                                                 g$rhs*$7204$c1uhW)
                                               (g$cons*$5065$c1uhW
                                                 'letrec*
                                                 (g$map$5063$c1uhW
                                                   list
                                                   g$lhs*$7203$c1uhW
                                                   (g$map$5063$c1uhW
                                                     g$f$7192$c1uhW
                                                     g$rhs*$7204$c1uhW))
                                                 (g$map$5063$c1uhW
                                                   g$f$7192$c1uhW
                                                   g$body*$7202$c1uhW))))
                                            (g$map$5063$c1uhW
                                              car
                                              g$bindings$7201$c1uhW)
                                            (g$map$5063$c1uhW
                                              g$cadr$5264$c1uhW
                                              g$bindings$7201$c1uhW))))
                                        (g$cadr$5264$c1uhW g$x$7193$c1uhW)
                                        (g$cddr$5266$c1uhW g$x$7193$c1uhW))
                                       (if (g$memv$5056$c1uhW
                                             g$t$7194$c1uhW
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$7205$c1uhW g$x$7206$c1uhW)
                                             ((case-lambda
                                                ((g$bindings$7207$c1uhW
                                                   g$body*$7208$c1uhW)
                                                 ((case-lambda
                                                    ((g$lhs*$7209$c1uhW
                                                       g$lhs**$7210$c1uhW
                                                       g$rhs*$7211$c1uhW)
                                                     (g$cons*$5065$c1uhW
                                                       'library-letrec*
                                                       g$name$7205$c1uhW
                                                       (g$map$5063$c1uhW
                                                         list
                                                         g$lhs*$7209$c1uhW
                                                         g$lhs**$7210$c1uhW
                                                         (g$map$5063$c1uhW
                                                           g$f$7192$c1uhW
                                                           g$rhs*$7211$c1uhW))
                                                       (g$map$5063$c1uhW
                                                         g$f$7192$c1uhW
                                                         g$body*$7208$c1uhW))))
                                                  (g$map$5063$c1uhW
                                                    car
                                                    g$bindings$7207$c1uhW)
                                                  (g$map$5063$c1uhW
                                                    g$cadr$5264$c1uhW
                                                    g$bindings$7207$c1uhW)
                                                  (g$map$5063$c1uhW
                                                    g$caddr$5270$c1uhW
                                                    g$bindings$7207$c1uhW))))
                                              (g$cadr$5264$c1uhW g$x$7206$c1uhW)
                                              (g$cddr$5266$c1uhW
                                                g$x$7206$c1uhW))))
                                          (g$cadr$5264$c1uhW g$x$7193$c1uhW)
                                          (cdr g$x$7193$c1uhW))
                                         (if (g$memv$5056$c1uhW
                                               g$t$7194$c1uhW
                                               '(begin))
                                           (cons
                                             'begin
                                             (g$map$5063$c1uhW
                                               g$f$7192$c1uhW
                                               (cdr g$x$7193$c1uhW)))
                                           (if (g$memv$5056$c1uhW
                                                 g$t$7194$c1uhW
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5264$c1uhW
                                                 g$x$7193$c1uhW)
                                               (g$f$7192$c1uhW
                                                 (g$caddr$5270$c1uhW
                                                   g$x$7193$c1uhW)))
                                             (if (g$memv$5056$c1uhW
                                                   g$t$7194$c1uhW
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$7212$c1uhW)
                                                   ((case-lambda
                                                      ((g$t$7213$c1uhW)
                                                       (if g$t$7213$c1uhW
                                                         ((case-lambda
                                                            ((g$loc$7214$c1uhW)
                                                             g$loc$7214$c1uhW))
                                                          g$t$7213$c1uhW)
                                                         g$op$7212$c1uhW)))
                                                    ((g$current-primitive-locations$7174$c1uhW)
                                                     g$op$7212$c1uhW))))
                                                (g$cadr$5264$c1uhW
                                                  g$x$7193$c1uhW))
                                               (if (g$memv$5056$c1uhW
                                                     g$t$7194$c1uhW
                                                     '(define))
                                                 g$x$7193$c1uhW
                                                 (if (list? g$x$7193$c1uhW)
                                                   (g$map$5063$c1uhW
                                                     g$f$7192$c1uhW
                                                     g$x$7193$c1uhW)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$7193$c1uhW
                                                     (list?
                                                       g$x$7193$c1uhW)))))))))))))))
                          (car g$x$7193$c1uhW))
                         g$x$7193$c1uhW)))))
          g$f$7192$c1uhW))))
   (g$expanded->core$7177$c1uhW
     g$expanded->core$7222$c1uhW
     (case-lambda
       ((g$x$7215$c1uhW) ((g$rewriter$7176$c1uhW '#t) g$x$7215$c1uhW))))
   (g$compile-core-expr$7178$c1uhW
     g$compile-core-expr$7223$c1uhW
     (case-lambda
       ((g$x$7216$c1uhW) ((g$rewriter$7176$c1uhW '#f) g$x$7216$c1uhW))))
   (g$compile-core-expr-to-port$7179$c1uhW
     g$compile-core-expr-to-port$7224$c1uhW
     (case-lambda
       ((g$x$7217$c1uhW g$p$7218$c1uhW)
        (g$pretty-print$7173$c1uhW
          ((g$rewriter$7176$c1uhW '#f) g$x$7217$c1uhW)
          g$p$7218$c1uhW)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$7263$c1uhW
     g$make-collection$7458$c1uhW
     (case-lambda
       (()
        ((case-lambda
           ((g$set$7324$c1uhW)
            (letrec* ((g$set-cons$7325$c1uhW
                        (case-lambda
                          ((g$x$7327$c1uhW g$ls$7328$c1uhW)
                           (if (g$memq$5055$c1uhW
                                 g$x$7327$c1uhW
                                 g$ls$7328$c1uhW)
                             g$ls$7328$c1uhW
                             (cons g$x$7327$c1uhW g$ls$7328$c1uhW))))))
              (case-lambda
                (() g$set$7324$c1uhW)
                ((g$x$7326$c1uhW)
                 (set! g$set$7324$c1uhW
                   (g$set-cons$7325$c1uhW g$x$7326$c1uhW g$set$7324$c1uhW)))))))
         '()))))
   (g$current-library-collection$7264$c1uhW
     g$current-library-collection$7459$c1uhW
     (g$make-parameter$6976$c1uhW
       (g$make-collection$7263$c1uhW)
       (case-lambda
         ((g$x$7329$c1uhW)
          (begin
            (if (not (procedure? g$x$7329$c1uhW))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$7329$c1uhW)
              (void))
            g$x$7329$c1uhW)))))
   (g$8274$7265$c1uhW
     g$8274$7460$c1uhW
     (make-record-type-descriptor
       'library
       '#f
       'g$8277$c1uhW
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$8276$7266$c1uhW g$8276$7461$c1uhW '#f)
   (g$8275$7267$c1uhW
     g$8275$7462$c1uhW
     (make-record-constructor-descriptor
       g$8274$7265$c1uhW
       '#f
       g$8276$7266$c1uhW))
   (g$library?$7268$c1uhW
     g$library?$7463$c1uhW
     (record-predicate g$8274$7265$c1uhW))
   (g$make-library$7269$c1uhW
     g$make-library$7464$c1uhW
     (record-constructor g$8275$7267$c1uhW))
   (g$library-id$7270$c1uhW
     g$library-id$7465$c1uhW
     (record-accessor g$8274$7265$c1uhW '0))
   (g$library-name$7271$c1uhW
     g$library-name$7466$c1uhW
     (record-accessor g$8274$7265$c1uhW '1))
   (g$library-version$7272$c1uhW
     g$library-version$7467$c1uhW
     (record-accessor g$8274$7265$c1uhW '2))
   (g$library-imp*$7273$c1uhW
     g$library-imp*$7468$c1uhW
     (record-accessor g$8274$7265$c1uhW '3))
   (g$library-vis*$7274$c1uhW
     g$library-vis*$7469$c1uhW
     (record-accessor g$8274$7265$c1uhW '4))
   (g$library-inv*$7275$c1uhW
     g$library-inv*$7470$c1uhW
     (record-accessor g$8274$7265$c1uhW '5))
   (g$library-subst$7276$c1uhW
     g$library-subst$7471$c1uhW
     (record-accessor g$8274$7265$c1uhW '6))
   (g$library-env$7277$c1uhW
     g$library-env$7472$c1uhW
     (record-accessor g$8274$7265$c1uhW '7))
   (g$library-visit-state$7278$c1uhW
     g$library-visit-state$7473$c1uhW
     (record-accessor g$8274$7265$c1uhW '8))
   (g$library-invoke-state$7279$c1uhW
     g$library-invoke-state$7474$c1uhW
     (record-accessor g$8274$7265$c1uhW '9))
   (g$library-visit-code$7280$c1uhW
     g$library-visit-code$7475$c1uhW
     (record-accessor g$8274$7265$c1uhW '10))
   (g$library-invoke-code$7281$c1uhW
     g$library-invoke-code$7476$c1uhW
     (record-accessor g$8274$7265$c1uhW '11))
   (g$library-visible?$7282$c1uhW
     g$library-visible?$7477$c1uhW
     (record-accessor g$8274$7265$c1uhW '12))
   (g$library-source-file-name$7283$c1uhW
     g$library-source-file-name$7478$c1uhW
     (record-accessor g$8274$7265$c1uhW '13))
   (g$set-library-id!$7284$c1uhW
     g$set-library-id!$7479$c1uhW
     (record-mutator g$8274$7265$c1uhW '0))
   (g$set-library-name!$7285$c1uhW
     g$set-library-name!$7480$c1uhW
     (record-mutator g$8274$7265$c1uhW '1))
   (g$set-library-version!$7286$c1uhW
     g$set-library-version!$7481$c1uhW
     (record-mutator g$8274$7265$c1uhW '2))
   (g$set-library-imp*!$7287$c1uhW
     g$set-library-imp*!$7482$c1uhW
     (record-mutator g$8274$7265$c1uhW '3))
   (g$set-library-vis*!$7288$c1uhW
     g$set-library-vis*!$7483$c1uhW
     (record-mutator g$8274$7265$c1uhW '4))
   (g$set-library-inv*!$7289$c1uhW
     g$set-library-inv*!$7484$c1uhW
     (record-mutator g$8274$7265$c1uhW '5))
   (g$set-library-subst!$7290$c1uhW
     g$set-library-subst!$7485$c1uhW
     (record-mutator g$8274$7265$c1uhW '6))
   (g$set-library-env!$7291$c1uhW
     g$set-library-env!$7486$c1uhW
     (record-mutator g$8274$7265$c1uhW '7))
   (g$set-library-visit-state!$7292$c1uhW
     g$set-library-visit-state!$7487$c1uhW
     (record-mutator g$8274$7265$c1uhW '8))
   (g$set-library-invoke-state!$7293$c1uhW
     g$set-library-invoke-state!$7488$c1uhW
     (record-mutator g$8274$7265$c1uhW '9))
   (g$set-library-visit-code!$7294$c1uhW
     g$set-library-visit-code!$7489$c1uhW
     (record-mutator g$8274$7265$c1uhW '10))
   (g$set-library-invoke-code!$7295$c1uhW
     g$set-library-invoke-code!$7490$c1uhW
     (record-mutator g$8274$7265$c1uhW '11))
   (g$set-library-visible?!$7296$c1uhW
     g$set-library-visible?!$7491$c1uhW
     (record-mutator g$8274$7265$c1uhW '12))
   (g$set-library-source-file-name!$7297$c1uhW
     g$set-library-source-file-name!$7492$c1uhW
     (record-mutator g$8274$7265$c1uhW '13))
   (g$rp$7298$c1uhW
     g$rp$7493$c1uhW
     (make-record-printer
       'library
       (case-lambda
         ((g$x$7330$c1uhW g$p$7331$c1uhW g$wr$7332$c1uhW)
          (begin
            (if (not (g$library?$7268$c1uhW g$x$7330$c1uhW))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6559$c1uhW
                '"#<library ~s>"
                (if (null? (g$library-version$7272$c1uhW g$x$7330$c1uhW))
                  (g$library-name$7271$c1uhW g$x$7330$c1uhW)
                  (append
                    (g$library-name$7271$c1uhW g$x$7330$c1uhW)
                    (list (g$library-version$7272$c1uhW g$x$7330$c1uhW)))))
              g$p$7331$c1uhW))))))
   (g$find-dependencies$7299$c1uhW
     g$find-dependencies$7494$c1uhW
     (case-lambda
       ((g$ls$7333$c1uhW)
        (if (null? g$ls$7333$c1uhW)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$7300$c1uhW
     g$find-library-by$7495$c1uhW
     (case-lambda
       ((g$pred$7334$c1uhW)
        ((letrec ((g$f$7335$c1uhW
                    (case-lambda
                      ((g$ls$7336$c1uhW)
                       (if (null? g$ls$7336$c1uhW)
                         '#f
                         (if (g$pred$7334$c1uhW (car g$ls$7336$c1uhW))
                           (car g$ls$7336$c1uhW)
                           (g$f$7335$c1uhW (cdr g$ls$7336$c1uhW))))))))
           g$f$7335$c1uhW)
         ((g$current-library-collection$7264$c1uhW))))))
   (g$library-path$7301$c1uhW
     g$library-path$7496$c1uhW
     (g$make-parameter$6976$c1uhW
       '(".")
       (case-lambda
         ((g$x$7337$c1uhW)
          (if (if (list? g$x$7337$c1uhW)
                (begin '#f (g$for-all$5061$c1uhW string? g$x$7337$c1uhW))
                '#f)
            (g$map$5063$c1uhW
              (case-lambda ((g$x$7338$c1uhW) g$x$7338$c1uhW))
              g$x$7337$c1uhW)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$7337$c1uhW))))))
   (g$library-extensions$7302$c1uhW
     g$library-extensions$7497$c1uhW
     (g$make-parameter$6976$c1uhW
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$7339$c1uhW)
          (if (if (list? g$x$7339$c1uhW)
                (begin '#f (g$for-all$5061$c1uhW string? g$x$7339$c1uhW))
                '#f)
            (g$map$5063$c1uhW
              (case-lambda ((g$x$7340$c1uhW) g$x$7340$c1uhW))
              g$x$7339$c1uhW)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$7339$c1uhW))))))
   (g$library-name->file-name$7303$c1uhW
     g$library-name->file-name$7498$c1uhW
     (case-lambda
       ((g$x$7341$c1uhW)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6336$c1uhW)))
          (case-lambda
            ((g$p$7344$c1uhW g$extract$7345$c1uhW)
             ((case-lambda
                ((g$extract$7346$c1uhW g$p$7347$c1uhW)
                 (letrec* ((g$display-hex$7348$c1uhW
                             (case-lambda
                               ((g$n$7356$c1uhW)
                                (if (<= '0 g$n$7356$c1uhW '9)
                                  (display g$n$7356$c1uhW g$p$7347$c1uhW)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$7356$c1uhW '10)))
                                    g$p$7347$c1uhW))))))
                   (begin
                     ((letrec ((g$f$7349$c1uhW
                                 (case-lambda
                                   ((g$ls$7350$c1uhW)
                                    (if (not (null? g$ls$7350$c1uhW))
                                      (begin
                                        (display '"/" g$p$7347$c1uhW)
                                        (g$for-each$5064$c1uhW
                                          (case-lambda
                                            ((g$c$7351$c1uhW)
                                             (if ((case-lambda
                                                    ((g$t$7352$c1uhW)
                                                     (if g$t$7352$c1uhW
                                                       g$t$7352$c1uhW
                                                       ((case-lambda
                                                          ((g$t$7353$c1uhW)
                                                           (if g$t$7353$c1uhW
                                                             g$t$7353$c1uhW
                                                             ((case-lambda
                                                                ((g$t$7354$c1uhW)
                                                                 (if g$t$7354$c1uhW
                                                                   g$t$7354$c1uhW
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5056$c1uhW
                                                                       g$c$7351$c1uhW
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5310$c1uhW
                                                                '#\0
                                                                g$c$7351$c1uhW
                                                                '#\9)))))
                                                        (g$char<=?$5310$c1uhW
                                                          '#\A
                                                          g$c$7351$c1uhW
                                                          '#\Z)))))
                                                  (g$char<=?$5310$c1uhW
                                                    '#\a
                                                    g$c$7351$c1uhW
                                                    '#\z))
                                               (display
                                                 g$c$7351$c1uhW
                                                 g$p$7347$c1uhW)
                                               (begin
                                                 (display '"%" g$p$7347$c1uhW)
                                                 ((case-lambda
                                                    ((g$n$7355$c1uhW)
                                                     (begin
                                                       (g$display-hex$7348$c1uhW
                                                         (g$quotient$5919$c1uhW
                                                           g$n$7355$c1uhW
                                                           '16))
                                                       (g$display-hex$7348$c1uhW
                                                         (g$remainder$5920$c1uhW
                                                           g$n$7355$c1uhW
                                                           '16)))))
                                                  (char->integer
                                                    g$c$7351$c1uhW))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$7350$c1uhW))))
                                        (g$f$7349$c1uhW (cdr g$ls$7350$c1uhW)))
                                      (void))))))
                        g$f$7349$c1uhW)
                      g$x$7341$c1uhW)
                     (g$extract$7346$c1uhW)))))
              g$extract$7345$c1uhW
              g$p$7344$c1uhW)))))))
   (g$file-locator$7304$c1uhW
     g$file-locator$7499$c1uhW
     (g$make-parameter$6976$c1uhW
       (case-lambda
         ((g$x$7357$c1uhW)
          ((case-lambda
             ((g$str$7358$c1uhW)
              ((letrec ((g$f$7359$c1uhW
                          (case-lambda
                            ((g$ls$7360$c1uhW
                               g$exts$7361$c1uhW
                               g$failed-list$7362$c1uhW)
                             (if (null? g$ls$7360$c1uhW)
                               (g$file-locator-resolution-error$6974$c1uhW
                                 g$x$7357$c1uhW
                                 (reverse g$failed-list$7362$c1uhW))
                               (if (null? g$exts$7361$c1uhW)
                                 (g$f$7359$c1uhW
                                   (cdr g$ls$7360$c1uhW)
                                   (g$library-extensions$7302$c1uhW)
                                   g$failed-list$7362$c1uhW)
                                 ((case-lambda
                                    ((g$name$7363$c1uhW)
                                     (if (g$file-exists?$5556$c1uhW
                                           g$name$7363$c1uhW)
                                       g$name$7363$c1uhW
                                       (g$f$7359$c1uhW
                                         g$ls$7360$c1uhW
                                         (cdr g$exts$7361$c1uhW)
                                         (cons
                                           g$name$7363$c1uhW
                                           g$failed-list$7362$c1uhW)))))
                                  (string-append
                                    (car g$ls$7360$c1uhW)
                                    g$str$7358$c1uhW
                                    (car g$exts$7361$c1uhW)))))))))
                 g$f$7359$c1uhW)
               (g$library-path$7301$c1uhW)
               (g$library-extensions$7302$c1uhW)
               '())))
           (g$library-name->file-name$7303$c1uhW g$x$7357$c1uhW))))
       (case-lambda
         ((g$f$7364$c1uhW)
          (if (procedure? g$f$7364$c1uhW)
            g$f$7364$c1uhW
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$7364$c1uhW))))))
   (g$serialize-all$7305$c1uhW
     g$serialize-all$7500$c1uhW
     (case-lambda
       ((g$serialize$7365$c1uhW g$compile$7366$c1uhW)
        (letrec* ((g$library-desc$7367$c1uhW
                    (case-lambda
                      ((g$x$7369$c1uhW)
                       (list
                         (g$library-id$7270$c1uhW g$x$7369$c1uhW)
                         (g$library-name$7271$c1uhW g$x$7369$c1uhW))))))
          (g$for-each$5064$c1uhW
            (case-lambda
              ((g$x$7368$c1uhW)
               (if (g$library-source-file-name$7283$c1uhW g$x$7368$c1uhW)
                 (g$serialize$7365$c1uhW
                   (g$library-source-file-name$7283$c1uhW g$x$7368$c1uhW)
                   (list
                     (g$library-id$7270$c1uhW g$x$7368$c1uhW)
                     (g$library-name$7271$c1uhW g$x$7368$c1uhW)
                     (g$library-version$7272$c1uhW g$x$7368$c1uhW)
                     (g$map$5063$c1uhW
                       g$library-desc$7367$c1uhW
                       (g$library-imp*$7273$c1uhW g$x$7368$c1uhW))
                     (g$map$5063$c1uhW
                       g$library-desc$7367$c1uhW
                       (g$library-vis*$7274$c1uhW g$x$7368$c1uhW))
                     (g$map$5063$c1uhW
                       g$library-desc$7367$c1uhW
                       (g$library-inv*$7275$c1uhW g$x$7368$c1uhW))
                     (g$library-subst$7276$c1uhW g$x$7368$c1uhW)
                     (g$library-env$7277$c1uhW g$x$7368$c1uhW)
                     (g$compile$7366$c1uhW
                       (g$library-visit-code$7280$c1uhW g$x$7368$c1uhW))
                     (g$compile$7366$c1uhW
                       (g$library-invoke-code$7281$c1uhW g$x$7368$c1uhW))
                     (g$library-visible?$7282$c1uhW g$x$7368$c1uhW)))
                 (void))))
            ((g$current-library-collection$7264$c1uhW)))))))
   (g$current-precompiled-library-loader$7306$c1uhW
     g$current-precompiled-library-loader$7501$c1uhW
     (g$make-parameter$6976$c1uhW
       (case-lambda ((g$filename$7370$c1uhW g$sk$7371$c1uhW) '#f))))
   (g$try-load-from-file$7307$c1uhW
     g$try-load-from-file$7502$c1uhW
     (case-lambda
       ((g$filename$7372$c1uhW)
        ((g$current-precompiled-library-loader$7306$c1uhW)
         g$filename$7372$c1uhW
         (case-lambda
           ((g$id$7373$c1uhW
              g$name$7374$c1uhW
              g$ver$7375$c1uhW
              g$imp*$7376$c1uhW
              g$vis*$7377$c1uhW
              g$inv*$7378$c1uhW
              g$exp-subst$7379$c1uhW
              g$exp-env$7380$c1uhW
              g$visit-proc$7381$c1uhW
              g$invoke-proc$7382$c1uhW
              g$visible?$7383$c1uhW)
            ((letrec ((g$f$7384$c1uhW
                        (case-lambda
                          ((g$deps$7385$c1uhW)
                           (if (null? g$deps$7385$c1uhW)
                             (begin
                               (g$install-library$7317$c1uhW
                                 g$id$7373$c1uhW
                                 g$name$7374$c1uhW
                                 g$ver$7375$c1uhW
                                 g$imp*$7376$c1uhW
                                 g$vis*$7377$c1uhW
                                 g$inv*$7378$c1uhW
                                 g$exp-subst$7379$c1uhW
                                 g$exp-env$7380$c1uhW
                                 g$visit-proc$7381$c1uhW
                                 g$invoke-proc$7382$c1uhW
                                 '#f
                                 '#f
                                 g$visible?$7383$c1uhW
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$7386$c1uhW)
                                 ((case-lambda
                                    ((g$label$7387$c1uhW g$dname$7388$c1uhW)
                                     ((case-lambda
                                        ((g$l$7389$c1uhW)
                                         (if (if (g$library?$7268$c1uhW
                                                   g$l$7389$c1uhW)
                                               (begin
                                                 '#f
                                                 (eq? g$label$7387$c1uhW
                                                      (g$library-id$7270$c1uhW
                                                        g$l$7389$c1uhW)))
                                               '#f)
                                           (g$f$7384$c1uhW
                                             (cdr g$deps$7385$c1uhW))
                                           (begin
                                             (g$library-version-mismatch-warning$6973$c1uhW
                                               g$name$7374$c1uhW
                                               g$dname$7388$c1uhW
                                               g$filename$7372$c1uhW)
                                             '#f))))
                                      (g$find-library-by-name$7312$c1uhW
                                        g$dname$7388$c1uhW))))
                                  (car g$d$7386$c1uhW)
                                  (g$cadr$5264$c1uhW g$d$7386$c1uhW))))
                              (car g$deps$7385$c1uhW)))))))
               g$f$7384$c1uhW)
             (append g$imp*$7376$c1uhW g$vis*$7377$c1uhW g$inv*$7378$c1uhW)))
           (g$others$7390$c1uhW '#f))))))
   (g$library-loader$7308$c1uhW
     g$library-loader$7503$c1uhW
     (g$make-parameter$6976$c1uhW
       (case-lambda
         ((g$x$7391$c1uhW)
          ((case-lambda
             ((g$file-name$7392$c1uhW)
              (if (not g$file-name$7392$c1uhW)
                (assertion-violation '#f '"cannot file library" g$x$7391$c1uhW)
                ((case-lambda
                   ((g$t$7393$c1uhW)
                    (if g$t$7393$c1uhW
                      g$t$7393$c1uhW
                      (begin
                        '#f
                        ((g$current-library-expander$7309$c1uhW)
                         (g$read-library-source-file$6975$c1uhW
                           g$file-name$7392$c1uhW)
                         g$file-name$7392$c1uhW
                         (case-lambda
                           ((g$name$7394$c1uhW)
                            (if (not (equal? g$name$7394$c1uhW g$x$7391$c1uhW))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6336$c1uhW)))
                                  (case-lambda
                                    ((g$p$7397$c1uhW g$e$7398$c1uhW)
                                     ((case-lambda
                                        ((g$e$7399$c1uhW g$p$7400$c1uhW)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$7400$c1uhW)
                                           (write g$x$7391$c1uhW g$p$7400$c1uhW)
                                           (display '" in file " g$p$7400$c1uhW)
                                           (display
                                             g$file-name$7392$c1uhW
                                             g$p$7400$c1uhW)
                                           (display '", found " g$p$7400$c1uhW)
                                           (write
                                             g$name$7394$c1uhW
                                             g$p$7400$c1uhW)
                                           (display '" instead" g$p$7400$c1uhW)
                                           (g$e$7399$c1uhW))))
                                      g$e$7398$c1uhW
                                      g$p$7397$c1uhW)))))
                              (void)))))))))
                 (g$try-load-from-file$7307$c1uhW g$file-name$7392$c1uhW)))))
           ((g$file-locator$7304$c1uhW) g$x$7391$c1uhW))))
       (case-lambda
         ((g$f$7401$c1uhW)
          (if (procedure? g$f$7401$c1uhW)
            g$f$7401$c1uhW
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$7401$c1uhW))))))
   (g$current-library-expander$7309$c1uhW
     g$current-library-expander$7504$c1uhW
     (g$make-parameter$6976$c1uhW
       (case-lambda
         ((g$x$7402$c1uhW)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$7403$c1uhW)
          (if (procedure? g$f$7403$c1uhW)
            g$f$7403$c1uhW
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$7403$c1uhW))))))
   (g$external-pending-libraries$7310$c1uhW
     g$external-pending-libraries$7505$c1uhW
     (g$make-parameter$6976$c1uhW '()))
   (g$find-external-library$7311$c1uhW
     g$find-external-library$7506$c1uhW
     (case-lambda
       ((g$name$7404$c1uhW)
        (begin
          (if (g$member$5057$c1uhW
                g$name$7404$c1uhW
                (g$external-pending-libraries$7310$c1uhW))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$7404$c1uhW)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$7407$c1uhW
                g$external-pending-libraries$7408$c1uhW)
              ((case-lambda
                 ((g$swap$7409$c1uhW)
                  (dynamic-wind
                    g$swap$7409$c1uhW
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$7308$c1uhW) g$name$7404$c1uhW)
                         ((case-lambda
                            ((g$t$7410$c1uhW)
                             (if g$t$7410$c1uhW
                               g$t$7410$c1uhW
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$7404$c1uhW)))))
                          (g$find-library-by$7300$c1uhW
                            (case-lambda
                              ((g$x$7411$c1uhW)
                               (equal?
                                 (g$library-name$7271$c1uhW g$x$7411$c1uhW)
                                 g$name$7404$c1uhW))))))))
                    g$swap$7409$c1uhW)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$7412$c1uhW)
                      (begin
                        (g$external-pending-libraries$7407$c1uhW
                          g$external-pending-libraries$7408$c1uhW)
                        (set! g$external-pending-libraries$7408$c1uhW
                          g$t$7412$c1uhW))))
                   (g$external-pending-libraries$7407$c1uhW)))))))
           g$external-pending-libraries$7310$c1uhW
           (cons
             g$name$7404$c1uhW
             (g$external-pending-libraries$7310$c1uhW)))))))
   (g$find-library-by-name$7312$c1uhW
     g$find-library-by-name$7507$c1uhW
     (case-lambda
       ((g$name$7413$c1uhW)
        ((case-lambda
           ((g$t$7414$c1uhW)
            (if g$t$7414$c1uhW
              g$t$7414$c1uhW
              (begin
                '#f
                (g$find-external-library$7311$c1uhW g$name$7413$c1uhW)))))
         (g$find-library-by$7300$c1uhW
           (case-lambda
             ((g$x$7415$c1uhW)
              (equal?
                (g$library-name$7271$c1uhW g$x$7415$c1uhW)
                g$name$7413$c1uhW))))))))
   (g$library-exists?$7313$c1uhW
     g$library-exists?$7508$c1uhW
     (case-lambda
       ((g$name$7416$c1uhW)
        (if (g$find-library-by$7300$c1uhW
              (case-lambda
                ((g$x$7417$c1uhW)
                 (equal?
                   (g$library-name$7271$c1uhW g$x$7417$c1uhW)
                   g$name$7416$c1uhW))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$7314$c1uhW
     g$find-library-by-spec/die$7509$c1uhW
     (case-lambda
       ((g$spec$7418$c1uhW)
        ((case-lambda
           ((g$id$7419$c1uhW)
            ((case-lambda
               ((g$t$7420$c1uhW)
                (if g$t$7420$c1uhW
                  g$t$7420$c1uhW
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7418$c1uhW)))))
             (g$find-library-by$7300$c1uhW
               (case-lambda
                 ((g$x$7421$c1uhW)
                  (eq? g$id$7419$c1uhW
                       (g$library-id$7270$c1uhW g$x$7421$c1uhW))))))))
         (car g$spec$7418$c1uhW)))))
   (g$label->binding-table$7315$c1uhW
     g$label->binding-table$7510$c1uhW
     (g$make-eq-hashtable$5538$c1uhW))
   (g$install-library-record$7316$c1uhW
     g$install-library-record$7511$c1uhW
     (case-lambda
       ((g$lib$7422$c1uhW)
        (begin
          ((case-lambda
             ((g$exp-env$7423$c1uhW)
              (g$for-each$5064$c1uhW
                (case-lambda
                  ((g$x$7424$c1uhW)
                   ((case-lambda
                      ((g$label$7425$c1uhW g$binding$7426$c1uhW)
                       ((case-lambda
                          ((g$binding$7427$c1uhW)
                           (g$hashtable-set!$5542$c1uhW
                             g$label->binding-table$7315$c1uhW
                             g$label$7425$c1uhW
                             g$binding$7427$c1uhW)))
                        ((case-lambda
                           ((g$t$7428$c1uhW)
                            (if (g$memv$5056$c1uhW g$t$7428$c1uhW '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$7422$c1uhW
                                  (cdr g$binding$7426$c1uhW)))
                              (if (g$memv$5056$c1uhW
                                    g$t$7428$c1uhW
                                    '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$7422$c1uhW
                                    (cdr g$binding$7426$c1uhW)))
                                (if (g$memv$5056$c1uhW
                                      g$t$7428$c1uhW
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$7422$c1uhW
                                      (cdr g$binding$7426$c1uhW)))
                                  g$binding$7426$c1uhW)))))
                         (car g$binding$7426$c1uhW)))))
                    (car g$x$7424$c1uhW)
                    (cdr g$x$7424$c1uhW))))
                g$exp-env$7423$c1uhW)))
           (g$library-env$7277$c1uhW g$lib$7422$c1uhW))
          ((g$current-library-collection$7264$c1uhW) g$lib$7422$c1uhW)))))
   (g$install-library$7317$c1uhW
     g$install-library$7512$c1uhW
     (case-lambda
       ((g$id$7429$c1uhW
          g$name$7430$c1uhW
          g$ver$7431$c1uhW
          g$imp*$7432$c1uhW
          g$vis*$7433$c1uhW
          g$inv*$7434$c1uhW
          g$exp-subst$7435$c1uhW
          g$exp-env$7436$c1uhW
          g$visit-proc$7437$c1uhW
          g$invoke-proc$7438$c1uhW
          g$visit-code$7439$c1uhW
          g$invoke-code$7440$c1uhW
          g$visible?$7441$c1uhW
          g$source-file-name$7442$c1uhW)
        ((case-lambda
           ((g$imp-lib*$7443$c1uhW g$vis-lib*$7444$c1uhW g$inv-lib*$7445$c1uhW)
            (begin
              (if (not (if (symbol? g$id$7429$c1uhW)
                         (if (list? g$name$7430$c1uhW)
                           (begin '#f (list? g$ver$7431$c1uhW))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$7429$c1uhW
                  g$name$7430$c1uhW
                  g$ver$7431$c1uhW)
                (void))
              (if (g$library-exists?$7313$c1uhW g$name$7430$c1uhW)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$7430$c1uhW)
                (void))
              ((case-lambda
                 ((g$lib$7446$c1uhW)
                  (g$install-library-record$7316$c1uhW g$lib$7446$c1uhW)))
               (g$make-library$7269$c1uhW
                 g$id$7429$c1uhW
                 g$name$7430$c1uhW
                 g$ver$7431$c1uhW
                 g$imp-lib*$7443$c1uhW
                 g$vis-lib*$7444$c1uhW
                 g$inv-lib*$7445$c1uhW
                 g$exp-subst$7435$c1uhW
                 g$exp-env$7436$c1uhW
                 g$visit-proc$7437$c1uhW
                 g$invoke-proc$7438$c1uhW
                 g$visit-code$7439$c1uhW
                 g$invoke-code$7440$c1uhW
                 g$visible?$7441$c1uhW
                 g$source-file-name$7442$c1uhW)))))
         (g$map$5063$c1uhW
           g$find-library-by-spec/die$7314$c1uhW
           g$imp*$7432$c1uhW)
         (g$map$5063$c1uhW
           g$find-library-by-spec/die$7314$c1uhW
           g$vis*$7433$c1uhW)
         (g$map$5063$c1uhW
           g$find-library-by-spec/die$7314$c1uhW
           g$inv*$7434$c1uhW)))))
   (g$imported-label->binding$7318$c1uhW
     g$imported-label->binding$7513$c1uhW
     (case-lambda
       ((g$lab$7447$c1uhW)
        (g$hashtable-ref$5541$c1uhW
          g$label->binding-table$7315$c1uhW
          g$lab$7447$c1uhW
          '#f))))
   (g$invoke-library$7319$c1uhW
     g$invoke-library$7514$c1uhW
     (case-lambda
       ((g$lib$7448$c1uhW)
        ((case-lambda
           ((g$invoke$7449$c1uhW)
            (if (procedure? g$invoke$7449$c1uhW)
              (begin
                (g$set-library-invoke-state!$7293$c1uhW
                  g$lib$7448$c1uhW
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7448$c1uhW))))
                (g$for-each$5064$c1uhW
                  g$invoke-library$7319$c1uhW
                  (g$library-inv*$7275$c1uhW g$lib$7448$c1uhW))
                (g$set-library-invoke-state!$7293$c1uhW
                  g$lib$7448$c1uhW
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7448$c1uhW))))
                (g$invoke$7449$c1uhW)
                (g$set-library-invoke-state!$7293$c1uhW g$lib$7448$c1uhW '#t))
              (void))))
         (g$library-invoke-state$7279$c1uhW g$lib$7448$c1uhW)))))
   (g$visit-library$7320$c1uhW
     g$visit-library$7515$c1uhW
     (case-lambda
       ((g$lib$7450$c1uhW)
        ((case-lambda
           ((g$visit$7451$c1uhW)
            (if (procedure? g$visit$7451$c1uhW)
              (begin
                (g$set-library-visit-state!$7292$c1uhW
                  g$lib$7450$c1uhW
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7450$c1uhW))))
                (g$for-each$5064$c1uhW
                  g$invoke-library$7319$c1uhW
                  (g$library-vis*$7274$c1uhW g$lib$7450$c1uhW))
                (g$set-library-visit-state!$7292$c1uhW
                  g$lib$7450$c1uhW
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7450$c1uhW))))
                (g$visit$7451$c1uhW)
                (g$set-library-visit-state!$7292$c1uhW g$lib$7450$c1uhW '#t))
              (void))))
         (g$library-visit-state$7278$c1uhW g$lib$7450$c1uhW)))))
   (g$invoke-library-by-spec$7321$c1uhW
     g$invoke-library-by-spec$7516$c1uhW
     (case-lambda
       ((g$spec$7452$c1uhW)
        (g$invoke-library$7319$c1uhW
          (g$find-library-by-spec/die$7314$c1uhW g$spec$7452$c1uhW)))))
   (g$installed-libraries$7322$c1uhW
     g$installed-libraries$7517$c1uhW
     (case-lambda
       ((g$all?$7453$c1uhW)
        ((letrec ((g$f$7454$c1uhW
                    (case-lambda
                      ((g$ls$7455$c1uhW)
                       (if (null? g$ls$7455$c1uhW)
                         '()
                         (if ((case-lambda
                                ((g$t$7456$c1uhW)
                                 (if g$t$7456$c1uhW
                                   g$t$7456$c1uhW
                                   (begin
                                     '#f
                                     (g$library-visible?$7282$c1uhW
                                       (car g$ls$7455$c1uhW))))))
                              g$all?$7453$c1uhW)
                           (cons
                             (car g$ls$7455$c1uhW)
                             (g$f$7454$c1uhW (cdr g$ls$7455$c1uhW)))
                           (g$f$7454$c1uhW (cdr g$ls$7455$c1uhW))))))))
           g$f$7454$c1uhW)
         ((g$current-library-collection$7264$c1uhW))))
       (() (g$installed-libraries$7322$c1uhW '#f))))
   (g$library-spec$7323$c1uhW
     g$library-spec$7518$c1uhW
     (case-lambda
       ((g$x$7457$c1uhW)
        (begin
          (if (not (g$library?$7268$c1uhW g$x$7457$c1uhW))
            (assertion-violation 'library-spec '"not a library" g$x$7457$c1uhW)
            (void))
          (list
            (g$library-id$7270$c1uhW g$x$7457$c1uhW)
            (g$library-name$7271$c1uhW g$x$7457$c1uhW)
            (g$library-version$7272$c1uhW g$x$7457$c1uhW)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7519$c1uhW
     g$build-global-define$7629$c1uhW
     (case-lambda ((g$x$7600$c1uhW) (g$build-void$7596$c1uhW))))
   (g$build-lambda$7568$c1uhW
     g$build-lambda$7630$c1uhW
     (case-lambda
       ((g$ae$7601$c1uhW g$vars$7602$c1uhW g$exp$7603$c1uhW)
        (list 'case-lambda (list g$vars$7602$c1uhW g$exp$7603$c1uhW)))))
   (g$build-case-lambda$7569$c1uhW
     g$build-case-lambda$7631$c1uhW
     (case-lambda
       ((g$ae$7604$c1uhW g$vars*$7605$c1uhW g$exp*$7606$c1uhW)
        (cons
          'case-lambda
          (g$map$5063$c1uhW list g$vars*$7605$c1uhW g$exp*$7606$c1uhW)))))
   (g$build-let$7570$c1uhW
     g$build-let$7632$c1uhW
     (case-lambda
       ((g$ae$7607$c1uhW g$lhs*$7608$c1uhW g$rhs*$7609$c1uhW g$body$7610$c1uhW)
        (cons
          (g$build-lambda$7568$c1uhW
            g$ae$7607$c1uhW
            g$lhs*$7608$c1uhW
            g$body$7610$c1uhW)
          g$rhs*$7609$c1uhW))))
   (g$build-sequence$7595$c1uhW
     g$build-sequence$7633$c1uhW
     (case-lambda
       ((g$ae$7611$c1uhW g$exps$7612$c1uhW)
        ((letrec ((g$loop$7613$c1uhW
                    (case-lambda
                      ((g$exps$7614$c1uhW)
                       (if (null? (cdr g$exps$7614$c1uhW))
                         (car g$exps$7614$c1uhW)
                         (if (equal?
                               (car g$exps$7614$c1uhW)
                               (g$build-void$7596$c1uhW))
                           (g$loop$7613$c1uhW (cdr g$exps$7614$c1uhW))
                           (cons 'begin g$exps$7614$c1uhW)))))))
           g$loop$7613$c1uhW)
         g$exps$7612$c1uhW))))
   (g$build-void$7596$c1uhW
     g$build-void$7634$c1uhW
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7597$c1uhW
     g$build-letrec$7635$c1uhW
     (case-lambda
       ((g$ae$7615$c1uhW
          g$vars$7616$c1uhW
          g$val-exps$7617$c1uhW
          g$body-exp$7618$c1uhW)
        (if (null? g$vars$7616$c1uhW)
          g$body-exp$7618$c1uhW
          (list
            'letrec
            (g$map$5063$c1uhW list g$vars$7616$c1uhW g$val-exps$7617$c1uhW)
            g$body-exp$7618$c1uhW)))))
   (g$build-letrec*$7598$c1uhW
     g$build-letrec*$7636$c1uhW
     (case-lambda
       ((g$ae$7619$c1uhW
          g$vars$7620$c1uhW
          g$val-exps$7621$c1uhW
          g$body-exp$7622$c1uhW)
        (if (null? g$vars$7620$c1uhW)
          g$body-exp$7622$c1uhW
          (list
            'letrec*
            (g$map$5063$c1uhW list g$vars$7620$c1uhW g$val-exps$7621$c1uhW)
            g$body-exp$7622$c1uhW)))))
   (g$build-library-letrec*$7599$c1uhW
     g$build-library-letrec*$7637$c1uhW
     (case-lambda
       ((g$ae$7623$c1uhW
          g$name$7624$c1uhW
          g$vars$7625$c1uhW
          g$locs$7626$c1uhW
          g$val-exps$7627$c1uhW
          g$body-exp$7628$c1uhW)
        (list
          'library-letrec*
          g$name$7624$c1uhW
          (g$map$5063$c1uhW
            list
            g$vars$7625$c1uhW
            g$locs$7626$c1uhW
            g$val-exps$7627$c1uhW)
          g$body-exp$7628$c1uhW)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7638$c1uhW
     g$set-cons$11334$c1uhW
     (case-lambda
       ((g$x$8103$c1uhW g$ls$8104$c1uhW)
        (if (g$memq$5055$c1uhW g$x$8103$c1uhW g$ls$8104$c1uhW)
          g$ls$8104$c1uhW
          (cons g$x$8103$c1uhW g$ls$8104$c1uhW)))))
   (g$set-union$7639$c1uhW
     g$set-union$11335$c1uhW
     (case-lambda
       ((g$ls1$8105$c1uhW g$ls2$8106$c1uhW)
        (if (null? g$ls1$8105$c1uhW)
          g$ls2$8106$c1uhW
          (if (g$memq$5055$c1uhW (car g$ls1$8105$c1uhW) g$ls2$8106$c1uhW)
            (g$set-union$7639$c1uhW (cdr g$ls1$8105$c1uhW) g$ls2$8106$c1uhW)
            (cons
              (car g$ls1$8105$c1uhW)
              (g$set-union$7639$c1uhW
                (cdr g$ls1$8105$c1uhW)
                g$ls2$8106$c1uhW)))))))
   (g$top-mark*$7641$c1uhW g$top-mark*$11336$c1uhW '(top))
   (g$top-marked?$7642$c1uhW
     g$top-marked?$11337$c1uhW
     (case-lambda
       ((g$m*$8107$c1uhW) (g$memq$5055$c1uhW 'top g$m*$8107$c1uhW))))
   (g$gen-lexical$7643$c1uhW
     g$gen-lexical$11338$c1uhW
     (case-lambda
       ((g$sym$8108$c1uhW)
        (if (symbol? g$sym$8108$c1uhW)
          (gensym g$sym$8108$c1uhW)
          (if (g$stx?$7676$c1uhW g$sym$8108$c1uhW)
            (g$gen-lexical$7643$c1uhW (g$id->sym$7705$c1uhW g$sym$8108$c1uhW))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$8108$c1uhW))))))
   (g$gen-global$7644$c1uhW
     g$gen-global$11339$c1uhW
     (case-lambda
       ((g$x$8109$c1uhW) (g$gen-lexical$7643$c1uhW g$x$8109$c1uhW))))
   (g$gen-label$7645$c1uhW
     g$gen-label$11340$c1uhW
     (case-lambda ((g$_$8110$c1uhW) (gensym))))
   (g$gen-top-level-label$7646$c1uhW
     g$gen-top-level-label$11341$c1uhW
     (case-lambda
       ((g$id$8111$c1uhW g$rib$8112$c1uhW)
        (letrec* ((g$find$8113$c1uhW
                    (case-lambda
                      ((g$sym$8119$c1uhW
                         g$mark*$8120$c1uhW
                         g$sym*$8121$c1uhW
                         g$mark**$8122$c1uhW
                         g$label*$8123$c1uhW)
                       (if (pair? g$sym*$8121$c1uhW)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8119$c1uhW
                                        (car g$sym*$8121$c1uhW))
                                 (begin
                                   '#f
                                   (g$same-marks?$7706$c1uhW
                                     g$mark*$8120$c1uhW
                                     (car g$mark**$8122$c1uhW)))
                                 '#f)
                             (car g$label*$8123$c1uhW)
                             (g$find$8113$c1uhW
                               g$sym$8119$c1uhW
                               g$mark*$8120$c1uhW
                               (cdr g$sym*$8121$c1uhW)
                               (cdr g$mark**$8122$c1uhW)
                               (cdr g$label*$8123$c1uhW))))
                         '#f)))))
          ((case-lambda
             ((g$sym$8114$c1uhW g$mark*$8115$c1uhW)
              ((case-lambda
                 ((g$sym*$8116$c1uhW)
                  ((case-lambda
                     ((g$t$8117$c1uhW)
                      (if g$t$8117$c1uhW
                        ((case-lambda
                           ((g$label$8118$c1uhW)
                            (if (g$imported-label->binding$7513$c1uhW
                                  g$label$8118$c1uhW)
                              (gensym)
                              g$label$8118$c1uhW)))
                         g$t$8117$c1uhW)
                        (gensym))))
                   (if (g$memq$5055$c1uhW
                         g$sym$8114$c1uhW
                         (g$rib-sym*$7654$c1uhW g$rib$8112$c1uhW))
                     (begin
                       '#f
                       (g$find$8113$c1uhW
                         g$sym$8114$c1uhW
                         g$mark*$8115$c1uhW
                         g$sym*$8116$c1uhW
                         (g$rib-mark**$7655$c1uhW g$rib$8112$c1uhW)
                         (g$rib-label*$7656$c1uhW g$rib$8112$c1uhW)))
                     '#f))))
               (g$rib-sym*$7654$c1uhW g$rib$8112$c1uhW))))
           (g$id->sym$7705$c1uhW g$id$8111$c1uhW)
           (g$stx-mark*$7679$c1uhW g$id$8111$c1uhW))))))
   (g$gen-define-label+loc$7647$c1uhW
     g$gen-define-label+loc$11342$c1uhW
     (case-lambda
       ((g$id$8124$c1uhW g$rib$8125$c1uhW g$sd?$8126$c1uhW)
        (if g$sd?$8126$c1uhW
          (values (gensym) (g$gen-lexical$7643$c1uhW g$id$8124$c1uhW))
          ((case-lambda
             ((g$env$8127$c1uhW)
              ((case-lambda
                 ((g$label$8128$c1uhW g$locs$8129$c1uhW)
                  (values
                    g$label$8128$c1uhW
                    ((case-lambda
                       ((g$t$8130$c1uhW)
                        (if g$t$8130$c1uhW
                          (cdr g$t$8130$c1uhW)
                          ((case-lambda
                             ((g$loc$8131$c1uhW)
                              (begin
                                (g$set-interaction-env-locs!$8065$c1uhW
                                  g$env$8127$c1uhW
                                  (cons
                                    (cons g$label$8128$c1uhW g$loc$8131$c1uhW)
                                    g$locs$8129$c1uhW))
                                g$loc$8131$c1uhW)))
                           (g$gen-lexical$7643$c1uhW g$id$8124$c1uhW)))))
                     (g$assq$5051$c1uhW
                       g$label$8128$c1uhW
                       g$locs$8129$c1uhW)))))
               (g$gen-top-level-label$7646$c1uhW
                 g$id$8124$c1uhW
                 g$rib$8125$c1uhW)
               (g$interaction-env-locs$8062$c1uhW g$env$8127$c1uhW))))
           (g$top-level-context$8102$c1uhW))))))
   (g$gen-define-label$7648$c1uhW
     g$gen-define-label$11343$c1uhW
     (case-lambda
       ((g$id$8132$c1uhW g$rib$8133$c1uhW g$sd?$8134$c1uhW)
        (if g$sd?$8134$c1uhW
          (gensym)
          (g$gen-top-level-label$7646$c1uhW
            g$id$8132$c1uhW
            g$rib$8133$c1uhW)))))
   (g$8658$7649$c1uhW
     g$8658$11344$c1uhW
     (make-record-type-descriptor
       'rib
       '#f
       'g$8661$c1uhW
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$8660$7650$c1uhW g$8660$11345$c1uhW '#f)
   (g$8659$7651$c1uhW
     g$8659$11346$c1uhW
     (make-record-constructor-descriptor
       g$8658$7649$c1uhW
       '#f
       g$8660$7650$c1uhW))
   (g$rib?$7652$c1uhW
     g$rib?$11347$c1uhW
     (record-predicate g$8658$7649$c1uhW))
   (g$make-rib$7653$c1uhW
     g$make-rib$11348$c1uhW
     (record-constructor g$8659$7651$c1uhW))
   (g$rib-sym*$7654$c1uhW
     g$rib-sym*$11349$c1uhW
     (record-accessor g$8658$7649$c1uhW '0))
   (g$rib-mark**$7655$c1uhW
     g$rib-mark**$11350$c1uhW
     (record-accessor g$8658$7649$c1uhW '1))
   (g$rib-label*$7656$c1uhW
     g$rib-label*$11351$c1uhW
     (record-accessor g$8658$7649$c1uhW '2))
   (g$rib-sealed/freq$7657$c1uhW
     g$rib-sealed/freq$11352$c1uhW
     (record-accessor g$8658$7649$c1uhW '3))
   (g$rib-cache$7658$c1uhW
     g$rib-cache$11353$c1uhW
     (record-accessor g$8658$7649$c1uhW '4))
   (g$set-rib-sym*!$7659$c1uhW
     g$set-rib-sym*!$11354$c1uhW
     (record-mutator g$8658$7649$c1uhW '0))
   (g$set-rib-mark**!$7660$c1uhW
     g$set-rib-mark**!$11355$c1uhW
     (record-mutator g$8658$7649$c1uhW '1))
   (g$set-rib-label*!$7661$c1uhW
     g$set-rib-label*!$11356$c1uhW
     (record-mutator g$8658$7649$c1uhW '2))
   (g$set-rib-sealed/freq!$7662$c1uhW
     g$set-rib-sealed/freq!$11357$c1uhW
     (record-mutator g$8658$7649$c1uhW '3))
   (g$set-rib-cache!$7663$c1uhW
     g$set-rib-cache!$11358$c1uhW
     (record-mutator g$8658$7649$c1uhW '4))
   (g$make-empty-rib$7664$c1uhW
     g$make-empty-rib$11359$c1uhW
     (case-lambda (() (g$make-rib$7653$c1uhW '() '() '() '#f '#f))))
   (g$make-cache-rib$7665$c1uhW
     g$make-cache-rib$11360$c1uhW
     (case-lambda
       (()
        (g$make-rib$7653$c1uhW
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$5538$c1uhW)))))
   (g$find-label$7666$c1uhW
     g$find-label$11361$c1uhW
     (case-lambda
       ((g$rib$8135$c1uhW g$sym$8136$c1uhW g$mark*$8137$c1uhW)
        ((case-lambda
           ((g$ht$8138$c1uhW)
            (if g$ht$8138$c1uhW
              (begin
                '#f
                ((case-lambda
                   ((g$cv$8139$c1uhW)
                    ((case-lambda
                       ((g$t$8140$c1uhW)
                        (if g$t$8140$c1uhW (cdr g$t$8140$c1uhW) '#f)))
                     (if g$cv$8139$c1uhW
                       (begin
                         '#f
                         (g$assp$5054$c1uhW
                           (case-lambda
                             ((g$m$8141$c1uhW)
                              (g$same-marks?$7706$c1uhW
                                g$mark*$8137$c1uhW
                                g$m$8141$c1uhW)))
                           g$cv$8139$c1uhW))
                       '#f))))
                 (g$hashtable-ref$5541$c1uhW
                   g$ht$8138$c1uhW
                   g$sym$8136$c1uhW
                   '#f)))
              '#f)))
         (g$rib-cache$7658$c1uhW g$rib$8135$c1uhW)))))
   (g$extend-rib!$7667$c1uhW
     g$extend-rib!$11362$c1uhW
     (case-lambda
       ((g$rib$8142$c1uhW g$id$8143$c1uhW g$label$8144$c1uhW g$sd?$8145$c1uhW)
        (letrec* ((g$find$8146$c1uhW
                    (case-lambda
                      ((g$sym$8155$c1uhW
                         g$mark*$8156$c1uhW
                         g$sym*$8157$c1uhW
                         g$mark**$8158$c1uhW
                         g$label*$8159$c1uhW)
                       (if (pair? g$sym*$8157$c1uhW)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8155$c1uhW
                                        (car g$sym*$8157$c1uhW))
                                 (begin
                                   '#f
                                   (g$same-marks?$7706$c1uhW
                                     g$mark*$8156$c1uhW
                                     (car g$mark**$8158$c1uhW)))
                                 '#f)
                             g$label*$8159$c1uhW
                             (g$find$8146$c1uhW
                               g$sym$8155$c1uhW
                               g$mark*$8156$c1uhW
                               (cdr g$sym*$8157$c1uhW)
                               (cdr g$mark**$8158$c1uhW)
                               (cdr g$label*$8159$c1uhW))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7657$c1uhW g$rib$8142$c1uhW)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$8142$c1uhW)
              (void))
            ((case-lambda
               ((g$sym$8147$c1uhW g$mark*$8148$c1uhW)
                ((case-lambda
                   ((g$sym*$8149$c1uhW)
                    ((case-lambda
                       ((g$t$8150$c1uhW)
                        (if g$t$8150$c1uhW
                          ((case-lambda
                             ((g$p$8151$c1uhW)
                              (if (not (eq? g$label$8144$c1uhW g$p$8151$c1uhW))
                                (g$syntax-violation$8094$c1uhW
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$8143$c1uhW)
                                (void))))
                           g$t$8150$c1uhW)
                          ((case-lambda
                             ((g$t$8152$c1uhW)
                              (if g$t$8152$c1uhW
                                ((case-lambda
                                   ((g$p$8153$c1uhW)
                                    (if (not (eq? g$label$8144$c1uhW
                                                  (car g$p$8153$c1uhW)))
                                      (if (not g$sd?$8145$c1uhW)
                                        (set-car!
                                          g$p$8153$c1uhW
                                          g$label$8144$c1uhW)
                                        (g$syntax-violation$8094$c1uhW
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$8143$c1uhW))
                                      (void))))
                                 g$t$8152$c1uhW)
                                (begin
                                  (if (g$rib-cache$7658$c1uhW g$rib$8142$c1uhW)
                                    (g$hashtable-update!$5545$c1uhW
                                      (g$rib-cache$7658$c1uhW g$rib$8142$c1uhW)
                                      g$sym$8147$c1uhW
                                      (case-lambda
                                        ((g$e$8154$c1uhW)
                                         (cons
                                           (cons
                                             g$mark*$8148$c1uhW
                                             g$label$8144$c1uhW)
                                           g$e$8154$c1uhW)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$7659$c1uhW
                                    g$rib$8142$c1uhW
                                    (cons g$sym$8147$c1uhW g$sym*$8149$c1uhW))
                                  (g$set-rib-mark**!$7660$c1uhW
                                    g$rib$8142$c1uhW
                                    (cons
                                      g$mark*$8148$c1uhW
                                      (g$rib-mark**$7655$c1uhW
                                        g$rib$8142$c1uhW)))
                                  (g$set-rib-label*!$7661$c1uhW
                                    g$rib$8142$c1uhW
                                    (cons
                                      g$label$8144$c1uhW
                                      (g$rib-label*$7656$c1uhW
                                        g$rib$8142$c1uhW)))))))
                           (if (g$memq$5055$c1uhW
                                 g$sym$8147$c1uhW
                                 (g$rib-sym*$7654$c1uhW g$rib$8142$c1uhW))
                             (begin
                               '#f
                               (g$find$8146$c1uhW
                                 g$sym$8147$c1uhW
                                 g$mark*$8148$c1uhW
                                 g$sym*$8149$c1uhW
                                 (g$rib-mark**$7655$c1uhW g$rib$8142$c1uhW)
                                 (g$rib-label*$7656$c1uhW g$rib$8142$c1uhW)))
                             '#f)))))
                     (g$find-label$7666$c1uhW
                       g$rib$8142$c1uhW
                       g$sym$8147$c1uhW
                       g$mark*$8148$c1uhW))))
                 (g$rib-sym*$7654$c1uhW g$rib$8142$c1uhW))))
             (g$id->sym$7705$c1uhW g$id$8143$c1uhW)
             (g$stx-mark*$7679$c1uhW g$id$8143$c1uhW)))))))
   (g$extend-rib/nc!$7668$c1uhW
     g$extend-rib/nc!$11363$c1uhW
     (case-lambda
       ((g$rib$8160$c1uhW g$id$8161$c1uhW g$label$8162$c1uhW)
        ((case-lambda
           ((g$sym$8163$c1uhW g$mark*$8164$c1uhW)
            ((case-lambda
               ((g$sym*$8165$c1uhW)
                (begin
                  (if (g$rib-cache$7658$c1uhW g$rib$8160$c1uhW)
                    (g$hashtable-update!$5545$c1uhW
                      (g$rib-cache$7658$c1uhW g$rib$8160$c1uhW)
                      g$sym$8163$c1uhW
                      (case-lambda
                        ((g$e$8166$c1uhW)
                         (cons
                           (cons g$mark*$8164$c1uhW g$label$8162$c1uhW)
                           g$e$8166$c1uhW)))
                      '())
                    (void))
                  (g$set-rib-sym*!$7659$c1uhW
                    g$rib$8160$c1uhW
                    (cons g$sym$8163$c1uhW g$sym*$8165$c1uhW))
                  (g$set-rib-mark**!$7660$c1uhW
                    g$rib$8160$c1uhW
                    (cons
                      g$mark*$8164$c1uhW
                      (g$rib-mark**$7655$c1uhW g$rib$8160$c1uhW)))
                  (g$set-rib-label*!$7661$c1uhW
                    g$rib$8160$c1uhW
                    (cons
                      g$label$8162$c1uhW
                      (g$rib-label*$7656$c1uhW g$rib$8160$c1uhW))))))
             (g$rib-sym*$7654$c1uhW g$rib$8160$c1uhW))))
         (g$id->sym$7705$c1uhW g$id$8161$c1uhW)
         (g$stx-mark*$7679$c1uhW g$id$8161$c1uhW)))))
   (g$make-rib-map$7669$c1uhW
     g$make-rib-map$11364$c1uhW
     (case-lambda
       ((g$sym*$8167$c1uhW)
        ((case-lambda
           ((g$ht$8168$c1uhW)
            ((letrec ((g$f$8169$c1uhW
                        (case-lambda
                          ((g$i$8170$c1uhW g$sym*$8171$c1uhW)
                           (if (null? g$sym*$8171$c1uhW)
                             g$ht$8168$c1uhW
                             (begin
                               (g$hashtable-update!$5545$c1uhW
                                 g$ht$8168$c1uhW
                                 (car g$sym*$8171$c1uhW)
                                 (case-lambda
                                   ((g$x$8172$c1uhW)
                                    (cons g$i$8170$c1uhW g$x$8172$c1uhW)))
                                 '())
                               (g$f$8169$c1uhW
                                 (+ g$i$8170$c1uhW '1)
                                 (cdr g$sym*$8171$c1uhW))))))))
               g$f$8169$c1uhW)
             '0
             g$sym*$8167$c1uhW)))
         (g$make-eq-hashtable$5538$c1uhW)))))
   (g$seal-rib!$7670$c1uhW
     g$seal-rib!$11365$c1uhW
     (case-lambda
       ((g$rib$8173$c1uhW)
        ((case-lambda
           ((g$sym*$8174$c1uhW)
            (if (not (null? g$sym*$8174$c1uhW))
              (begin
                (g$set-rib-sym*!$7659$c1uhW
                  g$rib$8173$c1uhW
                  (list->vector g$sym*$8174$c1uhW))
                (g$set-rib-mark**!$7660$c1uhW
                  g$rib$8173$c1uhW
                  (list->vector (g$rib-mark**$7655$c1uhW g$rib$8173$c1uhW)))
                (g$set-rib-label*!$7661$c1uhW
                  g$rib$8173$c1uhW
                  (list->vector (g$rib-label*$7656$c1uhW g$rib$8173$c1uhW)))
                (g$set-rib-sealed/freq!$7662$c1uhW
                  g$rib$8173$c1uhW
                  (g$make-rib-map$7669$c1uhW g$sym*$8174$c1uhW)))
              (void))))
         (g$rib-sym*$7654$c1uhW g$rib$8173$c1uhW)))))
   (g$unseal-rib!$7671$c1uhW
     g$unseal-rib!$11366$c1uhW
     (case-lambda
       ((g$rib$8175$c1uhW)
        (if (g$rib-sealed/freq$7657$c1uhW g$rib$8175$c1uhW)
          (begin
            (g$set-rib-sealed/freq!$7662$c1uhW g$rib$8175$c1uhW '#f)
            (g$set-rib-sym*!$7659$c1uhW
              g$rib$8175$c1uhW
              (vector->list (g$rib-sym*$7654$c1uhW g$rib$8175$c1uhW)))
            (g$set-rib-mark**!$7660$c1uhW
              g$rib$8175$c1uhW
              (vector->list (g$rib-mark**$7655$c1uhW g$rib$8175$c1uhW)))
            (g$set-rib-label*!$7661$c1uhW
              g$rib$8175$c1uhW
              (vector->list (g$rib-label*$7656$c1uhW g$rib$8175$c1uhW))))
          (void)))))
   (g$make-full-rib$7672$c1uhW
     g$make-full-rib$11367$c1uhW
     (case-lambda
       ((g$id*$8176$c1uhW g$label*$8177$c1uhW)
        ((case-lambda
           ((g$r$8178$c1uhW)
            (begin (g$seal-rib!$7670$c1uhW g$r$8178$c1uhW) g$r$8178$c1uhW)))
         (g$make-rib$7653$c1uhW
           (g$map$5063$c1uhW g$id->sym$7705$c1uhW g$id*$8176$c1uhW)
           (g$map$5063$c1uhW g$stx-mark*$7679$c1uhW g$id*$8176$c1uhW)
           g$label*$8177$c1uhW
           '#f
           '#f)))))
   (g$8689$7673$c1uhW
     g$8689$11368$c1uhW
     (make-record-type-descriptor
       'stx
       '#f
       'g$8692$c1uhW
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$8691$7674$c1uhW g$8691$11369$c1uhW '#f)
   (g$8690$7675$c1uhW
     g$8690$11370$c1uhW
     (make-record-constructor-descriptor
       g$8689$7673$c1uhW
       '#f
       g$8691$7674$c1uhW))
   (g$stx?$7676$c1uhW
     g$stx?$11371$c1uhW
     (record-predicate g$8689$7673$c1uhW))
   (g$make-stx$7677$c1uhW
     g$make-stx$11372$c1uhW
     (record-constructor g$8690$7675$c1uhW))
   (g$stx-expr$7678$c1uhW
     g$stx-expr$11373$c1uhW
     (record-accessor g$8689$7673$c1uhW '0))
   (g$stx-mark*$7679$c1uhW
     g$stx-mark*$11374$c1uhW
     (record-accessor g$8689$7673$c1uhW '1))
   (g$stx-subst*$7680$c1uhW
     g$stx-subst*$11375$c1uhW
     (record-accessor g$8689$7673$c1uhW '2))
   (g$stx-ae*$7681$c1uhW
     g$stx-ae*$11376$c1uhW
     (record-accessor g$8689$7673$c1uhW '3))
   (g$set-stx-expr!$7682$c1uhW
     g$set-stx-expr!$11377$c1uhW
     (record-mutator g$8689$7673$c1uhW '0))
   (g$set-stx-mark*!$7683$c1uhW
     g$set-stx-mark*!$11378$c1uhW
     (record-mutator g$8689$7673$c1uhW '1))
   (g$set-stx-subst*!$7684$c1uhW
     g$set-stx-subst*!$11379$c1uhW
     (record-mutator g$8689$7673$c1uhW '2))
   (g$set-stx-ae*!$7685$c1uhW
     g$set-stx-ae*!$11380$c1uhW
     (record-mutator g$8689$7673$c1uhW '3))
   (g$rp$7686$c1uhW
     g$rp$11381$c1uhW
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$8179$c1uhW g$p$8180$c1uhW g$wr$8181$c1uhW)
          (begin
            (display '"#<syntax " g$p$8180$c1uhW)
            (write (g$stx->datum$7715$c1uhW g$x$8179$c1uhW) g$p$8180$c1uhW)
            ((case-lambda
               ((g$expr$8182$c1uhW)
                (if (annotation? g$expr$8182$c1uhW)
                  ((case-lambda
                     ((g$src$8183$c1uhW)
                      (if (pair? g$src$8183$c1uhW)
                        (begin
                          (display '" (" g$p$8180$c1uhW)
                          (display (cdr g$src$8183$c1uhW) g$p$8180$c1uhW)
                          (display '" of " g$p$8180$c1uhW)
                          (display (car g$src$8183$c1uhW) g$p$8180$c1uhW)
                          (display '")" g$p$8180$c1uhW))
                        (void))))
                   (annotation-source g$expr$8182$c1uhW))
                  (void))))
             (g$stx-expr$7678$c1uhW g$x$8179$c1uhW))
            (display '">" g$p$8180$c1uhW))))))
   (g$datum->stx$7687$c1uhW
     g$datum->stx$11382$c1uhW
     (case-lambda
       ((g$id$8184$c1uhW g$datum$8185$c1uhW)
        (g$make-stx$7677$c1uhW
          g$datum$8185$c1uhW
          (g$stx-mark*$7679$c1uhW g$id$8184$c1uhW)
          (g$stx-subst*$7680$c1uhW g$id$8184$c1uhW)
          (g$stx-ae*$7681$c1uhW g$id$8184$c1uhW)))))
   (g$gen-mark$7688$c1uhW
     g$gen-mark$11383$c1uhW
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7689$c1uhW g$anti-mark$11384$c1uhW '#f)
   (g$anti-mark?$7690$c1uhW g$anti-mark?$11385$c1uhW not)
   (g$join-wraps$7691$c1uhW
     g$join-wraps$11386$c1uhW
     (case-lambda
       ((g$m1*$8186$c1uhW g$s1*$8187$c1uhW g$ae1*$8188$c1uhW g$e$8189$c1uhW)
        (letrec* ((g$cancel$8190$c1uhW
                    (case-lambda
                      ((g$ls1$8194$c1uhW g$ls2$8195$c1uhW)
                       ((letrec ((g$f$8196$c1uhW
                                   (case-lambda
                                     ((g$x$8197$c1uhW g$ls1$8198$c1uhW)
                                      (if (null? g$ls1$8198$c1uhW)
                                        (cdr g$ls2$8195$c1uhW)
                                        (cons
                                          g$x$8197$c1uhW
                                          (g$f$8196$c1uhW
                                            (car g$ls1$8198$c1uhW)
                                            (cdr g$ls1$8198$c1uhW))))))))
                          g$f$8196$c1uhW)
                        (car g$ls1$8194$c1uhW)
                        (cdr g$ls1$8194$c1uhW))))))
          ((case-lambda
             ((g$m2*$8191$c1uhW g$s2*$8192$c1uhW g$ae2*$8193$c1uhW)
              (if (if (not (null? g$m1*$8186$c1uhW))
                    (if (not (null? g$m2*$8191$c1uhW))
                      (begin
                        '#f
                        (g$anti-mark?$7690$c1uhW (car g$m2*$8191$c1uhW)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$8190$c1uhW g$m1*$8186$c1uhW g$m2*$8191$c1uhW)
                  (g$cancel$8190$c1uhW g$s1*$8187$c1uhW g$s2*$8192$c1uhW)
                  (g$cancel$8190$c1uhW g$ae1*$8188$c1uhW g$ae2*$8193$c1uhW))
                (values
                  (append g$m1*$8186$c1uhW g$m2*$8191$c1uhW)
                  (append g$s1*$8187$c1uhW g$s2*$8192$c1uhW)
                  (append g$ae1*$8188$c1uhW g$ae2*$8193$c1uhW)))))
           (g$stx-mark*$7679$c1uhW g$e$8189$c1uhW)
           (g$stx-subst*$7680$c1uhW g$e$8189$c1uhW)
           (g$stx-ae*$7681$c1uhW g$e$8189$c1uhW))))))
   (g$mkstx$7692$c1uhW
     g$mkstx$11387$c1uhW
     (case-lambda
       ((g$e$8199$c1uhW g$m*$8200$c1uhW g$s*$8201$c1uhW g$ae*$8202$c1uhW)
        (if (if (g$stx?$7676$c1uhW g$e$8199$c1uhW)
              (begin '#f (not (g$top-marked?$7642$c1uhW g$m*$8200$c1uhW)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7691$c1uhW
                 g$m*$8200$c1uhW
                 g$s*$8201$c1uhW
                 g$ae*$8202$c1uhW
                 g$e$8199$c1uhW)))
            (case-lambda
              ((g$m*$8206$c1uhW g$s*$8207$c1uhW g$ae*$8208$c1uhW)
               ((case-lambda
                  ((g$ae*$8209$c1uhW g$s*$8210$c1uhW g$m*$8211$c1uhW)
                   (g$make-stx$7677$c1uhW
                     (g$stx-expr$7678$c1uhW g$e$8199$c1uhW)
                     g$m*$8211$c1uhW
                     g$s*$8210$c1uhW
                     g$ae*$8209$c1uhW)))
                g$ae*$8208$c1uhW
                g$s*$8207$c1uhW
                g$m*$8206$c1uhW))))
          (g$make-stx$7677$c1uhW
            g$e$8199$c1uhW
            g$m*$8200$c1uhW
            g$s*$8201$c1uhW
            g$ae*$8202$c1uhW)))))
   (g$add-mark$7693$c1uhW
     g$add-mark$11388$c1uhW
     (case-lambda
       ((g$m$8212$c1uhW g$e$8213$c1uhW g$ae$8214$c1uhW)
        (g$mkstx$7692$c1uhW
          g$e$8213$c1uhW
          (list g$m$8212$c1uhW)
          '(shift)
          (list g$ae$8214$c1uhW)))))
   (g$add-subst$7694$c1uhW
     g$add-subst$11389$c1uhW
     (case-lambda
       ((g$subst$8215$c1uhW g$e$8216$c1uhW)
        (g$mkstx$7692$c1uhW g$e$8216$c1uhW '() (list g$subst$8215$c1uhW) '()))))
   (g$syntax-kind?$7695$c1uhW
     g$syntax-kind?$11390$c1uhW
     (case-lambda
       ((g$x$8217$c1uhW g$p?$8218$c1uhW)
        (if (g$stx?$7676$c1uhW g$x$8217$c1uhW)
          (g$syntax-kind?$7695$c1uhW
            (g$stx-expr$7678$c1uhW g$x$8217$c1uhW)
            g$p?$8218$c1uhW)
          (if (annotation? g$x$8217$c1uhW)
            (g$syntax-kind?$7695$c1uhW
              (annotation-expression g$x$8217$c1uhW)
              g$p?$8218$c1uhW)
            (g$p?$8218$c1uhW g$x$8217$c1uhW))))))
   (g$syntax-vector->list$7696$c1uhW
     g$syntax-vector->list$11391$c1uhW
     (case-lambda
       ((g$x$8219$c1uhW)
        (if (g$stx?$7676$c1uhW g$x$8219$c1uhW)
          ((case-lambda
             ((g$ls$8220$c1uhW g$m*$8221$c1uhW g$s*$8222$c1uhW g$ae*$8223$c1uhW)
              (g$map$5063$c1uhW
                (case-lambda
                  ((g$x$8224$c1uhW)
                   (g$mkstx$7692$c1uhW
                     g$x$8224$c1uhW
                     g$m*$8221$c1uhW
                     g$s*$8222$c1uhW
                     g$ae*$8223$c1uhW)))
                g$ls$8220$c1uhW)))
           (g$syntax-vector->list$7696$c1uhW
             (g$stx-expr$7678$c1uhW g$x$8219$c1uhW))
           (g$stx-mark*$7679$c1uhW g$x$8219$c1uhW)
           (g$stx-subst*$7680$c1uhW g$x$8219$c1uhW)
           (g$stx-ae*$7681$c1uhW g$x$8219$c1uhW))
          (if (annotation? g$x$8219$c1uhW)
            (g$syntax-vector->list$7696$c1uhW
              (annotation-expression g$x$8219$c1uhW))
            (if (vector? g$x$8219$c1uhW)
              (vector->list g$x$8219$c1uhW)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$8219$c1uhW)))))))
   (g$syntax-pair?$7697$c1uhW
     g$syntax-pair?$11392$c1uhW
     (case-lambda
       ((g$x$8225$c1uhW) (g$syntax-kind?$7695$c1uhW g$x$8225$c1uhW pair?))))
   (g$syntax-vector?$7698$c1uhW
     g$syntax-vector?$11393$c1uhW
     (case-lambda
       ((g$x$8226$c1uhW) (g$syntax-kind?$7695$c1uhW g$x$8226$c1uhW vector?))))
   (g$syntax-null?$7699$c1uhW
     g$syntax-null?$11394$c1uhW
     (case-lambda
       ((g$x$8227$c1uhW) (g$syntax-kind?$7695$c1uhW g$x$8227$c1uhW null?))))
   (g$syntax-list?$7700$c1uhW
     g$syntax-list?$11395$c1uhW
     (case-lambda
       ((g$x$8228$c1uhW)
        ((case-lambda
           ((g$t$8229$c1uhW)
            (if g$t$8229$c1uhW
              g$t$8229$c1uhW
              (begin
                '#f
                (if (g$syntax-pair?$7697$c1uhW g$x$8228$c1uhW)
                  (begin
                    '#f
                    (g$syntax-list?$7700$c1uhW
                      (g$syntax-cdr$7702$c1uhW g$x$8228$c1uhW)))
                  '#f)))))
         (g$syntax-null?$7699$c1uhW g$x$8228$c1uhW)))))
   (g$syntax-car$7701$c1uhW
     g$syntax-car$11396$c1uhW
     (case-lambda
       ((g$x$8230$c1uhW)
        (if (g$stx?$7676$c1uhW g$x$8230$c1uhW)
          (g$mkstx$7692$c1uhW
            (g$syntax-car$7701$c1uhW (g$stx-expr$7678$c1uhW g$x$8230$c1uhW))
            (g$stx-mark*$7679$c1uhW g$x$8230$c1uhW)
            (g$stx-subst*$7680$c1uhW g$x$8230$c1uhW)
            (g$stx-ae*$7681$c1uhW g$x$8230$c1uhW))
          (if (annotation? g$x$8230$c1uhW)
            (g$syntax-car$7701$c1uhW (annotation-expression g$x$8230$c1uhW))
            (if (pair? g$x$8230$c1uhW)
              (car g$x$8230$c1uhW)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$8230$c1uhW)))))))
   (g$syntax-cdr$7702$c1uhW
     g$syntax-cdr$11397$c1uhW
     (case-lambda
       ((g$x$8231$c1uhW)
        (if (g$stx?$7676$c1uhW g$x$8231$c1uhW)
          (g$mkstx$7692$c1uhW
            (g$syntax-cdr$7702$c1uhW (g$stx-expr$7678$c1uhW g$x$8231$c1uhW))
            (g$stx-mark*$7679$c1uhW g$x$8231$c1uhW)
            (g$stx-subst*$7680$c1uhW g$x$8231$c1uhW)
            (g$stx-ae*$7681$c1uhW g$x$8231$c1uhW))
          (if (annotation? g$x$8231$c1uhW)
            (g$syntax-cdr$7702$c1uhW (annotation-expression g$x$8231$c1uhW))
            (if (pair? g$x$8231$c1uhW)
              (cdr g$x$8231$c1uhW)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$8231$c1uhW)))))))
   (g$syntax->list$7703$c1uhW
     g$syntax->list$11398$c1uhW
     (case-lambda
       ((g$x$8232$c1uhW)
        (if (g$syntax-pair?$7697$c1uhW g$x$8232$c1uhW)
          (cons
            (g$syntax-car$7701$c1uhW g$x$8232$c1uhW)
            (g$syntax->list$7703$c1uhW
              (g$syntax-cdr$7702$c1uhW g$x$8232$c1uhW)))
          (if (g$syntax-null?$7699$c1uhW g$x$8232$c1uhW)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$8232$c1uhW))))))
   (g$id?$7704$c1uhW
     g$id?$11399$c1uhW
     (case-lambda
       ((g$x$8233$c1uhW)
        (if (g$stx?$7676$c1uhW g$x$8233$c1uhW)
          (begin
            '#f
            ((case-lambda
               ((g$expr$8234$c1uhW)
                (symbol?
                  (if (annotation? g$expr$8234$c1uhW)
                    (annotation-stripped g$expr$8234$c1uhW)
                    g$expr$8234$c1uhW))))
             (g$stx-expr$7678$c1uhW g$x$8233$c1uhW)))
          '#f))))
   (g$id->sym$7705$c1uhW
     g$id->sym$11400$c1uhW
     (case-lambda
       ((g$x$8235$c1uhW)
        (begin
          (if (not (g$stx?$7676$c1uhW g$x$8235$c1uhW))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$8235$c1uhW)
            (void))
          ((case-lambda
             ((g$expr$8236$c1uhW)
              ((case-lambda
                 ((g$sym$8237$c1uhW)
                  (if (symbol? g$sym$8237$c1uhW)
                    g$sym$8237$c1uhW
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$8235$c1uhW))))
               (if (annotation? g$expr$8236$c1uhW)
                 (annotation-stripped g$expr$8236$c1uhW)
                 g$expr$8236$c1uhW))))
           (g$stx-expr$7678$c1uhW g$x$8235$c1uhW))))))
   (g$same-marks?$7706$c1uhW
     g$same-marks?$11401$c1uhW
     (case-lambda
       ((g$x$8238$c1uhW g$y$8239$c1uhW)
        ((case-lambda
           ((g$t$8240$c1uhW)
            (if g$t$8240$c1uhW
              g$t$8240$c1uhW
              (begin
                '#f
                (if (pair? g$x$8238$c1uhW)
                  (if (pair? g$y$8239$c1uhW)
                    (if (eq? (car g$x$8238$c1uhW) (car g$y$8239$c1uhW))
                      (begin
                        '#f
                        (g$same-marks?$7706$c1uhW
                          (cdr g$x$8238$c1uhW)
                          (cdr g$y$8239$c1uhW)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$8238$c1uhW) (begin '#f (null? g$y$8239$c1uhW)) '#f)))))
   (g$bound-id=?$7707$c1uhW
     g$bound-id=?$11402$c1uhW
     (case-lambda
       ((g$x$8241$c1uhW g$y$8242$c1uhW)
        (if (eq? (g$id->sym$7705$c1uhW g$x$8241$c1uhW)
                 (g$id->sym$7705$c1uhW g$y$8242$c1uhW))
          (begin
            '#f
            (g$same-marks?$7706$c1uhW
              (g$stx-mark*$7679$c1uhW g$x$8241$c1uhW)
              (g$stx-mark*$7679$c1uhW g$y$8242$c1uhW)))
          '#f))))
   (g$free-id=?$7708$c1uhW
     g$free-id=?$11403$c1uhW
     (case-lambda
       ((g$i$8243$c1uhW g$j$8244$c1uhW)
        ((case-lambda
           ((g$t0$8245$c1uhW g$t1$8246$c1uhW)
            (if ((case-lambda
                   ((g$t$8247$c1uhW)
                    (if g$t$8247$c1uhW
                      g$t$8247$c1uhW
                      (begin '#f g$t1$8246$c1uhW))))
                 g$t0$8245$c1uhW)
              (eq? g$t0$8245$c1uhW g$t1$8246$c1uhW)
              (eq? (g$id->sym$7705$c1uhW g$i$8243$c1uhW)
                   (g$id->sym$7705$c1uhW g$j$8244$c1uhW)))))
         (g$id->real-label$7718$c1uhW g$i$8243$c1uhW)
         (g$id->real-label$7718$c1uhW g$j$8244$c1uhW)))))
   (g$valid-bound-ids?$7709$c1uhW
     g$valid-bound-ids?$11404$c1uhW
     (case-lambda
       ((g$id*$8248$c1uhW)
        (if (g$for-all$5061$c1uhW g$id?$7704$c1uhW g$id*$8248$c1uhW)
          (begin '#f (g$distinct-bound-ids?$7710$c1uhW g$id*$8248$c1uhW))
          '#f))))
   (g$distinct-bound-ids?$7710$c1uhW
     g$distinct-bound-ids?$11405$c1uhW
     (case-lambda
       ((g$id*$8249$c1uhW)
        ((case-lambda
           ((g$t$8250$c1uhW)
            (if g$t$8250$c1uhW
              g$t$8250$c1uhW
              (begin
                '#f
                (if (not (g$bound-id-member?$7711$c1uhW
                           (car g$id*$8249$c1uhW)
                           (cdr g$id*$8249$c1uhW)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7710$c1uhW (cdr g$id*$8249$c1uhW)))
                  '#f)))))
         (null? g$id*$8249$c1uhW)))))
   (g$bound-id-member?$7711$c1uhW
     g$bound-id-member?$11406$c1uhW
     (case-lambda
       ((g$id$8251$c1uhW g$id*$8252$c1uhW)
        (if (pair? g$id*$8252$c1uhW)
          (begin
            '#f
            ((case-lambda
               ((g$t$8253$c1uhW)
                (if g$t$8253$c1uhW
                  g$t$8253$c1uhW
                  (begin
                    '#f
                    (g$bound-id-member?$7711$c1uhW
                      g$id$8251$c1uhW
                      (cdr g$id*$8252$c1uhW))))))
             (g$bound-id=?$7707$c1uhW g$id$8251$c1uhW (car g$id*$8252$c1uhW))))
          '#f))))
   (g$self-evaluating?$7712$c1uhW
     g$self-evaluating?$11407$c1uhW
     (case-lambda
       ((g$x$8254$c1uhW)
        ((case-lambda
           ((g$t$8255$c1uhW)
            (if g$t$8255$c1uhW
              g$t$8255$c1uhW
              ((case-lambda
                 ((g$t$8256$c1uhW)
                  (if g$t$8256$c1uhW
                    g$t$8256$c1uhW
                    ((case-lambda
                       ((g$t$8257$c1uhW)
                        (if g$t$8257$c1uhW
                          g$t$8257$c1uhW
                          ((case-lambda
                             ((g$t$8258$c1uhW)
                              (if g$t$8258$c1uhW
                                g$t$8258$c1uhW
                                (begin '#f (bytevector? g$x$8254$c1uhW)))))
                           (boolean? g$x$8254$c1uhW)))))
                     (char? g$x$8254$c1uhW)))))
               (string? g$x$8254$c1uhW)))))
         (number? g$x$8254$c1uhW)))))
   (g$strip-annotations$7713$c1uhW
     g$strip-annotations$11408$c1uhW
     (case-lambda
       ((g$x$8259$c1uhW)
        (if (pair? g$x$8259$c1uhW)
          (cons
            (g$strip-annotations$7713$c1uhW (car g$x$8259$c1uhW))
            (g$strip-annotations$7713$c1uhW (cdr g$x$8259$c1uhW)))
          (if (vector? g$x$8259$c1uhW)
            (vector-map g$strip-annotations$7713$c1uhW g$x$8259$c1uhW)
            (if (annotation? g$x$8259$c1uhW)
              (annotation-stripped g$x$8259$c1uhW)
              g$x$8259$c1uhW))))))
   (g$strip$7714$c1uhW
     g$strip$11409$c1uhW
     (case-lambda
       ((g$x$8260$c1uhW g$m*$8261$c1uhW)
        (if (g$top-marked?$7642$c1uhW g$m*$8261$c1uhW)
          (if ((case-lambda
                 ((g$t$8262$c1uhW)
                  (if g$t$8262$c1uhW
                    g$t$8262$c1uhW
                    ((case-lambda
                       ((g$t$8263$c1uhW)
                        (if g$t$8263$c1uhW
                          g$t$8263$c1uhW
                          (begin
                            '#f
                            (if (vector? g$x$8260$c1uhW)
                              (if (> (vector-length g$x$8260$c1uhW) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$8260$c1uhW '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$8260$c1uhW)
                       (begin '#f (annotation? (car g$x$8260$c1uhW)))
                       '#f)))))
               (annotation? g$x$8260$c1uhW))
            (g$strip-annotations$7713$c1uhW g$x$8260$c1uhW)
            g$x$8260$c1uhW)
          ((letrec ((g$f$8264$c1uhW
                      (case-lambda
                        ((g$x$8265$c1uhW)
                         (if (g$stx?$7676$c1uhW g$x$8265$c1uhW)
                           (g$strip$7714$c1uhW
                             (g$stx-expr$7678$c1uhW g$x$8265$c1uhW)
                             (g$stx-mark*$7679$c1uhW g$x$8265$c1uhW))
                           (if (annotation? g$x$8265$c1uhW)
                             (annotation-stripped g$x$8265$c1uhW)
                             (if (pair? g$x$8265$c1uhW)
                               ((case-lambda
                                  ((g$a$8266$c1uhW g$d$8267$c1uhW)
                                   (if (if (eq? g$a$8266$c1uhW
                                                (car g$x$8265$c1uhW))
                                         (begin
                                           '#f
                                           (eq? g$d$8267$c1uhW
                                                (cdr g$x$8265$c1uhW)))
                                         '#f)
                                     g$x$8265$c1uhW
                                     (cons g$a$8266$c1uhW g$d$8267$c1uhW))))
                                (g$f$8264$c1uhW (car g$x$8265$c1uhW))
                                (g$f$8264$c1uhW (cdr g$x$8265$c1uhW)))
                               (if (vector? g$x$8265$c1uhW)
                                 ((case-lambda
                                    ((g$old$8268$c1uhW)
                                     ((case-lambda
                                        ((g$new$8269$c1uhW)
                                         (if (g$for-all$5061$c1uhW
                                               eq?
                                               g$old$8268$c1uhW
                                               g$new$8269$c1uhW)
                                           g$x$8265$c1uhW
                                           (list->vector g$new$8269$c1uhW))))
                                      (g$map$5063$c1uhW
                                        g$f$8264$c1uhW
                                        g$old$8268$c1uhW))))
                                  (vector->list g$x$8265$c1uhW))
                                 g$x$8265$c1uhW))))))))
             g$f$8264$c1uhW)
           g$x$8260$c1uhW)))))
   (g$stx->datum$7715$c1uhW
     g$stx->datum$11410$c1uhW
     (case-lambda
       ((g$x$8270$c1uhW) (g$strip$7714$c1uhW g$x$8270$c1uhW '()))))
   (g$same-marks*?$7716$c1uhW
     g$same-marks*?$11411$c1uhW
     (case-lambda
       ((g$mark*$8271$c1uhW g$mark**$8272$c1uhW g$si$8273$c1uhW)
        (if (null? g$si$8273$c1uhW)
          '#f
          (if (g$same-marks?$7706$c1uhW
                g$mark*$8271$c1uhW
                (vector-ref g$mark**$8272$c1uhW (car g$si$8273$c1uhW)))
            (car g$si$8273$c1uhW)
            (g$same-marks*?$7716$c1uhW
              g$mark*$8271$c1uhW
              g$mark**$8272$c1uhW
              (cdr g$si$8273$c1uhW)))))))
   (g$id->label$7717$c1uhW
     g$id->label$11412$c1uhW
     (case-lambda
       ((g$id$8274$c1uhW)
        ((case-lambda
           ((g$t$8275$c1uhW)
            (if g$t$8275$c1uhW
              g$t$8275$c1uhW
              (begin
                '#f
                ((case-lambda
                   ((g$t$8276$c1uhW)
                    (if g$t$8276$c1uhW
                      ((case-lambda
                         ((g$env$8277$c1uhW)
                          ((case-lambda
                             ((g$rib$8278$c1uhW)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7647$c1uhW
                                     g$id$8274$c1uhW
                                     g$rib$8278$c1uhW
                                     '#f)))
                                (case-lambda
                                  ((g$lab$8281$c1uhW g$_loc$8282$c1uhW)
                                   ((case-lambda
                                      ((g$_loc$8283$c1uhW g$lab$8284$c1uhW)
                                       (begin
                                         (g$extend-rib!$7667$c1uhW
                                           g$rib$8278$c1uhW
                                           g$id$8274$c1uhW
                                           g$lab$8284$c1uhW
                                           '#t)
                                         g$lab$8284$c1uhW)))
                                    g$_loc$8282$c1uhW
                                    g$lab$8281$c1uhW))))))
                           (g$interaction-env-rib$8060$c1uhW
                             g$env$8277$c1uhW))))
                       g$t$8276$c1uhW)
                      '#f)))
                 (g$top-level-context$8102$c1uhW))))))
         (g$id->real-label$7718$c1uhW g$id$8274$c1uhW)))))
   (g$id->real-label$7718$c1uhW
     g$id->real-label$11413$c1uhW
     (case-lambda
       ((g$id$8285$c1uhW)
        ((case-lambda
           ((g$sym$8286$c1uhW)
            ((letrec ((g$search$8287$c1uhW
                        (case-lambda
                          ((g$subst*$8288$c1uhW g$mark*$8289$c1uhW)
                           (if (null? g$subst*$8288$c1uhW)
                             '#f
                             (if (eq? (car g$subst*$8288$c1uhW) 'shift)
                               (g$search$8287$c1uhW
                                 (cdr g$subst*$8288$c1uhW)
                                 (cdr g$mark*$8289$c1uhW))
                               ((case-lambda
                                  ((g$rib$8290$c1uhW)
                                   ((case-lambda
                                      ((g$t$8291$c1uhW)
                                       (if g$t$8291$c1uhW
                                         ((case-lambda
                                            ((g$ht$8292$c1uhW)
                                             ((case-lambda
                                                ((g$si$8293$c1uhW)
                                                 ((case-lambda
                                                    ((g$i$8294$c1uhW)
                                                     (if g$i$8294$c1uhW
                                                       (vector-ref
                                                         (g$rib-label*$7656$c1uhW
                                                           g$rib$8290$c1uhW)
                                                         g$i$8294$c1uhW)
                                                       (g$search$8287$c1uhW
                                                         (cdr g$subst*$8288$c1uhW)
                                                         g$mark*$8289$c1uhW))))
                                                  (if g$si$8293$c1uhW
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7716$c1uhW
                                                        g$mark*$8289$c1uhW
                                                        (g$rib-mark**$7655$c1uhW
                                                          g$rib$8290$c1uhW)
                                                        (reverse
                                                          g$si$8293$c1uhW)))
                                                    '#f))))
                                              (g$hashtable-ref$5541$c1uhW
                                                g$ht$8292$c1uhW
                                                g$sym$8286$c1uhW
                                                '#f))))
                                          g$t$8291$c1uhW)
                                         ((case-lambda
                                            ((g$t$8295$c1uhW)
                                             (if g$t$8295$c1uhW
                                               g$t$8295$c1uhW
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$8296$c1uhW
                                                             (case-lambda
                                                               ((g$sym*$8297$c1uhW
                                                                  g$mark**$8298$c1uhW
                                                                  g$label*$8299$c1uhW)
                                                                (if (null?
                                                                      g$sym*$8297$c1uhW)
                                                                  (g$search$8287$c1uhW
                                                                    (cdr g$subst*$8288$c1uhW)
                                                                    g$mark*$8289$c1uhW)
                                                                  (if (if (eq? (car g$sym*$8297$c1uhW)
                                                                               g$sym$8286$c1uhW)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$7706$c1uhW
                                                                            (car g$mark**$8298$c1uhW)
                                                                            g$mark*$8289$c1uhW))
                                                                        '#f)
                                                                    (car g$label*$8299$c1uhW)
                                                                    (g$f$8296$c1uhW
                                                                      (cdr g$sym*$8297$c1uhW)
                                                                      (cdr g$mark**$8298$c1uhW)
                                                                      (cdr g$label*$8299$c1uhW))))))))
                                                    g$f$8296$c1uhW)
                                                  (g$rib-sym*$7654$c1uhW
                                                    g$rib$8290$c1uhW)
                                                  (g$rib-mark**$7655$c1uhW
                                                    g$rib$8290$c1uhW)
                                                  (g$rib-label*$7656$c1uhW
                                                    g$rib$8290$c1uhW))))))
                                          (g$find-label$7666$c1uhW
                                            g$rib$8290$c1uhW
                                            g$sym$8286$c1uhW
                                            g$mark*$8289$c1uhW)))))
                                    (g$rib-sealed/freq$7657$c1uhW
                                      g$rib$8290$c1uhW))))
                                (car g$subst*$8288$c1uhW))))))))
               g$search$8287$c1uhW)
             (g$stx-subst*$7680$c1uhW g$id$8285$c1uhW)
             (g$stx-mark*$7679$c1uhW g$id$8285$c1uhW))))
         (g$id->sym$7705$c1uhW g$id$8285$c1uhW)))))
   (g$label->binding$7719$c1uhW
     g$label->binding$11414$c1uhW
     (case-lambda
       ((g$x$8300$c1uhW g$r$8301$c1uhW)
        ((case-lambda
           ((g$t$8302$c1uhW)
            (if g$t$8302$c1uhW
              ((case-lambda
                 ((g$b$8303$c1uhW)
                  (if (if (pair? g$b$8303$c1uhW)
                        (begin '#f (eq? (car g$b$8303$c1uhW) '$core-rtd))
                        '#f)
                    (cons
                      '$rtd
                      (g$map$5063$c1uhW
                        g$bless$7945$c1uhW
                        (cdr g$b$8303$c1uhW)))
                    (if (if (pair? g$b$8303$c1uhW)
                          (begin '#f (eq? (car g$b$8303$c1uhW) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$8304$c1uhW g$loc$8305$c1uhW)
                          (cons '$rtd (symbol-value g$loc$8305$c1uhW))))
                       (g$cadr$5264$c1uhW g$b$8303$c1uhW)
                       (g$cddr$5266$c1uhW g$b$8303$c1uhW))
                      g$b$8303$c1uhW))))
               g$t$8302$c1uhW)
              ((case-lambda
                 ((g$t$8306$c1uhW)
                  (if g$t$8306$c1uhW
                    (cdr g$t$8306$c1uhW)
                    ((case-lambda
                       ((g$t$8307$c1uhW)
                        (if g$t$8307$c1uhW
                          ((case-lambda
                             ((g$env$8308$c1uhW)
                              ((case-lambda
                                 ((g$t$8309$c1uhW)
                                  (if g$t$8309$c1uhW
                                    ((case-lambda
                                       ((g$p$8310$c1uhW)
                                        (g$cons*$5065$c1uhW
                                          'lexical
                                          (cdr g$p$8310$c1uhW)
                                          '#f)))
                                     g$t$8309$c1uhW)
                                    '(displaced-lexical . #f))))
                               (g$assq$5051$c1uhW
                                 g$x$8300$c1uhW
                                 (g$interaction-env-locs$8062$c1uhW
                                   g$env$8308$c1uhW)))))
                           g$t$8307$c1uhW)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$8102$c1uhW)))))
               (g$assq$5051$c1uhW g$x$8300$c1uhW g$r$8301$c1uhW)))))
         (g$imported-label->binding$7513$c1uhW g$x$8300$c1uhW)))))
   (g$make-binding$7720$c1uhW g$make-binding$11415$c1uhW cons)
   (g$binding-type$7721$c1uhW g$binding-type$11416$c1uhW car)
   (g$binding-value$7722$c1uhW g$binding-value$11417$c1uhW cdr)
   (g$raise-unbound-error$7723$c1uhW
     g$raise-unbound-error$11418$c1uhW
     (case-lambda
       ((g$id$8311$c1uhW)
        (g$syntax-violation*$8093$c1uhW
          '#f
          '"unbound identifier"
          g$id$8311$c1uhW
          (g$make-undefined-violation$5887$c1uhW)))))
   (g$syntax-type$7724$c1uhW
     g$syntax-type$11419$c1uhW
     (case-lambda
       ((g$e$8312$c1uhW g$r$8313$c1uhW)
        (if (g$id?$7704$c1uhW g$e$8312$c1uhW)
          ((case-lambda
             ((g$id$8314$c1uhW)
              ((case-lambda
                 ((g$label$8315$c1uhW)
                  ((case-lambda
                     ((g$b$8316$c1uhW)
                      ((case-lambda
                         ((g$type$8317$c1uhW)
                          (begin
                            (if (not g$label$8315$c1uhW)
                              (g$raise-unbound-error$7723$c1uhW g$id$8314$c1uhW)
                              (void))
                            ((case-lambda
                               ((g$t$8318$c1uhW)
                                (if (g$memv$5056$c1uhW
                                      g$t$8318$c1uhW
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable))
                                  (values
                                    g$type$8317$c1uhW
                                    (g$binding-value$7722$c1uhW g$b$8316$c1uhW)
                                    g$id$8314$c1uhW)
                                  (values 'other '#f '#f))))
                             g$type$8317$c1uhW))))
                       (g$binding-type$7721$c1uhW g$b$8316$c1uhW))))
                   (g$label->binding$7719$c1uhW
                     g$label$8315$c1uhW
                     g$r$8313$c1uhW))))
               (g$id->label$7717$c1uhW g$id$8314$c1uhW))))
           g$e$8312$c1uhW)
          (if (g$syntax-pair?$7697$c1uhW g$e$8312$c1uhW)
            ((case-lambda
               ((g$id$8319$c1uhW)
                (if (g$id?$7704$c1uhW g$id$8319$c1uhW)
                  ((case-lambda
                     ((g$label$8320$c1uhW)
                      ((case-lambda
                         ((g$b$8321$c1uhW)
                          ((case-lambda
                             ((g$type$8322$c1uhW)
                              (begin
                                (if (not g$label$8320$c1uhW)
                                  (g$raise-unbound-error$7723$c1uhW
                                    g$id$8319$c1uhW)
                                  (void))
                                ((case-lambda
                                   ((g$t$8323$c1uhW)
                                    (if (g$memv$5056$c1uhW
                                          g$t$8323$c1uhW
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd))
                                      (values
                                        g$type$8322$c1uhW
                                        (g$binding-value$7722$c1uhW
                                          g$b$8321$c1uhW)
                                        g$id$8319$c1uhW)
                                      (values 'call '#f '#f))))
                                 g$type$8322$c1uhW))))
                           (g$binding-type$7721$c1uhW g$b$8321$c1uhW))))
                       (g$label->binding$7719$c1uhW
                         g$label$8320$c1uhW
                         g$r$8313$c1uhW))))
                   (g$id->label$7717$c1uhW g$id$8319$c1uhW))
                  (values 'call '#f '#f))))
             (g$syntax-car$7701$c1uhW g$e$8312$c1uhW))
            ((case-lambda
               ((g$d$8324$c1uhW)
                (if (g$self-evaluating?$7712$c1uhW g$d$8324$c1uhW)
                  (values 'constant g$d$8324$c1uhW '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7715$c1uhW g$e$8312$c1uhW)))))))
   (g$sanitize-binding$7732$c1uhW
     g$sanitize-binding$11420$c1uhW
     (case-lambda
       ((g$x$8325$c1uhW g$src$8326$c1uhW)
        (if (procedure? g$x$8325$c1uhW)
          (g$cons*$5065$c1uhW 'local-macro g$x$8325$c1uhW g$src$8326$c1uhW)
          (if (if (pair? g$x$8325$c1uhW)
                (if (eq? (car g$x$8325$c1uhW) 'macro!)
                  (begin '#f (procedure? (cdr g$x$8325$c1uhW)))
                  '#f)
                '#f)
            (g$cons*$5065$c1uhW
              'local-macro!
              (cdr g$x$8325$c1uhW)
              g$src$8326$c1uhW)
            (if (if (pair? g$x$8325$c1uhW)
                  (begin '#f (eq? (car g$x$8325$c1uhW) '$rtd))
                  '#f)
              g$x$8325$c1uhW
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$8325$c1uhW)))))))
   (g$make-variable-transformer$7733$c1uhW
     g$make-variable-transformer$11421$c1uhW
     (case-lambda
       ((g$x$8327$c1uhW)
        (if (procedure? g$x$8327$c1uhW)
          (cons 'macro! g$x$8327$c1uhW)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$8327$c1uhW)))))
   (g$variable-transformer?$7734$c1uhW
     g$variable-transformer?$11422$c1uhW
     (case-lambda
       ((g$x$8328$c1uhW)
        (if (pair? g$x$8328$c1uhW)
          (if (eq? (car g$x$8328$c1uhW) 'macro!)
            (begin '#f (procedure? (cdr g$x$8328$c1uhW)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7735$c1uhW
     g$variable-transformer-procedure$11423$c1uhW
     (case-lambda
       ((g$x$8329$c1uhW)
        (if (g$variable-transformer?$7734$c1uhW g$x$8329$c1uhW)
          (cdr g$x$8329$c1uhW)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$8329$c1uhW)))))
   (g$make-eval-transformer$7736$c1uhW
     g$make-eval-transformer$11424$c1uhW
     (case-lambda
       ((g$x$8330$c1uhW)
        (g$sanitize-binding$7732$c1uhW
          (eval-core (g$expanded->core$7222$c1uhW g$x$8330$c1uhW))
          g$x$8330$c1uhW))))
   (g$parse-define$7922$c1uhW
     g$parse-define$11425$c1uhW
     (case-lambda
       ((g$x$8331$c1uhW)
        ((case-lambda
           ((g$t$8332$c1uhW)
            ((case-lambda
               ((g$ls/false$8333$c1uhW)
                (if (if g$ls/false$8333$c1uhW
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8334$c1uhW
                               g$fmls$8335$c1uhW
                               g$b$8336$c1uhW
                               g$b*$8337$c1uhW)
                             (g$id?$7704$c1uhW g$id$8334$c1uhW)))
                          g$ls/false$8333$c1uhW))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8338$c1uhW
                         g$fmls$8339$c1uhW
                         g$b$8340$c1uhW
                         g$b*$8341$c1uhW)
                       (begin
                         (g$verify-formals$8002$c1uhW
                           g$fmls$8339$c1uhW
                           g$x$8331$c1uhW)
                         (values
                           g$id$8338$c1uhW
                           (cons
                             'defun
                             (cons
                               g$fmls$8339$c1uhW
                               (cons g$b$8340$c1uhW g$b*$8341$c1uhW)))))))
                    g$ls/false$8333$c1uhW)
                  ((case-lambda
                     ((g$t$8342$c1uhW)
                      ((case-lambda
                         ((g$ls/false$8343$c1uhW)
                          (if (if g$ls/false$8343$c1uhW
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$8344$c1uhW g$val$8345$c1uhW)
                                       (g$id?$7704$c1uhW g$id$8344$c1uhW)))
                                    g$ls/false$8343$c1uhW))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$8346$c1uhW g$val$8347$c1uhW)
                                 (values
                                   g$id$8346$c1uhW
                                   (cons 'expr g$val$8347$c1uhW))))
                              g$ls/false$8343$c1uhW)
                            ((case-lambda
                               ((g$t$8348$c1uhW)
                                ((case-lambda
                                   ((g$ls/false$8349$c1uhW)
                                    (if (if g$ls/false$8349$c1uhW
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$8350$c1uhW)
                                                 (g$id?$7704$c1uhW
                                                   g$id$8350$c1uhW)))
                                              g$ls/false$8349$c1uhW))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$8351$c1uhW)
                                           (values
                                             g$id$8351$c1uhW
                                             (cons
                                               'expr
                                               (g$bless$7945$c1uhW '(void))))))
                                        g$ls/false$8349$c1uhW)
                                      (g$syntax-violation$8094$c1uhW
                                        '#f
                                        '"invalid syntax"
                                        g$t$8348$c1uhW))))
                                 (g$syntax-dispatch$7982$c1uhW
                                   g$t$8348$c1uhW
                                   '(_ any)))))
                             g$t$8342$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$8342$c1uhW
                         '(_ any any)))))
                   g$t$8332$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8332$c1uhW
               '(_ (any . any) any . each-any)))))
         g$x$8331$c1uhW))))
   (g$parse-define-syntax$7923$c1uhW
     g$parse-define-syntax$11426$c1uhW
     (case-lambda
       ((g$x$8352$c1uhW)
        ((case-lambda
           ((g$t$8353$c1uhW)
            ((case-lambda
               ((g$ls/false$8354$c1uhW)
                (if (if g$ls/false$8354$c1uhW
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8355$c1uhW g$val$8356$c1uhW)
                             (g$id?$7704$c1uhW g$id$8355$c1uhW)))
                          g$ls/false$8354$c1uhW))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8357$c1uhW g$val$8358$c1uhW)
                       (values g$id$8357$c1uhW g$val$8358$c1uhW)))
                    g$ls/false$8354$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8353$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8353$c1uhW '(_ any any)))))
         g$x$8352$c1uhW))))
   (g$scheme-stx-hashtable$7924$c1uhW
     g$scheme-stx-hashtable$11427$c1uhW
     (g$make-eq-hashtable$5538$c1uhW))
   (g$scheme-stx$7925$c1uhW
     g$scheme-stx$11428$c1uhW
     (case-lambda
       ((g$sym$8359$c1uhW)
        ((case-lambda
           ((g$t$8360$c1uhW)
            (if g$t$8360$c1uhW
              g$t$8360$c1uhW
              (begin
                '#f
                ((case-lambda
                   ((g$subst$8361$c1uhW)
                    ((case-lambda
                       ((g$stx$8362$c1uhW)
                        ((case-lambda
                           ((g$stx$8363$c1uhW)
                            (begin
                              (g$hashtable-set!$5542$c1uhW
                                g$scheme-stx-hashtable$7924$c1uhW
                                g$sym$8359$c1uhW
                                g$stx$8363$c1uhW)
                              g$stx$8363$c1uhW)))
                         ((case-lambda
                            ((g$t$8364$c1uhW)
                             (if g$t$8364$c1uhW
                               ((case-lambda
                                  ((g$x$8365$c1uhW)
                                   ((case-lambda
                                      ((g$name$8366$c1uhW g$label$8367$c1uhW)
                                       (g$add-subst$7694$c1uhW
                                         (g$make-rib$7653$c1uhW
                                           (list g$name$8366$c1uhW)
                                           (list g$top-mark*$7641$c1uhW)
                                           (list g$label$8367$c1uhW)
                                           '#f
                                           '#f)
                                         g$stx$8362$c1uhW)))
                                    (car g$x$8365$c1uhW)
                                    (cdr g$x$8365$c1uhW))))
                                g$t$8364$c1uhW)
                               g$stx$8362$c1uhW)))
                          (g$assq$5051$c1uhW
                            g$sym$8359$c1uhW
                            g$subst$8361$c1uhW)))))
                     (g$make-stx$7677$c1uhW
                       g$sym$8359$c1uhW
                       g$top-mark*$7641$c1uhW
                       '()
                       '()))))
                 (g$library-subst$7471$c1uhW
                   (g$find-library-by-name$7507$c1uhW
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5541$c1uhW
           g$scheme-stx-hashtable$7924$c1uhW
           g$sym$8359$c1uhW
           '#f)))))
   (g$lexical-var$7926$c1uhW g$lexical-var$11429$c1uhW car)
   (g$lexical-mutable?$7927$c1uhW g$lexical-mutable?$11430$c1uhW cdr)
   (g$set-lexical-mutable!$7928$c1uhW
     g$set-lexical-mutable!$11431$c1uhW
     set-cdr!)
   (g$add-lexical$7929$c1uhW
     g$add-lexical$11432$c1uhW
     (case-lambda
       ((g$lab$8368$c1uhW g$lex$8369$c1uhW g$r$8370$c1uhW)
        (cons
          (g$cons*$5065$c1uhW g$lab$8368$c1uhW 'lexical g$lex$8369$c1uhW '#f)
          g$r$8370$c1uhW))))
   (g$add-lexicals$7930$c1uhW
     g$add-lexicals$11433$c1uhW
     (case-lambda
       ((g$lab*$8371$c1uhW g$lex*$8372$c1uhW g$r$8373$c1uhW)
        (if (null? g$lab*$8371$c1uhW)
          g$r$8373$c1uhW
          (g$add-lexicals$7930$c1uhW
            (cdr g$lab*$8371$c1uhW)
            (cdr g$lex*$8372$c1uhW)
            (g$add-lexical$7929$c1uhW
              (car g$lab*$8371$c1uhW)
              (car g$lex*$8372$c1uhW)
              g$r$8373$c1uhW))))))
   (g$letrec-helper$7931$c1uhW
     g$letrec-helper$11434$c1uhW
     (case-lambda
       ((g$e$8374$c1uhW g$r$8375$c1uhW g$mr$8376$c1uhW g$build$8377$c1uhW)
        ((case-lambda
           ((g$t$8378$c1uhW)
            ((case-lambda
               ((g$ls/false$8379$c1uhW)
                (if g$ls/false$8379$c1uhW
                  (apply
                    (case-lambda
                      ((g$lhs*$8380$c1uhW
                         g$rhs*$8381$c1uhW
                         g$b$8382$c1uhW
                         g$b*$8383$c1uhW)
                       (if (not (g$valid-bound-ids?$7709$c1uhW
                                  g$lhs*$8380$c1uhW))
                         (g$invalid-fmls-error$7947$c1uhW
                           g$e$8374$c1uhW
                           g$lhs*$8380$c1uhW)
                         ((case-lambda
                            ((g$lex*$8384$c1uhW g$lab*$8385$c1uhW)
                             ((case-lambda
                                ((g$rib$8386$c1uhW g$r$8387$c1uhW)
                                 ((case-lambda
                                    ((g$body$8388$c1uhW g$rhs*$8389$c1uhW)
                                     (g$build$8377$c1uhW
                                       '#f
                                       g$lex*$8384$c1uhW
                                       g$rhs*$8389$c1uhW
                                       g$body$8388$c1uhW)))
                                  (g$chi-internal$8011$c1uhW
                                    (g$add-subst$7694$c1uhW
                                      g$rib$8386$c1uhW
                                      (cons g$b$8382$c1uhW g$b*$8383$c1uhW))
                                    g$r$8387$c1uhW
                                    g$mr$8376$c1uhW)
                                  (g$chi-expr*$7998$c1uhW
                                    (g$map$5063$c1uhW
                                      (case-lambda
                                        ((g$x$8390$c1uhW)
                                         (g$add-subst$7694$c1uhW
                                           g$rib$8386$c1uhW
                                           g$x$8390$c1uhW)))
                                      g$rhs*$8381$c1uhW)
                                    g$r$8387$c1uhW
                                    g$mr$8376$c1uhW))))
                              (g$make-full-rib$7672$c1uhW
                                g$lhs*$8380$c1uhW
                                g$lab*$8385$c1uhW)
                              (g$add-lexicals$7930$c1uhW
                                g$lab*$8385$c1uhW
                                g$lex*$8384$c1uhW
                                g$r$8375$c1uhW))))
                          (g$map$5063$c1uhW
                            g$gen-lexical$7643$c1uhW
                            g$lhs*$8380$c1uhW)
                          (g$map$5063$c1uhW
                            g$gen-label$7645$c1uhW
                            g$lhs*$8380$c1uhW)))))
                    g$ls/false$8379$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8378$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8378$c1uhW
               '(_ #(each (any any)) any . each-any)))))
         g$e$8374$c1uhW))))
   (g$letrec-transformer$7932$c1uhW
     g$letrec-transformer$11435$c1uhW
     (case-lambda
       ((g$e$8391$c1uhW g$r$8392$c1uhW g$mr$8393$c1uhW)
        (g$letrec-helper$7931$c1uhW
          g$e$8391$c1uhW
          g$r$8392$c1uhW
          g$mr$8393$c1uhW
          g$build-letrec$7635$c1uhW))))
   (g$letrec*-transformer$7933$c1uhW
     g$letrec*-transformer$11436$c1uhW
     (case-lambda
       ((g$e$8394$c1uhW g$r$8395$c1uhW g$mr$8396$c1uhW)
        (g$letrec-helper$7931$c1uhW
          g$e$8394$c1uhW
          g$r$8395$c1uhW
          g$mr$8396$c1uhW
          g$build-letrec*$7636$c1uhW))))
   (g$fluid-let-syntax-transformer$7934$c1uhW
     g$fluid-let-syntax-transformer$11437$c1uhW
     (case-lambda
       ((g$e$8397$c1uhW g$r$8398$c1uhW g$mr$8399$c1uhW)
        (letrec* ((g$lookup$8400$c1uhW
                    (case-lambda
                      ((g$x$8410$c1uhW)
                       ((case-lambda
                          ((g$t$8411$c1uhW)
                           (if g$t$8411$c1uhW
                             g$t$8411$c1uhW
                             (begin
                               '#f
                               (g$syntax-violation$8094$c1uhW
                                 '#f
                                 '"unbound identifier"
                                 g$e$8397$c1uhW
                                 g$x$8410$c1uhW)))))
                        (g$id->label$7717$c1uhW g$x$8410$c1uhW))))))
          ((case-lambda
             ((g$t$8401$c1uhW)
              ((case-lambda
                 ((g$ls/false$8402$c1uhW)
                  (if g$ls/false$8402$c1uhW
                    (apply
                      (case-lambda
                        ((g$lhs*$8403$c1uhW
                           g$rhs*$8404$c1uhW
                           g$b$8405$c1uhW
                           g$b*$8406$c1uhW)
                         (if (not (g$valid-bound-ids?$7709$c1uhW
                                    g$lhs*$8403$c1uhW))
                           (g$invalid-fmls-error$7947$c1uhW
                             g$e$8397$c1uhW
                             g$lhs*$8403$c1uhW)
                           ((case-lambda
                              ((g$lab*$8407$c1uhW g$rhs*$8408$c1uhW)
                               (g$chi-internal$8011$c1uhW
                                 (cons g$b$8405$c1uhW g$b*$8406$c1uhW)
                                 (append
                                   (g$map$5063$c1uhW
                                     cons
                                     g$lab*$8407$c1uhW
                                     g$rhs*$8408$c1uhW)
                                   g$r$8398$c1uhW)
                                 (append
                                   (g$map$5063$c1uhW
                                     cons
                                     g$lab*$8407$c1uhW
                                     g$rhs*$8408$c1uhW)
                                   g$mr$8399$c1uhW))))
                            (g$map$5063$c1uhW
                              g$lookup$8400$c1uhW
                              g$lhs*$8403$c1uhW)
                            (g$map$5063$c1uhW
                              (case-lambda
                                ((g$x$8409$c1uhW)
                                 (g$make-eval-transformer$7736$c1uhW
                                   (g$expand-transformer$8027$c1uhW
                                     g$x$8409$c1uhW
                                     g$mr$8399$c1uhW))))
                              g$rhs*$8404$c1uhW)))))
                      g$ls/false$8402$c1uhW)
                    (g$syntax-violation$8094$c1uhW
                      '#f
                      '"invalid syntax"
                      g$t$8401$c1uhW))))
               (g$syntax-dispatch$7982$c1uhW
                 g$t$8401$c1uhW
                 '(_ #(each (any any)) any . each-any)))))
           g$e$8397$c1uhW)))))
   (g$type-descriptor-transformer$7935$c1uhW
     g$type-descriptor-transformer$11438$c1uhW
     (case-lambda
       ((g$e$8412$c1uhW g$r$8413$c1uhW g$mr$8414$c1uhW)
        ((case-lambda
           ((g$t$8415$c1uhW)
            ((case-lambda
               ((g$ls/false$8416$c1uhW)
                (if (if g$ls/false$8416$c1uhW
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8417$c1uhW)
                             (g$id?$7704$c1uhW g$id$8417$c1uhW)))
                          g$ls/false$8416$c1uhW))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8418$c1uhW)
                       ((case-lambda
                          ((g$lab$8419$c1uhW)
                           ((case-lambda
                              ((g$b$8420$c1uhW)
                               ((case-lambda
                                  ((g$type$8421$c1uhW)
                                   (begin
                                     (if (not g$lab$8419$c1uhW)
                                       (g$raise-unbound-error$7723$c1uhW
                                         g$id$8418$c1uhW)
                                       (void))
                                     (if (not (if (eq? g$type$8421$c1uhW '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$7722$c1uhW
                                                           g$b$8420$c1uhW))))
                                                '#f))
                                       (g$syntax-violation$8094$c1uhW
                                         '#f
                                         '"not a record type"
                                         g$e$8412$c1uhW)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$7722$c1uhW
                                         g$b$8420$c1uhW)))))
                                (g$binding-type$7721$c1uhW g$b$8420$c1uhW))))
                            (g$label->binding$7719$c1uhW
                              g$lab$8419$c1uhW
                              g$r$8413$c1uhW))))
                        (g$id->label$7717$c1uhW g$id$8418$c1uhW))))
                    g$ls/false$8416$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8415$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8415$c1uhW '(_ any)))))
         g$e$8412$c1uhW))))
   (g$record-type-descriptor-transformer$7936$c1uhW
     g$record-type-descriptor-transformer$11439$c1uhW
     (case-lambda
       ((g$e$8422$c1uhW g$r$8423$c1uhW g$mr$8424$c1uhW)
        ((case-lambda
           ((g$t$8425$c1uhW)
            ((case-lambda
               ((g$ls/false$8426$c1uhW)
                (if (if g$ls/false$8426$c1uhW
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8427$c1uhW)
                             (g$id?$7704$c1uhW g$id$8427$c1uhW)))
                          g$ls/false$8426$c1uhW))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8428$c1uhW)
                       ((case-lambda
                          ((g$lab$8429$c1uhW)
                           ((case-lambda
                              ((g$b$8430$c1uhW)
                               ((case-lambda
                                  ((g$type$8431$c1uhW)
                                   (begin
                                     (if (not g$lab$8429$c1uhW)
                                       (g$raise-unbound-error$7723$c1uhW
                                         g$id$8428$c1uhW)
                                       (void))
                                     (if (not (if (eq? g$type$8431$c1uhW '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7722$c1uhW
                                                      g$b$8430$c1uhW)))
                                                '#f))
                                       (g$syntax-violation$8094$c1uhW
                                         '#f
                                         '"not a record type"
                                         g$e$8422$c1uhW)
                                       (void))
                                     (g$chi-expr$8000$c1uhW
                                       (car (g$binding-value$7722$c1uhW
                                              g$b$8430$c1uhW))
                                       g$r$8423$c1uhW
                                       g$mr$8424$c1uhW))))
                                (g$binding-type$7721$c1uhW g$b$8430$c1uhW))))
                            (g$label->binding$7719$c1uhW
                              g$lab$8429$c1uhW
                              g$r$8423$c1uhW))))
                        (g$id->label$7717$c1uhW g$id$8428$c1uhW))))
                    g$ls/false$8426$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8425$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8425$c1uhW '(_ any)))))
         g$e$8422$c1uhW))))
   (g$record-constructor-descriptor-transformer$7937$c1uhW
     g$record-constructor-descriptor-transformer$11440$c1uhW
     (case-lambda
       ((g$e$8432$c1uhW g$r$8433$c1uhW g$mr$8434$c1uhW)
        ((case-lambda
           ((g$t$8435$c1uhW)
            ((case-lambda
               ((g$ls/false$8436$c1uhW)
                (if (if g$ls/false$8436$c1uhW
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8437$c1uhW)
                             (g$id?$7704$c1uhW g$id$8437$c1uhW)))
                          g$ls/false$8436$c1uhW))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8438$c1uhW)
                       ((case-lambda
                          ((g$lab$8439$c1uhW)
                           ((case-lambda
                              ((g$b$8440$c1uhW)
                               ((case-lambda
                                  ((g$type$8441$c1uhW)
                                   (begin
                                     (if (not g$lab$8439$c1uhW)
                                       (g$raise-unbound-error$7723$c1uhW
                                         g$id$8438$c1uhW)
                                       (void))
                                     (if (not (if (eq? g$type$8441$c1uhW '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7722$c1uhW
                                                      g$b$8440$c1uhW)))
                                                '#f))
                                       (g$syntax-violation$8094$c1uhW
                                         '#f
                                         '"invalid type"
                                         g$e$8432$c1uhW)
                                       (void))
                                     (g$chi-expr$8000$c1uhW
                                       (g$cadr$5264$c1uhW
                                         (g$binding-value$7722$c1uhW
                                           g$b$8440$c1uhW))
                                       g$r$8433$c1uhW
                                       g$mr$8434$c1uhW))))
                                (g$binding-type$7721$c1uhW g$b$8440$c1uhW))))
                            (g$label->binding$7719$c1uhW
                              g$lab$8439$c1uhW
                              g$r$8433$c1uhW))))
                        (g$id->label$7717$c1uhW g$id$8438$c1uhW))))
                    g$ls/false$8436$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8435$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8435$c1uhW '(_ any)))))
         g$e$8432$c1uhW))))
   (g$when-macro$7938$c1uhW
     g$when-macro$11441$c1uhW
     (case-lambda
       ((g$e$8442$c1uhW)
        ((case-lambda
           ((g$t$8443$c1uhW)
            ((case-lambda
               ((g$ls/false$8444$c1uhW)
                (if g$ls/false$8444$c1uhW
                  (apply
                    (case-lambda
                      ((g$test$8445$c1uhW g$e$8446$c1uhW g$e*$8447$c1uhW)
                       (g$bless$7945$c1uhW
                         (list
                           'if
                           g$test$8445$c1uhW
                           (cons
                             'begin
                             (cons g$e$8446$c1uhW g$e*$8447$c1uhW))))))
                    g$ls/false$8444$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8443$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8443$c1uhW
               '(_ any any . each-any)))))
         g$e$8442$c1uhW))))
   (g$unless-macro$7939$c1uhW
     g$unless-macro$11442$c1uhW
     (case-lambda
       ((g$e$8448$c1uhW)
        ((case-lambda
           ((g$t$8449$c1uhW)
            ((case-lambda
               ((g$ls/false$8450$c1uhW)
                (if g$ls/false$8450$c1uhW
                  (apply
                    (case-lambda
                      ((g$test$8451$c1uhW g$e$8452$c1uhW g$e*$8453$c1uhW)
                       (g$bless$7945$c1uhW
                         (list
                           'if
                           (list 'not g$test$8451$c1uhW)
                           (cons
                             'begin
                             (cons g$e$8452$c1uhW g$e*$8453$c1uhW))))))
                    g$ls/false$8450$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8449$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8449$c1uhW
               '(_ any any . each-any)))))
         g$e$8448$c1uhW))))
   (g$if-transformer$7940$c1uhW
     g$if-transformer$11443$c1uhW
     (case-lambda
       ((g$e$8454$c1uhW g$r$8455$c1uhW g$mr$8456$c1uhW)
        ((case-lambda
           ((g$t$8457$c1uhW)
            ((case-lambda
               ((g$ls/false$8458$c1uhW)
                (if g$ls/false$8458$c1uhW
                  (apply
                    (case-lambda
                      ((g$e0$8459$c1uhW g$e1$8460$c1uhW g$e2$8461$c1uhW)
                       (list
                         'if
                         (g$chi-expr$8000$c1uhW
                           g$e0$8459$c1uhW
                           g$r$8455$c1uhW
                           g$mr$8456$c1uhW)
                         (g$chi-expr$8000$c1uhW
                           g$e1$8460$c1uhW
                           g$r$8455$c1uhW
                           g$mr$8456$c1uhW)
                         (g$chi-expr$8000$c1uhW
                           g$e2$8461$c1uhW
                           g$r$8455$c1uhW
                           g$mr$8456$c1uhW))))
                    g$ls/false$8458$c1uhW)
                  ((case-lambda
                     ((g$t$8462$c1uhW)
                      ((case-lambda
                         ((g$ls/false$8463$c1uhW)
                          (if g$ls/false$8463$c1uhW
                            (apply
                              (case-lambda
                                ((g$e0$8464$c1uhW g$e1$8465$c1uhW)
                                 (list
                                   'if
                                   (g$chi-expr$8000$c1uhW
                                     g$e0$8464$c1uhW
                                     g$r$8455$c1uhW
                                     g$mr$8456$c1uhW)
                                   (g$chi-expr$8000$c1uhW
                                     g$e1$8465$c1uhW
                                     g$r$8455$c1uhW
                                     g$mr$8456$c1uhW)
                                   (g$build-void$7634$c1uhW))))
                              g$ls/false$8463$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"invalid syntax"
                              g$t$8462$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$8462$c1uhW
                         '(_ any any)))))
                   g$t$8457$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8457$c1uhW '(_ any any any)))))
         g$e$8454$c1uhW))))
   (g$case-macro$7941$c1uhW
     g$case-macro$11444$c1uhW
     (case-lambda
       ((g$e$8466$c1uhW)
        (letrec* ((g$build-last$8467$c1uhW
                    (case-lambda
                      ((g$cls$8487$c1uhW)
                       ((case-lambda
                          ((g$t$8488$c1uhW)
                           ((case-lambda
                              ((g$ls/false$8489$c1uhW)
                               (if g$ls/false$8489$c1uhW
                                 (apply
                                   (case-lambda
                                     ((g$e$8490$c1uhW g$e*$8491$c1uhW)
                                      (cons
                                        'begin
                                        (cons g$e$8490$c1uhW g$e*$8491$c1uhW))))
                                   g$ls/false$8489$c1uhW)
                                 ((case-lambda
                                    ((g$t$8492$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$8493$c1uhW)
                                         (if g$ls/false$8493$c1uhW
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8468$c1uhW
                                                  g$cls$8487$c1uhW
                                                  '(if #f #f))))
                                             g$ls/false$8493$c1uhW)
                                           (g$syntax-violation$8094$c1uhW
                                             '#f
                                             '"invalid syntax"
                                             g$t$8492$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$8492$c1uhW
                                        '_))))
                                  g$t$8488$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW
                              g$t$8488$c1uhW
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8487$c1uhW))))
                  (g$build-one$8468$c1uhW
                    (case-lambda
                      ((g$cls$8480$c1uhW g$k$8481$c1uhW)
                       ((case-lambda
                          ((g$t$8482$c1uhW)
                           ((case-lambda
                              ((g$ls/false$8483$c1uhW)
                               (if g$ls/false$8483$c1uhW
                                 (apply
                                   (case-lambda
                                     ((g$d*$8484$c1uhW
                                        g$e$8485$c1uhW
                                        g$e*$8486$c1uhW)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8484$c1uhW))
                                        (cons
                                          'begin
                                          (cons g$e$8485$c1uhW g$e*$8486$c1uhW))
                                        g$k$8481$c1uhW)))
                                   g$ls/false$8483$c1uhW)
                                 (g$syntax-violation$8094$c1uhW
                                   '#f
                                   '"invalid syntax"
                                   g$t$8482$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW
                              g$t$8482$c1uhW
                              '(each-any any . each-any)))))
                        g$cls$8480$c1uhW)))))
          ((case-lambda
             ((g$t$8469$c1uhW)
              ((case-lambda
                 ((g$ls/false$8470$c1uhW)
                  (if g$ls/false$8470$c1uhW
                    (apply
                      (case-lambda
                        ((g$expr$8471$c1uhW)
                         (g$bless$7945$c1uhW
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8471$c1uhW))
                               '((if #f #f)))))))
                      g$ls/false$8470$c1uhW)
                    ((case-lambda
                       ((g$t$8472$c1uhW)
                        ((case-lambda
                           ((g$ls/false$8473$c1uhW)
                            (if g$ls/false$8473$c1uhW
                              (apply
                                (case-lambda
                                  ((g$expr$8474$c1uhW
                                     g$cls$8475$c1uhW
                                     g$cls*$8476$c1uhW)
                                   (g$bless$7945$c1uhW
                                     (list
                                       'let
                                       (list (list 't g$expr$8474$c1uhW))
                                       ((letrec ((g$f$8477$c1uhW
                                                   (case-lambda
                                                     ((g$cls$8478$c1uhW
                                                        g$cls*$8479$c1uhW)
                                                      (if (null?
                                                            g$cls*$8479$c1uhW)
                                                        (g$build-last$8467$c1uhW
                                                          g$cls$8478$c1uhW)
                                                        (g$build-one$8468$c1uhW
                                                          g$cls$8478$c1uhW
                                                          (g$f$8477$c1uhW
                                                            (car g$cls*$8479$c1uhW)
                                                            (cdr g$cls*$8479$c1uhW))))))))
                                          g$f$8477$c1uhW)
                                        g$cls$8475$c1uhW
                                        g$cls*$8476$c1uhW)))))
                                g$ls/false$8473$c1uhW)
                              (g$syntax-violation$8094$c1uhW
                                '#f
                                '"invalid syntax"
                                g$t$8472$c1uhW))))
                         (g$syntax-dispatch$7982$c1uhW
                           g$t$8472$c1uhW
                           '(_ any any . each-any)))))
                     g$t$8469$c1uhW))))
               (g$syntax-dispatch$7982$c1uhW g$t$8469$c1uhW '(_ any)))))
           g$e$8466$c1uhW)))))
   (g$quote-transformer$7942$c1uhW
     g$quote-transformer$11445$c1uhW
     (case-lambda
       ((g$e$8494$c1uhW g$r$8495$c1uhW g$mr$8496$c1uhW)
        ((case-lambda
           ((g$t$8497$c1uhW)
            ((case-lambda
               ((g$ls/false$8498$c1uhW)
                (if g$ls/false$8498$c1uhW
                  (apply
                    (case-lambda
                      ((g$datum$8499$c1uhW)
                       (list
                         'quote
                         (g$stx->datum$7715$c1uhW g$datum$8499$c1uhW))))
                    g$ls/false$8498$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8497$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8497$c1uhW '(_ any)))))
         g$e$8494$c1uhW))))
   (g$case-lambda-transformer$7943$c1uhW
     g$case-lambda-transformer$11446$c1uhW
     (case-lambda
       ((g$e$8500$c1uhW g$r$8501$c1uhW g$mr$8502$c1uhW)
        ((case-lambda
           ((g$t$8503$c1uhW)
            ((case-lambda
               ((g$ls/false$8504$c1uhW)
                (if g$ls/false$8504$c1uhW
                  (apply
                    (case-lambda
                      ((g$fmls*$8505$c1uhW g$b*$8506$c1uhW g$b**$8507$c1uhW)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$8004$c1uhW
                              g$e$8500$c1uhW
                              g$fmls*$8505$c1uhW
                              (g$map$5063$c1uhW
                                cons
                                g$b*$8506$c1uhW
                                g$b**$8507$c1uhW)
                              g$r$8501$c1uhW
                              g$mr$8502$c1uhW)))
                         (case-lambda
                           ((g$fmls*$8510$c1uhW g$body*$8511$c1uhW)
                            ((case-lambda
                               ((g$body*$8512$c1uhW g$fmls*$8513$c1uhW)
                                (g$build-case-lambda$7631$c1uhW
                                  '#f
                                  g$fmls*$8513$c1uhW
                                  g$body*$8512$c1uhW)))
                             g$body*$8511$c1uhW
                             g$fmls*$8510$c1uhW))))))
                    g$ls/false$8504$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8503$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8503$c1uhW
               '(_ . #(each (any any . each-any)))))))
         g$e$8500$c1uhW))))
   (g$lambda-transformer$7944$c1uhW
     g$lambda-transformer$11447$c1uhW
     (case-lambda
       ((g$e$8514$c1uhW g$r$8515$c1uhW g$mr$8516$c1uhW)
        ((case-lambda
           ((g$t$8517$c1uhW)
            ((case-lambda
               ((g$ls/false$8518$c1uhW)
                (if g$ls/false$8518$c1uhW
                  (apply
                    (case-lambda
                      ((g$fmls$8519$c1uhW g$b$8520$c1uhW g$b*$8521$c1uhW)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$8003$c1uhW
                              g$e$8514$c1uhW
                              g$fmls$8519$c1uhW
                              (cons g$b$8520$c1uhW g$b*$8521$c1uhW)
                              g$r$8515$c1uhW
                              g$mr$8516$c1uhW)))
                         (case-lambda
                           ((g$fmls$8524$c1uhW g$body$8525$c1uhW)
                            ((case-lambda
                               ((g$body$8526$c1uhW g$fmls$8527$c1uhW)
                                (g$build-lambda$7630$c1uhW
                                  '#f
                                  g$fmls$8527$c1uhW
                                  g$body$8526$c1uhW)))
                             g$body$8525$c1uhW
                             g$fmls$8524$c1uhW))))))
                    g$ls/false$8518$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8517$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8517$c1uhW
               '(_ any any . each-any)))))
         g$e$8514$c1uhW))))
   (g$bless$7945$c1uhW
     g$bless$11448$c1uhW
     (case-lambda
       ((g$x$8528$c1uhW)
        (g$mkstx$7692$c1uhW
          ((letrec ((g$f$8529$c1uhW
                      (case-lambda
                        ((g$x$8530$c1uhW)
                         (if (g$stx?$7676$c1uhW g$x$8530$c1uhW)
                           g$x$8530$c1uhW
                           (if (pair? g$x$8530$c1uhW)
                             (cons
                               (g$f$8529$c1uhW (car g$x$8530$c1uhW))
                               (g$f$8529$c1uhW (cdr g$x$8530$c1uhW)))
                             (if (symbol? g$x$8530$c1uhW)
                               (g$scheme-stx$7925$c1uhW g$x$8530$c1uhW)
                               (if (vector? g$x$8530$c1uhW)
                                 (vector-map g$f$8529$c1uhW g$x$8530$c1uhW)
                                 g$x$8530$c1uhW))))))))
             g$f$8529$c1uhW)
           g$x$8528$c1uhW)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7946$c1uhW
     g$with-syntax-macro$11449$c1uhW
     (case-lambda
       ((g$e$8531$c1uhW)
        ((case-lambda
           ((g$t$8532$c1uhW)
            ((case-lambda
               ((g$ls/false$8533$c1uhW)
                (if g$ls/false$8533$c1uhW
                  (apply
                    (case-lambda
                      ((g$pat*$8534$c1uhW
                         g$expr*$8535$c1uhW
                         g$b$8536$c1uhW
                         g$b*$8537$c1uhW)
                       ((case-lambda
                          ((g$idn*$8538$c1uhW)
                           (begin
                             (g$verify-formals$8002$c1uhW
                               (g$map$5063$c1uhW car g$idn*$8538$c1uhW)
                               g$e$8531$c1uhW)
                             ((case-lambda
                                ((g$t*$8539$c1uhW)
                                 (g$bless$7945$c1uhW
                                   (list
                                     'let
                                     (g$map$5063$c1uhW
                                       list
                                       g$t*$8539$c1uhW
                                       g$expr*$8535$c1uhW)
                                     ((letrec ((g$f$8540$c1uhW
                                                 (case-lambda
                                                   ((g$pat*$8541$c1uhW
                                                      g$t*$8542$c1uhW)
                                                    (if (null?
                                                          g$pat*$8541$c1uhW)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8536$c1uhW
                                                            g$b*$8537$c1uhW)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8542$c1uhW)
                                                        '()
                                                        (list
                                                          (car g$pat*$8541$c1uhW)
                                                          (g$f$8540$c1uhW
                                                            (cdr g$pat*$8541$c1uhW)
                                                            (cdr g$t*$8542$c1uhW)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8541$c1uhW))
                                                            (car g$t*$8542$c1uhW)))))))))
                                        g$f$8540$c1uhW)
                                      g$pat*$8534$c1uhW
                                      g$t*$8539$c1uhW)))))
                              (g$generate-temporaries$8084$c1uhW
                                g$expr*$8535$c1uhW)))))
                        ((letrec ((g$f$8543$c1uhW
                                    (case-lambda
                                      ((g$pat*$8544$c1uhW)
                                       (if (null? g$pat*$8544$c1uhW)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7981$c1uhW
                                                (car g$pat*$8544$c1uhW)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8547$c1uhW
                                                g$idn*$8548$c1uhW)
                                              ((case-lambda
                                                 ((g$idn*$8549$c1uhW
                                                    g$pat$8550$c1uhW)
                                                  (append
                                                    g$idn*$8549$c1uhW
                                                    (g$f$8543$c1uhW
                                                      (cdr g$pat*$8544$c1uhW)))))
                                               g$idn*$8548$c1uhW
                                               g$pat$8547$c1uhW)))))))))
                           g$f$8543$c1uhW)
                         g$pat*$8534$c1uhW))))
                    g$ls/false$8533$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8532$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8532$c1uhW
               '(_ #(each (any any)) any . each-any)))))
         g$e$8531$c1uhW))))
   (g$invalid-fmls-error$7947$c1uhW
     g$invalid-fmls-error$11450$c1uhW
     (case-lambda
       ((g$stx$8551$c1uhW g$fmls$8552$c1uhW)
        ((case-lambda
           ((g$t$8553$c1uhW)
            ((case-lambda
               ((g$ls/false$8554$c1uhW)
                (if g$ls/false$8554$c1uhW
                  (apply
                    (case-lambda
                      ((g$id*$8555$c1uhW g$last$8556$c1uhW)
                       ((letrec ((g$f$8557$c1uhW
                                   (case-lambda
                                     ((g$id*$8558$c1uhW)
                                      (if (null? g$id*$8558$c1uhW)
                                        (values)
                                        (if (not (g$id?$7704$c1uhW
                                                   (car g$id*$8558$c1uhW)))
                                          (g$syntax-violation$8094$c1uhW
                                            '#f
                                            '"not an identifier"
                                            g$stx$8551$c1uhW
                                            (car g$id*$8558$c1uhW))
                                          (begin
                                            (g$f$8557$c1uhW
                                              (cdr g$id*$8558$c1uhW))
                                            (if (g$bound-id-member?$7711$c1uhW
                                                  (car g$id*$8558$c1uhW)
                                                  (cdr g$id*$8558$c1uhW))
                                              (g$syntax-violation$8094$c1uhW
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8551$c1uhW
                                                (car g$id*$8558$c1uhW))
                                              (void)))))))))
                          g$f$8557$c1uhW)
                        (if (g$id?$7704$c1uhW g$last$8556$c1uhW)
                          (cons g$last$8556$c1uhW g$id*$8555$c1uhW)
                          (if (g$syntax-null?$7699$c1uhW g$last$8556$c1uhW)
                            g$id*$8555$c1uhW
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"not an identifier"
                              g$stx$8551$c1uhW
                              g$last$8556$c1uhW))))))
                    g$ls/false$8554$c1uhW)
                  ((case-lambda
                     ((g$t$8559$c1uhW)
                      ((case-lambda
                         ((g$ls/false$8560$c1uhW)
                          (if g$ls/false$8560$c1uhW
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8094$c1uhW
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8551$c1uhW
                                   g$fmls$8552$c1uhW)))
                              g$ls/false$8560$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"invalid syntax"
                              g$t$8559$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW g$t$8559$c1uhW '_))))
                   g$t$8553$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8553$c1uhW
               '#(each+ any () any)))))
         g$fmls$8552$c1uhW))))
   (g$let-macro$7948$c1uhW
     g$let-macro$11451$c1uhW
     (case-lambda
       ((g$stx$8561$c1uhW)
        ((case-lambda
           ((g$t$8562$c1uhW)
            ((case-lambda
               ((g$ls/false$8563$c1uhW)
                (if g$ls/false$8563$c1uhW
                  (apply
                    (case-lambda
                      ((g$lhs*$8564$c1uhW
                         g$rhs*$8565$c1uhW
                         g$b$8566$c1uhW
                         g$b*$8567$c1uhW)
                       (if (g$valid-bound-ids?$7709$c1uhW g$lhs*$8564$c1uhW)
                         (g$bless$7945$c1uhW
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8564$c1uhW
                                 (cons g$b$8566$c1uhW g$b*$8567$c1uhW)))
                             g$rhs*$8565$c1uhW))
                         (g$invalid-fmls-error$7947$c1uhW
                           g$stx$8561$c1uhW
                           g$lhs*$8564$c1uhW))))
                    g$ls/false$8563$c1uhW)
                  ((case-lambda
                     ((g$t$8568$c1uhW)
                      ((case-lambda
                         ((g$ls/false$8569$c1uhW)
                          (if (if g$ls/false$8569$c1uhW
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8570$c1uhW
                                         g$lhs*$8571$c1uhW
                                         g$rhs*$8572$c1uhW
                                         g$b$8573$c1uhW
                                         g$b*$8574$c1uhW)
                                       (g$id?$7704$c1uhW g$f$8570$c1uhW)))
                                    g$ls/false$8569$c1uhW))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8575$c1uhW
                                   g$lhs*$8576$c1uhW
                                   g$rhs*$8577$c1uhW
                                   g$b$8578$c1uhW
                                   g$b*$8579$c1uhW)
                                 (if (g$valid-bound-ids?$7709$c1uhW
                                       g$lhs*$8576$c1uhW)
                                   (g$bless$7945$c1uhW
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8575$c1uhW
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8576$c1uhW
                                                 (cons
                                                   g$b$8578$c1uhW
                                                   g$b*$8579$c1uhW)))))
                                         g$f$8575$c1uhW)
                                       g$rhs*$8577$c1uhW))
                                   (g$invalid-fmls-error$7947$c1uhW
                                     g$stx$8561$c1uhW
                                     g$lhs*$8576$c1uhW))))
                              g$ls/false$8569$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"invalid syntax"
                              g$t$8568$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$8568$c1uhW
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8562$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8562$c1uhW
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8561$c1uhW))))
   (g$let-values-macro$7949$c1uhW
     g$let-values-macro$11452$c1uhW
     (case-lambda
       ((g$stx$8580$c1uhW)
        (letrec* ((g$rename$8581$c1uhW
                    (case-lambda
                      ((g$x$8632$c1uhW g$old*$8633$c1uhW g$new*$8634$c1uhW)
                       (begin
                         (if (not (g$id?$7704$c1uhW g$x$8632$c1uhW))
                           (g$syntax-violation$8094$c1uhW
                             '#f
                             '"not an indentifier"
                             g$stx$8580$c1uhW
                             g$x$8632$c1uhW)
                           (void))
                         (if (g$bound-id-member?$7711$c1uhW
                               g$x$8632$c1uhW
                               g$old*$8633$c1uhW)
                           (g$syntax-violation$8094$c1uhW
                             '#f
                             '"duplicate binding"
                             g$stx$8580$c1uhW
                             g$x$8632$c1uhW)
                           (void))
                         ((case-lambda
                            ((g$y$8635$c1uhW)
                             (values
                               g$y$8635$c1uhW
                               (cons g$x$8632$c1uhW g$old*$8633$c1uhW)
                               (cons g$y$8635$c1uhW g$new*$8634$c1uhW))))
                          (gensym
                            (g$syntax->datum$8097$c1uhW g$x$8632$c1uhW)))))))
                  (g$rename*$8582$c1uhW
                    (case-lambda
                      ((g$x*$8623$c1uhW g$old*$8624$c1uhW g$new*$8625$c1uhW)
                       (if (null? g$x*$8623$c1uhW)
                         (values '() g$old*$8624$c1uhW g$new*$8625$c1uhW)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8581$c1uhW
                                (car g$x*$8623$c1uhW)
                                g$old*$8624$c1uhW
                                g$new*$8625$c1uhW)))
                           (case-lambda
                             ((g$x$8626$c1uhW
                                g$old*$8627$c1uhW
                                g$new*$8628$c1uhW)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8582$c1uhW
                                     (cdr g$x*$8623$c1uhW)
                                     g$old*$8627$c1uhW
                                     g$new*$8628$c1uhW)))
                                (case-lambda
                                  ((g$x*$8629$c1uhW
                                     g$old*$8630$c1uhW
                                     g$new*$8631$c1uhW)
                                   (values
                                     (cons g$x$8626$c1uhW g$x*$8629$c1uhW)
                                     g$old*$8630$c1uhW
                                     g$new*$8631$c1uhW))))))))))))
          ((case-lambda
             ((g$t$8583$c1uhW)
              ((case-lambda
                 ((g$ls/false$8584$c1uhW)
                  (if g$ls/false$8584$c1uhW
                    (apply
                      (case-lambda
                        ((g$b$8585$c1uhW g$b*$8586$c1uhW)
                         (g$cons*$5065$c1uhW
                           (g$bless$7945$c1uhW 'let)
                           '()
                           g$b$8585$c1uhW
                           g$b*$8586$c1uhW)))
                      g$ls/false$8584$c1uhW)
                    ((case-lambda
                       ((g$t$8587$c1uhW)
                        ((case-lambda
                           ((g$ls/false$8588$c1uhW)
                            (if g$ls/false$8588$c1uhW
                              (apply
                                (case-lambda
                                  ((g$lhs*$8589$c1uhW
                                     g$rhs*$8590$c1uhW
                                     g$b$8591$c1uhW
                                     g$b*$8592$c1uhW)
                                   (g$bless$7945$c1uhW
                                     ((letrec ((g$f$8593$c1uhW
                                                 (case-lambda
                                                   ((g$lhs*$8594$c1uhW
                                                      g$rhs*$8595$c1uhW
                                                      g$old*$8596$c1uhW
                                                      g$new*$8597$c1uhW)
                                                    (if (null?
                                                          g$lhs*$8594$c1uhW)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$5063$c1uhW
                                                            list
                                                            g$old*$8596$c1uhW
                                                            g$new*$8597$c1uhW)
                                                          (cons
                                                            g$b$8591$c1uhW
                                                            g$b*$8592$c1uhW)))
                                                      ((case-lambda
                                                         ((g$t$8598$c1uhW)
                                                          ((case-lambda
                                                             ((g$ls/false$8599$c1uhW)
                                                              (if g$ls/false$8599$c1uhW
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8600$c1uhW)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8582$c1uhW
                                                                            g$x*$8600$c1uhW
                                                                            g$old*$8596$c1uhW
                                                                            g$new*$8597$c1uhW)))
                                                                       (case-lambda
                                                                         ((g$y*$8604$c1uhW
                                                                            g$old*$8605$c1uhW
                                                                            g$new*$8606$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$new*$8607$c1uhW
                                                                                g$old*$8608$c1uhW
                                                                                g$y*$8609$c1uhW)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8595$c1uhW))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8609$c1uhW
                                                                                  (g$f$8593$c1uhW
                                                                                    (cdr g$lhs*$8594$c1uhW)
                                                                                    (cdr g$rhs*$8595$c1uhW)
                                                                                    g$old*$8608$c1uhW
                                                                                    g$new*$8607$c1uhW)))))
                                                                           g$new*$8606$c1uhW
                                                                           g$old*$8605$c1uhW
                                                                           g$y*$8604$c1uhW))))))
                                                                  g$ls/false$8599$c1uhW)
                                                                ((case-lambda
                                                                   ((g$t$8610$c1uhW)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8611$c1uhW)
                                                                        (if g$ls/false$8611$c1uhW
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8612$c1uhW
                                                                                 g$x$8613$c1uhW)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8581$c1uhW
                                                                                      g$x$8613$c1uhW
                                                                                      g$old*$8596$c1uhW
                                                                                      g$new*$8597$c1uhW)))
                                                                                 (case-lambda
                                                                                   ((g$y$8614$c1uhW
                                                                                      g$old*$8615$c1uhW
                                                                                      g$new*$8616$c1uhW)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8582$c1uhW
                                                                                           g$x*$8612$c1uhW
                                                                                           g$old*$8615$c1uhW
                                                                                           g$new*$8616$c1uhW)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8617$c1uhW
                                                                                           g$old*$8618$c1uhW
                                                                                           g$new*$8619$c1uhW)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8595$c1uhW))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8617$c1uhW
                                                                                               g$y$8614$c1uhW)
                                                                                             (g$f$8593$c1uhW
                                                                                               (cdr g$lhs*$8594$c1uhW)
                                                                                               (cdr g$rhs*$8595$c1uhW)
                                                                                               g$old*$8618$c1uhW
                                                                                               g$new*$8619$c1uhW)))))))))))
                                                                            g$ls/false$8611$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$t$8620$c1uhW)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8621$c1uhW)
                                                                                  (if g$ls/false$8621$c1uhW
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8622$c1uhW)
                                                                                         (g$syntax-violation$8094$c1uhW
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8580$c1uhW
                                                                                           g$others$8622$c1uhW)))
                                                                                      g$ls/false$8621$c1uhW)
                                                                                    (g$syntax-violation$8094$c1uhW
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8620$c1uhW))))
                                                                               (g$syntax-dispatch$7982$c1uhW
                                                                                 g$t$8620$c1uhW
                                                                                 'any))))
                                                                           g$t$8610$c1uhW))))
                                                                     (g$syntax-dispatch$7982$c1uhW
                                                                       g$t$8610$c1uhW
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8598$c1uhW))))
                                                           (g$syntax-dispatch$7982$c1uhW
                                                             g$t$8598$c1uhW
                                                             'each-any))))
                                                       (car g$lhs*$8594$c1uhW)))))))
                                        g$f$8593$c1uhW)
                                      g$lhs*$8589$c1uhW
                                      g$rhs*$8590$c1uhW
                                      '()
                                      '()))))
                                g$ls/false$8588$c1uhW)
                              (g$syntax-violation$8094$c1uhW
                                '#f
                                '"invalid syntax"
                                g$t$8587$c1uhW))))
                         (g$syntax-dispatch$7982$c1uhW
                           g$t$8587$c1uhW
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8583$c1uhW))))
               (g$syntax-dispatch$7982$c1uhW
                 g$t$8583$c1uhW
                 '(_ () any . each-any)))))
           g$stx$8580$c1uhW)))))
   (g$let*-values-macro$7950$c1uhW
     g$let*-values-macro$11453$c1uhW
     (case-lambda
       ((g$stx$8636$c1uhW)
        (letrec* ((g$check$8637$c1uhW
                    (case-lambda
                      ((g$x*$8661$c1uhW)
                       (if (not (null? g$x*$8661$c1uhW))
                         ((case-lambda
                            ((g$x$8662$c1uhW)
                             (begin
                               (if (not (g$id?$7704$c1uhW g$x$8662$c1uhW))
                                 (g$syntax-violation$8094$c1uhW
                                   '#f
                                   '"not an identifier"
                                   g$stx$8636$c1uhW
                                   g$x$8662$c1uhW)
                                 (void))
                               (g$check$8637$c1uhW (cdr g$x*$8661$c1uhW))
                               (if (g$bound-id-member?$7711$c1uhW
                                     g$x$8662$c1uhW
                                     (cdr g$x*$8661$c1uhW))
                                 (g$syntax-violation$8094$c1uhW
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8636$c1uhW
                                   g$x$8662$c1uhW)
                                 (void)))))
                          (car g$x*$8661$c1uhW))
                         (void))))))
          ((case-lambda
             ((g$t$8638$c1uhW)
              ((case-lambda
                 ((g$ls/false$8639$c1uhW)
                  (if g$ls/false$8639$c1uhW
                    (apply
                      (case-lambda
                        ((g$b$8640$c1uhW g$b*$8641$c1uhW)
                         (g$cons*$5065$c1uhW
                           (g$bless$7945$c1uhW 'let)
                           '()
                           g$b$8640$c1uhW
                           g$b*$8641$c1uhW)))
                      g$ls/false$8639$c1uhW)
                    ((case-lambda
                       ((g$t$8642$c1uhW)
                        ((case-lambda
                           ((g$ls/false$8643$c1uhW)
                            (if g$ls/false$8643$c1uhW
                              (apply
                                (case-lambda
                                  ((g$lhs*$8644$c1uhW
                                     g$rhs*$8645$c1uhW
                                     g$b$8646$c1uhW
                                     g$b*$8647$c1uhW)
                                   (g$bless$7945$c1uhW
                                     ((letrec ((g$f$8648$c1uhW
                                                 (case-lambda
                                                   ((g$lhs*$8649$c1uhW
                                                      g$rhs*$8650$c1uhW)
                                                    (if (null?
                                                          g$lhs*$8649$c1uhW)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8646$c1uhW
                                                          g$b*$8647$c1uhW))
                                                      ((case-lambda
                                                         ((g$t$8651$c1uhW)
                                                          ((case-lambda
                                                             ((g$ls/false$8652$c1uhW)
                                                              (if g$ls/false$8652$c1uhW
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8653$c1uhW)
                                                                     (begin
                                                                       (g$check$8637$c1uhW
                                                                         g$x*$8653$c1uhW)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8650$c1uhW))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8653$c1uhW
                                                                           (g$f$8648$c1uhW
                                                                             (cdr g$lhs*$8649$c1uhW)
                                                                             (cdr g$rhs*$8650$c1uhW)))))))
                                                                  g$ls/false$8652$c1uhW)
                                                                ((case-lambda
                                                                   ((g$t$8654$c1uhW)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8655$c1uhW)
                                                                        (if g$ls/false$8655$c1uhW
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8656$c1uhW
                                                                                 g$x$8657$c1uhW)
                                                                               (begin
                                                                                 (g$check$8637$c1uhW
                                                                                   (cons
                                                                                     g$x$8657$c1uhW
                                                                                     g$x*$8656$c1uhW))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8650$c1uhW))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8656$c1uhW
                                                                                       g$x$8657$c1uhW)
                                                                                     (g$f$8648$c1uhW
                                                                                       (cdr g$lhs*$8649$c1uhW)
                                                                                       (cdr g$rhs*$8650$c1uhW)))))))
                                                                            g$ls/false$8655$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$t$8658$c1uhW)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8659$c1uhW)
                                                                                  (if g$ls/false$8659$c1uhW
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8660$c1uhW)
                                                                                         (g$syntax-violation$8094$c1uhW
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8636$c1uhW
                                                                                           g$others$8660$c1uhW)))
                                                                                      g$ls/false$8659$c1uhW)
                                                                                    (g$syntax-violation$8094$c1uhW
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8658$c1uhW))))
                                                                               (g$syntax-dispatch$7982$c1uhW
                                                                                 g$t$8658$c1uhW
                                                                                 'any))))
                                                                           g$t$8654$c1uhW))))
                                                                     (g$syntax-dispatch$7982$c1uhW
                                                                       g$t$8654$c1uhW
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8651$c1uhW))))
                                                           (g$syntax-dispatch$7982$c1uhW
                                                             g$t$8651$c1uhW
                                                             'each-any))))
                                                       (car g$lhs*$8649$c1uhW)))))))
                                        g$f$8648$c1uhW)
                                      g$lhs*$8644$c1uhW
                                      g$rhs*$8645$c1uhW))))
                                g$ls/false$8643$c1uhW)
                              (g$syntax-violation$8094$c1uhW
                                '#f
                                '"invalid syntax"
                                g$t$8642$c1uhW))))
                         (g$syntax-dispatch$7982$c1uhW
                           g$t$8642$c1uhW
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8638$c1uhW))))
               (g$syntax-dispatch$7982$c1uhW
                 g$t$8638$c1uhW
                 '(_ () any . each-any)))))
           g$stx$8636$c1uhW)))))
   (g$trace-lambda-macro$7951$c1uhW
     g$trace-lambda-macro$11454$c1uhW
     (case-lambda
       ((g$stx$8663$c1uhW)
        ((case-lambda
           ((g$t$8664$c1uhW)
            ((case-lambda
               ((g$ls/false$8665$c1uhW)
                (if g$ls/false$8665$c1uhW
                  (apply
                    (case-lambda
                      ((g$who$8666$c1uhW
                         g$fmls$8667$c1uhW
                         g$b$8668$c1uhW
                         g$b*$8669$c1uhW)
                       (if (g$valid-bound-ids?$7709$c1uhW g$fmls$8667$c1uhW)
                         (g$bless$7945$c1uhW
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8666$c1uhW)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8667$c1uhW
                                 (cons g$b$8668$c1uhW g$b*$8669$c1uhW)))))
                         (g$invalid-fmls-error$7947$c1uhW
                           g$stx$8663$c1uhW
                           g$fmls$8667$c1uhW))))
                    g$ls/false$8665$c1uhW)
                  ((case-lambda
                     ((g$t$8670$c1uhW)
                      ((case-lambda
                         ((g$ls/false$8671$c1uhW)
                          (if g$ls/false$8671$c1uhW
                            (apply
                              (case-lambda
                                ((g$who$8672$c1uhW
                                   g$fmls$8673$c1uhW
                                   g$last$8674$c1uhW
                                   g$b$8675$c1uhW
                                   g$b*$8676$c1uhW)
                                 (if (g$valid-bound-ids?$7709$c1uhW
                                       (cons
                                         g$last$8674$c1uhW
                                         g$fmls$8673$c1uhW))
                                   (g$bless$7945$c1uhW
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8672$c1uhW)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8673$c1uhW
                                             g$last$8674$c1uhW)
                                           (cons
                                             g$b$8675$c1uhW
                                             g$b*$8676$c1uhW)))))
                                   (g$invalid-fmls-error$7947$c1uhW
                                     g$stx$8663$c1uhW
                                     (append
                                       g$fmls$8673$c1uhW
                                       g$last$8674$c1uhW)))))
                              g$ls/false$8671$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"invalid syntax"
                              g$t$8670$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$8670$c1uhW
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8664$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8664$c1uhW
               '(_ any each-any any . each-any)))))
         g$stx$8663$c1uhW))))
   (g$trace-define-macro$7952$c1uhW
     g$trace-define-macro$11455$c1uhW
     (case-lambda
       ((g$stx$8677$c1uhW)
        ((case-lambda
           ((g$t$8678$c1uhW)
            ((case-lambda
               ((g$ls/false$8679$c1uhW)
                (if g$ls/false$8679$c1uhW
                  (apply
                    (case-lambda
                      ((g$who$8680$c1uhW
                         g$fmls$8681$c1uhW
                         g$b$8682$c1uhW
                         g$b*$8683$c1uhW)
                       (if (g$valid-bound-ids?$7709$c1uhW g$fmls$8681$c1uhW)
                         (g$bless$7945$c1uhW
                           (list
                             'define
                             g$who$8680$c1uhW
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8680$c1uhW)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8681$c1uhW
                                   (cons g$b$8682$c1uhW g$b*$8683$c1uhW))))))
                         (g$invalid-fmls-error$7947$c1uhW
                           g$stx$8677$c1uhW
                           g$fmls$8681$c1uhW))))
                    g$ls/false$8679$c1uhW)
                  ((case-lambda
                     ((g$t$8684$c1uhW)
                      ((case-lambda
                         ((g$ls/false$8685$c1uhW)
                          (if g$ls/false$8685$c1uhW
                            (apply
                              (case-lambda
                                ((g$who$8686$c1uhW
                                   g$fmls$8687$c1uhW
                                   g$last$8688$c1uhW
                                   g$b$8689$c1uhW
                                   g$b*$8690$c1uhW)
                                 (if (g$valid-bound-ids?$7709$c1uhW
                                       (cons
                                         g$last$8688$c1uhW
                                         g$fmls$8687$c1uhW))
                                   (g$bless$7945$c1uhW
                                     (list
                                       'define
                                       g$who$8686$c1uhW
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8686$c1uhW)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8687$c1uhW
                                               g$last$8688$c1uhW)
                                             (cons
                                               g$b$8689$c1uhW
                                               g$b*$8690$c1uhW))))))
                                   (g$invalid-fmls-error$7947$c1uhW
                                     g$stx$8677$c1uhW
                                     (append
                                       g$fmls$8687$c1uhW
                                       g$last$8688$c1uhW)))))
                              g$ls/false$8685$c1uhW)
                            ((case-lambda
                               ((g$t$8691$c1uhW)
                                ((case-lambda
                                   ((g$ls/false$8692$c1uhW)
                                    (if g$ls/false$8692$c1uhW
                                      (apply
                                        (case-lambda
                                          ((g$who$8693$c1uhW g$expr$8694$c1uhW)
                                           (if (g$id?$7704$c1uhW
                                                 g$who$8693$c1uhW)
                                             (g$bless$7945$c1uhW
                                               (list
                                                 'define
                                                 g$who$8693$c1uhW
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8694$c1uhW))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8693$c1uhW)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$8094$c1uhW
                                               '#f
                                               '"invalid name"
                                               g$stx$8677$c1uhW))))
                                        g$ls/false$8692$c1uhW)
                                      (g$syntax-violation$8094$c1uhW
                                        '#f
                                        '"invalid syntax"
                                        g$t$8691$c1uhW))))
                                 (g$syntax-dispatch$7982$c1uhW
                                   g$t$8691$c1uhW
                                   '(_ any any)))))
                             g$t$8684$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$8684$c1uhW
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8678$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8678$c1uhW
               '(_ (any . each-any) any . each-any)))))
         g$stx$8677$c1uhW))))
   (g$trace-define-syntax-macro$7953$c1uhW
     g$trace-define-syntax-macro$11456$c1uhW
     (case-lambda
       ((g$stx$8695$c1uhW)
        ((case-lambda
           ((g$t$8696$c1uhW)
            ((case-lambda
               ((g$ls/false$8697$c1uhW)
                (if g$ls/false$8697$c1uhW
                  (apply
                    (case-lambda
                      ((g$who$8698$c1uhW g$expr$8699$c1uhW)
                       (if (g$id?$7704$c1uhW g$who$8698$c1uhW)
                         (g$bless$7945$c1uhW
                           (list
                             'define-syntax
                             g$who$8698$c1uhW
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8698$c1uhW)
                               g$expr$8699$c1uhW)))
                         (g$syntax-violation$8094$c1uhW
                           '#f
                           '"invalid name"
                           g$stx$8695$c1uhW))))
                    g$ls/false$8697$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8696$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8696$c1uhW '(_ any any)))))
         g$stx$8695$c1uhW))))
   (g$trace-let/rec-syntax$7954$c1uhW
     g$trace-let/rec-syntax$11457$c1uhW
     (case-lambda
       ((g$who$8700$c1uhW)
        (case-lambda
          ((g$stx$8701$c1uhW)
           ((case-lambda
              ((g$t$8702$c1uhW)
               ((case-lambda
                  ((g$ls/false$8703$c1uhW)
                   (if g$ls/false$8703$c1uhW
                     (apply
                       (case-lambda
                         ((g$lhs*$8704$c1uhW
                            g$rhs*$8705$c1uhW
                            g$b$8706$c1uhW
                            g$b*$8707$c1uhW)
                          (if (g$valid-bound-ids?$7709$c1uhW g$lhs*$8704$c1uhW)
                            ((case-lambda
                               ((g$rhs*$8708$c1uhW)
                                (g$bless$7945$c1uhW
                                  (cons
                                    g$who$8700$c1uhW
                                    (cons
                                      (g$map$5063$c1uhW
                                        list
                                        g$lhs*$8704$c1uhW
                                        g$rhs*$8708$c1uhW)
                                      (cons g$b$8706$c1uhW g$b*$8707$c1uhW))))))
                             (g$map$5063$c1uhW
                               (case-lambda
                                 ((g$lhs$8709$c1uhW g$rhs$8710$c1uhW)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$8709$c1uhW)
                                    g$rhs$8710$c1uhW)))
                               g$lhs*$8704$c1uhW
                               g$rhs*$8705$c1uhW))
                            (g$invalid-fmls-error$7947$c1uhW
                              g$stx$8701$c1uhW
                              g$lhs*$8704$c1uhW))))
                       g$ls/false$8703$c1uhW)
                     (g$syntax-violation$8094$c1uhW
                       '#f
                       '"invalid syntax"
                       g$t$8702$c1uhW))))
                (g$syntax-dispatch$7982$c1uhW
                  g$t$8702$c1uhW
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8701$c1uhW))))))
   (g$trace-let-syntax-macro$7955$c1uhW
     g$trace-let-syntax-macro$11458$c1uhW
     (g$trace-let/rec-syntax$7954$c1uhW 'let-syntax))
   (g$trace-letrec-syntax-macro$7956$c1uhW
     g$trace-letrec-syntax-macro$11459$c1uhW
     (g$trace-let/rec-syntax$7954$c1uhW 'letrec-syntax))
   (g$guard-macro$7957$c1uhW
     g$guard-macro$11460$c1uhW
     (case-lambda
       ((g$x$8711$c1uhW)
        (letrec* ((g$gen-clauses$8712$c1uhW
                    (case-lambda
                      ((g$con$8724$c1uhW
                         g$outerk$8725$c1uhW
                         g$clause*$8726$c1uhW)
                       (letrec* ((g$f$8727$c1uhW
                                   (case-lambda
                                     ((g$x$8755$c1uhW g$k$8756$c1uhW)
                                      ((case-lambda
                                         ((g$t$8757$c1uhW)
                                          ((case-lambda
                                             ((g$ls/false$8758$c1uhW)
                                              (if g$ls/false$8758$c1uhW
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8759$c1uhW
                                                       g$p$8760$c1uhW)
                                                     ((case-lambda
                                                        ((g$t$8761$c1uhW)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8761$c1uhW
                                                               g$e$8759$c1uhW))
                                                           (list
                                                             'if
                                                             g$t$8761$c1uhW
                                                             (list
                                                               g$p$8760$c1uhW
                                                               g$t$8761$c1uhW)
                                                             g$k$8756$c1uhW))))
                                                      (gensym))))
                                                  g$ls/false$8758$c1uhW)
                                                ((case-lambda
                                                   ((g$t$8762$c1uhW)
                                                    ((case-lambda
                                                       ((g$ls/false$8763$c1uhW)
                                                        (if g$ls/false$8763$c1uhW
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8764$c1uhW)
                                                               ((case-lambda
                                                                  ((g$t$8765$c1uhW)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8765$c1uhW
                                                                         g$e$8764$c1uhW))
                                                                     (list
                                                                       'if
                                                                       g$t$8765$c1uhW
                                                                       g$t$8765$c1uhW
                                                                       g$k$8756$c1uhW))))
                                                                (gensym))))
                                                            g$ls/false$8763$c1uhW)
                                                          ((case-lambda
                                                             ((g$t$8766$c1uhW)
                                                              ((case-lambda
                                                                 ((g$ls/false$8767$c1uhW)
                                                                  (if g$ls/false$8767$c1uhW
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8768$c1uhW
                                                                           g$v$8769$c1uhW
                                                                           g$v*$8770$c1uhW)
                                                                         (list
                                                                           'if
                                                                           g$e$8768$c1uhW
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8769$c1uhW
                                                                               g$v*$8770$c1uhW))
                                                                           g$k$8756$c1uhW)))
                                                                      g$ls/false$8767$c1uhW)
                                                                    ((case-lambda
                                                                       ((g$t$8771$c1uhW)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8772$c1uhW)
                                                                            (if g$ls/false$8772$c1uhW
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$8094$c1uhW
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8755$c1uhW)))
                                                                                g$ls/false$8772$c1uhW)
                                                                              (g$syntax-violation$8094$c1uhW
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8771$c1uhW))))
                                                                         (g$syntax-dispatch$7982$c1uhW
                                                                           g$t$8771$c1uhW
                                                                           '_))))
                                                                     g$t$8766$c1uhW))))
                                                               (g$syntax-dispatch$7982$c1uhW
                                                                 g$t$8766$c1uhW
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8762$c1uhW))))
                                                     (g$syntax-dispatch$7982$c1uhW
                                                       g$t$8762$c1uhW
                                                       '(any)))))
                                                 g$t$8757$c1uhW))))
                                           (g$syntax-dispatch$7982$c1uhW
                                             g$t$8757$c1uhW
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8755$c1uhW))))
                                 (g$f*$8728$c1uhW
                                   (case-lambda
                                     ((g$x*$8735$c1uhW)
                                      ((case-lambda
                                         ((g$t$8736$c1uhW)
                                          ((case-lambda
                                             ((g$ls/false$8737$c1uhW)
                                              (if g$ls/false$8737$c1uhW
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8724$c1uhW)
                                                       '#t)))
                                                  g$ls/false$8737$c1uhW)
                                                ((case-lambda
                                                   ((g$t$8738$c1uhW)
                                                    ((case-lambda
                                                       ((g$ls/false$8739$c1uhW)
                                                        (if g$ls/false$8739$c1uhW
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8740$c1uhW
                                                                 g$e*$8741$c1uhW)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8740$c1uhW
                                                                     g$e*$8741$c1uhW))
                                                                 '#f)))
                                                            g$ls/false$8739$c1uhW)
                                                          ((case-lambda
                                                             ((g$t$8742$c1uhW)
                                                              ((case-lambda
                                                                 ((g$ls/false$8743$c1uhW)
                                                                  (if g$ls/false$8743$c1uhW
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8744$c1uhW
                                                                           g$cls*$8745$c1uhW)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8728$c1uhW
                                                                                g$cls*$8745$c1uhW)))
                                                                           (case-lambda
                                                                             ((g$e$8748$c1uhW
                                                                                g$g$8749$c1uhW)
                                                                              ((case-lambda
                                                                                 ((g$g$8750$c1uhW
                                                                                    g$e$8751$c1uhW)
                                                                                  (values
                                                                                    (g$f$8727$c1uhW
                                                                                      g$cls$8744$c1uhW
                                                                                      g$e$8751$c1uhW)
                                                                                    g$g$8750$c1uhW)))
                                                                               g$g$8749$c1uhW
                                                                               g$e$8748$c1uhW))))))
                                                                      g$ls/false$8743$c1uhW)
                                                                    ((case-lambda
                                                                       ((g$t$8752$c1uhW)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8753$c1uhW)
                                                                            (if g$ls/false$8753$c1uhW
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8754$c1uhW)
                                                                                   (g$syntax-violation$8094$c1uhW
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8754$c1uhW)))
                                                                                g$ls/false$8753$c1uhW)
                                                                              (g$syntax-violation$8094$c1uhW
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8752$c1uhW))))
                                                                         (g$syntax-dispatch$7982$c1uhW
                                                                           g$t$8752$c1uhW
                                                                           'any))))
                                                                     g$t$8742$c1uhW))))
                                                               (g$syntax-dispatch$7982$c1uhW
                                                                 g$t$8742$c1uhW
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8738$c1uhW))))
                                                     (g$syntax-dispatch$7982$c1uhW
                                                       g$t$8738$c1uhW
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8736$c1uhW))))
                                           (g$syntax-dispatch$7982$c1uhW
                                             g$t$8736$c1uhW
                                             '()))))
                                       g$x*$8735$c1uhW)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8728$c1uhW g$clause*$8726$c1uhW)))
                           (case-lambda
                             ((g$code$8731$c1uhW g$raisek$8732$c1uhW)
                              ((case-lambda
                                 ((g$raisek$8733$c1uhW g$code$8734$c1uhW)
                                  (if g$raisek$8733$c1uhW
                                    (list g$outerk$8725$c1uhW g$code$8734$c1uhW)
                                    g$code$8734$c1uhW)))
                               g$raisek$8732$c1uhW
                               g$code$8731$c1uhW)))))))))
          ((case-lambda
             ((g$t$8713$c1uhW)
              ((case-lambda
                 ((g$ls/false$8714$c1uhW)
                  (if (if g$ls/false$8714$c1uhW
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8715$c1uhW
                                 g$clause*$8716$c1uhW
                                 g$b$8717$c1uhW
                                 g$b*$8718$c1uhW)
                               (g$id?$7704$c1uhW g$con$8715$c1uhW)))
                            g$ls/false$8714$c1uhW))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8719$c1uhW
                           g$clause*$8720$c1uhW
                           g$b$8721$c1uhW
                           g$b*$8722$c1uhW)
                         ((case-lambda
                            ((g$outerk$8723$c1uhW)
                             (g$bless$7945$c1uhW
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8723$c1uhW)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8719$c1uhW)
                                           (g$gen-clauses$8712$c1uhW
                                             g$con$8719$c1uhW
                                             g$outerk$8723$c1uhW
                                             g$clause*$8720$c1uhW))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8721$c1uhW
                                                 g$b*$8722$c1uhW))))))))))))
                          (gensym))))
                      g$ls/false$8714$c1uhW)
                    (g$syntax-violation$8094$c1uhW
                      '#f
                      '"invalid syntax"
                      g$t$8713$c1uhW))))
               (g$syntax-dispatch$7982$c1uhW
                 g$t$8713$c1uhW
                 '(_ (any . each-any) any . each-any)))))
           g$x$8711$c1uhW)))))
   (g$define-enumeration-macro$7958$c1uhW
     g$define-enumeration-macro$11461$c1uhW
     (case-lambda
       ((g$stx$8773$c1uhW)
        (letrec* ((g$set?$8774$c1uhW
                    (case-lambda
                      ((g$x$8787$c1uhW)
                       ((case-lambda
                          ((g$t$8788$c1uhW)
                           (if g$t$8788$c1uhW
                             g$t$8788$c1uhW
                             (begin
                               '#f
                               (if (not (g$memq$5055$c1uhW
                                          (car g$x$8787$c1uhW)
                                          (cdr g$x$8787$c1uhW)))
                                 (begin
                                   '#f
                                   (g$set?$8774$c1uhW (cdr g$x$8787$c1uhW)))
                                 '#f)))))
                        (null? g$x$8787$c1uhW)))))
                  (g$remove-dups$8775$c1uhW
                    (case-lambda
                      ((g$ls$8786$c1uhW)
                       (if (null? g$ls$8786$c1uhW)
                         '()
                         (cons
                           (car g$ls$8786$c1uhW)
                           (g$remove-dups$8775$c1uhW
                             (g$remq$5070$c1uhW
                               (car g$ls$8786$c1uhW)
                               (cdr g$ls$8786$c1uhW)))))))))
          ((case-lambda
             ((g$t$8776$c1uhW)
              ((case-lambda
                 ((g$ls/false$8777$c1uhW)
                  (if (if g$ls/false$8777$c1uhW
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8778$c1uhW
                                 g$id*$8779$c1uhW
                                 g$maker$8780$c1uhW)
                               (if (g$id?$7704$c1uhW g$name$8778$c1uhW)
                                 (if (g$id?$7704$c1uhW g$maker$8780$c1uhW)
                                   (begin
                                     '#f
                                     (g$for-all$5061$c1uhW
                                       g$id?$7704$c1uhW
                                       g$id*$8779$c1uhW))
                                   '#f)
                                 '#f)))
                            g$ls/false$8777$c1uhW))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8781$c1uhW g$id*$8782$c1uhW g$maker$8783$c1uhW)
                         ((case-lambda
                            ((g$name*$8784$c1uhW g$mk$8785$c1uhW)
                             (g$bless$7945$c1uhW
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8785$c1uhW
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8784$c1uhW))))
                                 (list
                                   'define-syntax
                                   g$name$8781$c1uhW
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8784$c1uhW))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8781$c1uhW)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8783$c1uhW
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8783$c1uhW)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8784$c1uhW))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8783$c1uhW)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8785$c1uhW
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8775$c1uhW
                            (g$syntax->datum$8097$c1uhW g$id*$8782$c1uhW))
                          (gensym))))
                      g$ls/false$8777$c1uhW)
                    (g$syntax-violation$8094$c1uhW
                      '#f
                      '"invalid syntax"
                      g$t$8776$c1uhW))))
               (g$syntax-dispatch$7982$c1uhW
                 g$t$8776$c1uhW
                 '(_ any each-any any)))))
           g$stx$8773$c1uhW)))))
   (g$time-macro$7959$c1uhW
     g$time-macro$11462$c1uhW
     (case-lambda
       ((g$stx$8789$c1uhW)
        ((case-lambda
           ((g$t$8790$c1uhW)
            ((case-lambda
               ((g$ls/false$8791$c1uhW)
                (if g$ls/false$8791$c1uhW
                  (apply
                    (case-lambda
                      ((g$expr$8792$c1uhW)
                       ((case-lambda
                          ((g$str$8793$c1uhW)
                           (g$bless$7945$c1uhW
                             (list
                               'time-it
                               g$str$8793$c1uhW
                               (list 'lambda '() g$expr$8792$c1uhW)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6336$c1uhW)))
                          (case-lambda
                            ((g$p$8796$c1uhW g$e$8797$c1uhW)
                             ((case-lambda
                                ((g$e$8798$c1uhW g$p$8799$c1uhW)
                                 (begin
                                   (write
                                     (g$syntax->datum$8097$c1uhW
                                       g$expr$8792$c1uhW)
                                     g$p$8799$c1uhW)
                                   (g$e$8798$c1uhW))))
                              g$e$8797$c1uhW
                              g$p$8796$c1uhW)))))))
                    g$ls/false$8791$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8790$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8790$c1uhW '(_ any)))))
         g$stx$8789$c1uhW))))
   (g$delay-macro$7960$c1uhW
     g$delay-macro$11463$c1uhW
     (case-lambda
       ((g$stx$8800$c1uhW)
        ((case-lambda
           ((g$t$8801$c1uhW)
            ((case-lambda
               ((g$ls/false$8802$c1uhW)
                (if g$ls/false$8802$c1uhW
                  (apply
                    (case-lambda
                      ((g$expr$8803$c1uhW)
                       (g$bless$7945$c1uhW
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8803$c1uhW)))))
                    g$ls/false$8802$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8801$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8801$c1uhW '(_ any)))))
         g$stx$8800$c1uhW))))
   (g$assert-macro$7961$c1uhW
     g$assert-macro$11464$c1uhW
     (case-lambda
       ((g$stx$8804$c1uhW)
        ((case-lambda
           ((g$t$8805$c1uhW)
            ((case-lambda
               ((g$ls/false$8806$c1uhW)
                (if g$ls/false$8806$c1uhW
                  (apply
                    (case-lambda
                      ((g$expr$8807$c1uhW)
                       ((case-lambda
                          ((g$pos$8808$c1uhW)
                           (g$bless$7945$c1uhW
                             (list
                               'unless
                               g$expr$8807$c1uhW
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8807$c1uhW)
                                 (list 'quote g$pos$8808$c1uhW))))))
                        ((case-lambda
                           ((g$t$8809$c1uhW)
                            (if g$t$8809$c1uhW
                              g$t$8809$c1uhW
                              (begin
                                '#f
                                (g$expression-position$8089$c1uhW
                                  g$expr$8807$c1uhW)))))
                         (g$expression-position$8089$c1uhW g$stx$8804$c1uhW)))))
                    g$ls/false$8806$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8805$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8805$c1uhW '(_ any)))))
         g$stx$8804$c1uhW))))
   (g$endianness-macro$7962$c1uhW
     g$endianness-macro$11465$c1uhW
     (case-lambda
       ((g$stx$8810$c1uhW)
        ((case-lambda
           ((g$t$8811$c1uhW)
            ((case-lambda
               ((g$ls/false$8812$c1uhW)
                (if g$ls/false$8812$c1uhW
                  (apply
                    (case-lambda
                      ((g$e$8813$c1uhW)
                       ((case-lambda
                          ((g$t$8814$c1uhW)
                           (if (g$memv$5056$c1uhW g$t$8814$c1uhW '(little))
                             (g$bless$7945$c1uhW ''little)
                             (if (g$memv$5056$c1uhW g$t$8814$c1uhW '(big))
                               (g$bless$7945$c1uhW ''big)
                               (g$syntax-violation$8094$c1uhW
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8810$c1uhW)))))
                        (g$syntax->datum$8097$c1uhW g$e$8813$c1uhW))))
                    g$ls/false$8812$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8811$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8811$c1uhW '(_ any)))))
         g$stx$8810$c1uhW))))
   (g$identifier-syntax-macro$7963$c1uhW
     g$identifier-syntax-macro$11466$c1uhW
     (case-lambda
       ((g$stx$8815$c1uhW)
        ((case-lambda
           ((g$t$8816$c1uhW)
            ((case-lambda
               ((g$ls/false$8817$c1uhW)
                (if g$ls/false$8817$c1uhW
                  (apply
                    (case-lambda
                      ((g$expr$8818$c1uhW)
                       (g$bless$7945$c1uhW
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8818$c1uhW))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8818$c1uhW)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8817$c1uhW)
                  ((case-lambda
                     ((g$t$8819$c1uhW)
                      ((case-lambda
                         ((g$ls/false$8820$c1uhW)
                          (if (if g$ls/false$8820$c1uhW
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8821$c1uhW
                                         g$expr1$8822$c1uhW
                                         g$id2$8823$c1uhW
                                         g$expr2$8824$c1uhW
                                         g$expr3$8825$c1uhW)
                                       (if (g$id?$7704$c1uhW g$id1$8821$c1uhW)
                                         (if (g$id?$7704$c1uhW g$id2$8823$c1uhW)
                                           (begin
                                             '#f
                                             (g$id?$7704$c1uhW
                                               g$expr2$8824$c1uhW))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8820$c1uhW))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8826$c1uhW
                                   g$expr1$8827$c1uhW
                                   g$id2$8828$c1uhW
                                   g$expr2$8829$c1uhW
                                   g$expr3$8830$c1uhW)
                                 (g$bless$7945$c1uhW
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8827$c1uhW))
                                         (list
                                           (list 'set! 'id g$expr2$8829$c1uhW)
                                           (list 'syntax g$expr3$8830$c1uhW))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8827$c1uhW
                                               '(e* ...))))))))))
                              g$ls/false$8820$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"invalid syntax"
                              g$t$8819$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$8819$c1uhW
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8816$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8816$c1uhW '(_ any)))))
         g$stx$8815$c1uhW))))
   (g$do-macro$7964$c1uhW
     g$do-macro$11467$c1uhW
     (case-lambda
       ((g$stx$8831$c1uhW)
        (letrec* ((g$bind$8832$c1uhW
                    (case-lambda
                      ((g$x$8844$c1uhW)
                       ((case-lambda
                          ((g$t$8845$c1uhW)
                           ((case-lambda
                              ((g$ls/false$8846$c1uhW)
                               (if g$ls/false$8846$c1uhW
                                 (apply
                                   (case-lambda
                                     ((g$x$8847$c1uhW g$init$8848$c1uhW)
                                      (list
                                        g$x$8847$c1uhW
                                        g$init$8848$c1uhW
                                        g$x$8847$c1uhW)))
                                   g$ls/false$8846$c1uhW)
                                 ((case-lambda
                                    ((g$t$8849$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$8850$c1uhW)
                                         (if g$ls/false$8850$c1uhW
                                           (apply
                                             (case-lambda
                                               ((g$x$8851$c1uhW
                                                  g$init$8852$c1uhW
                                                  g$step$8853$c1uhW)
                                                (list
                                                  g$x$8851$c1uhW
                                                  g$init$8852$c1uhW
                                                  g$step$8853$c1uhW)))
                                             g$ls/false$8850$c1uhW)
                                           ((case-lambda
                                              ((g$t$8854$c1uhW)
                                               ((case-lambda
                                                  ((g$ls/false$8855$c1uhW)
                                                   (if g$ls/false$8855$c1uhW
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$8094$c1uhW
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8831$c1uhW)))
                                                       g$ls/false$8855$c1uhW)
                                                     (g$syntax-violation$8094$c1uhW
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8854$c1uhW))))
                                                (g$syntax-dispatch$7982$c1uhW
                                                  g$t$8854$c1uhW
                                                  '_))))
                                            g$t$8849$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$8849$c1uhW
                                        '(any any any)))))
                                  g$t$8845$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW
                              g$t$8845$c1uhW
                              '(any any)))))
                        g$x$8844$c1uhW)))))
          ((case-lambda
             ((g$t$8833$c1uhW)
              ((case-lambda
                 ((g$ls/false$8834$c1uhW)
                  (if g$ls/false$8834$c1uhW
                    (apply
                      (case-lambda
                        ((g$binding*$8835$c1uhW
                           g$test$8836$c1uhW
                           g$expr*$8837$c1uhW
                           g$command*$8838$c1uhW)
                         ((case-lambda
                            ((g$t$8839$c1uhW)
                             ((case-lambda
                                ((g$ls/false$8840$c1uhW)
                                 (if g$ls/false$8840$c1uhW
                                   (apply
                                     (case-lambda
                                       ((g$x*$8841$c1uhW
                                          g$init*$8842$c1uhW
                                          g$step*$8843$c1uhW)
                                        (if (g$valid-bound-ids?$7709$c1uhW
                                              g$x*$8841$c1uhW)
                                          (g$bless$7945$c1uhW
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8841$c1uhW
                                                    (list
                                                      'if
                                                      g$test$8836$c1uhW
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8837$c1uhW))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8838$c1uhW
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8843$c1uhW))))))))
                                              (cons 'loop g$init*$8842$c1uhW)))
                                          (g$syntax-violation$8094$c1uhW
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8831$c1uhW))))
                                     g$ls/false$8840$c1uhW)
                                   (g$syntax-violation$8094$c1uhW
                                     '#f
                                     '"invalid syntax"
                                     g$t$8839$c1uhW))))
                              (g$syntax-dispatch$7982$c1uhW
                                g$t$8839$c1uhW
                                '#(each (any any any))))))
                          (g$map$5063$c1uhW
                            g$bind$8832$c1uhW
                            g$binding*$8835$c1uhW))))
                      g$ls/false$8834$c1uhW)
                    (g$syntax-violation$8094$c1uhW
                      '#f
                      '"invalid syntax"
                      g$t$8833$c1uhW))))
               (g$syntax-dispatch$7982$c1uhW
                 g$t$8833$c1uhW
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8831$c1uhW)))))
   (g$let*-macro$7965$c1uhW
     g$let*-macro$11468$c1uhW
     (case-lambda
       ((g$stx$8856$c1uhW)
        ((case-lambda
           ((g$t$8857$c1uhW)
            ((case-lambda
               ((g$ls/false$8858$c1uhW)
                (if (if g$ls/false$8858$c1uhW
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8859$c1uhW
                               g$rhs*$8860$c1uhW
                               g$b$8861$c1uhW
                               g$b*$8862$c1uhW)
                             (g$for-all$5061$c1uhW
                               g$id?$7704$c1uhW
                               g$lhs*$8859$c1uhW)))
                          g$ls/false$8858$c1uhW))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8863$c1uhW
                         g$rhs*$8864$c1uhW
                         g$b$8865$c1uhW
                         g$b*$8866$c1uhW)
                       (g$bless$7945$c1uhW
                         ((letrec ((g$f$8867$c1uhW
                                     (case-lambda
                                       ((g$x*$8868$c1uhW)
                                        (if (null? g$x*$8868$c1uhW)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8865$c1uhW
                                                g$b*$8866$c1uhW)))
                                          (if (null? (cdr g$x*$8868$c1uhW))
                                            (cons
                                              'let
                                              (cons
                                                (list (car g$x*$8868$c1uhW))
                                                (cons
                                                  g$b$8865$c1uhW
                                                  g$b*$8866$c1uhW)))
                                            (list
                                              'let
                                              (list (car g$x*$8868$c1uhW))
                                              (g$f$8867$c1uhW
                                                (cdr g$x*$8868$c1uhW)))))))))
                            g$f$8867$c1uhW)
                          (g$map$5063$c1uhW
                            list
                            g$lhs*$8863$c1uhW
                            g$rhs*$8864$c1uhW)))))
                    g$ls/false$8858$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8857$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8857$c1uhW
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8856$c1uhW))))
   (g$or-macro$7966$c1uhW
     g$or-macro$11469$c1uhW
     (case-lambda
       ((g$stx$8869$c1uhW)
        ((case-lambda
           ((g$t$8870$c1uhW)
            ((case-lambda
               ((g$ls/false$8871$c1uhW)
                (if g$ls/false$8871$c1uhW
                  (apply (case-lambda (() '#f)) g$ls/false$8871$c1uhW)
                  ((case-lambda
                     ((g$t$8872$c1uhW)
                      ((case-lambda
                         ((g$ls/false$8873$c1uhW)
                          (if g$ls/false$8873$c1uhW
                            (apply
                              (case-lambda
                                ((g$e$8874$c1uhW g$e*$8875$c1uhW)
                                 (g$bless$7945$c1uhW
                                   ((letrec ((g$f$8876$c1uhW
                                               (case-lambda
                                                 ((g$e$8877$c1uhW
                                                    g$e*$8878$c1uhW)
                                                  (if (null? g$e*$8878$c1uhW)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8877$c1uhW)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8877$c1uhW))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8876$c1uhW
                                                          (car g$e*$8878$c1uhW)
                                                          (cdr g$e*$8878$c1uhW)))))))))
                                      g$f$8876$c1uhW)
                                    g$e$8874$c1uhW
                                    g$e*$8875$c1uhW))))
                              g$ls/false$8873$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"invalid syntax"
                              g$t$8872$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$8872$c1uhW
                         '(_ any . each-any)))))
                   g$t$8870$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8870$c1uhW '(_)))))
         g$stx$8869$c1uhW))))
   (g$and-macro$7967$c1uhW
     g$and-macro$11470$c1uhW
     (case-lambda
       ((g$stx$8879$c1uhW)
        ((case-lambda
           ((g$t$8880$c1uhW)
            ((case-lambda
               ((g$ls/false$8881$c1uhW)
                (if g$ls/false$8881$c1uhW
                  (apply (case-lambda (() '#t)) g$ls/false$8881$c1uhW)
                  ((case-lambda
                     ((g$t$8882$c1uhW)
                      ((case-lambda
                         ((g$ls/false$8883$c1uhW)
                          (if g$ls/false$8883$c1uhW
                            (apply
                              (case-lambda
                                ((g$e$8884$c1uhW g$e*$8885$c1uhW)
                                 (g$bless$7945$c1uhW
                                   ((letrec ((g$f$8886$c1uhW
                                               (case-lambda
                                                 ((g$e$8887$c1uhW
                                                    g$e*$8888$c1uhW)
                                                  (if (null? g$e*$8888$c1uhW)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8887$c1uhW)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8887$c1uhW
                                                        (cons
                                                          (g$f$8886$c1uhW
                                                            (car g$e*$8888$c1uhW)
                                                            (cdr g$e*$8888$c1uhW))
                                                          '(#f)))))))))
                                      g$f$8886$c1uhW)
                                    g$e$8884$c1uhW
                                    g$e*$8885$c1uhW))))
                              g$ls/false$8883$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"invalid syntax"
                              g$t$8882$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$8882$c1uhW
                         '(_ any . each-any)))))
                   g$t$8880$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8880$c1uhW '(_)))))
         g$stx$8879$c1uhW))))
   (g$cond-macro$7968$c1uhW
     g$cond-macro$11471$c1uhW
     (case-lambda
       ((g$stx$8889$c1uhW)
        ((case-lambda
           ((g$t$8890$c1uhW)
            ((case-lambda
               ((g$ls/false$8891$c1uhW)
                (if g$ls/false$8891$c1uhW
                  (apply
                    (case-lambda
                      ((g$cls$8892$c1uhW g$cls*$8893$c1uhW)
                       (g$bless$7945$c1uhW
                         ((letrec ((g$f$8894$c1uhW
                                     (case-lambda
                                       ((g$cls$8895$c1uhW g$cls*$8896$c1uhW)
                                        (if (null? g$cls*$8896$c1uhW)
                                          ((case-lambda
                                             ((g$t$8897$c1uhW)
                                              ((case-lambda
                                                 ((g$ls/false$8898$c1uhW)
                                                  (if g$ls/false$8898$c1uhW
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8899$c1uhW
                                                           g$e*$8900$c1uhW)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8899$c1uhW
                                                             g$e*$8900$c1uhW))))
                                                      g$ls/false$8898$c1uhW)
                                                    ((case-lambda
                                                       ((g$t$8901$c1uhW)
                                                        ((case-lambda
                                                           ((g$ls/false$8902$c1uhW)
                                                            (if g$ls/false$8902$c1uhW
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8903$c1uhW
                                                                     g$p$8904$c1uhW)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8903$c1uhW))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8904$c1uhW
                                                                         '(t))))))
                                                                g$ls/false$8902$c1uhW)
                                                              ((case-lambda
                                                                 ((g$t$8905$c1uhW)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8906$c1uhW)
                                                                      (if g$ls/false$8906$c1uhW
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8907$c1uhW)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8907$c1uhW
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8906$c1uhW)
                                                                        ((case-lambda
                                                                           ((g$t$8908$c1uhW)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8909$c1uhW)
                                                                                (if g$ls/false$8909$c1uhW
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8910$c1uhW
                                                                                         g$e*$8911$c1uhW)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8910$c1uhW
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8911$c1uhW))))
                                                                                    g$ls/false$8909$c1uhW)
                                                                                  ((case-lambda
                                                                                     ((g$t$8912$c1uhW)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8913$c1uhW)
                                                                                          (if g$ls/false$8913$c1uhW
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8094$c1uhW
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8889$c1uhW)))
                                                                                              g$ls/false$8913$c1uhW)
                                                                                            (g$syntax-violation$8094$c1uhW
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8912$c1uhW))))
                                                                                       (g$syntax-dispatch$7982$c1uhW
                                                                                         g$t$8912$c1uhW
                                                                                         '_))))
                                                                                   g$t$8908$c1uhW))))
                                                                             (g$syntax-dispatch$7982$c1uhW
                                                                               g$t$8908$c1uhW
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8905$c1uhW))))
                                                                   (g$syntax-dispatch$7982$c1uhW
                                                                     g$t$8905$c1uhW
                                                                     '(any)))))
                                                               g$t$8901$c1uhW))))
                                                         (g$syntax-dispatch$7982$c1uhW
                                                           g$t$8901$c1uhW
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8897$c1uhW))))
                                               (g$syntax-dispatch$7982$c1uhW
                                                 g$t$8897$c1uhW
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8895$c1uhW)
                                          ((case-lambda
                                             ((g$t$8914$c1uhW)
                                              ((case-lambda
                                                 ((g$ls/false$8915$c1uhW)
                                                  (if g$ls/false$8915$c1uhW
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8916$c1uhW
                                                           g$e*$8917$c1uhW)
                                                         (g$syntax-violation$8094$c1uhW
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8889$c1uhW)))
                                                      g$ls/false$8915$c1uhW)
                                                    ((case-lambda
                                                       ((g$t$8918$c1uhW)
                                                        ((case-lambda
                                                           ((g$ls/false$8919$c1uhW)
                                                            (if g$ls/false$8919$c1uhW
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8920$c1uhW
                                                                     g$p$8921$c1uhW)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8920$c1uhW))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8921$c1uhW
                                                                         '(t))
                                                                       (g$f$8894$c1uhW
                                                                         (car g$cls*$8896$c1uhW)
                                                                         (cdr g$cls*$8896$c1uhW))))))
                                                                g$ls/false$8919$c1uhW)
                                                              ((case-lambda
                                                                 ((g$t$8922$c1uhW)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8923$c1uhW)
                                                                      (if g$ls/false$8923$c1uhW
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8924$c1uhW)
                                                                             (list
                                                                               'or
                                                                               g$e$8924$c1uhW
                                                                               (g$f$8894$c1uhW
                                                                                 (car g$cls*$8896$c1uhW)
                                                                                 (cdr g$cls*$8896$c1uhW)))))
                                                                          g$ls/false$8923$c1uhW)
                                                                        ((case-lambda
                                                                           ((g$t$8925$c1uhW)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8926$c1uhW)
                                                                                (if g$ls/false$8926$c1uhW
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8927$c1uhW
                                                                                         g$e*$8928$c1uhW)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8927$c1uhW
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8928$c1uhW)
                                                                                         (g$f$8894$c1uhW
                                                                                           (car g$cls*$8896$c1uhW)
                                                                                           (cdr g$cls*$8896$c1uhW)))))
                                                                                    g$ls/false$8926$c1uhW)
                                                                                  ((case-lambda
                                                                                     ((g$t$8929$c1uhW)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8930$c1uhW)
                                                                                          (if g$ls/false$8930$c1uhW
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8094$c1uhW
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8889$c1uhW)))
                                                                                              g$ls/false$8930$c1uhW)
                                                                                            (g$syntax-violation$8094$c1uhW
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8929$c1uhW))))
                                                                                       (g$syntax-dispatch$7982$c1uhW
                                                                                         g$t$8929$c1uhW
                                                                                         '_))))
                                                                                   g$t$8925$c1uhW))))
                                                                             (g$syntax-dispatch$7982$c1uhW
                                                                               g$t$8925$c1uhW
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8922$c1uhW))))
                                                                   (g$syntax-dispatch$7982$c1uhW
                                                                     g$t$8922$c1uhW
                                                                     '(any)))))
                                                               g$t$8918$c1uhW))))
                                                         (g$syntax-dispatch$7982$c1uhW
                                                           g$t$8918$c1uhW
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8914$c1uhW))))
                                               (g$syntax-dispatch$7982$c1uhW
                                                 g$t$8914$c1uhW
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8895$c1uhW))))))
                            g$f$8894$c1uhW)
                          g$cls$8892$c1uhW
                          g$cls*$8893$c1uhW))))
                    g$ls/false$8891$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8890$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8890$c1uhW
               '(_ any . each-any)))))
         g$stx$8889$c1uhW))))
   (g$do-include$7969$c1uhW
     g$do-include$11472$c1uhW
     (case-lambda
       ((g$stx$8931$c1uhW g$id$8932$c1uhW g$filename$8933$c1uhW)
        ((case-lambda
           ((g$filename$8934$c1uhW)
            (begin
              (if (not (if (string? g$filename$8934$c1uhW)
                         (begin '#f (g$id?$7704$c1uhW g$id$8932$c1uhW))
                         '#f))
                (g$syntax-violation$8094$c1uhW
                  '#f
                  '"invalid syntax"
                  g$stx$8931$c1uhW)
                (void))
              (cons
                (g$bless$7945$c1uhW 'begin)
                (g$with-input-from-file$6385$c1uhW
                  g$filename$8934$c1uhW
                  (case-lambda
                    (()
                     ((letrec ((g$f$8935$c1uhW
                                 (case-lambda
                                   ((g$ls$8936$c1uhW)
                                    ((case-lambda
                                       ((g$x$8937$c1uhW)
                                        (if (eof-object? g$x$8937$c1uhW)
                                          (reverse g$ls$8936$c1uhW)
                                          (g$f$8935$c1uhW
                                            (cons
                                              (g$datum->stx$7687$c1uhW
                                                g$id$8932$c1uhW
                                                g$x$8937$c1uhW)
                                              g$ls$8936$c1uhW)))))
                                     (read-annotated))))))
                        g$f$8935$c1uhW)
                      '()))))))))
         (g$stx->datum$7715$c1uhW g$filename$8933$c1uhW)))))
   (g$include-macro$7970$c1uhW
     g$include-macro$11473$c1uhW
     (case-lambda
       ((g$e$8938$c1uhW)
        ((case-lambda
           ((g$t$8939$c1uhW)
            ((case-lambda
               ((g$ls/false$8940$c1uhW)
                (if g$ls/false$8940$c1uhW
                  (apply
                    (case-lambda
                      ((g$id$8941$c1uhW g$filename$8942$c1uhW)
                       (g$do-include$7969$c1uhW
                         g$e$8938$c1uhW
                         g$id$8941$c1uhW
                         g$filename$8942$c1uhW)))
                    g$ls/false$8940$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8939$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8939$c1uhW '(any any)))))
         g$e$8938$c1uhW))))
   (g$include-into-macro$7971$c1uhW
     g$include-into-macro$11474$c1uhW
     (case-lambda
       ((g$e$8943$c1uhW)
        ((case-lambda
           ((g$t$8944$c1uhW)
            ((case-lambda
               ((g$ls/false$8945$c1uhW)
                (if g$ls/false$8945$c1uhW
                  (apply
                    (case-lambda
                      ((g$id$8946$c1uhW g$filename$8947$c1uhW)
                       (g$do-include$7969$c1uhW
                         g$e$8943$c1uhW
                         g$id$8946$c1uhW
                         g$filename$8947$c1uhW)))
                    g$ls/false$8945$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8944$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$8944$c1uhW '(_ any any)))))
         g$e$8943$c1uhW))))
   (g$syntax-rules-macro$7972$c1uhW
     g$syntax-rules-macro$11475$c1uhW
     (case-lambda
       ((g$e$8948$c1uhW)
        ((case-lambda
           ((g$t$8949$c1uhW)
            ((case-lambda
               ((g$ls/false$8950$c1uhW)
                (if g$ls/false$8950$c1uhW
                  (apply
                    (case-lambda
                      ((g$lits$8951$c1uhW g$pat*$8952$c1uhW g$tmp*$8953$c1uhW)
                       (begin
                         (g$verify-literals$7985$c1uhW
                           g$lits$8951$c1uhW
                           g$e$8948$c1uhW)
                         (g$bless$7945$c1uhW
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8951$c1uhW
                                   (g$map$5063$c1uhW
                                     (case-lambda
                                       ((g$pat$8954$c1uhW g$tmp$8955$c1uhW)
                                        ((case-lambda
                                           ((g$t$8956$c1uhW)
                                            ((case-lambda
                                               ((g$ls/false$8957$c1uhW)
                                                (if g$ls/false$8957$c1uhW
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$8958$c1uhW)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$8958$c1uhW)
                                                         (list
                                                           'syntax
                                                           g$tmp$8955$c1uhW))))
                                                    g$ls/false$8957$c1uhW)
                                                  ((case-lambda
                                                     ((g$t$8959$c1uhW)
                                                      ((case-lambda
                                                         ((g$ls/false$8960$c1uhW)
                                                          (if g$ls/false$8960$c1uhW
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$8094$c1uhW
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$8948$c1uhW
                                                                   g$pat$8954$c1uhW)))
                                                              g$ls/false$8960$c1uhW)
                                                            (g$syntax-violation$8094$c1uhW
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$8959$c1uhW))))
                                                       (g$syntax-dispatch$7982$c1uhW
                                                         g$t$8959$c1uhW
                                                         '_))))
                                                   g$t$8956$c1uhW))))
                                             (g$syntax-dispatch$7982$c1uhW
                                               g$t$8956$c1uhW
                                               '(_ . any)))))
                                         g$pat$8954$c1uhW)))
                                     g$pat*$8952$c1uhW
                                     g$tmp*$8953$c1uhW)))))))))
                    g$ls/false$8950$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$8949$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$8949$c1uhW
               '(_ each-any . #(each (any any)))))))
         g$e$8948$c1uhW))))
   (g$quasiquote-macro$7973$c1uhW
     g$quasiquote-macro$11476$c1uhW
     ((case-lambda
        (()
         (letrec* ((g$datum$8961$c1uhW
                     (case-lambda
                       ((g$x$9092$c1uhW)
                        (list
                          (g$scheme-stx$7925$c1uhW 'quote)
                          (g$mkstx$7692$c1uhW g$x$9092$c1uhW '() '() '())))))
                   (g$quasicons*$8977$c1uhW
                     (case-lambda
                       ((g$x$9088$c1uhW g$y$9089$c1uhW)
                        ((letrec ((g$f$9090$c1uhW
                                    (case-lambda
                                      ((g$x$9091$c1uhW)
                                       (if (null? g$x$9091$c1uhW)
                                         g$y$9089$c1uhW
                                         (g$quasicons$8978$c1uhW
                                           (car g$x$9091$c1uhW)
                                           (g$f$9090$c1uhW
                                             (cdr g$x$9091$c1uhW))))))))
                           g$f$9090$c1uhW)
                         g$x$9088$c1uhW))))
                   (g$quasicons$8978$c1uhW
                     (case-lambda
                       ((g$x$9069$c1uhW g$y$9070$c1uhW)
                        ((case-lambda
                           ((g$t$9071$c1uhW)
                            ((case-lambda
                               ((g$ls/false$9072$c1uhW)
                                (if g$ls/false$9072$c1uhW
                                  (apply
                                    (case-lambda
                                      ((g$dy$9073$c1uhW)
                                       ((case-lambda
                                          ((g$t$9074$c1uhW)
                                           ((case-lambda
                                              ((g$ls/false$9075$c1uhW)
                                               (if g$ls/false$9075$c1uhW
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$9076$c1uhW)
                                                      (list
                                                        (g$scheme-stx$7925$c1uhW
                                                          'quote)
                                                        (cons
                                                          g$dx$9076$c1uhW
                                                          g$dy$9073$c1uhW))))
                                                   g$ls/false$9075$c1uhW)
                                                 ((case-lambda
                                                    ((g$t$9077$c1uhW)
                                                     ((case-lambda
                                                        ((g$ls/false$9078$c1uhW)
                                                         (if g$ls/false$9078$c1uhW
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$9079$c1uhW)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9080$c1uhW)
                                                                        (if g$ls/false$9080$c1uhW
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7925$c1uhW
                                                                                   'list)
                                                                                 g$x$9069$c1uhW)))
                                                                            g$ls/false$9080$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$t$9081$c1uhW)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9082$c1uhW)
                                                                                  (if g$ls/false$9082$c1uhW
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7925$c1uhW
                                                                                             'cons)
                                                                                           g$x$9069$c1uhW
                                                                                           g$y$9070$c1uhW)))
                                                                                      g$ls/false$9082$c1uhW)
                                                                                    (g$syntax-violation$8094$c1uhW
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$9081$c1uhW))))
                                                                               (g$syntax-dispatch$7982$c1uhW
                                                                                 g$t$9081$c1uhW
                                                                                 '_))))
                                                                           g$t$9079$c1uhW))))
                                                                     (g$syntax-dispatch$7982$c1uhW
                                                                       g$t$9079$c1uhW
                                                                       '()))))
                                                                 g$dy$9073$c1uhW)))
                                                             g$ls/false$9078$c1uhW)
                                                           (g$syntax-violation$8094$c1uhW
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$9077$c1uhW))))
                                                      (g$syntax-dispatch$7982$c1uhW
                                                        g$t$9077$c1uhW
                                                        '_))))
                                                  g$t$9074$c1uhW))))
                                            (g$syntax-dispatch$7982$c1uhW
                                              g$t$9074$c1uhW
                                              '(#(scheme-id quote) any)))))
                                        g$x$9069$c1uhW)))
                                    g$ls/false$9072$c1uhW)
                                  ((case-lambda
                                     ((g$t$9083$c1uhW)
                                      ((case-lambda
                                         ((g$ls/false$9084$c1uhW)
                                          (if g$ls/false$9084$c1uhW
                                            (apply
                                              (case-lambda
                                                ((g$stuff$9085$c1uhW)
                                                 (g$cons*$5065$c1uhW
                                                   (g$scheme-stx$7925$c1uhW
                                                     'list)
                                                   g$x$9069$c1uhW
                                                   g$stuff$9085$c1uhW)))
                                              g$ls/false$9084$c1uhW)
                                            ((case-lambda
                                               ((g$t$9086$c1uhW)
                                                ((case-lambda
                                                   ((g$ls/false$9087$c1uhW)
                                                    (if g$ls/false$9087$c1uhW
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7925$c1uhW
                                                               'cons)
                                                             g$x$9069$c1uhW
                                                             g$y$9070$c1uhW)))
                                                        g$ls/false$9087$c1uhW)
                                                      (g$syntax-violation$8094$c1uhW
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$9086$c1uhW))))
                                                 (g$syntax-dispatch$7982$c1uhW
                                                   g$t$9086$c1uhW
                                                   '_))))
                                             g$t$9083$c1uhW))))
                                       (g$syntax-dispatch$7982$c1uhW
                                         g$t$9083$c1uhW
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$9071$c1uhW))))
                             (g$syntax-dispatch$7982$c1uhW
                               g$t$9071$c1uhW
                               '(#(scheme-id quote) any)))))
                         g$y$9070$c1uhW))))
                   (g$quasiappend$8979$c1uhW
                     (case-lambda
                       ((g$x$9056$c1uhW g$y$9057$c1uhW)
                        ((case-lambda
                           ((g$ls$9058$c1uhW)
                            (if (null? g$ls$9058$c1uhW)
                              (list (g$scheme-stx$7925$c1uhW 'quote) '())
                              (if (null? (cdr g$ls$9058$c1uhW))
                                (car g$ls$9058$c1uhW)
                                (g$cons*$5065$c1uhW
                                  (g$scheme-stx$7925$c1uhW 'append)
                                  g$ls$9058$c1uhW)))))
                         ((letrec ((g$f$9059$c1uhW
                                     (case-lambda
                                       ((g$x$9060$c1uhW)
                                        (if (null? g$x$9060$c1uhW)
                                          ((case-lambda
                                             ((g$t$9061$c1uhW)
                                              ((case-lambda
                                                 ((g$ls/false$9062$c1uhW)
                                                  (if g$ls/false$9062$c1uhW
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$9062$c1uhW)
                                                    ((case-lambda
                                                       ((g$t$9063$c1uhW)
                                                        ((case-lambda
                                                           ((g$ls/false$9064$c1uhW)
                                                            (if g$ls/false$9064$c1uhW
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$9057$c1uhW)))
                                                                g$ls/false$9064$c1uhW)
                                                              (g$syntax-violation$8094$c1uhW
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9063$c1uhW))))
                                                         (g$syntax-dispatch$7982$c1uhW
                                                           g$t$9063$c1uhW
                                                           '_))))
                                                     g$t$9061$c1uhW))))
                                               (g$syntax-dispatch$7982$c1uhW
                                                 g$t$9061$c1uhW
                                                 '(#(scheme-id quote) ())))))
                                           g$y$9057$c1uhW)
                                          ((case-lambda
                                             ((g$t$9065$c1uhW)
                                              ((case-lambda
                                                 ((g$ls/false$9066$c1uhW)
                                                  (if g$ls/false$9066$c1uhW
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$9059$c1uhW
                                                           (cdr g$x$9060$c1uhW))))
                                                      g$ls/false$9066$c1uhW)
                                                    ((case-lambda
                                                       ((g$t$9067$c1uhW)
                                                        ((case-lambda
                                                           ((g$ls/false$9068$c1uhW)
                                                            (if g$ls/false$9068$c1uhW
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$9060$c1uhW)
                                                                     (g$f$9059$c1uhW
                                                                       (cdr g$x$9060$c1uhW)))))
                                                                g$ls/false$9068$c1uhW)
                                                              (g$syntax-violation$8094$c1uhW
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9067$c1uhW))))
                                                         (g$syntax-dispatch$7982$c1uhW
                                                           g$t$9067$c1uhW
                                                           '_))))
                                                     g$t$9065$c1uhW))))
                                               (g$syntax-dispatch$7982$c1uhW
                                                 g$t$9065$c1uhW
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$9060$c1uhW)))))))
                            g$f$9059$c1uhW)
                          g$x$9056$c1uhW)))))
                   (g$quasivector$8980$c1uhW
                     (case-lambda
                       ((g$x$9031$c1uhW)
                        ((case-lambda
                           ((g$pat-x$9032$c1uhW)
                            ((case-lambda
                               ((g$t$9033$c1uhW)
                                ((case-lambda
                                   ((g$ls/false$9034$c1uhW)
                                    (if g$ls/false$9034$c1uhW
                                      (apply
                                        (case-lambda
                                          ((g$x*$9035$c1uhW)
                                           (list
                                             (g$scheme-stx$7925$c1uhW 'quote)
                                             (list->vector g$x*$9035$c1uhW))))
                                        g$ls/false$9034$c1uhW)
                                      ((case-lambda
                                         ((g$t$9036$c1uhW)
                                          ((case-lambda
                                             ((g$ls/false$9037$c1uhW)
                                              (if g$ls/false$9037$c1uhW
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$9038$c1uhW
                                                                 (case-lambda
                                                                   ((g$x$9039$c1uhW
                                                                      g$k$9040$c1uhW)
                                                                    ((case-lambda
                                                                       ((g$t$9041$c1uhW)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9042$c1uhW)
                                                                            (if g$ls/false$9042$c1uhW
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$9043$c1uhW)
                                                                                   (g$k$9040$c1uhW
                                                                                     (g$map$5063$c1uhW
                                                                                       (case-lambda
                                                                                         ((g$x$9044$c1uhW)
                                                                                          (list
                                                                                            (g$scheme-stx$7925$c1uhW
                                                                                              'quote)
                                                                                            g$x$9044$c1uhW)))
                                                                                       g$x*$9043$c1uhW))))
                                                                                g$ls/false$9042$c1uhW)
                                                                              ((case-lambda
                                                                                 ((g$t$9045$c1uhW)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$9046$c1uhW)
                                                                                      (if g$ls/false$9046$c1uhW
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$9047$c1uhW)
                                                                                             (g$k$9040$c1uhW
                                                                                               g$x*$9047$c1uhW)))
                                                                                          g$ls/false$9046$c1uhW)
                                                                                        ((case-lambda
                                                                                           ((g$t$9048$c1uhW)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$9049$c1uhW)
                                                                                                (if g$ls/false$9049$c1uhW
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$9050$c1uhW
                                                                                                         g$y$9051$c1uhW)
                                                                                                       (g$f$9038$c1uhW
                                                                                                         g$y$9051$c1uhW
                                                                                                         (case-lambda
                                                                                                           ((g$ls$9052$c1uhW)
                                                                                                            (g$k$9040$c1uhW
                                                                                                              (cons
                                                                                                                g$x$9050$c1uhW
                                                                                                                g$ls$9052$c1uhW)))))))
                                                                                                    g$ls/false$9049$c1uhW)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$9053$c1uhW)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$9054$c1uhW)
                                                                                                          (if g$ls/false$9054$c1uhW
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7925$c1uhW
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$9032$c1uhW)))
                                                                                                              g$ls/false$9054$c1uhW)
                                                                                                            (g$syntax-violation$8094$c1uhW
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$9053$c1uhW))))
                                                                                                       (g$syntax-dispatch$7982$c1uhW
                                                                                                         g$t$9053$c1uhW
                                                                                                         '_))))
                                                                                                   g$t$9048$c1uhW))))
                                                                                             (g$syntax-dispatch$7982$c1uhW
                                                                                               g$t$9048$c1uhW
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$9045$c1uhW))))
                                                                                   (g$syntax-dispatch$7982$c1uhW
                                                                                     g$t$9045$c1uhW
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$9041$c1uhW))))
                                                                         (g$syntax-dispatch$7982$c1uhW
                                                                           g$t$9041$c1uhW
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$9039$c1uhW)))))
                                                        g$f$9038$c1uhW)
                                                      g$x$9031$c1uhW
                                                      (case-lambda
                                                        ((g$ls$9055$c1uhW)
                                                         (g$cons*$5065$c1uhW
                                                           (g$scheme-stx$7925$c1uhW
                                                             'vector)
                                                           g$ls$9055$c1uhW))))))
                                                  g$ls/false$9037$c1uhW)
                                                (g$syntax-violation$8094$c1uhW
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$9036$c1uhW))))
                                           (g$syntax-dispatch$7982$c1uhW
                                             g$t$9036$c1uhW
                                             '_))))
                                       g$t$9033$c1uhW))))
                                 (g$syntax-dispatch$7982$c1uhW
                                   g$t$9033$c1uhW
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$9032$c1uhW)))
                         g$x$9031$c1uhW))))
                   (g$vquasi$8981$c1uhW
                     (case-lambda
                       ((g$p$9014$c1uhW g$lev$9015$c1uhW)
                        ((case-lambda
                           ((g$t$9016$c1uhW)
                            ((case-lambda
                               ((g$ls/false$9017$c1uhW)
                                (if g$ls/false$9017$c1uhW
                                  (apply
                                    (case-lambda
                                      ((g$p$9018$c1uhW g$q$9019$c1uhW)
                                       ((case-lambda
                                          ((g$t$9020$c1uhW)
                                           ((case-lambda
                                              ((g$ls/false$9021$c1uhW)
                                               (if g$ls/false$9021$c1uhW
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9022$c1uhW)
                                                      (if (= g$lev$9015$c1uhW
                                                             '0)
                                                        (g$quasicons*$8977$c1uhW
                                                          g$p$9022$c1uhW
                                                          (g$vquasi$8981$c1uhW
                                                            g$q$9019$c1uhW
                                                            g$lev$9015$c1uhW))
                                                        (g$quasicons$8978$c1uhW
                                                          (g$quasicons$8978$c1uhW
                                                            (g$datum$8961$c1uhW
                                                              'unquote)
                                                            (g$quasi$8982$c1uhW
                                                              g$p$9022$c1uhW
                                                              (- g$lev$9015$c1uhW
                                                                 '1)))
                                                          (g$vquasi$8981$c1uhW
                                                            g$q$9019$c1uhW
                                                            g$lev$9015$c1uhW)))))
                                                   g$ls/false$9021$c1uhW)
                                                 ((case-lambda
                                                    ((g$t$9023$c1uhW)
                                                     ((case-lambda
                                                        ((g$ls/false$9024$c1uhW)
                                                         (if g$ls/false$9024$c1uhW
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$9025$c1uhW)
                                                                (if (= g$lev$9015$c1uhW
                                                                       '0)
                                                                  (g$quasiappend$8979$c1uhW
                                                                    g$p$9025$c1uhW
                                                                    (g$vquasi$8981$c1uhW
                                                                      g$q$9019$c1uhW
                                                                      g$lev$9015$c1uhW))
                                                                  (g$quasicons$8978$c1uhW
                                                                    (g$quasicons$8978$c1uhW
                                                                      (g$datum$8961$c1uhW
                                                                        'unquote-splicing)
                                                                      (g$quasi$8982$c1uhW
                                                                        g$p$9025$c1uhW
                                                                        (- g$lev$9015$c1uhW
                                                                           '1)))
                                                                    (g$vquasi$8981$c1uhW
                                                                      g$q$9019$c1uhW
                                                                      g$lev$9015$c1uhW)))))
                                                             g$ls/false$9024$c1uhW)
                                                           ((case-lambda
                                                              ((g$t$9026$c1uhW)
                                                               ((case-lambda
                                                                  ((g$ls/false$9027$c1uhW)
                                                                   (if g$ls/false$9027$c1uhW
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$9028$c1uhW)
                                                                          (g$quasicons$8978$c1uhW
                                                                            (g$quasi$8982$c1uhW
                                                                              g$p$9028$c1uhW
                                                                              g$lev$9015$c1uhW)
                                                                            (g$vquasi$8981$c1uhW
                                                                              g$q$9019$c1uhW
                                                                              g$lev$9015$c1uhW))))
                                                                       g$ls/false$9027$c1uhW)
                                                                     (g$syntax-violation$8094$c1uhW
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$9026$c1uhW))))
                                                                (g$syntax-dispatch$7982$c1uhW
                                                                  g$t$9026$c1uhW
                                                                  'any))))
                                                            g$t$9023$c1uhW))))
                                                      (g$syntax-dispatch$7982$c1uhW
                                                        g$t$9023$c1uhW
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$9020$c1uhW))))
                                            (g$syntax-dispatch$7982$c1uhW
                                              g$t$9020$c1uhW
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$9018$c1uhW)))
                                    g$ls/false$9017$c1uhW)
                                  ((case-lambda
                                     ((g$t$9029$c1uhW)
                                      ((case-lambda
                                         ((g$ls/false$9030$c1uhW)
                                          (if g$ls/false$9030$c1uhW
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7925$c1uhW
                                                     'quote)
                                                   '())))
                                              g$ls/false$9030$c1uhW)
                                            (g$syntax-violation$8094$c1uhW
                                              '#f
                                              '"invalid syntax"
                                              g$t$9029$c1uhW))))
                                       (g$syntax-dispatch$7982$c1uhW
                                         g$t$9029$c1uhW
                                         '()))))
                                   g$t$9016$c1uhW))))
                             (g$syntax-dispatch$7982$c1uhW
                               g$t$9016$c1uhW
                               '(any . any)))))
                         g$p$9014$c1uhW))))
                   (g$quasi$8982$c1uhW
                     (case-lambda
                       ((g$p$8987$c1uhW g$lev$8988$c1uhW)
                        ((case-lambda
                           ((g$t$8989$c1uhW)
                            ((case-lambda
                               ((g$ls/false$8990$c1uhW)
                                (if g$ls/false$8990$c1uhW
                                  (apply
                                    (case-lambda
                                      ((g$p$8991$c1uhW)
                                       (if (= g$lev$8988$c1uhW '0)
                                         g$p$8991$c1uhW
                                         (g$quasicons$8978$c1uhW
                                           (g$datum$8961$c1uhW 'unquote)
                                           (g$quasi$8982$c1uhW
                                             (list g$p$8991$c1uhW)
                                             (- g$lev$8988$c1uhW '1))))))
                                    g$ls/false$8990$c1uhW)
                                  ((case-lambda
                                     ((g$t$8992$c1uhW)
                                      ((case-lambda
                                         ((g$ls/false$8993$c1uhW)
                                          (if g$ls/false$8993$c1uhW
                                            (apply
                                              (case-lambda
                                                ((g$p$8994$c1uhW g$q$8995$c1uhW)
                                                 (if (= g$lev$8988$c1uhW '0)
                                                   (g$quasicons*$8977$c1uhW
                                                     g$p$8994$c1uhW
                                                     (g$quasi$8982$c1uhW
                                                       g$q$8995$c1uhW
                                                       g$lev$8988$c1uhW))
                                                   (g$quasicons$8978$c1uhW
                                                     (g$quasicons$8978$c1uhW
                                                       (g$datum$8961$c1uhW
                                                         'unquote)
                                                       (g$quasi$8982$c1uhW
                                                         g$p$8994$c1uhW
                                                         (- g$lev$8988$c1uhW
                                                            '1)))
                                                     (g$quasi$8982$c1uhW
                                                       g$q$8995$c1uhW
                                                       g$lev$8988$c1uhW)))))
                                              g$ls/false$8993$c1uhW)
                                            ((case-lambda
                                               ((g$t$8996$c1uhW)
                                                ((case-lambda
                                                   ((g$ls/false$8997$c1uhW)
                                                    (if g$ls/false$8997$c1uhW
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8998$c1uhW
                                                             g$q$8999$c1uhW)
                                                           (if (= g$lev$8988$c1uhW
                                                                  '0)
                                                             (g$quasiappend$8979$c1uhW
                                                               g$p$8998$c1uhW
                                                               (g$quasi$8982$c1uhW
                                                                 g$q$8999$c1uhW
                                                                 g$lev$8988$c1uhW))
                                                             (g$quasicons$8978$c1uhW
                                                               (g$quasicons$8978$c1uhW
                                                                 (g$datum$8961$c1uhW
                                                                   'unquote-splicing)
                                                                 (g$quasi$8982$c1uhW
                                                                   g$p$8998$c1uhW
                                                                   (- g$lev$8988$c1uhW
                                                                      '1)))
                                                               (g$quasi$8982$c1uhW
                                                                 g$q$8999$c1uhW
                                                                 g$lev$8988$c1uhW)))))
                                                        g$ls/false$8997$c1uhW)
                                                      ((case-lambda
                                                         ((g$t$9000$c1uhW)
                                                          ((case-lambda
                                                             ((g$ls/false$9001$c1uhW)
                                                              (if g$ls/false$9001$c1uhW
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$9002$c1uhW)
                                                                     (g$quasicons$8978$c1uhW
                                                                       (g$datum$8961$c1uhW
                                                                         'quasiquote)
                                                                       (g$quasi$8982$c1uhW
                                                                         (list
                                                                           g$p$9002$c1uhW)
                                                                         (+ g$lev$8988$c1uhW
                                                                            '1)))))
                                                                  g$ls/false$9001$c1uhW)
                                                                ((case-lambda
                                                                   ((g$t$9003$c1uhW)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9004$c1uhW)
                                                                        (if g$ls/false$9004$c1uhW
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$9005$c1uhW
                                                                                 g$q$9006$c1uhW)
                                                                               (g$quasicons$8978$c1uhW
                                                                                 (g$quasi$8982$c1uhW
                                                                                   g$p$9005$c1uhW
                                                                                   g$lev$8988$c1uhW)
                                                                                 (g$quasi$8982$c1uhW
                                                                                   g$q$9006$c1uhW
                                                                                   g$lev$8988$c1uhW))))
                                                                            g$ls/false$9004$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$t$9007$c1uhW)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9008$c1uhW)
                                                                                  (if (if g$ls/false$9008$c1uhW
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$9009$c1uhW)
                                                                                               (not (g$stx?$7676$c1uhW
                                                                                                      g$x$9009$c1uhW))))
                                                                                            g$ls/false$9008$c1uhW))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$9010$c1uhW)
                                                                                         (g$quasivector$8980$c1uhW
                                                                                           (g$vquasi$8981$c1uhW
                                                                                             g$x$9010$c1uhW
                                                                                             g$lev$8988$c1uhW))))
                                                                                      g$ls/false$9008$c1uhW)
                                                                                    ((case-lambda
                                                                                       ((g$t$9011$c1uhW)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9012$c1uhW)
                                                                                            (if g$ls/false$9012$c1uhW
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9013$c1uhW)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7925$c1uhW
                                                                                                       'quote)
                                                                                                     g$p$9013$c1uhW)))
                                                                                                g$ls/false$9012$c1uhW)
                                                                                              (g$syntax-violation$8094$c1uhW
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9011$c1uhW))))
                                                                                         (g$syntax-dispatch$7982$c1uhW
                                                                                           g$t$9011$c1uhW
                                                                                           'any))))
                                                                                     g$t$9007$c1uhW))))
                                                                               (g$syntax-dispatch$7982$c1uhW
                                                                                 g$t$9007$c1uhW
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9003$c1uhW))))
                                                                     (g$syntax-dispatch$7982$c1uhW
                                                                       g$t$9003$c1uhW
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9000$c1uhW))))
                                                           (g$syntax-dispatch$7982$c1uhW
                                                             g$t$9000$c1uhW
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8996$c1uhW))))
                                                 (g$syntax-dispatch$7982$c1uhW
                                                   g$t$8996$c1uhW
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8992$c1uhW))))
                                       (g$syntax-dispatch$7982$c1uhW
                                         g$t$8992$c1uhW
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8989$c1uhW))))
                             (g$syntax-dispatch$7982$c1uhW
                               g$t$8989$c1uhW
                               '(#(scheme-id unquote) any)))))
                         g$p$8987$c1uhW)))))
           (case-lambda
             ((g$x$8983$c1uhW)
              ((case-lambda
                 ((g$t$8984$c1uhW)
                  ((case-lambda
                     ((g$ls/false$8985$c1uhW)
                      (if g$ls/false$8985$c1uhW
                        (apply
                          (case-lambda
                            ((g$e$8986$c1uhW)
                             (g$quasi$8982$c1uhW g$e$8986$c1uhW '0)))
                          g$ls/false$8985$c1uhW)
                        (g$syntax-violation$8094$c1uhW
                          '#f
                          '"invalid syntax"
                          g$t$8984$c1uhW))))
                   (g$syntax-dispatch$7982$c1uhW g$t$8984$c1uhW '(_ any)))))
               g$x$8983$c1uhW))))))))
   (g$quasisyntax-macro$7974$c1uhW
     g$quasisyntax-macro$11477$c1uhW
     ((case-lambda
        (()
         (letrec* ((g$quasi$9093$c1uhW
                     (case-lambda
                       ((g$p$9107$c1uhW g$lev$9108$c1uhW)
                        ((case-lambda
                           ((g$t$9109$c1uhW)
                            ((case-lambda
                               ((g$ls/false$9110$c1uhW)
                                (if g$ls/false$9110$c1uhW
                                  (apply
                                    (case-lambda
                                      ((g$p$9111$c1uhW)
                                       (if (= g$lev$9108$c1uhW '0)
                                         ((case-lambda
                                            ((g$g$9112$c1uhW)
                                             (values
                                               (list g$g$9112$c1uhW)
                                               (list g$p$9111$c1uhW)
                                               g$g$9112$c1uhW)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$9093$c1uhW
                                                g$p$9111$c1uhW
                                                (- g$lev$9108$c1uhW '1))))
                                           (case-lambda
                                             ((g$lhs*$9116$c1uhW
                                                g$rhs*$9117$c1uhW
                                                g$p$9118$c1uhW)
                                              ((case-lambda
                                                 ((g$p$9119$c1uhW
                                                    g$rhs*$9120$c1uhW
                                                    g$lhs*$9121$c1uhW)
                                                  (values
                                                    g$lhs*$9121$c1uhW
                                                    g$rhs*$9120$c1uhW
                                                    (list
                                                      'unsyntax
                                                      g$p$9119$c1uhW))))
                                               g$p$9118$c1uhW
                                               g$rhs*$9117$c1uhW
                                               g$lhs*$9116$c1uhW)))))))
                                    g$ls/false$9110$c1uhW)
                                  ((case-lambda
                                     ((g$t$9122$c1uhW)
                                      ((case-lambda
                                         ((g$ls/false$9123$c1uhW)
                                          (if (if g$ls/false$9123$c1uhW
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$9108$c1uhW '0)))
                                                    g$ls/false$9123$c1uhW))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$8094$c1uhW
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$9107$c1uhW)))
                                              g$ls/false$9123$c1uhW)
                                            ((case-lambda
                                               ((g$t$9124$c1uhW)
                                                ((case-lambda
                                                   ((g$ls/false$9125$c1uhW)
                                                    (if g$ls/false$9125$c1uhW
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$9126$c1uhW
                                                             g$q$9127$c1uhW)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$9093$c1uhW
                                                                  g$q$9127$c1uhW
                                                                  g$lev$9108$c1uhW)))
                                                             (case-lambda
                                                               ((g$lhs*$9131$c1uhW
                                                                  g$rhs*$9132$c1uhW
                                                                  g$q$9133$c1uhW)
                                                                ((case-lambda
                                                                   ((g$q$9134$c1uhW
                                                                      g$rhs*$9135$c1uhW
                                                                      g$lhs*$9136$c1uhW)
                                                                    (if (= g$lev$9108$c1uhW
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$9137$c1uhW)
                                                                          (values
                                                                            (append
                                                                              g$g*$9137$c1uhW
                                                                              g$lhs*$9136$c1uhW)
                                                                            (append
                                                                              g$p*$9126$c1uhW
                                                                              g$rhs*$9135$c1uhW)
                                                                            (append
                                                                              g$g*$9137$c1uhW
                                                                              g$q$9134$c1uhW))))
                                                                       (g$map$5063$c1uhW
                                                                         (case-lambda
                                                                           ((g$x$9138$c1uhW)
                                                                            (gensym)))
                                                                         g$p*$9126$c1uhW))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$9093$c1uhW
                                                                             g$p*$9126$c1uhW
                                                                             (- g$lev$9108$c1uhW
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$9142$c1uhW
                                                                             g$rhs2*$9143$c1uhW
                                                                             g$p*$9144$c1uhW)
                                                                           ((case-lambda
                                                                              ((g$p*$9145$c1uhW
                                                                                 g$rhs2*$9146$c1uhW
                                                                                 g$lhs2*$9147$c1uhW)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$9147$c1uhW
                                                                                   g$lhs*$9136$c1uhW)
                                                                                 (append
                                                                                   g$rhs2*$9146$c1uhW
                                                                                   g$rhs*$9135$c1uhW)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$9145$c1uhW)
                                                                                   g$q$9134$c1uhW))))
                                                                            g$p*$9144$c1uhW
                                                                            g$rhs2*$9143$c1uhW
                                                                            g$lhs2*$9142$c1uhW)))))))
                                                                 g$q$9133$c1uhW
                                                                 g$rhs*$9132$c1uhW
                                                                 g$lhs*$9131$c1uhW))))))
                                                        g$ls/false$9125$c1uhW)
                                                      ((case-lambda
                                                         ((g$t$9148$c1uhW)
                                                          ((case-lambda
                                                             ((g$ls/false$9149$c1uhW)
                                                              (if g$ls/false$9149$c1uhW
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$9150$c1uhW
                                                                       g$q$9151$c1uhW)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$9093$c1uhW
                                                                            g$q$9151$c1uhW
                                                                            g$lev$9108$c1uhW)))
                                                                       (case-lambda
                                                                         ((g$lhs*$9155$c1uhW
                                                                            g$rhs*$9156$c1uhW
                                                                            g$q$9157$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$q$9158$c1uhW
                                                                                g$rhs*$9159$c1uhW
                                                                                g$lhs*$9160$c1uhW)
                                                                              (if (= g$lev$9108$c1uhW
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$9161$c1uhW)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$5063$c1uhW
                                                                                          (case-lambda
                                                                                            ((g$g$9162$c1uhW)
                                                                                             (cons
                                                                                               g$g$9162$c1uhW
                                                                                               '(...))))
                                                                                          g$g*$9161$c1uhW)
                                                                                        g$lhs*$9160$c1uhW)
                                                                                      (append
                                                                                        g$p*$9150$c1uhW
                                                                                        g$rhs*$9159$c1uhW)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$5063$c1uhW
                                                                                            (case-lambda
                                                                                              ((g$g$9163$c1uhW)
                                                                                               (cons
                                                                                                 g$g$9163$c1uhW
                                                                                                 '(...))))
                                                                                            g$g*$9161$c1uhW))
                                                                                        g$q$9158$c1uhW))))
                                                                                 (g$map$5063$c1uhW
                                                                                   (case-lambda
                                                                                     ((g$x$9164$c1uhW)
                                                                                      (gensym)))
                                                                                   g$p*$9150$c1uhW))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$9093$c1uhW
                                                                                       g$p*$9150$c1uhW
                                                                                       (- g$lev$9108$c1uhW
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$9168$c1uhW
                                                                                       g$rhs2*$9169$c1uhW
                                                                                       g$p*$9170$c1uhW)
                                                                                     ((case-lambda
                                                                                        ((g$p*$9171$c1uhW
                                                                                           g$rhs2*$9172$c1uhW
                                                                                           g$lhs2*$9173$c1uhW)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$9173$c1uhW
                                                                                             g$lhs*$9160$c1uhW)
                                                                                           (append
                                                                                             g$rhs2*$9172$c1uhW
                                                                                             g$rhs*$9159$c1uhW)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$9171$c1uhW)
                                                                                             g$q$9158$c1uhW))))
                                                                                      g$p*$9170$c1uhW
                                                                                      g$rhs2*$9169$c1uhW
                                                                                      g$lhs2*$9168$c1uhW)))))))
                                                                           g$q$9157$c1uhW
                                                                           g$rhs*$9156$c1uhW
                                                                           g$lhs*$9155$c1uhW))))))
                                                                  g$ls/false$9149$c1uhW)
                                                                ((case-lambda
                                                                   ((g$t$9174$c1uhW)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9175$c1uhW)
                                                                        (if (if g$ls/false$9175$c1uhW
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$9108$c1uhW
                                                                                        '0)))
                                                                                  g$ls/false$9175$c1uhW))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$8094$c1uhW
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$9107$c1uhW)))
                                                                            g$ls/false$9175$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$t$9176$c1uhW)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9177$c1uhW)
                                                                                  (if g$ls/false$9177$c1uhW
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$9178$c1uhW)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$9093$c1uhW
                                                                                                g$p$9178$c1uhW
                                                                                                (+ g$lev$9108$c1uhW
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$9182$c1uhW
                                                                                                g$rhs*$9183$c1uhW
                                                                                                g$p$9184$c1uhW)
                                                                                              ((case-lambda
                                                                                                 ((g$p$9185$c1uhW
                                                                                                    g$rhs*$9186$c1uhW
                                                                                                    g$lhs*$9187$c1uhW)
                                                                                                  (values
                                                                                                    g$lhs*$9187$c1uhW
                                                                                                    g$rhs*$9186$c1uhW
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$9185$c1uhW))))
                                                                                               g$p$9184$c1uhW
                                                                                               g$rhs*$9183$c1uhW
                                                                                               g$lhs*$9182$c1uhW))))))
                                                                                      g$ls/false$9177$c1uhW)
                                                                                    ((case-lambda
                                                                                       ((g$t$9188$c1uhW)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9189$c1uhW)
                                                                                            (if g$ls/false$9189$c1uhW
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9190$c1uhW
                                                                                                     g$q$9191$c1uhW)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$9093$c1uhW
                                                                                                          g$p$9190$c1uhW
                                                                                                          g$lev$9108$c1uhW)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$9198$c1uhW
                                                                                                          g$rhs*$9199$c1uhW
                                                                                                          g$p$9200$c1uhW)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$9093$c1uhW
                                                                                                               g$q$9191$c1uhW
                                                                                                               g$lev$9108$c1uhW)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$9201$c1uhW
                                                                                                               g$rhs2*$9202$c1uhW
                                                                                                               g$q$9203$c1uhW)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$9204$c1uhW
                                                                                                                   g$rhs2*$9205$c1uhW
                                                                                                                   g$lhs2*$9206$c1uhW
                                                                                                                   g$p$9207$c1uhW
                                                                                                                   g$rhs*$9208$c1uhW
                                                                                                                   g$lhs*$9209$c1uhW)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$9206$c1uhW
                                                                                                                     g$lhs*$9209$c1uhW)
                                                                                                                   (append
                                                                                                                     g$rhs2*$9205$c1uhW
                                                                                                                     g$rhs*$9208$c1uhW)
                                                                                                                   (cons
                                                                                                                     g$p$9207$c1uhW
                                                                                                                     g$q$9204$c1uhW))))
                                                                                                              g$q$9203$c1uhW
                                                                                                              g$rhs2*$9202$c1uhW
                                                                                                              g$lhs2*$9201$c1uhW
                                                                                                              g$p$9200$c1uhW
                                                                                                              g$rhs*$9199$c1uhW
                                                                                                              g$lhs*$9198$c1uhW)))))))))
                                                                                                g$ls/false$9189$c1uhW)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9210$c1uhW)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9211$c1uhW)
                                                                                                      (if g$ls/false$9211$c1uhW
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$9212$c1uhW)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$9093$c1uhW
                                                                                                                    g$x*$9212$c1uhW
                                                                                                                    g$lev$9108$c1uhW)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$9216$c1uhW
                                                                                                                    g$rhs*$9217$c1uhW
                                                                                                                    g$x*$9218$c1uhW)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$9219$c1uhW
                                                                                                                        g$rhs*$9220$c1uhW
                                                                                                                        g$lhs*$9221$c1uhW)
                                                                                                                      (values
                                                                                                                        g$lhs*$9221$c1uhW
                                                                                                                        g$rhs*$9220$c1uhW
                                                                                                                        (list->vector
                                                                                                                          g$x*$9219$c1uhW))))
                                                                                                                   g$x*$9218$c1uhW
                                                                                                                   g$rhs*$9217$c1uhW
                                                                                                                   g$lhs*$9216$c1uhW))))))
                                                                                                          g$ls/false$9211$c1uhW)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9222$c1uhW)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9223$c1uhW)
                                                                                                                (if g$ls/false$9223$c1uhW
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$9107$c1uhW)))
                                                                                                                    g$ls/false$9223$c1uhW)
                                                                                                                  (g$syntax-violation$8094$c1uhW
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9222$c1uhW))))
                                                                                                             (g$syntax-dispatch$7982$c1uhW
                                                                                                               g$t$9222$c1uhW
                                                                                                               '_))))
                                                                                                         g$t$9210$c1uhW))))
                                                                                                   (g$syntax-dispatch$7982$c1uhW
                                                                                                     g$t$9210$c1uhW
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$9188$c1uhW))))
                                                                                         (g$syntax-dispatch$7982$c1uhW
                                                                                           g$t$9188$c1uhW
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$9176$c1uhW))))
                                                                               (g$syntax-dispatch$7982$c1uhW
                                                                                 g$t$9176$c1uhW
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$9174$c1uhW))))
                                                                     (g$syntax-dispatch$7982$c1uhW
                                                                       g$t$9174$c1uhW
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$9148$c1uhW))))
                                                           (g$syntax-dispatch$7982$c1uhW
                                                             g$t$9148$c1uhW
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$9124$c1uhW))))
                                                 (g$syntax-dispatch$7982$c1uhW
                                                   g$t$9124$c1uhW
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9122$c1uhW))))
                                       (g$syntax-dispatch$7982$c1uhW
                                         g$t$9122$c1uhW
                                         '#(scheme-id unsyntax)))))
                                   g$t$9109$c1uhW))))
                             (g$syntax-dispatch$7982$c1uhW
                               g$t$9109$c1uhW
                               '(#(scheme-id unsyntax) any)))))
                         g$p$9107$c1uhW)))))
           (case-lambda
             ((g$x$9094$c1uhW)
              ((case-lambda
                 ((g$t$9095$c1uhW)
                  ((case-lambda
                     ((g$ls/false$9096$c1uhW)
                      (if g$ls/false$9096$c1uhW
                        (apply
                          (case-lambda
                            ((g$e$9097$c1uhW)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$9093$c1uhW g$e$9097$c1uhW '0)))
                               (case-lambda
                                 ((g$lhs*$9101$c1uhW
                                    g$rhs*$9102$c1uhW
                                    g$v$9103$c1uhW)
                                  ((case-lambda
                                     ((g$v$9104$c1uhW
                                        g$rhs*$9105$c1uhW
                                        g$lhs*$9106$c1uhW)
                                      (g$bless$7945$c1uhW
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$9105$c1uhW)
                                          '()
                                          (list
                                            g$lhs*$9106$c1uhW
                                            (list 'syntax g$v$9104$c1uhW))))))
                                   g$v$9103$c1uhW
                                   g$rhs*$9102$c1uhW
                                   g$lhs*$9101$c1uhW))))))
                          g$ls/false$9096$c1uhW)
                        (g$syntax-violation$8094$c1uhW
                          '#f
                          '"invalid syntax"
                          g$t$9095$c1uhW))))
                   (g$syntax-dispatch$7982$c1uhW g$t$9095$c1uhW '(_ any)))))
               g$x$9094$c1uhW))))))))
   (g$define-struct-macro$7975$c1uhW
     g$define-struct-macro$11478$c1uhW
     (case-lambda
       ((g$stx$9224$c1uhW)
        (g$syntax-violation$8094$c1uhW
          '#f
          '"define-struct not supported"
          g$stx$9224$c1uhW))))
   (g$define-record-type-macro$7976$c1uhW
     g$define-record-type-macro$11479$c1uhW
     (case-lambda
       ((g$x$9225$c1uhW)
        (letrec* ((g$id$9226$c1uhW
                    (case-lambda
                      ((g$ctxt$9478$c1uhW . g$str*$9479$c1uhW)
                       (g$datum->syntax$8096$c1uhW
                         g$ctxt$9478$c1uhW
                         (string->symbol
                           (apply
                             string-append
                             (g$map$5063$c1uhW
                               (case-lambda
                                 ((g$x$9480$c1uhW)
                                  (if (symbol? g$x$9480$c1uhW)
                                    (symbol->string g$x$9480$c1uhW)
                                    (if (string? g$x$9480$c1uhW)
                                      g$x$9480$c1uhW
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$9479$c1uhW)))))))
                  (g$get-record-name$9227$c1uhW
                    (case-lambda
                      ((g$spec$9469$c1uhW)
                       ((case-lambda
                          ((g$t$9470$c1uhW)
                           ((case-lambda
                              ((g$ls/false$9471$c1uhW)
                               (if g$ls/false$9471$c1uhW
                                 (apply
                                   (case-lambda
                                     ((g$foo$9472$c1uhW
                                        g$make-foo$9473$c1uhW
                                        g$foo?$9474$c1uhW)
                                      g$foo$9472$c1uhW))
                                   g$ls/false$9471$c1uhW)
                                 ((case-lambda
                                    ((g$t$9475$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$9476$c1uhW)
                                         (if g$ls/false$9476$c1uhW
                                           (apply
                                             (case-lambda
                                               ((g$foo$9477$c1uhW)
                                                g$foo$9477$c1uhW))
                                             g$ls/false$9476$c1uhW)
                                           (g$syntax-violation$8094$c1uhW
                                             '#f
                                             '"invalid syntax"
                                             g$t$9475$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$9475$c1uhW
                                        'any))))
                                  g$t$9470$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW
                              g$t$9470$c1uhW
                              '(any any any)))))
                        g$spec$9469$c1uhW))))
                  (g$get-record-constructor-name$9228$c1uhW
                    (case-lambda
                      ((g$spec$9459$c1uhW)
                       ((case-lambda
                          ((g$t$9460$c1uhW)
                           ((case-lambda
                              ((g$ls/false$9461$c1uhW)
                               (if g$ls/false$9461$c1uhW
                                 (apply
                                   (case-lambda
                                     ((g$foo$9462$c1uhW
                                        g$make-foo$9463$c1uhW
                                        g$foo?$9464$c1uhW)
                                      g$make-foo$9463$c1uhW))
                                   g$ls/false$9461$c1uhW)
                                 ((case-lambda
                                    ((g$t$9465$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$9466$c1uhW)
                                         (if (if g$ls/false$9466$c1uhW
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9467$c1uhW)
                                                      (g$id?$7704$c1uhW
                                                        g$foo$9467$c1uhW)))
                                                   g$ls/false$9466$c1uhW))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9468$c1uhW)
                                                (g$id$9226$c1uhW
                                                  g$foo$9468$c1uhW
                                                  '"make-"
                                                  (g$stx->datum$7715$c1uhW
                                                    g$foo$9468$c1uhW))))
                                             g$ls/false$9466$c1uhW)
                                           (g$syntax-violation$8094$c1uhW
                                             '#f
                                             '"invalid syntax"
                                             g$t$9465$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$9465$c1uhW
                                        'any))))
                                  g$t$9460$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW
                              g$t$9460$c1uhW
                              '(any any any)))))
                        g$spec$9459$c1uhW))))
                  (g$get-record-predicate-name$9229$c1uhW
                    (case-lambda
                      ((g$spec$9449$c1uhW)
                       ((case-lambda
                          ((g$t$9450$c1uhW)
                           ((case-lambda
                              ((g$ls/false$9451$c1uhW)
                               (if g$ls/false$9451$c1uhW
                                 (apply
                                   (case-lambda
                                     ((g$foo$9452$c1uhW
                                        g$make-foo$9453$c1uhW
                                        g$foo?$9454$c1uhW)
                                      g$foo?$9454$c1uhW))
                                   g$ls/false$9451$c1uhW)
                                 ((case-lambda
                                    ((g$t$9455$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$9456$c1uhW)
                                         (if (if g$ls/false$9456$c1uhW
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9457$c1uhW)
                                                      (g$id?$7704$c1uhW
                                                        g$foo$9457$c1uhW)))
                                                   g$ls/false$9456$c1uhW))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9458$c1uhW)
                                                (g$id$9226$c1uhW
                                                  g$foo$9458$c1uhW
                                                  (g$stx->datum$7715$c1uhW
                                                    g$foo$9458$c1uhW)
                                                  '"?")))
                                             g$ls/false$9456$c1uhW)
                                           (g$syntax-violation$8094$c1uhW
                                             '#f
                                             '"invalid syntax"
                                             g$t$9455$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$9455$c1uhW
                                        'any))))
                                  g$t$9450$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW
                              g$t$9450$c1uhW
                              '(any any any)))))
                        g$spec$9449$c1uhW))))
                  (g$get-clause$9230$c1uhW
                    (case-lambda
                      ((g$id$9440$c1uhW g$ls$9441$c1uhW)
                       ((case-lambda
                          ((g$t$9442$c1uhW)
                           ((case-lambda
                              ((g$ls/false$9443$c1uhW)
                               (if g$ls/false$9443$c1uhW
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9443$c1uhW)
                                 ((case-lambda
                                    ((g$t$9444$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$9445$c1uhW)
                                         (if g$ls/false$9445$c1uhW
                                           (apply
                                             (case-lambda
                                               ((g$x$9446$c1uhW
                                                  g$rest$9447$c1uhW
                                                  g$ls$9448$c1uhW)
                                                (if (g$free-id=?$7708$c1uhW
                                                      (g$bless$7945$c1uhW
                                                        g$id$9440$c1uhW)
                                                      g$x$9446$c1uhW)
                                                  (cons
                                                    g$x$9446$c1uhW
                                                    g$rest$9447$c1uhW)
                                                  (g$get-clause$9230$c1uhW
                                                    g$id$9440$c1uhW
                                                    g$ls$9448$c1uhW))))
                                             g$ls/false$9445$c1uhW)
                                           (g$syntax-violation$8094$c1uhW
                                             '#f
                                             '"invalid syntax"
                                             g$t$9444$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$9444$c1uhW
                                        '((any . any) . any)))))
                                  g$t$9442$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW g$t$9442$c1uhW '()))))
                        g$ls$9441$c1uhW))))
                  (g$foo-rtd-code$9231$c1uhW
                    (case-lambda
                      ((g$name$9399$c1uhW
                         g$clause*$9400$c1uhW
                         g$parent-rtd-code$9401$c1uhW)
                       (letrec* ((g$convert-field-spec*$9402$c1uhW
                                   (case-lambda
                                     ((g$ls$9427$c1uhW)
                                      (list->vector
                                        (g$map$5063$c1uhW
                                          (case-lambda
                                            ((g$x$9428$c1uhW)
                                             ((case-lambda
                                                ((g$t$9429$c1uhW)
                                                 ((case-lambda
                                                    ((g$ls/false$9430$c1uhW)
                                                     (if g$ls/false$9430$c1uhW
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$9431$c1uhW
                                                              g$rest$9432$c1uhW)
                                                            (list
                                                              'mutable
                                                              g$name$9431$c1uhW)))
                                                         g$ls/false$9430$c1uhW)
                                                       ((case-lambda
                                                          ((g$t$9433$c1uhW)
                                                           ((case-lambda
                                                              ((g$ls/false$9434$c1uhW)
                                                               (if g$ls/false$9434$c1uhW
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$9435$c1uhW
                                                                        g$rest$9436$c1uhW)
                                                                      (list
                                                                        'immutable
                                                                        g$name$9435$c1uhW)))
                                                                   g$ls/false$9434$c1uhW)
                                                                 ((case-lambda
                                                                    ((g$t$9437$c1uhW)
                                                                     ((case-lambda
                                                                        ((g$ls/false$9438$c1uhW)
                                                                         (if g$ls/false$9438$c1uhW
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$9439$c1uhW)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$9439$c1uhW)))
                                                                             g$ls/false$9438$c1uhW)
                                                                           (g$syntax-violation$8094$c1uhW
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$9437$c1uhW))))
                                                                      (g$syntax-dispatch$7982$c1uhW
                                                                        g$t$9437$c1uhW
                                                                        'any))))
                                                                  g$t$9433$c1uhW))))
                                                            (g$syntax-dispatch$7982$c1uhW
                                                              g$t$9433$c1uhW
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$9429$c1uhW))))
                                                  (g$syntax-dispatch$7982$c1uhW
                                                    g$t$9429$c1uhW
                                                    '(#(scheme-id mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$9428$c1uhW)))
                                          g$ls$9427$c1uhW))))))
                         ((case-lambda
                            ((g$uid-code$9403$c1uhW
                               g$sealed?$9404$c1uhW
                               g$opaque?$9405$c1uhW
                               g$fields$9406$c1uhW)
                             (g$bless$7945$c1uhW
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$9399$c1uhW)
                                 g$parent-rtd-code$9401$c1uhW
                                 g$uid-code$9403$c1uhW
                                 g$sealed?$9404$c1uhW
                                 g$opaque?$9405$c1uhW
                                 g$fields$9406$c1uhW))))
                          ((case-lambda
                             ((g$t$9407$c1uhW)
                              ((case-lambda
                                 ((g$ls/false$9408$c1uhW)
                                  (if g$ls/false$9408$c1uhW
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$9408$c1uhW)
                                    ((case-lambda
                                       ((g$t$9409$c1uhW)
                                        ((case-lambda
                                           ((g$ls/false$9410$c1uhW)
                                            (if g$ls/false$9410$c1uhW
                                              (apply
                                                (case-lambda
                                                  ((g$uid$9411$c1uhW)
                                                   (list
                                                     'quote
                                                     g$uid$9411$c1uhW)))
                                                g$ls/false$9410$c1uhW)
                                              ((case-lambda
                                                 ((g$t$9412$c1uhW)
                                                  ((case-lambda
                                                     ((g$ls/false$9413$c1uhW)
                                                      (if g$ls/false$9413$c1uhW
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$9413$c1uhW)
                                                        (g$syntax-violation$8094$c1uhW
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$9412$c1uhW))))
                                                   (g$syntax-dispatch$7982$c1uhW
                                                     g$t$9412$c1uhW
                                                     '_))))
                                               g$t$9409$c1uhW))))
                                         (g$syntax-dispatch$7982$c1uhW
                                           g$t$9409$c1uhW
                                           '(_ any)))))
                                     g$t$9407$c1uhW))))
                               (g$syntax-dispatch$7982$c1uhW
                                 g$t$9407$c1uhW
                                 '(_)))))
                           (g$get-clause$9230$c1uhW
                             'nongenerative
                             g$clause*$9400$c1uhW))
                          ((case-lambda
                             ((g$t$9414$c1uhW)
                              ((case-lambda
                                 ((g$ls/false$9415$c1uhW)
                                  (if g$ls/false$9415$c1uhW
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9415$c1uhW)
                                    ((case-lambda
                                       ((g$t$9416$c1uhW)
                                        ((case-lambda
                                           ((g$ls/false$9417$c1uhW)
                                            (if g$ls/false$9417$c1uhW
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9417$c1uhW)
                                              (g$syntax-violation$8094$c1uhW
                                                '#f
                                                '"invalid syntax"
                                                g$t$9416$c1uhW))))
                                         (g$syntax-dispatch$7982$c1uhW
                                           g$t$9416$c1uhW
                                           '_))))
                                     g$t$9414$c1uhW))))
                               (g$syntax-dispatch$7982$c1uhW
                                 g$t$9414$c1uhW
                                 '(_ #(atom #t))))))
                           (g$get-clause$9230$c1uhW
                             'sealed
                             g$clause*$9400$c1uhW))
                          ((case-lambda
                             ((g$t$9418$c1uhW)
                              ((case-lambda
                                 ((g$ls/false$9419$c1uhW)
                                  (if g$ls/false$9419$c1uhW
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9419$c1uhW)
                                    ((case-lambda
                                       ((g$t$9420$c1uhW)
                                        ((case-lambda
                                           ((g$ls/false$9421$c1uhW)
                                            (if g$ls/false$9421$c1uhW
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9421$c1uhW)
                                              (g$syntax-violation$8094$c1uhW
                                                '#f
                                                '"invalid syntax"
                                                g$t$9420$c1uhW))))
                                         (g$syntax-dispatch$7982$c1uhW
                                           g$t$9420$c1uhW
                                           '_))))
                                     g$t$9418$c1uhW))))
                               (g$syntax-dispatch$7982$c1uhW
                                 g$t$9418$c1uhW
                                 '(_ #(atom #t))))))
                           (g$get-clause$9230$c1uhW
                             'opaque
                             g$clause*$9400$c1uhW))
                          ((case-lambda
                             ((g$t$9422$c1uhW)
                              ((case-lambda
                                 ((g$ls/false$9423$c1uhW)
                                  (if g$ls/false$9423$c1uhW
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$9424$c1uhW)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$9402$c1uhW
                                             g$field-spec*$9424$c1uhW))))
                                      g$ls/false$9423$c1uhW)
                                    ((case-lambda
                                       ((g$t$9425$c1uhW)
                                        ((case-lambda
                                           ((g$ls/false$9426$c1uhW)
                                            (if g$ls/false$9426$c1uhW
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$9426$c1uhW)
                                              (g$syntax-violation$8094$c1uhW
                                                '#f
                                                '"invalid syntax"
                                                g$t$9425$c1uhW))))
                                         (g$syntax-dispatch$7982$c1uhW
                                           g$t$9425$c1uhW
                                           '_))))
                                     g$t$9422$c1uhW))))
                               (g$syntax-dispatch$7982$c1uhW
                                 g$t$9422$c1uhW
                                 '(_ . each-any)))))
                           (g$get-clause$9230$c1uhW
                             'fields
                             g$clause*$9400$c1uhW)))))))
                  (g$parent-rtd-code$9232$c1uhW
                    (case-lambda
                      ((g$clause*$9387$c1uhW)
                       ((case-lambda
                          ((g$t$9388$c1uhW)
                           ((case-lambda
                              ((g$ls/false$9389$c1uhW)
                               (if g$ls/false$9389$c1uhW
                                 (apply
                                   (case-lambda
                                     ((g$name$9390$c1uhW)
                                      (list
                                        'record-type-descriptor
                                        g$name$9390$c1uhW)))
                                   g$ls/false$9389$c1uhW)
                                 ((case-lambda
                                    ((g$t$9391$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$9392$c1uhW)
                                         (if g$ls/false$9392$c1uhW
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9393$c1uhW)
                                                    ((case-lambda
                                                       ((g$ls/false$9394$c1uhW)
                                                        (if g$ls/false$9394$c1uhW
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9395$c1uhW
                                                                 g$rcd$9396$c1uhW)
                                                               g$rtd$9395$c1uhW))
                                                            g$ls/false$9394$c1uhW)
                                                          ((case-lambda
                                                             ((g$t$9397$c1uhW)
                                                              ((case-lambda
                                                                 ((g$ls/false$9398$c1uhW)
                                                                  (if g$ls/false$9398$c1uhW
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9398$c1uhW)
                                                                    (g$syntax-violation$8094$c1uhW
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9397$c1uhW))))
                                                               (g$syntax-dispatch$7982$c1uhW
                                                                 g$t$9397$c1uhW
                                                                 '#(atom #f)))))
                                                           g$t$9393$c1uhW))))
                                                     (g$syntax-dispatch$7982$c1uhW
                                                       g$t$9393$c1uhW
                                                       '(_ any any)))))
                                                 (g$get-clause$9230$c1uhW
                                                   'parent-rtd
                                                   g$clause*$9387$c1uhW))))
                                             g$ls/false$9392$c1uhW)
                                           (g$syntax-violation$8094$c1uhW
                                             '#f
                                             '"invalid syntax"
                                             g$t$9391$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$9391$c1uhW
                                        '#(atom #f)))))
                                  g$t$9388$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW
                              g$t$9388$c1uhW
                              '(_ any)))))
                        (g$get-clause$9230$c1uhW
                          'parent
                          g$clause*$9387$c1uhW)))))
                  (g$parent-rcd-code$9233$c1uhW
                    (case-lambda
                      ((g$clause*$9375$c1uhW)
                       ((case-lambda
                          ((g$t$9376$c1uhW)
                           ((case-lambda
                              ((g$ls/false$9377$c1uhW)
                               (if g$ls/false$9377$c1uhW
                                 (apply
                                   (case-lambda
                                     ((g$name$9378$c1uhW)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$9378$c1uhW)))
                                   g$ls/false$9377$c1uhW)
                                 ((case-lambda
                                    ((g$t$9379$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$9380$c1uhW)
                                         (if g$ls/false$9380$c1uhW
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9381$c1uhW)
                                                    ((case-lambda
                                                       ((g$ls/false$9382$c1uhW)
                                                        (if g$ls/false$9382$c1uhW
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9383$c1uhW
                                                                 g$rcd$9384$c1uhW)
                                                               g$rcd$9384$c1uhW))
                                                            g$ls/false$9382$c1uhW)
                                                          ((case-lambda
                                                             ((g$t$9385$c1uhW)
                                                              ((case-lambda
                                                                 ((g$ls/false$9386$c1uhW)
                                                                  (if g$ls/false$9386$c1uhW
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9386$c1uhW)
                                                                    (g$syntax-violation$8094$c1uhW
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9385$c1uhW))))
                                                               (g$syntax-dispatch$7982$c1uhW
                                                                 g$t$9385$c1uhW
                                                                 '#(atom #f)))))
                                                           g$t$9381$c1uhW))))
                                                     (g$syntax-dispatch$7982$c1uhW
                                                       g$t$9381$c1uhW
                                                       '(_ any any)))))
                                                 (g$get-clause$9230$c1uhW
                                                   'parent-rtd
                                                   g$clause*$9375$c1uhW))))
                                             g$ls/false$9380$c1uhW)
                                           (g$syntax-violation$8094$c1uhW
                                             '#f
                                             '"invalid syntax"
                                             g$t$9379$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$9379$c1uhW
                                        '#(atom #f)))))
                                  g$t$9376$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW
                              g$t$9376$c1uhW
                              '(_ any)))))
                        (g$get-clause$9230$c1uhW
                          'parent
                          g$clause*$9375$c1uhW)))))
                  (g$foo-rcd-code$9234$c1uhW
                    (case-lambda
                      ((g$clause*$9371$c1uhW
                         g$foo-rtd$9372$c1uhW
                         g$protocol$9373$c1uhW
                         g$parent-rcd-code$9374$c1uhW)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$9372$c1uhW
                         g$parent-rcd-code$9374$c1uhW
                         g$protocol$9373$c1uhW))))
                  (g$get-protocol-code$9235$c1uhW
                    (case-lambda
                      ((g$clause*$9365$c1uhW)
                       ((case-lambda
                          ((g$t$9366$c1uhW)
                           ((case-lambda
                              ((g$ls/false$9367$c1uhW)
                               (if g$ls/false$9367$c1uhW
                                 (apply
                                   (case-lambda
                                     ((g$expr$9368$c1uhW) g$expr$9368$c1uhW))
                                   g$ls/false$9367$c1uhW)
                                 ((case-lambda
                                    ((g$t$9369$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$9370$c1uhW)
                                         (if g$ls/false$9370$c1uhW
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$9370$c1uhW)
                                           (g$syntax-violation$8094$c1uhW
                                             '#f
                                             '"invalid syntax"
                                             g$t$9369$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$9369$c1uhW
                                        '_))))
                                  g$t$9366$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW
                              g$t$9366$c1uhW
                              '(_ any)))))
                        (g$get-clause$9230$c1uhW
                          'protocol
                          g$clause*$9365$c1uhW)))))
                  (g$get-fields$9236$c1uhW
                    (case-lambda
                      ((g$clause*$9356$c1uhW)
                       ((case-lambda
                          ((g$t$9357$c1uhW)
                           ((case-lambda
                              ((g$ls/false$9358$c1uhW)
                               (if g$ls/false$9358$c1uhW
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$9358$c1uhW)
                                 ((case-lambda
                                    ((g$t$9359$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$9360$c1uhW)
                                         (if g$ls/false$9360$c1uhW
                                           (apply
                                             (case-lambda
                                               ((g$f*$9361$c1uhW)
                                                g$f*$9361$c1uhW))
                                             g$ls/false$9360$c1uhW)
                                           ((case-lambda
                                              ((g$t$9362$c1uhW)
                                               ((case-lambda
                                                  ((g$ls/false$9363$c1uhW)
                                                   (if g$ls/false$9363$c1uhW
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$9364$c1uhW)
                                                          (g$get-fields$9236$c1uhW
                                                            g$rest$9364$c1uhW)))
                                                       g$ls/false$9363$c1uhW)
                                                     (g$syntax-violation$8094$c1uhW
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9362$c1uhW))))
                                                (g$syntax-dispatch$7982$c1uhW
                                                  g$t$9362$c1uhW
                                                  '(_ . any)))))
                                            g$t$9359$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$9359$c1uhW
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$9357$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW g$t$9357$c1uhW '()))))
                        g$clause*$9356$c1uhW))))
                  (g$get-mutator-indices$9237$c1uhW
                    (case-lambda
                      ((g$fields$9344$c1uhW)
                       ((letrec ((g$f$9345$c1uhW
                                   (case-lambda
                                     ((g$fields$9346$c1uhW g$i$9347$c1uhW)
                                      ((case-lambda
                                         ((g$t$9348$c1uhW)
                                          ((case-lambda
                                             ((g$ls/false$9349$c1uhW)
                                              (if g$ls/false$9349$c1uhW
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$9349$c1uhW)
                                                ((case-lambda
                                                   ((g$t$9350$c1uhW)
                                                    ((case-lambda
                                                       ((g$ls/false$9351$c1uhW)
                                                        (if g$ls/false$9351$c1uhW
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$9352$c1uhW)
                                                               (cons
                                                                 g$i$9347$c1uhW
                                                                 (g$f$9345$c1uhW
                                                                   g$rest$9352$c1uhW
                                                                   (+ g$i$9347$c1uhW
                                                                      '1)))))
                                                            g$ls/false$9351$c1uhW)
                                                          ((case-lambda
                                                             ((g$t$9353$c1uhW)
                                                              ((case-lambda
                                                                 ((g$ls/false$9354$c1uhW)
                                                                  (if g$ls/false$9354$c1uhW
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$9355$c1uhW)
                                                                         (g$f$9345$c1uhW
                                                                           g$rest$9355$c1uhW
                                                                           (+ g$i$9347$c1uhW
                                                                              '1))))
                                                                      g$ls/false$9354$c1uhW)
                                                                    (g$syntax-violation$8094$c1uhW
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9353$c1uhW))))
                                                               (g$syntax-dispatch$7982$c1uhW
                                                                 g$t$9353$c1uhW
                                                                 '(_ . any)))))
                                                           g$t$9350$c1uhW))))
                                                     (g$syntax-dispatch$7982$c1uhW
                                                       g$t$9350$c1uhW
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$9348$c1uhW))))
                                           (g$syntax-dispatch$7982$c1uhW
                                             g$t$9348$c1uhW
                                             '()))))
                                       g$fields$9346$c1uhW)))))
                          g$f$9345$c1uhW)
                        g$fields$9344$c1uhW
                        '0))))
                  (g$get-mutators$9238$c1uhW
                    (case-lambda
                      ((g$foo$9323$c1uhW g$fields$9324$c1uhW)
                       (letrec* ((g$gen-name$9325$c1uhW
                                   (case-lambda
                                     ((g$x$9343$c1uhW)
                                      (g$datum->syntax$8096$c1uhW
                                        g$foo$9323$c1uhW
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8097$c1uhW
                                                g$foo$9323$c1uhW))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8097$c1uhW
                                                g$x$9343$c1uhW))
                                            '"-set!")))))))
                         ((letrec ((g$f$9326$c1uhW
                                     (case-lambda
                                       ((g$fields$9327$c1uhW)
                                        ((case-lambda
                                           ((g$t$9328$c1uhW)
                                            ((case-lambda
                                               ((g$ls/false$9329$c1uhW)
                                                (if g$ls/false$9329$c1uhW
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$9329$c1uhW)
                                                  ((case-lambda
                                                     ((g$t$9330$c1uhW)
                                                      ((case-lambda
                                                         ((g$ls/false$9331$c1uhW)
                                                          (if g$ls/false$9331$c1uhW
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9332$c1uhW
                                                                   g$accessor$9333$c1uhW
                                                                   g$mutator$9334$c1uhW
                                                                   g$rest$9335$c1uhW)
                                                                 (cons
                                                                   g$mutator$9334$c1uhW
                                                                   (g$f$9326$c1uhW
                                                                     g$rest$9335$c1uhW))))
                                                              g$ls/false$9331$c1uhW)
                                                            ((case-lambda
                                                               ((g$t$9336$c1uhW)
                                                                ((case-lambda
                                                                   ((g$ls/false$9337$c1uhW)
                                                                    (if g$ls/false$9337$c1uhW
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9338$c1uhW
                                                                             g$rest$9339$c1uhW)
                                                                           (cons
                                                                             (g$gen-name$9325$c1uhW
                                                                               g$name$9338$c1uhW)
                                                                             (g$f$9326$c1uhW
                                                                               g$rest$9339$c1uhW))))
                                                                        g$ls/false$9337$c1uhW)
                                                                      ((case-lambda
                                                                         ((g$t$9340$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9341$c1uhW)
                                                                              (if g$ls/false$9341$c1uhW
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$9342$c1uhW)
                                                                                     (g$f$9326$c1uhW
                                                                                       g$rest$9342$c1uhW)))
                                                                                  g$ls/false$9341$c1uhW)
                                                                                (g$syntax-violation$8094$c1uhW
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$9340$c1uhW))))
                                                                           (g$syntax-dispatch$7982$c1uhW
                                                                             g$t$9340$c1uhW
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$9336$c1uhW))))
                                                                 (g$syntax-dispatch$7982$c1uhW
                                                                   g$t$9336$c1uhW
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$9330$c1uhW))))
                                                       (g$syntax-dispatch$7982$c1uhW
                                                         g$t$9330$c1uhW
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$9328$c1uhW))))
                                             (g$syntax-dispatch$7982$c1uhW
                                               g$t$9328$c1uhW
                                               '()))))
                                         g$fields$9327$c1uhW)))))
                            g$f$9326$c1uhW)
                          g$fields$9324$c1uhW)))))
                  (g$get-accessors$9239$c1uhW
                    (case-lambda
                      ((g$foo$9289$c1uhW g$fields$9290$c1uhW)
                       (letrec* ((g$gen-name$9291$c1uhW
                                   (case-lambda
                                     ((g$x$9322$c1uhW)
                                      (g$datum->syntax$8096$c1uhW
                                        g$foo$9289$c1uhW
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8097$c1uhW
                                                g$foo$9289$c1uhW))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8097$c1uhW
                                                g$x$9322$c1uhW)))))))))
                         (g$map$5063$c1uhW
                           (case-lambda
                             ((g$field$9292$c1uhW)
                              ((case-lambda
                                 ((g$t$9293$c1uhW)
                                  ((case-lambda
                                     ((g$ls/false$9294$c1uhW)
                                      (if (if g$ls/false$9294$c1uhW
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$9295$c1uhW
                                                     g$accessor$9296$c1uhW
                                                     g$mutator$9297$c1uhW)
                                                   (g$id?$7704$c1uhW
                                                     g$accessor$9296$c1uhW)))
                                                g$ls/false$9294$c1uhW))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$9298$c1uhW
                                               g$accessor$9299$c1uhW
                                               g$mutator$9300$c1uhW)
                                             g$accessor$9299$c1uhW))
                                          g$ls/false$9294$c1uhW)
                                        ((case-lambda
                                           ((g$t$9301$c1uhW)
                                            ((case-lambda
                                               ((g$ls/false$9302$c1uhW)
                                                (if (if g$ls/false$9302$c1uhW
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$9303$c1uhW
                                                               g$accessor$9304$c1uhW)
                                                             (g$id?$7704$c1uhW
                                                               g$accessor$9304$c1uhW)))
                                                          g$ls/false$9302$c1uhW))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$9305$c1uhW
                                                         g$accessor$9306$c1uhW)
                                                       g$accessor$9306$c1uhW))
                                                    g$ls/false$9302$c1uhW)
                                                  ((case-lambda
                                                     ((g$t$9307$c1uhW)
                                                      ((case-lambda
                                                         ((g$ls/false$9308$c1uhW)
                                                          (if (if g$ls/false$9308$c1uhW
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$9309$c1uhW)
                                                                       (g$id?$7704$c1uhW
                                                                         g$name$9309$c1uhW)))
                                                                    g$ls/false$9308$c1uhW))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9310$c1uhW)
                                                                 (g$gen-name$9291$c1uhW
                                                                   g$name$9310$c1uhW)))
                                                              g$ls/false$9308$c1uhW)
                                                            ((case-lambda
                                                               ((g$t$9311$c1uhW)
                                                                ((case-lambda
                                                                   ((g$ls/false$9312$c1uhW)
                                                                    (if (if g$ls/false$9312$c1uhW
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$9313$c1uhW)
                                                                                 (g$id?$7704$c1uhW
                                                                                   g$name$9313$c1uhW)))
                                                                              g$ls/false$9312$c1uhW))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9314$c1uhW)
                                                                           (g$gen-name$9291$c1uhW
                                                                             g$name$9314$c1uhW)))
                                                                        g$ls/false$9312$c1uhW)
                                                                      ((case-lambda
                                                                         ((g$t$9315$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9316$c1uhW)
                                                                              (if (if g$ls/false$9316$c1uhW
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$9317$c1uhW)
                                                                                           (g$id?$7704$c1uhW
                                                                                             g$name$9317$c1uhW)))
                                                                                        g$ls/false$9316$c1uhW))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$9318$c1uhW)
                                                                                     (g$gen-name$9291$c1uhW
                                                                                       g$name$9318$c1uhW)))
                                                                                  g$ls/false$9316$c1uhW)
                                                                                ((case-lambda
                                                                                   ((g$t$9319$c1uhW)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$9320$c1uhW)
                                                                                        (if g$ls/false$9320$c1uhW
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$9321$c1uhW)
                                                                                               (g$syntax-violation$8094$c1uhW
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$9292$c1uhW)))
                                                                                            g$ls/false$9320$c1uhW)
                                                                                          (g$syntax-violation$8094$c1uhW
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$9319$c1uhW))))
                                                                                     (g$syntax-dispatch$7982$c1uhW
                                                                                       g$t$9319$c1uhW
                                                                                       'any))))
                                                                                 g$t$9315$c1uhW))))
                                                                           (g$syntax-dispatch$7982$c1uhW
                                                                             g$t$9315$c1uhW
                                                                             'any))))
                                                                       g$t$9311$c1uhW))))
                                                                 (g$syntax-dispatch$7982$c1uhW
                                                                   g$t$9311$c1uhW
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$9307$c1uhW))))
                                                       (g$syntax-dispatch$7982$c1uhW
                                                         g$t$9307$c1uhW
                                                         '(#(scheme-id mutable)
                                                           any)))))
                                                   g$t$9301$c1uhW))))
                                             (g$syntax-dispatch$7982$c1uhW
                                               g$t$9301$c1uhW
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$9293$c1uhW))))
                                   (g$syntax-dispatch$7982$c1uhW
                                     g$t$9293$c1uhW
                                     '(#(scheme-id mutable) any any any)))))
                               g$field$9292$c1uhW)))
                           g$fields$9290$c1uhW)))))
                  (g$enumerate$9240$c1uhW
                    (case-lambda
                      ((g$ls$9285$c1uhW)
                       ((letrec ((g$f$9286$c1uhW
                                   (case-lambda
                                     ((g$ls$9287$c1uhW g$i$9288$c1uhW)
                                      (if (null? g$ls$9287$c1uhW)
                                        '()
                                        (cons
                                          g$i$9288$c1uhW
                                          (g$f$9286$c1uhW
                                            (cdr g$ls$9287$c1uhW)
                                            (+ g$i$9288$c1uhW '1))))))))
                          g$f$9286$c1uhW)
                        g$ls$9285$c1uhW
                        '0))))
                  (g$do-define-record$9241$c1uhW
                    (case-lambda
                      ((g$namespec$9265$c1uhW g$clause*$9266$c1uhW)
                       ((case-lambda
                          ((g$foo$9267$c1uhW)
                           ((case-lambda
                              ((g$foo-rtd$9268$c1uhW)
                               ((case-lambda
                                  ((g$foo-rcd$9269$c1uhW)
                                   ((case-lambda
                                      ((g$protocol$9270$c1uhW)
                                       ((case-lambda
                                          ((g$make-foo$9271$c1uhW)
                                           ((case-lambda
                                              ((g$fields$9272$c1uhW)
                                               ((case-lambda
                                                  ((g$idx*$9273$c1uhW)
                                                   ((case-lambda
                                                      ((g$foo-x*$9274$c1uhW)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$9275$c1uhW)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$9276$c1uhW)
                                                               ((case-lambda
                                                                  ((g$foo?$9277$c1uhW)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$9278$c1uhW)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$9279$c1uhW)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$9280$c1uhW)
                                                                               (g$bless$7945$c1uhW
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$9268$c1uhW
                                                                                       g$foo-rtd-code$9278$c1uhW)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$9270$c1uhW
                                                                                         g$protocol-code$9280$c1uhW)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$9269$c1uhW
                                                                                           g$foo-rcd-code$9279$c1uhW)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$9267$c1uhW
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$9268$c1uhW)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$9269$c1uhW)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$9277$c1uhW
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$9268$c1uhW))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$9271$c1uhW
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$9269$c1uhW))
                                                                                               (append
                                                                                                 (g$map$5063$c1uhW
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$9281$c1uhW
                                                                                                        g$idx$9282$c1uhW)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$9281$c1uhW
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$9268$c1uhW
                                                                                                          g$idx$9282$c1uhW))))
                                                                                                   g$foo-x*$9274$c1uhW
                                                                                                   g$idx*$9273$c1uhW)
                                                                                                 (g$map$5063$c1uhW
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$9283$c1uhW
                                                                                                        g$idx$9284$c1uhW)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$9283$c1uhW
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$9268$c1uhW
                                                                                                          g$idx$9284$c1uhW))))
                                                                                                   g$set-foo-x!*$9275$c1uhW
                                                                                                   g$set-foo-idx*$9276$c1uhW))))))))))))
                                                                            (g$get-protocol-code$9235$c1uhW
                                                                              g$clause*$9266$c1uhW))))
                                                                        (g$foo-rcd-code$9234$c1uhW
                                                                          g$clause*$9266$c1uhW
                                                                          g$foo-rtd$9268$c1uhW
                                                                          g$protocol$9270$c1uhW
                                                                          (g$parent-rcd-code$9233$c1uhW
                                                                            g$clause*$9266$c1uhW)))))
                                                                    (g$foo-rtd-code$9231$c1uhW
                                                                      g$foo$9267$c1uhW
                                                                      g$clause*$9266$c1uhW
                                                                      (g$parent-rtd-code$9232$c1uhW
                                                                        g$clause*$9266$c1uhW)))))
                                                                (g$get-record-predicate-name$9229$c1uhW
                                                                  g$namespec$9265$c1uhW))))
                                                            (g$get-mutator-indices$9237$c1uhW
                                                              g$fields$9272$c1uhW))))
                                                        (g$get-mutators$9238$c1uhW
                                                          g$foo$9267$c1uhW
                                                          g$fields$9272$c1uhW))))
                                                    (g$get-accessors$9239$c1uhW
                                                      g$foo$9267$c1uhW
                                                      g$fields$9272$c1uhW))))
                                                (g$enumerate$9240$c1uhW
                                                  g$fields$9272$c1uhW))))
                                            (g$get-fields$9236$c1uhW
                                              g$clause*$9266$c1uhW))))
                                        (g$get-record-constructor-name$9228$c1uhW
                                          g$namespec$9265$c1uhW))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$9227$c1uhW g$namespec$9265$c1uhW)))))
                  (g$verify-clauses$9242$c1uhW
                    (case-lambda
                      ((g$x$9247$c1uhW g$cls*$9248$c1uhW)
                       (letrec* ((g$valid-kwds$9249$c1uhW
                                   (g$map$5063$c1uhW
                                     g$bless$7945$c1uhW
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$9250$c1uhW
                                   (case-lambda
                                     ((g$x$9262$c1uhW g$ls$9263$c1uhW)
                                      (if (pair? g$ls$9263$c1uhW)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$9264$c1uhW)
                                              (if g$t$9264$c1uhW
                                                g$t$9264$c1uhW
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$9250$c1uhW
                                                    g$x$9262$c1uhW
                                                    (cdr g$ls$9263$c1uhW))))))
                                           (g$free-id=?$7708$c1uhW
                                             g$x$9262$c1uhW
                                             (car g$ls$9263$c1uhW))))
                                        '#f)))))
                         ((letrec ((g$f$9251$c1uhW
                                     (case-lambda
                                       ((g$cls*$9252$c1uhW g$seen*$9253$c1uhW)
                                        (if (not (null? g$cls*$9252$c1uhW))
                                          ((case-lambda
                                             ((g$t$9254$c1uhW)
                                              ((case-lambda
                                                 ((g$ls/false$9255$c1uhW)
                                                  (if g$ls/false$9255$c1uhW
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$9256$c1uhW
                                                           g$rest$9257$c1uhW)
                                                         (if ((case-lambda
                                                                ((g$t$9258$c1uhW)
                                                                 (if g$t$9258$c1uhW
                                                                   g$t$9258$c1uhW
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$9250$c1uhW
                                                                            g$kwd$9256$c1uhW
                                                                            g$valid-kwds$9249$c1uhW))))))
                                                              (not (g$id?$7704$c1uhW
                                                                     g$kwd$9256$c1uhW)))
                                                           (g$syntax-violation$8094$c1uhW
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$9256$c1uhW)
                                                           (if (g$bound-id-member?$7711$c1uhW
                                                                 g$kwd$9256$c1uhW
                                                                 g$seen*$9253$c1uhW)
                                                             (g$syntax-violation$8094$c1uhW
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$9247$c1uhW
                                                               g$kwd$9256$c1uhW)
                                                             (g$f$9251$c1uhW
                                                               (cdr g$cls*$9252$c1uhW)
                                                               (cons
                                                                 g$kwd$9256$c1uhW
                                                                 g$seen*$9253$c1uhW))))))
                                                      g$ls/false$9255$c1uhW)
                                                    ((case-lambda
                                                       ((g$t$9259$c1uhW)
                                                        ((case-lambda
                                                           ((g$ls/false$9260$c1uhW)
                                                            (if g$ls/false$9260$c1uhW
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$9261$c1uhW)
                                                                   (g$syntax-violation$8094$c1uhW
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$9261$c1uhW)))
                                                                g$ls/false$9260$c1uhW)
                                                              (g$syntax-violation$8094$c1uhW
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9259$c1uhW))))
                                                         (g$syntax-dispatch$7982$c1uhW
                                                           g$t$9259$c1uhW
                                                           'any))))
                                                     g$t$9254$c1uhW))))
                                               (g$syntax-dispatch$7982$c1uhW
                                                 g$t$9254$c1uhW
                                                 '(any . any)))))
                                           (car g$cls*$9252$c1uhW))
                                          (void))))))
                            g$f$9251$c1uhW)
                          g$cls*$9248$c1uhW
                          '()))))))
          ((case-lambda
             ((g$t$9243$c1uhW)
              ((case-lambda
                 ((g$ls/false$9244$c1uhW)
                  (if g$ls/false$9244$c1uhW
                    (apply
                      (case-lambda
                        ((g$namespec$9245$c1uhW g$clause*$9246$c1uhW)
                         (begin
                           (g$verify-clauses$9242$c1uhW
                             g$x$9225$c1uhW
                             g$clause*$9246$c1uhW)
                           (g$do-define-record$9241$c1uhW
                             g$namespec$9245$c1uhW
                             g$clause*$9246$c1uhW))))
                      g$ls/false$9244$c1uhW)
                    (g$syntax-violation$8094$c1uhW
                      '#f
                      '"invalid syntax"
                      g$t$9243$c1uhW))))
               (g$syntax-dispatch$7982$c1uhW
                 g$t$9243$c1uhW
                 '(_ any . each-any)))))
           g$x$9225$c1uhW)))))
   (g$define-condition-type-macro$7977$c1uhW
     g$define-condition-type-macro$11480$c1uhW
     (case-lambda
       ((g$x$9481$c1uhW)
        (letrec* ((g$mkname$9482$c1uhW
                    (case-lambda
                      ((g$name$9505$c1uhW g$suffix$9506$c1uhW)
                       (g$datum->syntax$8096$c1uhW
                         g$name$9505$c1uhW
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$8097$c1uhW g$name$9505$c1uhW))
                             g$suffix$9506$c1uhW)))))))
          ((case-lambda
             ((g$t$9483$c1uhW)
              ((case-lambda
                 ((g$ls/false$9484$c1uhW)
                  (if (if g$ls/false$9484$c1uhW
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9485$c1uhW
                                 g$name$9486$c1uhW
                                 g$super$9487$c1uhW
                                 g$constructor$9488$c1uhW
                                 g$predicate$9489$c1uhW
                                 g$field*$9490$c1uhW
                                 g$accessor*$9491$c1uhW)
                               (if (g$id?$7704$c1uhW g$name$9486$c1uhW)
                                 (if (g$id?$7704$c1uhW g$super$9487$c1uhW)
                                   (if (g$id?$7704$c1uhW
                                         g$constructor$9488$c1uhW)
                                     (if (g$id?$7704$c1uhW
                                           g$predicate$9489$c1uhW)
                                       (if (g$for-all$5061$c1uhW
                                             g$id?$7704$c1uhW
                                             g$field*$9490$c1uhW)
                                         (begin
                                           '#f
                                           (g$for-all$5061$c1uhW
                                             g$id?$7704$c1uhW
                                             g$accessor*$9491$c1uhW))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9484$c1uhW))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9492$c1uhW
                           g$name$9493$c1uhW
                           g$super$9494$c1uhW
                           g$constructor$9495$c1uhW
                           g$predicate$9496$c1uhW
                           g$field*$9497$c1uhW
                           g$accessor*$9498$c1uhW)
                         ((case-lambda
                            ((g$aux-accessor*$9499$c1uhW)
                             (g$bless$7945$c1uhW
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9493$c1uhW
                                         g$constructor$9495$c1uhW
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9494$c1uhW)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$5063$c1uhW
                                               (case-lambda
                                                 ((g$field$9500$c1uhW
                                                    g$aux$9501$c1uhW)
                                                  (list
                                                    'immutable
                                                    g$field$9500$c1uhW
                                                    g$aux$9501$c1uhW)))
                                               g$field*$9497$c1uhW
                                               g$aux-accessor*$9499$c1uhW))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9496$c1uhW
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9493$c1uhW)))
                                     (g$map$5063$c1uhW
                                       (case-lambda
                                         ((g$accessor$9502$c1uhW
                                            g$aux$9503$c1uhW)
                                          (list
                                            'define
                                            g$accessor$9502$c1uhW
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$9493$c1uhW)
                                              g$aux$9503$c1uhW))))
                                       g$accessor*$9498$c1uhW
                                       g$aux-accessor*$9499$c1uhW)))))))
                          (g$map$5063$c1uhW
                            (case-lambda ((g$x$9504$c1uhW) (gensym)))
                            g$accessor*$9498$c1uhW))))
                      g$ls/false$9484$c1uhW)
                    (g$syntax-violation$8094$c1uhW
                      '#f
                      '"invalid syntax"
                      g$t$9483$c1uhW))))
               (g$syntax-dispatch$7982$c1uhW
                 g$t$9483$c1uhW
                 '(any any any any any . #(each (any any)))))))
           g$x$9481$c1uhW)))))
   (g$incorrect-usage-macro$7978$c1uhW
     g$incorrect-usage-macro$11481$c1uhW
     (case-lambda
       ((g$e$9507$c1uhW)
        (g$syntax-violation$8094$c1uhW
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9507$c1uhW))))
   (g$parameterize-macro$7979$c1uhW
     g$parameterize-macro$11482$c1uhW
     (case-lambda
       ((g$e$9508$c1uhW)
        ((case-lambda
           ((g$t$9509$c1uhW)
            ((case-lambda
               ((g$ls/false$9510$c1uhW)
                (if g$ls/false$9510$c1uhW
                  (apply
                    (case-lambda
                      ((g$b$9511$c1uhW g$b*$9512$c1uhW)
                       (g$bless$7945$c1uhW
                         (cons
                           'let
                           (cons '() (cons g$b$9511$c1uhW g$b*$9512$c1uhW))))))
                    g$ls/false$9510$c1uhW)
                  ((case-lambda
                     ((g$t$9513$c1uhW)
                      ((case-lambda
                         ((g$ls/false$9514$c1uhW)
                          (if g$ls/false$9514$c1uhW
                            (apply
                              (case-lambda
                                ((g$olhs*$9515$c1uhW
                                   g$orhs*$9516$c1uhW
                                   g$b$9517$c1uhW
                                   g$b*$9518$c1uhW)
                                 ((case-lambda
                                    ((g$lhs*$9519$c1uhW g$rhs*$9520$c1uhW)
                                     (g$bless$7945$c1uhW
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9519$c1uhW
                                             g$rhs*$9520$c1uhW)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$5063$c1uhW
                                                       (case-lambda
                                                         ((g$lhs$9521$c1uhW
                                                            g$rhs$9522$c1uhW)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$9521$c1uhW)))
                                                            (list
                                                              g$lhs$9521$c1uhW
                                                              g$rhs$9522$c1uhW)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$9522$c1uhW
                                                                '(t))))))
                                                       g$lhs*$9519$c1uhW
                                                       g$rhs*$9520$c1uhW)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9517$c1uhW
                                                         g$b*$9518$c1uhW)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9515$c1uhW
                                           g$orhs*$9516$c1uhW)))))
                                  (g$generate-temporaries$8084$c1uhW
                                    g$olhs*$9515$c1uhW)
                                  (g$generate-temporaries$8084$c1uhW
                                    g$orhs*$9516$c1uhW))))
                              g$ls/false$9514$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"invalid syntax"
                              g$t$9513$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$9513$c1uhW
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9509$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$9509$c1uhW
               '(_ () any . each-any)))))
         g$e$9508$c1uhW))))
   (g$foreign-call-transformer$7980$c1uhW
     g$foreign-call-transformer$11483$c1uhW
     (case-lambda
       ((g$e$9523$c1uhW g$r$9524$c1uhW g$mr$9525$c1uhW)
        ((case-lambda
           ((g$t$9526$c1uhW)
            ((case-lambda
               ((g$ls/false$9527$c1uhW)
                (if g$ls/false$9527$c1uhW
                  (apply
                    (case-lambda
                      ((g$name$9528$c1uhW g$arg*$9529$c1uhW)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$8000$c1uhW
                             g$name$9528$c1uhW
                             g$r$9524$c1uhW
                             g$mr$9525$c1uhW)
                           (g$chi-expr*$7998$c1uhW
                             g$arg*$9529$c1uhW
                             g$r$9524$c1uhW
                             g$mr$9525$c1uhW)))))
                    g$ls/false$9527$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$9526$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$9526$c1uhW
               '(_ any . each-any)))))
         g$e$9523$c1uhW))))
   (g$convert-pattern$7981$c1uhW
     g$convert-pattern$11484$c1uhW
     (case-lambda
       ((g$pattern$9530$c1uhW g$keys$9531$c1uhW)
        (letrec* ((g$cvt*$9532$c1uhW
                    (case-lambda
                      ((g$p*$9612$c1uhW g$n$9613$c1uhW g$ids$9614$c1uhW)
                       (if (null? g$p*$9612$c1uhW)
                         (values '() g$ids$9614$c1uhW)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9532$c1uhW
                                (cdr g$p*$9612$c1uhW)
                                g$n$9613$c1uhW
                                g$ids$9614$c1uhW)))
                           (case-lambda
                             ((g$y$9617$c1uhW g$ids$9618$c1uhW)
                              ((case-lambda
                                 ((g$ids$9619$c1uhW g$y$9620$c1uhW)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9533$c1uhW
                                         (car g$p*$9612$c1uhW)
                                         g$n$9613$c1uhW
                                         g$ids$9619$c1uhW)))
                                    (case-lambda
                                      ((g$x$9623$c1uhW g$ids$9624$c1uhW)
                                       ((case-lambda
                                          ((g$ids$9625$c1uhW g$x$9626$c1uhW)
                                           (values
                                             (cons
                                               g$x$9626$c1uhW
                                               g$y$9620$c1uhW)
                                             g$ids$9625$c1uhW)))
                                        g$ids$9624$c1uhW
                                        g$x$9623$c1uhW))))))
                               g$ids$9618$c1uhW
                               g$y$9617$c1uhW))))))))
                  (g$cvt$9533$c1uhW
                    (case-lambda
                      ((g$p$9534$c1uhW g$n$9535$c1uhW g$ids$9536$c1uhW)
                       ((case-lambda
                          ((g$t$9537$c1uhW)
                           ((case-lambda
                              ((g$ls/false$9538$c1uhW)
                               (if (if g$ls/false$9538$c1uhW
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9539$c1uhW)
                                            (g$id?$7704$c1uhW g$id$9539$c1uhW)))
                                         g$ls/false$9538$c1uhW))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9540$c1uhW)
                                      (if (g$bound-id-member?$7711$c1uhW
                                            g$p$9534$c1uhW
                                            g$keys$9531$c1uhW)
                                        (values
                                          (vector 'free-id g$p$9534$c1uhW)
                                          g$ids$9536$c1uhW)
                                        (if (g$free-id=?$7708$c1uhW
                                              g$p$9534$c1uhW
                                              (g$scheme-stx$7925$c1uhW '_))
                                          (values '_ g$ids$9536$c1uhW)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$9534$c1uhW
                                                g$n$9535$c1uhW)
                                              g$ids$9536$c1uhW))))))
                                   g$ls/false$9538$c1uhW)
                                 ((case-lambda
                                    ((g$t$9541$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$9542$c1uhW)
                                         (if (if g$ls/false$9542$c1uhW
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9543$c1uhW
                                                        g$dots$9544$c1uhW)
                                                      (g$ellipsis?$7983$c1uhW
                                                        g$dots$9544$c1uhW)))
                                                   g$ls/false$9542$c1uhW))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9545$c1uhW
                                                  g$dots$9546$c1uhW)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9533$c1uhW
                                                       g$p$9545$c1uhW
                                                       (+ g$n$9535$c1uhW '1)
                                                       g$ids$9536$c1uhW)))
                                                  (case-lambda
                                                    ((g$p$9549$c1uhW
                                                       g$ids$9550$c1uhW)
                                                     ((case-lambda
                                                        ((g$ids$9551$c1uhW
                                                           g$p$9552$c1uhW)
                                                         (values
                                                           (if (eq? g$p$9552$c1uhW
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9552$c1uhW))
                                                           g$ids$9551$c1uhW)))
                                                      g$ids$9550$c1uhW
                                                      g$p$9549$c1uhW))))))
                                             g$ls/false$9542$c1uhW)
                                           ((case-lambda
                                              ((g$t$9553$c1uhW)
                                               ((case-lambda
                                                  ((g$ls/false$9554$c1uhW)
                                                   (if (if g$ls/false$9554$c1uhW
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9555$c1uhW
                                                                  g$dots$9556$c1uhW
                                                                  g$ys$9557$c1uhW
                                                                  g$z$9558$c1uhW)
                                                                (g$ellipsis?$7983$c1uhW
                                                                  g$dots$9556$c1uhW)))
                                                             g$ls/false$9554$c1uhW))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9559$c1uhW
                                                            g$dots$9560$c1uhW
                                                            g$ys$9561$c1uhW
                                                            g$z$9562$c1uhW)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9533$c1uhW
                                                                 g$z$9562$c1uhW
                                                                 g$n$9535$c1uhW
                                                                 g$ids$9536$c1uhW)))
                                                            (case-lambda
                                                              ((g$z$9565$c1uhW
                                                                 g$ids$9566$c1uhW)
                                                               ((case-lambda
                                                                  ((g$ids$9567$c1uhW
                                                                     g$z$9568$c1uhW)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9532$c1uhW
                                                                          g$ys$9561$c1uhW
                                                                          g$n$9535$c1uhW
                                                                          g$ids$9567$c1uhW)))
                                                                     (case-lambda
                                                                       ((g$ys$9571$c1uhW
                                                                          g$ids$9572$c1uhW)
                                                                        ((case-lambda
                                                                           ((g$ids$9573$c1uhW
                                                                              g$ys$9574$c1uhW)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9533$c1uhW
                                                                                   g$x$9559$c1uhW
                                                                                   (+ g$n$9535$c1uhW
                                                                                      '1)
                                                                                   g$ids$9573$c1uhW)))
                                                                              (case-lambda
                                                                                ((g$x$9577$c1uhW
                                                                                   g$ids$9578$c1uhW)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9579$c1uhW
                                                                                       g$x$9580$c1uhW)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9580$c1uhW
                                                                                         (reverse
                                                                                           g$ys$9574$c1uhW)
                                                                                         g$z$9568$c1uhW)
                                                                                       g$ids$9579$c1uhW)))
                                                                                  g$ids$9578$c1uhW
                                                                                  g$x$9577$c1uhW))))))
                                                                         g$ids$9572$c1uhW
                                                                         g$ys$9571$c1uhW))))))
                                                                g$ids$9566$c1uhW
                                                                g$z$9565$c1uhW))))))
                                                       g$ls/false$9554$c1uhW)
                                                     ((case-lambda
                                                        ((g$t$9581$c1uhW)
                                                         ((case-lambda
                                                            ((g$ls/false$9582$c1uhW)
                                                             (if g$ls/false$9582$c1uhW
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9583$c1uhW
                                                                      g$y$9584$c1uhW)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9533$c1uhW
                                                                           g$y$9584$c1uhW
                                                                           g$n$9535$c1uhW
                                                                           g$ids$9536$c1uhW)))
                                                                      (case-lambda
                                                                        ((g$y$9587$c1uhW
                                                                           g$ids$9588$c1uhW)
                                                                         ((case-lambda
                                                                            ((g$ids$9589$c1uhW
                                                                               g$y$9590$c1uhW)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9533$c1uhW
                                                                                    g$x$9583$c1uhW
                                                                                    g$n$9535$c1uhW
                                                                                    g$ids$9589$c1uhW)))
                                                                               (case-lambda
                                                                                 ((g$x$9593$c1uhW
                                                                                    g$ids$9594$c1uhW)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9595$c1uhW
                                                                                        g$x$9596$c1uhW)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9596$c1uhW
                                                                                          g$y$9590$c1uhW)
                                                                                        g$ids$9595$c1uhW)))
                                                                                   g$ids$9594$c1uhW
                                                                                   g$x$9593$c1uhW))))))
                                                                          g$ids$9588$c1uhW
                                                                          g$y$9587$c1uhW))))))
                                                                 g$ls/false$9582$c1uhW)
                                                               ((case-lambda
                                                                  ((g$t$9597$c1uhW)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9598$c1uhW)
                                                                       (if g$ls/false$9598$c1uhW
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9536$c1uhW)))
                                                                           g$ls/false$9598$c1uhW)
                                                                         ((case-lambda
                                                                            ((g$t$9599$c1uhW)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9600$c1uhW)
                                                                                 (if (if g$ls/false$9600$c1uhW
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9601$c1uhW)
                                                                                              (not (g$stx?$7676$c1uhW
                                                                                                     g$p$9601$c1uhW))))
                                                                                           g$ls/false$9600$c1uhW))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9602$c1uhW)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9533$c1uhW
                                                                                               g$p$9602$c1uhW
                                                                                               g$n$9535$c1uhW
                                                                                               g$ids$9536$c1uhW)))
                                                                                          (case-lambda
                                                                                            ((g$p$9605$c1uhW
                                                                                               g$ids$9606$c1uhW)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9607$c1uhW
                                                                                                   g$p$9608$c1uhW)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9608$c1uhW)
                                                                                                   g$ids$9607$c1uhW)))
                                                                                              g$ids$9606$c1uhW
                                                                                              g$p$9605$c1uhW))))))
                                                                                     g$ls/false$9600$c1uhW)
                                                                                   ((case-lambda
                                                                                      ((g$t$9609$c1uhW)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9610$c1uhW)
                                                                                           (if g$ls/false$9610$c1uhW
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9611$c1uhW)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7715$c1uhW
                                                                                                        g$datum$9611$c1uhW))
                                                                                                    g$ids$9536$c1uhW)))
                                                                                               g$ls/false$9610$c1uhW)
                                                                                             (g$syntax-violation$8094$c1uhW
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9609$c1uhW))))
                                                                                        (g$syntax-dispatch$7982$c1uhW
                                                                                          g$t$9609$c1uhW
                                                                                          'any))))
                                                                                    g$t$9599$c1uhW))))
                                                                              (g$syntax-dispatch$7982$c1uhW
                                                                                g$t$9599$c1uhW
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9597$c1uhW))))
                                                                    (g$syntax-dispatch$7982$c1uhW
                                                                      g$t$9597$c1uhW
                                                                      '()))))
                                                                g$t$9581$c1uhW))))
                                                          (g$syntax-dispatch$7982$c1uhW
                                                            g$t$9581$c1uhW
                                                            '(any . any)))))
                                                      g$t$9553$c1uhW))))
                                                (g$syntax-dispatch$7982$c1uhW
                                                  g$t$9553$c1uhW
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9541$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$9541$c1uhW
                                        '(any any)))))
                                  g$t$9537$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW
                              g$t$9537$c1uhW
                              'any))))
                        g$p$9534$c1uhW)))))
          (g$cvt$9533$c1uhW g$pattern$9530$c1uhW '0 '())))))
   (g$syntax-dispatch$7982$c1uhW
     g$syntax-dispatch$11485$c1uhW
     ((case-lambda
        (()
         (letrec* ((g$stx^$9627$c1uhW
                     (case-lambda
                       ((g$e$9737$c1uhW
                          g$m*$9738$c1uhW
                          g$s*$9739$c1uhW
                          g$ae*$9740$c1uhW)
                        (if (if (null? g$m*$9738$c1uhW)
                              (if (null? g$s*$9739$c1uhW)
                                (begin '#f (null? g$ae*$9740$c1uhW))
                                '#f)
                              '#f)
                          g$e$9737$c1uhW
                          (g$mkstx$7692$c1uhW
                            g$e$9737$c1uhW
                            g$m*$9738$c1uhW
                            g$s*$9739$c1uhW
                            g$ae*$9740$c1uhW)))))
                   (g$match-each$9628$c1uhW
                     (case-lambda
                       ((g$e$9721$c1uhW
                          g$p$9722$c1uhW
                          g$m*$9723$c1uhW
                          g$s*$9724$c1uhW
                          g$ae*$9725$c1uhW)
                        (if (pair? g$e$9721$c1uhW)
                          ((case-lambda
                             ((g$first$9726$c1uhW)
                              (if g$first$9726$c1uhW
                                (begin
                                  '#f
                                  ((case-lambda
                                     ((g$rest$9727$c1uhW)
                                      (if g$rest$9727$c1uhW
                                        (begin
                                          '#f
                                          (cons
                                            g$first$9726$c1uhW
                                            g$rest$9727$c1uhW))
                                        '#f)))
                                   (g$match-each$9628$c1uhW
                                     (cdr g$e$9721$c1uhW)
                                     g$p$9722$c1uhW
                                     g$m*$9723$c1uhW
                                     g$s*$9724$c1uhW
                                     g$ae*$9725$c1uhW)))
                                '#f)))
                           (g$match$9634$c1uhW
                             (car g$e$9721$c1uhW)
                             g$p$9722$c1uhW
                             g$m*$9723$c1uhW
                             g$s*$9724$c1uhW
                             g$ae*$9725$c1uhW
                             '()))
                          (if (null? g$e$9721$c1uhW)
                            '()
                            (if (g$stx?$7676$c1uhW g$e$9721$c1uhW)
                              (if (not (g$top-marked?$7642$c1uhW
                                         g$m*$9723$c1uhW))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7691$c1uhW
                                         g$m*$9723$c1uhW
                                         g$s*$9724$c1uhW
                                         g$ae*$9725$c1uhW
                                         g$e$9721$c1uhW)))
                                    (case-lambda
                                      ((g$m*$9731$c1uhW
                                         g$s*$9732$c1uhW
                                         g$ae*$9733$c1uhW)
                                       ((case-lambda
                                          ((g$ae*$9734$c1uhW
                                             g$s*$9735$c1uhW
                                             g$m*$9736$c1uhW)
                                           (g$match-each$9628$c1uhW
                                             (g$stx-expr$7678$c1uhW
                                               g$e$9721$c1uhW)
                                             g$p$9722$c1uhW
                                             g$m*$9736$c1uhW
                                             g$s*$9735$c1uhW
                                             g$ae*$9734$c1uhW)))
                                        g$ae*$9733$c1uhW
                                        g$s*$9732$c1uhW
                                        g$m*$9731$c1uhW)))))
                                '#f)
                              (if (annotation? g$e$9721$c1uhW)
                                (g$match-each$9628$c1uhW
                                  (annotation-expression g$e$9721$c1uhW)
                                  g$p$9722$c1uhW
                                  g$m*$9723$c1uhW
                                  g$s*$9724$c1uhW
                                  g$ae*$9725$c1uhW)
                                '#f)))))))
                   (g$match-each+$9629$c1uhW
                     (case-lambda
                       ((g$e$9689$c1uhW
                          g$x-pat$9690$c1uhW
                          g$y-pat$9691$c1uhW
                          g$z-pat$9692$c1uhW
                          g$m*$9693$c1uhW
                          g$s*$9694$c1uhW
                          g$ae*$9695$c1uhW
                          g$r$9696$c1uhW)
                        ((letrec ((g$f$9697$c1uhW
                                    (case-lambda
                                      ((g$e$9698$c1uhW
                                         g$m*$9699$c1uhW
                                         g$s*$9700$c1uhW
                                         g$ae*$9701$c1uhW)
                                       (if (pair? g$e$9698$c1uhW)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$f$9697$c1uhW
                                                (cdr g$e$9698$c1uhW)
                                                g$m*$9699$c1uhW
                                                g$s*$9700$c1uhW
                                                g$ae*$9701$c1uhW)))
                                           (case-lambda
                                             ((g$xr*$9705$c1uhW
                                                g$y-pat$9706$c1uhW
                                                g$r$9707$c1uhW)
                                              ((case-lambda
                                                 ((g$r$9708$c1uhW
                                                    g$y-pat$9709$c1uhW
                                                    g$xr*$9710$c1uhW)
                                                  (if g$r$9708$c1uhW
                                                    (if (null?
                                                          g$y-pat$9709$c1uhW)
                                                      ((case-lambda
                                                         ((g$xr$9711$c1uhW)
                                                          (if g$xr$9711$c1uhW
                                                            (values
                                                              (cons
                                                                g$xr$9711$c1uhW
                                                                g$xr*$9710$c1uhW)
                                                              g$y-pat$9709$c1uhW
                                                              g$r$9708$c1uhW)
                                                            (values
                                                              '#f
                                                              '#f
                                                              '#f))))
                                                       (g$match$9634$c1uhW
                                                         (car g$e$9698$c1uhW)
                                                         g$x-pat$9690$c1uhW
                                                         g$m*$9699$c1uhW
                                                         g$s*$9700$c1uhW
                                                         g$ae*$9701$c1uhW
                                                         '()))
                                                      (values
                                                        '()
                                                        (cdr g$y-pat$9709$c1uhW)
                                                        (g$match$9634$c1uhW
                                                          (car g$e$9698$c1uhW)
                                                          (car g$y-pat$9709$c1uhW)
                                                          g$m*$9699$c1uhW
                                                          g$s*$9700$c1uhW
                                                          g$ae*$9701$c1uhW
                                                          g$r$9708$c1uhW)))
                                                    (values '#f '#f '#f))))
                                               g$r$9707$c1uhW
                                               g$y-pat$9706$c1uhW
                                               g$xr*$9705$c1uhW))))
                                         (if (g$stx?$7676$c1uhW g$e$9698$c1uhW)
                                           (if (g$top-marked?$7642$c1uhW
                                                 g$m*$9699$c1uhW)
                                             (values
                                               '()
                                               g$y-pat$9691$c1uhW
                                               (g$match$9634$c1uhW
                                                 g$e$9698$c1uhW
                                                 g$z-pat$9692$c1uhW
                                                 g$m*$9699$c1uhW
                                                 g$s*$9700$c1uhW
                                                 g$ae*$9701$c1uhW
                                                 g$r$9696$c1uhW))
                                             (call-with-values
                                               (case-lambda
                                                 (()
                                                  (g$join-wraps$7691$c1uhW
                                                    g$m*$9699$c1uhW
                                                    g$s*$9700$c1uhW
                                                    g$ae*$9701$c1uhW
                                                    g$e$9698$c1uhW)))
                                               (case-lambda
                                                 ((g$m*$9715$c1uhW
                                                    g$s*$9716$c1uhW
                                                    g$ae*$9717$c1uhW)
                                                  ((case-lambda
                                                     ((g$ae*$9718$c1uhW
                                                        g$s*$9719$c1uhW
                                                        g$m*$9720$c1uhW)
                                                      (g$f$9697$c1uhW
                                                        (g$stx-expr$7678$c1uhW
                                                          g$e$9698$c1uhW)
                                                        g$m*$9720$c1uhW
                                                        g$s*$9719$c1uhW
                                                        g$ae*$9718$c1uhW)))
                                                   g$ae*$9717$c1uhW
                                                   g$s*$9716$c1uhW
                                                   g$m*$9715$c1uhW)))))
                                           (if (annotation? g$e$9698$c1uhW)
                                             (g$f$9697$c1uhW
                                               (annotation-expression
                                                 g$e$9698$c1uhW)
                                               g$m*$9699$c1uhW
                                               g$s*$9700$c1uhW
                                               g$ae*$9701$c1uhW)
                                             (values
                                               '()
                                               g$y-pat$9691$c1uhW
                                               (g$match$9634$c1uhW
                                                 g$e$9698$c1uhW
                                                 g$z-pat$9692$c1uhW
                                                 g$m*$9699$c1uhW
                                                 g$s*$9700$c1uhW
                                                 g$ae*$9701$c1uhW
                                                 g$r$9696$c1uhW)))))))))
                           g$f$9697$c1uhW)
                         g$e$9689$c1uhW
                         g$m*$9693$c1uhW
                         g$s*$9694$c1uhW
                         g$ae*$9695$c1uhW))))
                   (g$match-each-any$9630$c1uhW
                     (case-lambda
                       ((g$e$9675$c1uhW
                          g$m*$9676$c1uhW
                          g$s*$9677$c1uhW
                          g$ae*$9678$c1uhW)
                        (if (pair? g$e$9675$c1uhW)
                          ((case-lambda
                             ((g$l$9679$c1uhW)
                              (if g$l$9679$c1uhW
                                (begin
                                  '#f
                                  (cons
                                    (g$stx^$9627$c1uhW
                                      (car g$e$9675$c1uhW)
                                      g$m*$9676$c1uhW
                                      g$s*$9677$c1uhW
                                      g$ae*$9678$c1uhW)
                                    g$l$9679$c1uhW))
                                '#f)))
                           (g$match-each-any$9630$c1uhW
                             (cdr g$e$9675$c1uhW)
                             g$m*$9676$c1uhW
                             g$s*$9677$c1uhW
                             g$ae*$9678$c1uhW))
                          (if (null? g$e$9675$c1uhW)
                            '()
                            (if (g$stx?$7676$c1uhW g$e$9675$c1uhW)
                              (if (not (g$top-marked?$7642$c1uhW
                                         g$m*$9676$c1uhW))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7691$c1uhW
                                         g$m*$9676$c1uhW
                                         g$s*$9677$c1uhW
                                         g$ae*$9678$c1uhW
                                         g$e$9675$c1uhW)))
                                    (case-lambda
                                      ((g$m*$9683$c1uhW
                                         g$s*$9684$c1uhW
                                         g$ae*$9685$c1uhW)
                                       ((case-lambda
                                          ((g$ae*$9686$c1uhW
                                             g$s*$9687$c1uhW
                                             g$m*$9688$c1uhW)
                                           (g$match-each-any$9630$c1uhW
                                             (g$stx-expr$7678$c1uhW
                                               g$e$9675$c1uhW)
                                             g$m*$9688$c1uhW
                                             g$s*$9687$c1uhW
                                             g$ae*$9686$c1uhW)))
                                        g$ae*$9685$c1uhW
                                        g$s*$9684$c1uhW
                                        g$m*$9683$c1uhW)))))
                                '#f)
                              (if (annotation? g$e$9675$c1uhW)
                                (g$match-each-any$9630$c1uhW
                                  (annotation-expression g$e$9675$c1uhW)
                                  g$m*$9676$c1uhW
                                  g$s*$9677$c1uhW
                                  g$ae*$9678$c1uhW)
                                '#f)))))))
                   (g$match-empty$9631$c1uhW
                     (case-lambda
                       ((g$p$9672$c1uhW g$r$9673$c1uhW)
                        (if (null? g$p$9672$c1uhW)
                          g$r$9673$c1uhW
                          (if (eq? g$p$9672$c1uhW '_)
                            g$r$9673$c1uhW
                            (if (eq? g$p$9672$c1uhW 'any)
                              (cons '() g$r$9673$c1uhW)
                              (if (pair? g$p$9672$c1uhW)
                                (g$match-empty$9631$c1uhW
                                  (car g$p$9672$c1uhW)
                                  (g$match-empty$9631$c1uhW
                                    (cdr g$p$9672$c1uhW)
                                    g$r$9673$c1uhW))
                                (if (eq? g$p$9672$c1uhW 'each-any)
                                  (cons '() g$r$9673$c1uhW)
                                  ((case-lambda
                                     ((g$t$9674$c1uhW)
                                      (if (g$memv$5056$c1uhW
                                            g$t$9674$c1uhW
                                            '(each))
                                        (g$match-empty$9631$c1uhW
                                          (vector-ref g$p$9672$c1uhW '1)
                                          g$r$9673$c1uhW)
                                        (if (g$memv$5056$c1uhW
                                              g$t$9674$c1uhW
                                              '(each+))
                                          (g$match-empty$9631$c1uhW
                                            (vector-ref g$p$9672$c1uhW '1)
                                            (g$match-empty$9631$c1uhW
                                              (reverse
                                                (vector-ref g$p$9672$c1uhW '2))
                                              (g$match-empty$9631$c1uhW
                                                (vector-ref g$p$9672$c1uhW '3)
                                                g$r$9673$c1uhW)))
                                          (if (g$memv$5056$c1uhW
                                                g$t$9674$c1uhW
                                                '(free-id atom))
                                            g$r$9673$c1uhW
                                            (if (g$memv$5056$c1uhW
                                                  g$t$9674$c1uhW
                                                  '(scheme-id atom))
                                              g$r$9673$c1uhW
                                              (if (g$memv$5056$c1uhW
                                                    g$t$9674$c1uhW
                                                    '(vector))
                                                (g$match-empty$9631$c1uhW
                                                  (vector-ref g$p$9672$c1uhW '1)
                                                  g$r$9673$c1uhW)
                                                (assertion-violation
                                                  'syntax-dispatch
                                                  '"invalid pattern"
                                                  g$p$9672$c1uhW))))))))
                                   (vector-ref g$p$9672$c1uhW '0))))))))))
                   (g$combine$9632$c1uhW
                     (case-lambda
                       ((g$r*$9670$c1uhW g$r$9671$c1uhW)
                        (if (null? (car g$r*$9670$c1uhW))
                          g$r$9671$c1uhW
                          (cons
                            (g$map$5063$c1uhW car g$r*$9670$c1uhW)
                            (g$combine$9632$c1uhW
                              (g$map$5063$c1uhW cdr g$r*$9670$c1uhW)
                              g$r$9671$c1uhW))))))
                   (g$match*$9633$c1uhW
                     (case-lambda
                       ((g$e$9652$c1uhW
                          g$p$9653$c1uhW
                          g$m*$9654$c1uhW
                          g$s*$9655$c1uhW
                          g$ae*$9656$c1uhW
                          g$r$9657$c1uhW)
                        (if (null? g$p$9653$c1uhW)
                          (if (null? g$e$9652$c1uhW)
                            (begin '#f g$r$9657$c1uhW)
                            '#f)
                          (if (pair? g$p$9653$c1uhW)
                            (if (pair? g$e$9652$c1uhW)
                              (begin
                                '#f
                                (g$match$9634$c1uhW
                                  (car g$e$9652$c1uhW)
                                  (car g$p$9653$c1uhW)
                                  g$m*$9654$c1uhW
                                  g$s*$9655$c1uhW
                                  g$ae*$9656$c1uhW
                                  (g$match$9634$c1uhW
                                    (cdr g$e$9652$c1uhW)
                                    (cdr g$p$9653$c1uhW)
                                    g$m*$9654$c1uhW
                                    g$s*$9655$c1uhW
                                    g$ae*$9656$c1uhW
                                    g$r$9657$c1uhW)))
                              '#f)
                            (if (eq? g$p$9653$c1uhW 'each-any)
                              ((case-lambda
                                 ((g$l$9658$c1uhW)
                                  (if g$l$9658$c1uhW
                                    (begin
                                      '#f
                                      (cons g$l$9658$c1uhW g$r$9657$c1uhW))
                                    '#f)))
                               (g$match-each-any$9630$c1uhW
                                 g$e$9652$c1uhW
                                 g$m*$9654$c1uhW
                                 g$s*$9655$c1uhW
                                 g$ae*$9656$c1uhW))
                              ((case-lambda
                                 ((g$t$9659$c1uhW)
                                  (if (g$memv$5056$c1uhW g$t$9659$c1uhW '(each))
                                    (if (null? g$e$9652$c1uhW)
                                      (g$match-empty$9631$c1uhW
                                        (vector-ref g$p$9653$c1uhW '1)
                                        g$r$9657$c1uhW)
                                      ((case-lambda
                                         ((g$r*$9660$c1uhW)
                                          (if g$r*$9660$c1uhW
                                            (begin
                                              '#f
                                              (g$combine$9632$c1uhW
                                                g$r*$9660$c1uhW
                                                g$r$9657$c1uhW))
                                            '#f)))
                                       (g$match-each$9628$c1uhW
                                         g$e$9652$c1uhW
                                         (vector-ref g$p$9653$c1uhW '1)
                                         g$m*$9654$c1uhW
                                         g$s*$9655$c1uhW
                                         g$ae*$9656$c1uhW)))
                                    (if (g$memv$5056$c1uhW
                                          g$t$9659$c1uhW
                                          '(free-id))
                                      (if (symbol? g$e$9652$c1uhW)
                                        (if (g$top-marked?$7642$c1uhW
                                              g$m*$9654$c1uhW)
                                          (if (g$free-id=?$7708$c1uhW
                                                (g$stx^$9627$c1uhW
                                                  g$e$9652$c1uhW
                                                  g$m*$9654$c1uhW
                                                  g$s*$9655$c1uhW
                                                  g$ae*$9656$c1uhW)
                                                (vector-ref g$p$9653$c1uhW '1))
                                            (begin '#f g$r$9657$c1uhW)
                                            '#f)
                                          '#f)
                                        '#f)
                                      (if (g$memv$5056$c1uhW
                                            g$t$9659$c1uhW
                                            '(scheme-id))
                                        (if (symbol? g$e$9652$c1uhW)
                                          (if (g$top-marked?$7642$c1uhW
                                                g$m*$9654$c1uhW)
                                            (if (g$free-id=?$7708$c1uhW
                                                  (g$stx^$9627$c1uhW
                                                    g$e$9652$c1uhW
                                                    g$m*$9654$c1uhW
                                                    g$s*$9655$c1uhW
                                                    g$ae*$9656$c1uhW)
                                                  (g$scheme-stx$7925$c1uhW
                                                    (vector-ref
                                                      g$p$9653$c1uhW
                                                      '1)))
                                              (begin '#f g$r$9657$c1uhW)
                                              '#f)
                                            '#f)
                                          '#f)
                                        (if (g$memv$5056$c1uhW
                                              g$t$9659$c1uhW
                                              '(each+))
                                          (call-with-values
                                            (case-lambda
                                              (()
                                               (g$match-each+$9629$c1uhW
                                                 g$e$9652$c1uhW
                                                 (vector-ref g$p$9653$c1uhW '1)
                                                 (vector-ref g$p$9653$c1uhW '2)
                                                 (vector-ref g$p$9653$c1uhW '3)
                                                 g$m*$9654$c1uhW
                                                 g$s*$9655$c1uhW
                                                 g$ae*$9656$c1uhW
                                                 g$r$9657$c1uhW)))
                                            (case-lambda
                                              ((g$xr*$9664$c1uhW
                                                 g$y-pat$9665$c1uhW
                                                 g$r$9666$c1uhW)
                                               ((case-lambda
                                                  ((g$r$9667$c1uhW
                                                     g$y-pat$9668$c1uhW
                                                     g$xr*$9669$c1uhW)
                                                   (if g$r$9667$c1uhW
                                                     (if (null?
                                                           g$y-pat$9668$c1uhW)
                                                       (begin
                                                         '#f
                                                         (if (null?
                                                               g$xr*$9669$c1uhW)
                                                           (g$match-empty$9631$c1uhW
                                                             (vector-ref
                                                               g$p$9653$c1uhW
                                                               '1)
                                                             g$r$9667$c1uhW)
                                                           (g$combine$9632$c1uhW
                                                             g$xr*$9669$c1uhW
                                                             g$r$9667$c1uhW)))
                                                       '#f)
                                                     '#f)))
                                                g$r$9666$c1uhW
                                                g$y-pat$9665$c1uhW
                                                g$xr*$9664$c1uhW))))
                                          (if (g$memv$5056$c1uhW
                                                g$t$9659$c1uhW
                                                '(atom))
                                            (if (equal?
                                                  (vector-ref g$p$9653$c1uhW '1)
                                                  (g$strip$7714$c1uhW
                                                    g$e$9652$c1uhW
                                                    g$m*$9654$c1uhW))
                                              (begin '#f g$r$9657$c1uhW)
                                              '#f)
                                            (if (g$memv$5056$c1uhW
                                                  g$t$9659$c1uhW
                                                  '(vector))
                                              (if (vector? g$e$9652$c1uhW)
                                                (begin
                                                  '#f
                                                  (g$match$9634$c1uhW
                                                    (vector->list
                                                      g$e$9652$c1uhW)
                                                    (vector-ref
                                                      g$p$9653$c1uhW
                                                      '1)
                                                    g$m*$9654$c1uhW
                                                    g$s*$9655$c1uhW
                                                    g$ae*$9656$c1uhW
                                                    g$r$9657$c1uhW))
                                                '#f)
                                              (assertion-violation
                                                'syntax-dispatch
                                                '"invalid pattern"
                                                g$p$9653$c1uhW)))))))))
                               (vector-ref g$p$9653$c1uhW '0))))))))
                   (g$match$9634$c1uhW
                     (case-lambda
                       ((g$e$9637$c1uhW
                          g$p$9638$c1uhW
                          g$m*$9639$c1uhW
                          g$s*$9640$c1uhW
                          g$ae*$9641$c1uhW
                          g$r$9642$c1uhW)
                        (if (not g$r$9642$c1uhW)
                          '#f
                          (if (eq? g$p$9638$c1uhW '_)
                            g$r$9642$c1uhW
                            (if (eq? g$p$9638$c1uhW 'any)
                              (cons
                                (g$stx^$9627$c1uhW
                                  g$e$9637$c1uhW
                                  g$m*$9639$c1uhW
                                  g$s*$9640$c1uhW
                                  g$ae*$9641$c1uhW)
                                g$r$9642$c1uhW)
                              (if (g$stx?$7676$c1uhW g$e$9637$c1uhW)
                                (if (not (g$top-marked?$7642$c1uhW
                                           g$m*$9639$c1uhW))
                                  (begin
                                    '#f
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$join-wraps$7691$c1uhW
                                           g$m*$9639$c1uhW
                                           g$s*$9640$c1uhW
                                           g$ae*$9641$c1uhW
                                           g$e$9637$c1uhW)))
                                      (case-lambda
                                        ((g$m*$9646$c1uhW
                                           g$s*$9647$c1uhW
                                           g$ae*$9648$c1uhW)
                                         ((case-lambda
                                            ((g$ae*$9649$c1uhW
                                               g$s*$9650$c1uhW
                                               g$m*$9651$c1uhW)
                                             (g$match$9634$c1uhW
                                               (g$stx-expr$7678$c1uhW
                                                 g$e$9637$c1uhW)
                                               g$p$9638$c1uhW
                                               g$m*$9651$c1uhW
                                               g$s*$9650$c1uhW
                                               g$ae*$9649$c1uhW
                                               g$r$9642$c1uhW)))
                                          g$ae*$9648$c1uhW
                                          g$s*$9647$c1uhW
                                          g$m*$9646$c1uhW)))))
                                  '#f)
                                (if (annotation? g$e$9637$c1uhW)
                                  (g$match$9634$c1uhW
                                    (annotation-expression g$e$9637$c1uhW)
                                    g$p$9638$c1uhW
                                    g$m*$9639$c1uhW
                                    g$s*$9640$c1uhW
                                    g$ae*$9641$c1uhW
                                    g$r$9642$c1uhW)
                                  (g$match*$9633$c1uhW
                                    g$e$9637$c1uhW
                                    g$p$9638$c1uhW
                                    g$m*$9639$c1uhW
                                    g$s*$9640$c1uhW
                                    g$ae*$9641$c1uhW
                                    g$r$9642$c1uhW))))))))))
           (case-lambda
             ((g$e$9635$c1uhW g$p$9636$c1uhW)
              (g$match$9634$c1uhW
                g$e$9635$c1uhW
                g$p$9636$c1uhW
                '()
                '()
                '()
                '()))))))))
   (g$ellipsis?$7983$c1uhW
     g$ellipsis?$11486$c1uhW
     (case-lambda
       ((g$x$9741$c1uhW)
        (if (g$id?$7704$c1uhW g$x$9741$c1uhW)
          (begin
            '#f
            (g$free-id=?$7708$c1uhW
              g$x$9741$c1uhW
              (g$scheme-stx$7925$c1uhW '...)))
          '#f))))
   (g$underscore?$7984$c1uhW
     g$underscore?$11487$c1uhW
     (case-lambda
       ((g$x$9742$c1uhW)
        (if (g$id?$7704$c1uhW g$x$9742$c1uhW)
          (begin
            '#f
            (g$free-id=?$7708$c1uhW
              g$x$9742$c1uhW
              (g$scheme-stx$7925$c1uhW '_)))
          '#f))))
   (g$verify-literals$7985$c1uhW
     g$verify-literals$11488$c1uhW
     (case-lambda
       ((g$lits$9743$c1uhW g$expr$9744$c1uhW)
        (g$for-each$5064$c1uhW
          (case-lambda
            ((g$x$9745$c1uhW)
             (if ((case-lambda
                    ((g$t$9746$c1uhW)
                     (if g$t$9746$c1uhW
                       g$t$9746$c1uhW
                       ((case-lambda
                          ((g$t$9747$c1uhW)
                           (if g$t$9747$c1uhW
                             g$t$9747$c1uhW
                             (begin
                               '#f
                               (g$underscore?$7984$c1uhW g$x$9745$c1uhW)))))
                        (g$ellipsis?$7983$c1uhW g$x$9745$c1uhW)))))
                  (not (g$id?$7704$c1uhW g$x$9745$c1uhW)))
               (g$syntax-violation$8094$c1uhW
                 '#f
                 '"invalid literal"
                 g$expr$9744$c1uhW
                 g$x$9745$c1uhW)
               (void))))
          g$lits$9743$c1uhW))))
   (g$syntax-case-transformer$7986$c1uhW
     g$syntax-case-transformer$11489$c1uhW
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9748$c1uhW
                     (case-lambda
                       ((g$pvars$9805$c1uhW
                          g$expr$9806$c1uhW
                          g$y$9807$c1uhW
                          g$r$9808$c1uhW
                          g$mr$9809$c1uhW)
                        ((case-lambda
                           ((g$ids$9810$c1uhW g$levels$9811$c1uhW)
                            ((case-lambda
                               ((g$labels$9812$c1uhW g$new-vars$9813$c1uhW)
                                ((case-lambda
                                   ((g$body$9814$c1uhW)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7630$c1uhW
                                        '#f
                                        g$new-vars$9813$c1uhW
                                        g$body$9814$c1uhW)
                                      g$y$9807$c1uhW)))
                                 (g$chi-expr$8000$c1uhW
                                   (g$add-subst$7694$c1uhW
                                     (g$make-full-rib$7672$c1uhW
                                       g$ids$9810$c1uhW
                                       g$labels$9812$c1uhW)
                                     g$expr$9806$c1uhW)
                                   (append
                                     (g$map$5063$c1uhW
                                       (case-lambda
                                         ((g$label$9815$c1uhW
                                            g$var$9816$c1uhW
                                            g$level$9817$c1uhW)
                                          (cons
                                            g$label$9815$c1uhW
                                            (g$make-binding$7720$c1uhW
                                              'syntax
                                              (cons
                                                g$var$9816$c1uhW
                                                g$level$9817$c1uhW)))))
                                       g$labels$9812$c1uhW
                                       g$new-vars$9813$c1uhW
                                       (g$map$5063$c1uhW
                                         cdr
                                         g$pvars$9805$c1uhW))
                                     g$r$9808$c1uhW)
                                   g$mr$9809$c1uhW))))
                             (g$map$5063$c1uhW
                               g$gen-label$7645$c1uhW
                               g$ids$9810$c1uhW)
                             (g$map$5063$c1uhW
                               g$gen-lexical$7643$c1uhW
                               g$ids$9810$c1uhW))))
                         (g$map$5063$c1uhW car g$pvars$9805$c1uhW)
                         (g$map$5063$c1uhW cdr g$pvars$9805$c1uhW)))))
                   (g$invalid-ids-error$9749$c1uhW
                     (case-lambda
                       ((g$id*$9799$c1uhW g$e$9800$c1uhW g$class$9801$c1uhW)
                        ((letrec ((g$find$9802$c1uhW
                                    (case-lambda
                                      ((g$id*$9803$c1uhW g$ok*$9804$c1uhW)
                                       (if (null? g$id*$9803$c1uhW)
                                         (g$syntax-violation$8094$c1uhW
                                           '#f
                                           '"invalid syntax"
                                           g$e$9800$c1uhW)
                                         (if (g$id?$7704$c1uhW
                                               (car g$id*$9803$c1uhW))
                                           (if (g$bound-id-member?$7711$c1uhW
                                                 (car g$id*$9803$c1uhW)
                                                 g$ok*$9804$c1uhW)
                                             (g$syntax-error$8091$c1uhW
                                               (car g$id*$9803$c1uhW)
                                               '"duplicate "
                                               g$class$9801$c1uhW)
                                             (g$find$9802$c1uhW
                                               (cdr g$id*$9803$c1uhW)
                                               (cons
                                                 (car g$id*$9803$c1uhW)
                                                 g$ok*$9804$c1uhW)))
                                           (g$syntax-error$8091$c1uhW
                                             (car g$id*$9803$c1uhW)
                                             '"invalid "
                                             g$class$9801$c1uhW)))))))
                           g$find$9802$c1uhW)
                         g$id*$9799$c1uhW
                         '()))))
                   (g$gen-clause$9750$c1uhW
                     (case-lambda
                       ((g$x$9779$c1uhW
                          g$keys$9780$c1uhW
                          g$clauses$9781$c1uhW
                          g$r$9782$c1uhW
                          g$mr$9783$c1uhW
                          g$pat$9784$c1uhW
                          g$fender$9785$c1uhW
                          g$expr$9786$c1uhW)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7981$c1uhW
                               g$pat$9784$c1uhW
                               g$keys$9780$c1uhW)))
                          (case-lambda
                            ((g$p$9789$c1uhW g$pvars$9790$c1uhW)
                             ((case-lambda
                                ((g$pvars$9791$c1uhW g$p$9792$c1uhW)
                                 (if (not (g$distinct-bound-ids?$7710$c1uhW
                                            (g$map$5063$c1uhW
                                              car
                                              g$pvars$9791$c1uhW)))
                                   (g$invalid-ids-error$9749$c1uhW
                                     (g$map$5063$c1uhW car g$pvars$9791$c1uhW)
                                     g$pat$9784$c1uhW
                                     '"pattern variable")
                                   (if (not (g$for-all$5061$c1uhW
                                              (case-lambda
                                                ((g$x$9793$c1uhW)
                                                 (not (g$ellipsis?$7983$c1uhW
                                                        (car g$x$9793$c1uhW)))))
                                              g$pvars$9791$c1uhW))
                                     (g$syntax-violation$8094$c1uhW
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9784$c1uhW)
                                     ((case-lambda
                                        ((g$y$9794$c1uhW)
                                         ((case-lambda
                                            ((g$test$9795$c1uhW)
                                             ((case-lambda
                                                ((g$conseq$9796$c1uhW)
                                                 ((case-lambda
                                                    ((g$altern$9797$c1uhW)
                                                     (list
                                                       (g$build-lambda$7630$c1uhW
                                                         '#f
                                                         (list g$y$9794$c1uhW)
                                                         (list
                                                           'if
                                                           g$test$9795$c1uhW
                                                           g$conseq$9796$c1uhW
                                                           g$altern$9797$c1uhW))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9779$c1uhW
                                                         (list
                                                           'quote
                                                           g$p$9792$c1uhW)))))
                                                  (g$gen-syntax-case$9751$c1uhW
                                                    g$x$9779$c1uhW
                                                    g$keys$9780$c1uhW
                                                    g$clauses$9781$c1uhW
                                                    g$r$9782$c1uhW
                                                    g$mr$9783$c1uhW))))
                                              (g$build-dispatch-call$9748$c1uhW
                                                g$pvars$9791$c1uhW
                                                g$expr$9786$c1uhW
                                                g$y$9794$c1uhW
                                                g$r$9782$c1uhW
                                                g$mr$9783$c1uhW))))
                                          (if (eq? g$fender$9785$c1uhW '#t)
                                            g$y$9794$c1uhW
                                            ((case-lambda
                                               ((g$call$9798$c1uhW)
                                                (list
                                                  'if
                                                  g$y$9794$c1uhW
                                                  g$call$9798$c1uhW
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9748$c1uhW
                                               g$pvars$9791$c1uhW
                                               g$fender$9785$c1uhW
                                               g$y$9794$c1uhW
                                               g$r$9782$c1uhW
                                               g$mr$9783$c1uhW))))))
                                      (g$gen-lexical$7643$c1uhW 'tmp))))))
                              g$pvars$9790$c1uhW
                              g$p$9789$c1uhW)))))))
                   (g$gen-syntax-case$9751$c1uhW
                     (case-lambda
                       ((g$x$9762$c1uhW
                          g$keys$9763$c1uhW
                          g$clauses$9764$c1uhW
                          g$r$9765$c1uhW
                          g$mr$9766$c1uhW)
                        (if (null? g$clauses$9764$c1uhW)
                          (list '(primitive syntax-error) g$x$9762$c1uhW)
                          ((case-lambda
                             ((g$t$9767$c1uhW)
                              ((case-lambda
                                 ((g$ls/false$9768$c1uhW)
                                  (if g$ls/false$9768$c1uhW
                                    (apply
                                      (case-lambda
                                        ((g$pat$9769$c1uhW g$expr$9770$c1uhW)
                                         (if (if (g$id?$7704$c1uhW
                                                   g$pat$9769$c1uhW)
                                               (if (not (g$bound-id-member?$7711$c1uhW
                                                          g$pat$9769$c1uhW
                                                          g$keys$9763$c1uhW))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7983$c1uhW
                                                          g$pat$9769$c1uhW)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7708$c1uhW
                                                 g$pat$9769$c1uhW
                                                 (g$scheme-stx$7925$c1uhW '_))
                                             (g$chi-expr$8000$c1uhW
                                               g$expr$9770$c1uhW
                                               g$r$9765$c1uhW
                                               g$mr$9766$c1uhW)
                                             ((case-lambda
                                                ((g$lab$9771$c1uhW
                                                   g$lex$9772$c1uhW)
                                                 ((case-lambda
                                                    ((g$body$9773$c1uhW)
                                                     (list
                                                       (g$build-lambda$7630$c1uhW
                                                         '#f
                                                         (list g$lex$9772$c1uhW)
                                                         g$body$9773$c1uhW)
                                                       g$x$9762$c1uhW)))
                                                  (g$chi-expr$8000$c1uhW
                                                    (g$add-subst$7694$c1uhW
                                                      (g$make-full-rib$7672$c1uhW
                                                        (list g$pat$9769$c1uhW)
                                                        (list g$lab$9771$c1uhW))
                                                      g$expr$9770$c1uhW)
                                                    (cons
                                                      (cons
                                                        g$lab$9771$c1uhW
                                                        (g$make-binding$7720$c1uhW
                                                          'syntax
                                                          (cons
                                                            g$lex$9772$c1uhW
                                                            '0)))
                                                      g$r$9765$c1uhW)
                                                    g$mr$9766$c1uhW))))
                                              (g$gen-label$7645$c1uhW
                                                g$pat$9769$c1uhW)
                                              (g$gen-lexical$7643$c1uhW
                                                g$pat$9769$c1uhW)))
                                           (g$gen-clause$9750$c1uhW
                                             g$x$9762$c1uhW
                                             g$keys$9763$c1uhW
                                             (cdr g$clauses$9764$c1uhW)
                                             g$r$9765$c1uhW
                                             g$mr$9766$c1uhW
                                             g$pat$9769$c1uhW
                                             '#t
                                             g$expr$9770$c1uhW))))
                                      g$ls/false$9768$c1uhW)
                                    ((case-lambda
                                       ((g$t$9774$c1uhW)
                                        ((case-lambda
                                           ((g$ls/false$9775$c1uhW)
                                            (if g$ls/false$9775$c1uhW
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9776$c1uhW
                                                     g$fender$9777$c1uhW
                                                     g$expr$9778$c1uhW)
                                                   (g$gen-clause$9750$c1uhW
                                                     g$x$9762$c1uhW
                                                     g$keys$9763$c1uhW
                                                     (cdr g$clauses$9764$c1uhW)
                                                     g$r$9765$c1uhW
                                                     g$mr$9766$c1uhW
                                                     g$pat$9776$c1uhW
                                                     g$fender$9777$c1uhW
                                                     g$expr$9778$c1uhW)))
                                                g$ls/false$9775$c1uhW)
                                              (g$syntax-violation$8094$c1uhW
                                                '#f
                                                '"invalid syntax"
                                                g$t$9774$c1uhW))))
                                         (g$syntax-dispatch$7982$c1uhW
                                           g$t$9774$c1uhW
                                           '(any any any)))))
                                     g$t$9767$c1uhW))))
                               (g$syntax-dispatch$7982$c1uhW
                                 g$t$9767$c1uhW
                                 '(any any)))))
                           (car g$clauses$9764$c1uhW)))))))
           (case-lambda
             ((g$e$9752$c1uhW g$r$9753$c1uhW g$mr$9754$c1uhW)
              ((case-lambda
                 ((g$t$9755$c1uhW)
                  ((case-lambda
                     ((g$ls/false$9756$c1uhW)
                      (if g$ls/false$9756$c1uhW
                        (apply
                          (case-lambda
                            ((g$expr$9757$c1uhW
                               g$keys$9758$c1uhW
                               g$clauses$9759$c1uhW)
                             (begin
                               (g$verify-literals$7985$c1uhW
                                 g$keys$9758$c1uhW
                                 g$e$9752$c1uhW)
                               ((case-lambda
                                  ((g$x$9760$c1uhW)
                                   ((case-lambda
                                      ((g$body$9761$c1uhW)
                                       (list
                                         (g$build-lambda$7630$c1uhW
                                           '#f
                                           (list g$x$9760$c1uhW)
                                           g$body$9761$c1uhW)
                                         (g$chi-expr$8000$c1uhW
                                           g$expr$9757$c1uhW
                                           g$r$9753$c1uhW
                                           g$mr$9754$c1uhW))))
                                    (g$gen-syntax-case$9751$c1uhW
                                      g$x$9760$c1uhW
                                      g$keys$9758$c1uhW
                                      g$clauses$9759$c1uhW
                                      g$r$9753$c1uhW
                                      g$mr$9754$c1uhW))))
                                (g$gen-lexical$7643$c1uhW 'tmp)))))
                          g$ls/false$9756$c1uhW)
                        (g$syntax-violation$8094$c1uhW
                          '#f
                          '"invalid syntax"
                          g$t$9755$c1uhW))))
                   (g$syntax-dispatch$7982$c1uhW
                     g$t$9755$c1uhW
                     '(_ any each-any . each-any)))))
               g$e$9752$c1uhW))))))))
   (g$ellipsis-map$7987$c1uhW
     g$ellipsis-map$11490$c1uhW
     (case-lambda
       ((g$proc$9818$c1uhW g$ls$9819$c1uhW . g$ls*$9820$c1uhW)
        (letrec* ((g$who$9821$c1uhW '...))
          (begin
            (if (not (list? g$ls$9819$c1uhW))
              (assertion-violation
                g$who$9821$c1uhW
                '"not a list"
                g$ls$9819$c1uhW)
              (void))
            (if (not (null? g$ls*$9820$c1uhW))
              ((case-lambda
                 ((g$n$9822$c1uhW)
                  (g$for-each$5064$c1uhW
                    (case-lambda
                      ((g$x$9823$c1uhW)
                       (begin
                         (if (not (list? g$x$9823$c1uhW))
                           (assertion-violation
                             g$who$9821$c1uhW
                             '"not a list"
                             g$x$9823$c1uhW)
                           (void))
                         (if (not (= (length g$x$9823$c1uhW) g$n$9822$c1uhW))
                           (assertion-violation
                             g$who$9821$c1uhW
                             '"length mismatch"
                             g$ls$9819$c1uhW
                             g$x$9823$c1uhW)
                           (void)))))
                    g$ls*$9820$c1uhW)))
               (length g$ls$9819$c1uhW))
              (void))
            (apply
              g$map$5063$c1uhW
              g$proc$9818$c1uhW
              g$ls$9819$c1uhW
              g$ls*$9820$c1uhW))))))
   (g$syntax-transformer$7988$c1uhW
     g$syntax-transformer$11491$c1uhW
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9824$c1uhW
                     (case-lambda
                       ((g$src$9884$c1uhW
                          g$e$9885$c1uhW
                          g$r$9886$c1uhW
                          g$maps$9887$c1uhW
                          g$ellipsis?$9888$c1uhW
                          g$vec?$9889$c1uhW)
                        ((case-lambda
                           ((g$t$9890$c1uhW)
                            ((case-lambda
                               ((g$ls/false$9891$c1uhW)
                                (if (if g$ls/false$9891$c1uhW
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9892$c1uhW)
                                             (g$ellipsis?$9888$c1uhW
                                               g$dots$9892$c1uhW)))
                                          g$ls/false$9891$c1uhW))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9893$c1uhW)
                                       (g$syntax-violation$8094$c1uhW
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9884$c1uhW)))
                                    g$ls/false$9891$c1uhW)
                                  ((case-lambda
                                     ((g$t$9894$c1uhW)
                                      ((case-lambda
                                         ((g$ls/false$9895$c1uhW)
                                          (if (if g$ls/false$9895$c1uhW
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9896$c1uhW)
                                                       (g$id?$7704$c1uhW
                                                         g$id$9896$c1uhW)))
                                                    g$ls/false$9895$c1uhW))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9897$c1uhW)
                                                 ((case-lambda
                                                    ((g$label$9898$c1uhW)
                                                     ((case-lambda
                                                        ((g$b$9899$c1uhW)
                                                         (if (eq? (g$binding-type$7721$c1uhW
                                                                    g$b$9899$c1uhW)
                                                                  'syntax)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$var.lev$9902$c1uhW)
                                                                    (g$gen-ref$9825$c1uhW
                                                                      g$src$9884$c1uhW
                                                                      (car g$var.lev$9902$c1uhW)
                                                                      (cdr g$var.lev$9902$c1uhW)
                                                                      g$maps$9887$c1uhW)))
                                                                 (g$binding-value$7722$c1uhW
                                                                   g$b$9899$c1uhW))))
                                                             (case-lambda
                                                               ((g$var$9903$c1uhW
                                                                  g$maps$9904$c1uhW)
                                                                ((case-lambda
                                                                   ((g$maps$9905$c1uhW
                                                                      g$var$9906$c1uhW)
                                                                    (values
                                                                      (list
                                                                        'ref
                                                                        g$var$9906$c1uhW)
                                                                      g$maps$9905$c1uhW)))
                                                                 g$maps$9904$c1uhW
                                                                 g$var$9903$c1uhW))))
                                                           (values
                                                             (list
                                                               'quote
                                                               g$e$9885$c1uhW)
                                                             g$maps$9887$c1uhW))))
                                                      (g$label->binding$7719$c1uhW
                                                        g$label$9898$c1uhW
                                                        g$r$9886$c1uhW))))
                                                  (g$id->label$7717$c1uhW
                                                    g$e$9885$c1uhW))))
                                              g$ls/false$9895$c1uhW)
                                            ((case-lambda
                                               ((g$t$9907$c1uhW)
                                                ((case-lambda
                                                   ((g$ls/false$9908$c1uhW)
                                                    (if (if g$ls/false$9908$c1uhW
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9909$c1uhW
                                                                   g$e$9910$c1uhW)
                                                                 (g$ellipsis?$9888$c1uhW
                                                                   g$dots$9909$c1uhW)))
                                                              g$ls/false$9908$c1uhW))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9911$c1uhW
                                                             g$e$9912$c1uhW)
                                                           (if g$vec?$9889$c1uhW
                                                             (g$syntax-violation$8094$c1uhW
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9884$c1uhW)
                                                             (g$gen-syntax$9824$c1uhW
                                                               g$src$9884$c1uhW
                                                               g$e$9912$c1uhW
                                                               g$r$9886$c1uhW
                                                               g$maps$9887$c1uhW
                                                               (case-lambda
                                                                 ((g$x$9913$c1uhW)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9908$c1uhW)
                                                      ((case-lambda
                                                         ((g$t$9914$c1uhW)
                                                          ((case-lambda
                                                             ((g$ls/false$9915$c1uhW)
                                                              (if (if g$ls/false$9915$c1uhW
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9916$c1uhW
                                                                             g$dots$9917$c1uhW
                                                                             g$y$9918$c1uhW)
                                                                           (g$ellipsis?$9888$c1uhW
                                                                             g$dots$9917$c1uhW)))
                                                                        g$ls/false$9915$c1uhW))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9919$c1uhW
                                                                       g$dots$9920$c1uhW
                                                                       g$y$9921$c1uhW)
                                                                     ((letrec ((g$f$9922$c1uhW
                                                                                 (case-lambda
                                                                                   ((g$y$9923$c1uhW
                                                                                      g$k$9924$c1uhW)
                                                                                    ((case-lambda
                                                                                       ((g$t$9925$c1uhW)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9926$c1uhW)
                                                                                            (if g$ls/false$9926$c1uhW
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9924$c1uhW
                                                                                                     g$maps$9887$c1uhW)))
                                                                                                g$ls/false$9926$c1uhW)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9927$c1uhW)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9928$c1uhW)
                                                                                                      (if (if g$ls/false$9928$c1uhW
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9929$c1uhW
                                                                                                                     g$y$9930$c1uhW)
                                                                                                                   (g$ellipsis?$9888$c1uhW
                                                                                                                     g$dots$9929$c1uhW)))
                                                                                                                g$ls/false$9928$c1uhW))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9931$c1uhW
                                                                                                               g$y$9932$c1uhW)
                                                                                                             (g$f$9922$c1uhW
                                                                                                               g$y$9932$c1uhW
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9933$c1uhW)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9924$c1uhW
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9933$c1uhW))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9936$c1uhW
                                                                                                                         g$maps$9937$c1uhW)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9938$c1uhW
                                                                                                                             g$x$9939$c1uhW)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9938$c1uhW))
                                                                                                                             (g$syntax-violation$8094$c1uhW
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9884$c1uhW)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9827$c1uhW
                                                                                                                                 g$x$9939$c1uhW
                                                                                                                                 (car g$maps$9938$c1uhW))
                                                                                                                               (cdr g$maps$9938$c1uhW)))))
                                                                                                                        g$maps$9937$c1uhW
                                                                                                                        g$x$9936$c1uhW)))))))))
                                                                                                          g$ls/false$9928$c1uhW)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9940$c1uhW)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9941$c1uhW)
                                                                                                                (if g$ls/false$9941$c1uhW
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9824$c1uhW
                                                                                                                              g$src$9884$c1uhW
                                                                                                                              g$y$9923$c1uhW
                                                                                                                              g$r$9886$c1uhW
                                                                                                                              g$maps$9887$c1uhW
                                                                                                                              g$ellipsis?$9888$c1uhW
                                                                                                                              g$vec?$9889$c1uhW)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9944$c1uhW
                                                                                                                              g$maps$9945$c1uhW)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9946$c1uhW
                                                                                                                                  g$y$9947$c1uhW)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9924$c1uhW
                                                                                                                                       g$maps$9946$c1uhW)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9950$c1uhW
                                                                                                                                       g$maps$9951$c1uhW)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9952$c1uhW
                                                                                                                                           g$x$9953$c1uhW)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9826$c1uhW
                                                                                                                                             g$x$9953$c1uhW
                                                                                                                                             g$y$9947$c1uhW)
                                                                                                                                           g$maps$9952$c1uhW)))
                                                                                                                                      g$maps$9951$c1uhW
                                                                                                                                      g$x$9950$c1uhW))))))
                                                                                                                             g$maps$9945$c1uhW
                                                                                                                             g$y$9944$c1uhW))))))
                                                                                                                    g$ls/false$9941$c1uhW)
                                                                                                                  (g$syntax-violation$8094$c1uhW
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9940$c1uhW))))
                                                                                                             (g$syntax-dispatch$7982$c1uhW
                                                                                                               g$t$9940$c1uhW
                                                                                                               '_))))
                                                                                                         g$t$9927$c1uhW))))
                                                                                                   (g$syntax-dispatch$7982$c1uhW
                                                                                                     g$t$9927$c1uhW
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9925$c1uhW))))
                                                                                         (g$syntax-dispatch$7982$c1uhW
                                                                                           g$t$9925$c1uhW
                                                                                           '()))))
                                                                                     g$y$9923$c1uhW)))))
                                                                        g$f$9922$c1uhW)
                                                                      g$y$9921$c1uhW
                                                                      (case-lambda
                                                                        ((g$maps$9954$c1uhW)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9824$c1uhW
                                                                                g$src$9884$c1uhW
                                                                                g$x$9919$c1uhW
                                                                                g$r$9886$c1uhW
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9954$c1uhW)
                                                                                g$ellipsis?$9888$c1uhW
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9957$c1uhW
                                                                                g$maps$9958$c1uhW)
                                                                              ((case-lambda
                                                                                 ((g$maps$9959$c1uhW
                                                                                    g$x$9960$c1uhW)
                                                                                  (if (null?
                                                                                        (car g$maps$9959$c1uhW))
                                                                                    (g$syntax-violation$8094$c1uhW
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9884$c1uhW)
                                                                                    (values
                                                                                      (g$gen-map$9828$c1uhW
                                                                                        g$x$9960$c1uhW
                                                                                        (car g$maps$9959$c1uhW))
                                                                                      (cdr g$maps$9959$c1uhW)))))
                                                                               g$maps$9958$c1uhW
                                                                               g$x$9957$c1uhW)))))))))
                                                                  g$ls/false$9915$c1uhW)
                                                                ((case-lambda
                                                                   ((g$t$9961$c1uhW)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9962$c1uhW)
                                                                        (if g$ls/false$9962$c1uhW
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9963$c1uhW
                                                                                 g$y$9964$c1uhW)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9824$c1uhW
                                                                                      g$src$9884$c1uhW
                                                                                      g$x$9963$c1uhW
                                                                                      g$r$9886$c1uhW
                                                                                      g$maps$9887$c1uhW
                                                                                      g$ellipsis?$9888$c1uhW
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9967$c1uhW
                                                                                      g$maps$9968$c1uhW)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9969$c1uhW
                                                                                          g$xnew$9970$c1uhW)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9824$c1uhW
                                                                                               g$src$9884$c1uhW
                                                                                               g$y$9964$c1uhW
                                                                                               g$r$9886$c1uhW
                                                                                               g$maps$9969$c1uhW
                                                                                               g$ellipsis?$9888$c1uhW
                                                                                               g$vec?$9889$c1uhW)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9973$c1uhW
                                                                                               g$maps$9974$c1uhW)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9975$c1uhW
                                                                                                   g$ynew$9976$c1uhW)
                                                                                                 (values
                                                                                                   (g$gen-cons$9829$c1uhW
                                                                                                     g$e$9885$c1uhW
                                                                                                     g$x$9963$c1uhW
                                                                                                     g$y$9964$c1uhW
                                                                                                     g$xnew$9970$c1uhW
                                                                                                     g$ynew$9976$c1uhW)
                                                                                                   g$maps$9975$c1uhW)))
                                                                                              g$maps$9974$c1uhW
                                                                                              g$ynew$9973$c1uhW))))))
                                                                                     g$maps$9968$c1uhW
                                                                                     g$xnew$9967$c1uhW))))))
                                                                            g$ls/false$9962$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$t$9977$c1uhW)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9978$c1uhW)
                                                                                  (if g$ls/false$9978$c1uhW
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9979$c1uhW)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9824$c1uhW
                                                                                                g$src$9884$c1uhW
                                                                                                g$ls$9979$c1uhW
                                                                                                g$r$9886$c1uhW
                                                                                                g$maps$9887$c1uhW
                                                                                                g$ellipsis?$9888$c1uhW
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9982$c1uhW
                                                                                                g$maps$9983$c1uhW)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9984$c1uhW
                                                                                                    g$lsnew$9985$c1uhW)
                                                                                                  (values
                                                                                                    (g$gen-vector$9830$c1uhW
                                                                                                      g$e$9885$c1uhW
                                                                                                      g$ls$9979$c1uhW
                                                                                                      g$lsnew$9985$c1uhW)
                                                                                                    g$maps$9984$c1uhW)))
                                                                                               g$maps$9983$c1uhW
                                                                                               g$lsnew$9982$c1uhW))))))
                                                                                      g$ls/false$9978$c1uhW)
                                                                                    ((case-lambda
                                                                                       ((g$t$9986$c1uhW)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9987$c1uhW)
                                                                                            (if g$ls/false$9987$c1uhW
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9885$c1uhW)
                                                                                                     g$maps$9887$c1uhW)))
                                                                                                g$ls/false$9987$c1uhW)
                                                                                              (g$syntax-violation$8094$c1uhW
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9986$c1uhW))))
                                                                                         (g$syntax-dispatch$7982$c1uhW
                                                                                           g$t$9986$c1uhW
                                                                                           '_))))
                                                                                     g$t$9977$c1uhW))))
                                                                               (g$syntax-dispatch$7982$c1uhW
                                                                                 g$t$9977$c1uhW
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9961$c1uhW))))
                                                                     (g$syntax-dispatch$7982$c1uhW
                                                                       g$t$9961$c1uhW
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9914$c1uhW))))
                                                           (g$syntax-dispatch$7982$c1uhW
                                                             g$t$9914$c1uhW
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9907$c1uhW))))
                                                 (g$syntax-dispatch$7982$c1uhW
                                                   g$t$9907$c1uhW
                                                   '(any any)))))
                                             g$t$9894$c1uhW))))
                                       (g$syntax-dispatch$7982$c1uhW
                                         g$t$9894$c1uhW
                                         'any))))
                                   g$t$9890$c1uhW))))
                             (g$syntax-dispatch$7982$c1uhW
                               g$t$9890$c1uhW
                               'any))))
                         g$e$9885$c1uhW))))
                   (g$gen-ref$9825$c1uhW
                     (case-lambda
                       ((g$src$9871$c1uhW
                          g$var$9872$c1uhW
                          g$level$9873$c1uhW
                          g$maps$9874$c1uhW)
                        (if (= g$level$9873$c1uhW '0)
                          (values g$var$9872$c1uhW g$maps$9874$c1uhW)
                          (if (null? g$maps$9874$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9871$c1uhW)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9825$c1uhW
                                   g$src$9871$c1uhW
                                   g$var$9872$c1uhW
                                   (- g$level$9873$c1uhW '1)
                                   (cdr g$maps$9874$c1uhW))))
                              (case-lambda
                                ((g$outer-var$9877$c1uhW
                                   g$outer-maps$9878$c1uhW)
                                 ((case-lambda
                                    ((g$outer-maps$9879$c1uhW
                                       g$outer-var$9880$c1uhW)
                                     ((case-lambda
                                        ((g$t$9881$c1uhW)
                                         (if g$t$9881$c1uhW
                                           ((case-lambda
                                              ((g$b$9882$c1uhW)
                                               (values
                                                 (cdr g$b$9882$c1uhW)
                                                 g$maps$9874$c1uhW)))
                                            g$t$9881$c1uhW)
                                           ((case-lambda
                                              ((g$inner-var$9883$c1uhW)
                                               (values
                                                 g$inner-var$9883$c1uhW
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9880$c1uhW
                                                       g$inner-var$9883$c1uhW)
                                                     (car g$maps$9874$c1uhW))
                                                   g$outer-maps$9879$c1uhW))))
                                            (g$gen-lexical$7643$c1uhW 'tmp)))))
                                      (g$assq$5051$c1uhW
                                        g$outer-var$9880$c1uhW
                                        (car g$maps$9874$c1uhW)))))
                                  g$outer-maps$9878$c1uhW
                                  g$outer-var$9877$c1uhW)))))))))
                   (g$gen-append$9826$c1uhW
                     (case-lambda
                       ((g$x$9869$c1uhW g$y$9870$c1uhW)
                        (if (equal? g$y$9870$c1uhW ''())
                          g$x$9869$c1uhW
                          (list 'append g$x$9869$c1uhW g$y$9870$c1uhW)))))
                   (g$gen-mappend$9827$c1uhW
                     (case-lambda
                       ((g$e$9867$c1uhW g$map-env$9868$c1uhW)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9828$c1uhW
                            g$e$9867$c1uhW
                            g$map-env$9868$c1uhW)))))
                   (g$gen-map$9828$c1uhW
                     (case-lambda
                       ((g$e$9858$c1uhW g$map-env$9859$c1uhW)
                        ((case-lambda
                           ((g$formals$9860$c1uhW g$actuals$9861$c1uhW)
                            (if (eq? (car g$e$9858$c1uhW) 'ref)
                              (car g$actuals$9861$c1uhW)
                              (if (g$for-all$5061$c1uhW
                                    (case-lambda
                                      ((g$x$9862$c1uhW)
                                       (if (eq? (car g$x$9862$c1uhW) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$5055$c1uhW
                                             (g$cadr$5264$c1uhW g$x$9862$c1uhW)
                                             g$formals$9860$c1uhW))
                                         '#f)))
                                    (cdr g$e$9858$c1uhW))
                                ((case-lambda
                                   ((g$args$9863$c1uhW)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9858$c1uhW))
                                        g$args$9863$c1uhW))))
                                 (g$map$5063$c1uhW
                                   ((case-lambda
                                      ((g$r$9864$c1uhW)
                                       (case-lambda
                                         ((g$x$9865$c1uhW)
                                          (cdr (g$assq$5051$c1uhW
                                                 (g$cadr$5264$c1uhW
                                                   g$x$9865$c1uhW)
                                                 g$r$9864$c1uhW))))))
                                    (g$map$5063$c1uhW
                                      cons
                                      g$formals$9860$c1uhW
                                      g$actuals$9861$c1uhW))
                                   (cdr g$e$9858$c1uhW)))
                                (g$cons*$5065$c1uhW
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9860$c1uhW
                                    g$e$9858$c1uhW)
                                  g$actuals$9861$c1uhW)))))
                         (g$map$5063$c1uhW cdr g$map-env$9859$c1uhW)
                         (g$map$5063$c1uhW
                           (case-lambda
                             ((g$x$9866$c1uhW)
                              (list 'ref (car g$x$9866$c1uhW))))
                           g$map-env$9859$c1uhW)))))
                   (g$gen-cons$9829$c1uhW
                     (case-lambda
                       ((g$e$9850$c1uhW
                          g$x$9851$c1uhW
                          g$y$9852$c1uhW
                          g$xnew$9853$c1uhW
                          g$ynew$9854$c1uhW)
                        ((case-lambda
                           ((g$t$9855$c1uhW)
                            (if (g$memv$5056$c1uhW g$t$9855$c1uhW '(quote))
                              (if (eq? (car g$xnew$9853$c1uhW) 'quote)
                                ((case-lambda
                                   ((g$xnew$9856$c1uhW g$ynew$9857$c1uhW)
                                    (if (if (eq? g$xnew$9856$c1uhW
                                                 g$x$9851$c1uhW)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9857$c1uhW
                                                 g$y$9852$c1uhW))
                                          '#f)
                                      (list 'quote g$e$9850$c1uhW)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9856$c1uhW
                                          g$ynew$9857$c1uhW)))))
                                 (g$cadr$5264$c1uhW g$xnew$9853$c1uhW)
                                 (g$cadr$5264$c1uhW g$ynew$9854$c1uhW))
                                (if (null?
                                      (g$cadr$5264$c1uhW g$ynew$9854$c1uhW))
                                  (list 'list g$xnew$9853$c1uhW)
                                  (list
                                    'cons
                                    g$xnew$9853$c1uhW
                                    g$ynew$9854$c1uhW)))
                              (if (g$memv$5056$c1uhW g$t$9855$c1uhW '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9853$c1uhW
                                    (cdr g$ynew$9854$c1uhW)))
                                (list
                                  'cons
                                  g$xnew$9853$c1uhW
                                  g$ynew$9854$c1uhW)))))
                         (car g$ynew$9854$c1uhW)))))
                   (g$gen-vector$9830$c1uhW
                     (case-lambda
                       ((g$e$9847$c1uhW g$ls$9848$c1uhW g$lsnew$9849$c1uhW)
                        (if (eq? (car g$lsnew$9849$c1uhW) 'quote)
                          (if (eq? (g$cadr$5264$c1uhW g$lsnew$9849$c1uhW)
                                   g$ls$9848$c1uhW)
                            (list 'quote g$e$9847$c1uhW)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5264$c1uhW g$lsnew$9849$c1uhW))))
                          (if (eq? (car g$lsnew$9849$c1uhW) 'list)
                            (cons 'vector (cdr g$lsnew$9849$c1uhW))
                            (list 'list->vector g$lsnew$9849$c1uhW))))))
                   (g$regen$9831$c1uhW
                     (case-lambda
                       ((g$x$9844$c1uhW)
                        ((case-lambda
                           ((g$t$9845$c1uhW)
                            (if (g$memv$5056$c1uhW g$t$9845$c1uhW '(ref))
                              (g$cadr$5264$c1uhW g$x$9844$c1uhW)
                              (if (g$memv$5056$c1uhW
                                    g$t$9845$c1uhW
                                    '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5264$c1uhW g$x$9844$c1uhW))
                                (if (g$memv$5056$c1uhW g$t$9845$c1uhW '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5264$c1uhW g$x$9844$c1uhW))
                                  (if (g$memv$5056$c1uhW
                                        g$t$9845$c1uhW
                                        '(lambda))
                                    (g$build-lambda$7630$c1uhW
                                      '#f
                                      (g$cadr$5264$c1uhW g$x$9844$c1uhW)
                                      (g$regen$9831$c1uhW
                                        (g$caddr$5270$c1uhW g$x$9844$c1uhW)))
                                    (if (g$memv$5056$c1uhW
                                          g$t$9845$c1uhW
                                          '(map))
                                      ((case-lambda
                                         ((g$ls$9846$c1uhW)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9846$c1uhW)))
                                       (g$map$5063$c1uhW
                                         g$regen$9831$c1uhW
                                         (cdr g$x$9844$c1uhW)))
                                      (cons
                                        (list 'primitive (car g$x$9844$c1uhW))
                                        (g$map$5063$c1uhW
                                          g$regen$9831$c1uhW
                                          (cdr g$x$9844$c1uhW))))))))))
                         (car g$x$9844$c1uhW))))))
           (case-lambda
             ((g$e$9832$c1uhW g$r$9833$c1uhW g$mr$9834$c1uhW)
              ((case-lambda
                 ((g$t$9835$c1uhW)
                  ((case-lambda
                     ((g$ls/false$9836$c1uhW)
                      (if g$ls/false$9836$c1uhW
                        (apply
                          (case-lambda
                            ((g$x$9837$c1uhW)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9824$c1uhW
                                    g$e$9832$c1uhW
                                    g$x$9837$c1uhW
                                    g$r$9833$c1uhW
                                    '()
                                    g$ellipsis?$7983$c1uhW
                                    '#f)))
                               (case-lambda
                                 ((g$e$9840$c1uhW g$maps$9841$c1uhW)
                                  ((case-lambda
                                     ((g$maps$9842$c1uhW g$e$9843$c1uhW)
                                      (g$regen$9831$c1uhW g$e$9843$c1uhW)))
                                   g$maps$9841$c1uhW
                                   g$e$9840$c1uhW))))))
                          g$ls/false$9836$c1uhW)
                        (g$syntax-violation$8094$c1uhW
                          '#f
                          '"invalid syntax"
                          g$t$9835$c1uhW))))
                   (g$syntax-dispatch$7982$c1uhW g$t$9835$c1uhW '(_ any)))))
               g$e$9832$c1uhW))))))))
   (g$core-macro-transformer$7989$c1uhW
     g$core-macro-transformer$11492$c1uhW
     (case-lambda
       ((g$name$9988$c1uhW)
        ((case-lambda
           ((g$t$9989$c1uhW)
            (if (g$memv$5056$c1uhW g$t$9989$c1uhW '(quote))
              g$quote-transformer$7942$c1uhW
              (if (g$memv$5056$c1uhW g$t$9989$c1uhW '(lambda))
                g$lambda-transformer$7944$c1uhW
                (if (g$memv$5056$c1uhW g$t$9989$c1uhW '(case-lambda))
                  g$case-lambda-transformer$7943$c1uhW
                  (if (g$memv$5056$c1uhW g$t$9989$c1uhW '(letrec))
                    g$letrec-transformer$7932$c1uhW
                    (if (g$memv$5056$c1uhW g$t$9989$c1uhW '(letrec*))
                      g$letrec*-transformer$7933$c1uhW
                      (if (g$memv$5056$c1uhW g$t$9989$c1uhW '(if))
                        g$if-transformer$7940$c1uhW
                        (if (g$memv$5056$c1uhW g$t$9989$c1uhW '(foreign-call))
                          g$foreign-call-transformer$7980$c1uhW
                          (if (g$memv$5056$c1uhW g$t$9989$c1uhW '(syntax-case))
                            g$syntax-case-transformer$7986$c1uhW
                            (if (g$memv$5056$c1uhW g$t$9989$c1uhW '(syntax))
                              g$syntax-transformer$7988$c1uhW
                              (if (g$memv$5056$c1uhW
                                    g$t$9989$c1uhW
                                    '(type-descriptor))
                                g$type-descriptor-transformer$7935$c1uhW
                                (if (g$memv$5056$c1uhW
                                      g$t$9989$c1uhW
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$7936$c1uhW
                                  (if (g$memv$5056$c1uhW
                                        g$t$9989$c1uhW
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$7937$c1uhW
                                    (if (g$memv$5056$c1uhW
                                          g$t$9989$c1uhW
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$7934$c1uhW
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$9988$c1uhW))))))))))))))))
         g$name$9988$c1uhW))))
   (g$file-options-macro$7990$c1uhW
     g$file-options-macro$11493$c1uhW
     (case-lambda
       ((g$x$9990$c1uhW)
        (letrec* ((g$valid-option?$9991$c1uhW
                    (case-lambda
                      ((g$x$9996$c1uhW)
                       (if (g$id?$7704$c1uhW g$x$9996$c1uhW)
                         (begin
                           '#f
                           (g$memq$5055$c1uhW
                             (g$id->sym$7705$c1uhW g$x$9996$c1uhW)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$9992$c1uhW)
              ((case-lambda
                 ((g$ls/false$9993$c1uhW)
                  (if (if g$ls/false$9993$c1uhW
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$9994$c1uhW)
                               (if (g$for-all$5061$c1uhW
                                     g$valid-option?$9991$c1uhW
                                     g$opt*$9994$c1uhW)
                                 (begin
                                   '#f
                                   (g$file-options-spec$6978$c1uhW
                                     (g$map$5063$c1uhW
                                       g$id->sym$7705$c1uhW
                                       g$opt*$9994$c1uhW)))
                                 '#f)))
                            g$ls/false$9993$c1uhW))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$9995$c1uhW)
                         (g$bless$7945$c1uhW
                           (list
                             'quote
                             (g$file-options-spec$6978$c1uhW
                               (g$map$5063$c1uhW
                                 g$id->sym$7705$c1uhW
                                 g$opt*$9995$c1uhW))))))
                      g$ls/false$9993$c1uhW)
                    (g$syntax-violation$8094$c1uhW
                      '#f
                      '"invalid syntax"
                      g$t$9992$c1uhW))))
               (g$syntax-dispatch$7982$c1uhW g$t$9992$c1uhW '(_ . each-any)))))
           g$x$9990$c1uhW)))))
   (g$symbol-macro$7991$c1uhW
     g$symbol-macro$11494$c1uhW
     (case-lambda
       ((g$x$9997$c1uhW g$set$9998$c1uhW)
        ((case-lambda
           ((g$t$9999$c1uhW)
            ((case-lambda
               ((g$ls/false$10000$c1uhW)
                (if (if g$ls/false$10000$c1uhW
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$10001$c1uhW)
                             (if (g$id?$7704$c1uhW g$name$10001$c1uhW)
                               (begin
                                 '#f
                                 (g$memq$5055$c1uhW
                                   (g$id->sym$7705$c1uhW g$name$10001$c1uhW)
                                   g$set$9998$c1uhW))
                               '#f)))
                          g$ls/false$10000$c1uhW))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$10002$c1uhW)
                       (g$bless$7945$c1uhW (list 'quote g$name$10002$c1uhW))))
                    g$ls/false$10000$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$9999$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$9999$c1uhW '(_ any)))))
         g$x$9997$c1uhW))))
   (g$macro-transformer$7992$c1uhW
     g$macro-transformer$11495$c1uhW
     (case-lambda
       ((g$x$10003$c1uhW)
        (if (procedure? g$x$10003$c1uhW)
          g$x$10003$c1uhW
          (if (symbol? g$x$10003$c1uhW)
            ((case-lambda
               ((g$t$10004$c1uhW)
                (if (g$memv$5056$c1uhW g$t$10004$c1uhW '(define-record-type))
                  g$define-record-type-macro$7976$c1uhW
                  (if (g$memv$5056$c1uhW g$t$10004$c1uhW '(define-struct))
                    g$define-struct-macro$7975$c1uhW
                    (if (g$memv$5056$c1uhW g$t$10004$c1uhW '(include))
                      g$include-macro$7970$c1uhW
                      (if (g$memv$5056$c1uhW g$t$10004$c1uhW '(cond))
                        g$cond-macro$7968$c1uhW
                        (if (g$memv$5056$c1uhW g$t$10004$c1uhW '(let))
                          g$let-macro$7948$c1uhW
                          (if (g$memv$5056$c1uhW g$t$10004$c1uhW '(do))
                            g$do-macro$7964$c1uhW
                            (if (g$memv$5056$c1uhW g$t$10004$c1uhW '(or))
                              g$or-macro$7966$c1uhW
                              (if (g$memv$5056$c1uhW g$t$10004$c1uhW '(and))
                                g$and-macro$7967$c1uhW
                                (if (g$memv$5056$c1uhW g$t$10004$c1uhW '(let*))
                                  g$let*-macro$7965$c1uhW
                                  (if (g$memv$5056$c1uhW
                                        g$t$10004$c1uhW
                                        '(let-values))
                                    g$let-values-macro$7949$c1uhW
                                    (if (g$memv$5056$c1uhW
                                          g$t$10004$c1uhW
                                          '(let*-values))
                                      g$let*-values-macro$7950$c1uhW
                                      (if (g$memv$5056$c1uhW
                                            g$t$10004$c1uhW
                                            '(syntax-rules))
                                        g$syntax-rules-macro$7972$c1uhW
                                        (if (g$memv$5056$c1uhW
                                              g$t$10004$c1uhW
                                              '(quasiquote))
                                          g$quasiquote-macro$7973$c1uhW
                                          (if (g$memv$5056$c1uhW
                                                g$t$10004$c1uhW
                                                '(quasisyntax))
                                            g$quasisyntax-macro$7974$c1uhW
                                            (if (g$memv$5056$c1uhW
                                                  g$t$10004$c1uhW
                                                  '(with-syntax))
                                              g$with-syntax-macro$7946$c1uhW
                                              (if (g$memv$5056$c1uhW
                                                    g$t$10004$c1uhW
                                                    '(when))
                                                g$when-macro$7938$c1uhW
                                                (if (g$memv$5056$c1uhW
                                                      g$t$10004$c1uhW
                                                      '(unless))
                                                  g$unless-macro$7939$c1uhW
                                                  (if (g$memv$5056$c1uhW
                                                        g$t$10004$c1uhW
                                                        '(case))
                                                    g$case-macro$7941$c1uhW
                                                    (if (g$memv$5056$c1uhW
                                                          g$t$10004$c1uhW
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$7963$c1uhW
                                                      (if (g$memv$5056$c1uhW
                                                            g$t$10004$c1uhW
                                                            '(time))
                                                        g$time-macro$7959$c1uhW
                                                        (if (g$memv$5056$c1uhW
                                                              g$t$10004$c1uhW
                                                              '(delay))
                                                          g$delay-macro$7960$c1uhW
                                                          (if (g$memv$5056$c1uhW
                                                                g$t$10004$c1uhW
                                                                '(assert))
                                                            g$assert-macro$7961$c1uhW
                                                            (if (g$memv$5056$c1uhW
                                                                  g$t$10004$c1uhW
                                                                  '(endianness))
                                                              g$endianness-macro$7962$c1uhW
                                                              (if (g$memv$5056$c1uhW
                                                                    g$t$10004$c1uhW
                                                                    '(guard))
                                                                g$guard-macro$7957$c1uhW
                                                                (if (g$memv$5056$c1uhW
                                                                      g$t$10004$c1uhW
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$7958$c1uhW
                                                                  (if (g$memv$5056$c1uhW
                                                                        g$t$10004$c1uhW
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$7951$c1uhW
                                                                    (if (g$memv$5056$c1uhW
                                                                          g$t$10004$c1uhW
                                                                          '(trace-define))
                                                                      g$trace-define-macro$7952$c1uhW
                                                                      (if (g$memv$5056$c1uhW
                                                                            g$t$10004$c1uhW
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$7953$c1uhW
                                                                        (if (g$memv$5056$c1uhW
                                                                              g$t$10004$c1uhW
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$7955$c1uhW
                                                                          (if (g$memv$5056$c1uhW
                                                                                g$t$10004$c1uhW
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$7956$c1uhW
                                                                            (if (g$memv$5056$c1uhW
                                                                                  g$t$10004$c1uhW
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$7977$c1uhW
                                                                              (if (g$memv$5056$c1uhW
                                                                                    g$t$10004$c1uhW
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$7979$c1uhW
                                                                                (if (g$memv$5056$c1uhW
                                                                                      g$t$10004$c1uhW
                                                                                      '(include-into))
                                                                                  g$include-into-macro$7971$c1uhW
                                                                                  (if (g$memv$5056$c1uhW
                                                                                        g$t$10004$c1uhW
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$10005$c1uhW)
                                                                                       (g$symbol-macro$7991$c1uhW
                                                                                         g$x$10005$c1uhW
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$5056$c1uhW
                                                                                          g$t$10004$c1uhW
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$10006$c1uhW)
                                                                                         (g$symbol-macro$7991$c1uhW
                                                                                           g$x$10006$c1uhW
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$5056$c1uhW
                                                                                            g$t$10004$c1uhW
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$10007$c1uhW)
                                                                                           (g$symbol-macro$7991$c1uhW
                                                                                             g$x$10007$c1uhW
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$5056$c1uhW
                                                                                              g$t$10004$c1uhW
                                                                                              '(file-options))
                                                                                          g$file-options-macro$7990$c1uhW
                                                                                          (if (g$memv$5056$c1uhW
                                                                                                g$t$10004$c1uhW
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$7978$c1uhW
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$10003$c1uhW)))))))))))))))))))))))))))))))))))))))))
             g$x$10003$c1uhW)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$10003$c1uhW))))))
   (g$local-macro-transformer$7993$c1uhW
     g$local-macro-transformer$11496$c1uhW
     (case-lambda ((g$x$10008$c1uhW) (car g$x$10008$c1uhW))))
   (g$do-macro-call$7994$c1uhW
     g$do-macro-call$11497$c1uhW
     (case-lambda
       ((g$transformer$10009$c1uhW g$expr$10010$c1uhW)
        ((case-lambda
           ((g$out$10011$c1uhW)
            (begin
              ((letrec ((g$f$10012$c1uhW
                          (case-lambda
                            ((g$x$10013$c1uhW)
                             (if (not (g$stx?$7676$c1uhW g$x$10013$c1uhW))
                               (if (pair? g$x$10013$c1uhW)
                                 (begin
                                   (g$f$10012$c1uhW (car g$x$10013$c1uhW))
                                   (g$f$10012$c1uhW (cdr g$x$10013$c1uhW)))
                                 (if (vector? g$x$10013$c1uhW)
                                   (vector-for-each
                                     g$f$10012$c1uhW
                                     g$x$10013$c1uhW)
                                   (if (symbol? g$x$10013$c1uhW)
                                     (g$syntax-violation$8094$c1uhW
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$10010$c1uhW
                                       g$x$10013$c1uhW)
                                     (void))))
                               (void))))))
                 g$f$10012$c1uhW)
               g$out$10011$c1uhW)
              (g$add-mark$7693$c1uhW
                (g$gen-mark$7688$c1uhW)
                g$out$10011$c1uhW
                g$expr$10010$c1uhW))))
         (g$transformer$10009$c1uhW
           (g$add-mark$7693$c1uhW
             g$anti-mark$7689$c1uhW
             g$expr$10010$c1uhW
             '#f))))))
   (g$chi-macro$7995$c1uhW
     g$chi-macro$11498$c1uhW
     (case-lambda
       ((g$p$10014$c1uhW g$e$10015$c1uhW)
        (g$do-macro-call$7994$c1uhW
          (g$macro-transformer$7992$c1uhW g$p$10014$c1uhW)
          g$e$10015$c1uhW))))
   (g$chi-local-macro$7996$c1uhW
     g$chi-local-macro$11499$c1uhW
     (case-lambda
       ((g$p$10016$c1uhW g$e$10017$c1uhW)
        (g$do-macro-call$7994$c1uhW
          (g$local-macro-transformer$7993$c1uhW g$p$10016$c1uhW)
          g$e$10017$c1uhW))))
   (g$chi-global-macro$7997$c1uhW
     g$chi-global-macro$11500$c1uhW
     (case-lambda
       ((g$p$10018$c1uhW g$e$10019$c1uhW)
        ((case-lambda
           ((g$lib$10020$c1uhW g$loc$10021$c1uhW)
            (begin
              (g$visit-library$7515$c1uhW g$lib$10020$c1uhW)
              ((case-lambda
                 ((g$x$10022$c1uhW)
                  ((case-lambda
                     ((g$transformer$10023$c1uhW)
                      (g$do-macro-call$7994$c1uhW
                        g$transformer$10023$c1uhW
                        g$e$10019$c1uhW)))
                   (if (procedure? g$x$10022$c1uhW)
                     g$x$10022$c1uhW
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$10022$c1uhW)))))
               (symbol-value g$loc$10021$c1uhW)))))
         (car g$p$10018$c1uhW)
         (cdr g$p$10018$c1uhW)))))
   (g$chi-expr*$7998$c1uhW
     g$chi-expr*$11501$c1uhW
     (case-lambda
       ((g$e*$10024$c1uhW g$r$10025$c1uhW g$mr$10026$c1uhW)
        (if (null? g$e*$10024$c1uhW)
          '()
          ((case-lambda
             ((g$e$10027$c1uhW)
              (cons
                g$e$10027$c1uhW
                (g$chi-expr*$7998$c1uhW
                  (cdr g$e*$10024$c1uhW)
                  g$r$10025$c1uhW
                  g$mr$10026$c1uhW))))
           (g$chi-expr$8000$c1uhW
             (car g$e*$10024$c1uhW)
             g$r$10025$c1uhW
             g$mr$10026$c1uhW))))))
   (g$chi-application$7999$c1uhW
     g$chi-application$11502$c1uhW
     (case-lambda
       ((g$e$10028$c1uhW g$r$10029$c1uhW g$mr$10030$c1uhW)
        ((case-lambda
           ((g$t$10031$c1uhW)
            ((case-lambda
               ((g$ls/false$10032$c1uhW)
                (if g$ls/false$10032$c1uhW
                  (apply
                    (case-lambda
                      ((g$rator$10033$c1uhW g$rands$10034$c1uhW)
                       ((case-lambda
                          ((g$rator$10035$c1uhW)
                           (cons
                             g$rator$10035$c1uhW
                             (g$chi-expr*$7998$c1uhW
                               g$rands$10034$c1uhW
                               g$r$10029$c1uhW
                               g$mr$10030$c1uhW))))
                        (g$chi-expr$8000$c1uhW
                          g$rator$10033$c1uhW
                          g$r$10029$c1uhW
                          g$mr$10030$c1uhW))))
                    g$ls/false$10032$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$10031$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$10031$c1uhW '(any . each-any)))))
         g$e$10028$c1uhW))))
   (g$chi-expr$8000$c1uhW
     g$chi-expr$11503$c1uhW
     (case-lambda
       ((g$e$10036$c1uhW g$r$10037$c1uhW g$mr$10038$c1uhW)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7724$c1uhW g$e$10036$c1uhW g$r$10037$c1uhW)))
          (case-lambda
            ((g$type$10042$c1uhW g$value$10043$c1uhW g$kwd$10044$c1uhW)
             ((case-lambda
                ((g$kwd$10045$c1uhW g$value$10046$c1uhW g$type$10047$c1uhW)
                 ((case-lambda
                    ((g$t$10048$c1uhW)
                     (if (g$memv$5056$c1uhW g$t$10048$c1uhW '(core-macro))
                       ((case-lambda
                          ((g$transformer$10049$c1uhW)
                           (g$transformer$10049$c1uhW
                             g$e$10036$c1uhW
                             g$r$10037$c1uhW
                             g$mr$10038$c1uhW)))
                        (g$core-macro-transformer$7989$c1uhW
                          g$value$10046$c1uhW))
                       (if (g$memv$5056$c1uhW g$t$10048$c1uhW '(global))
                         ((case-lambda
                            ((g$lib$10050$c1uhW)
                             ((case-lambda
                                ((g$loc$10051$c1uhW)
                                 (begin
                                   ((g$inv-collector$8034$c1uhW)
                                    g$lib$10050$c1uhW)
                                   g$loc$10051$c1uhW)))
                              (cdr g$value$10046$c1uhW))))
                          (car g$value$10046$c1uhW))
                         (if (g$memv$5056$c1uhW g$t$10048$c1uhW '(core-prim))
                           ((case-lambda
                              ((g$name$10052$c1uhW)
                               (list 'primitive g$name$10052$c1uhW)))
                            g$value$10046$c1uhW)
                           (if (g$memv$5056$c1uhW g$t$10048$c1uhW '(call))
                             (g$chi-application$7999$c1uhW
                               g$e$10036$c1uhW
                               g$r$10037$c1uhW
                               g$mr$10038$c1uhW)
                             (if (g$memv$5056$c1uhW g$t$10048$c1uhW '(lexical))
                               ((case-lambda
                                  ((g$lex$10053$c1uhW) g$lex$10053$c1uhW))
                                (g$lexical-var$7926$c1uhW g$value$10046$c1uhW))
                               (if (g$memv$5056$c1uhW
                                     g$t$10048$c1uhW
                                     '(global-macro global-macro!))
                                 (g$chi-expr$8000$c1uhW
                                   (g$chi-global-macro$7997$c1uhW
                                     g$value$10046$c1uhW
                                     g$e$10036$c1uhW)
                                   g$r$10037$c1uhW
                                   g$mr$10038$c1uhW)
                                 (if (g$memv$5056$c1uhW
                                       g$t$10048$c1uhW
                                       '(local-macro local-macro!))
                                   (g$chi-expr$8000$c1uhW
                                     (g$chi-local-macro$7996$c1uhW
                                       g$value$10046$c1uhW
                                       g$e$10036$c1uhW)
                                     g$r$10037$c1uhW
                                     g$mr$10038$c1uhW)
                                   (if (g$memv$5056$c1uhW
                                         g$t$10048$c1uhW
                                         '(macro macro!))
                                     (g$chi-expr$8000$c1uhW
                                       (g$chi-macro$7995$c1uhW
                                         g$value$10046$c1uhW
                                         g$e$10036$c1uhW)
                                       g$r$10037$c1uhW
                                       g$mr$10038$c1uhW)
                                     (if (g$memv$5056$c1uhW
                                           g$t$10048$c1uhW
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$10054$c1uhW)
                                           (list 'quote g$datum$10054$c1uhW)))
                                        g$value$10046$c1uhW)
                                       (if (g$memv$5056$c1uhW
                                             g$t$10048$c1uhW
                                             '(set!))
                                         (g$chi-set!$8001$c1uhW
                                           g$e$10036$c1uhW
                                           g$r$10037$c1uhW
                                           g$mr$10038$c1uhW)
                                         (if (g$memv$5056$c1uhW
                                               g$t$10048$c1uhW
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$10055$c1uhW)
                                               ((case-lambda
                                                  ((g$ls/false$10056$c1uhW)
                                                   (if g$ls/false$10056$c1uhW
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$10057$c1uhW
                                                            g$x*$10058$c1uhW)
                                                          (g$build-sequence$7633$c1uhW
                                                            '#f
                                                            (g$chi-expr*$7998$c1uhW
                                                              (cons
                                                                g$x$10057$c1uhW
                                                                g$x*$10058$c1uhW)
                                                              g$r$10037$c1uhW
                                                              g$mr$10038$c1uhW))))
                                                       g$ls/false$10056$c1uhW)
                                                     (g$syntax-violation$8094$c1uhW
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$10055$c1uhW))))
                                                (g$syntax-dispatch$7982$c1uhW
                                                  g$t$10055$c1uhW
                                                  '(_ any . each-any)))))
                                            g$e$10036$c1uhW)
                                           (if (g$memv$5056$c1uhW
                                                 g$t$10048$c1uhW
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$10059$c1uhW)
                                                 ((case-lambda
                                                    ((g$ls/false$10060$c1uhW)
                                                     (if (if g$ls/false$10060$c1uhW
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$10061$c1uhW
                                                                    g$xrhs*$10062$c1uhW
                                                                    g$xbody$10063$c1uhW
                                                                    g$xbody*$10064$c1uhW)
                                                                  (if (not (g$valid-bound-ids?$7709$c1uhW
                                                                             g$xlhs*$10061$c1uhW))
                                                                    (g$syntax-violation$8094$c1uhW
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$10036$c1uhW)
                                                                    (void))))
                                                               g$ls/false$10060$c1uhW))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$10065$c1uhW
                                                              g$xrhs*$10066$c1uhW
                                                              g$xbody$10067$c1uhW
                                                              g$xbody*$10068$c1uhW)
                                                            ((case-lambda
                                                               ((g$xlab*$10069$c1uhW)
                                                                ((case-lambda
                                                                   ((g$xrib$10070$c1uhW)
                                                                    ((case-lambda
                                                                       ((g$xb*$10071$c1uhW)
                                                                        (g$build-sequence$7633$c1uhW
                                                                          '#f
                                                                          (g$chi-expr*$7998$c1uhW
                                                                            (g$map$5063$c1uhW
                                                                              (case-lambda
                                                                                ((g$x$10072$c1uhW)
                                                                                 (g$add-subst$7694$c1uhW
                                                                                   g$xrib$10070$c1uhW
                                                                                   g$x$10072$c1uhW)))
                                                                              (cons
                                                                                g$xbody$10067$c1uhW
                                                                                g$xbody*$10068$c1uhW))
                                                                            (append
                                                                              (g$map$5063$c1uhW
                                                                                cons
                                                                                g$xlab*$10069$c1uhW
                                                                                g$xb*$10071$c1uhW)
                                                                              g$r$10037$c1uhW)
                                                                            (append
                                                                              (g$map$5063$c1uhW
                                                                                cons
                                                                                g$xlab*$10069$c1uhW
                                                                                g$xb*$10071$c1uhW)
                                                                              g$mr$10038$c1uhW)))))
                                                                     (g$map$5063$c1uhW
                                                                       (case-lambda
                                                                         ((g$x$10073$c1uhW)
                                                                          (g$make-eval-transformer$7736$c1uhW
                                                                            (g$expand-transformer$8027$c1uhW
                                                                              (if (eq? g$type$10047$c1uhW
                                                                                       'let-syntax)
                                                                                g$x$10073$c1uhW
                                                                                (g$add-subst$7694$c1uhW
                                                                                  g$xrib$10070$c1uhW
                                                                                  g$x$10073$c1uhW))
                                                                              g$mr$10038$c1uhW))))
                                                                       g$xrhs*$10066$c1uhW))))
                                                                 (g$make-full-rib$7672$c1uhW
                                                                   g$xlhs*$10065$c1uhW
                                                                   g$xlab*$10069$c1uhW))))
                                                             (g$map$5063$c1uhW
                                                               g$gen-label$7645$c1uhW
                                                               g$xlhs*$10065$c1uhW))))
                                                         g$ls/false$10060$c1uhW)
                                                       (g$syntax-violation$8094$c1uhW
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$10059$c1uhW))))
                                                  (g$syntax-dispatch$7982$c1uhW
                                                    g$t$10059$c1uhW
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$10036$c1uhW)
                                             (if (g$memv$5056$c1uhW
                                                   g$t$10048$c1uhW
                                                   '(displaced-lexical))
                                               (g$syntax-violation$8094$c1uhW
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$10036$c1uhW)
                                               (if (g$memv$5056$c1uhW
                                                     g$t$10048$c1uhW
                                                     '(syntax))
                                                 (g$syntax-violation$8094$c1uhW
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$10036$c1uhW)
                                                 (if (g$memv$5056$c1uhW
                                                       g$t$10048$c1uhW
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$8094$c1uhW
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$10074$c1uhW)
                                                           (if (g$memv$5056$c1uhW
                                                                 g$t$10074$c1uhW
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$5056$c1uhW
                                                                   g$t$10074$c1uhW
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$5056$c1uhW
                                                                     g$t$10074$c1uhW
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$5056$c1uhW
                                                                       g$t$10074$c1uhW
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$5056$c1uhW
                                                                         g$t$10074$c1uhW
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$5056$c1uhW
                                                                           g$t$10074$c1uhW
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$10047$c1uhW)
                                                       '" was found where an expression was expected")
                                                     g$e$10036$c1uhW)
                                                   (if (g$memv$5056$c1uhW
                                                         g$t$10048$c1uhW
                                                         '(mutable))
                                                     (g$syntax-violation$8094$c1uhW
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$10036$c1uhW)
                                                     (g$syntax-violation$8094$c1uhW
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$10036$c1uhW)))))))))))))))))))
                  g$type$10047$c1uhW)))
              g$kwd$10044$c1uhW
              g$value$10043$c1uhW
              g$type$10042$c1uhW)))))))
   (g$chi-set!$8001$c1uhW
     g$chi-set!$11504$c1uhW
     (case-lambda
       ((g$e$10075$c1uhW g$r$10076$c1uhW g$mr$10077$c1uhW)
        ((case-lambda
           ((g$t$10078$c1uhW)
            ((case-lambda
               ((g$ls/false$10079$c1uhW)
                (if (if g$ls/false$10079$c1uhW
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$10080$c1uhW g$v$10081$c1uhW)
                             (g$id?$7704$c1uhW g$x$10080$c1uhW)))
                          g$ls/false$10079$c1uhW))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$10082$c1uhW g$v$10083$c1uhW)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7724$c1uhW
                              g$x$10082$c1uhW
                              g$r$10076$c1uhW)))
                         (case-lambda
                           ((g$type$10087$c1uhW
                              g$value$10088$c1uhW
                              g$kwd$10089$c1uhW)
                            ((case-lambda
                               ((g$kwd$10090$c1uhW
                                  g$value$10091$c1uhW
                                  g$type$10092$c1uhW)
                                ((case-lambda
                                   ((g$t$10093$c1uhW)
                                    (if (g$memv$5056$c1uhW
                                          g$t$10093$c1uhW
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$7928$c1uhW
                                          g$value$10091$c1uhW
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7926$c1uhW
                                            g$value$10091$c1uhW)
                                          (g$chi-expr$8000$c1uhW
                                            g$v$10083$c1uhW
                                            g$r$10076$c1uhW
                                            g$mr$10077$c1uhW)))
                                      (if (g$memv$5056$c1uhW
                                            g$t$10093$c1uhW
                                            '(core-prim))
                                        (g$syntax-violation$8094$c1uhW
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$10075$c1uhW)
                                        (if (g$memv$5056$c1uhW
                                              g$t$10093$c1uhW
                                              '(global))
                                          (g$syntax-violation$8094$c1uhW
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$10075$c1uhW)
                                          (if (g$memv$5056$c1uhW
                                                g$t$10093$c1uhW
                                                '(global-macro!))
                                            (g$chi-expr$8000$c1uhW
                                              (g$chi-global-macro$7997$c1uhW
                                                g$value$10091$c1uhW
                                                g$e$10075$c1uhW)
                                              g$r$10076$c1uhW
                                              g$mr$10077$c1uhW)
                                            (if (g$memv$5056$c1uhW
                                                  g$t$10093$c1uhW
                                                  '(local-macro!))
                                              (g$chi-expr$8000$c1uhW
                                                (g$chi-local-macro$7996$c1uhW
                                                  g$value$10091$c1uhW
                                                  g$e$10075$c1uhW)
                                                g$r$10076$c1uhW
                                                g$mr$10077$c1uhW)
                                              (if (g$memv$5056$c1uhW
                                                    g$t$10093$c1uhW
                                                    '(mutable))
                                                (g$syntax-violation$8094$c1uhW
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$10075$c1uhW)
                                                (g$syntax-violation$8094$c1uhW
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$10075$c1uhW)))))))))
                                 g$type$10092$c1uhW)))
                             g$kwd$10089$c1uhW
                             g$value$10088$c1uhW
                             g$type$10087$c1uhW))))))
                    g$ls/false$10079$c1uhW)
                  (g$syntax-violation$8094$c1uhW
                    '#f
                    '"invalid syntax"
                    g$t$10078$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$10078$c1uhW '(_ any any)))))
         g$e$10075$c1uhW))))
   (g$verify-formals$8002$c1uhW
     g$verify-formals$11505$c1uhW
     (case-lambda
       ((g$fmls$10094$c1uhW g$stx$10095$c1uhW)
        ((case-lambda
           ((g$t$10096$c1uhW)
            ((case-lambda
               ((g$ls/false$10097$c1uhW)
                (if g$ls/false$10097$c1uhW
                  (apply
                    (case-lambda
                      ((g$x*$10098$c1uhW)
                       (if (not (g$valid-bound-ids?$7709$c1uhW
                                  g$x*$10098$c1uhW))
                         (g$invalid-fmls-error$7947$c1uhW
                           g$stx$10095$c1uhW
                           g$fmls$10094$c1uhW)
                         (void))))
                    g$ls/false$10097$c1uhW)
                  ((case-lambda
                     ((g$t$10099$c1uhW)
                      ((case-lambda
                         ((g$ls/false$10100$c1uhW)
                          (if g$ls/false$10100$c1uhW
                            (apply
                              (case-lambda
                                ((g$x*$10101$c1uhW g$x$10102$c1uhW)
                                 (if (not (g$valid-bound-ids?$7709$c1uhW
                                            (cons
                                              g$x$10102$c1uhW
                                              g$x*$10101$c1uhW)))
                                   (g$invalid-fmls-error$7947$c1uhW
                                     g$stx$10095$c1uhW
                                     g$fmls$10094$c1uhW)
                                   (void))))
                              g$ls/false$10100$c1uhW)
                            ((case-lambda
                               ((g$t$10103$c1uhW)
                                ((case-lambda
                                   ((g$ls/false$10104$c1uhW)
                                    (if g$ls/false$10104$c1uhW
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8094$c1uhW
                                             '#f
                                             '"invalid syntax"
                                             g$stx$10095$c1uhW)))
                                        g$ls/false$10104$c1uhW)
                                      (g$syntax-violation$8094$c1uhW
                                        '#f
                                        '"invalid syntax"
                                        g$t$10103$c1uhW))))
                                 (g$syntax-dispatch$7982$c1uhW
                                   g$t$10103$c1uhW
                                   '_))))
                             g$t$10099$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$10099$c1uhW
                         '#(each+ any () any)))))
                   g$t$10096$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$10096$c1uhW 'each-any))))
         g$fmls$10094$c1uhW))))
   (g$chi-lambda-clause$8003$c1uhW
     g$chi-lambda-clause$11506$c1uhW
     (case-lambda
       ((g$stx$10105$c1uhW
          g$fmls$10106$c1uhW
          g$body*$10107$c1uhW
          g$r$10108$c1uhW
          g$mr$10109$c1uhW)
        ((case-lambda
           ((g$t$10110$c1uhW)
            ((case-lambda
               ((g$ls/false$10111$c1uhW)
                (if g$ls/false$10111$c1uhW
                  (apply
                    (case-lambda
                      ((g$x*$10112$c1uhW)
                       (begin
                         (g$verify-formals$8002$c1uhW
                           g$fmls$10106$c1uhW
                           g$stx$10105$c1uhW)
                         ((case-lambda
                            ((g$lex*$10113$c1uhW g$lab*$10114$c1uhW)
                             (values
                               g$lex*$10113$c1uhW
                               (g$chi-internal$8011$c1uhW
                                 (g$add-subst$7694$c1uhW
                                   (g$make-full-rib$7672$c1uhW
                                     g$x*$10112$c1uhW
                                     g$lab*$10114$c1uhW)
                                   g$body*$10107$c1uhW)
                                 (g$add-lexicals$7930$c1uhW
                                   g$lab*$10114$c1uhW
                                   g$lex*$10113$c1uhW
                                   g$r$10108$c1uhW)
                                 g$mr$10109$c1uhW))))
                          (g$map$5063$c1uhW
                            g$gen-lexical$7643$c1uhW
                            g$x*$10112$c1uhW)
                          (g$map$5063$c1uhW
                            g$gen-label$7645$c1uhW
                            g$x*$10112$c1uhW)))))
                    g$ls/false$10111$c1uhW)
                  ((case-lambda
                     ((g$t$10115$c1uhW)
                      ((case-lambda
                         ((g$ls/false$10116$c1uhW)
                          (if g$ls/false$10116$c1uhW
                            (apply
                              (case-lambda
                                ((g$x*$10117$c1uhW g$x$10118$c1uhW)
                                 (begin
                                   (g$verify-formals$8002$c1uhW
                                     g$fmls$10106$c1uhW
                                     g$stx$10105$c1uhW)
                                   ((case-lambda
                                      ((g$lex*$10119$c1uhW
                                         g$lab*$10120$c1uhW
                                         g$lex$10121$c1uhW
                                         g$lab$10122$c1uhW)
                                       (values
                                         (append
                                           g$lex*$10119$c1uhW
                                           g$lex$10121$c1uhW)
                                         (g$chi-internal$8011$c1uhW
                                           (g$add-subst$7694$c1uhW
                                             (g$make-full-rib$7672$c1uhW
                                               (cons
                                                 g$x$10118$c1uhW
                                                 g$x*$10117$c1uhW)
                                               (cons
                                                 g$lab$10122$c1uhW
                                                 g$lab*$10120$c1uhW))
                                             g$body*$10107$c1uhW)
                                           (g$add-lexicals$7930$c1uhW
                                             (cons
                                               g$lab$10122$c1uhW
                                               g$lab*$10120$c1uhW)
                                             (cons
                                               g$lex$10121$c1uhW
                                               g$lex*$10119$c1uhW)
                                             g$r$10108$c1uhW)
                                           g$mr$10109$c1uhW))))
                                    (g$map$5063$c1uhW
                                      g$gen-lexical$7643$c1uhW
                                      g$x*$10117$c1uhW)
                                    (g$map$5063$c1uhW
                                      g$gen-label$7645$c1uhW
                                      g$x*$10117$c1uhW)
                                    (g$gen-lexical$7643$c1uhW g$x$10118$c1uhW)
                                    (g$gen-label$7645$c1uhW g$x$10118$c1uhW)))))
                              g$ls/false$10116$c1uhW)
                            ((case-lambda
                               ((g$t$10123$c1uhW)
                                ((case-lambda
                                   ((g$ls/false$10124$c1uhW)
                                    (if g$ls/false$10124$c1uhW
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8094$c1uhW
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$10106$c1uhW)))
                                        g$ls/false$10124$c1uhW)
                                      (g$syntax-violation$8094$c1uhW
                                        '#f
                                        '"invalid syntax"
                                        g$t$10123$c1uhW))))
                                 (g$syntax-dispatch$7982$c1uhW
                                   g$t$10123$c1uhW
                                   '_))))
                             g$t$10115$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$10115$c1uhW
                         '#(each+ any () any)))))
                   g$t$10110$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$10110$c1uhW 'each-any))))
         g$fmls$10106$c1uhW))))
   (g$chi-lambda-clause*$8004$c1uhW
     g$chi-lambda-clause*$11507$c1uhW
     (case-lambda
       ((g$stx$10125$c1uhW
          g$fmls*$10126$c1uhW
          g$body**$10127$c1uhW
          g$r$10128$c1uhW
          g$mr$10129$c1uhW)
        (if (null? g$fmls*$10126$c1uhW)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$8003$c1uhW
                 g$stx$10125$c1uhW
                 (car g$fmls*$10126$c1uhW)
                 (car g$body**$10127$c1uhW)
                 g$r$10128$c1uhW
                 g$mr$10129$c1uhW)))
            (case-lambda
              ((g$a$10132$c1uhW g$b$10133$c1uhW)
               ((case-lambda
                  ((g$b$10134$c1uhW g$a$10135$c1uhW)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$8004$c1uhW
                          g$stx$10125$c1uhW
                          (cdr g$fmls*$10126$c1uhW)
                          (cdr g$body**$10127$c1uhW)
                          g$r$10128$c1uhW
                          g$mr$10129$c1uhW)))
                     (case-lambda
                       ((g$a*$10138$c1uhW g$b*$10139$c1uhW)
                        ((case-lambda
                           ((g$b*$10140$c1uhW g$a*$10141$c1uhW)
                            (values
                              (cons g$a$10135$c1uhW g$a*$10141$c1uhW)
                              (cons g$b$10134$c1uhW g$b*$10140$c1uhW))))
                         g$b*$10139$c1uhW
                         g$a*$10138$c1uhW))))))
                g$b$10133$c1uhW
                g$a$10132$c1uhW))))))))
   (g$chi-defun$8005$c1uhW
     g$chi-defun$11508$c1uhW
     (case-lambda
       ((g$x$10142$c1uhW g$r$10143$c1uhW g$mr$10144$c1uhW)
        ((case-lambda
           ((g$fmls$10145$c1uhW g$body*$10146$c1uhW)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$8003$c1uhW
                   g$fmls$10145$c1uhW
                   g$fmls$10145$c1uhW
                   g$body*$10146$c1uhW
                   g$r$10143$c1uhW
                   g$mr$10144$c1uhW)))
              (case-lambda
                ((g$fmls$10149$c1uhW g$body$10150$c1uhW)
                 ((case-lambda
                    ((g$body$10151$c1uhW g$fmls$10152$c1uhW)
                     (g$build-lambda$7630$c1uhW
                       '#f
                       g$fmls$10152$c1uhW
                       g$body$10151$c1uhW)))
                  g$body$10150$c1uhW
                  g$fmls$10149$c1uhW))))))
         (car g$x$10142$c1uhW)
         (cdr g$x$10142$c1uhW)))))
   (g$chi-rhs$8006$c1uhW
     g$chi-rhs$11509$c1uhW
     (case-lambda
       ((g$rhs$10153$c1uhW g$r$10154$c1uhW g$mr$10155$c1uhW)
        ((case-lambda
           ((g$t$10156$c1uhW)
            (if (g$memv$5056$c1uhW g$t$10156$c1uhW '(defun))
              (g$chi-defun$8005$c1uhW
                (cdr g$rhs$10153$c1uhW)
                g$r$10154$c1uhW
                g$mr$10155$c1uhW)
              (if (g$memv$5056$c1uhW g$t$10156$c1uhW '(expr))
                ((case-lambda
                   ((g$expr$10157$c1uhW)
                    (g$chi-expr$8000$c1uhW
                      g$expr$10157$c1uhW
                      g$r$10154$c1uhW
                      g$mr$10155$c1uhW)))
                 (cdr g$rhs$10153$c1uhW))
                (if (g$memv$5056$c1uhW g$t$10156$c1uhW '(top-expr))
                  ((case-lambda
                     ((g$expr$10158$c1uhW)
                      (g$build-sequence$7633$c1uhW
                        '#f
                        (list
                          (g$chi-expr$8000$c1uhW
                            g$expr$10158$c1uhW
                            g$r$10154$c1uhW
                            g$mr$10155$c1uhW)
                          (g$build-void$7634$c1uhW)))))
                   (cdr g$rhs$10153$c1uhW))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$10153$c1uhW))))))
         (car g$rhs$10153$c1uhW)))))
   (g$expand-interaction-rhs*/init*$8007$c1uhW
     g$expand-interaction-rhs*/init*$11510$c1uhW
     (case-lambda
       ((g$lhs*$10159$c1uhW
          g$rhs*$10160$c1uhW
          g$init*$10161$c1uhW
          g$r$10162$c1uhW
          g$mr$10163$c1uhW)
        ((letrec ((g$f$10164$c1uhW
                    (case-lambda
                      ((g$lhs*$10165$c1uhW g$rhs*$10166$c1uhW)
                       (if (null? g$lhs*$10165$c1uhW)
                         (g$map$5063$c1uhW
                           (case-lambda
                             ((g$x$10167$c1uhW)
                              (g$chi-expr$8000$c1uhW
                                g$x$10167$c1uhW
                                g$r$10162$c1uhW
                                g$mr$10163$c1uhW)))
                           g$init*$10161$c1uhW)
                         ((case-lambda
                            ((g$lhs$10168$c1uhW g$rhs$10169$c1uhW)
                             ((case-lambda
                                ((g$t$10170$c1uhW)
                                 (if (g$memv$5056$c1uhW
                                       g$t$10170$c1uhW
                                       '(defun))
                                   ((case-lambda
                                      ((g$rhs$10171$c1uhW)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$10168$c1uhW
                                           g$rhs$10171$c1uhW)
                                         (g$f$10164$c1uhW
                                           (cdr g$lhs*$10165$c1uhW)
                                           (cdr g$rhs*$10166$c1uhW)))))
                                    (g$chi-defun$8005$c1uhW
                                      (cdr g$rhs$10169$c1uhW)
                                      g$r$10162$c1uhW
                                      g$mr$10163$c1uhW))
                                   (if (g$memv$5056$c1uhW
                                         g$t$10170$c1uhW
                                         '(expr))
                                     ((case-lambda
                                        ((g$rhs$10172$c1uhW)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$10168$c1uhW
                                             g$rhs$10172$c1uhW)
                                           (g$f$10164$c1uhW
                                             (cdr g$lhs*$10165$c1uhW)
                                             (cdr g$rhs*$10166$c1uhW)))))
                                      (g$chi-expr$8000$c1uhW
                                        (cdr g$rhs$10169$c1uhW)
                                        g$r$10162$c1uhW
                                        g$mr$10163$c1uhW))
                                     (if (g$memv$5056$c1uhW
                                           g$t$10170$c1uhW
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$10173$c1uhW)
                                           (cons
                                             g$e$10173$c1uhW
                                             (g$f$10164$c1uhW
                                               (cdr g$lhs*$10165$c1uhW)
                                               (cdr g$rhs*$10166$c1uhW)))))
                                        (g$chi-expr$8000$c1uhW
                                          (cdr g$rhs$10169$c1uhW)
                                          g$r$10162$c1uhW
                                          g$mr$10163$c1uhW))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$10169$c1uhW))))))
                              (car g$rhs$10169$c1uhW))))
                          (car g$lhs*$10165$c1uhW)
                          (car g$rhs*$10166$c1uhW)))))))
           g$f$10164$c1uhW)
         g$lhs*$10159$c1uhW
         g$rhs*$10160$c1uhW))))
   (g$chi-rhs*$8008$c1uhW
     g$chi-rhs*$11511$c1uhW
     (case-lambda
       ((g$rhs*$10174$c1uhW g$r$10175$c1uhW g$mr$10176$c1uhW)
        ((letrec ((g$f$10177$c1uhW
                    (case-lambda
                      ((g$ls$10178$c1uhW)
                       (if (null? g$ls$10178$c1uhW)
                         '()
                         ((case-lambda
                            ((g$a$10179$c1uhW)
                             (cons
                               g$a$10179$c1uhW
                               (g$f$10177$c1uhW (cdr g$ls$10178$c1uhW)))))
                          (g$chi-rhs$8006$c1uhW
                            (car g$ls$10178$c1uhW)
                            g$r$10175$c1uhW
                            g$mr$10176$c1uhW)))))))
           g$f$10177$c1uhW)
         g$rhs*$10174$c1uhW))))
   (g$find-bound=?$8009$c1uhW
     g$find-bound=?$11512$c1uhW
     (case-lambda
       ((g$x$10180$c1uhW g$lhs*$10181$c1uhW g$rhs*$10182$c1uhW)
        (if (null? g$lhs*$10181$c1uhW)
          '#f
          (if (g$bound-id=?$7707$c1uhW g$x$10180$c1uhW (car g$lhs*$10181$c1uhW))
            (car g$rhs*$10182$c1uhW)
            (g$find-bound=?$8009$c1uhW
              g$x$10180$c1uhW
              (cdr g$lhs*$10181$c1uhW)
              (cdr g$rhs*$10182$c1uhW)))))))
   (g$find-dups$8010$c1uhW
     g$find-dups$11513$c1uhW
     (case-lambda
       ((g$ls$10183$c1uhW)
        ((letrec ((g$f$10184$c1uhW
                    (case-lambda
                      ((g$ls$10185$c1uhW g$dups$10186$c1uhW)
                       (if (null? g$ls$10185$c1uhW)
                         g$dups$10186$c1uhW
                         ((case-lambda
                            ((g$t$10187$c1uhW)
                             (if g$t$10187$c1uhW
                               ((case-lambda
                                  ((g$x$10188$c1uhW)
                                   (g$f$10184$c1uhW
                                     (cdr g$ls$10185$c1uhW)
                                     (cons
                                       (list
                                         (car g$ls$10185$c1uhW)
                                         g$x$10188$c1uhW)
                                       g$dups$10186$c1uhW))))
                                g$t$10187$c1uhW)
                               (g$f$10184$c1uhW
                                 (cdr g$ls$10185$c1uhW)
                                 g$dups$10186$c1uhW))))
                          (g$find-bound=?$8009$c1uhW
                            (car g$ls$10185$c1uhW)
                            (cdr g$ls$10185$c1uhW)
                            (cdr g$ls$10185$c1uhW))))))))
           g$f$10184$c1uhW)
         g$ls$10183$c1uhW
         '()))))
   (g$chi-internal$8011$c1uhW
     g$chi-internal$11514$c1uhW
     (case-lambda
       ((g$e*$10189$c1uhW g$r$10190$c1uhW g$mr$10191$c1uhW)
        ((case-lambda
           ((g$rib$10192$c1uhW)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$8026$c1uhW
                   (g$map$5063$c1uhW
                     (case-lambda
                       ((g$x$10201$c1uhW)
                        (g$add-subst$7694$c1uhW
                          g$rib$10192$c1uhW
                          g$x$10201$c1uhW)))
                     (g$syntax->list$7703$c1uhW g$e*$10189$c1uhW))
                   g$r$10190$c1uhW
                   g$mr$10191$c1uhW
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$10192$c1uhW
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$10202$c1uhW
                   g$r$10203$c1uhW
                   g$mr$10204$c1uhW
                   g$lex*$10205$c1uhW
                   g$rhs*$10206$c1uhW
                   g$mod**$10207$c1uhW
                   g$kwd*$10208$c1uhW
                   g$_exp*$10209$c1uhW)
                 ((case-lambda
                    ((g$_exp*$10210$c1uhW
                       g$kwd*$10211$c1uhW
                       g$mod**$10212$c1uhW
                       g$rhs*$10213$c1uhW
                       g$lex*$10214$c1uhW
                       g$mr$10215$c1uhW
                       g$r$10216$c1uhW
                       g$e*$10217$c1uhW)
                     (begin
                       (if (null? g$e*$10217$c1uhW)
                         (g$syntax-violation$8094$c1uhW
                           '#f
                           '"no expression in body"
                           g$e*$10217$c1uhW)
                         (void))
                       ((case-lambda
                          ((g$init*$10218$c1uhW)
                           ((case-lambda
                              ((g$rhs*$10219$c1uhW)
                               (g$build-letrec*$7636$c1uhW
                                 '#f
                                 (reverse g$lex*$10214$c1uhW)
                                 (reverse g$rhs*$10219$c1uhW)
                                 (g$build-sequence$7633$c1uhW
                                   '#f
                                   g$init*$10218$c1uhW))))
                            (g$chi-rhs*$8008$c1uhW
                              g$rhs*$10213$c1uhW
                              g$r$10216$c1uhW
                              g$mr$10215$c1uhW))))
                        (g$chi-expr*$7998$c1uhW
                          (append
                            (apply append (reverse g$mod**$10212$c1uhW))
                            g$e*$10217$c1uhW)
                          g$r$10216$c1uhW
                          g$mr$10215$c1uhW)))))
                  g$_exp*$10209$c1uhW
                  g$kwd*$10208$c1uhW
                  g$mod**$10207$c1uhW
                  g$rhs*$10206$c1uhW
                  g$lex*$10205$c1uhW
                  g$mr$10204$c1uhW
                  g$r$10203$c1uhW
                  g$e*$10202$c1uhW))))))
         (g$make-empty-rib$7664$c1uhW)))))
   (g$parse-module$8012$c1uhW
     g$parse-module$11515$c1uhW
     (case-lambda
       ((g$e$10220$c1uhW)
        ((case-lambda
           ((g$t$10221$c1uhW)
            ((case-lambda
               ((g$ls/false$10222$c1uhW)
                (if g$ls/false$10222$c1uhW
                  (apply
                    (case-lambda
                      ((g$export*$10223$c1uhW g$b*$10224$c1uhW)
                       (begin
                         (if (not (g$for-all$5061$c1uhW
                                    g$id?$7704$c1uhW
                                    g$export*$10223$c1uhW))
                           (g$syntax-violation$8094$c1uhW
                             '#f
                             '"module exports must be identifiers"
                             g$e$10220$c1uhW)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$10223$c1uhW)
                           g$b*$10224$c1uhW))))
                    g$ls/false$10222$c1uhW)
                  ((case-lambda
                     ((g$t$10225$c1uhW)
                      ((case-lambda
                         ((g$ls/false$10226$c1uhW)
                          (if g$ls/false$10226$c1uhW
                            (apply
                              (case-lambda
                                ((g$name$10227$c1uhW
                                   g$export*$10228$c1uhW
                                   g$b*$10229$c1uhW)
                                 (begin
                                   (if (not (g$id?$7704$c1uhW
                                              g$name$10227$c1uhW))
                                     (g$syntax-violation$8094$c1uhW
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$10220$c1uhW)
                                     (void))
                                   (if (not (g$for-all$5061$c1uhW
                                              g$id?$7704$c1uhW
                                              g$export*$10228$c1uhW))
                                     (g$syntax-violation$8094$c1uhW
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$10220$c1uhW)
                                     (void))
                                   (values
                                     g$name$10227$c1uhW
                                     (list->vector g$export*$10228$c1uhW)
                                     g$b*$10229$c1uhW))))
                              g$ls/false$10226$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"invalid syntax"
                              g$t$10225$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$10225$c1uhW
                         '(_ any each-any . each-any)))))
                   g$t$10221$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$10221$c1uhW
               '(_ each-any . each-any)))))
         g$e$10220$c1uhW))))
   (g$9059$8013$c1uhW
     g$9059$11516$c1uhW
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$9062$c1uhW
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$9061$8014$c1uhW g$9061$11517$c1uhW '#f)
   (g$9060$8015$c1uhW
     g$9060$11518$c1uhW
     (make-record-constructor-descriptor
       g$9059$8013$c1uhW
       '#f
       g$9061$8014$c1uhW))
   (g$module-interface?$8016$c1uhW
     g$module-interface?$11519$c1uhW
     (record-predicate g$9059$8013$c1uhW))
   (g$make-module-interface$8017$c1uhW
     g$make-module-interface$11520$c1uhW
     (record-constructor g$9060$8015$c1uhW))
   (g$module-interface-first-mark$8018$c1uhW
     g$module-interface-first-mark$11521$c1uhW
     (record-accessor g$9059$8013$c1uhW '0))
   (g$module-interface-exp-id-vec$8019$c1uhW
     g$module-interface-exp-id-vec$11522$c1uhW
     (record-accessor g$9059$8013$c1uhW '1))
   (g$module-interface-exp-lab-vec$8020$c1uhW
     g$module-interface-exp-lab-vec$11523$c1uhW
     (record-accessor g$9059$8013$c1uhW '2))
   (g$set-module-interface-first-mark!$8021$c1uhW
     g$set-module-interface-first-mark!$11524$c1uhW
     (record-mutator g$9059$8013$c1uhW '0))
   (g$set-module-interface-exp-id-vec!$8022$c1uhW
     g$set-module-interface-exp-id-vec!$11525$c1uhW
     (record-mutator g$9059$8013$c1uhW '1))
   (g$set-module-interface-exp-lab-vec!$8023$c1uhW
     g$set-module-interface-exp-lab-vec!$11526$c1uhW
     (record-mutator g$9059$8013$c1uhW '2))
   (g$module-interface-exp-id*$8024$c1uhW
     g$module-interface-exp-id*$11527$c1uhW
     (case-lambda
       ((g$iface$10230$c1uhW g$id$10231$c1uhW)
        (letrec* ((g$diff-marks$10232$c1uhW
                    (case-lambda
                      ((g$ls$10236$c1uhW g$x$10237$c1uhW)
                       (begin
                         (if (null? g$ls$10236$c1uhW)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$10238$c1uhW)
                             (if (eq? g$a$10238$c1uhW g$x$10237$c1uhW)
                               '()
                               (cons
                                 g$a$10238$c1uhW
                                 (g$diff-marks$10232$c1uhW
                                   (cdr g$ls$10236$c1uhW)
                                   g$x$10237$c1uhW)))))
                          (car g$ls$10236$c1uhW)))))))
          ((case-lambda
             ((g$diff$10233$c1uhW g$id-vec$10234$c1uhW)
              (if (null? g$diff$10233$c1uhW)
                g$id-vec$10234$c1uhW
                (vector-map
                  (case-lambda
                    ((g$x$10235$c1uhW)
                     (g$make-stx$7677$c1uhW
                       (g$stx-expr$7678$c1uhW g$x$10235$c1uhW)
                       (append
                         g$diff$10233$c1uhW
                         (g$stx-mark*$7679$c1uhW g$x$10235$c1uhW))
                       '()
                       '())))
                  g$id-vec$10234$c1uhW))))
           (g$diff-marks$10232$c1uhW
             (g$stx-mark*$7679$c1uhW g$id$10231$c1uhW)
             (g$module-interface-first-mark$8018$c1uhW g$iface$10230$c1uhW))
           (g$module-interface-exp-id-vec$8019$c1uhW g$iface$10230$c1uhW))))))
   (g$chi-internal-module$8025$c1uhW
     g$chi-internal-module$11528$c1uhW
     (case-lambda
       ((g$e$10239$c1uhW
          g$r$10240$c1uhW
          g$mr$10241$c1uhW
          g$lex*$10242$c1uhW
          g$rhs*$10243$c1uhW
          g$mod**$10244$c1uhW
          g$kwd*$10245$c1uhW)
        (call-with-values
          (case-lambda (() (g$parse-module$8012$c1uhW g$e$10239$c1uhW)))
          (case-lambda
            ((g$name$10249$c1uhW g$exp-id*$10250$c1uhW g$e*$10251$c1uhW)
             ((case-lambda
                ((g$e*$10252$c1uhW g$exp-id*$10253$c1uhW g$name$10254$c1uhW)
                 ((case-lambda
                    ((g$rib$10255$c1uhW)
                     ((case-lambda
                        ((g$e*$10256$c1uhW)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$8026$c1uhW
                                g$e*$10256$c1uhW
                                g$r$10240$c1uhW
                                g$mr$10241$c1uhW
                                g$lex*$10242$c1uhW
                                g$rhs*$10243$c1uhW
                                g$mod**$10244$c1uhW
                                g$kwd*$10245$c1uhW
                                '()
                                g$rib$10255$c1uhW
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$10265$c1uhW
                                g$r$10266$c1uhW
                                g$mr$10267$c1uhW
                                g$lex*$10268$c1uhW
                                g$rhs*$10269$c1uhW
                                g$mod**$10270$c1uhW
                                g$kwd*$10271$c1uhW
                                g$_exp*$10272$c1uhW)
                              ((case-lambda
                                 ((g$_exp*$10273$c1uhW
                                    g$kwd*$10274$c1uhW
                                    g$mod**$10275$c1uhW
                                    g$rhs*$10276$c1uhW
                                    g$lex*$10277$c1uhW
                                    g$mr$10278$c1uhW
                                    g$r$10279$c1uhW
                                    g$e*$10280$c1uhW)
                                  ((case-lambda
                                     ((g$exp-lab*$10281$c1uhW
                                        g$mod**$10282$c1uhW)
                                      (if (not g$name$10254$c1uhW)
                                        (values
                                          g$lex*$10277$c1uhW
                                          g$rhs*$10276$c1uhW
                                          g$exp-id*$10253$c1uhW
                                          g$exp-lab*$10281$c1uhW
                                          g$r$10279$c1uhW
                                          g$mr$10278$c1uhW
                                          g$mod**$10282$c1uhW
                                          g$kwd*$10274$c1uhW)
                                        ((case-lambda
                                           ((g$lab$10283$c1uhW
                                              g$iface$10284$c1uhW)
                                            (values
                                              g$lex*$10277$c1uhW
                                              g$rhs*$10276$c1uhW
                                              (vector g$name$10254$c1uhW)
                                              (vector g$lab$10283$c1uhW)
                                              (cons
                                                (cons
                                                  g$lab$10283$c1uhW
                                                  (cons
                                                    '$module
                                                    g$iface$10284$c1uhW))
                                                g$r$10279$c1uhW)
                                              (cons
                                                (cons
                                                  g$lab$10283$c1uhW
                                                  (cons
                                                    '$module
                                                    g$iface$10284$c1uhW))
                                                g$mr$10278$c1uhW)
                                              g$mod**$10282$c1uhW
                                              g$kwd*$10274$c1uhW)))
                                         (g$gen-label$7645$c1uhW 'module)
                                         (g$make-module-interface$8017$c1uhW
                                           (car (g$stx-mark*$7679$c1uhW
                                                  g$name$10254$c1uhW))
                                           (vector-map
                                             (case-lambda
                                               ((g$x$10285$c1uhW)
                                                (g$make-stx$7677$c1uhW
                                                  (g$stx-expr$7678$c1uhW
                                                    g$x$10285$c1uhW)
                                                  (g$stx-mark*$7679$c1uhW
                                                    g$x$10285$c1uhW)
                                                  '()
                                                  '())))
                                             g$exp-id*$10253$c1uhW)
                                           g$exp-lab*$10281$c1uhW)))))
                                   (vector-map
                                     (case-lambda
                                       ((g$x$10286$c1uhW)
                                        ((case-lambda
                                           ((g$t$10287$c1uhW)
                                            (if g$t$10287$c1uhW
                                              g$t$10287$c1uhW
                                              (begin
                                                '#f
                                                (g$syntax-violation$8094$c1uhW
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$10286$c1uhW)))))
                                         (g$id->label$7717$c1uhW
                                           (g$make-stx$7677$c1uhW
                                             (g$id->sym$7705$c1uhW
                                               g$x$10286$c1uhW)
                                             (g$stx-mark*$7679$c1uhW
                                               g$x$10286$c1uhW)
                                             (list g$rib$10255$c1uhW)
                                             '())))))
                                     g$exp-id*$10253$c1uhW)
                                   (cons
                                     g$e*$10280$c1uhW
                                     g$mod**$10275$c1uhW))))
                               g$_exp*$10272$c1uhW
                               g$kwd*$10271$c1uhW
                               g$mod**$10270$c1uhW
                               g$rhs*$10269$c1uhW
                               g$lex*$10268$c1uhW
                               g$mr$10267$c1uhW
                               g$r$10266$c1uhW
                               g$e*$10265$c1uhW))))))
                      (g$map$5063$c1uhW
                        (case-lambda
                          ((g$x$10288$c1uhW)
                           (g$add-subst$7694$c1uhW
                             g$rib$10255$c1uhW
                             g$x$10288$c1uhW)))
                        (g$syntax->list$7703$c1uhW g$e*$10252$c1uhW)))))
                  (g$make-empty-rib$7664$c1uhW))))
              g$e*$10251$c1uhW
              g$exp-id*$10250$c1uhW
              g$name$10249$c1uhW)))))))
   (g$chi-body*$8026$c1uhW
     g$chi-body*$11529$c1uhW
     (case-lambda
       ((g$e*$10289$c1uhW
          g$r$10290$c1uhW
          g$mr$10291$c1uhW
          g$lex*$10292$c1uhW
          g$rhs*$10293$c1uhW
          g$mod**$10294$c1uhW
          g$kwd*$10295$c1uhW
          g$exp*$10296$c1uhW
          g$rib$10297$c1uhW
          g$mix?$10298$c1uhW
          g$sd?$10299$c1uhW)
        (if (null? g$e*$10289$c1uhW)
          (values
            g$e*$10289$c1uhW
            g$r$10290$c1uhW
            g$mr$10291$c1uhW
            g$lex*$10292$c1uhW
            g$rhs*$10293$c1uhW
            g$mod**$10294$c1uhW
            g$kwd*$10295$c1uhW
            g$exp*$10296$c1uhW)
          ((case-lambda
             ((g$e$10300$c1uhW)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$7724$c1uhW g$e$10300$c1uhW g$r$10290$c1uhW)))
                (case-lambda
                  ((g$type$10304$c1uhW g$value$10305$c1uhW g$kwd$10306$c1uhW)
                   ((case-lambda
                      ((g$kwd$10307$c1uhW
                         g$value$10308$c1uhW
                         g$type$10309$c1uhW)
                       ((case-lambda
                          ((g$kwd*$10310$c1uhW)
                           ((case-lambda
                              ((g$t$10311$c1uhW)
                               (if (g$memv$5056$c1uhW g$t$10311$c1uhW '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7922$c1uhW
                                        g$e$10300$c1uhW)))
                                   (case-lambda
                                     ((g$id$10314$c1uhW g$rhs$10315$c1uhW)
                                      ((case-lambda
                                         ((g$rhs$10316$c1uhW g$id$10317$c1uhW)
                                          (begin
                                            (if (g$bound-id-member?$7711$c1uhW
                                                  g$id$10317$c1uhW
                                                  g$kwd*$10310$c1uhW)
                                              (g$syntax-violation$8094$c1uhW
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$10300$c1uhW)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7647$c1uhW
                                                   g$id$10317$c1uhW
                                                   g$rib$10297$c1uhW
                                                   g$sd?$10299$c1uhW)))
                                              (case-lambda
                                                ((g$lab$10320$c1uhW
                                                   g$lex$10321$c1uhW)
                                                 ((case-lambda
                                                    ((g$lex$10322$c1uhW
                                                       g$lab$10323$c1uhW)
                                                     (begin
                                                       (g$extend-rib!$7667$c1uhW
                                                         g$rib$10297$c1uhW
                                                         g$id$10317$c1uhW
                                                         g$lab$10323$c1uhW
                                                         g$sd?$10299$c1uhW)
                                                       (g$chi-body*$8026$c1uhW
                                                         (cdr g$e*$10289$c1uhW)
                                                         (g$add-lexical$7929$c1uhW
                                                           g$lab$10323$c1uhW
                                                           g$lex$10322$c1uhW
                                                           g$r$10290$c1uhW)
                                                         g$mr$10291$c1uhW
                                                         (cons
                                                           g$lex$10322$c1uhW
                                                           g$lex*$10292$c1uhW)
                                                         (cons
                                                           g$rhs$10316$c1uhW
                                                           g$rhs*$10293$c1uhW)
                                                         g$mod**$10294$c1uhW
                                                         g$kwd*$10310$c1uhW
                                                         g$exp*$10296$c1uhW
                                                         g$rib$10297$c1uhW
                                                         g$mix?$10298$c1uhW
                                                         g$sd?$10299$c1uhW))))
                                                  g$lex$10321$c1uhW
                                                  g$lab$10320$c1uhW)))))))
                                       g$rhs$10315$c1uhW
                                       g$id$10314$c1uhW))))
                                 (if (g$memv$5056$c1uhW
                                       g$t$10311$c1uhW
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7923$c1uhW
                                          g$e$10300$c1uhW)))
                                     (case-lambda
                                       ((g$id$10326$c1uhW g$rhs$10327$c1uhW)
                                        ((case-lambda
                                           ((g$rhs$10328$c1uhW g$id$10329$c1uhW)
                                            (begin
                                              (if (g$bound-id-member?$7711$c1uhW
                                                    g$id$10329$c1uhW
                                                    g$kwd*$10310$c1uhW)
                                                (g$syntax-violation$8094$c1uhW
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$10300$c1uhW)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$10330$c1uhW)
                                                  ((case-lambda
                                                     ((g$expanded-rhs$10331$c1uhW)
                                                      (begin
                                                        (g$extend-rib!$7667$c1uhW
                                                          g$rib$10297$c1uhW
                                                          g$id$10329$c1uhW
                                                          g$lab$10330$c1uhW
                                                          g$sd?$10299$c1uhW)
                                                        ((case-lambda
                                                           ((g$b$10332$c1uhW)
                                                            (g$chi-body*$8026$c1uhW
                                                              (cdr g$e*$10289$c1uhW)
                                                              (cons
                                                                (cons
                                                                  g$lab$10330$c1uhW
                                                                  g$b$10332$c1uhW)
                                                                g$r$10290$c1uhW)
                                                              (cons
                                                                (cons
                                                                  g$lab$10330$c1uhW
                                                                  g$b$10332$c1uhW)
                                                                g$mr$10291$c1uhW)
                                                              g$lex*$10292$c1uhW
                                                              g$rhs*$10293$c1uhW
                                                              g$mod**$10294$c1uhW
                                                              g$kwd*$10310$c1uhW
                                                              g$exp*$10296$c1uhW
                                                              g$rib$10297$c1uhW
                                                              g$mix?$10298$c1uhW
                                                              g$sd?$10299$c1uhW)))
                                                         (g$make-eval-transformer$7736$c1uhW
                                                           g$expanded-rhs$10331$c1uhW)))))
                                                   (g$expand-transformer$8027$c1uhW
                                                     g$rhs$10328$c1uhW
                                                     g$mr$10291$c1uhW))))
                                               (g$gen-define-label$7648$c1uhW
                                                 g$id$10329$c1uhW
                                                 g$rib$10297$c1uhW
                                                 g$sd?$10299$c1uhW)))))
                                         g$rhs$10327$c1uhW
                                         g$id$10326$c1uhW))))
                                   (if (g$memv$5056$c1uhW
                                         g$t$10311$c1uhW
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$10333$c1uhW)
                                         ((case-lambda
                                            ((g$ls/false$10334$c1uhW)
                                             (if (if g$ls/false$10334$c1uhW
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$10335$c1uhW
                                                            g$xrhs*$10336$c1uhW
                                                            g$xbody*$10337$c1uhW)
                                                          (if (not (g$valid-bound-ids?$7709$c1uhW
                                                                     g$xlhs*$10335$c1uhW))
                                                            (g$syntax-violation$8094$c1uhW
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$10300$c1uhW)
                                                            (void))))
                                                       g$ls/false$10334$c1uhW))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$10338$c1uhW
                                                      g$xrhs*$10339$c1uhW
                                                      g$xbody*$10340$c1uhW)
                                                    ((case-lambda
                                                       ((g$xlab*$10341$c1uhW)
                                                        ((case-lambda
                                                           ((g$xrib$10342$c1uhW)
                                                            ((case-lambda
                                                               ((g$xb*$10343$c1uhW)
                                                                (g$chi-body*$8026$c1uhW
                                                                  (append
                                                                    (g$map$5063$c1uhW
                                                                      (case-lambda
                                                                        ((g$x$10344$c1uhW)
                                                                         (g$add-subst$7694$c1uhW
                                                                           g$xrib$10342$c1uhW
                                                                           g$x$10344$c1uhW)))
                                                                      g$xbody*$10340$c1uhW)
                                                                    (cdr g$e*$10289$c1uhW))
                                                                  (append
                                                                    (g$map$5063$c1uhW
                                                                      cons
                                                                      g$xlab*$10341$c1uhW
                                                                      g$xb*$10343$c1uhW)
                                                                    g$r$10290$c1uhW)
                                                                  (append
                                                                    (g$map$5063$c1uhW
                                                                      cons
                                                                      g$xlab*$10341$c1uhW
                                                                      g$xb*$10343$c1uhW)
                                                                    g$mr$10291$c1uhW)
                                                                  g$lex*$10292$c1uhW
                                                                  g$rhs*$10293$c1uhW
                                                                  g$mod**$10294$c1uhW
                                                                  g$kwd*$10310$c1uhW
                                                                  g$exp*$10296$c1uhW
                                                                  g$rib$10297$c1uhW
                                                                  g$mix?$10298$c1uhW
                                                                  g$sd?$10299$c1uhW)))
                                                             (g$map$5063$c1uhW
                                                               (case-lambda
                                                                 ((g$x$10345$c1uhW)
                                                                  (g$make-eval-transformer$7736$c1uhW
                                                                    (g$expand-transformer$8027$c1uhW
                                                                      (if (eq? g$type$10309$c1uhW
                                                                               'let-syntax)
                                                                        g$x$10345$c1uhW
                                                                        (g$add-subst$7694$c1uhW
                                                                          g$xrib$10342$c1uhW
                                                                          g$x$10345$c1uhW))
                                                                      g$mr$10291$c1uhW))))
                                                               g$xrhs*$10339$c1uhW))))
                                                         (g$make-full-rib$7672$c1uhW
                                                           g$xlhs*$10338$c1uhW
                                                           g$xlab*$10341$c1uhW))))
                                                     (g$map$5063$c1uhW
                                                       g$gen-label$7645$c1uhW
                                                       g$xlhs*$10338$c1uhW))))
                                                 g$ls/false$10334$c1uhW)
                                               (g$syntax-violation$8094$c1uhW
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$10333$c1uhW))))
                                          (g$syntax-dispatch$7982$c1uhW
                                            g$t$10333$c1uhW
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$10300$c1uhW)
                                     (if (g$memv$5056$c1uhW
                                           g$t$10311$c1uhW
                                           '(begin))
                                       ((case-lambda
                                          ((g$t$10346$c1uhW)
                                           ((case-lambda
                                              ((g$ls/false$10347$c1uhW)
                                               (if g$ls/false$10347$c1uhW
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$10348$c1uhW)
                                                      (g$chi-body*$8026$c1uhW
                                                        (append
                                                          g$x*$10348$c1uhW
                                                          (cdr g$e*$10289$c1uhW))
                                                        g$r$10290$c1uhW
                                                        g$mr$10291$c1uhW
                                                        g$lex*$10292$c1uhW
                                                        g$rhs*$10293$c1uhW
                                                        g$mod**$10294$c1uhW
                                                        g$kwd*$10310$c1uhW
                                                        g$exp*$10296$c1uhW
                                                        g$rib$10297$c1uhW
                                                        g$mix?$10298$c1uhW
                                                        g$sd?$10299$c1uhW)))
                                                   g$ls/false$10347$c1uhW)
                                                 (g$syntax-violation$8094$c1uhW
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$10346$c1uhW))))
                                            (g$syntax-dispatch$7982$c1uhW
                                              g$t$10346$c1uhW
                                              '(_ . each-any)))))
                                        g$e$10300$c1uhW)
                                       (if (g$memv$5056$c1uhW
                                             g$t$10311$c1uhW
                                             '(global-macro global-macro!))
                                         (g$chi-body*$8026$c1uhW
                                           (cons
                                             (g$add-subst$7694$c1uhW
                                               g$rib$10297$c1uhW
                                               (g$chi-global-macro$7997$c1uhW
                                                 g$value$10308$c1uhW
                                                 g$e$10300$c1uhW))
                                             (cdr g$e*$10289$c1uhW))
                                           g$r$10290$c1uhW
                                           g$mr$10291$c1uhW
                                           g$lex*$10292$c1uhW
                                           g$rhs*$10293$c1uhW
                                           g$mod**$10294$c1uhW
                                           g$kwd*$10310$c1uhW
                                           g$exp*$10296$c1uhW
                                           g$rib$10297$c1uhW
                                           g$mix?$10298$c1uhW
                                           g$sd?$10299$c1uhW)
                                         (if (g$memv$5056$c1uhW
                                               g$t$10311$c1uhW
                                               '(local-macro local-macro!))
                                           (g$chi-body*$8026$c1uhW
                                             (cons
                                               (g$add-subst$7694$c1uhW
                                                 g$rib$10297$c1uhW
                                                 (g$chi-local-macro$7996$c1uhW
                                                   g$value$10308$c1uhW
                                                   g$e$10300$c1uhW))
                                               (cdr g$e*$10289$c1uhW))
                                             g$r$10290$c1uhW
                                             g$mr$10291$c1uhW
                                             g$lex*$10292$c1uhW
                                             g$rhs*$10293$c1uhW
                                             g$mod**$10294$c1uhW
                                             g$kwd*$10310$c1uhW
                                             g$exp*$10296$c1uhW
                                             g$rib$10297$c1uhW
                                             g$mix?$10298$c1uhW
                                             g$sd?$10299$c1uhW)
                                           (if (g$memv$5056$c1uhW
                                                 g$t$10311$c1uhW
                                                 '(macro macro!))
                                             (g$chi-body*$8026$c1uhW
                                               (cons
                                                 (g$add-subst$7694$c1uhW
                                                   g$rib$10297$c1uhW
                                                   (g$chi-macro$7995$c1uhW
                                                     g$value$10308$c1uhW
                                                     g$e$10300$c1uhW))
                                                 (cdr g$e*$10289$c1uhW))
                                               g$r$10290$c1uhW
                                               g$mr$10291$c1uhW
                                               g$lex*$10292$c1uhW
                                               g$rhs*$10293$c1uhW
                                               g$mod**$10294$c1uhW
                                               g$kwd*$10310$c1uhW
                                               g$exp*$10296$c1uhW
                                               g$rib$10297$c1uhW
                                               g$mix?$10298$c1uhW
                                               g$sd?$10299$c1uhW)
                                             (if (g$memv$5056$c1uhW
                                                   g$t$10311$c1uhW
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$8025$c1uhW
                                                      g$e$10300$c1uhW
                                                      g$r$10290$c1uhW
                                                      g$mr$10291$c1uhW
                                                      g$lex*$10292$c1uhW
                                                      g$rhs*$10293$c1uhW
                                                      g$mod**$10294$c1uhW
                                                      g$kwd*$10310$c1uhW)))
                                                 (case-lambda
                                                   ((g$lex*$10357$c1uhW
                                                      g$rhs*$10358$c1uhW
                                                      g$m-exp-id*$10359$c1uhW
                                                      g$m-exp-lab*$10360$c1uhW
                                                      g$r$10361$c1uhW
                                                      g$mr$10362$c1uhW
                                                      g$mod**$10363$c1uhW
                                                      g$kwd*$10364$c1uhW)
                                                    ((case-lambda
                                                       ((g$kwd*$10365$c1uhW
                                                          g$mod**$10366$c1uhW
                                                          g$mr$10367$c1uhW
                                                          g$r$10368$c1uhW
                                                          g$m-exp-lab*$10369$c1uhW
                                                          g$m-exp-id*$10370$c1uhW
                                                          g$rhs*$10371$c1uhW
                                                          g$lex*$10372$c1uhW)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$10373$c1uhW
                                                                 g$lab$10374$c1uhW)
                                                               (g$extend-rib!$7667$c1uhW
                                                                 g$rib$10297$c1uhW
                                                                 g$id$10373$c1uhW
                                                                 g$lab$10374$c1uhW
                                                                 g$sd?$10299$c1uhW)))
                                                            g$m-exp-id*$10370$c1uhW
                                                            g$m-exp-lab*$10369$c1uhW)
                                                          (g$chi-body*$8026$c1uhW
                                                            (cdr g$e*$10289$c1uhW)
                                                            g$r$10368$c1uhW
                                                            g$mr$10367$c1uhW
                                                            g$lex*$10372$c1uhW
                                                            g$rhs*$10371$c1uhW
                                                            g$mod**$10366$c1uhW
                                                            g$kwd*$10365$c1uhW
                                                            g$exp*$10296$c1uhW
                                                            g$rib$10297$c1uhW
                                                            g$mix?$10298$c1uhW
                                                            g$sd?$10299$c1uhW))))
                                                     g$kwd*$10364$c1uhW
                                                     g$mod**$10363$c1uhW
                                                     g$mr$10362$c1uhW
                                                     g$r$10361$c1uhW
                                                     g$m-exp-lab*$10360$c1uhW
                                                     g$m-exp-id*$10359$c1uhW
                                                     g$rhs*$10358$c1uhW
                                                     g$lex*$10357$c1uhW))))
                                               (if (g$memv$5056$c1uhW
                                                     g$t$10311$c1uhW
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$8078$c1uhW
                                                     (g$stx->datum$7715$c1uhW
                                                       g$e$10300$c1uhW))
                                                   (g$chi-body*$8026$c1uhW
                                                     (cdr g$e*$10289$c1uhW)
                                                     g$r$10290$c1uhW
                                                     g$mr$10291$c1uhW
                                                     g$lex*$10292$c1uhW
                                                     g$rhs*$10293$c1uhW
                                                     g$mod**$10294$c1uhW
                                                     g$kwd*$10310$c1uhW
                                                     g$exp*$10296$c1uhW
                                                     g$rib$10297$c1uhW
                                                     g$mix?$10298$c1uhW
                                                     g$sd?$10299$c1uhW))
                                                 (if (g$memv$5056$c1uhW
                                                       g$t$10311$c1uhW
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$10375$c1uhW)
                                                       ((case-lambda
                                                          ((g$ls/false$10376$c1uhW)
                                                           (if g$ls/false$10376$c1uhW
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$10377$c1uhW)
                                                                  (g$chi-body*$8026$c1uhW
                                                                    (cdr g$e*$10289$c1uhW)
                                                                    g$r$10290$c1uhW
                                                                    g$mr$10291$c1uhW
                                                                    g$lex*$10292$c1uhW
                                                                    g$rhs*$10293$c1uhW
                                                                    g$mod**$10294$c1uhW
                                                                    g$kwd*$10310$c1uhW
                                                                    (append
                                                                      g$exp-decl*$10377$c1uhW
                                                                      g$exp*$10296$c1uhW)
                                                                    g$rib$10297$c1uhW
                                                                    g$mix?$10298$c1uhW
                                                                    g$sd?$10299$c1uhW)))
                                                               g$ls/false$10376$c1uhW)
                                                             (g$syntax-violation$8094$c1uhW
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$10375$c1uhW))))
                                                        (g$syntax-dispatch$7982$c1uhW
                                                          g$t$10375$c1uhW
                                                          '(_ . each-any)))))
                                                    g$e$10300$c1uhW)
                                                   (if (g$memv$5056$c1uhW
                                                         g$t$10311$c1uhW
                                                         '(import))
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$10378$c1uhW
                                                                     (case-lambda
                                                                       ((g$e$10420$c1uhW)
                                                                        ((case-lambda
                                                                           ((g$t$10421$c1uhW)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10422$c1uhW)
                                                                                (if (if g$ls/false$10422$c1uhW
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10423$c1uhW)
                                                                                             (g$id?$7704$c1uhW
                                                                                               g$id$10423$c1uhW)))
                                                                                          g$ls/false$10422$c1uhW))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10424$c1uhW)
                                                                                       '#t))
                                                                                    g$ls/false$10422$c1uhW)
                                                                                  ((case-lambda
                                                                                     ((g$t$10425$c1uhW)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10426$c1uhW)
                                                                                          (if g$ls/false$10426$c1uhW
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$10427$c1uhW)
                                                                                                 '#f))
                                                                                              g$ls/false$10426$c1uhW)
                                                                                            ((case-lambda
                                                                                               ((g$t$10428$c1uhW)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$10429$c1uhW)
                                                                                                    (if g$ls/false$10429$c1uhW
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$8094$c1uhW
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$10420$c1uhW)))
                                                                                                        g$ls/false$10429$c1uhW)
                                                                                                      (g$syntax-violation$8094$c1uhW
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$10428$c1uhW))))
                                                                                                 (g$syntax-dispatch$7982$c1uhW
                                                                                                   g$t$10428$c1uhW
                                                                                                   '_))))
                                                                                             g$t$10425$c1uhW))))
                                                                                       (g$syntax-dispatch$7982$c1uhW
                                                                                         g$t$10425$c1uhW
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$10421$c1uhW))))
                                                                             (g$syntax-dispatch$7982$c1uhW
                                                                               g$t$10421$c1uhW
                                                                               '(_ any)))))
                                                                         g$e$10420$c1uhW))))
                                                                   (g$module-import$10379$c1uhW
                                                                     (case-lambda
                                                                       ((g$e$10403$c1uhW
                                                                          g$r$10404$c1uhW)
                                                                        ((case-lambda
                                                                           ((g$t$10405$c1uhW)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10406$c1uhW)
                                                                                (if (if g$ls/false$10406$c1uhW
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10407$c1uhW)
                                                                                             (g$id?$7704$c1uhW
                                                                                               g$id$10407$c1uhW)))
                                                                                          g$ls/false$10406$c1uhW))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10408$c1uhW)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7724$c1uhW
                                                                                              g$id$10408$c1uhW
                                                                                              g$r$10404$c1uhW)))
                                                                                         (case-lambda
                                                                                           ((g$type$10412$c1uhW
                                                                                              g$value$10413$c1uhW
                                                                                              g$kwd$10414$c1uhW)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$10415$c1uhW
                                                                                                  g$value$10416$c1uhW
                                                                                                  g$type$10417$c1uhW)
                                                                                                ((case-lambda
                                                                                                   ((g$t$10418$c1uhW)
                                                                                                    (if (g$memv$5056$c1uhW
                                                                                                          g$t$10418$c1uhW
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$10419$c1uhW)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$8024$c1uhW
                                                                                                              g$iface$10419$c1uhW
                                                                                                              g$id$10408$c1uhW)
                                                                                                            (g$module-interface-exp-lab-vec$8020$c1uhW
                                                                                                              g$iface$10419$c1uhW))))
                                                                                                       g$value$10416$c1uhW)
                                                                                                      (g$syntax-violation$8094$c1uhW
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$10403$c1uhW))))
                                                                                                 g$type$10417$c1uhW)))
                                                                                             g$kwd$10414$c1uhW
                                                                                             g$value$10413$c1uhW
                                                                                             g$type$10412$c1uhW))))))
                                                                                    g$ls/false$10406$c1uhW)
                                                                                  (g$syntax-violation$8094$c1uhW
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$10405$c1uhW))))
                                                                             (g$syntax-dispatch$7982$c1uhW
                                                                               g$t$10405$c1uhW
                                                                               '(_ any)))))
                                                                         g$e$10403$c1uhW))))
                                                                   (g$library-import$10380$c1uhW
                                                                     (case-lambda
                                                                       ((g$e$10389$c1uhW)
                                                                        ((case-lambda
                                                                           ((g$t$10390$c1uhW)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10391$c1uhW)
                                                                                (if g$ls/false$10391$c1uhW
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$10392$c1uhW
                                                                                         g$imp*$10393$c1uhW)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$8031$c1uhW
                                                                                              (g$syntax->datum$8097$c1uhW
                                                                                                g$imp*$10393$c1uhW))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$10396$c1uhW
                                                                                              g$subst-labels$10397$c1uhW)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$10398$c1uhW
                                                                                                  g$subst-names$10399$c1uhW)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$10400$c1uhW)
                                                                                                       (g$datum->stx$7687$c1uhW
                                                                                                         g$ctxt$10392$c1uhW
                                                                                                         g$name$10400$c1uhW)))
                                                                                                    g$subst-names$10399$c1uhW)
                                                                                                  g$subst-labels$10398$c1uhW)))
                                                                                             g$subst-labels$10397$c1uhW
                                                                                             g$subst-names$10396$c1uhW))))))
                                                                                    g$ls/false$10391$c1uhW)
                                                                                  ((case-lambda
                                                                                     ((g$t$10401$c1uhW)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10402$c1uhW)
                                                                                          (if g$ls/false$10402$c1uhW
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8094$c1uhW
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$10389$c1uhW)))
                                                                                              g$ls/false$10402$c1uhW)
                                                                                            (g$syntax-violation$8094$c1uhW
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10401$c1uhW))))
                                                                                       (g$syntax-dispatch$7982$c1uhW
                                                                                         g$t$10401$c1uhW
                                                                                         '_))))
                                                                                   g$t$10390$c1uhW))))
                                                                             (g$syntax-dispatch$7982$c1uhW
                                                                               g$t$10390$c1uhW
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$10389$c1uhW)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$10378$c1uhW
                                                                        g$e$10300$c1uhW)
                                                                    (g$module-import$10379$c1uhW
                                                                      g$e$10300$c1uhW
                                                                      g$r$10290$c1uhW)
                                                                    (g$library-import$10380$c1uhW
                                                                      g$e$10300$c1uhW))))
                                                               (case-lambda
                                                                 ((g$id*$10383$c1uhW
                                                                    g$lab*$10384$c1uhW)
                                                                  ((case-lambda
                                                                     ((g$lab*$10385$c1uhW
                                                                        g$id*$10386$c1uhW)
                                                                      (vector-for-each
                                                                        (case-lambda
                                                                          ((g$id$10387$c1uhW
                                                                             g$lab$10388$c1uhW)
                                                                           (g$extend-rib!$7667$c1uhW
                                                                             g$rib$10297$c1uhW
                                                                             g$id$10387$c1uhW
                                                                             g$lab$10388$c1uhW
                                                                             g$sd?$10299$c1uhW)))
                                                                        g$id*$10386$c1uhW
                                                                        g$lab*$10385$c1uhW)))
                                                                   g$lab*$10384$c1uhW
                                                                   g$id*$10383$c1uhW))))
                                                             (g$chi-body*$8026$c1uhW
                                                               (cdr g$e*$10289$c1uhW)
                                                               g$r$10290$c1uhW
                                                               g$mr$10291$c1uhW
                                                               g$lex*$10292$c1uhW
                                                               g$rhs*$10293$c1uhW
                                                               g$mod**$10294$c1uhW
                                                               g$kwd*$10310$c1uhW
                                                               g$exp*$10296$c1uhW
                                                               g$rib$10297$c1uhW
                                                               g$mix?$10298$c1uhW
                                                               g$sd?$10299$c1uhW))))))
                                                     (if g$mix?$10298$c1uhW
                                                       (g$chi-body*$8026$c1uhW
                                                         (cdr g$e*$10289$c1uhW)
                                                         g$r$10290$c1uhW
                                                         g$mr$10291$c1uhW
                                                         (cons
                                                           (g$gen-lexical$7643$c1uhW
                                                             'dummy)
                                                           g$lex*$10292$c1uhW)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$10300$c1uhW)
                                                           g$rhs*$10293$c1uhW)
                                                         g$mod**$10294$c1uhW
                                                         g$kwd*$10310$c1uhW
                                                         g$exp*$10296$c1uhW
                                                         g$rib$10297$c1uhW
                                                         '#t
                                                         g$sd?$10299$c1uhW)
                                                       (values
                                                         g$e*$10289$c1uhW
                                                         g$r$10290$c1uhW
                                                         g$mr$10291$c1uhW
                                                         g$lex*$10292$c1uhW
                                                         g$rhs*$10293$c1uhW
                                                         g$mod**$10294$c1uhW
                                                         g$kwd*$10310$c1uhW
                                                         g$exp*$10296$c1uhW)))))))))))))))
                            g$type$10309$c1uhW)))
                        (if (g$id?$7704$c1uhW g$kwd$10307$c1uhW)
                          (cons g$kwd$10307$c1uhW g$kwd*$10295$c1uhW)
                          g$kwd*$10295$c1uhW))))
                    g$kwd$10306$c1uhW
                    g$value$10305$c1uhW
                    g$type$10304$c1uhW))))))
           (car g$e*$10289$c1uhW))))))
   (g$expand-transformer$8027$c1uhW
     g$expand-transformer$11530$c1uhW
     (case-lambda
       ((g$expr$10430$c1uhW g$r$10431$c1uhW)
        ((case-lambda
           ((g$rtc$10432$c1uhW)
            ((case-lambda
               ((g$expanded-rhs$10433$c1uhW)
                (begin
                  (g$for-each$5064$c1uhW
                    ((case-lambda
                       ((g$mark-visit$10434$c1uhW)
                        (case-lambda
                          ((g$x$10435$c1uhW)
                           (begin
                             (g$invoke-library$7514$c1uhW g$x$10435$c1uhW)
                             (g$mark-visit$10434$c1uhW g$x$10435$c1uhW))))))
                     (g$vis-collector$8035$c1uhW))
                    (g$rtc$10432$c1uhW))
                  g$expanded-rhs$10433$c1uhW)))
             ((case-lambda
                ((g$inv-collector$10440$c1uhW
                   g$vis-collector$10441$c1uhW
                   g$inv-collector$10442$c1uhW
                   g$vis-collector$10443$c1uhW)
                 ((case-lambda
                    ((g$swap$10444$c1uhW)
                     (dynamic-wind
                       g$swap$10444$c1uhW
                       (case-lambda
                         (()
                          (g$chi-expr$8000$c1uhW
                            g$expr$10430$c1uhW
                            g$r$10431$c1uhW
                            g$r$10431$c1uhW)))
                       g$swap$10444$c1uhW)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10445$c1uhW)
                           (begin
                             (g$inv-collector$10440$c1uhW
                               g$inv-collector$10442$c1uhW)
                             (set! g$inv-collector$10442$c1uhW
                               g$t$10445$c1uhW))))
                        (g$inv-collector$10440$c1uhW))
                       ((case-lambda
                          ((g$t$10446$c1uhW)
                           (begin
                             (g$vis-collector$10441$c1uhW
                               g$vis-collector$10443$c1uhW)
                             (set! g$vis-collector$10443$c1uhW
                               g$t$10446$c1uhW))))
                        (g$vis-collector$10441$c1uhW))))))))
              g$inv-collector$8034$c1uhW
              g$vis-collector$8035$c1uhW
              g$rtc$10432$c1uhW
              (case-lambda ((g$x$10447$c1uhW) (values)))))))
         (g$make-collector$8033$c1uhW)))))
   (g$parse-exports$8028$c1uhW
     g$parse-exports$11531$c1uhW
     (case-lambda
       ((g$exp*$10448$c1uhW)
        ((letrec ((g$f$10449$c1uhW
                    (case-lambda
                      ((g$exp*$10450$c1uhW
                         g$int*$10451$c1uhW
                         g$ext*$10452$c1uhW)
                       (if (null? g$exp*$10450$c1uhW)
                         (begin
                           (if (not (g$valid-bound-ids?$7709$c1uhW
                                      g$ext*$10452$c1uhW))
                             (g$syntax-violation$8094$c1uhW
                               'export
                               '"invalid exports"
                               (g$find-dups$8010$c1uhW g$ext*$10452$c1uhW))
                             (void))
                           (values
                             (g$map$5063$c1uhW
                               g$syntax->datum$8097$c1uhW
                               g$ext*$10452$c1uhW)
                             g$int*$10451$c1uhW))
                         ((case-lambda
                            ((g$t$10453$c1uhW)
                             ((case-lambda
                                ((g$ls/false$10454$c1uhW)
                                 (if g$ls/false$10454$c1uhW
                                   (apply
                                     (case-lambda
                                       ((g$rename$10455$c1uhW
                                          g$i*$10456$c1uhW
                                          g$e*$10457$c1uhW)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$8097$c1uhW
                                                              g$rename$10455$c1uhW)
                                                            'rename)
                                                     (if (g$for-all$5061$c1uhW
                                                           g$id?$7704$c1uhW
                                                           g$i*$10456$c1uhW)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5061$c1uhW
                                                           g$id?$7704$c1uhW
                                                           g$e*$10457$c1uhW))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$8094$c1uhW
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$10450$c1uhW))
                                            (void))
                                          (g$f$10449$c1uhW
                                            (cdr g$exp*$10450$c1uhW)
                                            (append
                                              g$i*$10456$c1uhW
                                              g$int*$10451$c1uhW)
                                            (append
                                              g$e*$10457$c1uhW
                                              g$ext*$10452$c1uhW)))))
                                     g$ls/false$10454$c1uhW)
                                   ((case-lambda
                                      ((g$t$10458$c1uhW)
                                       ((case-lambda
                                          ((g$ls/false$10459$c1uhW)
                                           (if g$ls/false$10459$c1uhW
                                             (apply
                                               (case-lambda
                                                 ((g$ie$10460$c1uhW)
                                                  (begin
                                                    (if (not (g$id?$7704$c1uhW
                                                               g$ie$10460$c1uhW))
                                                      (g$syntax-violation$8094$c1uhW
                                                        'export
                                                        '"invalid export"
                                                        g$ie$10460$c1uhW)
                                                      (void))
                                                    (g$f$10449$c1uhW
                                                      (cdr g$exp*$10450$c1uhW)
                                                      (cons
                                                        g$ie$10460$c1uhW
                                                        g$int*$10451$c1uhW)
                                                      (cons
                                                        g$ie$10460$c1uhW
                                                        g$ext*$10452$c1uhW)))))
                                               g$ls/false$10459$c1uhW)
                                             (g$syntax-violation$8094$c1uhW
                                               '#f
                                               '"invalid syntax"
                                               g$t$10458$c1uhW))))
                                        (g$syntax-dispatch$7982$c1uhW
                                          g$t$10458$c1uhW
                                          'any))))
                                    g$t$10453$c1uhW))))
                              (g$syntax-dispatch$7982$c1uhW
                                g$t$10453$c1uhW
                                '(any . #(each (any any)))))))
                          (car g$exp*$10450$c1uhW)))))))
           g$f$10449$c1uhW)
         g$exp*$10448$c1uhW
         '()
         '()))))
   (g$parse-library-name$8029$c1uhW
     g$parse-library-name$11532$c1uhW
     (case-lambda
       ((g$spec$10461$c1uhW)
        (letrec* ((g$parse$10462$c1uhW
                    (case-lambda
                      ((g$x$10469$c1uhW)
                       ((case-lambda
                          ((g$t$10470$c1uhW)
                           ((case-lambda
                              ((g$ls/false$10471$c1uhW)
                               (if (if g$ls/false$10471$c1uhW
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10472$c1uhW)
                                            (g$for-all$5061$c1uhW
                                              (case-lambda
                                                ((g$x$10473$c1uhW)
                                                 ((case-lambda
                                                    ((g$x$10474$c1uhW)
                                                     (if (integer?
                                                           g$x$10474$c1uhW)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$10474$c1uhW))
                                                       '#f)))
                                                  (g$syntax->datum$8097$c1uhW
                                                    g$x$10473$c1uhW))))
                                              g$v*$10472$c1uhW)))
                                         g$ls/false$10471$c1uhW))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10475$c1uhW)
                                      (values
                                        '()
                                        (g$map$5063$c1uhW
                                          g$syntax->datum$8097$c1uhW
                                          g$v*$10475$c1uhW))))
                                   g$ls/false$10471$c1uhW)
                                 ((case-lambda
                                    ((g$t$10476$c1uhW)
                                     ((case-lambda
                                        ((g$ls/false$10477$c1uhW)
                                         (if (if g$ls/false$10477$c1uhW
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10478$c1uhW
                                                        g$rest$10479$c1uhW)
                                                      (symbol?
                                                        (g$syntax->datum$8097$c1uhW
                                                          g$x$10478$c1uhW))))
                                                   g$ls/false$10477$c1uhW))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10480$c1uhW
                                                  g$rest$10481$c1uhW)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10462$c1uhW
                                                       g$rest$10481$c1uhW)))
                                                  (case-lambda
                                                    ((g$x*$10484$c1uhW
                                                       g$v*$10485$c1uhW)
                                                     ((case-lambda
                                                        ((g$v*$10486$c1uhW
                                                           g$x*$10487$c1uhW)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$8097$c1uhW
                                                               g$x$10480$c1uhW)
                                                             g$x*$10487$c1uhW)
                                                           g$v*$10486$c1uhW)))
                                                      g$v*$10485$c1uhW
                                                      g$x*$10484$c1uhW))))))
                                             g$ls/false$10477$c1uhW)
                                           ((case-lambda
                                              ((g$t$10488$c1uhW)
                                               ((case-lambda
                                                  ((g$ls/false$10489$c1uhW)
                                                   (if g$ls/false$10489$c1uhW
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10489$c1uhW)
                                                     ((case-lambda
                                                        ((g$t$10490$c1uhW)
                                                         ((case-lambda
                                                            ((g$ls/false$10491$c1uhW)
                                                             (if g$ls/false$10491$c1uhW
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$8094$c1uhW
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10461$c1uhW)))
                                                                 g$ls/false$10491$c1uhW)
                                                               (g$syntax-violation$8094$c1uhW
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10490$c1uhW))))
                                                          (g$syntax-dispatch$7982$c1uhW
                                                            g$t$10490$c1uhW
                                                            '_))))
                                                      g$t$10488$c1uhW))))
                                                (g$syntax-dispatch$7982$c1uhW
                                                  g$t$10488$c1uhW
                                                  '()))))
                                            g$t$10476$c1uhW))))
                                      (g$syntax-dispatch$7982$c1uhW
                                        g$t$10476$c1uhW
                                        '(any . any)))))
                                  g$t$10470$c1uhW))))
                            (g$syntax-dispatch$7982$c1uhW
                              g$t$10470$c1uhW
                              '(each-any)))))
                        g$x$10469$c1uhW)))))
          (call-with-values
            (case-lambda (() (g$parse$10462$c1uhW g$spec$10461$c1uhW)))
            (case-lambda
              ((g$name*$10465$c1uhW g$ver*$10466$c1uhW)
               ((case-lambda
                  ((g$ver*$10467$c1uhW g$name*$10468$c1uhW)
                   (begin
                     (if (null? g$name*$10468$c1uhW)
                       (g$syntax-violation$8094$c1uhW
                         '#f
                         '"empty library name"
                         g$spec$10461$c1uhW)
                       (void))
                     (values g$name*$10468$c1uhW g$ver*$10467$c1uhW))))
                g$ver*$10466$c1uhW
                g$name*$10465$c1uhW))))))))
   (g$parse-library$8030$c1uhW
     g$parse-library$11533$c1uhW
     (case-lambda
       ((g$e$10492$c1uhW)
        ((case-lambda
           ((g$t$10493$c1uhW)
            ((case-lambda
               ((g$ls/false$10494$c1uhW)
                (if (if g$ls/false$10494$c1uhW
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10495$c1uhW
                               g$name*$10496$c1uhW
                               g$export$10497$c1uhW
                               g$exp*$10498$c1uhW
                               g$import$10499$c1uhW
                               g$imp*$10500$c1uhW
                               g$b*$10501$c1uhW)
                             (if (eq? (g$syntax->datum$8097$c1uhW
                                        g$export$10497$c1uhW)
                                      'export)
                               (if (eq? (g$syntax->datum$8097$c1uhW
                                          g$import$10499$c1uhW)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$8097$c1uhW
                                          g$library$10495$c1uhW)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10494$c1uhW))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10502$c1uhW
                         g$name*$10503$c1uhW
                         g$export$10504$c1uhW
                         g$exp*$10505$c1uhW
                         g$import$10506$c1uhW
                         g$imp*$10507$c1uhW
                         g$b*$10508$c1uhW)
                       (values
                         g$name*$10503$c1uhW
                         g$exp*$10505$c1uhW
                         g$imp*$10507$c1uhW
                         g$b*$10508$c1uhW)))
                    g$ls/false$10494$c1uhW)
                  ((case-lambda
                     ((g$t$10509$c1uhW)
                      ((case-lambda
                         ((g$ls/false$10510$c1uhW)
                          (if g$ls/false$10510$c1uhW
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8094$c1uhW
                                   '#f
                                   '"malformed library"
                                   g$e$10492$c1uhW)))
                              g$ls/false$10510$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"invalid syntax"
                              g$t$10509$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW g$t$10509$c1uhW '_))))
                   g$t$10493$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$10493$c1uhW
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10492$c1uhW))))
   (g$parse-import-spec*$8031$c1uhW
     g$parse-import-spec*$11534$c1uhW
     ((case-lambda
        (()
         (letrec* ((g$idsyn?$10511$c1uhW
                     (case-lambda
                       ((g$x$10772$c1uhW)
                        (symbol?
                          (g$syntax->datum$8097$c1uhW g$x$10772$c1uhW)))))
                   (g$dup-error$10512$c1uhW
                     (case-lambda
                       ((g$name$10771$c1uhW)
                        (g$syntax-violation$8094$c1uhW
                          'import
                          '"two imports with different bindings"
                          g$name$10771$c1uhW))))
                   (g$merge-substs$10513$c1uhW
                     (case-lambda
                       ((g$s$10762$c1uhW g$subst$10763$c1uhW)
                        (letrec* ((g$insert-to-subst$10764$c1uhW
                                    (case-lambda
                                      ((g$a$10765$c1uhW g$subst$10766$c1uhW)
                                       ((case-lambda
                                          ((g$name$10767$c1uhW
                                             g$label$10768$c1uhW)
                                           ((case-lambda
                                              ((g$t$10769$c1uhW)
                                               (if g$t$10769$c1uhW
                                                 ((case-lambda
                                                    ((g$x$10770$c1uhW)
                                                     (if (eq? (cdr g$x$10770$c1uhW)
                                                              g$label$10768$c1uhW)
                                                       g$subst$10766$c1uhW
                                                       (g$dup-error$10512$c1uhW
                                                         g$name$10767$c1uhW))))
                                                  g$t$10769$c1uhW)
                                                 (cons
                                                   g$a$10765$c1uhW
                                                   g$subst$10766$c1uhW))))
                                            (g$assq$5051$c1uhW
                                              g$name$10767$c1uhW
                                              g$subst$10766$c1uhW))))
                                        (car g$a$10765$c1uhW)
                                        (cdr g$a$10765$c1uhW))))))
                          (if (null? g$s$10762$c1uhW)
                            g$subst$10763$c1uhW
                            (g$insert-to-subst$10764$c1uhW
                              (car g$s$10762$c1uhW)
                              (g$merge-substs$10513$c1uhW
                                (cdr g$s$10762$c1uhW)
                                g$subst$10763$c1uhW)))))))
                   (g$exclude*$10514$c1uhW
                     (case-lambda
                       ((g$sym*$10738$c1uhW g$subst$10739$c1uhW)
                        (letrec* ((g$exclude$10740$c1uhW
                                    (case-lambda
                                      ((g$sym$10753$c1uhW g$subst$10754$c1uhW)
                                       (if (null? g$subst$10754$c1uhW)
                                         (g$syntax-violation$8094$c1uhW
                                           'import
                                           '"cannot rename unbound identifier"
                                           g$sym$10753$c1uhW)
                                         (if (eq? g$sym$10753$c1uhW
                                                  (g$caar$5263$c1uhW
                                                    g$subst$10754$c1uhW))
                                           (values
                                             (g$cdar$5265$c1uhW
                                               g$subst$10754$c1uhW)
                                             (cdr g$subst$10754$c1uhW))
                                           ((case-lambda
                                              ((g$a$10755$c1uhW)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$exclude$10740$c1uhW
                                                      g$sym$10753$c1uhW
                                                      (cdr g$subst$10754$c1uhW))))
                                                 (case-lambda
                                                   ((g$old$10758$c1uhW
                                                      g$subst$10759$c1uhW)
                                                    ((case-lambda
                                                       ((g$subst$10760$c1uhW
                                                          g$old$10761$c1uhW)
                                                        (values
                                                          g$old$10761$c1uhW
                                                          (cons
                                                            g$a$10755$c1uhW
                                                            g$subst$10760$c1uhW))))
                                                     g$subst$10759$c1uhW
                                                     g$old$10758$c1uhW))))))
                                            (car g$subst$10754$c1uhW))))))))
                          (if (null? g$sym*$10738$c1uhW)
                            (values '() g$subst$10739$c1uhW)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$exclude$10740$c1uhW
                                   (car g$sym*$10738$c1uhW)
                                   g$subst$10739$c1uhW)))
                              (case-lambda
                                ((g$old$10743$c1uhW g$subst$10744$c1uhW)
                                 ((case-lambda
                                    ((g$subst$10745$c1uhW g$old$10746$c1uhW)
                                     (call-with-values
                                       (case-lambda
                                         (()
                                          (g$exclude*$10514$c1uhW
                                            (cdr g$sym*$10738$c1uhW)
                                            g$subst$10745$c1uhW)))
                                       (case-lambda
                                         ((g$old*$10749$c1uhW
                                            g$subst$10750$c1uhW)
                                          ((case-lambda
                                             ((g$subst$10751$c1uhW
                                                g$old*$10752$c1uhW)
                                              (values
                                                (cons
                                                  g$old$10746$c1uhW
                                                  g$old*$10752$c1uhW)
                                                g$subst$10751$c1uhW)))
                                           g$subst$10750$c1uhW
                                           g$old*$10749$c1uhW))))))
                                  g$subst$10744$c1uhW
                                  g$old$10743$c1uhW)))))))))
                   (g$find*$10515$c1uhW
                     (case-lambda
                       ((g$sym*$10734$c1uhW g$subst$10735$c1uhW)
                        (g$map$5063$c1uhW
                          (case-lambda
                            ((g$x$10736$c1uhW)
                             ((case-lambda
                                ((g$t$10737$c1uhW)
                                 (if g$t$10737$c1uhW
                                   (cdr g$t$10737$c1uhW)
                                   (g$syntax-violation$8094$c1uhW
                                     'import
                                     '"cannot find identifier"
                                     g$x$10736$c1uhW))))
                              (g$assq$5051$c1uhW
                                g$x$10736$c1uhW
                                g$subst$10735$c1uhW))))
                          g$sym*$10734$c1uhW))))
                   (g$rem*$10516$c1uhW
                     (case-lambda
                       ((g$sym*$10730$c1uhW g$subst$10731$c1uhW)
                        ((letrec ((g$f$10732$c1uhW
                                    (case-lambda
                                      ((g$subst$10733$c1uhW)
                                       (if (null? g$subst$10733$c1uhW)
                                         '()
                                         (if (g$memq$5055$c1uhW
                                               (g$caar$5263$c1uhW
                                                 g$subst$10733$c1uhW)
                                               g$sym*$10730$c1uhW)
                                           (g$f$10732$c1uhW
                                             (cdr g$subst$10733$c1uhW))
                                           (cons
                                             (car g$subst$10733$c1uhW)
                                             (g$f$10732$c1uhW
                                               (cdr g$subst$10733$c1uhW)))))))))
                           g$f$10732$c1uhW)
                         g$subst$10731$c1uhW))))
                   (g$remove-dups$10517$c1uhW
                     (case-lambda
                       ((g$ls$10729$c1uhW)
                        (if (null? g$ls$10729$c1uhW)
                          '()
                          (if (g$memq$5055$c1uhW
                                (car g$ls$10729$c1uhW)
                                (cdr g$ls$10729$c1uhW))
                            (g$remove-dups$10517$c1uhW (cdr g$ls$10729$c1uhW))
                            (cons
                              (car g$ls$10729$c1uhW)
                              (g$remove-dups$10517$c1uhW
                                (cdr g$ls$10729$c1uhW))))))))
                   (g$parse-library-name$10518$c1uhW
                     (case-lambda
                       ((g$spec$10613$c1uhW)
                        (letrec* ((g$subversion?$10614$c1uhW
                                    (case-lambda
                                      ((g$x$10727$c1uhW)
                                       ((case-lambda
                                          ((g$x$10728$c1uhW)
                                           (if (integer? g$x$10728$c1uhW)
                                             (if (exact? g$x$10728$c1uhW)
                                               (begin
                                                 '#f
                                                 (>= g$x$10728$c1uhW '0))
                                               '#f)
                                             '#f)))
                                        (g$syntax->datum$8097$c1uhW
                                          g$x$10727$c1uhW)))))
                                  (g$subversion-pred$10615$c1uhW
                                    (case-lambda
                                      ((g$x*$10679$c1uhW)
                                       ((case-lambda
                                          ((g$t$10680$c1uhW)
                                           ((case-lambda
                                              ((g$ls/false$10681$c1uhW)
                                               (if (if g$ls/false$10681$c1uhW
                                                     (begin
                                                       '#f
                                                       (apply
                                                         (case-lambda
                                                           ((g$n$10682$c1uhW)
                                                            (g$subversion?$10614$c1uhW
                                                              g$n$10682$c1uhW)))
                                                         g$ls/false$10681$c1uhW))
                                                     '#f)
                                                 (apply
                                                   (case-lambda
                                                     ((g$n$10683$c1uhW)
                                                      (case-lambda
                                                        ((g$x$10684$c1uhW)
                                                         (= g$x$10684$c1uhW
                                                            (g$syntax->datum$8097$c1uhW
                                                              g$n$10683$c1uhW))))))
                                                   g$ls/false$10681$c1uhW)
                                                 ((case-lambda
                                                    ((g$t$10685$c1uhW)
                                                     ((case-lambda
                                                        ((g$ls/false$10686$c1uhW)
                                                         (if (if g$ls/false$10686$c1uhW
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$p?$10687$c1uhW
                                                                        g$sub*$10688$c1uhW)
                                                                      (eq? (g$syntax->datum$8097$c1uhW
                                                                             g$p?$10687$c1uhW)
                                                                           'and)))
                                                                   g$ls/false$10686$c1uhW))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$p?$10689$c1uhW
                                                                  g$sub*$10690$c1uhW)
                                                                ((case-lambda
                                                                   ((g$p*$10691$c1uhW)
                                                                    (case-lambda
                                                                      ((g$x$10692$c1uhW)
                                                                       (g$for-all$5061$c1uhW
                                                                         (case-lambda
                                                                           ((g$p$10693$c1uhW)
                                                                            (g$p$10693$c1uhW
                                                                              g$x$10692$c1uhW)))
                                                                         g$p*$10691$c1uhW)))))
                                                                 (g$map$5063$c1uhW
                                                                   g$subversion-pred$10615$c1uhW
                                                                   g$sub*$10690$c1uhW))))
                                                             g$ls/false$10686$c1uhW)
                                                           ((case-lambda
                                                              ((g$t$10694$c1uhW)
                                                               ((case-lambda
                                                                  ((g$ls/false$10695$c1uhW)
                                                                   (if (if g$ls/false$10695$c1uhW
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$p?$10696$c1uhW
                                                                                  g$sub*$10697$c1uhW)
                                                                                (eq? (g$syntax->datum$8097$c1uhW
                                                                                       g$p?$10696$c1uhW)
                                                                                     'or)))
                                                                             g$ls/false$10695$c1uhW))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p?$10698$c1uhW
                                                                            g$sub*$10699$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$p*$10700$c1uhW)
                                                                              (case-lambda
                                                                                ((g$x$10701$c1uhW)
                                                                                 (g$exists$5062$c1uhW
                                                                                   (case-lambda
                                                                                     ((g$p$10702$c1uhW)
                                                                                      (g$p$10702$c1uhW
                                                                                        g$x$10701$c1uhW)))
                                                                                   g$p*$10700$c1uhW)))))
                                                                           (g$map$5063$c1uhW
                                                                             g$subversion-pred$10615$c1uhW
                                                                             g$sub*$10699$c1uhW))))
                                                                       g$ls/false$10695$c1uhW)
                                                                     ((case-lambda
                                                                        ((g$t$10703$c1uhW)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10704$c1uhW)
                                                                             (if (if g$ls/false$10704$c1uhW
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$p?$10705$c1uhW
                                                                                            g$sub$10706$c1uhW)
                                                                                          (eq? (g$syntax->datum$8097$c1uhW
                                                                                                 g$p?$10705$c1uhW)
                                                                                               'not)))
                                                                                       g$ls/false$10704$c1uhW))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$p?$10707$c1uhW
                                                                                      g$sub$10708$c1uhW)
                                                                                    ((case-lambda
                                                                                       ((g$p$10709$c1uhW)
                                                                                        (case-lambda
                                                                                          ((g$x$10710$c1uhW)
                                                                                           (not (g$p$10709$c1uhW
                                                                                                  g$x$10710$c1uhW))))))
                                                                                     (g$subversion-pred$10615$c1uhW
                                                                                       g$sub$10708$c1uhW))))
                                                                                 g$ls/false$10704$c1uhW)
                                                                               ((case-lambda
                                                                                  ((g$t$10711$c1uhW)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10712$c1uhW)
                                                                                       (if (if g$ls/false$10712$c1uhW
                                                                                             (begin
                                                                                               '#f
                                                                                               (apply
                                                                                                 (case-lambda
                                                                                                   ((g$p?$10713$c1uhW
                                                                                                      g$n$10714$c1uhW)
                                                                                                    (if (eq? (g$syntax->datum$8097$c1uhW
                                                                                                               g$p?$10713$c1uhW)
                                                                                                             '<=)
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (g$subversion?$10614$c1uhW
                                                                                                          g$n$10714$c1uhW))
                                                                                                      '#f)))
                                                                                                 g$ls/false$10712$c1uhW))
                                                                                             '#f)
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p?$10715$c1uhW
                                                                                                g$n$10716$c1uhW)
                                                                                              (case-lambda
                                                                                                ((g$x$10717$c1uhW)
                                                                                                 (<= g$x$10717$c1uhW
                                                                                                     (g$syntax->datum$8097$c1uhW
                                                                                                       g$n$10716$c1uhW))))))
                                                                                           g$ls/false$10712$c1uhW)
                                                                                         ((case-lambda
                                                                                            ((g$t$10718$c1uhW)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10719$c1uhW)
                                                                                                 (if (if g$ls/false$10719$c1uhW
                                                                                                       (begin
                                                                                                         '#f
                                                                                                         (apply
                                                                                                           (case-lambda
                                                                                                             ((g$p?$10720$c1uhW
                                                                                                                g$n$10721$c1uhW)
                                                                                                              (if (eq? (g$syntax->datum$8097$c1uhW
                                                                                                                         g$p?$10720$c1uhW)
                                                                                                                       '>=)
                                                                                                                (begin
                                                                                                                  '#f
                                                                                                                  (g$subversion?$10614$c1uhW
                                                                                                                    g$n$10721$c1uhW))
                                                                                                                '#f)))
                                                                                                           g$ls/false$10719$c1uhW))
                                                                                                       '#f)
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$p?$10722$c1uhW
                                                                                                          g$n$10723$c1uhW)
                                                                                                        (case-lambda
                                                                                                          ((g$x$10724$c1uhW)
                                                                                                           (>= g$x$10724$c1uhW
                                                                                                               (g$syntax->datum$8097$c1uhW
                                                                                                                 g$n$10723$c1uhW))))))
                                                                                                     g$ls/false$10719$c1uhW)
                                                                                                   ((case-lambda
                                                                                                      ((g$t$10725$c1uhW)
                                                                                                       ((case-lambda
                                                                                                          ((g$ls/false$10726$c1uhW)
                                                                                                           (if g$ls/false$10726$c1uhW
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$syntax-violation$8094$c1uhW
                                                                                                                    'import
                                                                                                                    '"invalid sub-version spec"
                                                                                                                    g$spec$10613$c1uhW
                                                                                                                    g$x*$10679$c1uhW)))
                                                                                                               g$ls/false$10726$c1uhW)
                                                                                                             (g$syntax-violation$8094$c1uhW
                                                                                                               '#f
                                                                                                               '"invalid syntax"
                                                                                                               g$t$10725$c1uhW))))
                                                                                                        (g$syntax-dispatch$7982$c1uhW
                                                                                                          g$t$10725$c1uhW
                                                                                                          '_))))
                                                                                                    g$t$10718$c1uhW))))
                                                                                              (g$syntax-dispatch$7982$c1uhW
                                                                                                g$t$10718$c1uhW
                                                                                                '(any any)))))
                                                                                          g$t$10711$c1uhW))))
                                                                                    (g$syntax-dispatch$7982$c1uhW
                                                                                      g$t$10711$c1uhW
                                                                                      '(any any)))))
                                                                                g$t$10703$c1uhW))))
                                                                          (g$syntax-dispatch$7982$c1uhW
                                                                            g$t$10703$c1uhW
                                                                            '(any any)))))
                                                                      g$t$10694$c1uhW))))
                                                                (g$syntax-dispatch$7982$c1uhW
                                                                  g$t$10694$c1uhW
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10685$c1uhW))))
                                                      (g$syntax-dispatch$7982$c1uhW
                                                        g$t$10685$c1uhW
                                                        '(any . each-any)))))
                                                  g$t$10680$c1uhW))))
                                            (g$syntax-dispatch$7982$c1uhW
                                              g$t$10680$c1uhW
                                              'any))))
                                        g$x*$10679$c1uhW))))
                                  (g$version-pred$10616$c1uhW
                                    (case-lambda
                                      ((g$x*$10639$c1uhW)
                                       ((case-lambda
                                          ((g$t$10640$c1uhW)
                                           ((case-lambda
                                              ((g$ls/false$10641$c1uhW)
                                               (if g$ls/false$10641$c1uhW
                                                 (apply
                                                   (case-lambda
                                                     (()
                                                      (case-lambda
                                                        ((g$x$10642$c1uhW)
                                                         '#t))))
                                                   g$ls/false$10641$c1uhW)
                                                 ((case-lambda
                                                    ((g$t$10643$c1uhW)
                                                     ((case-lambda
                                                        ((g$ls/false$10644$c1uhW)
                                                         (if (if g$ls/false$10644$c1uhW
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$c$10645$c1uhW
                                                                        g$ver*$10646$c1uhW)
                                                                      (eq? (g$syntax->datum$8097$c1uhW
                                                                             g$c$10645$c1uhW)
                                                                           'and)))
                                                                   g$ls/false$10644$c1uhW))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$c$10647$c1uhW
                                                                  g$ver*$10648$c1uhW)
                                                                ((case-lambda
                                                                   ((g$p*$10649$c1uhW)
                                                                    (case-lambda
                                                                      ((g$x$10650$c1uhW)
                                                                       (g$for-all$5061$c1uhW
                                                                         (case-lambda
                                                                           ((g$p$10651$c1uhW)
                                                                            (g$p$10651$c1uhW
                                                                              g$x$10650$c1uhW)))
                                                                         g$p*$10649$c1uhW)))))
                                                                 (g$map$5063$c1uhW
                                                                   g$version-pred$10616$c1uhW
                                                                   g$ver*$10648$c1uhW))))
                                                             g$ls/false$10644$c1uhW)
                                                           ((case-lambda
                                                              ((g$t$10652$c1uhW)
                                                               ((case-lambda
                                                                  ((g$ls/false$10653$c1uhW)
                                                                   (if (if g$ls/false$10653$c1uhW
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$c$10654$c1uhW
                                                                                  g$ver*$10655$c1uhW)
                                                                                (eq? (g$syntax->datum$8097$c1uhW
                                                                                       g$c$10654$c1uhW)
                                                                                     'or)))
                                                                             g$ls/false$10653$c1uhW))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$c$10656$c1uhW
                                                                            g$ver*$10657$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$p*$10658$c1uhW)
                                                                              (case-lambda
                                                                                ((g$x$10659$c1uhW)
                                                                                 (g$exists$5062$c1uhW
                                                                                   (case-lambda
                                                                                     ((g$p$10660$c1uhW)
                                                                                      (g$p$10660$c1uhW
                                                                                        g$x$10659$c1uhW)))
                                                                                   g$p*$10658$c1uhW)))))
                                                                           (g$map$5063$c1uhW
                                                                             g$version-pred$10616$c1uhW
                                                                             g$ver*$10657$c1uhW))))
                                                                       g$ls/false$10653$c1uhW)
                                                                     ((case-lambda
                                                                        ((g$t$10661$c1uhW)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10662$c1uhW)
                                                                             (if (if g$ls/false$10662$c1uhW
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$c$10663$c1uhW
                                                                                            g$ver$10664$c1uhW)
                                                                                          (eq? (g$syntax->datum$8097$c1uhW
                                                                                                 g$c$10663$c1uhW)
                                                                                               'not)))
                                                                                       g$ls/false$10662$c1uhW))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$c$10665$c1uhW
                                                                                      g$ver$10666$c1uhW)
                                                                                    ((case-lambda
                                                                                       ((g$p$10667$c1uhW)
                                                                                        (case-lambda
                                                                                          ((g$x$10668$c1uhW)
                                                                                           (not (g$p$10667$c1uhW
                                                                                                  g$x$10668$c1uhW))))))
                                                                                     (g$version-pred$10616$c1uhW
                                                                                       g$ver$10666$c1uhW))))
                                                                                 g$ls/false$10662$c1uhW)
                                                                               ((case-lambda
                                                                                  ((g$t$10669$c1uhW)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10670$c1uhW)
                                                                                       (if g$ls/false$10670$c1uhW
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$sub*$10671$c1uhW)
                                                                                              ((case-lambda
                                                                                                 ((g$p*$10672$c1uhW)
                                                                                                  (case-lambda
                                                                                                    ((g$x$10673$c1uhW)
                                                                                                     ((letrec ((g$f$10674$c1uhW
                                                                                                                 (case-lambda
                                                                                                                   ((g$p*$10675$c1uhW
                                                                                                                      g$x$10676$c1uhW)
                                                                                                                    (if (null?
                                                                                                                          g$p*$10675$c1uhW)
                                                                                                                      '#t
                                                                                                                      (if (null?
                                                                                                                            g$x$10676$c1uhW)
                                                                                                                        '#f
                                                                                                                        (if ((car g$p*$10675$c1uhW)
                                                                                                                             (car g$x$10676$c1uhW))
                                                                                                                          (begin
                                                                                                                            '#f
                                                                                                                            (g$f$10674$c1uhW
                                                                                                                              (cdr g$p*$10675$c1uhW)
                                                                                                                              (cdr g$x$10676$c1uhW)))
                                                                                                                          '#f)))))))
                                                                                                        g$f$10674$c1uhW)
                                                                                                      g$p*$10672$c1uhW
                                                                                                      g$x$10673$c1uhW)))))
                                                                                               (g$map$5063$c1uhW
                                                                                                 g$subversion-pred$10615$c1uhW
                                                                                                 g$sub*$10671$c1uhW))))
                                                                                           g$ls/false$10670$c1uhW)
                                                                                         ((case-lambda
                                                                                            ((g$t$10677$c1uhW)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10678$c1uhW)
                                                                                                 (if g$ls/false$10678$c1uhW
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$syntax-violation$8094$c1uhW
                                                                                                          'import
                                                                                                          '"invalid version spec"
                                                                                                          g$spec$10613$c1uhW
                                                                                                          g$x*$10639$c1uhW)))
                                                                                                     g$ls/false$10678$c1uhW)
                                                                                                   (g$syntax-violation$8094$c1uhW
                                                                                                     '#f
                                                                                                     '"invalid syntax"
                                                                                                     g$t$10677$c1uhW))))
                                                                                              (g$syntax-dispatch$7982$c1uhW
                                                                                                g$t$10677$c1uhW
                                                                                                '_))))
                                                                                          g$t$10669$c1uhW))))
                                                                                    (g$syntax-dispatch$7982$c1uhW
                                                                                      g$t$10669$c1uhW
                                                                                      'each-any))))
                                                                                g$t$10661$c1uhW))))
                                                                          (g$syntax-dispatch$7982$c1uhW
                                                                            g$t$10661$c1uhW
                                                                            '(any any)))))
                                                                      g$t$10652$c1uhW))))
                                                                (g$syntax-dispatch$7982$c1uhW
                                                                  g$t$10652$c1uhW
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10643$c1uhW))))
                                                      (g$syntax-dispatch$7982$c1uhW
                                                        g$t$10643$c1uhW
                                                        '(any . each-any)))))
                                                  g$t$10640$c1uhW))))
                                            (g$syntax-dispatch$7982$c1uhW
                                              g$t$10640$c1uhW
                                              '()))))
                                        g$x*$10639$c1uhW)))))
                          ((letrec ((g$f$10617$c1uhW
                                      (case-lambda
                                        ((g$x$10618$c1uhW)
                                         ((case-lambda
                                            ((g$t$10619$c1uhW)
                                             ((case-lambda
                                                ((g$ls/false$10620$c1uhW)
                                                 (if g$ls/false$10620$c1uhW
                                                   (apply
                                                     (case-lambda
                                                       ((g$version-spec*$10621$c1uhW)
                                                        (values
                                                          '()
                                                          (g$version-pred$10616$c1uhW
                                                            g$version-spec*$10621$c1uhW))))
                                                     g$ls/false$10620$c1uhW)
                                                   ((case-lambda
                                                      ((g$t$10622$c1uhW)
                                                       ((case-lambda
                                                          ((g$ls/false$10623$c1uhW)
                                                           (if (if g$ls/false$10623$c1uhW
                                                                 (begin
                                                                   '#f
                                                                   (apply
                                                                     (case-lambda
                                                                       ((g$x$10624$c1uhW
                                                                          g$x*$10625$c1uhW)
                                                                        (g$idsyn?$10511$c1uhW
                                                                          g$x$10624$c1uhW)))
                                                                     g$ls/false$10623$c1uhW))
                                                                 '#f)
                                                             (apply
                                                               (case-lambda
                                                                 ((g$x$10626$c1uhW
                                                                    g$x*$10627$c1uhW)
                                                                  (call-with-values
                                                                    (case-lambda
                                                                      (()
                                                                       (g$f$10617$c1uhW
                                                                         g$x*$10627$c1uhW)))
                                                                    (case-lambda
                                                                      ((g$name$10630$c1uhW
                                                                         g$pred$10631$c1uhW)
                                                                       ((case-lambda
                                                                          ((g$pred$10632$c1uhW
                                                                             g$name$10633$c1uhW)
                                                                           (values
                                                                             (cons
                                                                               (g$syntax->datum$8097$c1uhW
                                                                                 g$x$10626$c1uhW)
                                                                               g$name$10633$c1uhW)
                                                                             g$pred$10632$c1uhW)))
                                                                        g$pred$10631$c1uhW
                                                                        g$name$10630$c1uhW))))))
                                                               g$ls/false$10623$c1uhW)
                                                             ((case-lambda
                                                                ((g$t$10634$c1uhW)
                                                                 ((case-lambda
                                                                    ((g$ls/false$10635$c1uhW)
                                                                     (if g$ls/false$10635$c1uhW
                                                                       (apply
                                                                         (case-lambda
                                                                           (()
                                                                            (values
                                                                              '()
                                                                              (case-lambda
                                                                                ((g$x$10636$c1uhW)
                                                                                 '#t)))))
                                                                         g$ls/false$10635$c1uhW)
                                                                       ((case-lambda
                                                                          ((g$t$10637$c1uhW)
                                                                           ((case-lambda
                                                                              ((g$ls/false$10638$c1uhW)
                                                                               (if g$ls/false$10638$c1uhW
                                                                                 (apply
                                                                                   (case-lambda
                                                                                     (()
                                                                                      (g$syntax-violation$8094$c1uhW
                                                                                        '#f
                                                                                        '"invalid import spec"
                                                                                        g$spec$10613$c1uhW)))
                                                                                   g$ls/false$10638$c1uhW)
                                                                                 (g$syntax-violation$8094$c1uhW
                                                                                   '#f
                                                                                   '"invalid syntax"
                                                                                   g$t$10637$c1uhW))))
                                                                            (g$syntax-dispatch$7982$c1uhW
                                                                              g$t$10637$c1uhW
                                                                              '_))))
                                                                        g$t$10634$c1uhW))))
                                                                  (g$syntax-dispatch$7982$c1uhW
                                                                    g$t$10634$c1uhW
                                                                    '()))))
                                                              g$t$10622$c1uhW))))
                                                        (g$syntax-dispatch$7982$c1uhW
                                                          g$t$10622$c1uhW
                                                          '(any . any)))))
                                                    g$t$10619$c1uhW))))
                                              (g$syntax-dispatch$7982$c1uhW
                                                g$t$10619$c1uhW
                                                '(each-any)))))
                                          g$x$10618$c1uhW)))))
                             g$f$10617$c1uhW)
                           g$spec$10613$c1uhW)))))
                   (g$import-library$10519$c1uhW
                     (case-lambda
                       ((g$spec*$10605$c1uhW)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$parse-library-name$10518$c1uhW
                               g$spec*$10605$c1uhW)))
                          (case-lambda
                            ((g$name$10608$c1uhW g$pred$10609$c1uhW)
                             ((case-lambda
                                ((g$pred$10610$c1uhW g$name$10611$c1uhW)
                                 (begin
                                   (if (null? g$name$10611$c1uhW)
                                     (g$syntax-violation$8094$c1uhW
                                       'import
                                       '"empty library name"
                                       g$spec*$10605$c1uhW)
                                     (void))
                                   ((case-lambda
                                      ((g$lib$10612$c1uhW)
                                       (begin
                                         (if (not g$lib$10612$c1uhW)
                                           (g$syntax-violation$8094$c1uhW
                                             'import
                                             '"cannot find library with required name"
                                             g$name$10611$c1uhW)
                                           (void))
                                         (if (not (g$pred$10610$c1uhW
                                                    (g$library-version$7467$c1uhW
                                                      g$lib$10612$c1uhW)))
                                           (g$syntax-violation$8094$c1uhW
                                             'import
                                             '"library does not satisfy version specification"
                                             g$spec*$10605$c1uhW
                                             g$lib$10612$c1uhW)
                                           (void))
                                         ((g$imp-collector$8036$c1uhW)
                                          g$lib$10612$c1uhW)
                                         (g$library-subst$7471$c1uhW
                                           g$lib$10612$c1uhW))))
                                    (g$find-library-by-name$7507$c1uhW
                                      g$name$10611$c1uhW)))))
                              g$pred$10609$c1uhW
                              g$name$10608$c1uhW)))))))
                   (g$get-import$10520$c1uhW
                     (case-lambda
                       ((g$spec$10534$c1uhW)
                        ((case-lambda
                           ((g$t$10535$c1uhW)
                            ((case-lambda
                               ((g$ls/false$10536$c1uhW)
                                (if (if g$ls/false$10536$c1uhW
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$x$10537$c1uhW g$x*$10538$c1uhW)
                                             (not (g$memq$5055$c1uhW
                                                    (g$syntax->datum$8097$c1uhW
                                                      g$x$10537$c1uhW)
                                                    '(for rename
                                                          except
                                                          only
                                                          prefix
                                                          library)))))
                                          g$ls/false$10536$c1uhW))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$x$10539$c1uhW g$x*$10540$c1uhW)
                                       (g$import-library$10519$c1uhW
                                         (cons
                                           g$x$10539$c1uhW
                                           g$x*$10540$c1uhW))))
                                    g$ls/false$10536$c1uhW)
                                  ((case-lambda
                                     ((g$t$10541$c1uhW)
                                      ((case-lambda
                                         ((g$ls/false$10542$c1uhW)
                                          (if (if g$ls/false$10542$c1uhW
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$rename$10543$c1uhW
                                                         g$isp$10544$c1uhW
                                                         g$old*$10545$c1uhW
                                                         g$new*$10546$c1uhW)
                                                       (if (eq? (g$syntax->datum$8097$c1uhW
                                                                  g$rename$10543$c1uhW)
                                                                'rename)
                                                         (if (g$for-all$5061$c1uhW
                                                               g$idsyn?$10511$c1uhW
                                                               g$old*$10545$c1uhW)
                                                           (begin
                                                             '#f
                                                             (g$for-all$5061$c1uhW
                                                               g$idsyn?$10511$c1uhW
                                                               g$new*$10546$c1uhW))
                                                           '#f)
                                                         '#f)))
                                                    g$ls/false$10542$c1uhW))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$rename$10547$c1uhW
                                                   g$isp$10548$c1uhW
                                                   g$old*$10549$c1uhW
                                                   g$new*$10550$c1uhW)
                                                 ((case-lambda
                                                    ((g$subst$10551$c1uhW
                                                       g$old*$10552$c1uhW
                                                       g$new*$10553$c1uhW)
                                                     ((case-lambda
                                                        ((g$old-label*$10554$c1uhW)
                                                         ((case-lambda
                                                            ((g$subst$10555$c1uhW)
                                                             (g$merge-substs$10513$c1uhW
                                                               (g$map$5063$c1uhW
                                                                 cons
                                                                 g$new*$10553$c1uhW
                                                                 g$old-label*$10554$c1uhW)
                                                               g$subst$10555$c1uhW)))
                                                          (g$rem*$10516$c1uhW
                                                            g$old*$10552$c1uhW
                                                            g$subst$10551$c1uhW))))
                                                      (g$find*$10515$c1uhW
                                                        g$old*$10552$c1uhW
                                                        g$subst$10551$c1uhW))))
                                                  (g$get-import$10520$c1uhW
                                                    g$isp$10548$c1uhW)
                                                  (g$map$5063$c1uhW
                                                    g$syntax->datum$8097$c1uhW
                                                    g$old*$10549$c1uhW)
                                                  (g$map$5063$c1uhW
                                                    g$syntax->datum$8097$c1uhW
                                                    g$new*$10550$c1uhW))))
                                              g$ls/false$10542$c1uhW)
                                            ((case-lambda
                                               ((g$t$10556$c1uhW)
                                                ((case-lambda
                                                   ((g$ls/false$10557$c1uhW)
                                                    (if (if g$ls/false$10557$c1uhW
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$except$10558$c1uhW
                                                                   g$isp$10559$c1uhW
                                                                   g$sym*$10560$c1uhW)
                                                                 (if (eq? (g$syntax->datum$8097$c1uhW
                                                                            g$except$10558$c1uhW)
                                                                          'except)
                                                                   (begin
                                                                     '#f
                                                                     (g$for-all$5061$c1uhW
                                                                       g$idsyn?$10511$c1uhW
                                                                       g$sym*$10560$c1uhW))
                                                                   '#f)))
                                                              g$ls/false$10557$c1uhW))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$except$10561$c1uhW
                                                             g$isp$10562$c1uhW
                                                             g$sym*$10563$c1uhW)
                                                           ((case-lambda
                                                              ((g$subst$10564$c1uhW)
                                                               (g$rem*$10516$c1uhW
                                                                 (g$map$5063$c1uhW
                                                                   g$syntax->datum$8097$c1uhW
                                                                   g$sym*$10563$c1uhW)
                                                                 g$subst$10564$c1uhW)))
                                                            (g$get-import$10520$c1uhW
                                                              g$isp$10562$c1uhW))))
                                                        g$ls/false$10557$c1uhW)
                                                      ((case-lambda
                                                         ((g$t$10565$c1uhW)
                                                          ((case-lambda
                                                             ((g$ls/false$10566$c1uhW)
                                                              (if (if g$ls/false$10566$c1uhW
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$only$10567$c1uhW
                                                                             g$isp$10568$c1uhW
                                                                             g$sym*$10569$c1uhW)
                                                                           (if (eq? (g$syntax->datum$8097$c1uhW
                                                                                      g$only$10567$c1uhW)
                                                                                    'only)
                                                                             (begin
                                                                               '#f
                                                                               (g$for-all$5061$c1uhW
                                                                                 g$idsyn?$10511$c1uhW
                                                                                 g$sym*$10569$c1uhW))
                                                                             '#f)))
                                                                        g$ls/false$10566$c1uhW))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$only$10570$c1uhW
                                                                       g$isp$10571$c1uhW
                                                                       g$sym*$10572$c1uhW)
                                                                     ((case-lambda
                                                                        ((g$subst$10573$c1uhW
                                                                           g$sym*$10574$c1uhW)
                                                                         ((case-lambda
                                                                            ((g$sym*$10575$c1uhW)
                                                                             ((case-lambda
                                                                                ((g$lab*$10576$c1uhW)
                                                                                 (g$map$5063$c1uhW
                                                                                   cons
                                                                                   g$sym*$10575$c1uhW
                                                                                   g$lab*$10576$c1uhW)))
                                                                              (g$find*$10515$c1uhW
                                                                                g$sym*$10575$c1uhW
                                                                                g$subst$10573$c1uhW))))
                                                                          (g$remove-dups$10517$c1uhW
                                                                            g$sym*$10574$c1uhW))))
                                                                      (g$get-import$10520$c1uhW
                                                                        g$isp$10571$c1uhW)
                                                                      (g$map$5063$c1uhW
                                                                        g$syntax->datum$8097$c1uhW
                                                                        g$sym*$10572$c1uhW))))
                                                                  g$ls/false$10566$c1uhW)
                                                                ((case-lambda
                                                                   ((g$t$10577$c1uhW)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10578$c1uhW)
                                                                        (if (if g$ls/false$10578$c1uhW
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$prefix$10579$c1uhW
                                                                                       g$isp$10580$c1uhW
                                                                                       g$p$10581$c1uhW)
                                                                                     (if (eq? (g$syntax->datum$8097$c1uhW
                                                                                                g$prefix$10579$c1uhW)
                                                                                              'prefix)
                                                                                       (begin
                                                                                         '#f
                                                                                         (g$idsyn?$10511$c1uhW
                                                                                           g$p$10581$c1uhW))
                                                                                       '#f)))
                                                                                  g$ls/false$10578$c1uhW))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$prefix$10582$c1uhW
                                                                                 g$isp$10583$c1uhW
                                                                                 g$p$10584$c1uhW)
                                                                               ((case-lambda
                                                                                  ((g$subst$10585$c1uhW
                                                                                     g$prefix$10586$c1uhW)
                                                                                   (g$map$5063$c1uhW
                                                                                     (case-lambda
                                                                                       ((g$x$10587$c1uhW)
                                                                                        (cons
                                                                                          (string->symbol
                                                                                            (string-append
                                                                                              g$prefix$10586$c1uhW
                                                                                              (symbol->string
                                                                                                (car g$x$10587$c1uhW))))
                                                                                          (cdr g$x$10587$c1uhW))))
                                                                                     g$subst$10585$c1uhW)))
                                                                                (g$get-import$10520$c1uhW
                                                                                  g$isp$10583$c1uhW)
                                                                                (symbol->string
                                                                                  (g$syntax->datum$8097$c1uhW
                                                                                    g$p$10584$c1uhW)))))
                                                                            g$ls/false$10578$c1uhW)
                                                                          ((case-lambda
                                                                             ((g$t$10588$c1uhW)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10589$c1uhW)
                                                                                  (if (if g$ls/false$10589$c1uhW
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$library$10590$c1uhW
                                                                                                 g$spec*$10591$c1uhW)
                                                                                               (eq? (g$syntax->datum$8097$c1uhW
                                                                                                      g$library$10590$c1uhW)
                                                                                                    'library)))
                                                                                            g$ls/false$10589$c1uhW))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$library$10592$c1uhW
                                                                                           g$spec*$10593$c1uhW)
                                                                                         (g$import-library$10519$c1uhW
                                                                                           g$spec*$10593$c1uhW)))
                                                                                      g$ls/false$10589$c1uhW)
                                                                                    ((case-lambda
                                                                                       ((g$t$10594$c1uhW)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10595$c1uhW)
                                                                                            (if (if g$ls/false$10595$c1uhW
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$for$10596$c1uhW
                                                                                                           g$isp$10597$c1uhW
                                                                                                           g$rest$10598$c1uhW)
                                                                                                         (eq? (g$syntax->datum$8097$c1uhW
                                                                                                                g$for$10596$c1uhW)
                                                                                                              'for)))
                                                                                                      g$ls/false$10595$c1uhW))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$for$10599$c1uhW
                                                                                                     g$isp$10600$c1uhW
                                                                                                     g$rest$10601$c1uhW)
                                                                                                   (g$get-import$10520$c1uhW
                                                                                                     g$isp$10600$c1uhW)))
                                                                                                g$ls/false$10595$c1uhW)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10602$c1uhW)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10603$c1uhW)
                                                                                                      (if g$ls/false$10603$c1uhW
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$spec$10604$c1uhW)
                                                                                                             (g$syntax-violation$8094$c1uhW
                                                                                                               'import
                                                                                                               '"invalid import spec"
                                                                                                               g$spec$10604$c1uhW)))
                                                                                                          g$ls/false$10603$c1uhW)
                                                                                                        (g$syntax-violation$8094$c1uhW
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$10602$c1uhW))))
                                                                                                   (g$syntax-dispatch$7982$c1uhW
                                                                                                     g$t$10602$c1uhW
                                                                                                     'any))))
                                                                                               g$t$10594$c1uhW))))
                                                                                         (g$syntax-dispatch$7982$c1uhW
                                                                                           g$t$10594$c1uhW
                                                                                           '(any any
                                                                                                 .
                                                                                                 any)))))
                                                                                     g$t$10588$c1uhW))))
                                                                               (g$syntax-dispatch$7982$c1uhW
                                                                                 g$t$10588$c1uhW
                                                                                 '(any each-any)))))
                                                                           g$t$10577$c1uhW))))
                                                                     (g$syntax-dispatch$7982$c1uhW
                                                                       g$t$10577$c1uhW
                                                                       '(any any
                                                                             any)))))
                                                                 g$t$10565$c1uhW))))
                                                           (g$syntax-dispatch$7982$c1uhW
                                                             g$t$10565$c1uhW
                                                             '(any any
                                                                   .
                                                                   each-any)))))
                                                       g$t$10556$c1uhW))))
                                                 (g$syntax-dispatch$7982$c1uhW
                                                   g$t$10556$c1uhW
                                                   '(any any . each-any)))))
                                             g$t$10541$c1uhW))))
                                       (g$syntax-dispatch$7982$c1uhW
                                         g$t$10541$c1uhW
                                         '(any any . #(each (any any)))))))
                                   g$t$10535$c1uhW))))
                             (g$syntax-dispatch$7982$c1uhW
                               g$t$10535$c1uhW
                               '(any . each-any)))))
                         g$spec$10534$c1uhW))))
                   (g$add-imports!$10521$c1uhW
                     (case-lambda
                       ((g$imp$10526$c1uhW g$h$10527$c1uhW)
                        ((case-lambda
                           ((g$subst$10528$c1uhW)
                            (g$for-each$5064$c1uhW
                              (case-lambda
                                ((g$x$10529$c1uhW)
                                 ((case-lambda
                                    ((g$name$10530$c1uhW g$label$10531$c1uhW)
                                     ((case-lambda
                                        ((g$t$10532$c1uhW)
                                         (if g$t$10532$c1uhW
                                           ((case-lambda
                                              ((g$l$10533$c1uhW)
                                               (if (not (eq? g$l$10533$c1uhW
                                                             g$label$10531$c1uhW))
                                                 (g$dup-error$10512$c1uhW
                                                   g$name$10530$c1uhW)
                                                 (void))))
                                            g$t$10532$c1uhW)
                                           (g$hashtable-set!$5542$c1uhW
                                             g$h$10527$c1uhW
                                             g$name$10530$c1uhW
                                             g$label$10531$c1uhW))))
                                      (g$hashtable-ref$5541$c1uhW
                                        g$h$10527$c1uhW
                                        g$name$10530$c1uhW
                                        '#f))))
                                  (car g$x$10529$c1uhW)
                                  (cdr g$x$10529$c1uhW))))
                              g$subst$10528$c1uhW)))
                         (g$get-import$10520$c1uhW g$imp$10526$c1uhW))))))
           (case-lambda
             ((g$imp*$10522$c1uhW)
              ((letrec ((g$f$10523$c1uhW
                          (case-lambda
                            ((g$imp*$10524$c1uhW g$h$10525$c1uhW)
                             (if (null? g$imp*$10524$c1uhW)
                               (hashtable-entries g$h$10525$c1uhW)
                               (begin
                                 (g$add-imports!$10521$c1uhW
                                   (car g$imp*$10524$c1uhW)
                                   g$h$10525$c1uhW)
                                 (g$f$10523$c1uhW
                                   (cdr g$imp*$10524$c1uhW)
                                   g$h$10525$c1uhW)))))))
                 g$f$10523$c1uhW)
               g$imp*$10522$c1uhW
               (g$make-eq-hashtable$5538$c1uhW)))))))))
   (g$make-top-rib$8032$c1uhW
     g$make-top-rib$11535$c1uhW
     (case-lambda
       ((g$names$10773$c1uhW g$labels$10774$c1uhW)
        ((case-lambda
           ((g$rib$10775$c1uhW)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10776$c1uhW g$label$10777$c1uhW)
                   (begin
                     (if (not (symbol? g$name$10776$c1uhW))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10776$c1uhW)
                       (void))
                     (g$extend-rib/nc!$7668$c1uhW
                       g$rib$10775$c1uhW
                       (g$make-stx$7677$c1uhW
                         g$name$10776$c1uhW
                         g$top-mark*$7641$c1uhW
                         '()
                         '())
                       g$label$10777$c1uhW))))
                g$names$10773$c1uhW
                g$labels$10774$c1uhW)
              g$rib$10775$c1uhW)))
         (g$make-cache-rib$7665$c1uhW)))))
   (g$make-collector$8033$c1uhW
     g$make-collector$11536$c1uhW
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10778$c1uhW)
            (case-lambda
              (() g$ls$10778$c1uhW)
              ((g$x$10779$c1uhW)
               (set! g$ls$10778$c1uhW
                 (g$set-cons$7638$c1uhW g$x$10779$c1uhW g$ls$10778$c1uhW))))))
         '()))))
   (g$inv-collector$8034$c1uhW
     g$inv-collector$11537$c1uhW
     (g$make-parameter$6976$c1uhW
       (case-lambda
         (g$args$10780$c1uhW
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10781$c1uhW)
          (begin
            (if (not (procedure? g$x$10781$c1uhW))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10781$c1uhW)
              (void))
            g$x$10781$c1uhW)))))
   (g$vis-collector$8035$c1uhW
     g$vis-collector$11538$c1uhW
     (g$make-parameter$6976$c1uhW
       (case-lambda
         (g$args$10782$c1uhW
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10783$c1uhW)
          (begin
            (if (not (procedure? g$x$10783$c1uhW))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10783$c1uhW)
              (void))
            g$x$10783$c1uhW)))))
   (g$imp-collector$8036$c1uhW
     g$imp-collector$11539$c1uhW
     (g$make-parameter$6976$c1uhW
       (case-lambda
         (g$args$10784$c1uhW
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10785$c1uhW)
          (begin
            (if (not (procedure? g$x$10785$c1uhW))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10785$c1uhW)
              (void))
            g$x$10785$c1uhW)))))
   (g$chi-library-internal$8037$c1uhW
     g$chi-library-internal$11540$c1uhW
     (case-lambda
       ((g$e*$10786$c1uhW g$rib$10787$c1uhW g$mix?$10788$c1uhW)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8026$c1uhW
               g$e*$10786$c1uhW
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10787$c1uhW
               g$mix?$10788$c1uhW
               '#t)))
          (case-lambda
            ((g$e*$10797$c1uhW
               g$r$10798$c1uhW
               g$mr$10799$c1uhW
               g$lex*$10800$c1uhW
               g$rhs*$10801$c1uhW
               g$mod**$10802$c1uhW
               g$_kwd*$10803$c1uhW
               g$exp*$10804$c1uhW)
             ((case-lambda
                ((g$exp*$10805$c1uhW
                   g$_kwd*$10806$c1uhW
                   g$mod**$10807$c1uhW
                   g$rhs*$10808$c1uhW
                   g$lex*$10809$c1uhW
                   g$mr$10810$c1uhW
                   g$r$10811$c1uhW
                   g$e*$10812$c1uhW)
                 (values
                   (append
                     (apply append (reverse g$mod**$10807$c1uhW))
                     g$e*$10812$c1uhW)
                   g$r$10811$c1uhW
                   g$mr$10810$c1uhW
                   (reverse g$lex*$10809$c1uhW)
                   (reverse g$rhs*$10808$c1uhW)
                   g$exp*$10805$c1uhW)))
              g$exp*$10804$c1uhW
              g$_kwd*$10803$c1uhW
              g$mod**$10802$c1uhW
              g$rhs*$10801$c1uhW
              g$lex*$10800$c1uhW
              g$mr$10799$c1uhW
              g$r$10798$c1uhW
              g$e*$10797$c1uhW)))))))
   (g$chi-interaction-expr$8038$c1uhW
     g$chi-interaction-expr$11541$c1uhW
     (case-lambda
       ((g$e$10813$c1uhW g$rib$10814$c1uhW g$r$10815$c1uhW)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8026$c1uhW
               (list g$e$10813$c1uhW)
               g$r$10815$c1uhW
               g$r$10815$c1uhW
               '()
               '()
               '()
               '()
               '()
               g$rib$10814$c1uhW
               '#t
               '#f)))
          (case-lambda
            ((g$e*$10824$c1uhW
               g$r$10825$c1uhW
               g$mr$10826$c1uhW
               g$lex*$10827$c1uhW
               g$rhs*$10828$c1uhW
               g$mod**$10829$c1uhW
               g$_kwd*$10830$c1uhW
               g$_exp*$10831$c1uhW)
             ((case-lambda
                ((g$_exp*$10832$c1uhW
                   g$_kwd*$10833$c1uhW
                   g$mod**$10834$c1uhW
                   g$rhs*$10835$c1uhW
                   g$lex*$10836$c1uhW
                   g$mr$10837$c1uhW
                   g$r$10838$c1uhW
                   g$e*$10839$c1uhW)
                 ((case-lambda
                    ((g$e*$10840$c1uhW)
                     ((case-lambda
                        ((g$e$10841$c1uhW)
                         (values g$e$10841$c1uhW g$r$10838$c1uhW)))
                      (if (null? g$e*$10840$c1uhW)
                        (g$build-void$7634$c1uhW)
                        (if (null? (cdr g$e*$10840$c1uhW))
                          (car g$e*$10840$c1uhW)
                          (g$build-sequence$7633$c1uhW
                            '#f
                            g$e*$10840$c1uhW))))))
                  (g$expand-interaction-rhs*/init*$8007$c1uhW
                    (reverse g$lex*$10836$c1uhW)
                    (reverse g$rhs*$10835$c1uhW)
                    (append
                      (apply append (reverse g$mod**$10834$c1uhW))
                      g$e*$10839$c1uhW)
                    g$r$10838$c1uhW
                    g$mr$10837$c1uhW))))
              g$_exp*$10831$c1uhW
              g$_kwd*$10830$c1uhW
              g$mod**$10829$c1uhW
              g$rhs*$10828$c1uhW
              g$lex*$10827$c1uhW
              g$mr$10826$c1uhW
              g$r$10825$c1uhW
              g$e*$10824$c1uhW)))))))
   (g$library-body-expander$8039$c1uhW
     g$library-body-expander$11542$c1uhW
     (case-lambda
       ((g$name$10842$c1uhW
          g$main-exp*$10843$c1uhW
          g$imp*$10844$c1uhW
          g$b*$10845$c1uhW
          g$mix?$10846$c1uhW)
        (letrec* ((g$itc$10847$c1uhW (g$make-collector$8033$c1uhW)))
          ((case-lambda
             ((g$imp-collector$10852$c1uhW
                g$top-level-context$10853$c1uhW
                g$imp-collector$10854$c1uhW
                g$top-level-context$10855$c1uhW)
              ((case-lambda
                 ((g$swap$10856$c1uhW)
                  (dynamic-wind
                    g$swap$10856$c1uhW
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$8031$c1uhW
                              g$imp*$10844$c1uhW)))
                         (case-lambda
                           ((g$subst-names$10859$c1uhW
                              g$subst-labels$10860$c1uhW)
                            ((case-lambda
                               ((g$subst-labels$10861$c1uhW
                                  g$subst-names$10862$c1uhW)
                                ((case-lambda
                                   ((g$rib$10863$c1uhW)
                                    (letrec* ((g$wrap$10864$c1uhW
                                                (case-lambda
                                                  ((g$x$10926$c1uhW)
                                                   (g$make-stx$7677$c1uhW
                                                     g$x$10926$c1uhW
                                                     g$top-mark*$7641$c1uhW
                                                     (list g$rib$10863$c1uhW)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$10865$c1uhW
                                            g$main-exp*$10866$c1uhW
                                            g$rtc$10867$c1uhW
                                            g$vtc$10868$c1uhW)
                                          ((case-lambda
                                             ((g$inv-collector$10873$c1uhW
                                                g$vis-collector$10874$c1uhW
                                                g$inv-collector$10875$c1uhW
                                                g$vis-collector$10876$c1uhW)
                                              ((case-lambda
                                                 ((g$swap$10877$c1uhW)
                                                  (dynamic-wind
                                                    g$swap$10877$c1uhW
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$8037$c1uhW
                                                              g$b*$10865$c1uhW
                                                              g$rib$10863$c1uhW
                                                              g$mix?$10846$c1uhW)))
                                                         (case-lambda
                                                           ((g$init*$10884$c1uhW
                                                              g$r$10885$c1uhW
                                                              g$mr$10886$c1uhW
                                                              g$lex*$10887$c1uhW
                                                              g$rhs*$10888$c1uhW
                                                              g$internal-exp*$10889$c1uhW)
                                                            ((case-lambda
                                                               ((g$internal-exp*$10890$c1uhW
                                                                  g$rhs*$10891$c1uhW
                                                                  g$lex*$10892$c1uhW
                                                                  g$mr$10893$c1uhW
                                                                  g$r$10894$c1uhW
                                                                  g$init*$10895$c1uhW)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$8028$c1uhW
                                                                       (append
                                                                         g$main-exp*$10866$c1uhW
                                                                         g$internal-exp*$10890$c1uhW))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$10898$c1uhW
                                                                       g$exp-id*$10899$c1uhW)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$10900$c1uhW
                                                                           g$exp-name*$10901$c1uhW)
                                                                         (begin
                                                                           (g$seal-rib!$7670$c1uhW
                                                                             g$rib$10863$c1uhW)
                                                                           ((case-lambda
                                                                              ((g$init*$10902$c1uhW)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$10903$c1uhW)
                                                                                   (begin
                                                                                     (g$unseal-rib!$7671$c1uhW
                                                                                       g$rib$10863$c1uhW)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$10904$c1uhW
                                                                                           g$export-subst$10905$c1uhW)
                                                                                         (letrec* ((g$errstr$10906$c1uhW
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$8083$c1uhW
                                                                                                  g$lex*$10892$c1uhW
                                                                                                  g$loc*$10904$c1uhW
                                                                                                  g$r$10894$c1uhW)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$10910$c1uhW
                                                                                                  g$global*$10911$c1uhW
                                                                                                  g$macro*$10912$c1uhW)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$10913$c1uhW
                                                                                                      g$global*$10914$c1uhW
                                                                                                      g$export-env$10915$c1uhW)
                                                                                                    (begin
                                                                                                      (g$for-each$5064$c1uhW
                                                                                                        (case-lambda
                                                                                                          ((g$s$10916$c1uhW)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$10917$c1uhW
                                                                                                                 g$label$10918$c1uhW)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$10919$c1uhW)
                                                                                                                   (if g$p$10919$c1uhW
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$10920$c1uhW)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$10921$c1uhW)
                                                                                                                             (if (eq? g$type$10921$c1uhW
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$8094$c1uhW
                                                                                                                                 'export
                                                                                                                                 g$errstr$10906$c1uhW
                                                                                                                                 g$name$10917$c1uhW)
                                                                                                                               (void))))
                                                                                                                          (car g$b$10920$c1uhW))))
                                                                                                                      (cdr g$p$10919$c1uhW))
                                                                                                                     (void))))
                                                                                                                (g$assq$5051$c1uhW
                                                                                                                  g$label$10918$c1uhW
                                                                                                                  g$export-env$10915$c1uhW))))
                                                                                                            (car g$s$10916$c1uhW)
                                                                                                            (cdr g$s$10916$c1uhW))))
                                                                                                        g$export-subst$10905$c1uhW)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$10922$c1uhW
                                                                                                            g$invoke-definitions$10923$c1uhW)
                                                                                                          (values
                                                                                                            (g$itc$10847$c1uhW)
                                                                                                            (g$rtc$10867$c1uhW)
                                                                                                            (g$vtc$10868$c1uhW)
                                                                                                            (g$build-sequence$7633$c1uhW
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$10923$c1uhW
                                                                                                                (list
                                                                                                                  g$invoke-body$10922$c1uhW)))
                                                                                                            g$macro*$10913$c1uhW
                                                                                                            g$export-subst$10905$c1uhW
                                                                                                            g$export-env$10915$c1uhW)))
                                                                                                       (g$build-library-letrec*$7637$c1uhW
                                                                                                         '#f
                                                                                                         g$name$10842$c1uhW
                                                                                                         g$lex*$10892$c1uhW
                                                                                                         g$loc*$10904$c1uhW
                                                                                                         g$rhs*$10903$c1uhW
                                                                                                         (if (null?
                                                                                                               g$init*$10902$c1uhW)
                                                                                                           (g$build-void$7634$c1uhW)
                                                                                                           (g$build-sequence$7633$c1uhW
                                                                                                             '#f
                                                                                                             g$init*$10902$c1uhW)))
                                                                                                       (g$map$5063$c1uhW
                                                                                                         g$build-global-define$7629$c1uhW
                                                                                                         (g$map$5063$c1uhW
                                                                                                           cdr
                                                                                                           g$global*$10914$c1uhW))))))
                                                                                                 g$macro*$10912$c1uhW
                                                                                                 g$global*$10911$c1uhW
                                                                                                 g$export-env$10910$c1uhW)))))))
                                                                                      (g$map$5063$c1uhW
                                                                                        g$gen-global$7644$c1uhW
                                                                                        g$lex*$10892$c1uhW)
                                                                                      (g$make-export-subst$8082$c1uhW
                                                                                        g$exp-name*$10901$c1uhW
                                                                                        g$exp-id*$10900$c1uhW)))))
                                                                                (g$chi-rhs*$8008$c1uhW
                                                                                  g$rhs*$10891$c1uhW
                                                                                  g$r$10894$c1uhW
                                                                                  g$mr$10893$c1uhW))))
                                                                            (g$chi-expr*$7998$c1uhW
                                                                              g$init*$10895$c1uhW
                                                                              g$r$10894$c1uhW
                                                                              g$mr$10893$c1uhW)))))
                                                                      g$exp-id*$10899$c1uhW
                                                                      g$exp-name*$10898$c1uhW))))))
                                                             g$internal-exp*$10889$c1uhW
                                                             g$rhs*$10888$c1uhW
                                                             g$lex*$10887$c1uhW
                                                             g$mr$10886$c1uhW
                                                             g$r$10885$c1uhW
                                                             g$init*$10884$c1uhW))))))
                                                    g$swap$10877$c1uhW)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$10924$c1uhW)
                                                        (begin
                                                          (g$inv-collector$10873$c1uhW
                                                            g$inv-collector$10875$c1uhW)
                                                          (set! g$inv-collector$10875$c1uhW
                                                            g$t$10924$c1uhW))))
                                                     (g$inv-collector$10873$c1uhW))
                                                    ((case-lambda
                                                       ((g$t$10925$c1uhW)
                                                        (begin
                                                          (g$vis-collector$10874$c1uhW
                                                            g$vis-collector$10876$c1uhW)
                                                          (set! g$vis-collector$10876$c1uhW
                                                            g$t$10925$c1uhW))))
                                                     (g$vis-collector$10874$c1uhW))))))))
                                           g$inv-collector$8034$c1uhW
                                           g$vis-collector$8035$c1uhW
                                           g$rtc$10867$c1uhW
                                           g$vtc$10868$c1uhW)))
                                       (g$map$5063$c1uhW
                                         g$wrap$10864$c1uhW
                                         g$b*$10845$c1uhW)
                                       (g$map$5063$c1uhW
                                         g$wrap$10864$c1uhW
                                         g$main-exp*$10843$c1uhW)
                                       (g$make-collector$8033$c1uhW)
                                       (g$make-collector$8033$c1uhW)))))
                                 (g$make-top-rib$8032$c1uhW
                                   g$subst-names$10862$c1uhW
                                   g$subst-labels$10861$c1uhW))))
                             g$subst-labels$10860$c1uhW
                             g$subst-names$10859$c1uhW))))))
                    g$swap$10856$c1uhW)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10927$c1uhW)
                        (begin
                          (g$imp-collector$10852$c1uhW
                            g$imp-collector$10854$c1uhW)
                          (set! g$imp-collector$10854$c1uhW g$t$10927$c1uhW))))
                     (g$imp-collector$10852$c1uhW))
                    ((case-lambda
                       ((g$t$10928$c1uhW)
                        (begin
                          (g$top-level-context$10853$c1uhW
                            g$top-level-context$10855$c1uhW)
                          (set! g$top-level-context$10855$c1uhW
                            g$t$10928$c1uhW))))
                     (g$top-level-context$10853$c1uhW))))))))
           g$imp-collector$8036$c1uhW
           g$top-level-context$8102$c1uhW
           g$itc$10847$c1uhW
           '#f)))))
   (g$core-library-expander$8040$c1uhW
     g$core-library-expander$11543$c1uhW
     (case-lambda
       ((g$e$10929$c1uhW g$verify-name$10930$c1uhW)
        (call-with-values
          (case-lambda (() (g$parse-library$8030$c1uhW g$e$10929$c1uhW)))
          (case-lambda
            ((g$name*$10935$c1uhW
               g$exp*$10936$c1uhW
               g$imp*$10937$c1uhW
               g$b*$10938$c1uhW)
             ((case-lambda
                ((g$b*$10939$c1uhW
                   g$imp*$10940$c1uhW
                   g$exp*$10941$c1uhW
                   g$name*$10942$c1uhW)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$8029$c1uhW g$name*$10942$c1uhW)))
                   (case-lambda
                     ((g$name$10945$c1uhW g$ver$10946$c1uhW)
                      ((case-lambda
                         ((g$ver$10947$c1uhW g$name$10948$c1uhW)
                          (begin
                            (g$verify-name$10930$c1uhW g$name$10948$c1uhW)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$8039$c1uhW
                                   g$name$10948$c1uhW
                                   g$exp*$10941$c1uhW
                                   g$imp*$10940$c1uhW
                                   g$b*$10939$c1uhW
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10956$c1uhW
                                   g$invoke-req*$10957$c1uhW
                                   g$visit-req*$10958$c1uhW
                                   g$invoke-code$10959$c1uhW
                                   g$visit-code$10960$c1uhW
                                   g$export-subst$10961$c1uhW
                                   g$export-env$10962$c1uhW)
                                 ((case-lambda
                                    ((g$export-env$10963$c1uhW
                                       g$export-subst$10964$c1uhW
                                       g$visit-code$10965$c1uhW
                                       g$invoke-code$10966$c1uhW
                                       g$visit-req*$10967$c1uhW
                                       g$invoke-req*$10968$c1uhW
                                       g$imp*$10969$c1uhW)
                                     (values
                                       g$name$10948$c1uhW
                                       g$ver$10947$c1uhW
                                       g$imp*$10969$c1uhW
                                       g$invoke-req*$10968$c1uhW
                                       g$visit-req*$10967$c1uhW
                                       g$invoke-code$10966$c1uhW
                                       g$visit-code$10965$c1uhW
                                       g$export-subst$10964$c1uhW
                                       g$export-env$10963$c1uhW)))
                                  g$export-env$10962$c1uhW
                                  g$export-subst$10961$c1uhW
                                  g$visit-code$10960$c1uhW
                                  g$invoke-code$10959$c1uhW
                                  g$visit-req*$10958$c1uhW
                                  g$invoke-req*$10957$c1uhW
                                  g$imp*$10956$c1uhW)))))))
                       g$ver$10946$c1uhW
                       g$name$10945$c1uhW))))))
              g$b*$10938$c1uhW
              g$imp*$10937$c1uhW
              g$exp*$10936$c1uhW
              g$name*$10935$c1uhW)))))))
   (g$parse-top-level-program$8041$c1uhW
     g$parse-top-level-program$11544$c1uhW
     (case-lambda
       ((g$e*$10970$c1uhW)
        ((case-lambda
           ((g$t$10971$c1uhW)
            ((case-lambda
               ((g$ls/false$10972$c1uhW)
                (if (if g$ls/false$10972$c1uhW
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10973$c1uhW
                               g$imp*$10974$c1uhW
                               g$b*$10975$c1uhW)
                             (eq? (g$syntax->datum$8097$c1uhW
                                    g$import$10973$c1uhW)
                                  'import)))
                          g$ls/false$10972$c1uhW))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10976$c1uhW
                         g$imp*$10977$c1uhW
                         g$b*$10978$c1uhW)
                       (values g$imp*$10977$c1uhW g$b*$10978$c1uhW)))
                    g$ls/false$10972$c1uhW)
                  ((case-lambda
                     ((g$t$10979$c1uhW)
                      ((case-lambda
                         ((g$ls/false$10980$c1uhW)
                          (if (if g$ls/false$10980$c1uhW
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10981$c1uhW
                                         g$x$10982$c1uhW
                                         g$y$10983$c1uhW)
                                       (eq? (g$syntax->datum$8097$c1uhW
                                              g$import$10981$c1uhW)
                                            'import)))
                                    g$ls/false$10980$c1uhW))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10984$c1uhW
                                   g$x$10985$c1uhW
                                   g$y$10986$c1uhW)
                                 (g$syntax-violation$8094$c1uhW
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7701$c1uhW g$e*$10970$c1uhW))))
                              g$ls/false$10980$c1uhW)
                            ((case-lambda
                               ((g$t$10987$c1uhW)
                                ((case-lambda
                                   ((g$ls/false$10988$c1uhW)
                                    (if g$ls/false$10988$c1uhW
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10988$c1uhW)
                                      (g$syntax-violation$8094$c1uhW
                                        '#f
                                        '"invalid syntax"
                                        g$t$10987$c1uhW))))
                                 (g$syntax-dispatch$7982$c1uhW
                                   g$t$10987$c1uhW
                                   '_))))
                             g$t$10979$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW
                         g$t$10979$c1uhW
                         '((any . any) . any)))))
                   g$t$10971$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW
               g$t$10971$c1uhW
               '((any . each-any) . each-any)))))
         g$e*$10970$c1uhW))))
   (g$top-level-expander$8042$c1uhW
     g$top-level-expander$11545$c1uhW
     (case-lambda
       ((g$e*$10989$c1uhW)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$8041$c1uhW g$e*$10989$c1uhW)))
          (case-lambda
            ((g$imp*$10992$c1uhW g$b*$10993$c1uhW)
             ((case-lambda
                ((g$b*$10994$c1uhW g$imp*$10995$c1uhW)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$8039$c1uhW
                        '()
                        '()
                        g$imp*$10995$c1uhW
                        g$b*$10994$c1uhW
                        '#t)))
                   (case-lambda
                     ((g$imp*$11003$c1uhW
                        g$invoke-req*$11004$c1uhW
                        g$visit-req*$11005$c1uhW
                        g$invoke-code$11006$c1uhW
                        g$visit-code$11007$c1uhW
                        g$export-subst$11008$c1uhW
                        g$export-env$11009$c1uhW)
                      ((case-lambda
                         ((g$export-env$11010$c1uhW
                            g$export-subst$11011$c1uhW
                            g$visit-code$11012$c1uhW
                            g$invoke-code$11013$c1uhW
                            g$visit-req*$11014$c1uhW
                            g$invoke-req*$11015$c1uhW
                            g$imp*$11016$c1uhW)
                          (values
                            g$invoke-req*$11015$c1uhW
                            g$invoke-code$11013$c1uhW)))
                       g$export-env$11009$c1uhW
                       g$export-subst$11008$c1uhW
                       g$visit-code$11007$c1uhW
                       g$invoke-code$11006$c1uhW
                       g$visit-req*$11005$c1uhW
                       g$invoke-req*$11004$c1uhW
                       g$imp*$11003$c1uhW))))))
              g$b*$10993$c1uhW
              g$imp*$10992$c1uhW)))))))
   (g$9096$8043$c1uhW
     g$9096$11546$c1uhW
     (make-record-type-descriptor
       'env
       '#f
       'g$9099$c1uhW
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$9098$8044$c1uhW g$9098$11547$c1uhW '#f)
   (g$9097$8045$c1uhW
     g$9097$11548$c1uhW
     (make-record-constructor-descriptor
       g$9096$8043$c1uhW
       '#f
       g$9098$8044$c1uhW))
   (g$env?$8046$c1uhW
     g$env?$11549$c1uhW
     (record-predicate g$9096$8043$c1uhW))
   (g$make-env$8047$c1uhW
     g$make-env$11550$c1uhW
     (record-constructor g$9097$8045$c1uhW))
   (g$env-names$8048$c1uhW
     g$env-names$11551$c1uhW
     (record-accessor g$9096$8043$c1uhW '0))
   (g$env-labels$8049$c1uhW
     g$env-labels$11552$c1uhW
     (record-accessor g$9096$8043$c1uhW '1))
   (g$env-itc$8050$c1uhW
     g$env-itc$11553$c1uhW
     (record-accessor g$9096$8043$c1uhW '2))
   (g$set-env-names!$8051$c1uhW
     g$set-env-names!$11554$c1uhW
     (record-mutator g$9096$8043$c1uhW '0))
   (g$set-env-labels!$8052$c1uhW
     g$set-env-labels!$11555$c1uhW
     (record-mutator g$9096$8043$c1uhW '1))
   (g$set-env-itc!$8053$c1uhW
     g$set-env-itc!$11556$c1uhW
     (record-mutator g$9096$8043$c1uhW '2))
   (g$rp$8054$c1uhW
     g$rp$11557$c1uhW
     (make-record-printer
       'env
       (case-lambda
         ((g$x$11017$c1uhW g$p$11018$c1uhW g$wr$11019$c1uhW)
          (display '"#<environment>" g$p$11018$c1uhW)))))
   (g$9115$8055$c1uhW
     g$9115$11558$c1uhW
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$9118$c1uhW
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$9117$8056$c1uhW g$9117$11559$c1uhW '#f)
   (g$9116$8057$c1uhW
     g$9116$11560$c1uhW
     (make-record-constructor-descriptor
       g$9115$8055$c1uhW
       '#f
       g$9117$8056$c1uhW))
   (g$interaction-env?$8058$c1uhW
     g$interaction-env?$11561$c1uhW
     (record-predicate g$9115$8055$c1uhW))
   (g$make-interaction-env$8059$c1uhW
     g$make-interaction-env$11562$c1uhW
     (record-constructor g$9116$8057$c1uhW))
   (g$interaction-env-rib$8060$c1uhW
     g$interaction-env-rib$11563$c1uhW
     (record-accessor g$9115$8055$c1uhW '0))
   (g$interaction-env-r$8061$c1uhW
     g$interaction-env-r$11564$c1uhW
     (record-accessor g$9115$8055$c1uhW '1))
   (g$interaction-env-locs$8062$c1uhW
     g$interaction-env-locs$11565$c1uhW
     (record-accessor g$9115$8055$c1uhW '2))
   (g$set-interaction-env-rib!$8063$c1uhW
     g$set-interaction-env-rib!$11566$c1uhW
     (record-mutator g$9115$8055$c1uhW '0))
   (g$set-interaction-env-r!$8064$c1uhW
     g$set-interaction-env-r!$11567$c1uhW
     (record-mutator g$9115$8055$c1uhW '1))
   (g$set-interaction-env-locs!$8065$c1uhW
     g$set-interaction-env-locs!$11568$c1uhW
     (record-mutator g$9115$8055$c1uhW '2))
   (g$rp$8066$c1uhW
     g$rp$11569$c1uhW
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$11020$c1uhW g$p$11021$c1uhW g$wr$11022$c1uhW)
          (display '"#<environment>" g$p$11021$c1uhW)))))
   (g$interaction-environment-symbols$8067$c1uhW
     g$interaction-environment-symbols$11570$c1uhW
     (case-lambda
       (()
        (g$environment-symbols$8071$c1uhW
          (g$interaction-environment$8101$c1uhW)))))
   (g$environment-bindings$8068$c1uhW
     g$environment-bindings$11571$c1uhW
     (case-lambda
       ((g$e$11023$c1uhW)
        (vector->list
          (vector-map
            (case-lambda
              ((g$name$11024$c1uhW g$label$11025$c1uhW)
               (g$parse-binding$8069$c1uhW
                 (cons
                   g$name$11024$c1uhW
                   (g$imported-label->binding$7513$c1uhW
                     g$label$11025$c1uhW)))))
            (g$env-names$8048$c1uhW g$e$11023$c1uhW)
            (g$env-labels$8049$c1uhW g$e$11023$c1uhW))))))
   (g$parse-binding$8069$c1uhW
     g$parse-binding$11572$c1uhW
     (case-lambda
       ((g$b$11026$c1uhW)
        (cons
          (car g$b$11026$c1uhW)
          ((case-lambda
             ((g$t$11027$c1uhW)
              (if (g$memv$5056$c1uhW g$t$11027$c1uhW '(core-prim global))
                'procedure
                (if (g$memv$5056$c1uhW
                      g$t$11027$c1uhW
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$5056$c1uhW g$t$11027$c1uhW '($core-rtd))
                    'record
                    (if (eq? (car g$b$11026$c1uhW)
                             (g$cadr$5264$c1uhW g$b$11026$c1uhW))
                      'syntax
                      'unknown))))))
           (g$cadr$5264$c1uhW g$b$11026$c1uhW))))))
   (g$environment?$8070$c1uhW
     g$environment?$11573$c1uhW
     (case-lambda
       ((g$x$11028$c1uhW)
        ((case-lambda
           ((g$t$11029$c1uhW)
            (if g$t$11029$c1uhW
              g$t$11029$c1uhW
              (begin '#f (g$interaction-env?$8058$c1uhW g$x$11028$c1uhW)))))
         (g$env?$8046$c1uhW g$x$11028$c1uhW)))))
   (g$environment-symbols$8071$c1uhW
     g$environment-symbols$11574$c1uhW
     (case-lambda
       ((g$x$11030$c1uhW)
        (if (g$env?$8046$c1uhW g$x$11030$c1uhW)
          (vector->list (g$env-names$8048$c1uhW g$x$11030$c1uhW))
          (if (g$interaction-env?$8058$c1uhW g$x$11030$c1uhW)
            (g$map$5063$c1uhW
              values
              (g$rib-sym*$7654$c1uhW
                (g$interaction-env-rib$8060$c1uhW g$x$11030$c1uhW)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$11030$c1uhW))))))
   (g$environment$8072$c1uhW
     g$environment$11575$c1uhW
     (case-lambda
       (g$imp*$11031$c1uhW
        ((case-lambda
           ((g$itc$11032$c1uhW)
            ((case-lambda
               ((g$imp-collector$11035$c1uhW g$imp-collector$11036$c1uhW)
                ((case-lambda
                   ((g$swap$11037$c1uhW)
                    (dynamic-wind
                      g$swap$11037$c1uhW
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$8031$c1uhW
                                g$imp*$11031$c1uhW)))
                           (case-lambda
                             ((g$subst-names$11040$c1uhW
                                g$subst-labels$11041$c1uhW)
                              ((case-lambda
                                 ((g$subst-labels$11042$c1uhW
                                    g$subst-names$11043$c1uhW)
                                  (g$make-env$8047$c1uhW
                                    g$subst-names$11043$c1uhW
                                    g$subst-labels$11042$c1uhW
                                    g$itc$11032$c1uhW)))
                               g$subst-labels$11041$c1uhW
                               g$subst-names$11040$c1uhW))))))
                      g$swap$11037$c1uhW)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$11044$c1uhW)
                        (begin
                          (g$imp-collector$11035$c1uhW
                            g$imp-collector$11036$c1uhW)
                          (set! g$imp-collector$11036$c1uhW g$t$11044$c1uhW))))
                     (g$imp-collector$11035$c1uhW)))))))
             g$imp-collector$8036$c1uhW
             g$itc$11032$c1uhW)))
         (g$make-collector$8033$c1uhW)))))
   (g$null-environment$8073$c1uhW
     g$null-environment$11576$c1uhW
     (case-lambda
       ((g$n$11045$c1uhW)
        (begin
          (if (not (eqv? g$n$11045$c1uhW '5))
            (assertion-violation 'null-environment '"not 5" g$n$11045$c1uhW)
            (void))
          (g$environment$8072$c1uhW '(psyntax null-environment-5))))))
   (g$scheme-report-environment$8074$c1uhW
     g$scheme-report-environment$11577$c1uhW
     (case-lambda
       ((g$n$11046$c1uhW)
        (begin
          (if (not (eqv? g$n$11046$c1uhW '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$11046$c1uhW)
            (void))
          (g$environment$8072$c1uhW '(psyntax scheme-report-environment-5))))))
   (g$expand$8075$c1uhW
     g$expand$11578$c1uhW
     (case-lambda
       ((g$x$11047$c1uhW g$env$11048$c1uhW)
        (if (g$env?$8046$c1uhW g$env$11048$c1uhW)
          ((case-lambda
             ((g$rib$11049$c1uhW)
              ((case-lambda
                 ((g$x$11050$c1uhW
                    g$itc$11051$c1uhW
                    g$rtc$11052$c1uhW
                    g$vtc$11053$c1uhW)
                  ((case-lambda
                     ((g$x$11054$c1uhW)
                      (begin
                        (g$seal-rib!$7670$c1uhW g$rib$11049$c1uhW)
                        (values g$x$11054$c1uhW (g$rtc$11052$c1uhW)))))
                   ((case-lambda
                      ((g$top-level-context$11063$c1uhW
                         g$inv-collector$11064$c1uhW
                         g$vis-collector$11065$c1uhW
                         g$imp-collector$11066$c1uhW
                         g$top-level-context$11067$c1uhW
                         g$inv-collector$11068$c1uhW
                         g$vis-collector$11069$c1uhW
                         g$imp-collector$11070$c1uhW)
                       ((case-lambda
                          ((g$swap$11071$c1uhW)
                           (dynamic-wind
                             g$swap$11071$c1uhW
                             (case-lambda
                               (()
                                (g$chi-expr$8000$c1uhW
                                  g$x$11050$c1uhW
                                  '()
                                  '())))
                             g$swap$11071$c1uhW)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$11072$c1uhW)
                                 (begin
                                   (g$top-level-context$11063$c1uhW
                                     g$top-level-context$11067$c1uhW)
                                   (set! g$top-level-context$11067$c1uhW
                                     g$t$11072$c1uhW))))
                              (g$top-level-context$11063$c1uhW))
                             ((case-lambda
                                ((g$t$11073$c1uhW)
                                 (begin
                                   (g$inv-collector$11064$c1uhW
                                     g$inv-collector$11068$c1uhW)
                                   (set! g$inv-collector$11068$c1uhW
                                     g$t$11073$c1uhW))))
                              (g$inv-collector$11064$c1uhW))
                             ((case-lambda
                                ((g$t$11074$c1uhW)
                                 (begin
                                   (g$vis-collector$11065$c1uhW
                                     g$vis-collector$11069$c1uhW)
                                   (set! g$vis-collector$11069$c1uhW
                                     g$t$11074$c1uhW))))
                              (g$vis-collector$11065$c1uhW))
                             ((case-lambda
                                ((g$t$11075$c1uhW)
                                 (begin
                                   (g$imp-collector$11066$c1uhW
                                     g$imp-collector$11070$c1uhW)
                                   (set! g$imp-collector$11070$c1uhW
                                     g$t$11075$c1uhW))))
                              (g$imp-collector$11066$c1uhW))))))))
                    g$top-level-context$8102$c1uhW
                    g$inv-collector$8034$c1uhW
                    g$vis-collector$8035$c1uhW
                    g$imp-collector$8036$c1uhW
                    '#f
                    g$rtc$11052$c1uhW
                    g$vtc$11053$c1uhW
                    g$itc$11051$c1uhW))))
               (g$make-stx$7677$c1uhW
                 g$x$11047$c1uhW
                 g$top-mark*$7641$c1uhW
                 (list g$rib$11049$c1uhW)
                 '())
               (g$env-itc$8050$c1uhW g$env$11048$c1uhW)
               (g$make-collector$8033$c1uhW)
               (g$make-collector$8033$c1uhW))))
           (g$make-top-rib$8032$c1uhW
             (g$env-names$8048$c1uhW g$env$11048$c1uhW)
             (g$env-labels$8049$c1uhW g$env$11048$c1uhW)))
          (if (g$interaction-env?$8058$c1uhW g$env$11048$c1uhW)
            ((case-lambda
               ((g$rib$11076$c1uhW g$r$11077$c1uhW g$rtc$11078$c1uhW)
                ((case-lambda
                   ((g$x$11079$c1uhW)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$11090$c1uhW
                               g$inv-collector$11091$c1uhW
                               g$vis-collector$11092$c1uhW
                               g$imp-collector$11093$c1uhW
                               g$top-level-context$11094$c1uhW
                               g$inv-collector$11095$c1uhW
                               g$vis-collector$11096$c1uhW
                               g$imp-collector$11097$c1uhW)
                             ((case-lambda
                                ((g$swap$11098$c1uhW)
                                 (dynamic-wind
                                   g$swap$11098$c1uhW
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$8038$c1uhW
                                        g$x$11079$c1uhW
                                        g$rib$11076$c1uhW
                                        g$r$11077$c1uhW)))
                                   g$swap$11098$c1uhW)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$11099$c1uhW)
                                       (begin
                                         (g$top-level-context$11090$c1uhW
                                           g$top-level-context$11094$c1uhW)
                                         (set! g$top-level-context$11094$c1uhW
                                           g$t$11099$c1uhW))))
                                    (g$top-level-context$11090$c1uhW))
                                   ((case-lambda
                                      ((g$t$11100$c1uhW)
                                       (begin
                                         (g$inv-collector$11091$c1uhW
                                           g$inv-collector$11095$c1uhW)
                                         (set! g$inv-collector$11095$c1uhW
                                           g$t$11100$c1uhW))))
                                    (g$inv-collector$11091$c1uhW))
                                   ((case-lambda
                                      ((g$t$11101$c1uhW)
                                       (begin
                                         (g$vis-collector$11092$c1uhW
                                           g$vis-collector$11096$c1uhW)
                                         (set! g$vis-collector$11096$c1uhW
                                           g$t$11101$c1uhW))))
                                    (g$vis-collector$11092$c1uhW))
                                   ((case-lambda
                                      ((g$t$11102$c1uhW)
                                       (begin
                                         (g$imp-collector$11093$c1uhW
                                           g$imp-collector$11097$c1uhW)
                                         (set! g$imp-collector$11097$c1uhW
                                           g$t$11102$c1uhW))))
                                    (g$imp-collector$11093$c1uhW))))))))
                          g$top-level-context$8102$c1uhW
                          g$inv-collector$8034$c1uhW
                          g$vis-collector$8035$c1uhW
                          g$imp-collector$8036$c1uhW
                          g$env$11048$c1uhW
                          g$rtc$11078$c1uhW
                          (g$make-collector$8033$c1uhW)
                          (g$make-collector$8033$c1uhW))))
                      (case-lambda
                        ((g$e$11103$c1uhW g$r^$11104$c1uhW)
                         ((case-lambda
                            ((g$r^$11105$c1uhW g$e$11106$c1uhW)
                             (begin
                               (g$set-interaction-env-r!$8064$c1uhW
                                 g$env$11048$c1uhW
                                 g$r^$11105$c1uhW)
                               (values g$e$11106$c1uhW (g$rtc$11078$c1uhW)))))
                          g$r^$11104$c1uhW
                          g$e$11103$c1uhW))))))
                 (g$make-stx$7677$c1uhW
                   g$x$11047$c1uhW
                   g$top-mark*$7641$c1uhW
                   (list g$rib$11076$c1uhW)
                   '()))))
             (g$interaction-env-rib$8060$c1uhW g$env$11048$c1uhW)
             (g$interaction-env-r$8061$c1uhW g$env$11048$c1uhW)
             (g$make-collector$8033$c1uhW))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$11048$c1uhW))))))
   (g$eval$8076$c1uhW
     g$eval$11579$c1uhW
     (case-lambda
       ((g$x$11107$c1uhW g$env$11108$c1uhW)
        (begin
          (if (not (g$environment?$8070$c1uhW g$env$11108$c1uhW))
            (error 'eval '"not an environment" g$env$11108$c1uhW)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8075$c1uhW g$x$11107$c1uhW g$env$11108$c1uhW)))
            (case-lambda
              ((g$x$11111$c1uhW g$invoke-req*$11112$c1uhW)
               ((case-lambda
                  ((g$invoke-req*$11113$c1uhW g$x$11114$c1uhW)
                   (begin
                     (g$for-each$5064$c1uhW
                       g$invoke-library$7514$c1uhW
                       g$invoke-req*$11113$c1uhW)
                     (eval-core
                       (g$expanded->core$7222$c1uhW g$x$11114$c1uhW)))))
                g$invoke-req*$11112$c1uhW
                g$x$11111$c1uhW))))))))
   (g$expand->core$8077$c1uhW
     g$expand->core$11580$c1uhW
     (case-lambda
       ((g$x$11115$c1uhW g$env$11116$c1uhW)
        (begin
          (if (not (g$environment?$8070$c1uhW g$env$11116$c1uhW))
            (error 'eval '"not an environment" g$env$11116$c1uhW)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8075$c1uhW g$x$11115$c1uhW g$env$11116$c1uhW)))
            (case-lambda
              ((g$x$11119$c1uhW g$invoke-req*$11120$c1uhW)
               ((case-lambda
                  ((g$invoke-req*$11121$c1uhW g$x$11122$c1uhW)
                   (begin
                     (g$for-each$5064$c1uhW
                       g$invoke-library$7514$c1uhW
                       g$invoke-req*$11121$c1uhW)
                     (g$expanded->core$7222$c1uhW g$x$11122$c1uhW))))
                g$invoke-req*$11120$c1uhW
                g$x$11119$c1uhW))))))))
   (g$library-expander$8078$c1uhW
     g$library-expander$11581$c1uhW
     (case-lambda
       ((g$x$11123$c1uhW g$filename$11124$c1uhW g$verify-name$11125$c1uhW)
        (letrec* ((g$build-visit-code$11126$c1uhW
                    (case-lambda
                      ((g$macro*$11169$c1uhW)
                       (if (null? g$macro*$11169$c1uhW)
                         (g$build-void$7634$c1uhW)
                         (g$build-sequence$7633$c1uhW
                           '#f
                           (g$map$5063$c1uhW
                             (case-lambda
                               ((g$x$11170$c1uhW)
                                ((case-lambda
                                   ((g$loc$11171$c1uhW g$src$11172$c1uhW)
                                    (list
                                      'set!
                                      g$loc$11171$c1uhW
                                      g$src$11172$c1uhW)))
                                 (car g$x$11170$c1uhW)
                                 (g$cddr$5266$c1uhW g$x$11170$c1uhW))))
                             g$macro*$11169$c1uhW))))))
                  (g$visit!$11127$c1uhW
                    (case-lambda
                      ((g$macro*$11165$c1uhW)
                       (g$for-each$5064$c1uhW
                         (case-lambda
                           ((g$x$11166$c1uhW)
                            ((case-lambda
                               ((g$loc$11167$c1uhW g$proc$11168$c1uhW)
                                (set-symbol-value!
                                  g$loc$11167$c1uhW
                                  g$proc$11168$c1uhW)))
                             (car g$x$11166$c1uhW)
                             (g$cadr$5264$c1uhW g$x$11166$c1uhW))))
                         g$macro*$11165$c1uhW)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$8040$c1uhW
                 g$x$11123$c1uhW
                 g$verify-name$11125$c1uhW)))
            (case-lambda
              ((g$name$11137$c1uhW
                 g$ver$11138$c1uhW
                 g$imp*$11139$c1uhW
                 g$inv*$11140$c1uhW
                 g$vis*$11141$c1uhW
                 g$invoke-code$11142$c1uhW
                 g$macro*$11143$c1uhW
                 g$export-subst$11144$c1uhW
                 g$export-env$11145$c1uhW)
               ((case-lambda
                  ((g$export-env$11146$c1uhW
                     g$export-subst$11147$c1uhW
                     g$macro*$11148$c1uhW
                     g$invoke-code$11149$c1uhW
                     g$vis*$11150$c1uhW
                     g$inv*$11151$c1uhW
                     g$imp*$11152$c1uhW
                     g$ver$11153$c1uhW
                     g$name$11154$c1uhW)
                   ((case-lambda
                      ((g$id$11155$c1uhW
                         g$name$11156$c1uhW
                         g$ver$11157$c1uhW
                         g$imp*$11158$c1uhW
                         g$vis*$11159$c1uhW
                         g$inv*$11160$c1uhW
                         g$visit-proc$11161$c1uhW
                         g$invoke-proc$11162$c1uhW
                         g$visit-code$11163$c1uhW
                         g$invoke-code$11164$c1uhW)
                       (begin
                         (g$install-library$7512$c1uhW
                           g$id$11155$c1uhW
                           g$name$11156$c1uhW
                           g$ver$11157$c1uhW
                           g$imp*$11158$c1uhW
                           g$vis*$11159$c1uhW
                           g$inv*$11160$c1uhW
                           g$export-subst$11147$c1uhW
                           g$export-env$11146$c1uhW
                           g$visit-proc$11161$c1uhW
                           g$invoke-proc$11162$c1uhW
                           g$visit-code$11163$c1uhW
                           g$invoke-code$11164$c1uhW
                           '#t
                           g$filename$11124$c1uhW)
                         (values
                           g$id$11155$c1uhW
                           g$name$11156$c1uhW
                           g$ver$11157$c1uhW
                           g$imp*$11158$c1uhW
                           g$vis*$11159$c1uhW
                           g$inv*$11160$c1uhW
                           g$invoke-code$11164$c1uhW
                           g$visit-code$11163$c1uhW
                           g$export-subst$11147$c1uhW
                           g$export-env$11146$c1uhW))))
                    (gensym)
                    g$name$11154$c1uhW
                    g$ver$11153$c1uhW
                    (g$map$5063$c1uhW
                      g$library-spec$7518$c1uhW
                      g$imp*$11152$c1uhW)
                    (g$map$5063$c1uhW
                      g$library-spec$7518$c1uhW
                      g$vis*$11150$c1uhW)
                    (g$map$5063$c1uhW
                      g$library-spec$7518$c1uhW
                      g$inv*$11151$c1uhW)
                    (case-lambda
                      (() (g$visit!$11127$c1uhW g$macro*$11148$c1uhW)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$7222$c1uhW
                           g$invoke-code$11149$c1uhW))))
                    (g$build-visit-code$11126$c1uhW g$macro*$11148$c1uhW)
                    g$invoke-code$11149$c1uhW)))
                g$export-env$11145$c1uhW
                g$export-subst$11144$c1uhW
                g$macro*$11143$c1uhW
                g$invoke-code$11142$c1uhW
                g$vis*$11141$c1uhW
                g$inv*$11140$c1uhW
                g$imp*$11139$c1uhW
                g$ver$11138$c1uhW
                g$name$11137$c1uhW))))))
       ((g$x$11173$c1uhW g$filename$11174$c1uhW)
        (g$library-expander$8078$c1uhW
          g$x$11173$c1uhW
          g$filename$11174$c1uhW
          (case-lambda ((g$x$11175$c1uhW) (values)))))
       ((g$x$11176$c1uhW)
        (g$library-expander$8078$c1uhW
          g$x$11176$c1uhW
          '#f
          (case-lambda ((g$x$11177$c1uhW) (values)))))))
   (g$boot-library-expand$8079$c1uhW
     g$boot-library-expand$11582$c1uhW
     (case-lambda
       ((g$x$11178$c1uhW)
        (call-with-values
          (case-lambda (() (g$library-expander$8078$c1uhW g$x$11178$c1uhW)))
          (case-lambda
            ((g$id$11189$c1uhW
               g$name$11190$c1uhW
               g$ver$11191$c1uhW
               g$imp*$11192$c1uhW
               g$vis*$11193$c1uhW
               g$inv*$11194$c1uhW
               g$invoke-code$11195$c1uhW
               g$visit-code$11196$c1uhW
               g$export-subst$11197$c1uhW
               g$export-env$11198$c1uhW)
             ((case-lambda
                ((g$export-env$11199$c1uhW
                   g$export-subst$11200$c1uhW
                   g$visit-code$11201$c1uhW
                   g$invoke-code$11202$c1uhW
                   g$inv*$11203$c1uhW
                   g$vis*$11204$c1uhW
                   g$imp*$11205$c1uhW
                   g$ver$11206$c1uhW
                   g$name$11207$c1uhW
                   g$id$11208$c1uhW)
                 (values
                   g$name$11207$c1uhW
                   g$invoke-code$11202$c1uhW
                   g$export-subst$11200$c1uhW
                   g$export-env$11199$c1uhW)))
              g$export-env$11198$c1uhW
              g$export-subst$11197$c1uhW
              g$visit-code$11196$c1uhW
              g$invoke-code$11195$c1uhW
              g$inv*$11194$c1uhW
              g$vis*$11193$c1uhW
              g$imp*$11192$c1uhW
              g$ver$11191$c1uhW
              g$name$11190$c1uhW
              g$id$11189$c1uhW)))))))
   (g$rev-map-append$8080$c1uhW
     g$rev-map-append$11583$c1uhW
     (case-lambda
       ((g$f$11209$c1uhW g$ls$11210$c1uhW g$ac$11211$c1uhW)
        (if (null? g$ls$11210$c1uhW)
          g$ac$11211$c1uhW
          (g$rev-map-append$8080$c1uhW
            g$f$11209$c1uhW
            (cdr g$ls$11210$c1uhW)
            (cons
              (g$f$11209$c1uhW (car g$ls$11210$c1uhW))
              g$ac$11211$c1uhW))))))
   (g$build-exports$8081$c1uhW
     g$build-exports$11584$c1uhW
     (case-lambda
       ((g$lex*+loc*$11212$c1uhW g$init*$11213$c1uhW)
        (g$build-sequence$7633$c1uhW
          '#f
          (cons
            (g$build-void$7634$c1uhW)
            (g$rev-map-append$8080$c1uhW
              (case-lambda
                ((g$x$11214$c1uhW)
                 (list 'set! (cdr g$x$11214$c1uhW) (car g$x$11214$c1uhW))))
              g$lex*+loc*$11212$c1uhW
              g$init*$11213$c1uhW))))))
   (g$make-export-subst$8082$c1uhW
     g$make-export-subst$11585$c1uhW
     (case-lambda
       ((g$name*$11215$c1uhW g$id*$11216$c1uhW)
        (g$map$5063$c1uhW
          (case-lambda
            ((g$name$11217$c1uhW g$id$11218$c1uhW)
             ((case-lambda
                ((g$label$11219$c1uhW)
                 (begin
                   (if (not g$label$11219$c1uhW)
                     (g$syntax-violation$8094$c1uhW
                       '#f
                       '"cannot export unbound identifier"
                       g$id$11218$c1uhW)
                     (void))
                   (cons g$name$11217$c1uhW g$label$11219$c1uhW))))
              (g$id->label$7717$c1uhW g$id$11218$c1uhW))))
          g$name*$11215$c1uhW
          g$id*$11216$c1uhW))))
   (g$make-export-env/macros$8083$c1uhW
     g$make-export-env/macros$11586$c1uhW
     (case-lambda
       ((g$lex*$11220$c1uhW g$loc*$11221$c1uhW g$r$11222$c1uhW)
        (letrec* ((g$lookup$11223$c1uhW
                    (case-lambda
                      ((g$x$11238$c1uhW)
                       ((letrec ((g$f$11239$c1uhW
                                   (case-lambda
                                     ((g$x$11240$c1uhW
                                        g$lex*$11241$c1uhW
                                        g$loc*$11242$c1uhW)
                                      (if (pair? g$lex*$11241$c1uhW)
                                        (if (eq? g$x$11240$c1uhW
                                                 (car g$lex*$11241$c1uhW))
                                          (car g$loc*$11242$c1uhW)
                                          (g$f$11239$c1uhW
                                            g$x$11240$c1uhW
                                            (cdr g$lex*$11241$c1uhW)
                                            (cdr g$loc*$11242$c1uhW)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$11239$c1uhW)
                        g$x$11238$c1uhW
                        g$lex*$11220$c1uhW
                        g$loc*$11221$c1uhW)))))
          ((letrec ((g$f$11224$c1uhW
                      (case-lambda
                        ((g$r$11225$c1uhW
                           g$env$11226$c1uhW
                           g$global*$11227$c1uhW
                           g$macro*$11228$c1uhW)
                         (if (null? g$r$11225$c1uhW)
                           (values
                             g$env$11226$c1uhW
                             g$global*$11227$c1uhW
                             g$macro*$11228$c1uhW)
                           ((case-lambda
                              ((g$x$11229$c1uhW)
                               ((case-lambda
                                  ((g$label$11230$c1uhW g$b$11231$c1uhW)
                                   ((case-lambda
                                      ((g$t$11232$c1uhW)
                                       (if (g$memv$5056$c1uhW
                                             g$t$11232$c1uhW
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$11233$c1uhW)
                                             ((case-lambda
                                                ((g$loc$11234$c1uhW
                                                   g$type$11235$c1uhW)
                                                 (g$f$11224$c1uhW
                                                   (cdr g$r$11225$c1uhW)
                                                   (cons
                                                     (g$cons*$5065$c1uhW
                                                       g$label$11230$c1uhW
                                                       g$type$11235$c1uhW
                                                       g$loc$11234$c1uhW)
                                                     g$env$11226$c1uhW)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7926$c1uhW
                                                         g$v$11233$c1uhW)
                                                       g$loc$11234$c1uhW)
                                                     g$global*$11227$c1uhW)
                                                   g$macro*$11228$c1uhW)))
                                              (g$lookup$11223$c1uhW
                                                (g$lexical-var$7926$c1uhW
                                                  g$v$11233$c1uhW))
                                              (if (g$lexical-mutable?$7927$c1uhW
                                                    g$v$11233$c1uhW)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7722$c1uhW
                                            g$b$11231$c1uhW))
                                         (if (g$memv$5056$c1uhW
                                               g$t$11232$c1uhW
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$11236$c1uhW)
                                               (g$f$11224$c1uhW
                                                 (cdr g$r$11225$c1uhW)
                                                 (cons
                                                   (g$cons*$5065$c1uhW
                                                     g$label$11230$c1uhW
                                                     'global-macro
                                                     g$loc$11236$c1uhW)
                                                   g$env$11226$c1uhW)
                                                 g$global*$11227$c1uhW
                                                 (cons
                                                   (cons
                                                     g$loc$11236$c1uhW
                                                     (g$binding-value$7722$c1uhW
                                                       g$b$11231$c1uhW))
                                                   g$macro*$11228$c1uhW))))
                                            (gensym))
                                           (if (g$memv$5056$c1uhW
                                                 g$t$11232$c1uhW
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$11237$c1uhW)
                                                 (g$f$11224$c1uhW
                                                   (cdr g$r$11225$c1uhW)
                                                   (cons
                                                     (g$cons*$5065$c1uhW
                                                       g$label$11230$c1uhW
                                                       'global-macro!
                                                       g$loc$11237$c1uhW)
                                                     g$env$11226$c1uhW)
                                                   g$global*$11227$c1uhW
                                                   (cons
                                                     (cons
                                                       g$loc$11237$c1uhW
                                                       (g$binding-value$7722$c1uhW
                                                         g$b$11231$c1uhW))
                                                     g$macro*$11228$c1uhW))))
                                              (gensym))
                                             (if (g$memv$5056$c1uhW
                                                   g$t$11232$c1uhW
                                                   '($rtd $module))
                                               (g$f$11224$c1uhW
                                                 (cdr g$r$11225$c1uhW)
                                                 (cons
                                                   g$x$11229$c1uhW
                                                   g$env$11226$c1uhW)
                                                 g$global*$11227$c1uhW
                                                 g$macro*$11228$c1uhW)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7721$c1uhW
                                                   g$b$11231$c1uhW)
                                                 (g$binding-value$7722$c1uhW
                                                   g$b$11231$c1uhW))))))))
                                    (g$binding-type$7721$c1uhW
                                      g$b$11231$c1uhW))))
                                (car g$x$11229$c1uhW)
                                (cdr g$x$11229$c1uhW))))
                            (car g$r$11225$c1uhW)))))))
             g$f$11224$c1uhW)
           g$r$11222$c1uhW
           '()
           '()
           '())))))
   (g$generate-temporaries$8084$c1uhW
     g$generate-temporaries$11587$c1uhW
     (case-lambda
       ((g$ls$11243$c1uhW)
        ((case-lambda
           ((g$t$11244$c1uhW)
            ((case-lambda
               ((g$ls/false$11245$c1uhW)
                (if g$ls/false$11245$c1uhW
                  (apply
                    (case-lambda
                      ((g$ls$11246$c1uhW)
                       (g$map$5063$c1uhW
                         (case-lambda
                           ((g$x$11247$c1uhW)
                            (g$make-stx$7677$c1uhW
                              ((case-lambda
                                 ((g$x$11248$c1uhW)
                                  (if ((case-lambda
                                         ((g$t$11249$c1uhW)
                                          (if g$t$11249$c1uhW
                                            g$t$11249$c1uhW
                                            (begin
                                              '#f
                                              (string? g$x$11248$c1uhW)))))
                                       (symbol? g$x$11248$c1uhW))
                                    (gensym g$x$11248$c1uhW)
                                    (gensym 't))))
                               (g$syntax->datum$8097$c1uhW g$x$11247$c1uhW))
                              g$top-mark*$7641$c1uhW
                              '()
                              '())))
                         g$ls$11246$c1uhW)))
                    g$ls/false$11245$c1uhW)
                  ((case-lambda
                     ((g$t$11250$c1uhW)
                      ((case-lambda
                         ((g$ls/false$11251$c1uhW)
                          (if g$ls/false$11251$c1uhW
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$11251$c1uhW)
                            (g$syntax-violation$8094$c1uhW
                              '#f
                              '"invalid syntax"
                              g$t$11250$c1uhW))))
                       (g$syntax-dispatch$7982$c1uhW g$t$11250$c1uhW '_))))
                   g$t$11244$c1uhW))))
             (g$syntax-dispatch$7982$c1uhW g$t$11244$c1uhW 'each-any))))
         g$ls$11243$c1uhW))))
   (g$free-identifier=?$8085$c1uhW
     g$free-identifier=?$11588$c1uhW
     (case-lambda
       ((g$x$11252$c1uhW g$y$11253$c1uhW)
        (if (g$id?$7704$c1uhW g$x$11252$c1uhW)
          (if (g$id?$7704$c1uhW g$y$11253$c1uhW)
            (g$free-id=?$7708$c1uhW g$x$11252$c1uhW g$y$11253$c1uhW)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$11253$c1uhW))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$11252$c1uhW)))))
   (g$bound-identifier=?$8086$c1uhW
     g$bound-identifier=?$11589$c1uhW
     (case-lambda
       ((g$x$11254$c1uhW g$y$11255$c1uhW)
        (if (g$id?$7704$c1uhW g$x$11254$c1uhW)
          (if (g$id?$7704$c1uhW g$y$11255$c1uhW)
            (g$bound-id=?$7707$c1uhW g$x$11254$c1uhW g$y$11255$c1uhW)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$11255$c1uhW))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$11254$c1uhW)))))
   (g$make-source-condition$8087$c1uhW
     g$make-source-condition$11590$c1uhW
     (case-lambda
       ((g$x$11256$c1uhW)
        (letrec* ((g$12051$11257$c1uhW
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$12054$c1uhW
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$12053$11258$c1uhW '#f)
                  (g$12052$11259$c1uhW
                    (make-record-constructor-descriptor
                      g$12051$11257$c1uhW
                      &condition-rcd
                      g$12053$11258$c1uhW))
                  (g$12050$11260$c1uhW (record-predicate g$12051$11257$c1uhW))
                  (g$make-source-condition$11261$c1uhW
                    (record-constructor g$12052$11259$c1uhW))
                  (g$12048$11262$c1uhW (record-accessor g$12051$11257$c1uhW '0))
                  (g$12049$11263$c1uhW (record-accessor g$12051$11257$c1uhW '1))
                  (g$source-condition?$11264$c1uhW
                    (condition-predicate g$12051$11257$c1uhW))
                  (g$source-filename$11265$c1uhW
                    (condition-accessor
                      g$12051$11257$c1uhW
                      g$12048$11262$c1uhW))
                  (g$source-character$11266$c1uhW
                    (condition-accessor
                      g$12051$11257$c1uhW
                      g$12049$11263$c1uhW)))
          (if (pair? g$x$11256$c1uhW)
            (g$make-source-condition$11261$c1uhW
              (car g$x$11256$c1uhW)
              (cdr g$x$11256$c1uhW))
            (condition))))))
   (g$extract-position-condition$8088$c1uhW
     g$extract-position-condition$11591$c1uhW
     (case-lambda
       ((g$x$11267$c1uhW)
        (g$make-source-condition$8087$c1uhW
          (g$expression-position$8089$c1uhW g$x$11267$c1uhW)))))
   (g$expression-position$8089$c1uhW
     g$expression-position$11592$c1uhW
     (case-lambda
       ((g$x$11268$c1uhW)
        (if (g$stx?$7676$c1uhW g$x$11268$c1uhW)
          (begin
            '#f
            ((case-lambda
               ((g$x$11269$c1uhW)
                (if (annotation? g$x$11269$c1uhW)
                  (begin '#f (annotation-source g$x$11269$c1uhW))
                  '#f)))
             (g$stx-expr$7678$c1uhW g$x$11268$c1uhW)))
          '#f))))
   (g$assertion-error$8090$c1uhW
     g$assertion-error$11593$c1uhW
     (case-lambda
       ((g$expr$11270$c1uhW g$pos$11271$c1uhW)
        (raise
          (condition
            (g$make-assertion-violation$5837$c1uhW)
            (g$make-who-condition$5851$c1uhW 'assert)
            (g$make-message-condition$5805$c1uhW '"assertion failed")
            (g$make-irritants-condition$5843$c1uhW (list g$expr$11270$c1uhW))
            (g$make-source-condition$8087$c1uhW g$pos$11271$c1uhW))))))
   (g$syntax-error$8091$c1uhW
     g$syntax-error$11594$c1uhW
     (case-lambda
       ((g$x$11272$c1uhW . g$args$11273$c1uhW)
        (begin
          (if (not (g$for-all$5061$c1uhW string? g$args$11273$c1uhW))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$11273$c1uhW)
            (void))
          (raise
            (condition
              (g$make-message-condition$5805$c1uhW
                (if (null? g$args$11273$c1uhW)
                  '"invalid syntax"
                  (apply string-append g$args$11273$c1uhW)))
              (g$make-syntax-violation$5877$c1uhW
                (g$syntax->datum$8097$c1uhW g$x$11272$c1uhW)
                '#f)
              (g$extract-position-condition$8088$c1uhW g$x$11272$c1uhW)
              (g$extract-trace$8092$c1uhW g$x$11272$c1uhW)))))))
   (g$extract-trace$8092$c1uhW
     g$extract-trace$11595$c1uhW
     (case-lambda
       ((g$x$11274$c1uhW)
        (letrec* ((g$12078$11275$c1uhW
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$12081$c1uhW
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$12080$11276$c1uhW '#f)
                  (g$12079$11277$c1uhW
                    (make-record-constructor-descriptor
                      g$12078$11275$c1uhW
                      &condition-rcd
                      g$12080$11276$c1uhW))
                  (g$12077$11278$c1uhW (record-predicate g$12078$11275$c1uhW))
                  (g$make-trace$11279$c1uhW
                    (record-constructor g$12079$11277$c1uhW))
                  (g$12076$11280$c1uhW (record-accessor g$12078$11275$c1uhW '0))
                  (g$trace?$11281$c1uhW
                    (condition-predicate g$12078$11275$c1uhW))
                  (g$trace-form$11282$c1uhW
                    (condition-accessor
                      g$12078$11275$c1uhW
                      g$12076$11280$c1uhW)))
          ((letrec ((g$f$11283$c1uhW
                      (case-lambda
                        ((g$x$11284$c1uhW)
                         (if (g$stx?$7676$c1uhW g$x$11284$c1uhW)
                           (apply
                             condition
                             (g$make-trace$11279$c1uhW g$x$11284$c1uhW)
                             (g$map$5063$c1uhW
                               g$f$11283$c1uhW
                               (g$stx-ae*$7681$c1uhW g$x$11284$c1uhW)))
                           (if (annotation? g$x$11284$c1uhW)
                             (g$make-trace$11279$c1uhW
                               (g$make-stx$7677$c1uhW
                                 g$x$11284$c1uhW
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$11283$c1uhW)
           g$x$11274$c1uhW)))))
   (g$syntax-violation*$8093$c1uhW
     g$syntax-violation*$11596$c1uhW
     (case-lambda
       ((g$who$11285$c1uhW
          g$msg$11286$c1uhW
          g$form$11287$c1uhW
          g$condition-object$11288$c1uhW)
        (begin
          (if (not (string? g$msg$11286$c1uhW))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$11286$c1uhW)
            (void))
          ((case-lambda
             ((g$who$11289$c1uhW)
              (raise
                (condition
                  (if g$who$11289$c1uhW
                    (g$make-who-condition$5851$c1uhW g$who$11289$c1uhW)
                    (condition))
                  (g$make-message-condition$5805$c1uhW g$msg$11286$c1uhW)
                  g$condition-object$11288$c1uhW
                  (g$extract-position-condition$8088$c1uhW g$form$11287$c1uhW)
                  (g$extract-trace$8092$c1uhW g$form$11287$c1uhW)))))
           (if ((case-lambda
                  ((g$t$11290$c1uhW)
                   (if g$t$11290$c1uhW
                     g$t$11290$c1uhW
                     (begin '#f (symbol? g$who$11285$c1uhW)))))
                (string? g$who$11285$c1uhW))
             g$who$11285$c1uhW
             (if (not g$who$11285$c1uhW)
               ((case-lambda
                  ((g$t$11291$c1uhW)
                   ((case-lambda
                      ((g$ls/false$11292$c1uhW)
                       (if (if g$ls/false$11292$c1uhW
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$11293$c1uhW)
                                    (g$id?$7704$c1uhW g$id$11293$c1uhW)))
                                 g$ls/false$11292$c1uhW))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$11294$c1uhW)
                              (g$syntax->datum$8097$c1uhW g$id$11294$c1uhW)))
                           g$ls/false$11292$c1uhW)
                         ((case-lambda
                            ((g$t$11295$c1uhW)
                             ((case-lambda
                                ((g$ls/false$11296$c1uhW)
                                 (if (if g$ls/false$11296$c1uhW
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$11297$c1uhW
                                                g$rest$11298$c1uhW)
                                              (g$id?$7704$c1uhW
                                                g$id$11297$c1uhW)))
                                           g$ls/false$11296$c1uhW))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$11299$c1uhW g$rest$11300$c1uhW)
                                        (g$syntax->datum$8097$c1uhW
                                          g$id$11299$c1uhW)))
                                     g$ls/false$11296$c1uhW)
                                   ((case-lambda
                                      ((g$t$11301$c1uhW)
                                       ((case-lambda
                                          ((g$ls/false$11302$c1uhW)
                                           (if g$ls/false$11302$c1uhW
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$11302$c1uhW)
                                             (g$syntax-violation$8094$c1uhW
                                               '#f
                                               '"invalid syntax"
                                               g$t$11301$c1uhW))))
                                        (g$syntax-dispatch$7982$c1uhW
                                          g$t$11301$c1uhW
                                          '_))))
                                    g$t$11295$c1uhW))))
                              (g$syntax-dispatch$7982$c1uhW
                                g$t$11295$c1uhW
                                '(any . any)))))
                          g$t$11291$c1uhW))))
                    (g$syntax-dispatch$7982$c1uhW g$t$11291$c1uhW 'any))))
                g$form$11287$c1uhW)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$11285$c1uhW))))))))
   (g$syntax-violation$8094$c1uhW
     g$syntax-violation$11597$c1uhW
     (case-lambda
       ((g$who$11303$c1uhW g$msg$11304$c1uhW g$form$11305$c1uhW)
        (g$syntax-violation$8094$c1uhW
          g$who$11303$c1uhW
          g$msg$11304$c1uhW
          g$form$11305$c1uhW
          '#f))
       ((g$who$11306$c1uhW
          g$msg$11307$c1uhW
          g$form$11308$c1uhW
          g$subform$11309$c1uhW)
        (g$syntax-violation*$8093$c1uhW
          g$who$11306$c1uhW
          g$msg$11307$c1uhW
          g$form$11308$c1uhW
          (g$make-syntax-violation$5877$c1uhW
            (g$syntax->datum$8097$c1uhW g$form$11308$c1uhW)
            (g$syntax->datum$8097$c1uhW g$subform$11309$c1uhW))))))
   (g$identifier?$8095$c1uhW
     g$identifier?$11598$c1uhW
     (case-lambda ((g$x$11310$c1uhW) (g$id?$7704$c1uhW g$x$11310$c1uhW))))
   (g$datum->syntax$8096$c1uhW
     g$datum->syntax$11599$c1uhW
     (case-lambda
       ((g$id$11311$c1uhW g$datum$11312$c1uhW)
        (if (g$id?$7704$c1uhW g$id$11311$c1uhW)
          (g$datum->stx$7687$c1uhW g$id$11311$c1uhW g$datum$11312$c1uhW)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$11311$c1uhW)))))
   (g$syntax->datum$8097$c1uhW
     g$syntax->datum$11600$c1uhW
     (case-lambda
       ((g$x$11313$c1uhW) (g$stx->datum$7715$c1uhW g$x$11313$c1uhW))))
   (g$compile-r6rs-top-level$8098$c1uhW
     g$compile-r6rs-top-level$11601$c1uhW
     (case-lambda
       ((g$x*$11314$c1uhW)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8042$c1uhW g$x*$11314$c1uhW)))
          (case-lambda
            ((g$lib*$11317$c1uhW g$invoke-code$11318$c1uhW)
             ((case-lambda
                ((g$invoke-code$11319$c1uhW g$lib*$11320$c1uhW)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$5064$c1uhW
                        g$invoke-library$7514$c1uhW
                        g$lib*$11320$c1uhW)
                      (eval-core
                        (g$expanded->core$7222$c1uhW
                          g$invoke-code$11319$c1uhW)))))))
              g$invoke-code$11318$c1uhW
              g$lib*$11317$c1uhW)))))))
   (g$pre-compile-r6rs-top-level$8099$c1uhW
     g$pre-compile-r6rs-top-level$11602$c1uhW
     (case-lambda
       ((g$x*$11321$c1uhW)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8042$c1uhW g$x*$11321$c1uhW)))
          (case-lambda
            ((g$lib*$11324$c1uhW g$invoke-code$11325$c1uhW)
             ((case-lambda
                ((g$invoke-code$11326$c1uhW g$lib*$11327$c1uhW)
                 (begin
                   (g$for-each$5064$c1uhW
                     g$invoke-library$7514$c1uhW
                     g$lib*$11327$c1uhW)
                   (compile-core
                     (g$expanded->core$7222$c1uhW g$invoke-code$11326$c1uhW)))))
              g$invoke-code$11325$c1uhW
              g$lib*$11324$c1uhW)))))))
   (g$new-interaction-environment$8100$c1uhW
     g$new-interaction-environment$11603$c1uhW
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$11328$c1uhW g$rib$11329$c1uhW)
            (begin
              ((case-lambda
                 ((g$subst$11330$c1uhW)
                  (begin
                    (g$set-rib-sym*!$7659$c1uhW
                      g$rib$11329$c1uhW
                      (g$map$5063$c1uhW car g$subst$11330$c1uhW))
                    (g$set-rib-mark**!$7660$c1uhW
                      g$rib$11329$c1uhW
                      (g$map$5063$c1uhW
                        (case-lambda ((g$x$11331$c1uhW) g$top-mark*$7641$c1uhW))
                        g$subst$11330$c1uhW))
                    (g$set-rib-label*!$7661$c1uhW
                      g$rib$11329$c1uhW
                      (g$map$5063$c1uhW cdr g$subst$11330$c1uhW)))))
               (g$library-subst$7471$c1uhW g$lib$11328$c1uhW))
              (g$make-interaction-env$8059$c1uhW g$rib$11329$c1uhW '() '()))))
         (g$find-library-by-name$7507$c1uhW '(ironscheme))
         (g$make-empty-rib$7664$c1uhW)))))
   (g$interaction-environment$8101$c1uhW
     g$interaction-environment$11604$c1uhW
     ((case-lambda
        ((g$e$11332$c1uhW)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$11333$c1uhW)
                (if g$t$11333$c1uhW
                  g$t$11333$c1uhW
                  (begin
                    '#f
                    (begin
                      (set! g$e$11332$c1uhW
                        (g$new-interaction-environment$8100$c1uhW))
                      g$e$11332$c1uhW)))))
             g$e$11332$c1uhW)))))
      '#f))
   (g$top-level-context$8102$c1uhW
     g$top-level-context$11605$c1uhW
     (g$make-parameter$6976$c1uhW '#f)))
  (g$current-library-expander$7504$c1uhW g$library-expander$8078$c1uhW))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$7219$c1uhW
      (case-lambda
        ((g$x$11658$c1uhW)
         ((case-lambda
            ((g$t$11659$c1uhW) (if g$t$11659$c1uhW (cdr g$t$11659$c1uhW) '#f)))
          (g$assq$5051$c1uhW
            g$x$11658$c1uhW
            '((ellipsis-map . g$ellipsis-map$11490$c1uhW)
              (make-list . g$make-list$5046$c1uhW)
              (last-pair . g$last-pair$5045$c1uhW)
              (ironscheme-build . g$ironscheme-build$11651$c1uhW)
              (syntax-error . g$syntax-error$11594$c1uhW)
              (syntax-dispatch . g$syntax-dispatch$11485$c1uhW)
              (compile-system-libraries
                .
                g$compile-system-libraries$11653$c1uhW)
              (compile->closure . g$compile->closure$11655$c1uhW)
              (compile . g$compile$11654$c1uhW)
              (load . g$load$11650$c1uhW)
              (interaction-environment . g$interaction-environment$11604$c1uhW)
              (string-ci>? . g$string-ci>?$6027$c1uhW)
              (string-ci>=? . g$string-ci>=?$6029$c1uhW)
              (string-ci=? . g$string-ci=?$6025$c1uhW)
              (string-ci<? . g$string-ci<?$6026$c1uhW)
              (string-ci<=? . g$string-ci<=?$6028$c1uhW)
              (char-ci>? . g$char-ci>?$6032$c1uhW)
              (char-ci>=? . g$char-ci>=?$6034$c1uhW)
              (char-ci=? . g$char-ci=?$6030$c1uhW)
              (char-ci<? . g$char-ci<?$6031$c1uhW)
              (char-ci<=? . g$char-ci<=?$6033$c1uhW)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$11423$c1uhW)
              (variable-transformer? . g$variable-transformer?$11422$c1uhW)
              (make-variable-transformer
                .
                g$make-variable-transformer$11421$c1uhW)
              (identifier? . g$identifier?$11598$c1uhW)
              (generate-temporaries . g$generate-temporaries$11587$c1uhW)
              (free-identifier=? . g$free-identifier=?$11588$c1uhW)
              (syntax->datum . g$syntax->datum$11600$c1uhW)
              (datum->syntax . g$datum->syntax$11599$c1uhW)
              (bound-identifier=? . g$bound-identifier=?$11589$c1uhW)
              (delete-file . g$delete-file$5557$c1uhW)
              (file-exists? . g$file-exists?$5556$c1uhW)
              (list-sort . g$list-sort$5952$c1uhW)
              (make-eqv-hashtable . g$make-eqv-hashtable$5539$c1uhW)
              (make-eq-hashtable . g$make-eq-hashtable$5538$c1uhW)
              (hashtable-update! . g$hashtable-update!$5545$c1uhW)
              (hashtable-size . g$hashtable-size$5540$c1uhW)
              (hashtable-set! . g$hashtable-set!$5542$c1uhW)
              (hashtable-ref . g$hashtable-ref$5541$c1uhW)
              (hashtable-delete! . g$hashtable-delete!$5543$c1uhW)
              (hashtable-contains? . g$hashtable-contains?$5544$c1uhW)
              (hashtable-clear! . g$hashtable-clear!$5546$c1uhW)
              (call-with-output-file . g$call-with-output-file$6388$c1uhW)
              (call-with-input-file . g$call-with-input-file$6387$c1uhW)
              (write-char . g$write-char$6384$c1uhW)
              (with-output-to-file . g$with-output-to-file$6386$c1uhW)
              (with-input-from-file . g$with-input-from-file$6385$c1uhW)
              (read-char . g$read-char$6383$c1uhW)
              (peek-char . g$peek-char$6382$c1uhW)
              (newline . g$newline$6389$c1uhW)
              (port? . g$port?$6337$c1uhW)
              (open-string-output-port . g$open-string-output-port$6336$c1uhW)
              (make-i/o-write-error . g$make-i/o-write-error$6252$c1uhW)
              (make-i/o-read-error . g$make-i/o-read-error$6246$c1uhW)
              (make-i/o-port-error . g$make-i/o-port-error$6298$c1uhW)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6258$c1uhW)
              (make-i/o-filename-error . g$make-i/o-filename-error$6266$c1uhW)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6274$c1uhW)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6280$c1uhW)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6292$c1uhW)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6286$c1uhW)
              (make-i/o-error . g$make-i/o-error$6240$c1uhW)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6312$c1uhW)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6306$c1uhW)
              (i/o-write-error? . g$i/o-write-error?$6253$c1uhW)
              (i/o-read-error? . g$i/o-read-error?$6247$c1uhW)
              (i/o-port-error? . g$i/o-port-error?$6300$c1uhW)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6260$c1uhW)
              (i/o-error-position . g$i/o-error-position$6261$c1uhW)
              (i/o-filename-error? . g$i/o-filename-error?$6268$c1uhW)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6275$c1uhW)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6281$c1uhW)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6293$c1uhW)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6287$c1uhW)
              (i/o-error? . g$i/o-error?$6241$c1uhW)
              (i/o-error-port . g$i/o-error-port$6301$c1uhW)
              (i/o-error-filename . g$i/o-error-filename$6269$c1uhW)
              (i/o-encoding-error? . g$i/o-encoding-error?$6314$c1uhW)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6315$c1uhW)
              (i/o-decoding-error? . g$i/o-decoding-error?$6307$c1uhW)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$6338$c1uhW)
              (call-with-port . g$call-with-port$6339$c1uhW)
              (scheme-report-environment
                .
                g$scheme-report-environment$11577$c1uhW)
              (quotient . g$quotient$5919$c1uhW)
              (null-environment . g$null-environment$11576$c1uhW)
              (remainder . g$remainder$5920$c1uhW)
              (modulo . g$modulo$5921$c1uhW)
              (inexact->exact . g$inexact->exact$5916$c1uhW)
              (force . g$force$5923$c1uhW)
              (exact->inexact . g$exact->inexact$5917$c1uhW)
              (command-line . g$command-line$11647$c1uhW)
              (remove . g$remove$5068$c1uhW)
              (remv . g$remv$5069$c1uhW)
              (remp . g$remp$5049$c1uhW)
              (remq . g$remq$5070$c1uhW)
              (partition . g$partition$5048$c1uhW)
              (memv . g$memv$5056$c1uhW)
              (memq . g$memq$5055$c1uhW)
              (memp . g$memp$5058$c1uhW)
              (member . g$member$5057$c1uhW)
              (exists . g$exists$5062$c1uhW)
              (for-all . g$for-all$5061$c1uhW)
              (fold-right . g$fold-right$5067$c1uhW)
              (fold-left . g$fold-left$5066$c1uhW)
              (find . g$find$5047$c1uhW)
              (filter . g$filter$5050$c1uhW)
              (cons* . g$cons*$5065$c1uhW)
              (assv . g$assv$5052$c1uhW)
              (assq . g$assq$5051$c1uhW)
              (assp . g$assp$5054$c1uhW)
              (assoc . g$assoc$5053$c1uhW)
              (eval . g$eval$11579$c1uhW)
              (environment . g$environment$11575$c1uhW)
              (make-enumeration . g$make-enumeration$6521$c1uhW)
              (enum-set=? . g$enum-set=?$6528$c1uhW)
              (enum-set-universe . g$enum-set-universe$6522$c1uhW)
              (enum-set-union . g$enum-set-union$6529$c1uhW)
              (enum-set-subset? . g$enum-set-subset?$6527$c1uhW)
              (enum-set-projection . g$enum-set-projection$6533$c1uhW)
              (enum-set-member? . g$enum-set-member?$6526$c1uhW)
              (enum-set-intersection . g$enum-set-intersection$6530$c1uhW)
              (enum-set-indexer . g$enum-set-indexer$6523$c1uhW)
              (enum-set-difference . g$enum-set-difference$6531$c1uhW)
              (enum-set-constructor . g$enum-set-constructor$6524$c1uhW)
              (enum-set-complement . g$enum-set-complement$6532$c1uhW)
              (enum-set->list . g$enum-set->list$6525$c1uhW)
              (who-condition? . g$who-condition?$5853$c1uhW)
              (warning? . g$warning?$5814$c1uhW)
              (violation? . g$violation?$5832$c1uhW)
              (undefined-violation? . g$undefined-violation?$5888$c1uhW)
              (syntax-violation? . g$syntax-violation?$5880$c1uhW)
              (syntax-violation-subform . g$syntax-violation-subform$5882$c1uhW)
              (syntax-violation-form . g$syntax-violation-form$5881$c1uhW)
              (syntax-violation . g$syntax-violation$11597$c1uhW)
              (serious-condition? . g$serious-condition?$5820$c1uhW)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5860$c1uhW)
              (message-condition? . g$message-condition?$5807$c1uhW)
              (make-who-condition . g$make-who-condition$5851$c1uhW)
              (make-warning . g$make-warning$5813$c1uhW)
              (make-violation . g$make-violation$5831$c1uhW)
              (make-undefined-violation . g$make-undefined-violation$5887$c1uhW)
              (make-syntax-violation . g$make-syntax-violation$5877$c1uhW)
              (make-serious-condition . g$make-serious-condition$5819$c1uhW)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5859$c1uhW)
              (make-message-condition . g$make-message-condition$5805$c1uhW)
              (make-lexical-violation . g$make-lexical-violation$5871$c1uhW)
              (make-irritants-condition . g$make-irritants-condition$5843$c1uhW)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5865$c1uhW)
              (make-error . g$make-error$5825$c1uhW)
              (make-assertion-violation . g$make-assertion-violation$5837$c1uhW)
              (lexical-violation? . g$lexical-violation?$5872$c1uhW)
              (irritants-condition? . g$irritants-condition?$5845$c1uhW)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5866$c1uhW)
              (error? . g$error?$5826$c1uhW)
              (condition-who . g$condition-who$5854$c1uhW)
              (condition-message . g$condition-message$5808$c1uhW)
              (condition-irritants . g$condition-irritants$5846$c1uhW)
              (assertion-violation? . g$assertion-violation?$5838$c1uhW)
              (native-endianness . g$native-endianness$5670$c1uhW)
              (bytevector-u64-set! . g$bytevector-u64-set!$5691$c1uhW)
              (bytevector-u64-ref . g$bytevector-u64-ref$5687$c1uhW)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5693$c1uhW)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5689$c1uhW)
              (bytevector-u32-set! . g$bytevector-u32-set!$5683$c1uhW)
              (bytevector-u32-ref . g$bytevector-u32-ref$5679$c1uhW)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5685$c1uhW)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5681$c1uhW)
              (bytevector-u16-set! . g$bytevector-u16-set!$5675$c1uhW)
              (bytevector-u16-ref . g$bytevector-u16-ref$5671$c1uhW)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5677$c1uhW)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5673$c1uhW)
              (bytevector-s64-set! . g$bytevector-s64-set!$5692$c1uhW)
              (bytevector-s64-ref . g$bytevector-s64-ref$5688$c1uhW)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5694$c1uhW)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5690$c1uhW)
              (bytevector-s32-set! . g$bytevector-s32-set!$5684$c1uhW)
              (bytevector-s32-ref . g$bytevector-s32-ref$5680$c1uhW)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5686$c1uhW)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5682$c1uhW)
              (bytevector-s16-set! . g$bytevector-s16-set!$5676$c1uhW)
              (bytevector-s16-ref . g$bytevector-s16-ref$5672$c1uhW)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5678$c1uhW)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5674$c1uhW)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5697$c1uhW)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5695$c1uhW)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5698$c1uhW)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5696$c1uhW)
              (no-nans-violation? . g$no-nans-violation?$6155$c1uhW)
              (no-infinities-violation? . g$no-infinities-violation?$6149$c1uhW)
              (make-no-nans-violation . g$make-no-nans-violation$6154$c1uhW)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6148$c1uhW)
              (fxrotate-bit-field . g$fxrotate-bit-field$6131$c1uhW)
              (fxif . g$fxif$6125$c1uhW)
              (fxcopy-bit-field . g$fxcopy-bit-field$6128$c1uhW)
              (fxcopy-bit . g$fxcopy-bit$6126$c1uhW)
              (fxbit-field . g$fxbit-field$6127$c1uhW)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$6130$c1uhW)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6129$c1uhW)
              (fx-/carry . g$fx-/carry$6123$c1uhW)
              (fx+/carry . g$fx+/carry$6124$c1uhW)
              (fx*/carry . g$fx*/carry$6122$c1uhW)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$6072$c1uhW)
              (bitwise-if . g$bitwise-if$6066$c1uhW)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$6069$c1uhW)
              (bitwise-copy-bit . g$bitwise-copy-bit$6067$c1uhW)
              (bitwise-bit-field . g$bitwise-bit-field$6068$c1uhW)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$6071$c1uhW)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$6070$c1uhW)
              (zero? . g$zero?$5293$c1uhW)
              (symbol=? . g$symbol=?$5305$c1uhW)
              (string>? . g$string>?$5302$c1uhW)
              (string>=? . g$string>=?$5304$c1uhW)
              (string=? . g$string=?$5300$c1uhW)
              (string<? . g$string<?$5301$c1uhW)
              (string<=? . g$string<=?$5303$c1uhW)
              (rationalize . g$rationalize$5312$c1uhW)
              (positive? . g$positive?$5291$c1uhW)
              (odd? . g$odd?$5295$c1uhW)
              (negative? . g$negative?$5292$c1uhW)
              (min . g$min$5297$c1uhW)
              (max . g$max$5296$c1uhW)
              (map . g$map$5063$c1uhW)
              (list-tail . g$list-tail$5043$c1uhW)
              (list-ref . g$list-ref$5044$c1uhW)
              (lcm . g$lcm$5299$c1uhW)
              (gcd . g$gcd$5298$c1uhW)
              (for-each . g$for-each$5064$c1uhW)
              (even? . g$even?$5294$c1uhW)
              (char>? . g$char>?$5309$c1uhW)
              (char>=? . g$char>=?$5311$c1uhW)
              (char=? . g$char=?$5307$c1uhW)
              (char<? . g$char<?$5308$c1uhW)
              (char<=? . g$char<=?$5310$c1uhW)
              (cddddr . g$cddddr$5290$c1uhW)
              (cdddar . g$cdddar$5289$c1uhW)
              (cddadr . g$cddadr$5288$c1uhW)
              (cddaar . g$cddaar$5287$c1uhW)
              (cdaddr . g$cdaddr$5286$c1uhW)
              (cdadar . g$cdadar$5285$c1uhW)
              (cdaadr . g$cdaadr$5284$c1uhW)
              (cdaaar . g$cdaaar$5283$c1uhW)
              (cadddr . g$cadddr$5282$c1uhW)
              (caddar . g$caddar$5281$c1uhW)
              (cadadr . g$cadadr$5280$c1uhW)
              (cadaar . g$cadaar$5279$c1uhW)
              (caaddr . g$caaddr$5278$c1uhW)
              (caadar . g$caadar$5277$c1uhW)
              (caaadr . g$caaadr$5276$c1uhW)
              (caaaar . g$caaaar$5275$c1uhW)
              (cdddr . g$cdddr$5274$c1uhW)
              (cddar . g$cddar$5273$c1uhW)
              (cdadr . g$cdadr$5272$c1uhW)
              (cdaar . g$cdaar$5271$c1uhW)
              (caddr . g$caddr$5270$c1uhW)
              (cadar . g$cadar$5269$c1uhW)
              (caadr . g$caadr$5268$c1uhW)
              (caaar . g$caaar$5267$c1uhW)
              (cddr . g$cddr$5266$c1uhW)
              (cdar . g$cdar$5265$c1uhW)
              (cadr . g$cadr$5264$c1uhW)
              (caar . g$caar$5263$c1uhW)
              (boolean=? . g$boolean=?$5306$c1uhW)
              (enum-set? . g$enum?$6502$c1uhW)
              (make-promise . g$make-promise$5922$c1uhW)
              (load/args . g$load/args$11649$c1uhW)
              (printf . g$printf$6557$c1uhW)
              (fprintf . g$fprintf$6558$c1uhW)
              (format . g$format$6559$c1uhW)
              (trace-printer . g$trace-printer$11646$c1uhW)
              (make-traced-macro . g$make-traced-macro$6563$c1uhW)
              (assertion-error . g$assertion-error$11593$c1uhW)
              (make-parameter . g$make-parameter$6976$c1uhW)
              (environment-bindings . g$environment-bindings$11571$c1uhW)
              (environment-symbols . g$environment-symbols$11574$c1uhW)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11570$c1uhW)
              (library-path . g$library-path$7496$c1uhW)
              (expand->core . g$expand->core$11580$c1uhW)
              (expand . g$expand$11578$c1uhW)
              (convert->cps . g$convert->cps$6876$c1uhW)
              (parse->cps . g$parse->cps$6875$c1uhW)))))))
    (g$install-library$7512$c1uhW
      'g$12773$c1uhW
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$12710$c1uhW)
        (cosh . g$12709$c1uhW)
        (sinh . g$12708$c1uhW)
        (make-guid . g$12707$c1uhW)
        (unspecified? . g$12706$c1uhW)
        (make-list . g$5856$c1uhW)
        (last-pair . g$5855$c1uhW)
        (load-r5rs . g$12705$c1uhW)
        (license . g$12704$c1uhW)
        (stacktrace . g$12703$c1uhW)
        (ironscheme-build . g$12149$c1uhW)
        (set-symbol-value! . g$12690$c1uhW)
        (symbol-value . g$12689$c1uhW)
        (symbol-value? . g$12688$c1uhW)
        (ungensym . g$12687$c1uhW)
        (gensym . g$12686$c1uhW)
        (void . g$12685$c1uhW)
        (compile-system-libraries . g$12151$c1uhW)
        (compile->closure . g$12153$c1uhW)
        (compile . g$12152$c1uhW)
        (load . g$12148$c1uhW)
        (interaction-environment . g$9168$c1uhW)
        (string-upcase . g$12681$c1uhW)
        (string-titlecase . g$12680$c1uhW)
        (string-normalize-nfkd . g$12679$c1uhW)
        (string-normalize-nfkc . g$12678$c1uhW)
        (string-normalize-nfd . g$12677$c1uhW)
        (string-normalize-nfc . g$12676$c1uhW)
        (string-foldcase . g$12675$c1uhW)
        (string-downcase . g$12674$c1uhW)
        (string-ci>? . g$6995$c1uhW)
        (string-ci>=? . g$6997$c1uhW)
        (string-ci=? . g$6993$c1uhW)
        (string-ci<? . g$6994$c1uhW)
        (string-ci<=? . g$6996$c1uhW)
        (char-whitespace? . g$12673$c1uhW)
        (char-upper-case? . g$12672$c1uhW)
        (char-title-case? . g$12671$c1uhW)
        (char-numeric? . g$12670$c1uhW)
        (char-lower-case? . g$12669$c1uhW)
        (char-general-category . g$12668$c1uhW)
        (char-upcase . g$12667$c1uhW)
        (char-titlecase . g$12666$c1uhW)
        (char-foldcase . g$12665$c1uhW)
        (char-downcase . g$12664$c1uhW)
        (char-ci>? . g$7034$c1uhW)
        (char-ci>=? . g$7036$c1uhW)
        (char-ci=? . g$7032$c1uhW)
        (char-ci<? . g$7033$c1uhW)
        (char-ci<=? . g$7035$c1uhW)
        (char-alphabetic? . g$12663$c1uhW)
        (make-variable-transformer . g$8763$c1uhW)
        (identifier? . g$9162$c1uhW)
        (generate-temporaries . g$9151$c1uhW)
        (free-identifier=? . g$9152$c1uhW)
        (syntax->datum . g$9164$c1uhW)
        (datum->syntax . g$9163$c1uhW)
        (bound-identifier=? . g$9153$c1uhW)
        (record-type-descriptor? . g$12662$c1uhW)
        (record-predicate . g$12661$c1uhW)
        (record-mutator . g$12660$c1uhW)
        (record-constructor . g$12659$c1uhW)
        (record-accessor . g$12658$c1uhW)
        (make-record-type-descriptor . g$12657$c1uhW)
        (make-record-constructor-descriptor . g$12656$c1uhW)
        (record? . g$12655$c1uhW)
        (record-type-uid . g$12654$c1uhW)
        (record-type-sealed? . g$12653$c1uhW)
        (record-type-parent . g$12652$c1uhW)
        (record-type-opaque? . g$12651$c1uhW)
        (record-type-name . g$12650$c1uhW)
        (record-type-generative? . g$12649$c1uhW)
        (record-type-field-names . g$12648$c1uhW)
        (record-rtd . g$12647$c1uhW)
        (record-field-mutable? . g$12646$c1uhW)
        (delete-file . g$6569$c1uhW)
        (file-exists? . g$6568$c1uhW)
        (vector-sort! . g$12645$c1uhW)
        (vector-sort . g$12644$c1uhW)
        (list-sort . g$6935$c1uhW)
        (symbol-hash . g$12643$c1uhW)
        (string-ci-hash . g$12642$c1uhW)
        (string-hash . g$12641$c1uhW)
        (equal-hash . g$12640$c1uhW)
        (hashtable-equivalence-function . g$12639$c1uhW)
        (make-hashtable . g$12638$c1uhW)
        (hashtable-hash-function . g$12637$c1uhW)
        (make-eqv-hashtable . g$6537$c1uhW)
        (make-eq-hashtable . g$6536$c1uhW)
        (hashtable? . g$12636$c1uhW)
        (hashtable-update! . g$6543$c1uhW)
        (hashtable-size . g$6538$c1uhW)
        (hashtable-set! . g$6540$c1uhW)
        (hashtable-ref . g$6539$c1uhW)
        (hashtable-mutable? . g$12635$c1uhW)
        (hashtable-keys . g$12634$c1uhW)
        (hashtable-entries . g$12633$c1uhW)
        (hashtable-delete! . g$6541$c1uhW)
        (hashtable-copy . g$12632$c1uhW)
        (hashtable-contains? . g$6542$c1uhW)
        (hashtable-clear! . g$6544$c1uhW)
        (call-with-output-file . g$7420$c1uhW)
        (call-with-input-file . g$7419$c1uhW)
        (write-char . g$7401$c1uhW)
        (write . g$12631$c1uhW)
        (with-output-to-file . g$7418$c1uhW)
        (with-input-from-file . g$7417$c1uhW)
        (read-char . g$7400$c1uhW)
        (read . g$12630$c1uhW)
        (peek-char . g$7399$c1uhW)
        (open-output-file . g$12629$c1uhW)
        (open-input-file . g$12628$c1uhW)
        (newline . g$7421$c1uhW)
        (display . g$12627$c1uhW)
        (close-output-port . g$12626$c1uhW)
        (close-input-port . g$12625$c1uhW)
        (eof-object? . g$12624$c1uhW)
        (eof-object . g$12623$c1uhW)
        (current-error-port . g$12622$c1uhW)
        (current-output-port . g$12621$c1uhW)
        (current-input-port . g$12620$c1uhW)
        (output-port? . g$12619$c1uhW)
        (input-port? . g$12618$c1uhW)
        (utf-8-codec . g$12617$c1uhW)
        (utf-16-codec . g$12616$c1uhW)
        (transcoder-error-handling-mode . g$12615$c1uhW)
        (transcoder-eol-style . g$12614$c1uhW)
        (transcoder-codec . g$12613$c1uhW)
        (transcoded-port . g$12612$c1uhW)
        (textual-port? . g$12611$c1uhW)
        (string->bytevector . g$12610$c1uhW)
        (standard-output-port . g$12609$c1uhW)
        (standard-input-port . g$12608$c1uhW)
        (standard-error-port . g$12607$c1uhW)
        (set-port-position! . g$12606$c1uhW)
        (put-u8 . g$12605$c1uhW)
        (put-string . g$12604$c1uhW)
        (put-datum . g$12603$c1uhW)
        (put-char . g$12602$c1uhW)
        (put-bytevector . g$12601$c1uhW)
        (port? . g$7386$c1uhW)
        (port-transcoder . g$12600$c1uhW)
        (port-position . g$12599$c1uhW)
        (port-has-set-port-position!? . g$12598$c1uhW)
        (port-has-port-position? . g$12597$c1uhW)
        (port-eof? . g$12596$c1uhW)
        (output-port-buffer-mode . g$12595$c1uhW)
        (open-string-output-port . g$7385$c1uhW)
        (open-string-input-port . g$12594$c1uhW)
        (open-file-output-port . g$12593$c1uhW)
        (open-file-input/output-port . g$12592$c1uhW)
        (open-file-input-port . g$12591$c1uhW)
        (open-bytevector-output-port . g$12590$c1uhW)
        (open-bytevector-input-port . g$12589$c1uhW)
        (native-transcoder . g$12588$c1uhW)
        (native-eol-style . g$12587$c1uhW)
        (make-transcoder . g$12586$c1uhW)
        (latin-1-codec . g$12585$c1uhW)
        (make-i/o-write-error . g$7241$c1uhW)
        (make-i/o-read-error . g$7227$c1uhW)
        (make-i/o-port-error . g$7346$c1uhW)
        (make-i/o-invalid-position-error . g$7256$c1uhW)
        (make-i/o-filename-error . g$7273$c1uhW)
        (make-i/o-file-protection-error . g$7289$c1uhW)
        (make-i/o-file-is-read-only-error . g$7303$c1uhW)
        (make-i/o-file-does-not-exist-error . g$7331$c1uhW)
        (make-i/o-file-already-exists-error . g$7317$c1uhW)
        (make-i/o-error . g$7213$c1uhW)
        (make-i/o-encoding-error . g$7377$c1uhW)
        (make-i/o-decoding-error . g$7362$c1uhW)
        (make-custom-textual-output-port . g$12584$c1uhW)
        (make-custom-textual-input/output-port . g$12583$c1uhW)
        (make-custom-textual-input-port . g$12582$c1uhW)
        (make-custom-binary-output-port . g$12581$c1uhW)
        (make-custom-binary-input/output-port . g$12580$c1uhW)
        (make-custom-binary-input-port . g$12579$c1uhW)
        (make-bytevector . g$12578$c1uhW)
        (lookahead-u8 . g$12577$c1uhW)
        (lookahead-char . g$12576$c1uhW)
        (i/o-write-error? . g$7242$c1uhW)
        (i/o-read-error? . g$7228$c1uhW)
        (i/o-port-error? . g$7348$c1uhW)
        (i/o-invalid-position-error? . g$7258$c1uhW)
        (i/o-error-position . g$7259$c1uhW)
        (i/o-filename-error? . g$7275$c1uhW)
        (i/o-file-protection-error? . g$7290$c1uhW)
        (i/o-file-is-read-only-error? . g$7304$c1uhW)
        (i/o-file-does-not-exist-error? . g$7332$c1uhW)
        (i/o-file-already-exists-error? . g$7318$c1uhW)
        (i/o-error? . g$7214$c1uhW)
        (i/o-error-port . g$7349$c1uhW)
        (i/o-error-filename . g$7276$c1uhW)
        (i/o-encoding-error? . g$7379$c1uhW)
        (i/o-encoding-error-char . g$7380$c1uhW)
        (i/o-decoding-error? . g$7363$c1uhW)
        (get-u8 . g$12575$c1uhW)
        (get-string-n! . g$12574$c1uhW)
        (get-string-n . g$12573$c1uhW)
        (get-string-all . g$12572$c1uhW)
        (get-line . g$12571$c1uhW)
        (get-datum . g$12570$c1uhW)
        (get-char . g$12569$c1uhW)
        (get-bytevector-some . g$12568$c1uhW)
        (get-bytevector-n! . g$12567$c1uhW)
        (get-bytevector-n . g$12566$c1uhW)
        (get-bytevector-all . g$12565$c1uhW)
        (flush-output-port . g$12564$c1uhW)
        (close-port . g$12563$c1uhW)
        (call-with-string-output-port . g$7387$c1uhW)
        (call-with-port . g$7388$c1uhW)
        (call-with-bytevector-output-port . g$12562$c1uhW)
        (bytevector->string . g$12561$c1uhW)
        (buffer-mode? . g$12560$c1uhW)
        (binary-port? . g$12559$c1uhW)
        (scheme-report-environment . g$9141$c1uhW)
        (quotient . g$6914$c1uhW)
        (null-environment . g$9140$c1uhW)
        (remainder . g$6915$c1uhW)
        (modulo . g$6916$c1uhW)
        (inexact->exact . g$6911$c1uhW)
        (force . g$6918$c1uhW)
        (exact->inexact . g$6912$c1uhW)
        (exit . g$12558$c1uhW)
        (command-line . g$12145$c1uhW)
        (string-fill! . g$12557$c1uhW)
        (string-set! . g$12556$c1uhW)
        (set-cdr! . g$12555$c1uhW)
        (set-car! . g$12554$c1uhW)
        (remove . g$5878$c1uhW)
        (remv . g$5879$c1uhW)
        (remp . g$5859$c1uhW)
        (remq . g$5880$c1uhW)
        (partition . g$5858$c1uhW)
        (memv . g$5866$c1uhW)
        (memq . g$5865$c1uhW)
        (memp . g$5868$c1uhW)
        (member . g$5867$c1uhW)
        (exists . g$5872$c1uhW)
        (for-all . g$5871$c1uhW)
        (fold-right . g$5877$c1uhW)
        (fold-left . g$5876$c1uhW)
        (find . g$5857$c1uhW)
        (filter . g$5860$c1uhW)
        (cons* . g$5875$c1uhW)
        (assv . g$5862$c1uhW)
        (assq . g$5861$c1uhW)
        (assp . g$5864$c1uhW)
        (assoc . g$5863$c1uhW)
        (with-exception-handler . g$12553$c1uhW)
        (raise-continuable . g$12552$c1uhW)
        (raise . g$12551$c1uhW)
        (eval . g$9143$c1uhW)
        (environment . g$9139$c1uhW)
        (make-enumeration . g$7485$c1uhW)
        (enum-set=? . g$7492$c1uhW)
        (enum-set-universe . g$7486$c1uhW)
        (enum-set-union . g$7493$c1uhW)
        (enum-set-subset? . g$7491$c1uhW)
        (enum-set-projection . g$7497$c1uhW)
        (enum-set-member? . g$7490$c1uhW)
        (enum-set-intersection . g$7494$c1uhW)
        (enum-set-indexer . g$7487$c1uhW)
        (enum-set-difference . g$7495$c1uhW)
        (enum-set-constructor . g$7488$c1uhW)
        (enum-set-complement . g$7496$c1uhW)
        (enum-set->list . g$7489$c1uhW)
        (who-condition? . g$6823$c1uhW)
        (warning? . g$6734$c1uhW)
        (violation? . g$6776$c1uhW)
        (undefined-violation? . g$6900$c1uhW)
        (syntax-violation? . g$6884$c1uhW)
        (syntax-violation-subform . g$6886$c1uhW)
        (syntax-violation-form . g$6885$c1uhW)
        (syntax-violation . g$9161$c1uhW)
        (simple-conditions . g$12550$c1uhW)
        (serious-condition? . g$6748$c1uhW)
        (non-continuable-violation? . g$6838$c1uhW)
        (message-condition? . g$6719$c1uhW)
        (make-who-condition . g$6821$c1uhW)
        (make-warning . g$6733$c1uhW)
        (make-violation . g$6775$c1uhW)
        (make-undefined-violation . g$6899$c1uhW)
        (make-syntax-violation . g$6881$c1uhW)
        (make-serious-condition . g$6747$c1uhW)
        (make-non-continuable-violation . g$6837$c1uhW)
        (make-message-condition . g$6717$c1uhW)
        (make-lexical-violation . g$6865$c1uhW)
        (make-irritants-condition . g$6804$c1uhW)
        (make-implementation-restriction-violation . g$6851$c1uhW)
        (make-error . g$6761$c1uhW)
        (make-assertion-violation . g$6789$c1uhW)
        (lexical-violation? . g$6866$c1uhW)
        (irritants-condition? . g$6806$c1uhW)
        (implementation-restriction-violation? . g$6852$c1uhW)
        (error? . g$6762$c1uhW)
        (condition-who . g$6824$c1uhW)
        (condition-predicate . g$12549$c1uhW)
        (condition-message . g$6720$c1uhW)
        (condition-irritants . g$6807$c1uhW)
        (condition-accessor . g$12548$c1uhW)
        (condition . g$12547$c1uhW)
        (assertion-violation? . g$6790$c1uhW)
        (condition? . g$12546$c1uhW)
        (utf32->string . g$12545$c1uhW)
        (utf16->string . g$12544$c1uhW)
        (utf8->string . g$12543$c1uhW)
        (uint-list->bytevector . g$12542$c1uhW)
        (u8-list->bytevector . g$12541$c1uhW)
        (string->utf8 . g$12540$c1uhW)
        (string->utf32 . g$12539$c1uhW)
        (string->utf16 . g$12538$c1uhW)
        (sint-list->bytevector . g$12537$c1uhW)
        (native-endianness . g$6575$c1uhW)
        (bytevector? . g$12536$c1uhW)
        (bytevector=? . g$12535$c1uhW)
        (bytevector-uint-set! . g$12534$c1uhW)
        (bytevector-uint-ref . g$12533$c1uhW)
        (bytevector-u8-set! . g$12532$c1uhW)
        (bytevector-u8-ref . g$12531$c1uhW)
        (bytevector-u64-set! . g$6596$c1uhW)
        (bytevector-u64-ref . g$6592$c1uhW)
        (bytevector-u64-native-set! . g$6598$c1uhW)
        (bytevector-u64-native-ref . g$6594$c1uhW)
        (bytevector-u32-set! . g$6588$c1uhW)
        (bytevector-u32-ref . g$6584$c1uhW)
        (bytevector-u32-native-set! . g$6590$c1uhW)
        (bytevector-u32-native-ref . g$6586$c1uhW)
        (bytevector-u16-set! . g$6580$c1uhW)
        (bytevector-u16-ref . g$6576$c1uhW)
        (bytevector-u16-native-set! . g$6582$c1uhW)
        (bytevector-u16-native-ref . g$6578$c1uhW)
        (bytevector-sint-set! . g$12530$c1uhW)
        (bytevector-sint-ref . g$12529$c1uhW)
        (bytevector-s8-set! . g$12528$c1uhW)
        (bytevector-s8-ref . g$12527$c1uhW)
        (bytevector-s64-set! . g$6597$c1uhW)
        (bytevector-s64-ref . g$6593$c1uhW)
        (bytevector-s64-native-set! . g$6599$c1uhW)
        (bytevector-s64-native-ref . g$6595$c1uhW)
        (bytevector-s32-set! . g$6589$c1uhW)
        (bytevector-s32-ref . g$6585$c1uhW)
        (bytevector-s32-native-set! . g$6591$c1uhW)
        (bytevector-s32-native-ref . g$6587$c1uhW)
        (bytevector-s16-set! . g$6581$c1uhW)
        (bytevector-s16-ref . g$6577$c1uhW)
        (bytevector-s16-native-set! . g$6583$c1uhW)
        (bytevector-s16-native-ref . g$6579$c1uhW)
        (bytevector-length . g$12526$c1uhW)
        (bytevector-ieee-single-set! . g$12525$c1uhW)
        (bytevector-ieee-single-ref . g$12524$c1uhW)
        (bytevector-ieee-single-native-set! . g$6602$c1uhW)
        (bytevector-ieee-single-native-ref . g$6600$c1uhW)
        (bytevector-ieee-double-set! . g$12523$c1uhW)
        (bytevector-ieee-double-ref . g$12522$c1uhW)
        (bytevector-ieee-double-native-set! . g$6603$c1uhW)
        (bytevector-ieee-double-native-ref . g$6601$c1uhW)
        (bytevector-fill! . g$12521$c1uhW)
        (bytevector-copy! . g$12520$c1uhW)
        (bytevector-copy . g$12519$c1uhW)
        (bytevector->uint-list . g$12518$c1uhW)
        (bytevector->u8-list . g$12517$c1uhW)
        (bytevector->sint-list . g$12516$c1uhW)
        (no-nans-violation? . g$7199$c1uhW)
        (no-infinities-violation? . g$7185$c1uhW)
        (make-no-nans-violation . g$7198$c1uhW)
        (make-no-infinities-violation . g$7184$c1uhW)
        (real->flonum . g$12515$c1uhW)
        (flzero? . g$12514$c1uhW)
        (fltruncate . g$12513$c1uhW)
        (fltan . g$12512$c1uhW)
        (flsqrt . g$12511$c1uhW)
        (flsin . g$12510$c1uhW)
        (flround . g$12509$c1uhW)
        (flpositive? . g$12508$c1uhW)
        (flonum? . g$12507$c1uhW)
        (flodd? . g$12506$c1uhW)
        (flnumerator . g$12505$c1uhW)
        (flnegative? . g$12504$c1uhW)
        (flnan? . g$12503$c1uhW)
        (flmod0 . g$12502$c1uhW)
        (flmod . g$12501$c1uhW)
        (flmin . g$12500$c1uhW)
        (flmax . g$12499$c1uhW)
        (fllog . g$12498$c1uhW)
        (flinteger? . g$12497$c1uhW)
        (flinfinite? . g$12496$c1uhW)
        (flfloor . g$12495$c1uhW)
        (flfinite? . g$12494$c1uhW)
        (flexpt . g$12493$c1uhW)
        (flexp . g$12492$c1uhW)
        (fleven? . g$12491$c1uhW)
        (fldiv0-and-mod0 . g$12490$c1uhW)
        (fldiv0 . g$12489$c1uhW)
        (fldiv-and-mod . g$12488$c1uhW)
        (fldiv . g$12487$c1uhW)
        (fldenominator . g$12486$c1uhW)
        (flcos . g$12485$c1uhW)
        (flceiling . g$12484$c1uhW)
        (flatan . g$12483$c1uhW)
        (flasin . g$12482$c1uhW)
        (flacos . g$12481$c1uhW)
        (flabs . g$12480$c1uhW)
        (fl>? . g$12479$c1uhW)
        (fl>=? . g$12478$c1uhW)
        (fl=? . g$12477$c1uhW)
        (fl<? . g$12476$c1uhW)
        (fl<=? . g$12475$c1uhW)
        (fl/ . g$12474$c1uhW)
        (fl- . g$12473$c1uhW)
        (fl+ . g$12472$c1uhW)
        (fl* . g$12471$c1uhW)
        (fixnum->flonum . g$12470$c1uhW)
        (fxzero? . g$12469$c1uhW)
        (fxxor . g$12468$c1uhW)
        (fxrotate-bit-field . g$7131$c1uhW)
        (fxreverse-bit-field . g$12467$c1uhW)
        (fxpositive? . g$12466$c1uhW)
        (fxodd? . g$12465$c1uhW)
        (fxnot . g$12464$c1uhW)
        (fxnegative? . g$12463$c1uhW)
        (fxmod0 . g$12462$c1uhW)
        (fxmod . g$12461$c1uhW)
        (fxmin . g$12460$c1uhW)
        (fxmax . g$12459$c1uhW)
        (fxlength . g$12458$c1uhW)
        (fxior . g$12457$c1uhW)
        (fxif . g$7125$c1uhW)
        (fxfirst-bit-set . g$12456$c1uhW)
        (fxeven? . g$12455$c1uhW)
        (fxdiv0-and-mod0 . g$12454$c1uhW)
        (fxdiv0 . g$12453$c1uhW)
        (fxdiv-and-mod . g$12452$c1uhW)
        (fxdiv . g$12451$c1uhW)
        (fxcopy-bit-field . g$7128$c1uhW)
        (fxcopy-bit . g$7126$c1uhW)
        (fxbit-set? . g$12450$c1uhW)
        (fxbit-field . g$7127$c1uhW)
        (fxbit-count . g$12449$c1uhW)
        (fxarithmetic-shift-right . g$7130$c1uhW)
        (fxarithmetic-shift-left . g$7129$c1uhW)
        (fxarithmetic-shift . g$12448$c1uhW)
        (fxand . g$12447$c1uhW)
        (fx>? . g$12446$c1uhW)
        (fx>=? . g$12445$c1uhW)
        (fx=? . g$12444$c1uhW)
        (fx<? . g$12443$c1uhW)
        (fx<=? . g$12442$c1uhW)
        (fx-/carry . g$7123$c1uhW)
        (fx- . g$12441$c1uhW)
        (fx+/carry . g$7124$c1uhW)
        (fx+ . g$12440$c1uhW)
        (fx*/carry . g$7122$c1uhW)
        (fx* . g$12439$c1uhW)
        (greatest-fixnum . g$12438$c1uhW)
        (least-fixnum . g$12437$c1uhW)
        (fixnum-width . g$12436$c1uhW)
        (fixnum? . g$12435$c1uhW)
        (bitwise-rotate-bit-field . g$7096$c1uhW)
        (bitwise-reverse-bit-field . g$12434$c1uhW)
        (bitwise-length . g$12433$c1uhW)
        (bitwise-if . g$7090$c1uhW)
        (bitwise-first-bit-set . g$12432$c1uhW)
        (bitwise-copy-bit-field . g$7093$c1uhW)
        (bitwise-copy-bit . g$7091$c1uhW)
        (bitwise-bit-set? . g$12431$c1uhW)
        (bitwise-bit-field . g$7092$c1uhW)
        (bitwise-bit-count . g$12430$c1uhW)
        (bitwise-xor . g$12429$c1uhW)
        (bitwise-ior . g$12428$c1uhW)
        (bitwise-and . g$12427$c1uhW)
        (bitwise-not . g$12426$c1uhW)
        (bitwise-arithmetic-shift-right . g$7095$c1uhW)
        (bitwise-arithmetic-shift-left . g$7094$c1uhW)
        (bitwise-arithmetic-shift . g$12425$c1uhW)
        (zero? . g$6021$c1uhW)
        (vector? . g$12424$c1uhW)
        (vector-set! . g$12423$c1uhW)
        (vector-ref . g$12422$c1uhW)
        (vector-map . g$12421$c1uhW)
        (vector-length . g$12420$c1uhW)
        (vector-for-each . g$12419$c1uhW)
        (vector-fill! . g$12418$c1uhW)
        (vector->list . g$12417$c1uhW)
        (vector . g$12416$c1uhW)
        (values . g$12415$c1uhW)
        (truncate . g$12414$c1uhW)
        (tan . g$12413$c1uhW)
        (symbol? . g$12412$c1uhW)
        (symbol=? . g$6067$c1uhW)
        (symbol->string . g$12411$c1uhW)
        (substring . g$12410$c1uhW)
        (string? . g$12409$c1uhW)
        (string>? . g$6064$c1uhW)
        (string>=? . g$6066$c1uhW)
        (string=? . g$6062$c1uhW)
        (string<? . g$6063$c1uhW)
        (string<=? . g$6065$c1uhW)
        (string-ref . g$12408$c1uhW)
        (string-length . g$12407$c1uhW)
        (string-for-each . g$12406$c1uhW)
        (string-copy . g$12405$c1uhW)
        (string-append . g$12404$c1uhW)
        (string->symbol . g$12403$c1uhW)
        (string->number . g$12402$c1uhW)
        (string->list . g$12401$c1uhW)
        (string . g$12400$c1uhW)
        (sqrt . g$12399$c1uhW)
        (sin . g$12398$c1uhW)
        (round . g$12397$c1uhW)
        (reverse . g$12396$c1uhW)
        (real? . g$12395$c1uhW)
        (real-valued? . g$12394$c1uhW)
        (real-part . g$12393$c1uhW)
        (rationalize . g$6108$c1uhW)
        (rational? . g$12392$c1uhW)
        (rational-valued? . g$12391$c1uhW)
        (procedure? . g$12390$c1uhW)
        (positive? . g$6019$c1uhW)
        (pair? . g$12389$c1uhW)
        (odd? . g$6023$c1uhW)
        (numerator . g$12388$c1uhW)
        (number? . g$12387$c1uhW)
        (number->string . g$12386$c1uhW)
        (null? . g$12385$c1uhW)
        (not . g$12384$c1uhW)
        (negative? . g$6020$c1uhW)
        (nan? . g$12383$c1uhW)
        (min . g$6025$c1uhW)
        (max . g$6024$c1uhW)
        (map . g$5873$c1uhW)
        (make-vector . g$12382$c1uhW)
        (make-string . g$12381$c1uhW)
        (make-rectangular . g$12380$c1uhW)
        (make-polar . g$12379$c1uhW)
        (magnitude . g$12378$c1uhW)
        (log . g$12377$c1uhW)
        (list? . g$12376$c1uhW)
        (list-tail . g$5853$c1uhW)
        (list-ref . g$5854$c1uhW)
        (list->vector . g$12375$c1uhW)
        (list->string . g$12374$c1uhW)
        (list . g$12373$c1uhW)
        (length . g$12372$c1uhW)
        (lcm . g$6027$c1uhW)
        (integer? . g$12371$c1uhW)
        (integer-valued? . g$12370$c1uhW)
        (integer->char . g$12369$c1uhW)
        (infinite? . g$12368$c1uhW)
        (inexact? . g$12367$c1uhW)
        (inexact . g$12366$c1uhW)
        (imag-part . g$12365$c1uhW)
        (gcd . g$6026$c1uhW)
        (for-each . g$5874$c1uhW)
        (floor . g$12364$c1uhW)
        (finite? . g$12363$c1uhW)
        (expt . g$12362$c1uhW)
        (exp . g$12361$c1uhW)
        (exact? . g$12360$c1uhW)
        (exact-integer-sqrt . g$12359$c1uhW)
        (exact . g$12358$c1uhW)
        (even? . g$6022$c1uhW)
        (error . g$12357$c1uhW)
        (eqv? . g$12356$c1uhW)
        (equal? . g$12355$c1uhW)
        (eq? . g$12354$c1uhW)
        (dynamic-wind . g$12353$c1uhW)
        (div0-and-mod0 . g$12352$c1uhW)
        (mod0 . g$12351$c1uhW)
        (div0 . g$12350$c1uhW)
        (div-and-mod . g$12349$c1uhW)
        (mod . g$12348$c1uhW)
        (div . g$12347$c1uhW)
        (denominator . g$12346$c1uhW)
        (cos . g$12345$c1uhW)
        (cons . g$12344$c1uhW)
        (complex? . g$12343$c1uhW)
        (char? . g$12342$c1uhW)
        (char>? . g$6105$c1uhW)
        (char>=? . g$6107$c1uhW)
        (char=? . g$6103$c1uhW)
        (char<? . g$6104$c1uhW)
        (char<=? . g$6106$c1uhW)
        (char->integer . g$12341$c1uhW)
        (ceiling . g$12340$c1uhW)
        (call-with-values . g$12339$c1uhW)
        (call/cc . g$12338$c1uhW)
        (call-with-current-continuation . g$12337$c1uhW)
        (cddddr . g$6018$c1uhW)
        (cdddar . g$6017$c1uhW)
        (cddadr . g$6016$c1uhW)
        (cddaar . g$6015$c1uhW)
        (cdaddr . g$6014$c1uhW)
        (cdadar . g$6013$c1uhW)
        (cdaadr . g$6012$c1uhW)
        (cdaaar . g$6011$c1uhW)
        (cadddr . g$6010$c1uhW)
        (caddar . g$6009$c1uhW)
        (cadadr . g$6008$c1uhW)
        (cadaar . g$6007$c1uhW)
        (caaddr . g$6006$c1uhW)
        (caadar . g$6005$c1uhW)
        (caaadr . g$6004$c1uhW)
        (caaaar . g$6003$c1uhW)
        (cdddr . g$6002$c1uhW)
        (cddar . g$6001$c1uhW)
        (cdadr . g$6000$c1uhW)
        (cdaar . g$5999$c1uhW)
        (caddr . g$5998$c1uhW)
        (cadar . g$5997$c1uhW)
        (caadr . g$5996$c1uhW)
        (caaar . g$5995$c1uhW)
        (cddr . g$5994$c1uhW)
        (cdar . g$5993$c1uhW)
        (cadr . g$5992$c1uhW)
        (caar . g$5991$c1uhW)
        (cdr . g$12336$c1uhW)
        (car . g$12335$c1uhW)
        (boolean? . g$12334$c1uhW)
        (boolean=? . g$6068$c1uhW)
        (atan . g$12333$c1uhW)
        (assertion-violation . g$12332$c1uhW)
        (asin . g$12331$c1uhW)
        (apply . g$12330$c1uhW)
        (append . g$12329$c1uhW)
        (angle . g$12328$c1uhW)
        (acos . g$12327$c1uhW)
        (abs . g$12326$c1uhW)
        (/ . g$12325$c1uhW)
        (* . g$12324$c1uhW)
        (- . g$12323$c1uhW)
        (+ . g$12322$c1uhW)
        (>= . g$12321$c1uhW)
        (> . g$12320$c1uhW)
        (= . g$12319$c1uhW)
        (<= . g$12318$c1uhW)
        (< . g$12317$c1uhW)
        (deserialize-port . g$12313$c1uhW)
        (serialize-port . g$12312$c1uhW)
        (enum-set? . g$7460$c1uhW)
        (load/args . g$12147$c1uhW)
        (printf . g$7571$c1uhW)
        (fprintf . g$7572$c1uhW)
        (format . g$7573$c1uhW)
        (procedure-form . g$12311$c1uhW)
        (procedure-environment . g$12310$c1uhW)
        (procedure-name . g$12309$c1uhW)
        (procedure-arity . g$12308$c1uhW)
        (gc-collect . g$12307$c1uhW)
        (clr-type? . g$12306$c1uhW)
        (get-clr-type . g$12305$c1uhW)
        (vector-append . g$12303$c1uhW)
        (vector-filter . g$12302$c1uhW)
        (vector-reverse! . g$12301$c1uhW)
        (vector-contains? . g$12300$c1uhW)
        (vector-index-of . g$12299$c1uhW)
        (vector-copy . g$12298$c1uhW)
        (vector-binary-search . g$12297$c1uhW)
        (string-ci-compare . g$12296$c1uhW)
        (string-compare . g$12295$c1uhW)
        (string-format . g$12294$c1uhW)
        (trace-printer . g$12144$c1uhW)
        (time-it . g$12292$c1uhW)
        (make-parameter . g$7862$c1uhW)
        (open-tcp-input/output-port . g$12289$c1uhW)
        (hashtable-for-each . g$12288$c1uhW)
        (hashtable-map . g$12287$c1uhW)
        (environment-bindings . g$9135$c1uhW)
        (environment-symbols . g$9138$c1uhW)
        (interaction-environment-symbols . g$9134$c1uhW)
        (optimization-level . g$12286$c1uhW)
        (library-path . g$8317$c1uhW)
        (expand->core . g$9144$c1uhW)
        (expand . g$9142$c1uhW)
        (convert->cps . g$7648$c1uhW)
        (parse->cps . g$7647$c1uhW)
        (&no-nans . g$12285$c1uhW)
        (&no-infinities . g$12284$c1uhW)
        (&i/o-encoding . g$12283$c1uhW)
        (&i/o-decoding . g$12282$c1uhW)
        (&i/o-port . g$12281$c1uhW)
        (&i/o-file-does-not-exist . g$12280$c1uhW)
        (&i/o-file-already-exists . g$12279$c1uhW)
        (&i/o-file-is-read-only . g$12278$c1uhW)
        (&i/o-file-protection . g$12277$c1uhW)
        (&i/o-filename . g$12276$c1uhW)
        (&i/o-invalid-position . g$12275$c1uhW)
        (&i/o-write . g$12274$c1uhW)
        (&i/o-read . g$12273$c1uhW)
        (&i/o . g$12272$c1uhW)
        (&non-continuable . g$12271$c1uhW)
        (&undefined . g$12270$c1uhW)
        (&syntax . g$12269$c1uhW)
        (&lexical . g$12268$c1uhW)
        (&implementation-restriction . g$12267$c1uhW)
        (&who . g$12266$c1uhW)
        (&irritants . g$12265$c1uhW)
        (&assertion . g$12264$c1uhW)
        (&violation . g$12263$c1uhW)
        (&error . g$12262$c1uhW)
        (&serious . g$12261$c1uhW)
        (&warning . g$12260$c1uhW)
        (&message . g$12259$c1uhW)
        (&condition . g$12258$c1uhW)
        (define-condition-type . g$12257$c1uhW)
        (define-enumeration . g$12256$c1uhW)
        (define-record-type . g$12255$c1uhW)
        (parent-rtd . g$12254$c1uhW)
        (nongenerative . g$12253$c1uhW)
        (opaque . g$12252$c1uhW)
        (sealed . g$12251$c1uhW)
        (protocol . g$12250$c1uhW)
        (parent . g$12249$c1uhW)
        (immutable . g$12248$c1uhW)
        (mutable . g$12247$c1uhW)
        (fields . g$12246$c1uhW)
        (error-handling-mode . g$12245$c1uhW)
        (file-options . g$12244$c1uhW)
        (buffer-mode . g$12243$c1uhW)
        (eol-style . g$12242$c1uhW)
        (guard . g$12241$c1uhW)
        (trace-letrec-syntax . g$12240$c1uhW)
        (trace-let-syntax . g$12239$c1uhW)
        (trace-define-syntax . g$12238$c1uhW)
        (trace-define . g$12237$c1uhW)
        (trace-lambda . g$12236$c1uhW)
        (unsyntax-splicing . g$12235$c1uhW)
        (unsyntax . g$12234$c1uhW)
        (unquote-splicing . g$12233$c1uhW)
        (unquote . g$12232$c1uhW)
        (_ . g$12231$c1uhW)
        (else . g$12230$c1uhW)
        (=> . g$12229$c1uhW)
        (... . g$12228$c1uhW)
        (assert . g$12227$c1uhW)
        (endianness . g$12226$c1uhW)
        (delay . g$12225$c1uhW)
        (time . g$12224$c1uhW)
        (or . g$12223$c1uhW)
        (and . g$12222$c1uhW)
        (do . g$12221$c1uhW)
        (cond . g$12220$c1uhW)
        (let* . g$12219$c1uhW)
        (let . g$12218$c1uhW)
        (identifier-syntax . g$12217$c1uhW)
        (with-syntax . g$12216$c1uhW)
        (quasisyntax . g$12215$c1uhW)
        (quasiquote . g$12214$c1uhW)
        (syntax-rules . g$12213$c1uhW)
        (include-into . g$12212$c1uhW)
        (include . g$12211$c1uhW)
        (let-values . g$12209$c1uhW)
        (let*-values . g$12208$c1uhW)
        (record-constructor-descriptor . g$12207$c1uhW)
        (record-type-descriptor . g$12206$c1uhW)
        (fluid-let-syntax . g$12205$c1uhW)
        (case . g$12204$c1uhW)
        (parameterize . g$12203$c1uhW)
        (unless . g$12202$c1uhW)
        (when . g$12201$c1uhW)
        (if . g$12200$c1uhW)
        (letrec* . g$12199$c1uhW)
        (letrec . g$12198$c1uhW)
        (case-lambda . g$12196$c1uhW)
        (lambda . g$12195$c1uhW)
        (syntax . g$12194$c1uhW)
        (syntax-case . g$12193$c1uhW)
        (quote . g$12192$c1uhW)
        (letrec-syntax . g$12190$c1uhW)
        (let-syntax . g$12189$c1uhW)
        (set! . g$12188$c1uhW)
        (export . g$12187$c1uhW)
        (import . g$12186$c1uhW)
        (library . g$12185$c1uhW)
        (begin . g$12184$c1uhW)
        (module . g$12183$c1uhW)
        (define-syntax . g$12182$c1uhW)
        (define . g$12181$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12774$c1uhW
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$12290$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$c1uhW
      'g$12775$c1uhW
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$12715$c1uhW)
        (annotation-source . g$12714$c1uhW)
        (annotation-expression . g$12713$c1uhW)
        (annotation? . g$12712$c1uhW)
        (read-annotated . g$12711$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$c1uhW
      'g$12776$c1uhW
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12684$c1uhW)
        (serialize-library . g$12683$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$c1uhW
      'g$12777$c1uhW
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$8765$c1uhW)
        (variable-transformer? . g$8764$c1uhW)
        (eqv-hash . g$12315$c1uhW)
        (reverse! . g$12314$c1uhW)
        (make-promise . g$6917$c1uhW)
        (format . g$7573$c1uhW)
        (get-command-line . g$12304$c1uhW)
        (make-traced-procedure . g$12293$c1uhW)
        (make-traced-macro . g$7593$c1uhW)
        (assertion-error . g$9157$c1uhW)
        (library-locator . g$12291$c1uhW)
        (get-library-paths . g$12290$c1uhW)
        (library-path . g$8317$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$c1uhW
      'g$12778$c1uhW
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$12316$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12779$c1uhW
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$12702$c1uhW)
        (clr-field-set!-internal . g$12701$c1uhW)
        (clr-field-get-internal . g$12700$c1uhW)
        (clr-cast-internal . g$12699$c1uhW)
        (clr-call-internal . g$12698$c1uhW)
        (clr-new-internal . g$12697$c1uhW)
        (clr-new-array-internal . g$12696$c1uhW)
        (clr-is-internal . g$12695$c1uhW)
        (clr-reference-internal . g$12694$c1uhW)
        (clr-using-internal . g$12693$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12780$c1uhW
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$12233$c1uhW)
        (unquote . g$12232$c1uhW)
        (else . g$12230$c1uhW)
        (=> . g$12229$c1uhW)
        (delay . g$12225$c1uhW)
        (or . g$12223$c1uhW)
        (and . g$12222$c1uhW)
        (do . g$12221$c1uhW)
        (cond . g$12220$c1uhW)
        (let* . g$12219$c1uhW)
        (let . g$12218$c1uhW)
        (quasiquote . g$12214$c1uhW)
        (syntax-rules . g$12213$c1uhW)
        (case . g$12204$c1uhW)
        (if . g$12200$c1uhW)
        (letrec . g$12198$c1uhW)
        (lambda . g$12195$c1uhW)
        (quote . g$12192$c1uhW)
        (letrec-syntax . g$12190$c1uhW)
        (let-syntax . g$12189$c1uhW)
        (set! . g$12188$c1uhW)
        (begin . g$12184$c1uhW)
        (define-syntax . g$12182$c1uhW)
        (define . g$12181$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$c1uhW
      'g$12781$c1uhW
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$9168$c1uhW)
        (char-ready? . g$12682$c1uhW)
        (string-ci>? . g$6995$c1uhW)
        (string-ci>=? . g$6997$c1uhW)
        (string-ci=? . g$6993$c1uhW)
        (string-ci<? . g$6994$c1uhW)
        (string-ci<=? . g$6996$c1uhW)
        (char-whitespace? . g$12673$c1uhW)
        (char-upper-case? . g$12672$c1uhW)
        (char-numeric? . g$12670$c1uhW)
        (char-lower-case? . g$12669$c1uhW)
        (char-upcase . g$12667$c1uhW)
        (char-downcase . g$12664$c1uhW)
        (char-ci>? . g$7034$c1uhW)
        (char-ci>=? . g$7036$c1uhW)
        (char-ci=? . g$7032$c1uhW)
        (char-ci<? . g$7033$c1uhW)
        (char-ci<=? . g$7035$c1uhW)
        (char-alphabetic? . g$12663$c1uhW)
        (call-with-output-file . g$7420$c1uhW)
        (call-with-input-file . g$7419$c1uhW)
        (write-char . g$7401$c1uhW)
        (write . g$12631$c1uhW)
        (with-output-to-file . g$7418$c1uhW)
        (with-input-from-file . g$7417$c1uhW)
        (read-char . g$7400$c1uhW)
        (read . g$12630$c1uhW)
        (peek-char . g$7399$c1uhW)
        (open-output-file . g$12629$c1uhW)
        (open-input-file . g$12628$c1uhW)
        (newline . g$7421$c1uhW)
        (display . g$12627$c1uhW)
        (close-output-port . g$12626$c1uhW)
        (close-input-port . g$12625$c1uhW)
        (eof-object? . g$12624$c1uhW)
        (eof-object . g$12623$c1uhW)
        (current-error-port . g$12622$c1uhW)
        (current-output-port . g$12621$c1uhW)
        (current-input-port . g$12620$c1uhW)
        (output-port? . g$12619$c1uhW)
        (input-port? . g$12618$c1uhW)
        (scheme-report-environment . g$9141$c1uhW)
        (quotient . g$6914$c1uhW)
        (null-environment . g$9140$c1uhW)
        (remainder . g$6915$c1uhW)
        (modulo . g$6916$c1uhW)
        (inexact->exact . g$6911$c1uhW)
        (force . g$6918$c1uhW)
        (exact->inexact . g$6912$c1uhW)
        (string-fill! . g$12557$c1uhW)
        (string-set! . g$12556$c1uhW)
        (set-cdr! . g$12555$c1uhW)
        (set-car! . g$12554$c1uhW)
        (memv . g$5866$c1uhW)
        (memq . g$5865$c1uhW)
        (member . g$5867$c1uhW)
        (assv . g$5862$c1uhW)
        (assq . g$5861$c1uhW)
        (assoc . g$5863$c1uhW)
        (eval . g$9143$c1uhW)
        (zero? . g$6021$c1uhW)
        (vector? . g$12424$c1uhW)
        (vector-set! . g$12423$c1uhW)
        (vector-ref . g$12422$c1uhW)
        (vector-length . g$12420$c1uhW)
        (vector-fill! . g$12418$c1uhW)
        (vector->list . g$12417$c1uhW)
        (vector . g$12416$c1uhW)
        (values . g$12415$c1uhW)
        (truncate . g$12414$c1uhW)
        (tan . g$12413$c1uhW)
        (symbol? . g$12412$c1uhW)
        (symbol->string . g$12411$c1uhW)
        (substring . g$12410$c1uhW)
        (string? . g$12409$c1uhW)
        (string>? . g$6064$c1uhW)
        (string>=? . g$6066$c1uhW)
        (string=? . g$6062$c1uhW)
        (string<? . g$6063$c1uhW)
        (string<=? . g$6065$c1uhW)
        (string-ref . g$12408$c1uhW)
        (string-length . g$12407$c1uhW)
        (string-copy . g$12405$c1uhW)
        (string-append . g$12404$c1uhW)
        (string->symbol . g$12403$c1uhW)
        (string->number . g$12402$c1uhW)
        (string->list . g$12401$c1uhW)
        (string . g$12400$c1uhW)
        (sqrt . g$12399$c1uhW)
        (sin . g$12398$c1uhW)
        (round . g$12397$c1uhW)
        (reverse . g$12396$c1uhW)
        (real? . g$12395$c1uhW)
        (real-part . g$12393$c1uhW)
        (rationalize . g$6108$c1uhW)
        (rational? . g$12392$c1uhW)
        (procedure? . g$12390$c1uhW)
        (positive? . g$6019$c1uhW)
        (pair? . g$12389$c1uhW)
        (odd? . g$6023$c1uhW)
        (numerator . g$12388$c1uhW)
        (number? . g$12387$c1uhW)
        (number->string . g$12386$c1uhW)
        (null? . g$12385$c1uhW)
        (not . g$12384$c1uhW)
        (negative? . g$6020$c1uhW)
        (min . g$6025$c1uhW)
        (max . g$6024$c1uhW)
        (map . g$5873$c1uhW)
        (make-vector . g$12382$c1uhW)
        (make-string . g$12381$c1uhW)
        (make-rectangular . g$12380$c1uhW)
        (make-polar . g$12379$c1uhW)
        (magnitude . g$12378$c1uhW)
        (log . g$12377$c1uhW)
        (list? . g$12376$c1uhW)
        (list-tail . g$5853$c1uhW)
        (list-ref . g$5854$c1uhW)
        (list->vector . g$12375$c1uhW)
        (list->string . g$12374$c1uhW)
        (list . g$12373$c1uhW)
        (length . g$12372$c1uhW)
        (lcm . g$6027$c1uhW)
        (integer? . g$12371$c1uhW)
        (integer->char . g$12369$c1uhW)
        (inexact? . g$12367$c1uhW)
        (imag-part . g$12365$c1uhW)
        (gcd . g$6026$c1uhW)
        (for-each . g$5874$c1uhW)
        (floor . g$12364$c1uhW)
        (expt . g$12362$c1uhW)
        (exp . g$12361$c1uhW)
        (exact? . g$12360$c1uhW)
        (even? . g$6022$c1uhW)
        (eqv? . g$12356$c1uhW)
        (equal? . g$12355$c1uhW)
        (eq? . g$12354$c1uhW)
        (dynamic-wind . g$12353$c1uhW)
        (denominator . g$12346$c1uhW)
        (cos . g$12345$c1uhW)
        (cons . g$12344$c1uhW)
        (complex? . g$12343$c1uhW)
        (char? . g$12342$c1uhW)
        (char>? . g$6105$c1uhW)
        (char>=? . g$6107$c1uhW)
        (char=? . g$6103$c1uhW)
        (char<? . g$6104$c1uhW)
        (char<=? . g$6106$c1uhW)
        (char->integer . g$12341$c1uhW)
        (ceiling . g$12340$c1uhW)
        (call-with-values . g$12339$c1uhW)
        (call-with-current-continuation . g$12337$c1uhW)
        (cddddr . g$6018$c1uhW)
        (cdddar . g$6017$c1uhW)
        (cddadr . g$6016$c1uhW)
        (cddaar . g$6015$c1uhW)
        (cdaddr . g$6014$c1uhW)
        (cdadar . g$6013$c1uhW)
        (cdaadr . g$6012$c1uhW)
        (cdaaar . g$6011$c1uhW)
        (cadddr . g$6010$c1uhW)
        (caddar . g$6009$c1uhW)
        (cadadr . g$6008$c1uhW)
        (cadaar . g$6007$c1uhW)
        (caaddr . g$6006$c1uhW)
        (caadar . g$6005$c1uhW)
        (caaadr . g$6004$c1uhW)
        (caaaar . g$6003$c1uhW)
        (cdddr . g$6002$c1uhW)
        (cddar . g$6001$c1uhW)
        (cdadr . g$6000$c1uhW)
        (cdaar . g$5999$c1uhW)
        (caddr . g$5998$c1uhW)
        (cadar . g$5997$c1uhW)
        (caadr . g$5996$c1uhW)
        (caaar . g$5995$c1uhW)
        (cddr . g$5994$c1uhW)
        (cdar . g$5993$c1uhW)
        (cadr . g$5992$c1uhW)
        (caar . g$5991$c1uhW)
        (cdr . g$12336$c1uhW)
        (car . g$12335$c1uhW)
        (boolean? . g$12334$c1uhW)
        (atan . g$12333$c1uhW)
        (asin . g$12331$c1uhW)
        (apply . g$12330$c1uhW)
        (append . g$12329$c1uhW)
        (angle . g$12328$c1uhW)
        (acos . g$12327$c1uhW)
        (abs . g$12326$c1uhW)
        (/ . g$12325$c1uhW)
        (* . g$12324$c1uhW)
        (- . g$12323$c1uhW)
        (+ . g$12322$c1uhW)
        (>= . g$12321$c1uhW)
        (> . g$12320$c1uhW)
        (= . g$12319$c1uhW)
        (<= . g$12318$c1uhW)
        (< . g$12317$c1uhW)
        (unquote-splicing . g$12233$c1uhW)
        (unquote . g$12232$c1uhW)
        (else . g$12230$c1uhW)
        (=> . g$12229$c1uhW)
        (... . g$12228$c1uhW)
        (delay . g$12225$c1uhW)
        (or . g$12223$c1uhW)
        (and . g$12222$c1uhW)
        (do . g$12221$c1uhW)
        (cond . g$12220$c1uhW)
        (let* . g$12219$c1uhW)
        (let . g$12218$c1uhW)
        (quasiquote . g$12214$c1uhW)
        (syntax-rules . g$12213$c1uhW)
        (case . g$12204$c1uhW)
        (if . g$12200$c1uhW)
        (letrec . g$12198$c1uhW)
        (lambda . g$12195$c1uhW)
        (quote . g$12192$c1uhW)
        (letrec-syntax . g$12190$c1uhW)
        (let-syntax . g$12189$c1uhW)
        (set! . g$12188$c1uhW)
        (begin . g$12184$c1uhW)
        (define-syntax . g$12182$c1uhW)
        (define . g$12181$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$c1uhW
      'g$12782$c1uhW
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12681$c1uhW)
        (string-titlecase . g$12680$c1uhW)
        (string-normalize-nfkd . g$12679$c1uhW)
        (string-normalize-nfkc . g$12678$c1uhW)
        (string-normalize-nfd . g$12677$c1uhW)
        (string-normalize-nfc . g$12676$c1uhW)
        (string-foldcase . g$12675$c1uhW)
        (string-downcase . g$12674$c1uhW)
        (string-ci>? . g$6995$c1uhW)
        (string-ci>=? . g$6997$c1uhW)
        (string-ci=? . g$6993$c1uhW)
        (string-ci<? . g$6994$c1uhW)
        (string-ci<=? . g$6996$c1uhW)
        (char-whitespace? . g$12673$c1uhW)
        (char-upper-case? . g$12672$c1uhW)
        (char-title-case? . g$12671$c1uhW)
        (char-numeric? . g$12670$c1uhW)
        (char-lower-case? . g$12669$c1uhW)
        (char-general-category . g$12668$c1uhW)
        (char-upcase . g$12667$c1uhW)
        (char-titlecase . g$12666$c1uhW)
        (char-foldcase . g$12665$c1uhW)
        (char-downcase . g$12664$c1uhW)
        (char-ci>? . g$7034$c1uhW)
        (char-ci>=? . g$7036$c1uhW)
        (char-ci=? . g$7032$c1uhW)
        (char-ci<? . g$7033$c1uhW)
        (char-ci<=? . g$7035$c1uhW)
        (char-alphabetic? . g$12663$c1uhW)
        (make-variable-transformer . g$8763$c1uhW)
        (identifier? . g$9162$c1uhW)
        (generate-temporaries . g$9151$c1uhW)
        (free-identifier=? . g$9152$c1uhW)
        (syntax->datum . g$9164$c1uhW)
        (datum->syntax . g$9163$c1uhW)
        (bound-identifier=? . g$9153$c1uhW)
        (record-type-descriptor? . g$12662$c1uhW)
        (record-predicate . g$12661$c1uhW)
        (record-mutator . g$12660$c1uhW)
        (record-constructor . g$12659$c1uhW)
        (record-accessor . g$12658$c1uhW)
        (make-record-type-descriptor . g$12657$c1uhW)
        (make-record-constructor-descriptor . g$12656$c1uhW)
        (record? . g$12655$c1uhW)
        (record-type-uid . g$12654$c1uhW)
        (record-type-sealed? . g$12653$c1uhW)
        (record-type-parent . g$12652$c1uhW)
        (record-type-opaque? . g$12651$c1uhW)
        (record-type-name . g$12650$c1uhW)
        (record-type-generative? . g$12649$c1uhW)
        (record-type-field-names . g$12648$c1uhW)
        (record-rtd . g$12647$c1uhW)
        (record-field-mutable? . g$12646$c1uhW)
        (delete-file . g$6569$c1uhW)
        (file-exists? . g$6568$c1uhW)
        (vector-sort! . g$12645$c1uhW)
        (vector-sort . g$12644$c1uhW)
        (list-sort . g$6935$c1uhW)
        (symbol-hash . g$12643$c1uhW)
        (string-ci-hash . g$12642$c1uhW)
        (string-hash . g$12641$c1uhW)
        (equal-hash . g$12640$c1uhW)
        (hashtable-equivalence-function . g$12639$c1uhW)
        (make-hashtable . g$12638$c1uhW)
        (hashtable-hash-function . g$12637$c1uhW)
        (make-eqv-hashtable . g$6537$c1uhW)
        (make-eq-hashtable . g$6536$c1uhW)
        (hashtable? . g$12636$c1uhW)
        (hashtable-update! . g$6543$c1uhW)
        (hashtable-size . g$6538$c1uhW)
        (hashtable-set! . g$6540$c1uhW)
        (hashtable-ref . g$6539$c1uhW)
        (hashtable-mutable? . g$12635$c1uhW)
        (hashtable-keys . g$12634$c1uhW)
        (hashtable-entries . g$12633$c1uhW)
        (hashtable-delete! . g$6541$c1uhW)
        (hashtable-copy . g$12632$c1uhW)
        (hashtable-contains? . g$6542$c1uhW)
        (hashtable-clear! . g$6544$c1uhW)
        (call-with-output-file . g$7420$c1uhW)
        (call-with-input-file . g$7419$c1uhW)
        (write-char . g$7401$c1uhW)
        (write . g$12631$c1uhW)
        (with-output-to-file . g$7418$c1uhW)
        (with-input-from-file . g$7417$c1uhW)
        (read-char . g$7400$c1uhW)
        (read . g$12630$c1uhW)
        (peek-char . g$7399$c1uhW)
        (open-output-file . g$12629$c1uhW)
        (open-input-file . g$12628$c1uhW)
        (newline . g$7421$c1uhW)
        (display . g$12627$c1uhW)
        (close-output-port . g$12626$c1uhW)
        (close-input-port . g$12625$c1uhW)
        (eof-object? . g$12624$c1uhW)
        (eof-object . g$12623$c1uhW)
        (current-error-port . g$12622$c1uhW)
        (current-output-port . g$12621$c1uhW)
        (current-input-port . g$12620$c1uhW)
        (output-port? . g$12619$c1uhW)
        (input-port? . g$12618$c1uhW)
        (utf-8-codec . g$12617$c1uhW)
        (utf-16-codec . g$12616$c1uhW)
        (transcoder-error-handling-mode . g$12615$c1uhW)
        (transcoder-eol-style . g$12614$c1uhW)
        (transcoder-codec . g$12613$c1uhW)
        (transcoded-port . g$12612$c1uhW)
        (textual-port? . g$12611$c1uhW)
        (string->bytevector . g$12610$c1uhW)
        (standard-output-port . g$12609$c1uhW)
        (standard-input-port . g$12608$c1uhW)
        (standard-error-port . g$12607$c1uhW)
        (set-port-position! . g$12606$c1uhW)
        (put-u8 . g$12605$c1uhW)
        (put-string . g$12604$c1uhW)
        (put-datum . g$12603$c1uhW)
        (put-char . g$12602$c1uhW)
        (put-bytevector . g$12601$c1uhW)
        (port? . g$7386$c1uhW)
        (port-transcoder . g$12600$c1uhW)
        (port-position . g$12599$c1uhW)
        (port-has-set-port-position!? . g$12598$c1uhW)
        (port-has-port-position? . g$12597$c1uhW)
        (port-eof? . g$12596$c1uhW)
        (output-port-buffer-mode . g$12595$c1uhW)
        (open-string-output-port . g$7385$c1uhW)
        (open-string-input-port . g$12594$c1uhW)
        (open-file-output-port . g$12593$c1uhW)
        (open-file-input/output-port . g$12592$c1uhW)
        (open-file-input-port . g$12591$c1uhW)
        (open-bytevector-output-port . g$12590$c1uhW)
        (open-bytevector-input-port . g$12589$c1uhW)
        (native-transcoder . g$12588$c1uhW)
        (native-eol-style . g$12587$c1uhW)
        (make-transcoder . g$12586$c1uhW)
        (latin-1-codec . g$12585$c1uhW)
        (make-i/o-write-error . g$7241$c1uhW)
        (make-i/o-read-error . g$7227$c1uhW)
        (make-i/o-port-error . g$7346$c1uhW)
        (make-i/o-invalid-position-error . g$7256$c1uhW)
        (make-i/o-filename-error . g$7273$c1uhW)
        (make-i/o-file-protection-error . g$7289$c1uhW)
        (make-i/o-file-is-read-only-error . g$7303$c1uhW)
        (make-i/o-file-does-not-exist-error . g$7331$c1uhW)
        (make-i/o-file-already-exists-error . g$7317$c1uhW)
        (make-i/o-error . g$7213$c1uhW)
        (make-i/o-encoding-error . g$7377$c1uhW)
        (make-i/o-decoding-error . g$7362$c1uhW)
        (make-custom-textual-output-port . g$12584$c1uhW)
        (make-custom-textual-input/output-port . g$12583$c1uhW)
        (make-custom-textual-input-port . g$12582$c1uhW)
        (make-custom-binary-output-port . g$12581$c1uhW)
        (make-custom-binary-input/output-port . g$12580$c1uhW)
        (make-custom-binary-input-port . g$12579$c1uhW)
        (make-bytevector . g$12578$c1uhW)
        (lookahead-u8 . g$12577$c1uhW)
        (lookahead-char . g$12576$c1uhW)
        (i/o-write-error? . g$7242$c1uhW)
        (i/o-read-error? . g$7228$c1uhW)
        (i/o-port-error? . g$7348$c1uhW)
        (i/o-invalid-position-error? . g$7258$c1uhW)
        (i/o-error-position . g$7259$c1uhW)
        (i/o-filename-error? . g$7275$c1uhW)
        (i/o-file-protection-error? . g$7290$c1uhW)
        (i/o-file-is-read-only-error? . g$7304$c1uhW)
        (i/o-file-does-not-exist-error? . g$7332$c1uhW)
        (i/o-file-already-exists-error? . g$7318$c1uhW)
        (i/o-error? . g$7214$c1uhW)
        (i/o-error-port . g$7349$c1uhW)
        (i/o-error-filename . g$7276$c1uhW)
        (i/o-encoding-error? . g$7379$c1uhW)
        (i/o-encoding-error-char . g$7380$c1uhW)
        (i/o-decoding-error? . g$7363$c1uhW)
        (get-u8 . g$12575$c1uhW)
        (get-string-n! . g$12574$c1uhW)
        (get-string-n . g$12573$c1uhW)
        (get-string-all . g$12572$c1uhW)
        (get-line . g$12571$c1uhW)
        (get-datum . g$12570$c1uhW)
        (get-char . g$12569$c1uhW)
        (get-bytevector-some . g$12568$c1uhW)
        (get-bytevector-n! . g$12567$c1uhW)
        (get-bytevector-n . g$12566$c1uhW)
        (get-bytevector-all . g$12565$c1uhW)
        (flush-output-port . g$12564$c1uhW)
        (close-port . g$12563$c1uhW)
        (call-with-string-output-port . g$7387$c1uhW)
        (call-with-port . g$7388$c1uhW)
        (call-with-bytevector-output-port . g$12562$c1uhW)
        (bytevector->string . g$12561$c1uhW)
        (buffer-mode? . g$12560$c1uhW)
        (binary-port? . g$12559$c1uhW)
        (exit . g$12558$c1uhW)
        (command-line . g$12145$c1uhW)
        (remove . g$5878$c1uhW)
        (remv . g$5879$c1uhW)
        (remp . g$5859$c1uhW)
        (remq . g$5880$c1uhW)
        (partition . g$5858$c1uhW)
        (memv . g$5866$c1uhW)
        (memq . g$5865$c1uhW)
        (memp . g$5868$c1uhW)
        (member . g$5867$c1uhW)
        (exists . g$5872$c1uhW)
        (for-all . g$5871$c1uhW)
        (fold-right . g$5877$c1uhW)
        (fold-left . g$5876$c1uhW)
        (find . g$5857$c1uhW)
        (filter . g$5860$c1uhW)
        (cons* . g$5875$c1uhW)
        (assv . g$5862$c1uhW)
        (assq . g$5861$c1uhW)
        (assp . g$5864$c1uhW)
        (assoc . g$5863$c1uhW)
        (with-exception-handler . g$12553$c1uhW)
        (raise-continuable . g$12552$c1uhW)
        (raise . g$12551$c1uhW)
        (make-enumeration . g$7485$c1uhW)
        (enum-set=? . g$7492$c1uhW)
        (enum-set-universe . g$7486$c1uhW)
        (enum-set-union . g$7493$c1uhW)
        (enum-set-subset? . g$7491$c1uhW)
        (enum-set-projection . g$7497$c1uhW)
        (enum-set-member? . g$7490$c1uhW)
        (enum-set-intersection . g$7494$c1uhW)
        (enum-set-indexer . g$7487$c1uhW)
        (enum-set-difference . g$7495$c1uhW)
        (enum-set-constructor . g$7488$c1uhW)
        (enum-set-complement . g$7496$c1uhW)
        (enum-set->list . g$7489$c1uhW)
        (who-condition? . g$6823$c1uhW)
        (warning? . g$6734$c1uhW)
        (violation? . g$6776$c1uhW)
        (undefined-violation? . g$6900$c1uhW)
        (syntax-violation? . g$6884$c1uhW)
        (syntax-violation-subform . g$6886$c1uhW)
        (syntax-violation-form . g$6885$c1uhW)
        (syntax-violation . g$9161$c1uhW)
        (simple-conditions . g$12550$c1uhW)
        (serious-condition? . g$6748$c1uhW)
        (non-continuable-violation? . g$6838$c1uhW)
        (message-condition? . g$6719$c1uhW)
        (make-who-condition . g$6821$c1uhW)
        (make-warning . g$6733$c1uhW)
        (make-violation . g$6775$c1uhW)
        (make-undefined-violation . g$6899$c1uhW)
        (make-syntax-violation . g$6881$c1uhW)
        (make-serious-condition . g$6747$c1uhW)
        (make-non-continuable-violation . g$6837$c1uhW)
        (make-message-condition . g$6717$c1uhW)
        (make-lexical-violation . g$6865$c1uhW)
        (make-irritants-condition . g$6804$c1uhW)
        (make-implementation-restriction-violation . g$6851$c1uhW)
        (make-error . g$6761$c1uhW)
        (make-assertion-violation . g$6789$c1uhW)
        (lexical-violation? . g$6866$c1uhW)
        (irritants-condition? . g$6806$c1uhW)
        (implementation-restriction-violation? . g$6852$c1uhW)
        (error? . g$6762$c1uhW)
        (condition-who . g$6824$c1uhW)
        (condition-predicate . g$12549$c1uhW)
        (condition-message . g$6720$c1uhW)
        (condition-irritants . g$6807$c1uhW)
        (condition-accessor . g$12548$c1uhW)
        (condition . g$12547$c1uhW)
        (assertion-violation? . g$6790$c1uhW)
        (condition? . g$12546$c1uhW)
        (utf32->string . g$12545$c1uhW)
        (utf16->string . g$12544$c1uhW)
        (utf8->string . g$12543$c1uhW)
        (uint-list->bytevector . g$12542$c1uhW)
        (u8-list->bytevector . g$12541$c1uhW)
        (string->utf8 . g$12540$c1uhW)
        (string->utf32 . g$12539$c1uhW)
        (string->utf16 . g$12538$c1uhW)
        (sint-list->bytevector . g$12537$c1uhW)
        (native-endianness . g$6575$c1uhW)
        (bytevector? . g$12536$c1uhW)
        (bytevector=? . g$12535$c1uhW)
        (bytevector-uint-set! . g$12534$c1uhW)
        (bytevector-uint-ref . g$12533$c1uhW)
        (bytevector-u8-set! . g$12532$c1uhW)
        (bytevector-u8-ref . g$12531$c1uhW)
        (bytevector-u64-set! . g$6596$c1uhW)
        (bytevector-u64-ref . g$6592$c1uhW)
        (bytevector-u64-native-set! . g$6598$c1uhW)
        (bytevector-u64-native-ref . g$6594$c1uhW)
        (bytevector-u32-set! . g$6588$c1uhW)
        (bytevector-u32-ref . g$6584$c1uhW)
        (bytevector-u32-native-set! . g$6590$c1uhW)
        (bytevector-u32-native-ref . g$6586$c1uhW)
        (bytevector-u16-set! . g$6580$c1uhW)
        (bytevector-u16-ref . g$6576$c1uhW)
        (bytevector-u16-native-set! . g$6582$c1uhW)
        (bytevector-u16-native-ref . g$6578$c1uhW)
        (bytevector-sint-set! . g$12530$c1uhW)
        (bytevector-sint-ref . g$12529$c1uhW)
        (bytevector-s8-set! . g$12528$c1uhW)
        (bytevector-s8-ref . g$12527$c1uhW)
        (bytevector-s64-set! . g$6597$c1uhW)
        (bytevector-s64-ref . g$6593$c1uhW)
        (bytevector-s64-native-set! . g$6599$c1uhW)
        (bytevector-s64-native-ref . g$6595$c1uhW)
        (bytevector-s32-set! . g$6589$c1uhW)
        (bytevector-s32-ref . g$6585$c1uhW)
        (bytevector-s32-native-set! . g$6591$c1uhW)
        (bytevector-s32-native-ref . g$6587$c1uhW)
        (bytevector-s16-set! . g$6581$c1uhW)
        (bytevector-s16-ref . g$6577$c1uhW)
        (bytevector-s16-native-set! . g$6583$c1uhW)
        (bytevector-s16-native-ref . g$6579$c1uhW)
        (bytevector-length . g$12526$c1uhW)
        (bytevector-ieee-single-set! . g$12525$c1uhW)
        (bytevector-ieee-single-ref . g$12524$c1uhW)
        (bytevector-ieee-single-native-set! . g$6602$c1uhW)
        (bytevector-ieee-single-native-ref . g$6600$c1uhW)
        (bytevector-ieee-double-set! . g$12523$c1uhW)
        (bytevector-ieee-double-ref . g$12522$c1uhW)
        (bytevector-ieee-double-native-set! . g$6603$c1uhW)
        (bytevector-ieee-double-native-ref . g$6601$c1uhW)
        (bytevector-fill! . g$12521$c1uhW)
        (bytevector-copy! . g$12520$c1uhW)
        (bytevector-copy . g$12519$c1uhW)
        (bytevector->uint-list . g$12518$c1uhW)
        (bytevector->u8-list . g$12517$c1uhW)
        (bytevector->sint-list . g$12516$c1uhW)
        (no-nans-violation? . g$7199$c1uhW)
        (no-infinities-violation? . g$7185$c1uhW)
        (make-no-nans-violation . g$7198$c1uhW)
        (make-no-infinities-violation . g$7184$c1uhW)
        (real->flonum . g$12515$c1uhW)
        (flzero? . g$12514$c1uhW)
        (fltruncate . g$12513$c1uhW)
        (fltan . g$12512$c1uhW)
        (flsqrt . g$12511$c1uhW)
        (flsin . g$12510$c1uhW)
        (flround . g$12509$c1uhW)
        (flpositive? . g$12508$c1uhW)
        (flonum? . g$12507$c1uhW)
        (flodd? . g$12506$c1uhW)
        (flnumerator . g$12505$c1uhW)
        (flnegative? . g$12504$c1uhW)
        (flnan? . g$12503$c1uhW)
        (flmod0 . g$12502$c1uhW)
        (flmod . g$12501$c1uhW)
        (flmin . g$12500$c1uhW)
        (flmax . g$12499$c1uhW)
        (fllog . g$12498$c1uhW)
        (flinteger? . g$12497$c1uhW)
        (flinfinite? . g$12496$c1uhW)
        (flfloor . g$12495$c1uhW)
        (flfinite? . g$12494$c1uhW)
        (flexpt . g$12493$c1uhW)
        (flexp . g$12492$c1uhW)
        (fleven? . g$12491$c1uhW)
        (fldiv0-and-mod0 . g$12490$c1uhW)
        (fldiv0 . g$12489$c1uhW)
        (fldiv-and-mod . g$12488$c1uhW)
        (fldiv . g$12487$c1uhW)
        (fldenominator . g$12486$c1uhW)
        (flcos . g$12485$c1uhW)
        (flceiling . g$12484$c1uhW)
        (flatan . g$12483$c1uhW)
        (flasin . g$12482$c1uhW)
        (flacos . g$12481$c1uhW)
        (flabs . g$12480$c1uhW)
        (fl>? . g$12479$c1uhW)
        (fl>=? . g$12478$c1uhW)
        (fl=? . g$12477$c1uhW)
        (fl<? . g$12476$c1uhW)
        (fl<=? . g$12475$c1uhW)
        (fl/ . g$12474$c1uhW)
        (fl- . g$12473$c1uhW)
        (fl+ . g$12472$c1uhW)
        (fl* . g$12471$c1uhW)
        (fixnum->flonum . g$12470$c1uhW)
        (fxzero? . g$12469$c1uhW)
        (fxxor . g$12468$c1uhW)
        (fxrotate-bit-field . g$7131$c1uhW)
        (fxreverse-bit-field . g$12467$c1uhW)
        (fxpositive? . g$12466$c1uhW)
        (fxodd? . g$12465$c1uhW)
        (fxnot . g$12464$c1uhW)
        (fxnegative? . g$12463$c1uhW)
        (fxmod0 . g$12462$c1uhW)
        (fxmod . g$12461$c1uhW)
        (fxmin . g$12460$c1uhW)
        (fxmax . g$12459$c1uhW)
        (fxlength . g$12458$c1uhW)
        (fxior . g$12457$c1uhW)
        (fxif . g$7125$c1uhW)
        (fxfirst-bit-set . g$12456$c1uhW)
        (fxeven? . g$12455$c1uhW)
        (fxdiv0-and-mod0 . g$12454$c1uhW)
        (fxdiv0 . g$12453$c1uhW)
        (fxdiv-and-mod . g$12452$c1uhW)
        (fxdiv . g$12451$c1uhW)
        (fxcopy-bit-field . g$7128$c1uhW)
        (fxcopy-bit . g$7126$c1uhW)
        (fxbit-set? . g$12450$c1uhW)
        (fxbit-field . g$7127$c1uhW)
        (fxbit-count . g$12449$c1uhW)
        (fxarithmetic-shift-right . g$7130$c1uhW)
        (fxarithmetic-shift-left . g$7129$c1uhW)
        (fxarithmetic-shift . g$12448$c1uhW)
        (fxand . g$12447$c1uhW)
        (fx>? . g$12446$c1uhW)
        (fx>=? . g$12445$c1uhW)
        (fx=? . g$12444$c1uhW)
        (fx<? . g$12443$c1uhW)
        (fx<=? . g$12442$c1uhW)
        (fx-/carry . g$7123$c1uhW)
        (fx- . g$12441$c1uhW)
        (fx+/carry . g$7124$c1uhW)
        (fx+ . g$12440$c1uhW)
        (fx*/carry . g$7122$c1uhW)
        (fx* . g$12439$c1uhW)
        (greatest-fixnum . g$12438$c1uhW)
        (least-fixnum . g$12437$c1uhW)
        (fixnum-width . g$12436$c1uhW)
        (fixnum? . g$12435$c1uhW)
        (bitwise-rotate-bit-field . g$7096$c1uhW)
        (bitwise-reverse-bit-field . g$12434$c1uhW)
        (bitwise-length . g$12433$c1uhW)
        (bitwise-if . g$7090$c1uhW)
        (bitwise-first-bit-set . g$12432$c1uhW)
        (bitwise-copy-bit-field . g$7093$c1uhW)
        (bitwise-copy-bit . g$7091$c1uhW)
        (bitwise-bit-set? . g$12431$c1uhW)
        (bitwise-bit-field . g$7092$c1uhW)
        (bitwise-bit-count . g$12430$c1uhW)
        (bitwise-xor . g$12429$c1uhW)
        (bitwise-ior . g$12428$c1uhW)
        (bitwise-and . g$12427$c1uhW)
        (bitwise-not . g$12426$c1uhW)
        (bitwise-arithmetic-shift-right . g$7095$c1uhW)
        (bitwise-arithmetic-shift-left . g$7094$c1uhW)
        (bitwise-arithmetic-shift . g$12425$c1uhW)
        (zero? . g$6021$c1uhW)
        (vector? . g$12424$c1uhW)
        (vector-set! . g$12423$c1uhW)
        (vector-ref . g$12422$c1uhW)
        (vector-map . g$12421$c1uhW)
        (vector-length . g$12420$c1uhW)
        (vector-for-each . g$12419$c1uhW)
        (vector-fill! . g$12418$c1uhW)
        (vector->list . g$12417$c1uhW)
        (vector . g$12416$c1uhW)
        (values . g$12415$c1uhW)
        (truncate . g$12414$c1uhW)
        (tan . g$12413$c1uhW)
        (symbol? . g$12412$c1uhW)
        (symbol=? . g$6067$c1uhW)
        (symbol->string . g$12411$c1uhW)
        (substring . g$12410$c1uhW)
        (string? . g$12409$c1uhW)
        (string>? . g$6064$c1uhW)
        (string>=? . g$6066$c1uhW)
        (string=? . g$6062$c1uhW)
        (string<? . g$6063$c1uhW)
        (string<=? . g$6065$c1uhW)
        (string-ref . g$12408$c1uhW)
        (string-length . g$12407$c1uhW)
        (string-for-each . g$12406$c1uhW)
        (string-copy . g$12405$c1uhW)
        (string-append . g$12404$c1uhW)
        (string->symbol . g$12403$c1uhW)
        (string->number . g$12402$c1uhW)
        (string->list . g$12401$c1uhW)
        (string . g$12400$c1uhW)
        (sqrt . g$12399$c1uhW)
        (sin . g$12398$c1uhW)
        (round . g$12397$c1uhW)
        (reverse . g$12396$c1uhW)
        (real? . g$12395$c1uhW)
        (real-valued? . g$12394$c1uhW)
        (real-part . g$12393$c1uhW)
        (rationalize . g$6108$c1uhW)
        (rational? . g$12392$c1uhW)
        (rational-valued? . g$12391$c1uhW)
        (procedure? . g$12390$c1uhW)
        (positive? . g$6019$c1uhW)
        (pair? . g$12389$c1uhW)
        (odd? . g$6023$c1uhW)
        (numerator . g$12388$c1uhW)
        (number? . g$12387$c1uhW)
        (number->string . g$12386$c1uhW)
        (null? . g$12385$c1uhW)
        (not . g$12384$c1uhW)
        (negative? . g$6020$c1uhW)
        (nan? . g$12383$c1uhW)
        (min . g$6025$c1uhW)
        (max . g$6024$c1uhW)
        (map . g$5873$c1uhW)
        (make-vector . g$12382$c1uhW)
        (make-string . g$12381$c1uhW)
        (make-rectangular . g$12380$c1uhW)
        (make-polar . g$12379$c1uhW)
        (magnitude . g$12378$c1uhW)
        (log . g$12377$c1uhW)
        (list? . g$12376$c1uhW)
        (list-tail . g$5853$c1uhW)
        (list-ref . g$5854$c1uhW)
        (list->vector . g$12375$c1uhW)
        (list->string . g$12374$c1uhW)
        (list . g$12373$c1uhW)
        (length . g$12372$c1uhW)
        (lcm . g$6027$c1uhW)
        (integer? . g$12371$c1uhW)
        (integer-valued? . g$12370$c1uhW)
        (integer->char . g$12369$c1uhW)
        (infinite? . g$12368$c1uhW)
        (inexact? . g$12367$c1uhW)
        (inexact . g$12366$c1uhW)
        (imag-part . g$12365$c1uhW)
        (gcd . g$6026$c1uhW)
        (for-each . g$5874$c1uhW)
        (floor . g$12364$c1uhW)
        (finite? . g$12363$c1uhW)
        (expt . g$12362$c1uhW)
        (exp . g$12361$c1uhW)
        (exact? . g$12360$c1uhW)
        (exact-integer-sqrt . g$12359$c1uhW)
        (exact . g$12358$c1uhW)
        (even? . g$6022$c1uhW)
        (error . g$12357$c1uhW)
        (eqv? . g$12356$c1uhW)
        (equal? . g$12355$c1uhW)
        (eq? . g$12354$c1uhW)
        (dynamic-wind . g$12353$c1uhW)
        (div0-and-mod0 . g$12352$c1uhW)
        (mod0 . g$12351$c1uhW)
        (div0 . g$12350$c1uhW)
        (div-and-mod . g$12349$c1uhW)
        (mod . g$12348$c1uhW)
        (div . g$12347$c1uhW)
        (denominator . g$12346$c1uhW)
        (cos . g$12345$c1uhW)
        (cons . g$12344$c1uhW)
        (complex? . g$12343$c1uhW)
        (char? . g$12342$c1uhW)
        (char>? . g$6105$c1uhW)
        (char>=? . g$6107$c1uhW)
        (char=? . g$6103$c1uhW)
        (char<? . g$6104$c1uhW)
        (char<=? . g$6106$c1uhW)
        (char->integer . g$12341$c1uhW)
        (ceiling . g$12340$c1uhW)
        (call-with-values . g$12339$c1uhW)
        (call/cc . g$12338$c1uhW)
        (call-with-current-continuation . g$12337$c1uhW)
        (cddddr . g$6018$c1uhW)
        (cdddar . g$6017$c1uhW)
        (cddadr . g$6016$c1uhW)
        (cddaar . g$6015$c1uhW)
        (cdaddr . g$6014$c1uhW)
        (cdadar . g$6013$c1uhW)
        (cdaadr . g$6012$c1uhW)
        (cdaaar . g$6011$c1uhW)
        (cadddr . g$6010$c1uhW)
        (caddar . g$6009$c1uhW)
        (cadadr . g$6008$c1uhW)
        (cadaar . g$6007$c1uhW)
        (caaddr . g$6006$c1uhW)
        (caadar . g$6005$c1uhW)
        (caaadr . g$6004$c1uhW)
        (caaaar . g$6003$c1uhW)
        (cdddr . g$6002$c1uhW)
        (cddar . g$6001$c1uhW)
        (cdadr . g$6000$c1uhW)
        (cdaar . g$5999$c1uhW)
        (caddr . g$5998$c1uhW)
        (cadar . g$5997$c1uhW)
        (caadr . g$5996$c1uhW)
        (caaar . g$5995$c1uhW)
        (cddr . g$5994$c1uhW)
        (cdar . g$5993$c1uhW)
        (cadr . g$5992$c1uhW)
        (caar . g$5991$c1uhW)
        (cdr . g$12336$c1uhW)
        (car . g$12335$c1uhW)
        (boolean? . g$12334$c1uhW)
        (boolean=? . g$6068$c1uhW)
        (atan . g$12333$c1uhW)
        (assertion-violation . g$12332$c1uhW)
        (asin . g$12331$c1uhW)
        (apply . g$12330$c1uhW)
        (append . g$12329$c1uhW)
        (angle . g$12328$c1uhW)
        (acos . g$12327$c1uhW)
        (abs . g$12326$c1uhW)
        (/ . g$12325$c1uhW)
        (* . g$12324$c1uhW)
        (- . g$12323$c1uhW)
        (+ . g$12322$c1uhW)
        (>= . g$12321$c1uhW)
        (> . g$12320$c1uhW)
        (= . g$12319$c1uhW)
        (<= . g$12318$c1uhW)
        (< . g$12317$c1uhW)
        (&no-nans . g$12285$c1uhW)
        (&no-infinities . g$12284$c1uhW)
        (&i/o-encoding . g$12283$c1uhW)
        (&i/o-decoding . g$12282$c1uhW)
        (&i/o-port . g$12281$c1uhW)
        (&i/o-file-does-not-exist . g$12280$c1uhW)
        (&i/o-file-already-exists . g$12279$c1uhW)
        (&i/o-file-is-read-only . g$12278$c1uhW)
        (&i/o-file-protection . g$12277$c1uhW)
        (&i/o-filename . g$12276$c1uhW)
        (&i/o-invalid-position . g$12275$c1uhW)
        (&i/o-write . g$12274$c1uhW)
        (&i/o-read . g$12273$c1uhW)
        (&i/o . g$12272$c1uhW)
        (&non-continuable . g$12271$c1uhW)
        (&undefined . g$12270$c1uhW)
        (&syntax . g$12269$c1uhW)
        (&lexical . g$12268$c1uhW)
        (&implementation-restriction . g$12267$c1uhW)
        (&who . g$12266$c1uhW)
        (&irritants . g$12265$c1uhW)
        (&assertion . g$12264$c1uhW)
        (&violation . g$12263$c1uhW)
        (&error . g$12262$c1uhW)
        (&serious . g$12261$c1uhW)
        (&warning . g$12260$c1uhW)
        (&message . g$12259$c1uhW)
        (&condition . g$12258$c1uhW)
        (define-condition-type . g$12257$c1uhW)
        (define-enumeration . g$12256$c1uhW)
        (define-record-type . g$12255$c1uhW)
        (parent-rtd . g$12254$c1uhW)
        (nongenerative . g$12253$c1uhW)
        (opaque . g$12252$c1uhW)
        (sealed . g$12251$c1uhW)
        (protocol . g$12250$c1uhW)
        (parent . g$12249$c1uhW)
        (immutable . g$12248$c1uhW)
        (mutable . g$12247$c1uhW)
        (fields . g$12246$c1uhW)
        (error-handling-mode . g$12245$c1uhW)
        (file-options . g$12244$c1uhW)
        (buffer-mode . g$12243$c1uhW)
        (eol-style . g$12242$c1uhW)
        (guard . g$12241$c1uhW)
        (unsyntax-splicing . g$12235$c1uhW)
        (unsyntax . g$12234$c1uhW)
        (unquote-splicing . g$12233$c1uhW)
        (unquote . g$12232$c1uhW)
        (_ . g$12231$c1uhW)
        (else . g$12230$c1uhW)
        (=> . g$12229$c1uhW)
        (... . g$12228$c1uhW)
        (assert . g$12227$c1uhW)
        (endianness . g$12226$c1uhW)
        (or . g$12223$c1uhW)
        (and . g$12222$c1uhW)
        (do . g$12221$c1uhW)
        (cond . g$12220$c1uhW)
        (let* . g$12219$c1uhW)
        (let . g$12218$c1uhW)
        (identifier-syntax . g$12217$c1uhW)
        (with-syntax . g$12216$c1uhW)
        (quasisyntax . g$12215$c1uhW)
        (quasiquote . g$12214$c1uhW)
        (syntax-rules . g$12213$c1uhW)
        (let-values . g$12209$c1uhW)
        (let*-values . g$12208$c1uhW)
        (record-constructor-descriptor . g$12207$c1uhW)
        (record-type-descriptor . g$12206$c1uhW)
        (case . g$12204$c1uhW)
        (unless . g$12202$c1uhW)
        (when . g$12201$c1uhW)
        (if . g$12200$c1uhW)
        (letrec* . g$12199$c1uhW)
        (letrec . g$12198$c1uhW)
        (case-lambda . g$12196$c1uhW)
        (lambda . g$12195$c1uhW)
        (syntax . g$12194$c1uhW)
        (syntax-case . g$12193$c1uhW)
        (quote . g$12192$c1uhW)
        (letrec-syntax . g$12190$c1uhW)
        (let-syntax . g$12189$c1uhW)
        (set! . g$12188$c1uhW)
        (begin . g$12184$c1uhW)
        (define-syntax . g$12182$c1uhW)
        (define . g$12181$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12783$c1uhW
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$9168$c1uhW)
        (scheme-report-environment . g$9141$c1uhW)
        (quotient . g$6914$c1uhW)
        (null-environment . g$9140$c1uhW)
        (remainder . g$6915$c1uhW)
        (modulo . g$6916$c1uhW)
        (inexact->exact . g$6911$c1uhW)
        (force . g$6918$c1uhW)
        (exact->inexact . g$6912$c1uhW)
        (delay . g$12225$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12784$c1uhW
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$12221$c1uhW)
        (unless . g$12202$c1uhW)
        (when . g$12201$c1uhW)
        (case-lambda . g$12196$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12785$c1uhW
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$9143$c1uhW) (environment . g$9139$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12786$c1uhW
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12555$c1uhW) (set-car! . g$12554$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12787$c1uhW
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12557$c1uhW) (string-set! . g$12556$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12788$c1uhW
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12558$c1uhW) (command-line . g$12145$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12789$c1uhW
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$8763$c1uhW)
        (identifier? . g$9162$c1uhW)
        (generate-temporaries . g$9151$c1uhW)
        (free-identifier=? . g$9152$c1uhW)
        (syntax->datum . g$9164$c1uhW)
        (datum->syntax . g$9163$c1uhW)
        (bound-identifier=? . g$9153$c1uhW)
        (syntax-violation . g$9161$c1uhW)
        (unsyntax-splicing . g$12235$c1uhW)
        (unsyntax . g$12234$c1uhW)
        (_ . g$12231$c1uhW)
        (... . g$12228$c1uhW)
        (with-syntax . g$12216$c1uhW)
        (quasisyntax . g$12215$c1uhW)
        (syntax . g$12194$c1uhW)
        (syntax-case . g$12193$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12790$c1uhW
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6569$c1uhW)
        (file-exists? . g$6568$c1uhW)
        (make-i/o-write-error . g$7241$c1uhW)
        (make-i/o-read-error . g$7227$c1uhW)
        (make-i/o-port-error . g$7346$c1uhW)
        (make-i/o-invalid-position-error . g$7256$c1uhW)
        (make-i/o-filename-error . g$7273$c1uhW)
        (make-i/o-file-protection-error . g$7289$c1uhW)
        (make-i/o-file-is-read-only-error . g$7303$c1uhW)
        (make-i/o-file-does-not-exist-error . g$7331$c1uhW)
        (make-i/o-file-already-exists-error . g$7317$c1uhW)
        (make-i/o-error . g$7213$c1uhW)
        (i/o-write-error? . g$7242$c1uhW)
        (i/o-read-error? . g$7228$c1uhW)
        (i/o-port-error? . g$7348$c1uhW)
        (i/o-invalid-position-error? . g$7258$c1uhW)
        (i/o-error-position . g$7259$c1uhW)
        (i/o-filename-error? . g$7275$c1uhW)
        (i/o-file-protection-error? . g$7290$c1uhW)
        (i/o-file-is-read-only-error? . g$7304$c1uhW)
        (i/o-file-does-not-exist-error? . g$7332$c1uhW)
        (i/o-file-already-exists-error? . g$7318$c1uhW)
        (i/o-error? . g$7214$c1uhW)
        (i/o-error-port . g$7349$c1uhW)
        (i/o-error-filename . g$7276$c1uhW)
        (&i/o-port . g$12281$c1uhW)
        (&i/o-file-does-not-exist . g$12280$c1uhW)
        (&i/o-file-already-exists . g$12279$c1uhW)
        (&i/o-file-is-read-only . g$12278$c1uhW)
        (&i/o-file-protection . g$12277$c1uhW)
        (&i/o-filename . g$12276$c1uhW)
        (&i/o-invalid-position . g$12275$c1uhW)
        (&i/o-write . g$12274$c1uhW)
        (&i/o-read . g$12273$c1uhW)
        (&i/o . g$12272$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12791$c1uhW
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12645$c1uhW)
        (vector-sort . g$12644$c1uhW)
        (list-sort . g$6935$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12792$c1uhW
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$6021$c1uhW)
        (vector? . g$12424$c1uhW)
        (vector-set! . g$12423$c1uhW)
        (vector-ref . g$12422$c1uhW)
        (vector-map . g$12421$c1uhW)
        (vector-length . g$12420$c1uhW)
        (vector-for-each . g$12419$c1uhW)
        (vector-fill! . g$12418$c1uhW)
        (vector->list . g$12417$c1uhW)
        (vector . g$12416$c1uhW)
        (values . g$12415$c1uhW)
        (truncate . g$12414$c1uhW)
        (tan . g$12413$c1uhW)
        (symbol? . g$12412$c1uhW)
        (symbol=? . g$6067$c1uhW)
        (symbol->string . g$12411$c1uhW)
        (substring . g$12410$c1uhW)
        (string? . g$12409$c1uhW)
        (string>? . g$6064$c1uhW)
        (string>=? . g$6066$c1uhW)
        (string=? . g$6062$c1uhW)
        (string<? . g$6063$c1uhW)
        (string<=? . g$6065$c1uhW)
        (string-ref . g$12408$c1uhW)
        (string-length . g$12407$c1uhW)
        (string-for-each . g$12406$c1uhW)
        (string-copy . g$12405$c1uhW)
        (string-append . g$12404$c1uhW)
        (string->symbol . g$12403$c1uhW)
        (string->number . g$12402$c1uhW)
        (string->list . g$12401$c1uhW)
        (string . g$12400$c1uhW)
        (sqrt . g$12399$c1uhW)
        (sin . g$12398$c1uhW)
        (round . g$12397$c1uhW)
        (reverse . g$12396$c1uhW)
        (real? . g$12395$c1uhW)
        (real-valued? . g$12394$c1uhW)
        (real-part . g$12393$c1uhW)
        (rationalize . g$6108$c1uhW)
        (rational? . g$12392$c1uhW)
        (rational-valued? . g$12391$c1uhW)
        (procedure? . g$12390$c1uhW)
        (positive? . g$6019$c1uhW)
        (pair? . g$12389$c1uhW)
        (odd? . g$6023$c1uhW)
        (numerator . g$12388$c1uhW)
        (number? . g$12387$c1uhW)
        (number->string . g$12386$c1uhW)
        (null? . g$12385$c1uhW)
        (not . g$12384$c1uhW)
        (negative? . g$6020$c1uhW)
        (nan? . g$12383$c1uhW)
        (min . g$6025$c1uhW)
        (max . g$6024$c1uhW)
        (map . g$5873$c1uhW)
        (make-vector . g$12382$c1uhW)
        (make-string . g$12381$c1uhW)
        (make-rectangular . g$12380$c1uhW)
        (make-polar . g$12379$c1uhW)
        (magnitude . g$12378$c1uhW)
        (log . g$12377$c1uhW)
        (list? . g$12376$c1uhW)
        (list-tail . g$5853$c1uhW)
        (list-ref . g$5854$c1uhW)
        (list->vector . g$12375$c1uhW)
        (list->string . g$12374$c1uhW)
        (list . g$12373$c1uhW)
        (length . g$12372$c1uhW)
        (lcm . g$6027$c1uhW)
        (integer? . g$12371$c1uhW)
        (integer-valued? . g$12370$c1uhW)
        (integer->char . g$12369$c1uhW)
        (infinite? . g$12368$c1uhW)
        (inexact? . g$12367$c1uhW)
        (inexact . g$12366$c1uhW)
        (imag-part . g$12365$c1uhW)
        (gcd . g$6026$c1uhW)
        (for-each . g$5874$c1uhW)
        (floor . g$12364$c1uhW)
        (finite? . g$12363$c1uhW)
        (expt . g$12362$c1uhW)
        (exp . g$12361$c1uhW)
        (exact? . g$12360$c1uhW)
        (exact-integer-sqrt . g$12359$c1uhW)
        (exact . g$12358$c1uhW)
        (even? . g$6022$c1uhW)
        (error . g$12357$c1uhW)
        (eqv? . g$12356$c1uhW)
        (equal? . g$12355$c1uhW)
        (eq? . g$12354$c1uhW)
        (dynamic-wind . g$12353$c1uhW)
        (div0-and-mod0 . g$12352$c1uhW)
        (mod0 . g$12351$c1uhW)
        (div0 . g$12350$c1uhW)
        (div-and-mod . g$12349$c1uhW)
        (mod . g$12348$c1uhW)
        (div . g$12347$c1uhW)
        (denominator . g$12346$c1uhW)
        (cos . g$12345$c1uhW)
        (cons . g$12344$c1uhW)
        (complex? . g$12343$c1uhW)
        (char? . g$12342$c1uhW)
        (char>? . g$6105$c1uhW)
        (char>=? . g$6107$c1uhW)
        (char=? . g$6103$c1uhW)
        (char<? . g$6104$c1uhW)
        (char<=? . g$6106$c1uhW)
        (char->integer . g$12341$c1uhW)
        (ceiling . g$12340$c1uhW)
        (call-with-values . g$12339$c1uhW)
        (call/cc . g$12338$c1uhW)
        (call-with-current-continuation . g$12337$c1uhW)
        (cddddr . g$6018$c1uhW)
        (cdddar . g$6017$c1uhW)
        (cddadr . g$6016$c1uhW)
        (cddaar . g$6015$c1uhW)
        (cdaddr . g$6014$c1uhW)
        (cdadar . g$6013$c1uhW)
        (cdaadr . g$6012$c1uhW)
        (cdaaar . g$6011$c1uhW)
        (cadddr . g$6010$c1uhW)
        (caddar . g$6009$c1uhW)
        (cadadr . g$6008$c1uhW)
        (cadaar . g$6007$c1uhW)
        (caaddr . g$6006$c1uhW)
        (caadar . g$6005$c1uhW)
        (caaadr . g$6004$c1uhW)
        (caaaar . g$6003$c1uhW)
        (cdddr . g$6002$c1uhW)
        (cddar . g$6001$c1uhW)
        (cdadr . g$6000$c1uhW)
        (cdaar . g$5999$c1uhW)
        (caddr . g$5998$c1uhW)
        (cadar . g$5997$c1uhW)
        (caadr . g$5996$c1uhW)
        (caaar . g$5995$c1uhW)
        (cddr . g$5994$c1uhW)
        (cdar . g$5993$c1uhW)
        (cadr . g$5992$c1uhW)
        (caar . g$5991$c1uhW)
        (cdr . g$12336$c1uhW)
        (car . g$12335$c1uhW)
        (boolean? . g$12334$c1uhW)
        (boolean=? . g$6068$c1uhW)
        (atan . g$12333$c1uhW)
        (assertion-violation . g$12332$c1uhW)
        (asin . g$12331$c1uhW)
        (apply . g$12330$c1uhW)
        (append . g$12329$c1uhW)
        (angle . g$12328$c1uhW)
        (acos . g$12327$c1uhW)
        (abs . g$12326$c1uhW)
        (/ . g$12325$c1uhW)
        (* . g$12324$c1uhW)
        (- . g$12323$c1uhW)
        (+ . g$12322$c1uhW)
        (>= . g$12321$c1uhW)
        (> . g$12320$c1uhW)
        (= . g$12319$c1uhW)
        (<= . g$12318$c1uhW)
        (< . g$12317$c1uhW)
        (unquote-splicing . g$12233$c1uhW)
        (unquote . g$12232$c1uhW)
        (_ . g$12231$c1uhW)
        (else . g$12230$c1uhW)
        (=> . g$12229$c1uhW)
        (... . g$12228$c1uhW)
        (assert . g$12227$c1uhW)
        (or . g$12223$c1uhW)
        (and . g$12222$c1uhW)
        (cond . g$12220$c1uhW)
        (let* . g$12219$c1uhW)
        (let . g$12218$c1uhW)
        (identifier-syntax . g$12217$c1uhW)
        (quasiquote . g$12214$c1uhW)
        (syntax-rules . g$12213$c1uhW)
        (let-values . g$12209$c1uhW)
        (let*-values . g$12208$c1uhW)
        (case . g$12204$c1uhW)
        (if . g$12200$c1uhW)
        (letrec* . g$12199$c1uhW)
        (letrec . g$12198$c1uhW)
        (lambda . g$12195$c1uhW)
        (quote . g$12192$c1uhW)
        (letrec-syntax . g$12190$c1uhW)
        (let-syntax . g$12189$c1uhW)
        (set! . g$12188$c1uhW)
        (begin . g$12184$c1uhW)
        (define-syntax . g$12182$c1uhW)
        (define . g$12181$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12793$c1uhW
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5878$c1uhW)
        (remv . g$5879$c1uhW)
        (remp . g$5859$c1uhW)
        (remq . g$5880$c1uhW)
        (partition . g$5858$c1uhW)
        (memv . g$5866$c1uhW)
        (memq . g$5865$c1uhW)
        (memp . g$5868$c1uhW)
        (member . g$5867$c1uhW)
        (exists . g$5872$c1uhW)
        (for-all . g$5871$c1uhW)
        (fold-right . g$5877$c1uhW)
        (fold-left . g$5876$c1uhW)
        (find . g$5857$c1uhW)
        (filter . g$5860$c1uhW)
        (cons* . g$5875$c1uhW)
        (assv . g$5862$c1uhW)
        (assq . g$5861$c1uhW)
        (assp . g$5864$c1uhW)
        (assoc . g$5863$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12794$c1uhW
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7420$c1uhW)
        (call-with-input-file . g$7419$c1uhW)
        (write-char . g$7401$c1uhW)
        (write . g$12631$c1uhW)
        (with-output-to-file . g$7418$c1uhW)
        (with-input-from-file . g$7417$c1uhW)
        (read-char . g$7400$c1uhW)
        (read . g$12630$c1uhW)
        (peek-char . g$7399$c1uhW)
        (open-output-file . g$12629$c1uhW)
        (open-input-file . g$12628$c1uhW)
        (newline . g$7421$c1uhW)
        (display . g$12627$c1uhW)
        (close-output-port . g$12626$c1uhW)
        (close-input-port . g$12625$c1uhW)
        (eof-object? . g$12624$c1uhW)
        (eof-object . g$12623$c1uhW)
        (current-error-port . g$12622$c1uhW)
        (current-output-port . g$12621$c1uhW)
        (current-input-port . g$12620$c1uhW)
        (output-port? . g$12619$c1uhW)
        (input-port? . g$12618$c1uhW)
        (make-i/o-write-error . g$7241$c1uhW)
        (make-i/o-read-error . g$7227$c1uhW)
        (make-i/o-port-error . g$7346$c1uhW)
        (make-i/o-invalid-position-error . g$7256$c1uhW)
        (make-i/o-filename-error . g$7273$c1uhW)
        (make-i/o-file-protection-error . g$7289$c1uhW)
        (make-i/o-file-is-read-only-error . g$7303$c1uhW)
        (make-i/o-file-does-not-exist-error . g$7331$c1uhW)
        (make-i/o-file-already-exists-error . g$7317$c1uhW)
        (make-i/o-error . g$7213$c1uhW)
        (i/o-write-error? . g$7242$c1uhW)
        (i/o-read-error? . g$7228$c1uhW)
        (i/o-port-error? . g$7348$c1uhW)
        (i/o-invalid-position-error? . g$7258$c1uhW)
        (i/o-error-position . g$7259$c1uhW)
        (i/o-filename-error? . g$7275$c1uhW)
        (i/o-file-protection-error? . g$7290$c1uhW)
        (i/o-file-is-read-only-error? . g$7304$c1uhW)
        (i/o-file-does-not-exist-error? . g$7332$c1uhW)
        (i/o-file-already-exists-error? . g$7318$c1uhW)
        (i/o-error? . g$7214$c1uhW)
        (i/o-error-port . g$7349$c1uhW)
        (i/o-error-filename . g$7276$c1uhW)
        (&i/o-port . g$12281$c1uhW)
        (&i/o-file-does-not-exist . g$12280$c1uhW)
        (&i/o-file-already-exists . g$12279$c1uhW)
        (&i/o-file-is-read-only . g$12278$c1uhW)
        (&i/o-file-protection . g$12277$c1uhW)
        (&i/o-filename . g$12276$c1uhW)
        (&i/o-invalid-position . g$12275$c1uhW)
        (&i/o-write . g$12274$c1uhW)
        (&i/o-read . g$12273$c1uhW)
        (&i/o . g$12272$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12795$c1uhW
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12578$c1uhW)
        (utf32->string . g$12545$c1uhW)
        (utf16->string . g$12544$c1uhW)
        (utf8->string . g$12543$c1uhW)
        (uint-list->bytevector . g$12542$c1uhW)
        (u8-list->bytevector . g$12541$c1uhW)
        (string->utf8 . g$12540$c1uhW)
        (string->utf32 . g$12539$c1uhW)
        (string->utf16 . g$12538$c1uhW)
        (sint-list->bytevector . g$12537$c1uhW)
        (native-endianness . g$6575$c1uhW)
        (bytevector? . g$12536$c1uhW)
        (bytevector=? . g$12535$c1uhW)
        (bytevector-uint-set! . g$12534$c1uhW)
        (bytevector-uint-ref . g$12533$c1uhW)
        (bytevector-u8-set! . g$12532$c1uhW)
        (bytevector-u8-ref . g$12531$c1uhW)
        (bytevector-u64-set! . g$6596$c1uhW)
        (bytevector-u64-ref . g$6592$c1uhW)
        (bytevector-u64-native-set! . g$6598$c1uhW)
        (bytevector-u64-native-ref . g$6594$c1uhW)
        (bytevector-u32-set! . g$6588$c1uhW)
        (bytevector-u32-ref . g$6584$c1uhW)
        (bytevector-u32-native-set! . g$6590$c1uhW)
        (bytevector-u32-native-ref . g$6586$c1uhW)
        (bytevector-u16-set! . g$6580$c1uhW)
        (bytevector-u16-ref . g$6576$c1uhW)
        (bytevector-u16-native-set! . g$6582$c1uhW)
        (bytevector-u16-native-ref . g$6578$c1uhW)
        (bytevector-sint-set! . g$12530$c1uhW)
        (bytevector-sint-ref . g$12529$c1uhW)
        (bytevector-s8-set! . g$12528$c1uhW)
        (bytevector-s8-ref . g$12527$c1uhW)
        (bytevector-s64-set! . g$6597$c1uhW)
        (bytevector-s64-ref . g$6593$c1uhW)
        (bytevector-s64-native-set! . g$6599$c1uhW)
        (bytevector-s64-native-ref . g$6595$c1uhW)
        (bytevector-s32-set! . g$6589$c1uhW)
        (bytevector-s32-ref . g$6585$c1uhW)
        (bytevector-s32-native-set! . g$6591$c1uhW)
        (bytevector-s32-native-ref . g$6587$c1uhW)
        (bytevector-s16-set! . g$6581$c1uhW)
        (bytevector-s16-ref . g$6577$c1uhW)
        (bytevector-s16-native-set! . g$6583$c1uhW)
        (bytevector-s16-native-ref . g$6579$c1uhW)
        (bytevector-length . g$12526$c1uhW)
        (bytevector-ieee-single-set! . g$12525$c1uhW)
        (bytevector-ieee-single-ref . g$12524$c1uhW)
        (bytevector-ieee-single-native-set! . g$6602$c1uhW)
        (bytevector-ieee-single-native-ref . g$6600$c1uhW)
        (bytevector-ieee-double-set! . g$12523$c1uhW)
        (bytevector-ieee-double-ref . g$12522$c1uhW)
        (bytevector-ieee-double-native-set! . g$6603$c1uhW)
        (bytevector-ieee-double-native-ref . g$6601$c1uhW)
        (bytevector-fill! . g$12521$c1uhW)
        (bytevector-copy! . g$12520$c1uhW)
        (bytevector-copy . g$12519$c1uhW)
        (bytevector->uint-list . g$12518$c1uhW)
        (bytevector->u8-list . g$12517$c1uhW)
        (bytevector->sint-list . g$12516$c1uhW)
        (endianness . g$12226$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12796$c1uhW
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12681$c1uhW)
        (string-titlecase . g$12680$c1uhW)
        (string-normalize-nfkd . g$12679$c1uhW)
        (string-normalize-nfkc . g$12678$c1uhW)
        (string-normalize-nfd . g$12677$c1uhW)
        (string-normalize-nfc . g$12676$c1uhW)
        (string-foldcase . g$12675$c1uhW)
        (string-downcase . g$12674$c1uhW)
        (string-ci>? . g$6995$c1uhW)
        (string-ci>=? . g$6997$c1uhW)
        (string-ci=? . g$6993$c1uhW)
        (string-ci<? . g$6994$c1uhW)
        (string-ci<=? . g$6996$c1uhW)
        (char-whitespace? . g$12673$c1uhW)
        (char-upper-case? . g$12672$c1uhW)
        (char-title-case? . g$12671$c1uhW)
        (char-numeric? . g$12670$c1uhW)
        (char-lower-case? . g$12669$c1uhW)
        (char-general-category . g$12668$c1uhW)
        (char-upcase . g$12667$c1uhW)
        (char-titlecase . g$12666$c1uhW)
        (char-foldcase . g$12665$c1uhW)
        (char-downcase . g$12664$c1uhW)
        (char-ci>? . g$7034$c1uhW)
        (char-ci>=? . g$7036$c1uhW)
        (char-ci=? . g$7032$c1uhW)
        (char-ci<? . g$7033$c1uhW)
        (char-ci<=? . g$7035$c1uhW)
        (char-alphabetic? . g$12663$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12797$c1uhW
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12553$c1uhW)
        (raise-continuable . g$12552$c1uhW)
        (raise . g$12551$c1uhW)
        (guard . g$12241$c1uhW)
        (else . g$12230$c1uhW)
        (=> . g$12229$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12798$c1uhW
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7096$c1uhW)
        (bitwise-reverse-bit-field . g$12434$c1uhW)
        (bitwise-length . g$12433$c1uhW)
        (bitwise-if . g$7090$c1uhW)
        (bitwise-first-bit-set . g$12432$c1uhW)
        (bitwise-copy-bit-field . g$7093$c1uhW)
        (bitwise-copy-bit . g$7091$c1uhW)
        (bitwise-bit-set? . g$12431$c1uhW)
        (bitwise-bit-field . g$7092$c1uhW)
        (bitwise-bit-count . g$12430$c1uhW)
        (bitwise-xor . g$12429$c1uhW)
        (bitwise-ior . g$12428$c1uhW)
        (bitwise-and . g$12427$c1uhW)
        (bitwise-not . g$12426$c1uhW)
        (bitwise-arithmetic-shift-right . g$7095$c1uhW)
        (bitwise-arithmetic-shift-left . g$7094$c1uhW)
        (bitwise-arithmetic-shift . g$12425$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12799$c1uhW
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12469$c1uhW)
        (fxxor . g$12468$c1uhW)
        (fxrotate-bit-field . g$7131$c1uhW)
        (fxreverse-bit-field . g$12467$c1uhW)
        (fxpositive? . g$12466$c1uhW)
        (fxodd? . g$12465$c1uhW)
        (fxnot . g$12464$c1uhW)
        (fxnegative? . g$12463$c1uhW)
        (fxmod0 . g$12462$c1uhW)
        (fxmod . g$12461$c1uhW)
        (fxmin . g$12460$c1uhW)
        (fxmax . g$12459$c1uhW)
        (fxlength . g$12458$c1uhW)
        (fxior . g$12457$c1uhW)
        (fxif . g$7125$c1uhW)
        (fxfirst-bit-set . g$12456$c1uhW)
        (fxeven? . g$12455$c1uhW)
        (fxdiv0-and-mod0 . g$12454$c1uhW)
        (fxdiv0 . g$12453$c1uhW)
        (fxdiv-and-mod . g$12452$c1uhW)
        (fxdiv . g$12451$c1uhW)
        (fxcopy-bit-field . g$7128$c1uhW)
        (fxcopy-bit . g$7126$c1uhW)
        (fxbit-set? . g$12450$c1uhW)
        (fxbit-field . g$7127$c1uhW)
        (fxbit-count . g$12449$c1uhW)
        (fxarithmetic-shift-right . g$7130$c1uhW)
        (fxarithmetic-shift-left . g$7129$c1uhW)
        (fxarithmetic-shift . g$12448$c1uhW)
        (fxand . g$12447$c1uhW)
        (fx>? . g$12446$c1uhW)
        (fx>=? . g$12445$c1uhW)
        (fx=? . g$12444$c1uhW)
        (fx<? . g$12443$c1uhW)
        (fx<=? . g$12442$c1uhW)
        (fx-/carry . g$7123$c1uhW)
        (fx- . g$12441$c1uhW)
        (fx+/carry . g$7124$c1uhW)
        (fx+ . g$12440$c1uhW)
        (fx*/carry . g$7122$c1uhW)
        (fx* . g$12439$c1uhW)
        (greatest-fixnum . g$12438$c1uhW)
        (least-fixnum . g$12437$c1uhW)
        (fixnum-width . g$12436$c1uhW)
        (fixnum? . g$12435$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12800$c1uhW
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7199$c1uhW)
        (no-infinities-violation? . g$7185$c1uhW)
        (make-no-nans-violation . g$7198$c1uhW)
        (make-no-infinities-violation . g$7184$c1uhW)
        (real->flonum . g$12515$c1uhW)
        (flzero? . g$12514$c1uhW)
        (fltruncate . g$12513$c1uhW)
        (fltan . g$12512$c1uhW)
        (flsqrt . g$12511$c1uhW)
        (flsin . g$12510$c1uhW)
        (flround . g$12509$c1uhW)
        (flpositive? . g$12508$c1uhW)
        (flonum? . g$12507$c1uhW)
        (flodd? . g$12506$c1uhW)
        (flnumerator . g$12505$c1uhW)
        (flnegative? . g$12504$c1uhW)
        (flnan? . g$12503$c1uhW)
        (flmod0 . g$12502$c1uhW)
        (flmod . g$12501$c1uhW)
        (flmin . g$12500$c1uhW)
        (flmax . g$12499$c1uhW)
        (fllog . g$12498$c1uhW)
        (flinteger? . g$12497$c1uhW)
        (flinfinite? . g$12496$c1uhW)
        (flfloor . g$12495$c1uhW)
        (flfinite? . g$12494$c1uhW)
        (flexpt . g$12493$c1uhW)
        (flexp . g$12492$c1uhW)
        (fleven? . g$12491$c1uhW)
        (fldiv0-and-mod0 . g$12490$c1uhW)
        (fldiv0 . g$12489$c1uhW)
        (fldiv-and-mod . g$12488$c1uhW)
        (fldiv . g$12487$c1uhW)
        (fldenominator . g$12486$c1uhW)
        (flcos . g$12485$c1uhW)
        (flceiling . g$12484$c1uhW)
        (flatan . g$12483$c1uhW)
        (flasin . g$12482$c1uhW)
        (flacos . g$12481$c1uhW)
        (flabs . g$12480$c1uhW)
        (fl>? . g$12479$c1uhW)
        (fl>=? . g$12478$c1uhW)
        (fl=? . g$12477$c1uhW)
        (fl<? . g$12476$c1uhW)
        (fl<=? . g$12475$c1uhW)
        (fl/ . g$12474$c1uhW)
        (fl- . g$12473$c1uhW)
        (fl+ . g$12472$c1uhW)
        (fl* . g$12471$c1uhW)
        (fixnum->flonum . g$12470$c1uhW)
        (&no-nans . g$12285$c1uhW)
        (&no-infinities . g$12284$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12801$c1uhW
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12643$c1uhW)
        (string-ci-hash . g$12642$c1uhW)
        (string-hash . g$12641$c1uhW)
        (equal-hash . g$12640$c1uhW)
        (hashtable-equivalence-function . g$12639$c1uhW)
        (make-hashtable . g$12638$c1uhW)
        (hashtable-hash-function . g$12637$c1uhW)
        (make-eqv-hashtable . g$6537$c1uhW)
        (make-eq-hashtable . g$6536$c1uhW)
        (hashtable? . g$12636$c1uhW)
        (hashtable-update! . g$6543$c1uhW)
        (hashtable-size . g$6538$c1uhW)
        (hashtable-set! . g$6540$c1uhW)
        (hashtable-ref . g$6539$c1uhW)
        (hashtable-mutable? . g$12635$c1uhW)
        (hashtable-keys . g$12634$c1uhW)
        (hashtable-entries . g$12633$c1uhW)
        (hashtable-delete! . g$6541$c1uhW)
        (hashtable-copy . g$12632$c1uhW)
        (hashtable-contains? . g$6542$c1uhW)
        (hashtable-clear! . g$6544$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12802$c1uhW
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12624$c1uhW)
        (eof-object . g$12623$c1uhW)
        (current-error-port . g$12622$c1uhW)
        (current-output-port . g$12621$c1uhW)
        (current-input-port . g$12620$c1uhW)
        (output-port? . g$12619$c1uhW)
        (input-port? . g$12618$c1uhW)
        (utf-8-codec . g$12617$c1uhW)
        (utf-16-codec . g$12616$c1uhW)
        (transcoder-error-handling-mode . g$12615$c1uhW)
        (transcoder-eol-style . g$12614$c1uhW)
        (transcoder-codec . g$12613$c1uhW)
        (transcoded-port . g$12612$c1uhW)
        (textual-port? . g$12611$c1uhW)
        (string->bytevector . g$12610$c1uhW)
        (standard-output-port . g$12609$c1uhW)
        (standard-input-port . g$12608$c1uhW)
        (standard-error-port . g$12607$c1uhW)
        (set-port-position! . g$12606$c1uhW)
        (put-u8 . g$12605$c1uhW)
        (put-string . g$12604$c1uhW)
        (put-datum . g$12603$c1uhW)
        (put-char . g$12602$c1uhW)
        (put-bytevector . g$12601$c1uhW)
        (port? . g$7386$c1uhW)
        (port-transcoder . g$12600$c1uhW)
        (port-position . g$12599$c1uhW)
        (port-has-set-port-position!? . g$12598$c1uhW)
        (port-has-port-position? . g$12597$c1uhW)
        (port-eof? . g$12596$c1uhW)
        (output-port-buffer-mode . g$12595$c1uhW)
        (open-string-output-port . g$7385$c1uhW)
        (open-string-input-port . g$12594$c1uhW)
        (open-file-output-port . g$12593$c1uhW)
        (open-file-input/output-port . g$12592$c1uhW)
        (open-file-input-port . g$12591$c1uhW)
        (open-bytevector-output-port . g$12590$c1uhW)
        (open-bytevector-input-port . g$12589$c1uhW)
        (native-transcoder . g$12588$c1uhW)
        (native-eol-style . g$12587$c1uhW)
        (make-transcoder . g$12586$c1uhW)
        (latin-1-codec . g$12585$c1uhW)
        (make-i/o-write-error . g$7241$c1uhW)
        (make-i/o-read-error . g$7227$c1uhW)
        (make-i/o-port-error . g$7346$c1uhW)
        (make-i/o-invalid-position-error . g$7256$c1uhW)
        (make-i/o-filename-error . g$7273$c1uhW)
        (make-i/o-file-protection-error . g$7289$c1uhW)
        (make-i/o-file-is-read-only-error . g$7303$c1uhW)
        (make-i/o-file-does-not-exist-error . g$7331$c1uhW)
        (make-i/o-file-already-exists-error . g$7317$c1uhW)
        (make-i/o-error . g$7213$c1uhW)
        (make-i/o-encoding-error . g$7377$c1uhW)
        (make-i/o-decoding-error . g$7362$c1uhW)
        (make-custom-textual-output-port . g$12584$c1uhW)
        (make-custom-textual-input/output-port . g$12583$c1uhW)
        (make-custom-textual-input-port . g$12582$c1uhW)
        (make-custom-binary-output-port . g$12581$c1uhW)
        (make-custom-binary-input/output-port . g$12580$c1uhW)
        (make-custom-binary-input-port . g$12579$c1uhW)
        (lookahead-u8 . g$12577$c1uhW)
        (lookahead-char . g$12576$c1uhW)
        (i/o-write-error? . g$7242$c1uhW)
        (i/o-read-error? . g$7228$c1uhW)
        (i/o-port-error? . g$7348$c1uhW)
        (i/o-invalid-position-error? . g$7258$c1uhW)
        (i/o-error-position . g$7259$c1uhW)
        (i/o-filename-error? . g$7275$c1uhW)
        (i/o-file-protection-error? . g$7290$c1uhW)
        (i/o-file-is-read-only-error? . g$7304$c1uhW)
        (i/o-file-does-not-exist-error? . g$7332$c1uhW)
        (i/o-file-already-exists-error? . g$7318$c1uhW)
        (i/o-error? . g$7214$c1uhW)
        (i/o-error-port . g$7349$c1uhW)
        (i/o-error-filename . g$7276$c1uhW)
        (i/o-encoding-error? . g$7379$c1uhW)
        (i/o-encoding-error-char . g$7380$c1uhW)
        (i/o-decoding-error? . g$7363$c1uhW)
        (get-u8 . g$12575$c1uhW)
        (get-string-n! . g$12574$c1uhW)
        (get-string-n . g$12573$c1uhW)
        (get-string-all . g$12572$c1uhW)
        (get-line . g$12571$c1uhW)
        (get-datum . g$12570$c1uhW)
        (get-char . g$12569$c1uhW)
        (get-bytevector-some . g$12568$c1uhW)
        (get-bytevector-n! . g$12567$c1uhW)
        (get-bytevector-n . g$12566$c1uhW)
        (get-bytevector-all . g$12565$c1uhW)
        (flush-output-port . g$12564$c1uhW)
        (close-port . g$12563$c1uhW)
        (call-with-string-output-port . g$7387$c1uhW)
        (call-with-port . g$7388$c1uhW)
        (call-with-bytevector-output-port . g$12562$c1uhW)
        (bytevector->string . g$12561$c1uhW)
        (buffer-mode? . g$12560$c1uhW)
        (binary-port? . g$12559$c1uhW)
        (&i/o-encoding . g$12283$c1uhW)
        (&i/o-decoding . g$12282$c1uhW)
        (&i/o-port . g$12281$c1uhW)
        (&i/o-file-does-not-exist . g$12280$c1uhW)
        (&i/o-file-already-exists . g$12279$c1uhW)
        (&i/o-file-is-read-only . g$12278$c1uhW)
        (&i/o-file-protection . g$12277$c1uhW)
        (&i/o-filename . g$12276$c1uhW)
        (&i/o-invalid-position . g$12275$c1uhW)
        (&i/o-write . g$12274$c1uhW)
        (&i/o-read . g$12273$c1uhW)
        (&i/o . g$12272$c1uhW)
        (error-handling-mode . g$12245$c1uhW)
        (file-options . g$12244$c1uhW)
        (buffer-mode . g$12243$c1uhW)
        (eol-style . g$12242$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12803$c1uhW
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7485$c1uhW)
        (enum-set=? . g$7492$c1uhW)
        (enum-set-universe . g$7486$c1uhW)
        (enum-set-union . g$7493$c1uhW)
        (enum-set-subset? . g$7491$c1uhW)
        (enum-set-projection . g$7497$c1uhW)
        (enum-set-member? . g$7490$c1uhW)
        (enum-set-intersection . g$7494$c1uhW)
        (enum-set-indexer . g$7487$c1uhW)
        (enum-set-difference . g$7495$c1uhW)
        (enum-set-constructor . g$7488$c1uhW)
        (enum-set-complement . g$7496$c1uhW)
        (enum-set->list . g$7489$c1uhW)
        (define-enumeration . g$12256$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12804$c1uhW
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6823$c1uhW)
        (warning? . g$6734$c1uhW)
        (violation? . g$6776$c1uhW)
        (undefined-violation? . g$6900$c1uhW)
        (syntax-violation? . g$6884$c1uhW)
        (syntax-violation-subform . g$6886$c1uhW)
        (syntax-violation-form . g$6885$c1uhW)
        (syntax-violation . g$9161$c1uhW)
        (simple-conditions . g$12550$c1uhW)
        (serious-condition? . g$6748$c1uhW)
        (non-continuable-violation? . g$6838$c1uhW)
        (message-condition? . g$6719$c1uhW)
        (make-who-condition . g$6821$c1uhW)
        (make-warning . g$6733$c1uhW)
        (make-violation . g$6775$c1uhW)
        (make-undefined-violation . g$6899$c1uhW)
        (make-syntax-violation . g$6881$c1uhW)
        (make-serious-condition . g$6747$c1uhW)
        (make-non-continuable-violation . g$6837$c1uhW)
        (make-message-condition . g$6717$c1uhW)
        (make-lexical-violation . g$6865$c1uhW)
        (make-irritants-condition . g$6804$c1uhW)
        (make-implementation-restriction-violation . g$6851$c1uhW)
        (make-error . g$6761$c1uhW)
        (make-assertion-violation . g$6789$c1uhW)
        (lexical-violation? . g$6866$c1uhW)
        (irritants-condition? . g$6806$c1uhW)
        (implementation-restriction-violation? . g$6852$c1uhW)
        (error? . g$6762$c1uhW)
        (condition-who . g$6824$c1uhW)
        (condition-predicate . g$12549$c1uhW)
        (condition-message . g$6720$c1uhW)
        (condition-irritants . g$6807$c1uhW)
        (condition-accessor . g$12548$c1uhW)
        (condition . g$12547$c1uhW)
        (assertion-violation? . g$6790$c1uhW)
        (condition? . g$12546$c1uhW)
        (&non-continuable . g$12271$c1uhW)
        (&undefined . g$12270$c1uhW)
        (&syntax . g$12269$c1uhW)
        (&lexical . g$12268$c1uhW)
        (&implementation-restriction . g$12267$c1uhW)
        (&who . g$12266$c1uhW)
        (&irritants . g$12265$c1uhW)
        (&assertion . g$12264$c1uhW)
        (&violation . g$12263$c1uhW)
        (&error . g$12262$c1uhW)
        (&serious . g$12261$c1uhW)
        (&warning . g$12260$c1uhW)
        (&message . g$12259$c1uhW)
        (&condition . g$12258$c1uhW)
        (define-condition-type . g$12257$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12805$c1uhW
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12655$c1uhW)
        (record-type-uid . g$12654$c1uhW)
        (record-type-sealed? . g$12653$c1uhW)
        (record-type-parent . g$12652$c1uhW)
        (record-type-opaque? . g$12651$c1uhW)
        (record-type-name . g$12650$c1uhW)
        (record-type-generative? . g$12649$c1uhW)
        (record-type-field-names . g$12648$c1uhW)
        (record-rtd . g$12647$c1uhW)
        (record-field-mutable? . g$12646$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12806$c1uhW
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12662$c1uhW)
        (record-predicate . g$12661$c1uhW)
        (record-mutator . g$12660$c1uhW)
        (record-constructor . g$12659$c1uhW)
        (record-accessor . g$12658$c1uhW)
        (make-record-type-descriptor . g$12657$c1uhW)
        (make-record-constructor-descriptor . g$12656$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12807$c1uhW
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$12255$c1uhW)
        (parent-rtd . g$12254$c1uhW)
        (nongenerative . g$12253$c1uhW)
        (opaque . g$12252$c1uhW)
        (sealed . g$12251$c1uhW)
        (protocol . g$12250$c1uhW)
        (parent . g$12249$c1uhW)
        (immutable . g$12248$c1uhW)
        (mutable . g$12247$c1uhW)
        (fields . g$12246$c1uhW)
        (record-constructor-descriptor . g$12207$c1uhW)
        (record-type-descriptor . g$12206$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$c1uhW
      'g$12808$c1uhW
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$9033$c1uhW)
        (&no-nans-rcd . g$12772$c1uhW)
        (&no-nans-rtd . g$12771$c1uhW)
        (&no-infinities-rcd . g$12770$c1uhW)
        (&no-infinities-rtd . g$12769$c1uhW)
        (&i/o-encoding-rcd . g$12768$c1uhW)
        (&i/o-encoding-rtd . g$12767$c1uhW)
        (&i/o-decoding-rcd . g$12766$c1uhW)
        (&i/o-decoding-rtd . g$12765$c1uhW)
        (&i/o-port-rcd . g$12764$c1uhW)
        (&i/o-port-rtd . g$12763$c1uhW)
        (&i/o-file-does-not-exist-rcd . g$12762$c1uhW)
        (&i/o-file-does-not-exist-rtd . g$12761$c1uhW)
        (&i/o-file-already-exists-rcd . g$12760$c1uhW)
        (&i/o-file-already-exists-rtd . g$12759$c1uhW)
        (&i/o-file-is-read-only-rcd . g$12758$c1uhW)
        (&i/o-file-is-read-only-rtd . g$12757$c1uhW)
        (&i/o-file-protection-rcd . g$12756$c1uhW)
        (&i/o-file-protection-rtd . g$12755$c1uhW)
        (&i/o-filename-rcd . g$12754$c1uhW)
        (&i/o-filename-rtd . g$12753$c1uhW)
        (&i/o-invalid-position-rcd . g$12752$c1uhW)
        (&i/o-invalid-position-rtd . g$12751$c1uhW)
        (&i/o-write-rcd . g$12750$c1uhW)
        (&i/o-write-rtd . g$12749$c1uhW)
        (&i/o-read-rcd . g$12748$c1uhW)
        (&i/o-read-rtd . g$12747$c1uhW)
        (&i/o-rcd . g$12746$c1uhW)
        (&i/o-rtd . g$12745$c1uhW)
        (&undefined-rcd . g$12744$c1uhW)
        (&undefined-rtd . g$12743$c1uhW)
        (&syntax-rcd . g$12742$c1uhW)
        (&syntax-rtd . g$12741$c1uhW)
        (&lexical-rcd . g$12740$c1uhW)
        (&lexical-rtd . g$12739$c1uhW)
        (&implementation-restriction-rcd . g$12738$c1uhW)
        (&implementation-restriction-rtd . g$12737$c1uhW)
        (&non-continuable-rcd . g$12736$c1uhW)
        (&non-continuable-rtd . g$12735$c1uhW)
        (&who-rcd . g$12734$c1uhW)
        (&who-rtd . g$12733$c1uhW)
        (&irritants-rcd . g$12732$c1uhW)
        (&irritants-rtd . g$12731$c1uhW)
        (&assertion-rcd . g$12730$c1uhW)
        (&assertion-rtd . g$12729$c1uhW)
        (&violation-rcd . g$12728$c1uhW)
        (&violation-rtd . g$12727$c1uhW)
        (&error-rcd . g$12726$c1uhW)
        (&error-rtd . g$12725$c1uhW)
        (&serious-rcd . g$12724$c1uhW)
        (&serious-rtd . g$12723$c1uhW)
        (&warning-rcd . g$12722$c1uhW)
        (&warning-rtd . g$12721$c1uhW)
        (&message-rcd . g$12720$c1uhW)
        (&message-rtd . g$12719$c1uhW)
        (&condition-rcd . g$12718$c1uhW)
        (&condition-rtd . g$12717$c1uhW)
        (library-letrec* . g$12716$c1uhW)
        (annotation-stripped . g$12715$c1uhW)
        (annotation-source . g$12714$c1uhW)
        (annotation-expression . g$12713$c1uhW)
        (annotation? . g$12712$c1uhW)
        (read-annotated . g$12711$c1uhW)
        (tanh . g$12710$c1uhW)
        (cosh . g$12709$c1uhW)
        (sinh . g$12708$c1uhW)
        (make-guid . g$12707$c1uhW)
        (unspecified? . g$12706$c1uhW)
        (make-list . g$5856$c1uhW)
        (last-pair . g$5855$c1uhW)
        (load-r5rs . g$12705$c1uhW)
        (license . g$12704$c1uhW)
        (stacktrace . g$12703$c1uhW)
        (ironscheme-build . g$12149$c1uhW)
        (define-clr-class-internal . g$12702$c1uhW)
        (clr-field-set!-internal . g$12701$c1uhW)
        (clr-field-get-internal . g$12700$c1uhW)
        (clr-cast-internal . g$12699$c1uhW)
        (clr-call-internal . g$12698$c1uhW)
        (clr-new-internal . g$12697$c1uhW)
        (clr-new-array-internal . g$12696$c1uhW)
        (clr-is-internal . g$12695$c1uhW)
        (clr-reference-internal . g$12694$c1uhW)
        (clr-using-internal . g$12693$c1uhW)
        (syntax-error . g$9158$c1uhW)
        (syntax-dispatch . g$9028$c1uhW)
        (compile-core . g$12692$c1uhW)
        (eval-core . g$12691$c1uhW)
        (set-symbol-value! . g$12690$c1uhW)
        (symbol-value . g$12689$c1uhW)
        (symbol-value? . g$12688$c1uhW)
        (ungensym . g$12687$c1uhW)
        (gensym . g$12686$c1uhW)
        (void . g$12685$c1uhW)
        (load-serialized-library . g$12684$c1uhW)
        (serialize-library . g$12683$c1uhW)
        (compile-system-libraries . g$12151$c1uhW)
        (compile->closure . g$12153$c1uhW)
        (compile . g$12152$c1uhW)
        (load . g$12148$c1uhW)
        (interaction-environment . g$9168$c1uhW)
        (char-ready? . g$12682$c1uhW)
        (string-upcase . g$12681$c1uhW)
        (string-titlecase . g$12680$c1uhW)
        (string-normalize-nfkd . g$12679$c1uhW)
        (string-normalize-nfkc . g$12678$c1uhW)
        (string-normalize-nfd . g$12677$c1uhW)
        (string-normalize-nfc . g$12676$c1uhW)
        (string-foldcase . g$12675$c1uhW)
        (string-downcase . g$12674$c1uhW)
        (string-ci>? . g$6995$c1uhW)
        (string-ci>=? . g$6997$c1uhW)
        (string-ci=? . g$6993$c1uhW)
        (string-ci<? . g$6994$c1uhW)
        (string-ci<=? . g$6996$c1uhW)
        (char-whitespace? . g$12673$c1uhW)
        (char-upper-case? . g$12672$c1uhW)
        (char-title-case? . g$12671$c1uhW)
        (char-numeric? . g$12670$c1uhW)
        (char-lower-case? . g$12669$c1uhW)
        (char-general-category . g$12668$c1uhW)
        (char-upcase . g$12667$c1uhW)
        (char-titlecase . g$12666$c1uhW)
        (char-foldcase . g$12665$c1uhW)
        (char-downcase . g$12664$c1uhW)
        (char-ci>? . g$7034$c1uhW)
        (char-ci>=? . g$7036$c1uhW)
        (char-ci=? . g$7032$c1uhW)
        (char-ci<? . g$7033$c1uhW)
        (char-ci<=? . g$7035$c1uhW)
        (char-alphabetic? . g$12663$c1uhW)
        (variable-transformer-procedure . g$8765$c1uhW)
        (variable-transformer? . g$8764$c1uhW)
        (make-variable-transformer . g$8763$c1uhW)
        (identifier? . g$9162$c1uhW)
        (generate-temporaries . g$9151$c1uhW)
        (free-identifier=? . g$9152$c1uhW)
        (syntax->datum . g$9164$c1uhW)
        (datum->syntax . g$9163$c1uhW)
        (bound-identifier=? . g$9153$c1uhW)
        (record-type-descriptor? . g$12662$c1uhW)
        (record-predicate . g$12661$c1uhW)
        (record-mutator . g$12660$c1uhW)
        (record-constructor . g$12659$c1uhW)
        (record-accessor . g$12658$c1uhW)
        (make-record-type-descriptor . g$12657$c1uhW)
        (make-record-constructor-descriptor . g$12656$c1uhW)
        (record? . g$12655$c1uhW)
        (record-type-uid . g$12654$c1uhW)
        (record-type-sealed? . g$12653$c1uhW)
        (record-type-parent . g$12652$c1uhW)
        (record-type-opaque? . g$12651$c1uhW)
        (record-type-name . g$12650$c1uhW)
        (record-type-generative? . g$12649$c1uhW)
        (record-type-field-names . g$12648$c1uhW)
        (record-rtd . g$12647$c1uhW)
        (record-field-mutable? . g$12646$c1uhW)
        (delete-file . g$6569$c1uhW)
        (file-exists? . g$6568$c1uhW)
        (vector-sort! . g$12645$c1uhW)
        (vector-sort . g$12644$c1uhW)
        (list-sort . g$6935$c1uhW)
        (symbol-hash . g$12643$c1uhW)
        (string-ci-hash . g$12642$c1uhW)
        (string-hash . g$12641$c1uhW)
        (equal-hash . g$12640$c1uhW)
        (hashtable-equivalence-function . g$12639$c1uhW)
        (make-hashtable . g$12638$c1uhW)
        (hashtable-hash-function . g$12637$c1uhW)
        (make-eqv-hashtable . g$6537$c1uhW)
        (make-eq-hashtable . g$6536$c1uhW)
        (hashtable? . g$12636$c1uhW)
        (hashtable-update! . g$6543$c1uhW)
        (hashtable-size . g$6538$c1uhW)
        (hashtable-set! . g$6540$c1uhW)
        (hashtable-ref . g$6539$c1uhW)
        (hashtable-mutable? . g$12635$c1uhW)
        (hashtable-keys . g$12634$c1uhW)
        (hashtable-entries . g$12633$c1uhW)
        (hashtable-delete! . g$6541$c1uhW)
        (hashtable-copy . g$12632$c1uhW)
        (hashtable-contains? . g$6542$c1uhW)
        (hashtable-clear! . g$6544$c1uhW)
        (call-with-output-file . g$7420$c1uhW)
        (call-with-input-file . g$7419$c1uhW)
        (write-char . g$7401$c1uhW)
        (write . g$12631$c1uhW)
        (with-output-to-file . g$7418$c1uhW)
        (with-input-from-file . g$7417$c1uhW)
        (read-char . g$7400$c1uhW)
        (read . g$12630$c1uhW)
        (peek-char . g$7399$c1uhW)
        (open-output-file . g$12629$c1uhW)
        (open-input-file . g$12628$c1uhW)
        (newline . g$7421$c1uhW)
        (display . g$12627$c1uhW)
        (close-output-port . g$12626$c1uhW)
        (close-input-port . g$12625$c1uhW)
        (eof-object? . g$12624$c1uhW)
        (eof-object . g$12623$c1uhW)
        (current-error-port . g$12622$c1uhW)
        (current-output-port . g$12621$c1uhW)
        (current-input-port . g$12620$c1uhW)
        (output-port? . g$12619$c1uhW)
        (input-port? . g$12618$c1uhW)
        (utf-8-codec . g$12617$c1uhW)
        (utf-16-codec . g$12616$c1uhW)
        (transcoder-error-handling-mode . g$12615$c1uhW)
        (transcoder-eol-style . g$12614$c1uhW)
        (transcoder-codec . g$12613$c1uhW)
        (transcoded-port . g$12612$c1uhW)
        (textual-port? . g$12611$c1uhW)
        (string->bytevector . g$12610$c1uhW)
        (standard-output-port . g$12609$c1uhW)
        (standard-input-port . g$12608$c1uhW)
        (standard-error-port . g$12607$c1uhW)
        (set-port-position! . g$12606$c1uhW)
        (put-u8 . g$12605$c1uhW)
        (put-string . g$12604$c1uhW)
        (put-datum . g$12603$c1uhW)
        (put-char . g$12602$c1uhW)
        (put-bytevector . g$12601$c1uhW)
        (port? . g$7386$c1uhW)
        (port-transcoder . g$12600$c1uhW)
        (port-position . g$12599$c1uhW)
        (port-has-set-port-position!? . g$12598$c1uhW)
        (port-has-port-position? . g$12597$c1uhW)
        (port-eof? . g$12596$c1uhW)
        (output-port-buffer-mode . g$12595$c1uhW)
        (open-string-output-port . g$7385$c1uhW)
        (open-string-input-port . g$12594$c1uhW)
        (open-file-output-port . g$12593$c1uhW)
        (open-file-input/output-port . g$12592$c1uhW)
        (open-file-input-port . g$12591$c1uhW)
        (open-bytevector-output-port . g$12590$c1uhW)
        (open-bytevector-input-port . g$12589$c1uhW)
        (native-transcoder . g$12588$c1uhW)
        (native-eol-style . g$12587$c1uhW)
        (make-transcoder . g$12586$c1uhW)
        (latin-1-codec . g$12585$c1uhW)
        (make-i/o-write-error . g$7241$c1uhW)
        (make-i/o-read-error . g$7227$c1uhW)
        (make-i/o-port-error . g$7346$c1uhW)
        (make-i/o-invalid-position-error . g$7256$c1uhW)
        (make-i/o-filename-error . g$7273$c1uhW)
        (make-i/o-file-protection-error . g$7289$c1uhW)
        (make-i/o-file-is-read-only-error . g$7303$c1uhW)
        (make-i/o-file-does-not-exist-error . g$7331$c1uhW)
        (make-i/o-file-already-exists-error . g$7317$c1uhW)
        (make-i/o-error . g$7213$c1uhW)
        (make-i/o-encoding-error . g$7377$c1uhW)
        (make-i/o-decoding-error . g$7362$c1uhW)
        (make-custom-textual-output-port . g$12584$c1uhW)
        (make-custom-textual-input/output-port . g$12583$c1uhW)
        (make-custom-textual-input-port . g$12582$c1uhW)
        (make-custom-binary-output-port . g$12581$c1uhW)
        (make-custom-binary-input/output-port . g$12580$c1uhW)
        (make-custom-binary-input-port . g$12579$c1uhW)
        (make-bytevector . g$12578$c1uhW)
        (lookahead-u8 . g$12577$c1uhW)
        (lookahead-char . g$12576$c1uhW)
        (i/o-write-error? . g$7242$c1uhW)
        (i/o-read-error? . g$7228$c1uhW)
        (i/o-port-error? . g$7348$c1uhW)
        (i/o-invalid-position-error? . g$7258$c1uhW)
        (i/o-error-position . g$7259$c1uhW)
        (i/o-filename-error? . g$7275$c1uhW)
        (i/o-file-protection-error? . g$7290$c1uhW)
        (i/o-file-is-read-only-error? . g$7304$c1uhW)
        (i/o-file-does-not-exist-error? . g$7332$c1uhW)
        (i/o-file-already-exists-error? . g$7318$c1uhW)
        (i/o-error? . g$7214$c1uhW)
        (i/o-error-port . g$7349$c1uhW)
        (i/o-error-filename . g$7276$c1uhW)
        (i/o-encoding-error? . g$7379$c1uhW)
        (i/o-encoding-error-char . g$7380$c1uhW)
        (i/o-decoding-error? . g$7363$c1uhW)
        (get-u8 . g$12575$c1uhW)
        (get-string-n! . g$12574$c1uhW)
        (get-string-n . g$12573$c1uhW)
        (get-string-all . g$12572$c1uhW)
        (get-line . g$12571$c1uhW)
        (get-datum . g$12570$c1uhW)
        (get-char . g$12569$c1uhW)
        (get-bytevector-some . g$12568$c1uhW)
        (get-bytevector-n! . g$12567$c1uhW)
        (get-bytevector-n . g$12566$c1uhW)
        (get-bytevector-all . g$12565$c1uhW)
        (flush-output-port . g$12564$c1uhW)
        (close-port . g$12563$c1uhW)
        (call-with-string-output-port . g$7387$c1uhW)
        (call-with-port . g$7388$c1uhW)
        (call-with-bytevector-output-port . g$12562$c1uhW)
        (bytevector->string . g$12561$c1uhW)
        (buffer-mode? . g$12560$c1uhW)
        (binary-port? . g$12559$c1uhW)
        (scheme-report-environment . g$9141$c1uhW)
        (quotient . g$6914$c1uhW)
        (null-environment . g$9140$c1uhW)
        (remainder . g$6915$c1uhW)
        (modulo . g$6916$c1uhW)
        (inexact->exact . g$6911$c1uhW)
        (force . g$6918$c1uhW)
        (exact->inexact . g$6912$c1uhW)
        (exit . g$12558$c1uhW)
        (command-line . g$12145$c1uhW)
        (string-fill! . g$12557$c1uhW)
        (string-set! . g$12556$c1uhW)
        (set-cdr! . g$12555$c1uhW)
        (set-car! . g$12554$c1uhW)
        (remove . g$5878$c1uhW)
        (remv . g$5879$c1uhW)
        (remp . g$5859$c1uhW)
        (remq . g$5880$c1uhW)
        (partition . g$5858$c1uhW)
        (memv . g$5866$c1uhW)
        (memq . g$5865$c1uhW)
        (memp . g$5868$c1uhW)
        (member . g$5867$c1uhW)
        (exists . g$5872$c1uhW)
        (for-all . g$5871$c1uhW)
        (fold-right . g$5877$c1uhW)
        (fold-left . g$5876$c1uhW)
        (find . g$5857$c1uhW)
        (filter . g$5860$c1uhW)
        (cons* . g$5875$c1uhW)
        (assv . g$5862$c1uhW)
        (assq . g$5861$c1uhW)
        (assp . g$5864$c1uhW)
        (assoc . g$5863$c1uhW)
        (with-exception-handler . g$12553$c1uhW)
        (raise-continuable . g$12552$c1uhW)
        (raise . g$12551$c1uhW)
        (eval . g$9143$c1uhW)
        (environment . g$9139$c1uhW)
        (make-enumeration . g$7485$c1uhW)
        (enum-set=? . g$7492$c1uhW)
        (enum-set-universe . g$7486$c1uhW)
        (enum-set-union . g$7493$c1uhW)
        (enum-set-subset? . g$7491$c1uhW)
        (enum-set-projection . g$7497$c1uhW)
        (enum-set-member? . g$7490$c1uhW)
        (enum-set-intersection . g$7494$c1uhW)
        (enum-set-indexer . g$7487$c1uhW)
        (enum-set-difference . g$7495$c1uhW)
        (enum-set-constructor . g$7488$c1uhW)
        (enum-set-complement . g$7496$c1uhW)
        (enum-set->list . g$7489$c1uhW)
        (who-condition? . g$6823$c1uhW)
        (warning? . g$6734$c1uhW)
        (violation? . g$6776$c1uhW)
        (undefined-violation? . g$6900$c1uhW)
        (syntax-violation? . g$6884$c1uhW)
        (syntax-violation-subform . g$6886$c1uhW)
        (syntax-violation-form . g$6885$c1uhW)
        (syntax-violation . g$9161$c1uhW)
        (simple-conditions . g$12550$c1uhW)
        (serious-condition? . g$6748$c1uhW)
        (non-continuable-violation? . g$6838$c1uhW)
        (message-condition? . g$6719$c1uhW)
        (make-who-condition . g$6821$c1uhW)
        (make-warning . g$6733$c1uhW)
        (make-violation . g$6775$c1uhW)
        (make-undefined-violation . g$6899$c1uhW)
        (make-syntax-violation . g$6881$c1uhW)
        (make-serious-condition . g$6747$c1uhW)
        (make-non-continuable-violation . g$6837$c1uhW)
        (make-message-condition . g$6717$c1uhW)
        (make-lexical-violation . g$6865$c1uhW)
        (make-irritants-condition . g$6804$c1uhW)
        (make-implementation-restriction-violation . g$6851$c1uhW)
        (make-error . g$6761$c1uhW)
        (make-assertion-violation . g$6789$c1uhW)
        (lexical-violation? . g$6866$c1uhW)
        (irritants-condition? . g$6806$c1uhW)
        (implementation-restriction-violation? . g$6852$c1uhW)
        (error? . g$6762$c1uhW)
        (condition-who . g$6824$c1uhW)
        (condition-predicate . g$12549$c1uhW)
        (condition-message . g$6720$c1uhW)
        (condition-irritants . g$6807$c1uhW)
        (condition-accessor . g$12548$c1uhW)
        (condition . g$12547$c1uhW)
        (assertion-violation? . g$6790$c1uhW)
        (condition? . g$12546$c1uhW)
        (utf32->string . g$12545$c1uhW)
        (utf16->string . g$12544$c1uhW)
        (utf8->string . g$12543$c1uhW)
        (uint-list->bytevector . g$12542$c1uhW)
        (u8-list->bytevector . g$12541$c1uhW)
        (string->utf8 . g$12540$c1uhW)
        (string->utf32 . g$12539$c1uhW)
        (string->utf16 . g$12538$c1uhW)
        (sint-list->bytevector . g$12537$c1uhW)
        (native-endianness . g$6575$c1uhW)
        (bytevector? . g$12536$c1uhW)
        (bytevector=? . g$12535$c1uhW)
        (bytevector-uint-set! . g$12534$c1uhW)
        (bytevector-uint-ref . g$12533$c1uhW)
        (bytevector-u8-set! . g$12532$c1uhW)
        (bytevector-u8-ref . g$12531$c1uhW)
        (bytevector-u64-set! . g$6596$c1uhW)
        (bytevector-u64-ref . g$6592$c1uhW)
        (bytevector-u64-native-set! . g$6598$c1uhW)
        (bytevector-u64-native-ref . g$6594$c1uhW)
        (bytevector-u32-set! . g$6588$c1uhW)
        (bytevector-u32-ref . g$6584$c1uhW)
        (bytevector-u32-native-set! . g$6590$c1uhW)
        (bytevector-u32-native-ref . g$6586$c1uhW)
        (bytevector-u16-set! . g$6580$c1uhW)
        (bytevector-u16-ref . g$6576$c1uhW)
        (bytevector-u16-native-set! . g$6582$c1uhW)
        (bytevector-u16-native-ref . g$6578$c1uhW)
        (bytevector-sint-set! . g$12530$c1uhW)
        (bytevector-sint-ref . g$12529$c1uhW)
        (bytevector-s8-set! . g$12528$c1uhW)
        (bytevector-s8-ref . g$12527$c1uhW)
        (bytevector-s64-set! . g$6597$c1uhW)
        (bytevector-s64-ref . g$6593$c1uhW)
        (bytevector-s64-native-set! . g$6599$c1uhW)
        (bytevector-s64-native-ref . g$6595$c1uhW)
        (bytevector-s32-set! . g$6589$c1uhW)
        (bytevector-s32-ref . g$6585$c1uhW)
        (bytevector-s32-native-set! . g$6591$c1uhW)
        (bytevector-s32-native-ref . g$6587$c1uhW)
        (bytevector-s16-set! . g$6581$c1uhW)
        (bytevector-s16-ref . g$6577$c1uhW)
        (bytevector-s16-native-set! . g$6583$c1uhW)
        (bytevector-s16-native-ref . g$6579$c1uhW)
        (bytevector-length . g$12526$c1uhW)
        (bytevector-ieee-single-set! . g$12525$c1uhW)
        (bytevector-ieee-single-ref . g$12524$c1uhW)
        (bytevector-ieee-single-native-set! . g$6602$c1uhW)
        (bytevector-ieee-single-native-ref . g$6600$c1uhW)
        (bytevector-ieee-double-set! . g$12523$c1uhW)
        (bytevector-ieee-double-ref . g$12522$c1uhW)
        (bytevector-ieee-double-native-set! . g$6603$c1uhW)
        (bytevector-ieee-double-native-ref . g$6601$c1uhW)
        (bytevector-fill! . g$12521$c1uhW)
        (bytevector-copy! . g$12520$c1uhW)
        (bytevector-copy . g$12519$c1uhW)
        (bytevector->uint-list . g$12518$c1uhW)
        (bytevector->u8-list . g$12517$c1uhW)
        (bytevector->sint-list . g$12516$c1uhW)
        (no-nans-violation? . g$7199$c1uhW)
        (no-infinities-violation? . g$7185$c1uhW)
        (make-no-nans-violation . g$7198$c1uhW)
        (make-no-infinities-violation . g$7184$c1uhW)
        (real->flonum . g$12515$c1uhW)
        (flzero? . g$12514$c1uhW)
        (fltruncate . g$12513$c1uhW)
        (fltan . g$12512$c1uhW)
        (flsqrt . g$12511$c1uhW)
        (flsin . g$12510$c1uhW)
        (flround . g$12509$c1uhW)
        (flpositive? . g$12508$c1uhW)
        (flonum? . g$12507$c1uhW)
        (flodd? . g$12506$c1uhW)
        (flnumerator . g$12505$c1uhW)
        (flnegative? . g$12504$c1uhW)
        (flnan? . g$12503$c1uhW)
        (flmod0 . g$12502$c1uhW)
        (flmod . g$12501$c1uhW)
        (flmin . g$12500$c1uhW)
        (flmax . g$12499$c1uhW)
        (fllog . g$12498$c1uhW)
        (flinteger? . g$12497$c1uhW)
        (flinfinite? . g$12496$c1uhW)
        (flfloor . g$12495$c1uhW)
        (flfinite? . g$12494$c1uhW)
        (flexpt . g$12493$c1uhW)
        (flexp . g$12492$c1uhW)
        (fleven? . g$12491$c1uhW)
        (fldiv0-and-mod0 . g$12490$c1uhW)
        (fldiv0 . g$12489$c1uhW)
        (fldiv-and-mod . g$12488$c1uhW)
        (fldiv . g$12487$c1uhW)
        (fldenominator . g$12486$c1uhW)
        (flcos . g$12485$c1uhW)
        (flceiling . g$12484$c1uhW)
        (flatan . g$12483$c1uhW)
        (flasin . g$12482$c1uhW)
        (flacos . g$12481$c1uhW)
        (flabs . g$12480$c1uhW)
        (fl>? . g$12479$c1uhW)
        (fl>=? . g$12478$c1uhW)
        (fl=? . g$12477$c1uhW)
        (fl<? . g$12476$c1uhW)
        (fl<=? . g$12475$c1uhW)
        (fl/ . g$12474$c1uhW)
        (fl- . g$12473$c1uhW)
        (fl+ . g$12472$c1uhW)
        (fl* . g$12471$c1uhW)
        (fixnum->flonum . g$12470$c1uhW)
        (fxzero? . g$12469$c1uhW)
        (fxxor . g$12468$c1uhW)
        (fxrotate-bit-field . g$7131$c1uhW)
        (fxreverse-bit-field . g$12467$c1uhW)
        (fxpositive? . g$12466$c1uhW)
        (fxodd? . g$12465$c1uhW)
        (fxnot . g$12464$c1uhW)
        (fxnegative? . g$12463$c1uhW)
        (fxmod0 . g$12462$c1uhW)
        (fxmod . g$12461$c1uhW)
        (fxmin . g$12460$c1uhW)
        (fxmax . g$12459$c1uhW)
        (fxlength . g$12458$c1uhW)
        (fxior . g$12457$c1uhW)
        (fxif . g$7125$c1uhW)
        (fxfirst-bit-set . g$12456$c1uhW)
        (fxeven? . g$12455$c1uhW)
        (fxdiv0-and-mod0 . g$12454$c1uhW)
        (fxdiv0 . g$12453$c1uhW)
        (fxdiv-and-mod . g$12452$c1uhW)
        (fxdiv . g$12451$c1uhW)
        (fxcopy-bit-field . g$7128$c1uhW)
        (fxcopy-bit . g$7126$c1uhW)
        (fxbit-set? . g$12450$c1uhW)
        (fxbit-field . g$7127$c1uhW)
        (fxbit-count . g$12449$c1uhW)
        (fxarithmetic-shift-right . g$7130$c1uhW)
        (fxarithmetic-shift-left . g$7129$c1uhW)
        (fxarithmetic-shift . g$12448$c1uhW)
        (fxand . g$12447$c1uhW)
        (fx>? . g$12446$c1uhW)
        (fx>=? . g$12445$c1uhW)
        (fx=? . g$12444$c1uhW)
        (fx<? . g$12443$c1uhW)
        (fx<=? . g$12442$c1uhW)
        (fx-/carry . g$7123$c1uhW)
        (fx- . g$12441$c1uhW)
        (fx+/carry . g$7124$c1uhW)
        (fx+ . g$12440$c1uhW)
        (fx*/carry . g$7122$c1uhW)
        (fx* . g$12439$c1uhW)
        (greatest-fixnum . g$12438$c1uhW)
        (least-fixnum . g$12437$c1uhW)
        (fixnum-width . g$12436$c1uhW)
        (fixnum? . g$12435$c1uhW)
        (bitwise-rotate-bit-field . g$7096$c1uhW)
        (bitwise-reverse-bit-field . g$12434$c1uhW)
        (bitwise-length . g$12433$c1uhW)
        (bitwise-if . g$7090$c1uhW)
        (bitwise-first-bit-set . g$12432$c1uhW)
        (bitwise-copy-bit-field . g$7093$c1uhW)
        (bitwise-copy-bit . g$7091$c1uhW)
        (bitwise-bit-set? . g$12431$c1uhW)
        (bitwise-bit-field . g$7092$c1uhW)
        (bitwise-bit-count . g$12430$c1uhW)
        (bitwise-xor . g$12429$c1uhW)
        (bitwise-ior . g$12428$c1uhW)
        (bitwise-and . g$12427$c1uhW)
        (bitwise-not . g$12426$c1uhW)
        (bitwise-arithmetic-shift-right . g$7095$c1uhW)
        (bitwise-arithmetic-shift-left . g$7094$c1uhW)
        (bitwise-arithmetic-shift . g$12425$c1uhW)
        (zero? . g$6021$c1uhW)
        (vector? . g$12424$c1uhW)
        (vector-set! . g$12423$c1uhW)
        (vector-ref . g$12422$c1uhW)
        (vector-map . g$12421$c1uhW)
        (vector-length . g$12420$c1uhW)
        (vector-for-each . g$12419$c1uhW)
        (vector-fill! . g$12418$c1uhW)
        (vector->list . g$12417$c1uhW)
        (vector . g$12416$c1uhW)
        (values . g$12415$c1uhW)
        (truncate . g$12414$c1uhW)
        (tan . g$12413$c1uhW)
        (symbol? . g$12412$c1uhW)
        (symbol=? . g$6067$c1uhW)
        (symbol->string . g$12411$c1uhW)
        (substring . g$12410$c1uhW)
        (string? . g$12409$c1uhW)
        (string>? . g$6064$c1uhW)
        (string>=? . g$6066$c1uhW)
        (string=? . g$6062$c1uhW)
        (string<? . g$6063$c1uhW)
        (string<=? . g$6065$c1uhW)
        (string-ref . g$12408$c1uhW)
        (string-length . g$12407$c1uhW)
        (string-for-each . g$12406$c1uhW)
        (string-copy . g$12405$c1uhW)
        (string-append . g$12404$c1uhW)
        (string->symbol . g$12403$c1uhW)
        (string->number . g$12402$c1uhW)
        (string->list . g$12401$c1uhW)
        (string . g$12400$c1uhW)
        (sqrt . g$12399$c1uhW)
        (sin . g$12398$c1uhW)
        (round . g$12397$c1uhW)
        (reverse . g$12396$c1uhW)
        (real? . g$12395$c1uhW)
        (real-valued? . g$12394$c1uhW)
        (real-part . g$12393$c1uhW)
        (rationalize . g$6108$c1uhW)
        (rational? . g$12392$c1uhW)
        (rational-valued? . g$12391$c1uhW)
        (procedure? . g$12390$c1uhW)
        (positive? . g$6019$c1uhW)
        (pair? . g$12389$c1uhW)
        (odd? . g$6023$c1uhW)
        (numerator . g$12388$c1uhW)
        (number? . g$12387$c1uhW)
        (number->string . g$12386$c1uhW)
        (null? . g$12385$c1uhW)
        (not . g$12384$c1uhW)
        (negative? . g$6020$c1uhW)
        (nan? . g$12383$c1uhW)
        (min . g$6025$c1uhW)
        (max . g$6024$c1uhW)
        (map . g$5873$c1uhW)
        (make-vector . g$12382$c1uhW)
        (make-string . g$12381$c1uhW)
        (make-rectangular . g$12380$c1uhW)
        (make-polar . g$12379$c1uhW)
        (magnitude . g$12378$c1uhW)
        (log . g$12377$c1uhW)
        (list? . g$12376$c1uhW)
        (list-tail . g$5853$c1uhW)
        (list-ref . g$5854$c1uhW)
        (list->vector . g$12375$c1uhW)
        (list->string . g$12374$c1uhW)
        (list . g$12373$c1uhW)
        (length . g$12372$c1uhW)
        (lcm . g$6027$c1uhW)
        (integer? . g$12371$c1uhW)
        (integer-valued? . g$12370$c1uhW)
        (integer->char . g$12369$c1uhW)
        (infinite? . g$12368$c1uhW)
        (inexact? . g$12367$c1uhW)
        (inexact . g$12366$c1uhW)
        (imag-part . g$12365$c1uhW)
        (gcd . g$6026$c1uhW)
        (for-each . g$5874$c1uhW)
        (floor . g$12364$c1uhW)
        (finite? . g$12363$c1uhW)
        (expt . g$12362$c1uhW)
        (exp . g$12361$c1uhW)
        (exact? . g$12360$c1uhW)
        (exact-integer-sqrt . g$12359$c1uhW)
        (exact . g$12358$c1uhW)
        (even? . g$6022$c1uhW)
        (error . g$12357$c1uhW)
        (eqv? . g$12356$c1uhW)
        (equal? . g$12355$c1uhW)
        (eq? . g$12354$c1uhW)
        (dynamic-wind . g$12353$c1uhW)
        (div0-and-mod0 . g$12352$c1uhW)
        (mod0 . g$12351$c1uhW)
        (div0 . g$12350$c1uhW)
        (div-and-mod . g$12349$c1uhW)
        (mod . g$12348$c1uhW)
        (div . g$12347$c1uhW)
        (denominator . g$12346$c1uhW)
        (cos . g$12345$c1uhW)
        (cons . g$12344$c1uhW)
        (complex? . g$12343$c1uhW)
        (char? . g$12342$c1uhW)
        (char>? . g$6105$c1uhW)
        (char>=? . g$6107$c1uhW)
        (char=? . g$6103$c1uhW)
        (char<? . g$6104$c1uhW)
        (char<=? . g$6106$c1uhW)
        (char->integer . g$12341$c1uhW)
        (ceiling . g$12340$c1uhW)
        (call-with-values . g$12339$c1uhW)
        (call/cc . g$12338$c1uhW)
        (call-with-current-continuation . g$12337$c1uhW)
        (cddddr . g$6018$c1uhW)
        (cdddar . g$6017$c1uhW)
        (cddadr . g$6016$c1uhW)
        (cddaar . g$6015$c1uhW)
        (cdaddr . g$6014$c1uhW)
        (cdadar . g$6013$c1uhW)
        (cdaadr . g$6012$c1uhW)
        (cdaaar . g$6011$c1uhW)
        (cadddr . g$6010$c1uhW)
        (caddar . g$6009$c1uhW)
        (cadadr . g$6008$c1uhW)
        (cadaar . g$6007$c1uhW)
        (caaddr . g$6006$c1uhW)
        (caadar . g$6005$c1uhW)
        (caaadr . g$6004$c1uhW)
        (caaaar . g$6003$c1uhW)
        (cdddr . g$6002$c1uhW)
        (cddar . g$6001$c1uhW)
        (cdadr . g$6000$c1uhW)
        (cdaar . g$5999$c1uhW)
        (caddr . g$5998$c1uhW)
        (cadar . g$5997$c1uhW)
        (caadr . g$5996$c1uhW)
        (caaar . g$5995$c1uhW)
        (cddr . g$5994$c1uhW)
        (cdar . g$5993$c1uhW)
        (cadr . g$5992$c1uhW)
        (caar . g$5991$c1uhW)
        (cdr . g$12336$c1uhW)
        (car . g$12335$c1uhW)
        (boolean? . g$12334$c1uhW)
        (boolean=? . g$6068$c1uhW)
        (atan . g$12333$c1uhW)
        (assertion-violation . g$12332$c1uhW)
        (asin . g$12331$c1uhW)
        (apply . g$12330$c1uhW)
        (append . g$12329$c1uhW)
        (angle . g$12328$c1uhW)
        (acos . g$12327$c1uhW)
        (abs . g$12326$c1uhW)
        (/ . g$12325$c1uhW)
        (* . g$12324$c1uhW)
        (- . g$12323$c1uhW)
        (+ . g$12322$c1uhW)
        (>= . g$12321$c1uhW)
        (> . g$12320$c1uhW)
        (= . g$12319$c1uhW)
        (<= . g$12318$c1uhW)
        (< . g$12317$c1uhW)
        (make-record-printer . g$12316$c1uhW)
        (eqv-hash . g$12315$c1uhW)
        (reverse! . g$12314$c1uhW)
        (deserialize-port . g$12313$c1uhW)
        (serialize-port . g$12312$c1uhW)
        (enum-set? . g$7460$c1uhW)
        (make-promise . g$6917$c1uhW)
        (load/args . g$12147$c1uhW)
        (printf . g$7571$c1uhW)
        (fprintf . g$7572$c1uhW)
        (format . g$7573$c1uhW)
        (procedure-form . g$12311$c1uhW)
        (procedure-environment . g$12310$c1uhW)
        (procedure-name . g$12309$c1uhW)
        (procedure-arity . g$12308$c1uhW)
        (gc-collect . g$12307$c1uhW)
        (clr-type? . g$12306$c1uhW)
        (get-clr-type . g$12305$c1uhW)
        (get-command-line . g$12304$c1uhW)
        (vector-append . g$12303$c1uhW)
        (vector-filter . g$12302$c1uhW)
        (vector-reverse! . g$12301$c1uhW)
        (vector-contains? . g$12300$c1uhW)
        (vector-index-of . g$12299$c1uhW)
        (vector-copy . g$12298$c1uhW)
        (vector-binary-search . g$12297$c1uhW)
        (string-ci-compare . g$12296$c1uhW)
        (string-compare . g$12295$c1uhW)
        (string-format . g$12294$c1uhW)
        (trace-printer . g$12144$c1uhW)
        (make-traced-procedure . g$12293$c1uhW)
        (make-traced-macro . g$7593$c1uhW)
        (assertion-error . g$9157$c1uhW)
        (time-it . g$12292$c1uhW)
        (make-parameter . g$7862$c1uhW)
        (library-locator . g$12291$c1uhW)
        (get-library-paths . g$12290$c1uhW)
        (open-tcp-input/output-port . g$12289$c1uhW)
        (hashtable-for-each . g$12288$c1uhW)
        (hashtable-map . g$12287$c1uhW)
        (environment-bindings . g$9135$c1uhW)
        (environment-symbols . g$9138$c1uhW)
        (interaction-environment-symbols . g$9134$c1uhW)
        (optimization-level . g$12286$c1uhW)
        (library-path . g$8317$c1uhW)
        (expand->core . g$9144$c1uhW)
        (expand . g$9142$c1uhW)
        (convert->cps . g$7648$c1uhW)
        (parse->cps . g$7647$c1uhW)
        (&no-nans . g$12285$c1uhW)
        (&no-infinities . g$12284$c1uhW)
        (&i/o-encoding . g$12283$c1uhW)
        (&i/o-decoding . g$12282$c1uhW)
        (&i/o-port . g$12281$c1uhW)
        (&i/o-file-does-not-exist . g$12280$c1uhW)
        (&i/o-file-already-exists . g$12279$c1uhW)
        (&i/o-file-is-read-only . g$12278$c1uhW)
        (&i/o-file-protection . g$12277$c1uhW)
        (&i/o-filename . g$12276$c1uhW)
        (&i/o-invalid-position . g$12275$c1uhW)
        (&i/o-write . g$12274$c1uhW)
        (&i/o-read . g$12273$c1uhW)
        (&i/o . g$12272$c1uhW)
        (&non-continuable . g$12271$c1uhW)
        (&undefined . g$12270$c1uhW)
        (&syntax . g$12269$c1uhW)
        (&lexical . g$12268$c1uhW)
        (&implementation-restriction . g$12267$c1uhW)
        (&who . g$12266$c1uhW)
        (&irritants . g$12265$c1uhW)
        (&assertion . g$12264$c1uhW)
        (&violation . g$12263$c1uhW)
        (&error . g$12262$c1uhW)
        (&serious . g$12261$c1uhW)
        (&warning . g$12260$c1uhW)
        (&message . g$12259$c1uhW)
        (&condition . g$12258$c1uhW)
        (define-condition-type . g$12257$c1uhW)
        (define-enumeration . g$12256$c1uhW)
        (define-record-type . g$12255$c1uhW)
        (parent-rtd . g$12254$c1uhW)
        (nongenerative . g$12253$c1uhW)
        (opaque . g$12252$c1uhW)
        (sealed . g$12251$c1uhW)
        (protocol . g$12250$c1uhW)
        (parent . g$12249$c1uhW)
        (immutable . g$12248$c1uhW)
        (mutable . g$12247$c1uhW)
        (fields . g$12246$c1uhW)
        (error-handling-mode . g$12245$c1uhW)
        (file-options . g$12244$c1uhW)
        (buffer-mode . g$12243$c1uhW)
        (eol-style . g$12242$c1uhW)
        (guard . g$12241$c1uhW)
        (trace-letrec-syntax . g$12240$c1uhW)
        (trace-let-syntax . g$12239$c1uhW)
        (trace-define-syntax . g$12238$c1uhW)
        (trace-define . g$12237$c1uhW)
        (trace-lambda . g$12236$c1uhW)
        (unsyntax-splicing . g$12235$c1uhW)
        (unsyntax . g$12234$c1uhW)
        (unquote-splicing . g$12233$c1uhW)
        (unquote . g$12232$c1uhW)
        (_ . g$12231$c1uhW)
        (else . g$12230$c1uhW)
        (=> . g$12229$c1uhW)
        (... . g$12228$c1uhW)
        (assert . g$12227$c1uhW)
        (endianness . g$12226$c1uhW)
        (delay . g$12225$c1uhW)
        (time . g$12224$c1uhW)
        (or . g$12223$c1uhW)
        (and . g$12222$c1uhW)
        (do . g$12221$c1uhW)
        (cond . g$12220$c1uhW)
        (let* . g$12219$c1uhW)
        (let . g$12218$c1uhW)
        (identifier-syntax . g$12217$c1uhW)
        (with-syntax . g$12216$c1uhW)
        (quasisyntax . g$12215$c1uhW)
        (quasiquote . g$12214$c1uhW)
        (syntax-rules . g$12213$c1uhW)
        (include-into . g$12212$c1uhW)
        (include . g$12211$c1uhW)
        (define-struct . g$12210$c1uhW)
        (let-values . g$12209$c1uhW)
        (let*-values . g$12208$c1uhW)
        (record-constructor-descriptor . g$12207$c1uhW)
        (record-type-descriptor . g$12206$c1uhW)
        (fluid-let-syntax . g$12205$c1uhW)
        (case . g$12204$c1uhW)
        (parameterize . g$12203$c1uhW)
        (unless . g$12202$c1uhW)
        (when . g$12201$c1uhW)
        (if . g$12200$c1uhW)
        (letrec* . g$12199$c1uhW)
        (letrec . g$12198$c1uhW)
        (type-descriptor . g$12197$c1uhW)
        (case-lambda . g$12196$c1uhW)
        (lambda . g$12195$c1uhW)
        (syntax . g$12194$c1uhW)
        (syntax-case . g$12193$c1uhW)
        (quote . g$12192$c1uhW)
        (foreign-call . g$12191$c1uhW)
        (letrec-syntax . g$12190$c1uhW)
        (let-syntax . g$12189$c1uhW)
        (set! . g$12188$c1uhW)
        (export . g$12187$c1uhW)
        (import . g$12186$c1uhW)
        (library . g$12185$c1uhW)
        (begin . g$12184$c1uhW)
        (module . g$12183$c1uhW)
        (define-syntax . g$12182$c1uhW)
        (define . g$12181$c1uhW))
      '((g$9033$c1uhW core-prim . ellipsis-map)
        (g$12772$c1uhW core-prim . &no-nans-rcd)
        (g$12771$c1uhW core-prim . &no-nans-rtd)
        (g$12770$c1uhW core-prim . &no-infinities-rcd)
        (g$12769$c1uhW core-prim . &no-infinities-rtd)
        (g$12768$c1uhW core-prim . &i/o-encoding-rcd)
        (g$12767$c1uhW core-prim . &i/o-encoding-rtd)
        (g$12766$c1uhW core-prim . &i/o-decoding-rcd)
        (g$12765$c1uhW core-prim . &i/o-decoding-rtd)
        (g$12764$c1uhW core-prim . &i/o-port-rcd)
        (g$12763$c1uhW core-prim . &i/o-port-rtd)
        (g$12762$c1uhW core-prim . &i/o-file-does-not-exist-rcd)
        (g$12761$c1uhW core-prim . &i/o-file-does-not-exist-rtd)
        (g$12760$c1uhW core-prim . &i/o-file-already-exists-rcd)
        (g$12759$c1uhW core-prim . &i/o-file-already-exists-rtd)
        (g$12758$c1uhW core-prim . &i/o-file-is-read-only-rcd)
        (g$12757$c1uhW core-prim . &i/o-file-is-read-only-rtd)
        (g$12756$c1uhW core-prim . &i/o-file-protection-rcd)
        (g$12755$c1uhW core-prim . &i/o-file-protection-rtd)
        (g$12754$c1uhW core-prim . &i/o-filename-rcd)
        (g$12753$c1uhW core-prim . &i/o-filename-rtd)
        (g$12752$c1uhW core-prim . &i/o-invalid-position-rcd)
        (g$12751$c1uhW core-prim . &i/o-invalid-position-rtd)
        (g$12750$c1uhW core-prim . &i/o-write-rcd)
        (g$12749$c1uhW core-prim . &i/o-write-rtd)
        (g$12748$c1uhW core-prim . &i/o-read-rcd)
        (g$12747$c1uhW core-prim . &i/o-read-rtd)
        (g$12746$c1uhW core-prim . &i/o-rcd)
        (g$12745$c1uhW core-prim . &i/o-rtd)
        (g$12744$c1uhW core-prim . &undefined-rcd)
        (g$12743$c1uhW core-prim . &undefined-rtd)
        (g$12742$c1uhW core-prim . &syntax-rcd)
        (g$12741$c1uhW core-prim . &syntax-rtd)
        (g$12740$c1uhW core-prim . &lexical-rcd)
        (g$12739$c1uhW core-prim . &lexical-rtd)
        (g$12738$c1uhW core-prim . &implementation-restriction-rcd)
        (g$12737$c1uhW core-prim . &implementation-restriction-rtd)
        (g$12736$c1uhW core-prim . &non-continuable-rcd)
        (g$12735$c1uhW core-prim . &non-continuable-rtd)
        (g$12734$c1uhW core-prim . &who-rcd)
        (g$12733$c1uhW core-prim . &who-rtd)
        (g$12732$c1uhW core-prim . &irritants-rcd)
        (g$12731$c1uhW core-prim . &irritants-rtd)
        (g$12730$c1uhW core-prim . &assertion-rcd)
        (g$12729$c1uhW core-prim . &assertion-rtd)
        (g$12728$c1uhW core-prim . &violation-rcd)
        (g$12727$c1uhW core-prim . &violation-rtd)
        (g$12726$c1uhW core-prim . &error-rcd)
        (g$12725$c1uhW core-prim . &error-rtd)
        (g$12724$c1uhW core-prim . &serious-rcd)
        (g$12723$c1uhW core-prim . &serious-rtd)
        (g$12722$c1uhW core-prim . &warning-rcd)
        (g$12721$c1uhW core-prim . &warning-rtd)
        (g$12720$c1uhW core-prim . &message-rcd)
        (g$12719$c1uhW core-prim . &message-rtd)
        (g$12718$c1uhW core-prim . &condition-rcd)
        (g$12717$c1uhW core-prim . &condition-rtd)
        (g$12716$c1uhW core-prim . library-letrec*)
        (g$12715$c1uhW core-prim . annotation-stripped)
        (g$12714$c1uhW core-prim . annotation-source)
        (g$12713$c1uhW core-prim . annotation-expression)
        (g$12712$c1uhW core-prim . annotation?)
        (g$12711$c1uhW core-prim . read-annotated)
        (g$12710$c1uhW core-prim . tanh)
        (g$12709$c1uhW core-prim . cosh)
        (g$12708$c1uhW core-prim . sinh)
        (g$12707$c1uhW core-prim . make-guid)
        (g$12706$c1uhW core-prim . unspecified?)
        (g$5856$c1uhW core-prim . make-list)
        (g$5855$c1uhW core-prim . last-pair)
        (g$12705$c1uhW core-prim . load-r5rs)
        (g$12704$c1uhW core-prim . license)
        (g$12703$c1uhW core-prim . stacktrace)
        (g$12149$c1uhW core-prim . ironscheme-build)
        (g$12702$c1uhW core-prim . define-clr-class-internal)
        (g$12701$c1uhW core-prim . clr-field-set!-internal)
        (g$12700$c1uhW core-prim . clr-field-get-internal)
        (g$12699$c1uhW core-prim . clr-cast-internal)
        (g$12698$c1uhW core-prim . clr-call-internal)
        (g$12697$c1uhW core-prim . clr-new-internal)
        (g$12696$c1uhW core-prim . clr-new-array-internal)
        (g$12695$c1uhW core-prim . clr-is-internal)
        (g$12694$c1uhW core-prim . clr-reference-internal)
        (g$12693$c1uhW core-prim . clr-using-internal)
        (g$9158$c1uhW core-prim . syntax-error)
        (g$9028$c1uhW core-prim . syntax-dispatch)
        (g$12692$c1uhW core-prim . compile-core)
        (g$12691$c1uhW core-prim . eval-core)
        (g$12690$c1uhW core-prim . set-symbol-value!)
        (g$12689$c1uhW core-prim . symbol-value)
        (g$12688$c1uhW core-prim . symbol-value?)
        (g$12687$c1uhW core-prim . ungensym)
        (g$12686$c1uhW core-prim . gensym)
        (g$12685$c1uhW core-prim . void)
        (g$12684$c1uhW core-prim . load-serialized-library)
        (g$12683$c1uhW core-prim . serialize-library)
        (g$12151$c1uhW core-prim . compile-system-libraries)
        (g$12153$c1uhW core-prim . compile->closure)
        (g$12152$c1uhW core-prim . compile)
        (g$12148$c1uhW core-prim . load)
        (g$9168$c1uhW core-prim . interaction-environment)
        (g$12682$c1uhW core-prim . char-ready?)
        (g$12681$c1uhW core-prim . string-upcase)
        (g$12680$c1uhW core-prim . string-titlecase)
        (g$12679$c1uhW core-prim . string-normalize-nfkd)
        (g$12678$c1uhW core-prim . string-normalize-nfkc)
        (g$12677$c1uhW core-prim . string-normalize-nfd)
        (g$12676$c1uhW core-prim . string-normalize-nfc)
        (g$12675$c1uhW core-prim . string-foldcase)
        (g$12674$c1uhW core-prim . string-downcase)
        (g$6995$c1uhW core-prim . string-ci>?)
        (g$6997$c1uhW core-prim . string-ci>=?)
        (g$6993$c1uhW core-prim . string-ci=?)
        (g$6994$c1uhW core-prim . string-ci<?)
        (g$6996$c1uhW core-prim . string-ci<=?)
        (g$12673$c1uhW core-prim . char-whitespace?)
        (g$12672$c1uhW core-prim . char-upper-case?)
        (g$12671$c1uhW core-prim . char-title-case?)
        (g$12670$c1uhW core-prim . char-numeric?)
        (g$12669$c1uhW core-prim . char-lower-case?)
        (g$12668$c1uhW core-prim . char-general-category)
        (g$12667$c1uhW core-prim . char-upcase)
        (g$12666$c1uhW core-prim . char-titlecase)
        (g$12665$c1uhW core-prim . char-foldcase)
        (g$12664$c1uhW core-prim . char-downcase)
        (g$7034$c1uhW core-prim . char-ci>?)
        (g$7036$c1uhW core-prim . char-ci>=?)
        (g$7032$c1uhW core-prim . char-ci=?)
        (g$7033$c1uhW core-prim . char-ci<?)
        (g$7035$c1uhW core-prim . char-ci<=?)
        (g$12663$c1uhW core-prim . char-alphabetic?)
        (g$8765$c1uhW core-prim . variable-transformer-procedure)
        (g$8764$c1uhW core-prim . variable-transformer?)
        (g$8763$c1uhW core-prim . make-variable-transformer)
        (g$9162$c1uhW core-prim . identifier?)
        (g$9151$c1uhW core-prim . generate-temporaries)
        (g$9152$c1uhW core-prim . free-identifier=?)
        (g$9164$c1uhW core-prim . syntax->datum)
        (g$9163$c1uhW core-prim . datum->syntax)
        (g$9153$c1uhW core-prim . bound-identifier=?)
        (g$12662$c1uhW core-prim . record-type-descriptor?)
        (g$12661$c1uhW core-prim . record-predicate)
        (g$12660$c1uhW core-prim . record-mutator)
        (g$12659$c1uhW core-prim . record-constructor)
        (g$12658$c1uhW core-prim . record-accessor)
        (g$12657$c1uhW core-prim . make-record-type-descriptor)
        (g$12656$c1uhW core-prim . make-record-constructor-descriptor)
        (g$12655$c1uhW core-prim . record?)
        (g$12654$c1uhW core-prim . record-type-uid)
        (g$12653$c1uhW core-prim . record-type-sealed?)
        (g$12652$c1uhW core-prim . record-type-parent)
        (g$12651$c1uhW core-prim . record-type-opaque?)
        (g$12650$c1uhW core-prim . record-type-name)
        (g$12649$c1uhW core-prim . record-type-generative?)
        (g$12648$c1uhW core-prim . record-type-field-names)
        (g$12647$c1uhW core-prim . record-rtd)
        (g$12646$c1uhW core-prim . record-field-mutable?)
        (g$6569$c1uhW core-prim . delete-file)
        (g$6568$c1uhW core-prim . file-exists?)
        (g$12645$c1uhW core-prim . vector-sort!)
        (g$12644$c1uhW core-prim . vector-sort)
        (g$6935$c1uhW core-prim . list-sort)
        (g$12643$c1uhW core-prim . symbol-hash)
        (g$12642$c1uhW core-prim . string-ci-hash)
        (g$12641$c1uhW core-prim . string-hash)
        (g$12640$c1uhW core-prim . equal-hash)
        (g$12639$c1uhW core-prim . hashtable-equivalence-function)
        (g$12638$c1uhW core-prim . make-hashtable)
        (g$12637$c1uhW core-prim . hashtable-hash-function)
        (g$6537$c1uhW core-prim . make-eqv-hashtable)
        (g$6536$c1uhW core-prim . make-eq-hashtable)
        (g$12636$c1uhW core-prim . hashtable?)
        (g$6543$c1uhW core-prim . hashtable-update!)
        (g$6538$c1uhW core-prim . hashtable-size)
        (g$6540$c1uhW core-prim . hashtable-set!)
        (g$6539$c1uhW core-prim . hashtable-ref)
        (g$12635$c1uhW core-prim . hashtable-mutable?)
        (g$12634$c1uhW core-prim . hashtable-keys)
        (g$12633$c1uhW core-prim . hashtable-entries)
        (g$6541$c1uhW core-prim . hashtable-delete!)
        (g$12632$c1uhW core-prim . hashtable-copy)
        (g$6542$c1uhW core-prim . hashtable-contains?)
        (g$6544$c1uhW core-prim . hashtable-clear!)
        (g$7420$c1uhW core-prim . call-with-output-file)
        (g$7419$c1uhW core-prim . call-with-input-file)
        (g$7401$c1uhW core-prim . write-char)
        (g$12631$c1uhW core-prim . write)
        (g$7418$c1uhW core-prim . with-output-to-file)
        (g$7417$c1uhW core-prim . with-input-from-file)
        (g$7400$c1uhW core-prim . read-char)
        (g$12630$c1uhW core-prim . read)
        (g$7399$c1uhW core-prim . peek-char)
        (g$12629$c1uhW core-prim . open-output-file)
        (g$12628$c1uhW core-prim . open-input-file)
        (g$7421$c1uhW core-prim . newline)
        (g$12627$c1uhW core-prim . display)
        (g$12626$c1uhW core-prim . close-output-port)
        (g$12625$c1uhW core-prim . close-input-port)
        (g$12624$c1uhW core-prim . eof-object?)
        (g$12623$c1uhW core-prim . eof-object)
        (g$12622$c1uhW core-prim . current-error-port)
        (g$12621$c1uhW core-prim . current-output-port)
        (g$12620$c1uhW core-prim . current-input-port)
        (g$12619$c1uhW core-prim . output-port?)
        (g$12618$c1uhW core-prim . input-port?)
        (g$12617$c1uhW core-prim . utf-8-codec)
        (g$12616$c1uhW core-prim . utf-16-codec)
        (g$12615$c1uhW core-prim . transcoder-error-handling-mode)
        (g$12614$c1uhW core-prim . transcoder-eol-style)
        (g$12613$c1uhW core-prim . transcoder-codec)
        (g$12612$c1uhW core-prim . transcoded-port)
        (g$12611$c1uhW core-prim . textual-port?)
        (g$12610$c1uhW core-prim . string->bytevector)
        (g$12609$c1uhW core-prim . standard-output-port)
        (g$12608$c1uhW core-prim . standard-input-port)
        (g$12607$c1uhW core-prim . standard-error-port)
        (g$12606$c1uhW core-prim . set-port-position!)
        (g$12605$c1uhW core-prim . put-u8)
        (g$12604$c1uhW core-prim . put-string)
        (g$12603$c1uhW core-prim . put-datum)
        (g$12602$c1uhW core-prim . put-char)
        (g$12601$c1uhW core-prim . put-bytevector)
        (g$7386$c1uhW core-prim . port?)
        (g$12600$c1uhW core-prim . port-transcoder)
        (g$12599$c1uhW core-prim . port-position)
        (g$12598$c1uhW core-prim . port-has-set-port-position!?)
        (g$12597$c1uhW core-prim . port-has-port-position?)
        (g$12596$c1uhW core-prim . port-eof?)
        (g$12595$c1uhW core-prim . output-port-buffer-mode)
        (g$7385$c1uhW core-prim . open-string-output-port)
        (g$12594$c1uhW core-prim . open-string-input-port)
        (g$12593$c1uhW core-prim . open-file-output-port)
        (g$12592$c1uhW core-prim . open-file-input/output-port)
        (g$12591$c1uhW core-prim . open-file-input-port)
        (g$12590$c1uhW core-prim . open-bytevector-output-port)
        (g$12589$c1uhW core-prim . open-bytevector-input-port)
        (g$12588$c1uhW core-prim . native-transcoder)
        (g$12587$c1uhW core-prim . native-eol-style)
        (g$12586$c1uhW core-prim . make-transcoder)
        (g$12585$c1uhW core-prim . latin-1-codec)
        (g$7241$c1uhW core-prim . make-i/o-write-error)
        (g$7227$c1uhW core-prim . make-i/o-read-error)
        (g$7346$c1uhW core-prim . make-i/o-port-error)
        (g$7256$c1uhW core-prim . make-i/o-invalid-position-error)
        (g$7273$c1uhW core-prim . make-i/o-filename-error)
        (g$7289$c1uhW core-prim . make-i/o-file-protection-error)
        (g$7303$c1uhW core-prim . make-i/o-file-is-read-only-error)
        (g$7331$c1uhW core-prim . make-i/o-file-does-not-exist-error)
        (g$7317$c1uhW core-prim . make-i/o-file-already-exists-error)
        (g$7213$c1uhW core-prim . make-i/o-error)
        (g$7377$c1uhW core-prim . make-i/o-encoding-error)
        (g$7362$c1uhW core-prim . make-i/o-decoding-error)
        (g$12584$c1uhW core-prim . make-custom-textual-output-port)
        (g$12583$c1uhW core-prim . make-custom-textual-input/output-port)
        (g$12582$c1uhW core-prim . make-custom-textual-input-port)
        (g$12581$c1uhW core-prim . make-custom-binary-output-port)
        (g$12580$c1uhW core-prim . make-custom-binary-input/output-port)
        (g$12579$c1uhW core-prim . make-custom-binary-input-port)
        (g$12578$c1uhW core-prim . make-bytevector)
        (g$12577$c1uhW core-prim . lookahead-u8)
        (g$12576$c1uhW core-prim . lookahead-char)
        (g$7242$c1uhW core-prim . i/o-write-error?)
        (g$7228$c1uhW core-prim . i/o-read-error?)
        (g$7348$c1uhW core-prim . i/o-port-error?)
        (g$7258$c1uhW core-prim . i/o-invalid-position-error?)
        (g$7259$c1uhW core-prim . i/o-error-position)
        (g$7275$c1uhW core-prim . i/o-filename-error?)
        (g$7290$c1uhW core-prim . i/o-file-protection-error?)
        (g$7304$c1uhW core-prim . i/o-file-is-read-only-error?)
        (g$7332$c1uhW core-prim . i/o-file-does-not-exist-error?)
        (g$7318$c1uhW core-prim . i/o-file-already-exists-error?)
        (g$7214$c1uhW core-prim . i/o-error?)
        (g$7349$c1uhW core-prim . i/o-error-port)
        (g$7276$c1uhW core-prim . i/o-error-filename)
        (g$7379$c1uhW core-prim . i/o-encoding-error?)
        (g$7380$c1uhW core-prim . i/o-encoding-error-char)
        (g$7363$c1uhW core-prim . i/o-decoding-error?)
        (g$12575$c1uhW core-prim . get-u8)
        (g$12574$c1uhW core-prim . get-string-n!)
        (g$12573$c1uhW core-prim . get-string-n)
        (g$12572$c1uhW core-prim . get-string-all)
        (g$12571$c1uhW core-prim . get-line)
        (g$12570$c1uhW core-prim . get-datum)
        (g$12569$c1uhW core-prim . get-char)
        (g$12568$c1uhW core-prim . get-bytevector-some)
        (g$12567$c1uhW core-prim . get-bytevector-n!)
        (g$12566$c1uhW core-prim . get-bytevector-n)
        (g$12565$c1uhW core-prim . get-bytevector-all)
        (g$12564$c1uhW core-prim . flush-output-port)
        (g$12563$c1uhW core-prim . close-port)
        (g$7387$c1uhW core-prim . call-with-string-output-port)
        (g$7388$c1uhW core-prim . call-with-port)
        (g$12562$c1uhW core-prim . call-with-bytevector-output-port)
        (g$12561$c1uhW core-prim . bytevector->string)
        (g$12560$c1uhW core-prim . buffer-mode?)
        (g$12559$c1uhW core-prim . binary-port?)
        (g$9141$c1uhW core-prim . scheme-report-environment)
        (g$6914$c1uhW core-prim . quotient)
        (g$9140$c1uhW core-prim . null-environment)
        (g$6915$c1uhW core-prim . remainder)
        (g$6916$c1uhW core-prim . modulo)
        (g$6911$c1uhW core-prim . inexact->exact)
        (g$6918$c1uhW core-prim . force)
        (g$6912$c1uhW core-prim . exact->inexact)
        (g$12558$c1uhW core-prim . exit)
        (g$12145$c1uhW core-prim . command-line)
        (g$12557$c1uhW core-prim . string-fill!)
        (g$12556$c1uhW core-prim . string-set!)
        (g$12555$c1uhW core-prim . set-cdr!)
        (g$12554$c1uhW core-prim . set-car!)
        (g$5878$c1uhW core-prim . remove)
        (g$5879$c1uhW core-prim . remv)
        (g$5859$c1uhW core-prim . remp)
        (g$5880$c1uhW core-prim . remq)
        (g$5858$c1uhW core-prim . partition)
        (g$5866$c1uhW core-prim . memv)
        (g$5865$c1uhW core-prim . memq)
        (g$5868$c1uhW core-prim . memp)
        (g$5867$c1uhW core-prim . member)
        (g$5872$c1uhW core-prim . exists)
        (g$5871$c1uhW core-prim . for-all)
        (g$5877$c1uhW core-prim . fold-right)
        (g$5876$c1uhW core-prim . fold-left)
        (g$5857$c1uhW core-prim . find)
        (g$5860$c1uhW core-prim . filter)
        (g$5875$c1uhW core-prim . cons*)
        (g$5862$c1uhW core-prim . assv)
        (g$5861$c1uhW core-prim . assq)
        (g$5864$c1uhW core-prim . assp)
        (g$5863$c1uhW core-prim . assoc)
        (g$12553$c1uhW core-prim . with-exception-handler)
        (g$12552$c1uhW core-prim . raise-continuable)
        (g$12551$c1uhW core-prim . raise)
        (g$9143$c1uhW core-prim . eval)
        (g$9139$c1uhW core-prim . environment)
        (g$7485$c1uhW core-prim . make-enumeration)
        (g$7492$c1uhW core-prim . enum-set=?)
        (g$7486$c1uhW core-prim . enum-set-universe)
        (g$7493$c1uhW core-prim . enum-set-union)
        (g$7491$c1uhW core-prim . enum-set-subset?)
        (g$7497$c1uhW core-prim . enum-set-projection)
        (g$7490$c1uhW core-prim . enum-set-member?)
        (g$7494$c1uhW core-prim . enum-set-intersection)
        (g$7487$c1uhW core-prim . enum-set-indexer)
        (g$7495$c1uhW core-prim . enum-set-difference)
        (g$7488$c1uhW core-prim . enum-set-constructor)
        (g$7496$c1uhW core-prim . enum-set-complement)
        (g$7489$c1uhW core-prim . enum-set->list)
        (g$6823$c1uhW core-prim . who-condition?)
        (g$6734$c1uhW core-prim . warning?)
        (g$6776$c1uhW core-prim . violation?)
        (g$6900$c1uhW core-prim . undefined-violation?)
        (g$6884$c1uhW core-prim . syntax-violation?)
        (g$6886$c1uhW core-prim . syntax-violation-subform)
        (g$6885$c1uhW core-prim . syntax-violation-form)
        (g$9161$c1uhW core-prim . syntax-violation)
        (g$12550$c1uhW core-prim . simple-conditions)
        (g$6748$c1uhW core-prim . serious-condition?)
        (g$6838$c1uhW core-prim . non-continuable-violation?)
        (g$6719$c1uhW core-prim . message-condition?)
        (g$6821$c1uhW core-prim . make-who-condition)
        (g$6733$c1uhW core-prim . make-warning)
        (g$6775$c1uhW core-prim . make-violation)
        (g$6899$c1uhW core-prim . make-undefined-violation)
        (g$6881$c1uhW core-prim . make-syntax-violation)
        (g$6747$c1uhW core-prim . make-serious-condition)
        (g$6837$c1uhW core-prim . make-non-continuable-violation)
        (g$6717$c1uhW core-prim . make-message-condition)
        (g$6865$c1uhW core-prim . make-lexical-violation)
        (g$6804$c1uhW core-prim . make-irritants-condition)
        (g$6851$c1uhW core-prim . make-implementation-restriction-violation)
        (g$6761$c1uhW core-prim . make-error)
        (g$6789$c1uhW core-prim . make-assertion-violation)
        (g$6866$c1uhW core-prim . lexical-violation?)
        (g$6806$c1uhW core-prim . irritants-condition?)
        (g$6852$c1uhW core-prim . implementation-restriction-violation?)
        (g$6762$c1uhW core-prim . error?)
        (g$6824$c1uhW core-prim . condition-who)
        (g$12549$c1uhW core-prim . condition-predicate)
        (g$6720$c1uhW core-prim . condition-message)
        (g$6807$c1uhW core-prim . condition-irritants)
        (g$12548$c1uhW core-prim . condition-accessor)
        (g$12547$c1uhW core-prim . condition)
        (g$6790$c1uhW core-prim . assertion-violation?)
        (g$12546$c1uhW core-prim . condition?)
        (g$12545$c1uhW core-prim . utf32->string)
        (g$12544$c1uhW core-prim . utf16->string)
        (g$12543$c1uhW core-prim . utf8->string)
        (g$12542$c1uhW core-prim . uint-list->bytevector)
        (g$12541$c1uhW core-prim . u8-list->bytevector)
        (g$12540$c1uhW core-prim . string->utf8)
        (g$12539$c1uhW core-prim . string->utf32)
        (g$12538$c1uhW core-prim . string->utf16)
        (g$12537$c1uhW core-prim . sint-list->bytevector)
        (g$6575$c1uhW core-prim . native-endianness)
        (g$12536$c1uhW core-prim . bytevector?)
        (g$12535$c1uhW core-prim . bytevector=?)
        (g$12534$c1uhW core-prim . bytevector-uint-set!)
        (g$12533$c1uhW core-prim . bytevector-uint-ref)
        (g$12532$c1uhW core-prim . bytevector-u8-set!)
        (g$12531$c1uhW core-prim . bytevector-u8-ref)
        (g$6596$c1uhW core-prim . bytevector-u64-set!)
        (g$6592$c1uhW core-prim . bytevector-u64-ref)
        (g$6598$c1uhW core-prim . bytevector-u64-native-set!)
        (g$6594$c1uhW core-prim . bytevector-u64-native-ref)
        (g$6588$c1uhW core-prim . bytevector-u32-set!)
        (g$6584$c1uhW core-prim . bytevector-u32-ref)
        (g$6590$c1uhW core-prim . bytevector-u32-native-set!)
        (g$6586$c1uhW core-prim . bytevector-u32-native-ref)
        (g$6580$c1uhW core-prim . bytevector-u16-set!)
        (g$6576$c1uhW core-prim . bytevector-u16-ref)
        (g$6582$c1uhW core-prim . bytevector-u16-native-set!)
        (g$6578$c1uhW core-prim . bytevector-u16-native-ref)
        (g$12530$c1uhW core-prim . bytevector-sint-set!)
        (g$12529$c1uhW core-prim . bytevector-sint-ref)
        (g$12528$c1uhW core-prim . bytevector-s8-set!)
        (g$12527$c1uhW core-prim . bytevector-s8-ref)
        (g$6597$c1uhW core-prim . bytevector-s64-set!)
        (g$6593$c1uhW core-prim . bytevector-s64-ref)
        (g$6599$c1uhW core-prim . bytevector-s64-native-set!)
        (g$6595$c1uhW core-prim . bytevector-s64-native-ref)
        (g$6589$c1uhW core-prim . bytevector-s32-set!)
        (g$6585$c1uhW core-prim . bytevector-s32-ref)
        (g$6591$c1uhW core-prim . bytevector-s32-native-set!)
        (g$6587$c1uhW core-prim . bytevector-s32-native-ref)
        (g$6581$c1uhW core-prim . bytevector-s16-set!)
        (g$6577$c1uhW core-prim . bytevector-s16-ref)
        (g$6583$c1uhW core-prim . bytevector-s16-native-set!)
        (g$6579$c1uhW core-prim . bytevector-s16-native-ref)
        (g$12526$c1uhW core-prim . bytevector-length)
        (g$12525$c1uhW core-prim . bytevector-ieee-single-set!)
        (g$12524$c1uhW core-prim . bytevector-ieee-single-ref)
        (g$6602$c1uhW core-prim . bytevector-ieee-single-native-set!)
        (g$6600$c1uhW core-prim . bytevector-ieee-single-native-ref)
        (g$12523$c1uhW core-prim . bytevector-ieee-double-set!)
        (g$12522$c1uhW core-prim . bytevector-ieee-double-ref)
        (g$6603$c1uhW core-prim . bytevector-ieee-double-native-set!)
        (g$6601$c1uhW core-prim . bytevector-ieee-double-native-ref)
        (g$12521$c1uhW core-prim . bytevector-fill!)
        (g$12520$c1uhW core-prim . bytevector-copy!)
        (g$12519$c1uhW core-prim . bytevector-copy)
        (g$12518$c1uhW core-prim . bytevector->uint-list)
        (g$12517$c1uhW core-prim . bytevector->u8-list)
        (g$12516$c1uhW core-prim . bytevector->sint-list)
        (g$7199$c1uhW core-prim . no-nans-violation?)
        (g$7185$c1uhW core-prim . no-infinities-violation?)
        (g$7198$c1uhW core-prim . make-no-nans-violation)
        (g$7184$c1uhW core-prim . make-no-infinities-violation)
        (g$12515$c1uhW core-prim . real->flonum)
        (g$12514$c1uhW core-prim . flzero?)
        (g$12513$c1uhW core-prim . fltruncate)
        (g$12512$c1uhW core-prim . fltan)
        (g$12511$c1uhW core-prim . flsqrt)
        (g$12510$c1uhW core-prim . flsin)
        (g$12509$c1uhW core-prim . flround)
        (g$12508$c1uhW core-prim . flpositive?)
        (g$12507$c1uhW core-prim . flonum?)
        (g$12506$c1uhW core-prim . flodd?)
        (g$12505$c1uhW core-prim . flnumerator)
        (g$12504$c1uhW core-prim . flnegative?)
        (g$12503$c1uhW core-prim . flnan?)
        (g$12502$c1uhW core-prim . flmod0)
        (g$12501$c1uhW core-prim . flmod)
        (g$12500$c1uhW core-prim . flmin)
        (g$12499$c1uhW core-prim . flmax)
        (g$12498$c1uhW core-prim . fllog)
        (g$12497$c1uhW core-prim . flinteger?)
        (g$12496$c1uhW core-prim . flinfinite?)
        (g$12495$c1uhW core-prim . flfloor)
        (g$12494$c1uhW core-prim . flfinite?)
        (g$12493$c1uhW core-prim . flexpt)
        (g$12492$c1uhW core-prim . flexp)
        (g$12491$c1uhW core-prim . fleven?)
        (g$12490$c1uhW core-prim . fldiv0-and-mod0)
        (g$12489$c1uhW core-prim . fldiv0)
        (g$12488$c1uhW core-prim . fldiv-and-mod)
        (g$12487$c1uhW core-prim . fldiv)
        (g$12486$c1uhW core-prim . fldenominator)
        (g$12485$c1uhW core-prim . flcos)
        (g$12484$c1uhW core-prim . flceiling)
        (g$12483$c1uhW core-prim . flatan)
        (g$12482$c1uhW core-prim . flasin)
        (g$12481$c1uhW core-prim . flacos)
        (g$12480$c1uhW core-prim . flabs)
        (g$12479$c1uhW core-prim . fl>?)
        (g$12478$c1uhW core-prim . fl>=?)
        (g$12477$c1uhW core-prim . fl=?)
        (g$12476$c1uhW core-prim . fl<?)
        (g$12475$c1uhW core-prim . fl<=?)
        (g$12474$c1uhW core-prim . fl/)
        (g$12473$c1uhW core-prim . fl-)
        (g$12472$c1uhW core-prim . fl+)
        (g$12471$c1uhW core-prim . fl*)
        (g$12470$c1uhW core-prim . fixnum->flonum)
        (g$12469$c1uhW core-prim . fxzero?)
        (g$12468$c1uhW core-prim . fxxor)
        (g$7131$c1uhW core-prim . fxrotate-bit-field)
        (g$12467$c1uhW core-prim . fxreverse-bit-field)
        (g$12466$c1uhW core-prim . fxpositive?)
        (g$12465$c1uhW core-prim . fxodd?)
        (g$12464$c1uhW core-prim . fxnot)
        (g$12463$c1uhW core-prim . fxnegative?)
        (g$12462$c1uhW core-prim . fxmod0)
        (g$12461$c1uhW core-prim . fxmod)
        (g$12460$c1uhW core-prim . fxmin)
        (g$12459$c1uhW core-prim . fxmax)
        (g$12458$c1uhW core-prim . fxlength)
        (g$12457$c1uhW core-prim . fxior)
        (g$7125$c1uhW core-prim . fxif)
        (g$12456$c1uhW core-prim . fxfirst-bit-set)
        (g$12455$c1uhW core-prim . fxeven?)
        (g$12454$c1uhW core-prim . fxdiv0-and-mod0)
        (g$12453$c1uhW core-prim . fxdiv0)
        (g$12452$c1uhW core-prim . fxdiv-and-mod)
        (g$12451$c1uhW core-prim . fxdiv)
        (g$7128$c1uhW core-prim . fxcopy-bit-field)
        (g$7126$c1uhW core-prim . fxcopy-bit)
        (g$12450$c1uhW core-prim . fxbit-set?)
        (g$7127$c1uhW core-prim . fxbit-field)
        (g$12449$c1uhW core-prim . fxbit-count)
        (g$7130$c1uhW core-prim . fxarithmetic-shift-right)
        (g$7129$c1uhW core-prim . fxarithmetic-shift-left)
        (g$12448$c1uhW core-prim . fxarithmetic-shift)
        (g$12447$c1uhW core-prim . fxand)
        (g$12446$c1uhW core-prim . fx>?)
        (g$12445$c1uhW core-prim . fx>=?)
        (g$12444$c1uhW core-prim . fx=?)
        (g$12443$c1uhW core-prim . fx<?)
        (g$12442$c1uhW core-prim . fx<=?)
        (g$7123$c1uhW core-prim . fx-/carry)
        (g$12441$c1uhW core-prim . fx-)
        (g$7124$c1uhW core-prim . fx+/carry)
        (g$12440$c1uhW core-prim . fx+)
        (g$7122$c1uhW core-prim . fx*/carry)
        (g$12439$c1uhW core-prim . fx*)
        (g$12438$c1uhW core-prim . greatest-fixnum)
        (g$12437$c1uhW core-prim . least-fixnum)
        (g$12436$c1uhW core-prim . fixnum-width)
        (g$12435$c1uhW core-prim . fixnum?)
        (g$7096$c1uhW core-prim . bitwise-rotate-bit-field)
        (g$12434$c1uhW core-prim . bitwise-reverse-bit-field)
        (g$12433$c1uhW core-prim . bitwise-length)
        (g$7090$c1uhW core-prim . bitwise-if)
        (g$12432$c1uhW core-prim . bitwise-first-bit-set)
        (g$7093$c1uhW core-prim . bitwise-copy-bit-field)
        (g$7091$c1uhW core-prim . bitwise-copy-bit)
        (g$12431$c1uhW core-prim . bitwise-bit-set?)
        (g$7092$c1uhW core-prim . bitwise-bit-field)
        (g$12430$c1uhW core-prim . bitwise-bit-count)
        (g$12429$c1uhW core-prim . bitwise-xor)
        (g$12428$c1uhW core-prim . bitwise-ior)
        (g$12427$c1uhW core-prim . bitwise-and)
        (g$12426$c1uhW core-prim . bitwise-not)
        (g$7095$c1uhW core-prim . bitwise-arithmetic-shift-right)
        (g$7094$c1uhW core-prim . bitwise-arithmetic-shift-left)
        (g$12425$c1uhW core-prim . bitwise-arithmetic-shift)
        (g$6021$c1uhW core-prim . zero?)
        (g$12424$c1uhW core-prim . vector?)
        (g$12423$c1uhW core-prim . vector-set!)
        (g$12422$c1uhW core-prim . vector-ref)
        (g$12421$c1uhW core-prim . vector-map)
        (g$12420$c1uhW core-prim . vector-length)
        (g$12419$c1uhW core-prim . vector-for-each)
        (g$12418$c1uhW core-prim . vector-fill!)
        (g$12417$c1uhW core-prim . vector->list)
        (g$12416$c1uhW core-prim . vector)
        (g$12415$c1uhW core-prim . values)
        (g$12414$c1uhW core-prim . truncate)
        (g$12413$c1uhW core-prim . tan)
        (g$12412$c1uhW core-prim . symbol?)
        (g$6067$c1uhW core-prim . symbol=?)
        (g$12411$c1uhW core-prim . symbol->string)
        (g$12410$c1uhW core-prim . substring)
        (g$12409$c1uhW core-prim . string?)
        (g$6064$c1uhW core-prim . string>?)
        (g$6066$c1uhW core-prim . string>=?)
        (g$6062$c1uhW core-prim . string=?)
        (g$6063$c1uhW core-prim . string<?)
        (g$6065$c1uhW core-prim . string<=?)
        (g$12408$c1uhW core-prim . string-ref)
        (g$12407$c1uhW core-prim . string-length)
        (g$12406$c1uhW core-prim . string-for-each)
        (g$12405$c1uhW core-prim . string-copy)
        (g$12404$c1uhW core-prim . string-append)
        (g$12403$c1uhW core-prim . string->symbol)
        (g$12402$c1uhW core-prim . string->number)
        (g$12401$c1uhW core-prim . string->list)
        (g$12400$c1uhW core-prim . string)
        (g$12399$c1uhW core-prim . sqrt)
        (g$12398$c1uhW core-prim . sin)
        (g$12397$c1uhW core-prim . round)
        (g$12396$c1uhW core-prim . reverse)
        (g$12395$c1uhW core-prim . real?)
        (g$12394$c1uhW core-prim . real-valued?)
        (g$12393$c1uhW core-prim . real-part)
        (g$6108$c1uhW core-prim . rationalize)
        (g$12392$c1uhW core-prim . rational?)
        (g$12391$c1uhW core-prim . rational-valued?)
        (g$12390$c1uhW core-prim . procedure?)
        (g$6019$c1uhW core-prim . positive?)
        (g$12389$c1uhW core-prim . pair?)
        (g$6023$c1uhW core-prim . odd?)
        (g$12388$c1uhW core-prim . numerator)
        (g$12387$c1uhW core-prim . number?)
        (g$12386$c1uhW core-prim . number->string)
        (g$12385$c1uhW core-prim . null?)
        (g$12384$c1uhW core-prim . not)
        (g$6020$c1uhW core-prim . negative?)
        (g$12383$c1uhW core-prim . nan?)
        (g$6025$c1uhW core-prim . min)
        (g$6024$c1uhW core-prim . max)
        (g$5873$c1uhW core-prim . map)
        (g$12382$c1uhW core-prim . make-vector)
        (g$12381$c1uhW core-prim . make-string)
        (g$12380$c1uhW core-prim . make-rectangular)
        (g$12379$c1uhW core-prim . make-polar)
        (g$12378$c1uhW core-prim . magnitude)
        (g$12377$c1uhW core-prim . log)
        (g$12376$c1uhW core-prim . list?)
        (g$5853$c1uhW core-prim . list-tail)
        (g$5854$c1uhW core-prim . list-ref)
        (g$12375$c1uhW core-prim . list->vector)
        (g$12374$c1uhW core-prim . list->string)
        (g$12373$c1uhW core-prim . list)
        (g$12372$c1uhW core-prim . length)
        (g$6027$c1uhW core-prim . lcm)
        (g$12371$c1uhW core-prim . integer?)
        (g$12370$c1uhW core-prim . integer-valued?)
        (g$12369$c1uhW core-prim . integer->char)
        (g$12368$c1uhW core-prim . infinite?)
        (g$12367$c1uhW core-prim . inexact?)
        (g$12366$c1uhW core-prim . inexact)
        (g$12365$c1uhW core-prim . imag-part)
        (g$6026$c1uhW core-prim . gcd)
        (g$5874$c1uhW core-prim . for-each)
        (g$12364$c1uhW core-prim . floor)
        (g$12363$c1uhW core-prim . finite?)
        (g$12362$c1uhW core-prim . expt)
        (g$12361$c1uhW core-prim . exp)
        (g$12360$c1uhW core-prim . exact?)
        (g$12359$c1uhW core-prim . exact-integer-sqrt)
        (g$12358$c1uhW core-prim . exact)
        (g$6022$c1uhW core-prim . even?)
        (g$12357$c1uhW core-prim . error)
        (g$12356$c1uhW core-prim . eqv?)
        (g$12355$c1uhW core-prim . equal?)
        (g$12354$c1uhW core-prim . eq?)
        (g$12353$c1uhW core-prim . dynamic-wind)
        (g$12352$c1uhW core-prim . div0-and-mod0)
        (g$12351$c1uhW core-prim . mod0)
        (g$12350$c1uhW core-prim . div0)
        (g$12349$c1uhW core-prim . div-and-mod)
        (g$12348$c1uhW core-prim . mod)
        (g$12347$c1uhW core-prim . div)
        (g$12346$c1uhW core-prim . denominator)
        (g$12345$c1uhW core-prim . cos)
        (g$12344$c1uhW core-prim . cons)
        (g$12343$c1uhW core-prim . complex?)
        (g$12342$c1uhW core-prim . char?)
        (g$6105$c1uhW core-prim . char>?)
        (g$6107$c1uhW core-prim . char>=?)
        (g$6103$c1uhW core-prim . char=?)
        (g$6104$c1uhW core-prim . char<?)
        (g$6106$c1uhW core-prim . char<=?)
        (g$12341$c1uhW core-prim . char->integer)
        (g$12340$c1uhW core-prim . ceiling)
        (g$12339$c1uhW core-prim . call-with-values)
        (g$12338$c1uhW core-prim . call/cc)
        (g$12337$c1uhW core-prim . call-with-current-continuation)
        (g$6018$c1uhW core-prim . cddddr)
        (g$6017$c1uhW core-prim . cdddar)
        (g$6016$c1uhW core-prim . cddadr)
        (g$6015$c1uhW core-prim . cddaar)
        (g$6014$c1uhW core-prim . cdaddr)
        (g$6013$c1uhW core-prim . cdadar)
        (g$6012$c1uhW core-prim . cdaadr)
        (g$6011$c1uhW core-prim . cdaaar)
        (g$6010$c1uhW core-prim . cadddr)
        (g$6009$c1uhW core-prim . caddar)
        (g$6008$c1uhW core-prim . cadadr)
        (g$6007$c1uhW core-prim . cadaar)
        (g$6006$c1uhW core-prim . caaddr)
        (g$6005$c1uhW core-prim . caadar)
        (g$6004$c1uhW core-prim . caaadr)
        (g$6003$c1uhW core-prim . caaaar)
        (g$6002$c1uhW core-prim . cdddr)
        (g$6001$c1uhW core-prim . cddar)
        (g$6000$c1uhW core-prim . cdadr)
        (g$5999$c1uhW core-prim . cdaar)
        (g$5998$c1uhW core-prim . caddr)
        (g$5997$c1uhW core-prim . cadar)
        (g$5996$c1uhW core-prim . caadr)
        (g$5995$c1uhW core-prim . caaar)
        (g$5994$c1uhW core-prim . cddr)
        (g$5993$c1uhW core-prim . cdar)
        (g$5992$c1uhW core-prim . cadr)
        (g$5991$c1uhW core-prim . caar)
        (g$12336$c1uhW core-prim . cdr)
        (g$12335$c1uhW core-prim . car)
        (g$12334$c1uhW core-prim . boolean?)
        (g$6068$c1uhW core-prim . boolean=?)
        (g$12333$c1uhW core-prim . atan)
        (g$12332$c1uhW core-prim . assertion-violation)
        (g$12331$c1uhW core-prim . asin)
        (g$12330$c1uhW core-prim . apply)
        (g$12329$c1uhW core-prim . append)
        (g$12328$c1uhW core-prim . angle)
        (g$12327$c1uhW core-prim . acos)
        (g$12326$c1uhW core-prim . abs)
        (g$12325$c1uhW core-prim . /)
        (g$12324$c1uhW core-prim . *)
        (g$12323$c1uhW core-prim . -)
        (g$12322$c1uhW core-prim . +)
        (g$12321$c1uhW core-prim . >=)
        (g$12320$c1uhW core-prim . >)
        (g$12319$c1uhW core-prim . =)
        (g$12318$c1uhW core-prim . <=)
        (g$12317$c1uhW core-prim . <)
        (g$12316$c1uhW core-prim . make-record-printer)
        (g$12315$c1uhW core-prim . eqv-hash)
        (g$12314$c1uhW core-prim . reverse!)
        (g$12313$c1uhW core-prim . deserialize-port)
        (g$12312$c1uhW core-prim . serialize-port)
        (g$7460$c1uhW core-prim . enum-set?)
        (g$6917$c1uhW core-prim . make-promise)
        (g$12147$c1uhW core-prim . load/args)
        (g$7571$c1uhW core-prim . printf)
        (g$7572$c1uhW core-prim . fprintf)
        (g$7573$c1uhW core-prim . format)
        (g$12311$c1uhW core-prim . procedure-form)
        (g$12310$c1uhW core-prim . procedure-environment)
        (g$12309$c1uhW core-prim . procedure-name)
        (g$12308$c1uhW core-prim . procedure-arity)
        (g$12307$c1uhW core-prim . gc-collect)
        (g$12306$c1uhW core-prim . clr-type?)
        (g$12305$c1uhW core-prim . get-clr-type)
        (g$12304$c1uhW core-prim . get-command-line)
        (g$12303$c1uhW core-prim . vector-append)
        (g$12302$c1uhW core-prim . vector-filter)
        (g$12301$c1uhW core-prim . vector-reverse!)
        (g$12300$c1uhW core-prim . vector-contains?)
        (g$12299$c1uhW core-prim . vector-index-of)
        (g$12298$c1uhW core-prim . vector-copy)
        (g$12297$c1uhW core-prim . vector-binary-search)
        (g$12296$c1uhW core-prim . string-ci-compare)
        (g$12295$c1uhW core-prim . string-compare)
        (g$12294$c1uhW core-prim . string-format)
        (g$12144$c1uhW core-prim . trace-printer)
        (g$12293$c1uhW core-prim . make-traced-procedure)
        (g$7593$c1uhW core-prim . make-traced-macro)
        (g$9157$c1uhW core-prim . assertion-error)
        (g$12292$c1uhW core-prim . time-it)
        (g$7862$c1uhW core-prim . make-parameter)
        (g$12291$c1uhW core-prim . library-locator)
        (g$12290$c1uhW core-prim . get-library-paths)
        (g$12289$c1uhW core-prim . open-tcp-input/output-port)
        (g$12288$c1uhW core-prim . hashtable-for-each)
        (g$12287$c1uhW core-prim . hashtable-map)
        (g$9135$c1uhW core-prim . environment-bindings)
        (g$9138$c1uhW core-prim . environment-symbols)
        (g$9134$c1uhW core-prim . interaction-environment-symbols)
        (g$12286$c1uhW core-prim . optimization-level)
        (g$8317$c1uhW core-prim . library-path)
        (g$9144$c1uhW core-prim . expand->core)
        (g$9142$c1uhW core-prim . expand)
        (g$7648$c1uhW core-prim . convert->cps)
        (g$7647$c1uhW core-prim . parse->cps)
        (g$12285$c1uhW $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$12284$c1uhW $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$12283$c1uhW $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$12282$c1uhW $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$12281$c1uhW $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$12280$c1uhW
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$12279$c1uhW
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$12278$c1uhW
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$12277$c1uhW
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$12276$c1uhW $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$12275$c1uhW
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$12274$c1uhW $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$12273$c1uhW $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$12272$c1uhW $core-rtd &i/o-rtd &i/o-rcd)
        (g$12271$c1uhW $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$12270$c1uhW $core-rtd &undefined-rtd &undefined-rcd)
        (g$12269$c1uhW $core-rtd &syntax-rtd &syntax-rcd)
        (g$12268$c1uhW $core-rtd &lexical-rtd &lexical-rcd)
        (g$12267$c1uhW
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$12266$c1uhW $core-rtd &who-rtd &who-rcd)
        (g$12265$c1uhW $core-rtd &irritants-rtd &irritants-rcd)
        (g$12264$c1uhW $core-rtd &assertion-rtd &assertion-rcd)
        (g$12263$c1uhW $core-rtd &violation-rtd &violation-rcd)
        (g$12262$c1uhW $core-rtd &error-rtd &error-rcd)
        (g$12261$c1uhW $core-rtd &serious-rtd &serious-rcd)
        (g$12260$c1uhW $core-rtd &warning-rtd &warning-rcd)
        (g$12259$c1uhW $core-rtd &message-rtd &message-rcd)
        (g$12258$c1uhW $core-rtd &condition-rtd &condition-rcd)
        (g$12257$c1uhW macro . define-condition-type)
        (g$12256$c1uhW macro . define-enumeration)
        (g$12255$c1uhW macro . define-record-type)
        (g$12254$c1uhW macro . parent-rtd)
        (g$12253$c1uhW macro . nongenerative)
        (g$12252$c1uhW macro . opaque)
        (g$12251$c1uhW macro . sealed)
        (g$12250$c1uhW macro . protocol)
        (g$12249$c1uhW macro . parent)
        (g$12248$c1uhW macro . immutable)
        (g$12247$c1uhW macro . mutable)
        (g$12246$c1uhW macro . fields)
        (g$12245$c1uhW macro . error-handling-mode)
        (g$12244$c1uhW macro . file-options)
        (g$12243$c1uhW macro . buffer-mode)
        (g$12242$c1uhW macro . eol-style)
        (g$12241$c1uhW macro . guard)
        (g$12240$c1uhW macro . trace-letrec-syntax)
        (g$12239$c1uhW macro . trace-let-syntax)
        (g$12238$c1uhW macro . trace-define-syntax)
        (g$12237$c1uhW macro . trace-define)
        (g$12236$c1uhW macro . trace-lambda)
        (g$12235$c1uhW macro . unsyntax-splicing)
        (g$12234$c1uhW macro . unsyntax)
        (g$12233$c1uhW macro . unquote-splicing)
        (g$12232$c1uhW macro . unquote)
        (g$12231$c1uhW macro . _)
        (g$12230$c1uhW macro . else)
        (g$12229$c1uhW macro . =>)
        (g$12228$c1uhW macro . ...)
        (g$12227$c1uhW macro . assert)
        (g$12226$c1uhW macro . endianness)
        (g$12225$c1uhW macro . delay)
        (g$12224$c1uhW macro . time)
        (g$12223$c1uhW macro . or)
        (g$12222$c1uhW macro . and)
        (g$12221$c1uhW macro . do)
        (g$12220$c1uhW macro . cond)
        (g$12219$c1uhW macro . let*)
        (g$12218$c1uhW macro . let)
        (g$12217$c1uhW macro . identifier-syntax)
        (g$12216$c1uhW macro . with-syntax)
        (g$12215$c1uhW macro . quasisyntax)
        (g$12214$c1uhW macro . quasiquote)
        (g$12213$c1uhW macro . syntax-rules)
        (g$12212$c1uhW macro . include-into)
        (g$12211$c1uhW macro . include)
        (g$12210$c1uhW macro . define-struct)
        (g$12209$c1uhW macro . let-values)
        (g$12208$c1uhW macro . let*-values)
        (g$12207$c1uhW core-macro . record-constructor-descriptor)
        (g$12206$c1uhW core-macro . record-type-descriptor)
        (g$12205$c1uhW core-macro . fluid-let-syntax)
        (g$12204$c1uhW macro . case)
        (g$12203$c1uhW macro . parameterize)
        (g$12202$c1uhW macro . unless)
        (g$12201$c1uhW macro . when)
        (g$12200$c1uhW core-macro . if)
        (g$12199$c1uhW core-macro . letrec*)
        (g$12198$c1uhW core-macro . letrec)
        (g$12197$c1uhW core-macro . type-descriptor)
        (g$12196$c1uhW core-macro . case-lambda)
        (g$12195$c1uhW core-macro . lambda)
        (g$12194$c1uhW core-macro . syntax)
        (g$12193$c1uhW core-macro . syntax-case)
        (g$12192$c1uhW core-macro . quote)
        (g$12191$c1uhW core-macro . foreign-call)
        (g$12190$c1uhW letrec-syntax)
        (g$12189$c1uhW let-syntax)
        (g$12188$c1uhW set!)
        (g$12187$c1uhW export)
        (g$12186$c1uhW import)
        (g$12185$c1uhW library)
        (g$12184$c1uhW begin)
        (g$12183$c1uhW module)
        (g$12182$c1uhW define-syntax)
        (g$12181$c1uhW define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$c1uhW
      'g$12809$c1uhW
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$12692$c1uhW)
        (eval-core . g$12691$c1uhW)
        (set-symbol-value! . g$12690$c1uhW)
        (symbol-value . g$12689$c1uhW)
        (gensym . g$12686$c1uhW)
        (void . g$12685$c1uhW))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11606$c1uhW
     g$trace-printer$11646$c1uhW
     (g$make-parameter$6976$c1uhW write))
   (g$command-line$11607$c1uhW
     g$command-line$11647$c1uhW
     (g$make-parameter$6976$c1uhW (get-command-line)))
   (g$local-library-path$11608$c1uhW
     g$local-library-path$11648$c1uhW
     (case-lambda
       ((g$filename$11619$c1uhW)
        (cons
          (g$get-directory-name$5558$c1uhW g$filename$11619$c1uhW)
          (g$library-path$7496$c1uhW)))))
   (g$load/args$11609$c1uhW
     g$load/args$11649$c1uhW
     (case-lambda
       ((g$filename$11620$c1uhW . g$args$11621$c1uhW)
        (begin
          (apply
            g$load-r6rs-top-level$11616$c1uhW
            g$filename$11620$c1uhW
            'load
            g$args$11621$c1uhW)
          (void)))))
   (g$load$11610$c1uhW
     g$load$11650$c1uhW
     (case-lambda
       ((g$filename$11622$c1uhW)
        (begin
          (apply
            g$load-r6rs-top-level$11616$c1uhW
            g$filename$11622$c1uhW
            'load
            (cdr (g$command-line$11607$c1uhW)))
          (void)))))
   (g$ironscheme-build$11611$c1uhW
     g$ironscheme-build$11651$c1uhW
     (case-lambda (() (g$load$11610$c1uhW '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11612$c1uhW
     g$eval-top-level$11652$c1uhW
     (case-lambda
       ((g$x$11623$c1uhW)
        (g$eval$11579$c1uhW
          g$x$11623$c1uhW
          (g$interaction-environment$11604$c1uhW)))))
   (g$compile-system-libraries$11613$c1uhW
     g$compile-system-libraries$11653$c1uhW
     (case-lambda
       (()
        (g$eval-top-level$11612$c1uhW
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11614$c1uhW
     g$compile$11654$c1uhW
     (case-lambda
       ((g$filename$11624$c1uhW)
        (g$load-r6rs-top-level$11616$c1uhW g$filename$11624$c1uhW 'compile))))
   (g$compile->closure$11615$c1uhW
     g$compile->closure$11655$c1uhW
     (case-lambda
       ((g$filename$11625$c1uhW)
        (g$load-r6rs-top-level$11616$c1uhW g$filename$11625$c1uhW 'closure))))
   (g$load-r6rs-top-level$11616$c1uhW
     g$load-r6rs-top-level$11656$c1uhW
     (case-lambda
       ((g$filename$11626$c1uhW g$how$11627$c1uhW . g$args$11628$c1uhW)
        ((case-lambda
           ((g$library-path$11631$c1uhW g$library-path$11632$c1uhW)
            ((case-lambda
               ((g$swap$11633$c1uhW)
                (dynamic-wind
                  g$swap$11633$c1uhW
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11634$c1uhW)
                         ((case-lambda
                            ((g$t$11635$c1uhW)
                             (if (g$memv$5056$c1uhW g$t$11635$c1uhW '(closure))
                               (g$pre-compile-r6rs-top-level$11602$c1uhW
                                 g$x*$11634$c1uhW)
                               (if (g$memv$5056$c1uhW g$t$11635$c1uhW '(load))
                                 ((case-lambda
                                    ((g$command-line$11638$c1uhW
                                       g$command-line$11639$c1uhW)
                                     ((case-lambda
                                        ((g$swap$11640$c1uhW)
                                         (dynamic-wind
                                           g$swap$11640$c1uhW
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11601$c1uhW
                                                 g$x*$11634$c1uhW))))
                                           g$swap$11640$c1uhW)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11641$c1uhW)
                                             (begin
                                               (g$command-line$11638$c1uhW
                                                 g$command-line$11639$c1uhW)
                                               (set! g$command-line$11639$c1uhW
                                                 g$t$11641$c1uhW))))
                                          (g$command-line$11638$c1uhW)))))))
                                  g$command-line$11607$c1uhW
                                  (cons
                                    g$filename$11626$c1uhW
                                    (g$map$5063$c1uhW
                                      (case-lambda
                                        ((g$x$11642$c1uhW)
                                         (g$format$6559$c1uhW
                                           '"~a"
                                           g$x$11642$c1uhW)))
                                      g$args$11628$c1uhW)))
                                 (if (g$memv$5056$c1uhW
                                       g$t$11635$c1uhW
                                       '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11601$c1uhW
                                       g$x*$11634$c1uhW)
                                     (g$serialize-all$7500$c1uhW
                                       serialize-library
                                       g$compile-core-expr$7223$c1uhW))
                                   (if '#f '#f (void)))))))
                          g$how$11627$c1uhW)))
                      (g$with-input-from-file$6385$c1uhW
                        g$filename$11626$c1uhW
                        (case-lambda
                          (()
                           ((letrec ((g$f$11643$c1uhW
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11644$c1uhW)
                                              (if (eof-object? g$x$11644$c1uhW)
                                                '()
                                                (cons
                                                  g$x$11644$c1uhW
                                                  (g$f$11643$c1uhW)))))
                                           (read-annotated))))))
                              g$f$11643$c1uhW))))))))
                  g$swap$11633$c1uhW)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11645$c1uhW)
                    (begin
                      (g$library-path$11631$c1uhW g$library-path$11632$c1uhW)
                      (set! g$library-path$11632$c1uhW g$t$11645$c1uhW))))
                 (g$library-path$11631$c1uhW)))))))
         g$library-path$7496$c1uhW
         (g$local-library-path$11608$c1uhW g$filename$11626$c1uhW)))))
   (g$fo$11617$c1uhW
     g$fo$11657$c1uhW
     (g$make-enumeration$6521$c1uhW '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7501$c1uhW
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11618$c1uhW)
         (if (g$serious-condition?$5820$c1uhW g$ex$11618$c1uhW)
           (raise g$ex$11618$c1uhW)
           (begin (display g$ex$11618$c1uhW) (g$newline$6389$c1uhW))))))
    (set-symbol-value! 'load g$load$11610$c1uhW)
    (set-symbol-value! 'compile g$compile$11614$c1uhW)
    (set-symbol-value! 'compile->closure g$compile->closure$11615$c1uhW)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11612$c1uhW)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11570$c1uhW)
    (set-symbol-value! 'expanded2core g$expanded->core$7222$c1uhW)
    (set-symbol-value! 'trace-printer g$trace-printer$11606$c1uhW)
    (set-symbol-value! 'convert->cps g$convert->cps$6876$c1uhW)
    (g$file-options-constructor$6977$c1uhW
      (g$enum-set-constructor$6524$c1uhW g$fo$11617$c1uhW))
    (g$library-path$7496$c1uhW (get-library-paths))))

