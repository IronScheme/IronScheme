;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (psyntax config) () (void))

(library-letrec* (ironscheme lists)
  ((g$list-tail$11659$12l&&U
     g$list-tail$11815$12l&&U
     (case-lambda
       ((g$lst$11687$12l&&U g$index$11688$12l&&U)
        (if ((case-lambda
               ((g$t$11689$12l&&U)
                (if g$t$11689$12l&&U
                  g$t$11689$12l&&U
                  (begin
                    '#f
                    (g$negative?$12625$12l&&U g$index$11688$12l&&U)))))
             (null? g$lst$11687$12l&&U))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$11687$12l&&U
            g$index$11688$12l&&U)
          (if (g$zero?$12626$12l&&U g$index$11688$12l&&U)
            g$lst$11687$12l&&U
            (g$list-tail$11659$12l&&U
              (cdr g$lst$11687$12l&&U)
              (- g$index$11688$12l&&U '1)))))))
   (g$list-ref$11660$12l&&U
     g$list-ref$11816$12l&&U
     (case-lambda
       ((g$lst$11690$12l&&U g$index$11691$12l&&U)
        (car (g$list-tail$11659$12l&&U
               g$lst$11690$12l&&U
               g$index$11691$12l&&U)))))
   (g$last-pair$11661$12l&&U
     g$last-pair$11817$12l&&U
     (case-lambda
       ((g$lst$11692$12l&&U)
        (if (null? g$lst$11692$12l&&U)
          g$lst$11692$12l&&U
          (if (null? (cdr g$lst$11692$12l&&U))
            g$lst$11692$12l&&U
            (g$last-pair$11661$12l&&U (cdr g$lst$11692$12l&&U)))))))
   (g$make-list$11662$12l&&U
     g$make-list$11818$12l&&U
     (case-lambda
       ((g$n$11693$12l&&U)
        (vector->list (make-vector g$n$11693$12l&&U)))
       ((g$n$11694$12l&&U g$fill$11695$12l&&U)
        (vector->list
          (make-vector g$n$11694$12l&&U g$fill$11695$12l&&U)))))
   (g$find$11663$12l&&U
     g$find$11819$12l&&U
     (case-lambda
       ((g$proc$11696$12l&&U g$l$11697$12l&&U)
        (if (null? g$l$11697$12l&&U)
          '#f
          ((case-lambda
             ((g$e$11698$12l&&U g$r$11699$12l&&U g$proc$11700$12l&&U)
              (if (g$proc$11700$12l&&U g$e$11698$12l&&U)
                g$e$11698$12l&&U
                (g$find$11663$12l&&U
                  g$proc$11700$12l&&U
                  g$r$11699$12l&&U))))
           (car g$l$11697$12l&&U)
           (cdr g$l$11697$12l&&U)
           g$proc$11696$12l&&U)))))
   (g$partition$11664$12l&&U
     g$partition$11820$12l&&U
     (case-lambda
       ((g$proc$11701$12l&&U g$l$11702$12l&&U)
        ((letrec ((g$f$11703$12l&&U
                    (case-lambda
                      ((g$l$11704$12l&&U
                         g$a$11705$12l&&U
                         g$b$11706$12l&&U)
                       (if (null? g$l$11704$12l&&U)
                         (values
                           (reverse! g$a$11705$12l&&U)
                           (reverse! g$b$11706$12l&&U))
                         ((case-lambda
                            ((g$e$11707$12l&&U)
                             (if (g$proc$11701$12l&&U g$e$11707$12l&&U)
                               (g$f$11703$12l&&U
                                 (cdr g$l$11704$12l&&U)
                                 (cons
                                   g$e$11707$12l&&U
                                   g$a$11705$12l&&U)
                                 g$b$11706$12l&&U)
                               (g$f$11703$12l&&U
                                 (cdr g$l$11704$12l&&U)
                                 g$a$11705$12l&&U
                                 (cons
                                   g$e$11707$12l&&U
                                   g$b$11706$12l&&U)))))
                          (car g$l$11704$12l&&U)))))))
           g$f$11703$12l&&U)
         g$l$11702$12l&&U
         '()
         '()))))
   (g$remp$11665$12l&&U
     g$remp$11821$12l&&U
     (case-lambda
       ((g$proc$11708$12l&&U g$l$11709$12l&&U)
        ((letrec ((g$f$11710$12l&&U
                    (case-lambda
                      ((g$l$11711$12l&&U g$a$11712$12l&&U)
                       (if (null? g$l$11711$12l&&U)
                         (reverse! g$a$11712$12l&&U)
                         ((case-lambda
                            ((g$e$11713$12l&&U)
                             (if (g$proc$11708$12l&&U g$e$11713$12l&&U)
                               (g$f$11710$12l&&U
                                 (cdr g$l$11711$12l&&U)
                                 g$a$11712$12l&&U)
                               (g$f$11710$12l&&U
                                 (cdr g$l$11711$12l&&U)
                                 (cons
                                   g$e$11713$12l&&U
                                   g$a$11712$12l&&U)))))
                          (car g$l$11711$12l&&U)))))))
           g$f$11710$12l&&U)
         g$l$11709$12l&&U
         '()))))
   (g$filter$11666$12l&&U
     g$filter$11822$12l&&U
     (case-lambda
       ((g$proc$11714$12l&&U g$l$11715$12l&&U)
        ((letrec ((g$f$11716$12l&&U
                    (case-lambda
                      ((g$l$11717$12l&&U g$a$11718$12l&&U)
                       (if (null? g$l$11717$12l&&U)
                         (reverse! g$a$11718$12l&&U)
                         ((case-lambda
                            ((g$e$11719$12l&&U)
                             (if (g$proc$11714$12l&&U g$e$11719$12l&&U)
                               (g$f$11716$12l&&U
                                 (cdr g$l$11717$12l&&U)
                                 (cons
                                   g$e$11719$12l&&U
                                   g$a$11718$12l&&U))
                               (g$f$11716$12l&&U
                                 (cdr g$l$11717$12l&&U)
                                 g$a$11718$12l&&U))))
                          (car g$l$11717$12l&&U)))))))
           g$f$11716$12l&&U)
         g$l$11715$12l&&U
         '()))))
   (g$assq$11667$12l&&U
     g$assq$11823$12l&&U
     (case-lambda
       ((g$obj$11720$12l&&U g$lst$11721$12l&&U)
        (if (null? g$lst$11721$12l&&U)
          '#f
          ((case-lambda
             ((g$obj$11722$12l&&U g$t$11723$12l&&U g$r$11724$12l&&U)
              (if (eq? g$obj$11722$12l&&U (car g$t$11723$12l&&U))
                g$t$11723$12l&&U
                (g$assq$11667$12l&&U
                  g$obj$11722$12l&&U
                  g$r$11724$12l&&U))))
           g$obj$11720$12l&&U
           (car g$lst$11721$12l&&U)
           (cdr g$lst$11721$12l&&U))))))
   (g$assv$11668$12l&&U
     g$assv$11824$12l&&U
     (case-lambda
       ((g$obj$11725$12l&&U g$lst$11726$12l&&U)
        (if (null? g$lst$11726$12l&&U)
          '#f
          ((case-lambda
             ((g$obj$11727$12l&&U g$t$11728$12l&&U g$r$11729$12l&&U)
              (if (eqv? g$obj$11727$12l&&U (car g$t$11728$12l&&U))
                g$t$11728$12l&&U
                (g$assv$11668$12l&&U
                  g$obj$11727$12l&&U
                  g$r$11729$12l&&U))))
           g$obj$11725$12l&&U
           (car g$lst$11726$12l&&U)
           (cdr g$lst$11726$12l&&U))))))
   (g$assoc$11669$12l&&U
     g$assoc$11825$12l&&U
     (case-lambda
       ((g$obj$11730$12l&&U g$lst$11731$12l&&U)
        (if (null? g$lst$11731$12l&&U)
          '#f
          ((case-lambda
             ((g$obj$11732$12l&&U g$t$11733$12l&&U g$r$11734$12l&&U)
              (if (equal? g$obj$11732$12l&&U (car g$t$11733$12l&&U))
                g$t$11733$12l&&U
                (g$assoc$11669$12l&&U
                  g$obj$11732$12l&&U
                  g$r$11734$12l&&U))))
           g$obj$11730$12l&&U
           (car g$lst$11731$12l&&U)
           (cdr g$lst$11731$12l&&U))))))
   (g$assp$11670$12l&&U
     g$assp$11826$12l&&U
     (case-lambda
       ((g$p?$11735$12l&&U g$lst$11736$12l&&U)
        (if (null? g$lst$11736$12l&&U)
          '#f
          ((case-lambda
             ((g$p?$11737$12l&&U g$t$11738$12l&&U g$r$11739$12l&&U)
              (if (g$p?$11737$12l&&U (car g$t$11738$12l&&U))
                g$t$11738$12l&&U
                (g$assp$11670$12l&&U
                  g$p?$11737$12l&&U
                  g$r$11739$12l&&U))))
           g$p?$11735$12l&&U
           (car g$lst$11736$12l&&U)
           (cdr g$lst$11736$12l&&U))))))
   (g$memq$11671$12l&&U
     g$memq$11827$12l&&U
     (case-lambda
       ((g$obj$11740$12l&&U g$lst$11741$12l&&U)
        (if (null? g$lst$11741$12l&&U)
          '#f
          (if (eq? g$obj$11740$12l&&U (car g$lst$11741$12l&&U))
            g$lst$11741$12l&&U
            (g$memq$11671$12l&&U
              g$obj$11740$12l&&U
              (cdr g$lst$11741$12l&&U)))))))
   (g$memv$11672$12l&&U
     g$memv$11828$12l&&U
     (case-lambda
       ((g$obj$11742$12l&&U g$lst$11743$12l&&U)
        (if (null? g$lst$11743$12l&&U)
          '#f
          (if (eqv? g$obj$11742$12l&&U (car g$lst$11743$12l&&U))
            g$lst$11743$12l&&U
            (g$memv$11672$12l&&U
              g$obj$11742$12l&&U
              (cdr g$lst$11743$12l&&U)))))))
   (g$member$11673$12l&&U
     g$member$11829$12l&&U
     (case-lambda
       ((g$obj$11744$12l&&U g$lst$11745$12l&&U)
        (if (null? g$lst$11745$12l&&U)
          '#f
          (if (equal? g$obj$11744$12l&&U (car g$lst$11745$12l&&U))
            g$lst$11745$12l&&U
            (g$member$11673$12l&&U
              g$obj$11744$12l&&U
              (cdr g$lst$11745$12l&&U)))))))
   (g$memp$11674$12l&&U
     g$memp$11830$12l&&U
     (case-lambda
       ((g$p?$11746$12l&&U g$lst$11747$12l&&U)
        (if (null? g$lst$11747$12l&&U)
          '#f
          (if (g$p?$11746$12l&&U (car g$lst$11747$12l&&U))
            g$lst$11747$12l&&U
            (g$memp$11674$12l&&U
              g$p?$11746$12l&&U
              (cdr g$lst$11747$12l&&U)))))))
   (g$all-empty?$11675$12l&&U
     g$all-empty?$11831$12l&&U
     (case-lambda
       ((g$ls$11748$12l&&U)
        ((case-lambda
           ((g$t$11749$12l&&U)
            (if g$t$11749$12l&&U
              g$t$11749$12l&&U
              (begin
                '#f
                (if (null? (car g$ls$11748$12l&&U))
                  (begin
                    '#f
                    (g$all-empty?$11675$12l&&U (cdr g$ls$11748$12l&&U)))
                  '#f)))))
         (null? g$ls$11748$12l&&U)))))
   (g$split$11676$12l&&U
     g$split$11832$12l&&U
     (case-lambda
       ((g$ls$11750$12l&&U)
        (if (null? g$ls$11750$12l&&U)
          (values '() '())
          (call-with-values
            (case-lambda
              (() (g$split$11676$12l&&U (cdr g$ls$11750$12l&&U))))
            (case-lambda
              ((g$cars$11751$12l&&U g$cdrs$11752$12l&&U)
               ((case-lambda
                  ((g$a$11753$12l&&U)
                   (values
                     (cons (car g$a$11753$12l&&U) g$cars$11751$12l&&U)
                     (cons
                       (cdr g$a$11753$12l&&U)
                       g$cdrs$11752$12l&&U))))
                (car g$ls$11750$12l&&U)))))))))
   (g$for-all$11677$12l&&U
     g$for-all$11833$12l&&U
     (case-lambda
       ((g$f$11754$12l&&U g$arg1$11755$12l&&U)
        (if (null? g$arg1$11755$12l&&U)
          '#t
          (if (null? (cdr g$arg1$11755$12l&&U))
            (g$f$11754$12l&&U (car g$arg1$11755$12l&&U))
            (if (g$f$11754$12l&&U (car g$arg1$11755$12l&&U))
              (begin
                '#f
                (g$for-all$11677$12l&&U
                  g$f$11754$12l&&U
                  (cdr g$arg1$11755$12l&&U)))
              '#f))))
       ((g$f$11756$12l&&U g$arg1$11757$12l&&U . g$args$11758$12l&&U)
        ((case-lambda
           ((g$args$11759$12l&&U)
            (if (g$all-empty?$11675$12l&&U g$args$11759$12l&&U)
              '#t
              (call-with-values
                (case-lambda
                  (() (g$split$11676$12l&&U g$args$11759$12l&&U)))
                (case-lambda
                  ((g$cars$11760$12l&&U g$cdrs$11761$12l&&U)
                   (if (g$all-empty?$11675$12l&&U g$cdrs$11761$12l&&U)
                     (apply g$f$11756$12l&&U g$cars$11760$12l&&U)
                     (if (apply g$f$11756$12l&&U g$cars$11760$12l&&U)
                       (begin
                         '#f
                         (apply
                           g$for-all$11677$12l&&U
                           g$f$11756$12l&&U
                           g$cdrs$11761$12l&&U))
                       '#f))))))))
         (cons g$arg1$11757$12l&&U g$args$11758$12l&&U)))))
   (g$exists$11678$12l&&U
     g$exists$11834$12l&&U
     (case-lambda
       ((g$f$11762$12l&&U g$arg1$11763$12l&&U)
        (if (null? g$arg1$11763$12l&&U)
          '#f
          ((case-lambda
             ((g$t$11764$12l&&U)
              (if g$t$11764$12l&&U
                g$t$11764$12l&&U
                (begin
                  '#f
                  (g$exists$11678$12l&&U
                    g$f$11762$12l&&U
                    (cdr g$arg1$11763$12l&&U))))))
           (g$f$11762$12l&&U (car g$arg1$11763$12l&&U)))))
       ((g$f$11765$12l&&U g$arg1$11766$12l&&U . g$args$11767$12l&&U)
        ((case-lambda
           ((g$args$11768$12l&&U)
            (if (g$all-empty?$11675$12l&&U g$args$11768$12l&&U)
              '#f
              (call-with-values
                (case-lambda
                  (() (g$split$11676$12l&&U g$args$11768$12l&&U)))
                (case-lambda
                  ((g$cars$11769$12l&&U g$cdrs$11770$12l&&U)
                   ((case-lambda
                      ((g$t$11771$12l&&U)
                       (if g$t$11771$12l&&U
                         g$t$11771$12l&&U
                         (begin
                           '#f
                           (apply
                             g$exists$11678$12l&&U
                             g$f$11765$12l&&U
                             g$cdrs$11770$12l&&U)))))
                    (apply g$f$11765$12l&&U g$cars$11769$12l&&U))))))))
         (cons g$arg1$11766$12l&&U g$args$11767$12l&&U)))))
   (g$map$11679$12l&&U
     g$map$11835$12l&&U
     (case-lambda
       ((g$proc$11772$12l&&U g$list1$11773$12l&&U)
        ((letrec ((g$f$11774$12l&&U
                    (case-lambda
                      ((g$lst$11775$12l&&U g$a$11776$12l&&U)
                       (if (null? g$lst$11775$12l&&U)
                         (reverse! g$a$11776$12l&&U)
                         (g$f$11774$12l&&U
                           (cdr g$lst$11775$12l&&U)
                           (cons
                             (g$proc$11772$12l&&U
                               (car g$lst$11775$12l&&U))
                             g$a$11776$12l&&U)))))))
           g$f$11774$12l&&U)
         g$list1$11773$12l&&U
         '()))
       ((g$proc$11777$12l&&U
          g$list1$11778$12l&&U
          .
          g$lists$11779$12l&&U)
        ((letrec ((g$f$11780$12l&&U
                    (case-lambda
                      ((g$lists$11781$12l&&U g$a$11782$12l&&U)
                       (if (g$all-empty?$11675$12l&&U
                             g$lists$11781$12l&&U)
                         (reverse! g$a$11782$12l&&U)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$split$11676$12l&&U
                                g$lists$11781$12l&&U)))
                           (case-lambda
                             ((g$cars$11783$12l&&U g$cdrs$11784$12l&&U)
                              (g$f$11780$12l&&U
                                g$cdrs$11784$12l&&U
                                (cons
                                  (apply
                                    g$proc$11777$12l&&U
                                    g$cars$11783$12l&&U)
                                  g$a$11782$12l&&U))))))))))
           g$f$11780$12l&&U)
         (cons g$list1$11778$12l&&U g$lists$11779$12l&&U)
         '()))))
   (g$for-each$11680$12l&&U
     g$for-each$11836$12l&&U
     (case-lambda
       ((g$f$11785$12l&&U g$arg1$11786$12l&&U)
        (if (not (null? g$arg1$11786$12l&&U))
          (begin
            (g$f$11785$12l&&U (car g$arg1$11786$12l&&U))
            (g$for-each$11680$12l&&U
              g$f$11785$12l&&U
              (cdr g$arg1$11786$12l&&U)))
          (void)))
       ((g$f$11787$12l&&U g$arg1$11788$12l&&U . g$args$11789$12l&&U)
        ((case-lambda
           ((g$args$11790$12l&&U)
            (if (not (g$all-empty?$11675$12l&&U g$args$11790$12l&&U))
              (call-with-values
                (case-lambda
                  (() (g$split$11676$12l&&U g$args$11790$12l&&U)))
                (case-lambda
                  ((g$cars$11791$12l&&U g$cdrs$11792$12l&&U)
                   (begin
                     (apply g$f$11787$12l&&U g$cars$11791$12l&&U)
                     (apply
                       g$for-each$11680$12l&&U
                       g$f$11787$12l&&U
                       g$cdrs$11792$12l&&U)))))
              (void))))
         (cons g$arg1$11788$12l&&U g$args$11789$12l&&U)))))
   (g$cons*$11681$12l&&U
     g$cons*$11837$12l&&U
     (case-lambda
       ((g$a$11793$12l&&U . g$rest$11794$12l&&U)
        ((letrec ((g$f$11795$12l&&U
                    (case-lambda
                      ((g$a$11796$12l&&U g$rest$11797$12l&&U)
                       (if (null? g$rest$11797$12l&&U)
                         g$a$11796$12l&&U
                         (cons
                           g$a$11796$12l&&U
                           (g$f$11795$12l&&U
                             (car g$rest$11797$12l&&U)
                             (cdr g$rest$11797$12l&&U))))))))
           g$f$11795$12l&&U)
         g$a$11793$12l&&U
         g$rest$11794$12l&&U))))
   (g$fold-left$11682$12l&&U
     g$fold-left$11838$12l&&U
     (case-lambda
       ((g$combine$11798$12l&&U
          g$nil$11799$12l&&U
          g$list1$11800$12l&&U
          .
          g$lists$11801$12l&&U)
        (if (null? g$list1$11800$12l&&U)
          g$nil$11799$12l&&U
          (if (null? g$lists$11801$12l&&U)
            (g$fold-left$11682$12l&&U
              g$combine$11798$12l&&U
              (g$combine$11798$12l&&U
                g$nil$11799$12l&&U
                (car g$list1$11800$12l&&U))
              (cdr g$list1$11800$12l&&U))
            (apply
              g$fold-left$11682$12l&&U
              (g$cons*$11681$12l&&U
                g$combine$11798$12l&&U
                (apply
                  g$combine$11798$12l&&U
                  (g$cons*$11681$12l&&U
                    g$nil$11799$12l&&U
                    (car g$list1$11800$12l&&U)
                    (g$map$11679$12l&&U car g$lists$11801$12l&&U)))
                (cdr g$list1$11800$12l&&U)
                (g$map$11679$12l&&U cdr g$lists$11801$12l&&U))))))))
   (g$fold-right$11683$12l&&U
     g$fold-right$11839$12l&&U
     (case-lambda
       ((g$combine$11802$12l&&U
          g$nil$11803$12l&&U
          g$list1$11804$12l&&U
          .
          g$lists$11805$12l&&U)
        (if (null? g$list1$11804$12l&&U)
          g$nil$11803$12l&&U
          (if (null? g$lists$11805$12l&&U)
            (g$combine$11802$12l&&U
              (car g$list1$11804$12l&&U)
              (g$fold-right$11683$12l&&U
                g$combine$11802$12l&&U
                g$nil$11803$12l&&U
                (cdr g$list1$11804$12l&&U)))
            (apply
              g$combine$11802$12l&&U
              (append
                (list (car g$list1$11804$12l&&U))
                (g$map$11679$12l&&U car g$lists$11805$12l&&U)
                (list
                  (apply
                    g$fold-right$11683$12l&&U
                    (g$cons*$11681$12l&&U
                      g$combine$11802$12l&&U
                      g$nil$11803$12l&&U
                      (cdr g$list1$11804$12l&&U)
                      (g$map$11679$12l&&U
                        cdr
                        g$lists$11805$12l&&U)))))))))))
   (g$remove$11684$12l&&U
     g$remove$11840$12l&&U
     (case-lambda
       ((g$obj$11806$12l&&U g$list$11807$12l&&U)
        (g$remp$11665$12l&&U
          (case-lambda
            ((g$x$11808$12l&&U)
             (equal? g$obj$11806$12l&&U g$x$11808$12l&&U)))
          g$list$11807$12l&&U))))
   (g$remv$11685$12l&&U
     g$remv$11841$12l&&U
     (case-lambda
       ((g$obj$11809$12l&&U g$list$11810$12l&&U)
        (g$remp$11665$12l&&U
          (case-lambda
            ((g$x$11811$12l&&U)
             (eqv? g$obj$11809$12l&&U g$x$11811$12l&&U)))
          g$list$11810$12l&&U))))
   (g$remq$11686$12l&&U
     g$remq$11842$12l&&U
     (case-lambda
       ((g$obj$11812$12l&&U g$list$11813$12l&&U)
        (g$remp$11665$12l&&U
          (case-lambda
            ((g$x$11814$12l&&U)
             (eq? g$obj$11812$12l&&U g$x$11814$12l&&U)))
          g$list$11813$12l&&U)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$char?$12238$12l&&U
     g$char?$12576$12l&&U
     (case-lambda
       ((g$obj$12393$12l&&U)
        (clr-is-internal 'system.char g$obj$12393$12l&&U))))
   (g$vector?$12239$12l&&U
     g$vector?$12577$12l&&U
     (case-lambda
       ((g$obj$12394$12l&&U)
        (clr-is-internal 'system.object[] g$obj$12394$12l&&U))))
   (g$bytevector?$12240$12l&&U
     g$bytevector?$12578$12l&&U
     (case-lambda
       ((g$obj$12395$12l&&U)
        (clr-is-internal 'system.byte[] g$obj$12395$12l&&U))))
   (g$symbol?$12241$12l&&U
     g$symbol?$12579$12l&&U
     (case-lambda
       ((g$obj$12396$12l&&U)
        (clr-is-internal
          'microsoft.scripting.symbolid
          g$obj$12396$12l&&U))))
   (g$boolean?$12242$12l&&U
     g$boolean?$12580$12l&&U
     (case-lambda
       ((g$obj$12397$12l&&U)
        (clr-is-internal 'system.boolean g$obj$12397$12l&&U))))
   (g$procedure?$12243$12l&&U
     g$procedure?$12581$12l&&U
     (case-lambda
       ((g$obj$12398$12l&&U)
        (clr-is-internal
          'ironscheme.runtime.icallable
          g$obj$12398$12l&&U))))
   (g$fixnum?$12244$12l&&U
     g$fixnum?$12582$12l&&U
     (case-lambda
       ((g$obj$12399$12l&&U)
        (clr-is-internal 'system.int32 g$obj$12399$12l&&U))))
   (g$flonum?$12245$12l&&U
     g$flonum?$12583$12l&&U
     (case-lambda
       ((g$obj$12400$12l&&U)
        (clr-is-internal 'system.double g$obj$12400$12l&&U))))
   (g$fixnum-width$12246$12l&&U
     g$fixnum-width$12584$12l&&U
     (case-lambda (() '32)))
   (g$mod$12247$12l&&U
     g$mod$12585$12l&&U
     (case-lambda
       ((g$x1$12401$12l&&U g$x2$12402$12l&&U)
        (- g$x1$12401$12l&&U
           (* (div g$x1$12401$12l&&U g$x2$12402$12l&&U)
              g$x2$12402$12l&&U)))))
   (g$mod0$12248$12l&&U
     g$mod0$12586$12l&&U
     (case-lambda
       ((g$x1$12403$12l&&U g$x2$12404$12l&&U)
        (- g$x1$12403$12l&&U
           (* (div0 g$x1$12403$12l&&U g$x2$12404$12l&&U)
              g$x2$12404$12l&&U)))))
   (g$div-and-mod$12249$12l&&U
     g$div-and-mod$12587$12l&&U
     (case-lambda
       ((g$x1$12405$12l&&U g$x2$12406$12l&&U)
        ((case-lambda
           ((g$d$12407$12l&&U)
            (values
              g$d$12407$12l&&U
              (- g$x1$12405$12l&&U
                 (* g$d$12407$12l&&U g$x2$12406$12l&&U)))))
         (div g$x1$12405$12l&&U g$x2$12406$12l&&U)))))
   (g$div0-and-mod0$12250$12l&&U
     g$div0-and-mod0$12588$12l&&U
     (case-lambda
       ((g$x1$12408$12l&&U g$x2$12409$12l&&U)
        ((case-lambda
           ((g$d$12410$12l&&U)
            (values
              g$d$12410$12l&&U
              (- g$x1$12408$12l&&U
                 (* g$d$12410$12l&&U g$x2$12409$12l&&U)))))
         (div0 g$x1$12408$12l&&U g$x2$12409$12l&&U)))))
   (g$list->vector$12251$12l&&U
     g$list->vector$12589$12l&&U
     (case-lambda
       ((g$lst$12411$12l&&U) (apply vector g$lst$12411$12l&&U))))
   (g$list->string$12252$12l&&U
     g$list->string$12590$12l&&U
     (case-lambda
       ((g$lst$12412$12l&&U) (apply string g$lst$12412$12l&&U))))
   (g$vector-ref$12253$12l&&U
     g$vector-ref$12591$12l&&U
     (case-lambda
       ((g$x$12413$12l&&U g$n$12414$12l&&U)
        (begin
          (if (not (g$vector?$12239$12l&&U g$x$12413$12l&&U))
            (assertion-violation
              'vector-ref
              '"not a vector"
              g$x$12413$12l&&U)
            (void))
          (if (not (integer? g$n$12414$12l&&U))
            (assertion-violation
              'vector-ref
              '"not an integer"
              g$n$12414$12l&&U)
            (void))
          (if (g$negative?$12287$12l&&U g$n$12414$12l&&U)
            (assertion-violation
              'vector-ref
              '"negative index"
              g$n$12414$12l&&U)
            (void))
          ($vector-ref g$x$12413$12l&&U g$n$12414$12l&&U)))))
   (g$vector-set!$12254$12l&&U
     g$vector-set!$12592$12l&&U
     (case-lambda
       ((g$x$12415$12l&&U g$n$12416$12l&&U g$value$12417$12l&&U)
        (begin
          (if (not (g$vector?$12239$12l&&U g$x$12415$12l&&U))
            (assertion-violation
              'vector-set!
              '"not a vector"
              g$x$12415$12l&&U)
            (void))
          (if (not (integer? g$n$12416$12l&&U))
            (assertion-violation
              'vector-set!
              '"not an integer"
              g$n$12416$12l&&U)
            (void))
          (if (g$negative?$12287$12l&&U g$n$12416$12l&&U)
            (assertion-violation
              'vector-set!
              '"negative index"
              g$n$12416$12l&&U)
            (void))
          ($vector-set!
            g$x$12415$12l&&U
            g$n$12416$12l&&U
            g$value$12417$12l&&U)
          (void)))))
   (g$vector-fill!$12255$12l&&U
     g$vector-fill!$12593$12l&&U
     (case-lambda
       ((g$vec$12418$12l&&U g$val$12419$12l&&U)
        ((case-lambda
           ((g$len$12420$12l&&U)
            (letrec ((g$loop$12421$12l&&U
                       (case-lambda
                         ((g$i$12422$12l&&U)
                          (if (g$fx=?$15999$12l&&U
                                g$i$12422$12l&&U
                                g$len$12420$12l&&U)
                            (if '#f '#f (void))
                            (begin
                              (g$vector-set!$12254$12l&&U
                                g$vec$12418$12l&&U
                                g$i$12422$12l&&U
                                g$val$12419$12l&&U)
                              (g$loop$12421$12l&&U
                                (g$fx+$15986$12l&&U
                                  g$i$12422$12l&&U
                                  '1))))))))
              (g$loop$12421$12l&&U '0))))
         (vector-length g$vec$12418$12l&&U)))))
   (g$xcons$12256$12l&&U
     g$xcons$12594$12l&&U
     (case-lambda
       ((g$x$12423$12l&&U g$y$12424$12l&&U)
        (cons g$y$12424$12l&&U g$x$12423$12l&&U))))
   (g$reverse$12257$12l&&U
     g$reverse$12595$12l&&U
     (case-lambda
       ((g$lst$12425$12l&&U)
        (g$fold-left$11838$12l&&U
          g$xcons$12256$12l&&U
          '()
          g$lst$12425$12l&&U))))
   (g$caar$12258$12l&&U
     g$caar$12596$12l&&U
     (case-lambda ((g$x$12426$12l&&U) (car (car g$x$12426$12l&&U)))))
   (g$cadr$12259$12l&&U
     g$cadr$12597$12l&&U
     (case-lambda ((g$x$12427$12l&&U) (car (cdr g$x$12427$12l&&U)))))
   (g$cdar$12260$12l&&U
     g$cdar$12598$12l&&U
     (case-lambda ((g$x$12428$12l&&U) (cdr (car g$x$12428$12l&&U)))))
   (g$cddr$12261$12l&&U
     g$cddr$12599$12l&&U
     (case-lambda ((g$x$12429$12l&&U) (cdr (cdr g$x$12429$12l&&U)))))
   (g$caaar$12262$12l&&U
     g$caaar$12600$12l&&U
     (case-lambda
       ((g$x$12430$12l&&U)
        (g$caar$12258$12l&&U (car g$x$12430$12l&&U)))))
   (g$caadr$12263$12l&&U
     g$caadr$12601$12l&&U
     (case-lambda
       ((g$x$12431$12l&&U)
        (g$caar$12258$12l&&U (cdr g$x$12431$12l&&U)))))
   (g$cadar$12264$12l&&U
     g$cadar$12602$12l&&U
     (case-lambda
       ((g$x$12432$12l&&U)
        (g$cadr$12259$12l&&U (car g$x$12432$12l&&U)))))
   (g$caddr$12265$12l&&U
     g$caddr$12603$12l&&U
     (case-lambda
       ((g$x$12433$12l&&U)
        (g$cadr$12259$12l&&U (cdr g$x$12433$12l&&U)))))
   (g$cdaar$12266$12l&&U
     g$cdaar$12604$12l&&U
     (case-lambda
       ((g$x$12434$12l&&U)
        (g$cdar$12260$12l&&U (car g$x$12434$12l&&U)))))
   (g$cdadr$12267$12l&&U
     g$cdadr$12605$12l&&U
     (case-lambda
       ((g$x$12435$12l&&U)
        (g$cdar$12260$12l&&U (cdr g$x$12435$12l&&U)))))
   (g$cddar$12268$12l&&U
     g$cddar$12606$12l&&U
     (case-lambda
       ((g$x$12436$12l&&U)
        (g$cddr$12261$12l&&U (car g$x$12436$12l&&U)))))
   (g$cdddr$12269$12l&&U
     g$cdddr$12607$12l&&U
     (case-lambda
       ((g$x$12437$12l&&U)
        (g$cddr$12261$12l&&U (cdr g$x$12437$12l&&U)))))
   (g$caaaar$12270$12l&&U
     g$caaaar$12608$12l&&U
     (case-lambda
       ((g$x$12438$12l&&U)
        (g$caaar$12262$12l&&U (car g$x$12438$12l&&U)))))
   (g$caaadr$12271$12l&&U
     g$caaadr$12609$12l&&U
     (case-lambda
       ((g$x$12439$12l&&U)
        (g$caaar$12262$12l&&U (cdr g$x$12439$12l&&U)))))
   (g$caadar$12272$12l&&U
     g$caadar$12610$12l&&U
     (case-lambda
       ((g$x$12440$12l&&U)
        (g$caadr$12263$12l&&U (car g$x$12440$12l&&U)))))
   (g$caaddr$12273$12l&&U
     g$caaddr$12611$12l&&U
     (case-lambda
       ((g$x$12441$12l&&U)
        (g$caadr$12263$12l&&U (cdr g$x$12441$12l&&U)))))
   (g$cadaar$12274$12l&&U
     g$cadaar$12612$12l&&U
     (case-lambda
       ((g$x$12442$12l&&U)
        (g$cadar$12264$12l&&U (car g$x$12442$12l&&U)))))
   (g$cadadr$12275$12l&&U
     g$cadadr$12613$12l&&U
     (case-lambda
       ((g$x$12443$12l&&U)
        (g$cadar$12264$12l&&U (cdr g$x$12443$12l&&U)))))
   (g$caddar$12276$12l&&U
     g$caddar$12614$12l&&U
     (case-lambda
       ((g$x$12444$12l&&U)
        (g$caddr$12265$12l&&U (car g$x$12444$12l&&U)))))
   (g$cadddr$12277$12l&&U
     g$cadddr$12615$12l&&U
     (case-lambda
       ((g$x$12445$12l&&U)
        (g$caddr$12265$12l&&U (cdr g$x$12445$12l&&U)))))
   (g$cdaaar$12278$12l&&U
     g$cdaaar$12616$12l&&U
     (case-lambda
       ((g$x$12446$12l&&U)
        (g$cdaar$12266$12l&&U (car g$x$12446$12l&&U)))))
   (g$cdaadr$12279$12l&&U
     g$cdaadr$12617$12l&&U
     (case-lambda
       ((g$x$12447$12l&&U)
        (g$cdaar$12266$12l&&U (cdr g$x$12447$12l&&U)))))
   (g$cdadar$12280$12l&&U
     g$cdadar$12618$12l&&U
     (case-lambda
       ((g$x$12448$12l&&U)
        (g$cdadr$12267$12l&&U (car g$x$12448$12l&&U)))))
   (g$cdaddr$12281$12l&&U
     g$cdaddr$12619$12l&&U
     (case-lambda
       ((g$x$12449$12l&&U)
        (g$cdadr$12267$12l&&U (cdr g$x$12449$12l&&U)))))
   (g$cddaar$12282$12l&&U
     g$cddaar$12620$12l&&U
     (case-lambda
       ((g$x$12450$12l&&U)
        (g$cddar$12268$12l&&U (car g$x$12450$12l&&U)))))
   (g$cddadr$12283$12l&&U
     g$cddadr$12621$12l&&U
     (case-lambda
       ((g$x$12451$12l&&U)
        (g$cddar$12268$12l&&U (cdr g$x$12451$12l&&U)))))
   (g$cdddar$12284$12l&&U
     g$cdddar$12622$12l&&U
     (case-lambda
       ((g$x$12452$12l&&U)
        (g$cdddr$12269$12l&&U (car g$x$12452$12l&&U)))))
   (g$cddddr$12285$12l&&U
     g$cddddr$12623$12l&&U
     (case-lambda
       ((g$x$12453$12l&&U)
        (g$cdddr$12269$12l&&U (cdr g$x$12453$12l&&U)))))
   (g$positive?$12286$12l&&U
     g$positive?$12624$12l&&U
     (case-lambda
       ((g$r$12454$12l&&U)
        (begin
          (if (not (real-valued? g$r$12454$12l&&U))
            (assertion-violation
              'positive?
              '"not a real"
              g$r$12454$12l&&U)
            (void))
          (< '0 g$r$12454$12l&&U)))))
   (g$negative?$12287$12l&&U
     g$negative?$12625$12l&&U
     (case-lambda
       ((g$r$12455$12l&&U)
        (begin
          (if (not (real-valued? g$r$12455$12l&&U))
            (assertion-violation
              'negative?
              '"not a real"
              g$r$12455$12l&&U)
            (void))
          (> '0 g$r$12455$12l&&U)))))
   (g$zero?$12288$12l&&U
     g$zero?$12626$12l&&U
     (case-lambda
       ((g$z$12456$12l&&U)
        (begin
          (if (not (number? g$z$12456$12l&&U))
            (assertion-violation
              'zero?
              '"not a number"
              g$z$12456$12l&&U)
            (void))
          (= '0 g$z$12456$12l&&U)))))
   (g$even?$12289$12l&&U
     g$even?$12627$12l&&U
     (case-lambda
       ((g$n$12457$12l&&U)
        (begin
          (if (not (integer-valued? g$n$12457$12l&&U))
            (assertion-violation
              'even?
              '"not a integer"
              g$n$12457$12l&&U)
            (void))
          (= '0 (g$mod$12247$12l&&U g$n$12457$12l&&U '2))))))
   (g$odd?$12290$12l&&U
     g$odd?$12628$12l&&U
     (case-lambda
       ((g$n$12458$12l&&U)
        (begin
          (if (not (integer-valued? g$n$12458$12l&&U))
            (assertion-violation
              'odd?
              '"not a integer"
              g$n$12458$12l&&U)
            (void))
          (= '1 (g$mod$12247$12l&&U g$n$12458$12l&&U '2))))))
   (g$max$12291$12l&&U
     g$max$12629$12l&&U
     (case-lambda
       ((g$a$12459$12l&&U . g$rest$12460$12l&&U)
        (begin
          (if (not (real-valued? g$a$12459$12l&&U))
            (assertion-violation 'max '"not a real" g$a$12459$12l&&U)
            (void))
          (g$fold-left$11838$12l&&U
            (case-lambda
              ((g$a$12461$12l&&U g$b$12462$12l&&U)
               ((case-lambda
                  ((g$r$12463$12l&&U)
                   (if ((case-lambda
                          ((g$t$12464$12l&&U)
                           (if g$t$12464$12l&&U
                             g$t$12464$12l&&U
                             (begin '#f (inexact? g$b$12462$12l&&U)))))
                        (inexact? g$a$12461$12l&&U))
                     (inexact g$r$12463$12l&&U)
                     g$r$12463$12l&&U)))
                (if (< g$a$12461$12l&&U g$b$12462$12l&&U)
                  g$b$12462$12l&&U
                  g$a$12461$12l&&U))))
            g$a$12459$12l&&U
            g$rest$12460$12l&&U)))))
   (g$min$12292$12l&&U
     g$min$12630$12l&&U
     (case-lambda
       ((g$a$12465$12l&&U . g$rest$12466$12l&&U)
        (begin
          (if (not (real-valued? g$a$12465$12l&&U))
            (assertion-violation 'min '"not a real" g$a$12465$12l&&U)
            (void))
          (g$fold-left$11838$12l&&U
            (case-lambda
              ((g$a$12467$12l&&U g$b$12468$12l&&U)
               ((case-lambda
                  ((g$r$12469$12l&&U)
                   (if ((case-lambda
                          ((g$t$12470$12l&&U)
                           (if g$t$12470$12l&&U
                             g$t$12470$12l&&U
                             (begin '#f (inexact? g$b$12468$12l&&U)))))
                        (inexact? g$a$12467$12l&&U))
                     (inexact g$r$12469$12l&&U)
                     g$r$12469$12l&&U)))
                (if (> g$a$12467$12l&&U g$b$12468$12l&&U)
                  g$b$12468$12l&&U
                  g$a$12467$12l&&U))))
            g$a$12465$12l&&U
            g$rest$12466$12l&&U)))))
   (g$gcd$12293$12l&&U
     g$gcd$12631$12l&&U
     (case-lambda
       (g$nums$12471$12l&&U
        ((case-lambda
           ((g$t$12472$12l&&U)
            (if (eqv? g$t$12472$12l&&U '0)
              '0
              (if (eqv? g$t$12472$12l&&U '1)
                ((case-lambda
                   ((g$n$12473$12l&&U)
                    (begin
                      (if (not (integer-valued? g$n$12473$12l&&U))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$12473$12l&&U)
                        (void))
                      (abs g$n$12473$12l&&U))))
                 (car g$nums$12471$12l&&U))
                (if (eqv? g$t$12472$12l&&U '2)
                  ((case-lambda
                     ((g$a$12474$12l&&U g$b$12475$12l&&U)
                      (begin
                        (if (not (integer-valued? g$a$12474$12l&&U))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$12474$12l&&U)
                          (void))
                        (if (not (integer-valued? g$b$12475$12l&&U))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$12475$12l&&U)
                          (void))
                        (if (g$zero?$12288$12l&&U g$b$12475$12l&&U)
                          (abs g$a$12474$12l&&U)
                          (abs (g$gcd$12293$12l&&U
                                 g$b$12475$12l&&U
                                 (g$mod$12247$12l&&U
                                   g$a$12474$12l&&U
                                   g$b$12475$12l&&U)))))))
                   (car g$nums$12471$12l&&U)
                   (g$cadr$12259$12l&&U g$nums$12471$12l&&U))
                  (g$fold-left$11838$12l&&U
                    g$gcd$12293$12l&&U
                    (abs (car g$nums$12471$12l&&U))
                    (cdr g$nums$12471$12l&&U)))))))
         (length g$nums$12471$12l&&U)))))
   (g$lcm$12294$12l&&U
     g$lcm$12632$12l&&U
     (case-lambda
       (g$nums$12476$12l&&U
        ((case-lambda
           ((g$t$12477$12l&&U)
            (if (eqv? g$t$12477$12l&&U '0)
              '1
              (if (eqv? g$t$12477$12l&&U '1)
                ((case-lambda
                   ((g$n$12478$12l&&U)
                    (begin
                      (if (not (integer-valued? g$n$12478$12l&&U))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$12478$12l&&U)
                        (void))
                      (abs g$n$12478$12l&&U))))
                 (car g$nums$12476$12l&&U))
                (if (eqv? g$t$12477$12l&&U '2)
                  ((case-lambda
                     ((g$a$12479$12l&&U g$b$12480$12l&&U)
                      (begin
                        (if (not (integer-valued? g$a$12479$12l&&U))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$12479$12l&&U)
                          (void))
                        (if (not (integer-valued? g$b$12480$12l&&U))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$12480$12l&&U)
                          (void))
                        (if ((case-lambda
                               ((g$t$12481$12l&&U)
                                (if g$t$12481$12l&&U
                                  g$t$12481$12l&&U
                                  (begin
                                    '#f
                                    (g$zero?$12288$12l&&U
                                      g$b$12480$12l&&U)))))
                             (g$zero?$12288$12l&&U g$a$12479$12l&&U))
                          '0
                          (abs (* (/ g$a$12479$12l&&U
                                     (g$gcd$12293$12l&&U
                                       g$a$12479$12l&&U
                                       g$b$12480$12l&&U))
                                  g$b$12480$12l&&U))))))
                   (car g$nums$12476$12l&&U)
                   (g$cadr$12259$12l&&U g$nums$12476$12l&&U))
                  (g$fold-left$11838$12l&&U
                    g$lcm$12294$12l&&U
                    (abs (car g$nums$12476$12l&&U))
                    (cdr g$nums$12476$12l&&U)))))))
         (length g$nums$12476$12l&&U)))))
   (g$string=?$12335$12l&&U
     g$string=?$12633$12l&&U
     (case-lambda
       ((g$a$12482$12l&&U g$b$12483$12l&&U . g$rest$12484$12l&&U)
        (begin
          (if (not (string? g$a$12482$12l&&U))
            (assertion-violation
              'string=?
              '"not a string"
              g$a$12482$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12485$12l&&U)
               (begin
                 (if (not (string? g$x$12485$12l&&U))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$12485$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$12486$12l&&U)
                     (begin
                       (set! g$a$12482$12l&&U g$x$12485$12l&&U)
                       g$r$12486$12l&&U)))
                  (g$fx=?$15999$12l&&U
                    (string-compare g$a$12482$12l&&U g$x$12485$12l&&U)
                    '0)))))
            (cons g$b$12483$12l&&U g$rest$12484$12l&&U))))))
   (g$string<?$12336$12l&&U
     g$string<?$12634$12l&&U
     (case-lambda
       ((g$a$12487$12l&&U g$b$12488$12l&&U . g$rest$12489$12l&&U)
        (begin
          (if (not (string? g$a$12487$12l&&U))
            (assertion-violation
              'string<?
              '"not a string"
              g$a$12487$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12490$12l&&U)
               (begin
                 (if (not (string? g$x$12490$12l&&U))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$12490$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$12491$12l&&U)
                     (begin
                       (set! g$a$12487$12l&&U g$x$12490$12l&&U)
                       g$r$12491$12l&&U)))
                  (g$fx<?$16000$12l&&U
                    (string-compare g$a$12487$12l&&U g$x$12490$12l&&U)
                    '0)))))
            (cons g$b$12488$12l&&U g$rest$12489$12l&&U))))))
   (g$string>?$12337$12l&&U
     g$string>?$12635$12l&&U
     (case-lambda
       ((g$a$12492$12l&&U g$b$12493$12l&&U . g$rest$12494$12l&&U)
        (begin
          (if (not (string? g$a$12492$12l&&U))
            (assertion-violation
              'string>?
              '"not a string"
              g$a$12492$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12495$12l&&U)
               (begin
                 (if (not (string? g$x$12495$12l&&U))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$12495$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$12496$12l&&U)
                     (begin
                       (set! g$a$12492$12l&&U g$x$12495$12l&&U)
                       g$r$12496$12l&&U)))
                  (g$fx>?$16002$12l&&U
                    (string-compare g$a$12492$12l&&U g$x$12495$12l&&U)
                    '0)))))
            (cons g$b$12493$12l&&U g$rest$12494$12l&&U))))))
   (g$string<=?$12338$12l&&U
     g$string<=?$12636$12l&&U
     (case-lambda
       ((g$a$12497$12l&&U g$b$12498$12l&&U . g$rest$12499$12l&&U)
        (begin
          (if (not (string? g$a$12497$12l&&U))
            (assertion-violation
              'string<=?
              '"not a string"
              g$a$12497$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12500$12l&&U)
               (begin
                 (if (not (string? g$x$12500$12l&&U))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$12500$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$12501$12l&&U)
                     (begin
                       (set! g$a$12497$12l&&U g$x$12500$12l&&U)
                       g$r$12501$12l&&U)))
                  (g$fx<=?$16001$12l&&U
                    (string-compare g$a$12497$12l&&U g$x$12500$12l&&U)
                    '0)))))
            (cons g$b$12498$12l&&U g$rest$12499$12l&&U))))))
   (g$string>=?$12339$12l&&U
     g$string>=?$12637$12l&&U
     (case-lambda
       ((g$a$12502$12l&&U g$b$12503$12l&&U . g$rest$12504$12l&&U)
        (begin
          (if (not (string? g$a$12502$12l&&U))
            (assertion-violation
              'string>=?
              '"not a string"
              g$a$12502$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12505$12l&&U)
               (begin
                 (if (not (string? g$x$12505$12l&&U))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$12505$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$12506$12l&&U)
                     (begin
                       (set! g$a$12502$12l&&U g$x$12505$12l&&U)
                       g$r$12506$12l&&U)))
                  (g$fx>=?$16003$12l&&U
                    (string-compare g$a$12502$12l&&U g$x$12505$12l&&U)
                    '0)))))
            (cons g$b$12503$12l&&U g$rest$12504$12l&&U))))))
   (g$symbol=?$12340$12l&&U
     g$symbol=?$12638$12l&&U
     (case-lambda
       ((g$a$12507$12l&&U g$b$12508$12l&&U . g$rest$12509$12l&&U)
        (begin
          (if (not (g$symbol?$12241$12l&&U g$a$12507$12l&&U))
            (assertion-violation
              'symbol=?
              '"not a symbol"
              g$a$12507$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12510$12l&&U)
               (begin
                 (if (not (g$symbol?$12241$12l&&U g$x$12510$12l&&U))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$12510$12l&&U)
                   (void))
                 (eq? g$a$12507$12l&&U g$x$12510$12l&&U))))
            (cons g$b$12508$12l&&U g$rest$12509$12l&&U))))))
   (g$boolean=?$12341$12l&&U
     g$boolean=?$12639$12l&&U
     (case-lambda
       ((g$a$12511$12l&&U g$b$12512$12l&&U . g$rest$12513$12l&&U)
        (begin
          (if (not (g$boolean?$12242$12l&&U g$a$12511$12l&&U))
            (assertion-violation
              'boolean=?
              '"not a boolean"
              g$a$12511$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12514$12l&&U)
               (begin
                 (if (not (g$boolean?$12242$12l&&U g$x$12514$12l&&U))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$12514$12l&&U)
                   (void))
                 (eq? g$a$12511$12l&&U g$x$12514$12l&&U))))
            (cons g$b$12512$12l&&U g$rest$12513$12l&&U))))))
   (g$char=?$12382$12l&&U
     g$char=?$12640$12l&&U
     (case-lambda
       ((g$a$12515$12l&&U g$b$12516$12l&&U . g$rest$12517$12l&&U)
        (begin
          (if (not (g$char?$12238$12l&&U g$a$12515$12l&&U))
            (assertion-violation 'char=? '"not a char" g$a$12515$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12518$12l&&U)
               (begin
                 (if (not (g$char?$12238$12l&&U g$x$12518$12l&&U))
                   (assertion-violation
                     'char=?
                     '"not a char"
                     g$x$12518$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$12519$12l&&U)
                     (begin
                       (set! g$a$12515$12l&&U g$x$12518$12l&&U)
                       g$r$12519$12l&&U)))
                  (g$fx=?$15999$12l&&U
                    (char->integer g$a$12515$12l&&U)
                    (char->integer g$x$12518$12l&&U))))))
            (cons g$b$12516$12l&&U g$rest$12517$12l&&U))))))
   (g$char<?$12383$12l&&U
     g$char<?$12641$12l&&U
     (case-lambda
       ((g$a$12520$12l&&U g$b$12521$12l&&U . g$rest$12522$12l&&U)
        (begin
          (if (not (g$char?$12238$12l&&U g$a$12520$12l&&U))
            (assertion-violation 'char<? '"not a char" g$a$12520$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12523$12l&&U)
               (begin
                 (if (not (g$char?$12238$12l&&U g$x$12523$12l&&U))
                   (assertion-violation
                     'char<?
                     '"not a char"
                     g$x$12523$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$12524$12l&&U)
                     (begin
                       (set! g$a$12520$12l&&U g$x$12523$12l&&U)
                       g$r$12524$12l&&U)))
                  (g$fx<?$16000$12l&&U
                    (char->integer g$a$12520$12l&&U)
                    (char->integer g$x$12523$12l&&U))))))
            (cons g$b$12521$12l&&U g$rest$12522$12l&&U))))))
   (g$char>?$12384$12l&&U
     g$char>?$12642$12l&&U
     (case-lambda
       ((g$a$12525$12l&&U g$b$12526$12l&&U . g$rest$12527$12l&&U)
        (begin
          (if (not (g$char?$12238$12l&&U g$a$12525$12l&&U))
            (assertion-violation 'char>? '"not a char" g$a$12525$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12528$12l&&U)
               (begin
                 (if (not (g$char?$12238$12l&&U g$x$12528$12l&&U))
                   (assertion-violation
                     'char>?
                     '"not a char"
                     g$x$12528$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$12529$12l&&U)
                     (begin
                       (set! g$a$12525$12l&&U g$x$12528$12l&&U)
                       g$r$12529$12l&&U)))
                  (g$fx>?$16002$12l&&U
                    (char->integer g$a$12525$12l&&U)
                    (char->integer g$x$12528$12l&&U))))))
            (cons g$b$12526$12l&&U g$rest$12527$12l&&U))))))
   (g$char<=?$12385$12l&&U
     g$char<=?$12643$12l&&U
     (case-lambda
       ((g$a$12530$12l&&U g$b$12531$12l&&U . g$rest$12532$12l&&U)
        (begin
          (if (not (g$char?$12238$12l&&U g$a$12530$12l&&U))
            (assertion-violation
              'char<=?
              '"not a char"
              g$a$12530$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12533$12l&&U)
               (begin
                 (if (not (g$char?$12238$12l&&U g$x$12533$12l&&U))
                   (assertion-violation
                     'char<=?
                     '"not a char"
                     g$x$12533$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$12534$12l&&U)
                     (begin
                       (set! g$a$12530$12l&&U g$x$12533$12l&&U)
                       g$r$12534$12l&&U)))
                  (g$fx<=?$16001$12l&&U
                    (char->integer g$a$12530$12l&&U)
                    (char->integer g$x$12533$12l&&U))))))
            (cons g$b$12531$12l&&U g$rest$12532$12l&&U))))))
   (g$char>=?$12386$12l&&U
     g$char>=?$12644$12l&&U
     (case-lambda
       ((g$a$12535$12l&&U g$b$12536$12l&&U . g$rest$12537$12l&&U)
        (begin
          (if (not (g$char?$12238$12l&&U g$a$12535$12l&&U))
            (assertion-violation
              'char>=?
              '"not a char"
              g$a$12535$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$12538$12l&&U)
               (begin
                 (if (not (g$char?$12238$12l&&U g$x$12538$12l&&U))
                   (assertion-violation
                     'char>=?
                     '"not a char"
                     g$x$12538$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$12539$12l&&U)
                     (begin
                       (set! g$a$12535$12l&&U g$x$12538$12l&&U)
                       g$r$12539$12l&&U)))
                  (g$fx>=?$16003$12l&&U
                    (char->integer g$a$12535$12l&&U)
                    (char->integer g$x$12538$12l&&U))))))
            (cons g$b$12536$12l&&U g$rest$12537$12l&&U))))))
   (g$rationalize$12387$12l&&U
     g$rationalize$12645$12l&&U
     (case-lambda
       ((g$x$12540$12l&&U g$e$12541$12l&&U)
        (if (if (infinite? g$x$12540$12l&&U)
              (begin '#f (infinite? g$e$12541$12l&&U))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$12542$12l&&U)
              (if (if (exact? g$x$12540$12l&&U)
                    (begin '#f (exact? g$e$12541$12l&&U))
                    '#f)
                g$r$12542$12l&&U
                (inexact g$r$12542$12l&&U))))
           (apply
             /
             (g$find-ratio$12388$12l&&U
               g$x$12540$12l&&U
               g$e$12541$12l&&U)))))))
   (g$find-ratio$12388$12l&&U
     g$find-ratio$12646$12l&&U
     (case-lambda
       ((g$x$12543$12l&&U g$e$12544$12l&&U)
        (g$find-ratio-between$12389$12l&&U
          (- g$x$12543$12l&&U g$e$12544$12l&&U)
          (+ g$x$12543$12l&&U g$e$12544$12l&&U)))))
   (g$find-ratio-between$12389$12l&&U
     g$find-ratio-between$12647$12l&&U
     (case-lambda
       ((g$x$12545$12l&&U g$y$12546$12l&&U)
        (letrec* ((g$sr$12547$12l&&U
                    (case-lambda
                      ((g$x$12549$12l&&U g$y$12550$12l&&U)
                       ((case-lambda
                          ((g$fx$12551$12l&&U g$fy$12552$12l&&U)
                           (if (>= g$fx$12551$12l&&U g$x$12549$12l&&U)
                             (list g$fx$12551$12l&&U '1)
                             (if (= g$fx$12551$12l&&U g$fy$12552$12l&&U)
                               ((case-lambda
                                  ((g$rat$12553$12l&&U)
                                   (list
                                     (+ (g$cadr$12259$12l&&U
                                          g$rat$12553$12l&&U)
                                        (* g$fx$12551$12l&&U
                                           (car g$rat$12553$12l&&U)))
                                     (car g$rat$12553$12l&&U))))
                                (g$sr$12547$12l&&U
                                  (/ (- g$y$12550$12l&&U
                                        g$fy$12552$12l&&U))
                                  (/ (- g$x$12549$12l&&U
                                        g$fx$12551$12l&&U))))
                               (list (+ '1 g$fx$12551$12l&&U) '1)))))
                        (exact (floor g$x$12549$12l&&U))
                        (exact (floor g$y$12550$12l&&U)))))))
          (if (< g$y$12546$12l&&U g$x$12545$12l&&U)
            (g$find-ratio-between$12389$12l&&U
              g$y$12546$12l&&U
              g$x$12545$12l&&U)
            (if (>= g$x$12545$12l&&U g$y$12546$12l&&U)
              (list g$x$12545$12l&&U '1)
              (if (g$positive?$12286$12l&&U g$x$12545$12l&&U)
                (g$sr$12547$12l&&U g$x$12545$12l&&U g$y$12546$12l&&U)
                (if (g$negative?$12287$12l&&U g$y$12546$12l&&U)
                  ((case-lambda
                     ((g$rat$12548$12l&&U)
                      (list
                        (- (car g$rat$12548$12l&&U))
                        (g$cadr$12259$12l&&U g$rat$12548$12l&&U))))
                   (g$sr$12547$12l&&U
                     (- g$y$12546$12l&&U)
                     (- g$x$12545$12l&&U)))
                  '(0 1)))))))))
   (g$vector-map$12390$12l&&U
     g$vector-map$12648$12l&&U
     (case-lambda
       ((g$p$12554$12l&&U g$vec1$12555$12l&&U . g$vecs$12556$12l&&U)
        ((case-lambda
           ((g$len$12557$12l&&U)
            ((case-lambda
               ((g$res$12558$12l&&U)
                (letrec ((g$loop$12559$12l&&U
                           (case-lambda
                             ((g$i$12560$12l&&U)
                              (if (g$fx=?$15999$12l&&U
                                    g$i$12560$12l&&U
                                    g$len$12557$12l&&U)
                                (begin
                                  (if '#f '#f (void))
                                  g$res$12558$12l&&U)
                                (begin
                                  (g$vector-set!$12254$12l&&U
                                    g$res$12558$12l&&U
                                    g$i$12560$12l&&U
                                    (if (null? g$vecs$12556$12l&&U)
                                      (g$p$12554$12l&&U
                                        (g$vector-ref$12253$12l&&U
                                          g$vec1$12555$12l&&U
                                          g$i$12560$12l&&U))
                                      (call-with-values
                                        (case-lambda
                                          (()
                                           (apply
                                             values
                                             (g$map$11835$12l&&U
                                               (case-lambda
                                                 ((g$x$12561$12l&&U)
                                                  (g$vector-ref$12253$12l&&U
                                                    g$x$12561$12l&&U
                                                    g$i$12560$12l&&U)))
                                               (cons
                                                 g$vec1$12555$12l&&U
                                                 g$vecs$12556$12l&&U)))))
                                        g$p$12554$12l&&U)))
                                  (g$loop$12559$12l&&U
                                    (g$fx+$15986$12l&&U
                                      g$i$12560$12l&&U
                                      '1))))))))
                  (g$loop$12559$12l&&U '0))))
             (make-vector g$len$12557$12l&&U '()))))
         (vector-length g$vec1$12555$12l&&U)))))
   (g$vector-for-each$12391$12l&&U
     g$vector-for-each$12649$12l&&U
     (case-lambda
       ((g$p$12562$12l&&U g$vec1$12563$12l&&U . g$vecs$12564$12l&&U)
        ((case-lambda
           ((g$len$12565$12l&&U)
            (letrec ((g$loop$12566$12l&&U
                       (case-lambda
                         ((g$i$12567$12l&&U)
                          (if (g$fx=?$15999$12l&&U
                                g$i$12567$12l&&U
                                g$len$12565$12l&&U)
                            (if '#f '#f (void))
                            (begin
                              (if (null? g$vecs$12564$12l&&U)
                                (g$p$12562$12l&&U
                                  (g$vector-ref$12253$12l&&U
                                    g$vec1$12563$12l&&U
                                    g$i$12567$12l&&U))
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (apply
                                       values
                                       (g$map$11835$12l&&U
                                         (case-lambda
                                           ((g$x$12568$12l&&U)
                                            (g$vector-ref$12253$12l&&U
                                              g$x$12568$12l&&U
                                              g$i$12567$12l&&U)))
                                         (cons
                                           g$vec1$12563$12l&&U
                                           g$vecs$12564$12l&&U)))))
                                  g$p$12562$12l&&U))
                              (g$loop$12566$12l&&U
                                (g$fx+$15986$12l&&U
                                  g$i$12567$12l&&U
                                  '1))))))))
              (g$loop$12566$12l&&U '0))))
         (vector-length g$vec1$12563$12l&&U)))))
   (g$string-for-each$12392$12l&&U
     g$string-for-each$12650$12l&&U
     (case-lambda
       ((g$p$12569$12l&&U g$str1$12570$12l&&U . g$strs$12571$12l&&U)
        ((case-lambda
           ((g$len$12572$12l&&U)
            (letrec ((g$loop$12573$12l&&U
                       (case-lambda
                         ((g$i$12574$12l&&U)
                          (if (g$fx=?$15999$12l&&U
                                g$i$12574$12l&&U
                                g$len$12572$12l&&U)
                            (if '#f '#f (void))
                            (begin
                              (if (null? g$strs$12571$12l&&U)
                                (g$p$12569$12l&&U
                                  (string-ref
                                    g$str1$12570$12l&&U
                                    g$i$12574$12l&&U))
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (apply
                                       values
                                       (g$map$11835$12l&&U
                                         (case-lambda
                                           ((g$x$12575$12l&&U)
                                            (string-ref
                                              g$x$12575$12l&&U
                                              g$i$12574$12l&&U)))
                                         (cons
                                           g$str1$12570$12l&&U
                                           g$strs$12571$12l&&U)))))
                                  g$p$12569$12l&&U))
                              (g$loop$12573$12l&&U
                                (g$fx+$15986$12l&&U
                                  g$i$12574$12l&&U
                                  '1))))))))
              (g$loop$12573$12l&&U '0))))
         (string-length g$str1$12570$12l&&U))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$12652$12l&&U
     g$using$12686$12l&&U
     (clr-using-internal 'system))
   (g$using$12654$12l&&U
     g$using$12687$12l&&U
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$12655$12l&&U
     g$make-eq-hashtable$12688$12l&&U
     (case-lambda
       (() (g$make-eq-hashtable$12655$12l&&U '32))
       ((g$k$12664$12l&&U)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$12664$12l&&U)))))
   (g$make-eqv-hashtable$12656$12l&&U
     g$make-eqv-hashtable$12689$12l&&U
     (case-lambda
       (() (g$make-eqv-hashtable$12656$12l&&U '32))
       ((g$k$12665$12l&&U)
        (make-hashtable eqv-hash eqv? g$k$12665$12l&&U))))
   (g$hashtable-size$12657$12l&&U
     g$hashtable-size$12690$12l&&U
     (case-lambda
       ((g$ht$12666$12l&&U)
        (clr-call-internal 'hashtable 'get_count g$ht$12666$12l&&U))))
   (g$hashtable-ref$12658$12l&&U
     g$hashtable-ref$12691$12l&&U
     (case-lambda
       ((g$ht$12667$12l&&U g$key$12668$12l&&U g$default$12669$12l&&U)
        (letrec* ((g$r$12670$12l&&U
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$12667$12l&&U
                      g$key$12668$12l&&U)))
          (if ((case-lambda
                 ((g$t$12671$12l&&U)
                  (if g$t$12671$12l&&U
                    g$t$12671$12l&&U
                    (begin
                      '#f
                      (g$hashtable-contains?$12661$12l&&U
                        g$ht$12667$12l&&U
                        g$key$12668$12l&&U)))))
               (not (null? g$r$12670$12l&&U)))
            g$r$12670$12l&&U
            g$default$12669$12l&&U)))))
   (g$hashtable-set!$12659$12l&&U
     g$hashtable-set!$12692$12l&&U
     (case-lambda
       ((g$ht$12672$12l&&U g$key$12673$12l&&U g$obj$12674$12l&&U)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$12672$12l&&U
          g$key$12673$12l&&U
          g$obj$12674$12l&&U))))
   (g$hashtable-delete!$12660$12l&&U
     g$hashtable-delete!$12693$12l&&U
     (case-lambda
       ((g$ht$12675$12l&&U g$key$12676$12l&&U)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$12675$12l&&U
          g$key$12676$12l&&U))))
   (g$hashtable-contains?$12661$12l&&U
     g$hashtable-contains?$12694$12l&&U
     (case-lambda
       ((g$ht$12677$12l&&U g$key$12678$12l&&U)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$12677$12l&&U
          g$key$12678$12l&&U))))
   (g$hashtable-update!$12662$12l&&U
     g$hashtable-update!$12695$12l&&U
     (case-lambda
       ((g$ht$12679$12l&&U
          g$key$12680$12l&&U
          g$proc$12681$12l&&U
          g$default$12682$12l&&U)
        (g$hashtable-set!$12659$12l&&U
          g$ht$12679$12l&&U
          g$key$12680$12l&&U
          (g$proc$12681$12l&&U
            (g$hashtable-ref$12658$12l&&U
              g$ht$12679$12l&&U
              g$key$12680$12l&&U
              g$default$12682$12l&&U))))))
   (g$hashtable-clear!$12663$12l&&U
     g$hashtable-clear!$12696$12l&&U
     (case-lambda
       ((g$ht$12683$12l&&U)
        (g$hashtable-clear!$12663$12l&&U g$ht$12683$12l&&U '32))
       ((g$ht$12684$12l&&U g$k$12685$12l&&U)
        (clr-call-internal 'hashtable 'clear g$ht$12684$12l&&U)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$12698$12l&&U
     g$using$12705$12l&&U
     (clr-using-internal 'system.io))
   (g$file-exists?$12699$12l&&U
     g$file-exists?$12706$12l&&U
     (case-lambda
       ((g$fn$12702$12l&&U)
        (clr-call-internal 'file 'exists '() g$fn$12702$12l&&U))))
   (g$delete-file$12700$12l&&U
     g$delete-file$12707$12l&&U
     (case-lambda
       ((g$fn$12703$12l&&U)
        (clr-call-internal 'file 'delete '() g$fn$12703$12l&&U))))
   (g$get-directory-name$12701$12l&&U
     g$get-directory-name$12708$12l&&U
     (case-lambda
       ((g$path$12704$12l&&U)
        (clr-call-internal
          'path
          'getdirectoryname
          '()
          g$path$12704$12l&&U)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$12709$12l&&U
     g$native-endianness$12820$12l&&U
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$12710$12l&&U
     g$bytevector-u16-ref$12821$12l&&U
     (case-lambda
       ((g$bytevector$12738$12l&&U
          g$k$12739$12l&&U
          g$endianness$12740$12l&&U)
        (bytevector-uint-ref
          g$bytevector$12738$12l&&U
          g$k$12739$12l&&U
          g$endianness$12740$12l&&U
          '2))))
   (g$bytevector-s16-ref$12711$12l&&U
     g$bytevector-s16-ref$12822$12l&&U
     (case-lambda
       ((g$bytevector$12741$12l&&U
          g$k$12742$12l&&U
          g$endianness$12743$12l&&U)
        (bytevector-sint-ref
          g$bytevector$12741$12l&&U
          g$k$12742$12l&&U
          g$endianness$12743$12l&&U
          '2))))
   (g$bytevector-u16-native-ref$12712$12l&&U
     g$bytevector-u16-native-ref$12823$12l&&U
     (case-lambda
       ((g$bytevector$12744$12l&&U g$k$12745$12l&&U)
        (bytevector-uint-ref
          g$bytevector$12744$12l&&U
          g$k$12745$12l&&U
          (g$native-endianness$12709$12l&&U)
          '2))))
   (g$bytevector-s16-native-ref$12713$12l&&U
     g$bytevector-s16-native-ref$12824$12l&&U
     (case-lambda
       ((g$bytevector$12746$12l&&U g$k$12747$12l&&U)
        (bytevector-sint-ref
          g$bytevector$12746$12l&&U
          g$k$12747$12l&&U
          (g$native-endianness$12709$12l&&U)
          '2))))
   (g$bytevector-u16-set!$12714$12l&&U
     g$bytevector-u16-set!$12825$12l&&U
     (case-lambda
       ((g$bytevector$12748$12l&&U
          g$k$12749$12l&&U
          g$n$12750$12l&&U
          g$endianness$12751$12l&&U)
        (bytevector-uint-set!
          g$bytevector$12748$12l&&U
          g$k$12749$12l&&U
          g$n$12750$12l&&U
          g$endianness$12751$12l&&U
          '2))))
   (g$bytevector-s16-set!$12715$12l&&U
     g$bytevector-s16-set!$12826$12l&&U
     (case-lambda
       ((g$bytevector$12752$12l&&U
          g$k$12753$12l&&U
          g$n$12754$12l&&U
          g$endianness$12755$12l&&U)
        (bytevector-sint-set!
          g$bytevector$12752$12l&&U
          g$k$12753$12l&&U
          g$n$12754$12l&&U
          g$endianness$12755$12l&&U
          '2))))
   (g$bytevector-u16-native-set!$12716$12l&&U
     g$bytevector-u16-native-set!$12827$12l&&U
     (case-lambda
       ((g$bytevector$12756$12l&&U g$k$12757$12l&&U g$n$12758$12l&&U)
        (bytevector-uint-set!
          g$bytevector$12756$12l&&U
          g$k$12757$12l&&U
          g$n$12758$12l&&U
          (g$native-endianness$12709$12l&&U)
          '2))))
   (g$bytevector-s16-native-set!$12717$12l&&U
     g$bytevector-s16-native-set!$12828$12l&&U
     (case-lambda
       ((g$bytevector$12759$12l&&U g$k$12760$12l&&U g$n$12761$12l&&U)
        (bytevector-sint-set!
          g$bytevector$12759$12l&&U
          g$k$12760$12l&&U
          g$n$12761$12l&&U
          (g$native-endianness$12709$12l&&U)
          '2))))
   (g$bytevector-u32-ref$12718$12l&&U
     g$bytevector-u32-ref$12829$12l&&U
     (case-lambda
       ((g$bytevector$12762$12l&&U
          g$k$12763$12l&&U
          g$endianness$12764$12l&&U)
        (bytevector-uint-ref
          g$bytevector$12762$12l&&U
          g$k$12763$12l&&U
          g$endianness$12764$12l&&U
          '4))))
   (g$bytevector-s32-ref$12719$12l&&U
     g$bytevector-s32-ref$12830$12l&&U
     (case-lambda
       ((g$bytevector$12765$12l&&U
          g$k$12766$12l&&U
          g$endianness$12767$12l&&U)
        (bytevector-sint-ref
          g$bytevector$12765$12l&&U
          g$k$12766$12l&&U
          g$endianness$12767$12l&&U
          '4))))
   (g$bytevector-u32-native-ref$12720$12l&&U
     g$bytevector-u32-native-ref$12831$12l&&U
     (case-lambda
       ((g$bytevector$12768$12l&&U g$k$12769$12l&&U)
        (bytevector-uint-ref
          g$bytevector$12768$12l&&U
          g$k$12769$12l&&U
          (g$native-endianness$12709$12l&&U)
          '4))))
   (g$bytevector-s32-native-ref$12721$12l&&U
     g$bytevector-s32-native-ref$12832$12l&&U
     (case-lambda
       ((g$bytevector$12770$12l&&U g$k$12771$12l&&U)
        (bytevector-sint-ref
          g$bytevector$12770$12l&&U
          g$k$12771$12l&&U
          (g$native-endianness$12709$12l&&U)
          '4))))
   (g$bytevector-u32-set!$12722$12l&&U
     g$bytevector-u32-set!$12833$12l&&U
     (case-lambda
       ((g$bytevector$12772$12l&&U
          g$k$12773$12l&&U
          g$n$12774$12l&&U
          g$endianness$12775$12l&&U)
        (bytevector-uint-set!
          g$bytevector$12772$12l&&U
          g$k$12773$12l&&U
          g$n$12774$12l&&U
          g$endianness$12775$12l&&U
          '4))))
   (g$bytevector-s32-set!$12723$12l&&U
     g$bytevector-s32-set!$12834$12l&&U
     (case-lambda
       ((g$bytevector$12776$12l&&U
          g$k$12777$12l&&U
          g$n$12778$12l&&U
          g$endianness$12779$12l&&U)
        (bytevector-sint-set!
          g$bytevector$12776$12l&&U
          g$k$12777$12l&&U
          g$n$12778$12l&&U
          g$endianness$12779$12l&&U
          '4))))
   (g$bytevector-u32-native-set!$12724$12l&&U
     g$bytevector-u32-native-set!$12835$12l&&U
     (case-lambda
       ((g$bytevector$12780$12l&&U g$k$12781$12l&&U g$n$12782$12l&&U)
        (bytevector-uint-set!
          g$bytevector$12780$12l&&U
          g$k$12781$12l&&U
          g$n$12782$12l&&U
          (g$native-endianness$12709$12l&&U)
          '4))))
   (g$bytevector-s32-native-set!$12725$12l&&U
     g$bytevector-s32-native-set!$12836$12l&&U
     (case-lambda
       ((g$bytevector$12783$12l&&U g$k$12784$12l&&U g$n$12785$12l&&U)
        (bytevector-sint-set!
          g$bytevector$12783$12l&&U
          g$k$12784$12l&&U
          g$n$12785$12l&&U
          (g$native-endianness$12709$12l&&U)
          '4))))
   (g$bytevector-u64-ref$12726$12l&&U
     g$bytevector-u64-ref$12837$12l&&U
     (case-lambda
       ((g$bytevector$12786$12l&&U
          g$k$12787$12l&&U
          g$endianness$12788$12l&&U)
        (bytevector-uint-ref
          g$bytevector$12786$12l&&U
          g$k$12787$12l&&U
          g$endianness$12788$12l&&U
          '8))))
   (g$bytevector-s64-ref$12727$12l&&U
     g$bytevector-s64-ref$12838$12l&&U
     (case-lambda
       ((g$bytevector$12789$12l&&U
          g$k$12790$12l&&U
          g$endianness$12791$12l&&U)
        (bytevector-sint-ref
          g$bytevector$12789$12l&&U
          g$k$12790$12l&&U
          g$endianness$12791$12l&&U
          '8))))
   (g$bytevector-u64-native-ref$12728$12l&&U
     g$bytevector-u64-native-ref$12839$12l&&U
     (case-lambda
       ((g$bytevector$12792$12l&&U g$k$12793$12l&&U)
        (bytevector-uint-ref
          g$bytevector$12792$12l&&U
          g$k$12793$12l&&U
          (g$native-endianness$12709$12l&&U)
          '8))))
   (g$bytevector-s64-native-ref$12729$12l&&U
     g$bytevector-s64-native-ref$12840$12l&&U
     (case-lambda
       ((g$bytevector$12794$12l&&U g$k$12795$12l&&U)
        (bytevector-sint-ref
          g$bytevector$12794$12l&&U
          g$k$12795$12l&&U
          (g$native-endianness$12709$12l&&U)
          '8))))
   (g$bytevector-u64-set!$12730$12l&&U
     g$bytevector-u64-set!$12841$12l&&U
     (case-lambda
       ((g$bytevector$12796$12l&&U
          g$k$12797$12l&&U
          g$n$12798$12l&&U
          g$endianness$12799$12l&&U)
        (bytevector-uint-set!
          g$bytevector$12796$12l&&U
          g$k$12797$12l&&U
          g$n$12798$12l&&U
          g$endianness$12799$12l&&U
          '8))))
   (g$bytevector-s64-set!$12731$12l&&U
     g$bytevector-s64-set!$12842$12l&&U
     (case-lambda
       ((g$bytevector$12800$12l&&U
          g$k$12801$12l&&U
          g$n$12802$12l&&U
          g$endianness$12803$12l&&U)
        (bytevector-sint-set!
          g$bytevector$12800$12l&&U
          g$k$12801$12l&&U
          g$n$12802$12l&&U
          g$endianness$12803$12l&&U
          '8))))
   (g$bytevector-u64-native-set!$12732$12l&&U
     g$bytevector-u64-native-set!$12843$12l&&U
     (case-lambda
       ((g$bytevector$12804$12l&&U g$k$12805$12l&&U g$n$12806$12l&&U)
        (bytevector-uint-set!
          g$bytevector$12804$12l&&U
          g$k$12805$12l&&U
          g$n$12806$12l&&U
          (g$native-endianness$12709$12l&&U)
          '8))))
   (g$bytevector-s64-native-set!$12733$12l&&U
     g$bytevector-s64-native-set!$12844$12l&&U
     (case-lambda
       ((g$bytevector$12807$12l&&U g$k$12808$12l&&U g$n$12809$12l&&U)
        (bytevector-sint-set!
          g$bytevector$12807$12l&&U
          g$k$12808$12l&&U
          g$n$12809$12l&&U
          (g$native-endianness$12709$12l&&U)
          '8))))
   (g$bytevector-ieee-single-native-ref$12734$12l&&U
     g$bytevector-ieee-single-native-ref$12845$12l&&U
     (case-lambda
       ((g$bytevector$12810$12l&&U g$k$12811$12l&&U)
        (if (not (g$zero?$12626$12l&&U
                   (g$mod$12585$12l&&U g$k$12811$12l&&U '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$12811$12l&&U)
          (bytevector-ieee-single-ref
            g$bytevector$12810$12l&&U
            g$k$12811$12l&&U
            (g$native-endianness$12709$12l&&U))))))
   (g$bytevector-ieee-double-native-ref$12735$12l&&U
     g$bytevector-ieee-double-native-ref$12846$12l&&U
     (case-lambda
       ((g$bytevector$12812$12l&&U g$k$12813$12l&&U)
        (if (not (g$zero?$12626$12l&&U
                   (g$mod$12585$12l&&U g$k$12813$12l&&U '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$12813$12l&&U)
          (bytevector-ieee-double-ref
            g$bytevector$12812$12l&&U
            g$k$12813$12l&&U
            (g$native-endianness$12709$12l&&U))))))
   (g$bytevector-ieee-single-native-set!$12736$12l&&U
     g$bytevector-ieee-single-native-set!$12847$12l&&U
     (case-lambda
       ((g$bytevector$12814$12l&&U g$k$12815$12l&&U g$x$12816$12l&&U)
        (if (not (g$zero?$12626$12l&&U
                   (g$mod$12585$12l&&U g$k$12815$12l&&U '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$12815$12l&&U)
          (bytevector-ieee-single-set!
            g$bytevector$12814$12l&&U
            g$k$12815$12l&&U
            g$x$12816$12l&&U
            (g$native-endianness$12709$12l&&U))))))
   (g$bytevector-ieee-double-native-set!$12737$12l&&U
     g$bytevector-ieee-double-native-set!$12848$12l&&U
     (case-lambda
       ((g$bytevector$12817$12l&&U g$k$12818$12l&&U g$x$12819$12l&&U)
        (if (not (g$zero?$12626$12l&&U
                   (g$mod$12585$12l&&U g$k$12818$12l&&U '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$12818$12l&&U)
          (bytevector-ieee-double-set!
            g$bytevector$12817$12l&&U
            g$k$12818$12l&&U
            g$x$12819$12l&&U
            (g$native-endianness$12709$12l&&U)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$5895$12849$12l&&U
     g$5895$13251$12l&&U
     (make-record-type-descriptor
       '&condition
       '#f
       'g$5898$12l&&U
       '#f
       '#f
       '#()))
   (g$5897$12850$12l&&U g$5897$13252$12l&&U '#f)
   (g$5896$12851$12l&&U
     g$5896$13253$12l&&U
     (make-record-constructor-descriptor
       g$5895$12849$12l&&U
       '#f
       g$5897$12850$12l&&U))
   (g$&condition?$12854$12l&&U
     g$&condition?$13254$12l&&U
     (record-predicate g$5895$12849$12l&&U))
   (g$make-&condition$12855$12l&&U
     g$make-&condition$13255$12l&&U
     (record-constructor g$5896$12851$12l&&U))
   (g$&condition-rtd$12856$12l&&U
     g$&condition-rtd$13256$12l&&U
     g$5895$12849$12l&&U)
   (g$&condition-rcd$12857$12l&&U
     g$&condition-rcd$13257$12l&&U
     g$5896$12851$12l&&U)
   (g$5932$12955$12l&&U
     g$5932$13258$12l&&U
     (make-record-type-descriptor
       '&message
       g$5895$12849$12l&&U
       'g$5935$12l&&U
       '#f
       '#f
       '#((immutable message))))
   (g$5934$12956$12l&&U g$5934$13259$12l&&U '#f)
   (g$5933$12957$12l&&U
     g$5933$13260$12l&&U
     (make-record-constructor-descriptor
       g$5932$12955$12l&&U
       g$5896$12851$12l&&U
       g$5934$12956$12l&&U))
   (g$p?$12960$12l&&U
     g$p?$13261$12l&&U
     (record-predicate g$5932$12955$12l&&U))
   (g$make-message-condition$12961$12l&&U
     g$make-message-condition$13262$12l&&U
     (record-constructor g$5933$12957$12l&&U))
   (g$condition-message$12962$12l&&U
     g$condition-message$13263$12l&&U
     (record-accessor g$5932$12955$12l&&U '0))
   (g$message-condition?$12963$12l&&U
     g$message-condition?$13264$12l&&U
     (condition-predicate g$5932$12955$12l&&U))
   (g$condition-message$12964$12l&&U
     g$condition-message$13265$12l&&U
     (condition-accessor
       g$5932$12955$12l&&U
       g$condition-message$12962$12l&&U))
   (g$&message-rtd$12965$12l&&U
     g$&message-rtd$13266$12l&&U
     g$5932$12955$12l&&U)
   (g$&message-rcd$12966$12l&&U
     g$&message-rcd$13267$12l&&U
     g$5933$12957$12l&&U)
   (g$5947$12967$12l&&U
     g$5947$13268$12l&&U
     (make-record-type-descriptor
       '&warning
       g$5895$12849$12l&&U
       'g$5950$12l&&U
       '#f
       '#f
       '#()))
   (g$5949$12968$12l&&U g$5949$13269$12l&&U '#f)
   (g$5948$12969$12l&&U
     g$5948$13270$12l&&U
     (make-record-constructor-descriptor
       g$5947$12967$12l&&U
       g$5896$12851$12l&&U
       g$5949$12968$12l&&U))
   (g$p?$12972$12l&&U
     g$p?$13271$12l&&U
     (record-predicate g$5947$12967$12l&&U))
   (g$make-warning$12973$12l&&U
     g$make-warning$13272$12l&&U
     (record-constructor g$5948$12969$12l&&U))
   (g$warning?$12974$12l&&U
     g$warning?$13273$12l&&U
     (condition-predicate g$5947$12967$12l&&U))
   (g$&warning-rtd$12975$12l&&U
     g$&warning-rtd$13274$12l&&U
     g$5947$12967$12l&&U)
   (g$&warning-rcd$12976$12l&&U
     g$&warning-rcd$13275$12l&&U
     g$5948$12969$12l&&U)
   (g$5960$12977$12l&&U
     g$5960$13276$12l&&U
     (make-record-type-descriptor
       '&serious
       g$5895$12849$12l&&U
       'g$5963$12l&&U
       '#f
       '#f
       '#()))
   (g$5962$12978$12l&&U g$5962$13277$12l&&U '#f)
   (g$5961$12979$12l&&U
     g$5961$13278$12l&&U
     (make-record-constructor-descriptor
       g$5960$12977$12l&&U
       g$5896$12851$12l&&U
       g$5962$12978$12l&&U))
   (g$p?$12982$12l&&U
     g$p?$13279$12l&&U
     (record-predicate g$5960$12977$12l&&U))
   (g$make-serious-condition$12983$12l&&U
     g$make-serious-condition$13280$12l&&U
     (record-constructor g$5961$12979$12l&&U))
   (g$serious-condition?$12984$12l&&U
     g$serious-condition?$13281$12l&&U
     (condition-predicate g$5960$12977$12l&&U))
   (g$&serious-rtd$12985$12l&&U
     g$&serious-rtd$13282$12l&&U
     g$5960$12977$12l&&U)
   (g$&serious-rcd$12986$12l&&U
     g$&serious-rcd$13283$12l&&U
     g$5961$12979$12l&&U)
   (g$5973$12987$12l&&U
     g$5973$13284$12l&&U
     (make-record-type-descriptor
       '&error
       g$5960$12977$12l&&U
       'g$5976$12l&&U
       '#f
       '#f
       '#()))
   (g$5975$12988$12l&&U g$5975$13285$12l&&U '#f)
   (g$5974$12989$12l&&U
     g$5974$13286$12l&&U
     (make-record-constructor-descriptor
       g$5973$12987$12l&&U
       g$5961$12979$12l&&U
       g$5975$12988$12l&&U))
   (g$p?$12992$12l&&U
     g$p?$13287$12l&&U
     (record-predicate g$5973$12987$12l&&U))
   (g$make-error$12993$12l&&U
     g$make-error$13288$12l&&U
     (record-constructor g$5974$12989$12l&&U))
   (g$error?$12994$12l&&U
     g$error?$13289$12l&&U
     (condition-predicate g$5973$12987$12l&&U))
   (g$&error-rtd$12995$12l&&U
     g$&error-rtd$13290$12l&&U
     g$5973$12987$12l&&U)
   (g$&error-rcd$12996$12l&&U
     g$&error-rcd$13291$12l&&U
     g$5974$12989$12l&&U)
   (g$5986$12997$12l&&U
     g$5986$13292$12l&&U
     (make-record-type-descriptor
       '&violation
       g$5960$12977$12l&&U
       'g$5989$12l&&U
       '#f
       '#f
       '#()))
   (g$5988$12998$12l&&U g$5988$13293$12l&&U '#f)
   (g$5987$12999$12l&&U
     g$5987$13294$12l&&U
     (make-record-constructor-descriptor
       g$5986$12997$12l&&U
       g$5961$12979$12l&&U
       g$5988$12998$12l&&U))
   (g$p?$13002$12l&&U
     g$p?$13295$12l&&U
     (record-predicate g$5986$12997$12l&&U))
   (g$make-violation$13003$12l&&U
     g$make-violation$13296$12l&&U
     (record-constructor g$5987$12999$12l&&U))
   (g$violation?$13004$12l&&U
     g$violation?$13297$12l&&U
     (condition-predicate g$5986$12997$12l&&U))
   (g$&violation-rtd$13005$12l&&U
     g$&violation-rtd$13298$12l&&U
     g$5986$12997$12l&&U)
   (g$&violation-rcd$13006$12l&&U
     g$&violation-rcd$13299$12l&&U
     g$5987$12999$12l&&U)
   (g$5999$13007$12l&&U
     g$5999$13300$12l&&U
     (make-record-type-descriptor
       '&assertion
       g$5986$12997$12l&&U
       'g$6002$12l&&U
       '#f
       '#f
       '#()))
   (g$6001$13008$12l&&U g$6001$13301$12l&&U '#f)
   (g$6000$13009$12l&&U
     g$6000$13302$12l&&U
     (make-record-constructor-descriptor
       g$5999$13007$12l&&U
       g$5987$12999$12l&&U
       g$6001$13008$12l&&U))
   (g$p?$13012$12l&&U
     g$p?$13303$12l&&U
     (record-predicate g$5999$13007$12l&&U))
   (g$make-assertion-violation$13013$12l&&U
     g$make-assertion-violation$13304$12l&&U
     (record-constructor g$6000$13009$12l&&U))
   (g$assertion-violation?$13014$12l&&U
     g$assertion-violation?$13305$12l&&U
     (condition-predicate g$5999$13007$12l&&U))
   (g$&assertion-rtd$13015$12l&&U
     g$&assertion-rtd$13306$12l&&U
     g$5999$13007$12l&&U)
   (g$&assertion-rcd$13016$12l&&U
     g$&assertion-rcd$13307$12l&&U
     g$6000$13009$12l&&U)
   (g$6012$13018$12l&&U
     g$6012$13308$12l&&U
     (make-record-type-descriptor
       '&irritants
       g$5895$12849$12l&&U
       'g$6015$12l&&U
       '#f
       '#f
       '#((immutable irritants))))
   (g$6014$13019$12l&&U g$6014$13309$12l&&U '#f)
   (g$6013$13020$12l&&U
     g$6013$13310$12l&&U
     (make-record-constructor-descriptor
       g$6012$13018$12l&&U
       g$5896$12851$12l&&U
       g$6014$13019$12l&&U))
   (g$p?$13023$12l&&U
     g$p?$13311$12l&&U
     (record-predicate g$6012$13018$12l&&U))
   (g$make-irritants-condition$13024$12l&&U
     g$make-irritants-condition$13312$12l&&U
     (record-constructor g$6013$13020$12l&&U))
   (g$condition-irritants$13025$12l&&U
     g$condition-irritants$13313$12l&&U
     (record-accessor g$6012$13018$12l&&U '0))
   (g$irritants-condition?$13026$12l&&U
     g$irritants-condition?$13314$12l&&U
     (condition-predicate g$6012$13018$12l&&U))
   (g$condition-irritants$13027$12l&&U
     g$condition-irritants$13315$12l&&U
     (condition-accessor
       g$6012$13018$12l&&U
       g$condition-irritants$13025$12l&&U))
   (g$&irritants-rtd$13028$12l&&U
     g$&irritants-rtd$13316$12l&&U
     g$6012$13018$12l&&U)
   (g$&irritants-rcd$13029$12l&&U
     g$&irritants-rcd$13317$12l&&U
     g$6013$13020$12l&&U)
   (g$6027$13031$12l&&U
     g$6027$13318$12l&&U
     (make-record-type-descriptor
       '&who
       g$5895$12849$12l&&U
       'g$6030$12l&&U
       '#f
       '#f
       '#((immutable who))))
   (g$6029$13032$12l&&U g$6029$13319$12l&&U '#f)
   (g$6028$13033$12l&&U
     g$6028$13320$12l&&U
     (make-record-constructor-descriptor
       g$6027$13031$12l&&U
       g$5896$12851$12l&&U
       g$6029$13032$12l&&U))
   (g$p?$13036$12l&&U
     g$p?$13321$12l&&U
     (record-predicate g$6027$13031$12l&&U))
   (g$make-who-condition$13037$12l&&U
     g$make-who-condition$13322$12l&&U
     (record-constructor g$6028$13033$12l&&U))
   (g$condition-who$13038$12l&&U
     g$condition-who$13323$12l&&U
     (record-accessor g$6027$13031$12l&&U '0))
   (g$who-condition?$13039$12l&&U
     g$who-condition?$13324$12l&&U
     (condition-predicate g$6027$13031$12l&&U))
   (g$condition-who$13040$12l&&U
     g$condition-who$13325$12l&&U
     (condition-accessor
       g$6027$13031$12l&&U
       g$condition-who$13038$12l&&U))
   (g$&who-rtd$13041$12l&&U g$&who-rtd$13326$12l&&U g$6027$13031$12l&&U)
   (g$&who-rcd$13042$12l&&U g$&who-rcd$13327$12l&&U g$6028$13033$12l&&U)
   (g$6042$13043$12l&&U
     g$6042$13328$12l&&U
     (make-record-type-descriptor
       '&non-continuable
       g$5986$12997$12l&&U
       'g$6045$12l&&U
       '#f
       '#f
       '#()))
   (g$6044$13044$12l&&U g$6044$13329$12l&&U '#f)
   (g$6043$13045$12l&&U
     g$6043$13330$12l&&U
     (make-record-constructor-descriptor
       g$6042$13043$12l&&U
       g$5987$12999$12l&&U
       g$6044$13044$12l&&U))
   (g$p?$13048$12l&&U
     g$p?$13331$12l&&U
     (record-predicate g$6042$13043$12l&&U))
   (g$make-non-continuable-violation$13049$12l&&U
     g$make-non-continuable-violation$13332$12l&&U
     (record-constructor g$6043$13045$12l&&U))
   (g$non-continuable-violation?$13050$12l&&U
     g$non-continuable-violation?$13333$12l&&U
     (condition-predicate g$6042$13043$12l&&U))
   (g$&non-continuable-rtd$13051$12l&&U
     g$&non-continuable-rtd$13334$12l&&U
     g$6042$13043$12l&&U)
   (g$&non-continuable-rcd$13052$12l&&U
     g$&non-continuable-rcd$13335$12l&&U
     g$6043$13045$12l&&U)
   (g$6055$13053$12l&&U
     g$6055$13336$12l&&U
     (make-record-type-descriptor
       '&implementation-restriction
       g$5986$12997$12l&&U
       'g$6058$12l&&U
       '#f
       '#f
       '#()))
   (g$6057$13054$12l&&U g$6057$13337$12l&&U '#f)
   (g$6056$13055$12l&&U
     g$6056$13338$12l&&U
     (make-record-constructor-descriptor
       g$6055$13053$12l&&U
       g$5987$12999$12l&&U
       g$6057$13054$12l&&U))
   (g$p?$13058$12l&&U
     g$p?$13339$12l&&U
     (record-predicate g$6055$13053$12l&&U))
   (g$make-implementation-restriction-violation$13059$12l&&U
     g$make-implementation-restriction-violation$13340$12l&&U
     (record-constructor g$6056$13055$12l&&U))
   (g$implementation-restriction-violation?$13060$12l&&U
     g$implementation-restriction-violation?$13341$12l&&U
     (condition-predicate g$6055$13053$12l&&U))
   (g$&implementation-restriction-rtd$13061$12l&&U
     g$&implementation-restriction-rtd$13342$12l&&U
     g$6055$13053$12l&&U)
   (g$&implementation-restriction-rcd$13062$12l&&U
     g$&implementation-restriction-rcd$13343$12l&&U
     g$6056$13055$12l&&U)
   (g$6068$13063$12l&&U
     g$6068$13344$12l&&U
     (make-record-type-descriptor
       '&lexical
       g$5986$12997$12l&&U
       'g$6071$12l&&U
       '#f
       '#f
       '#()))
   (g$6070$13064$12l&&U g$6070$13345$12l&&U '#f)
   (g$6069$13065$12l&&U
     g$6069$13346$12l&&U
     (make-record-constructor-descriptor
       g$6068$13063$12l&&U
       g$5987$12999$12l&&U
       g$6070$13064$12l&&U))
   (g$p?$13068$12l&&U
     g$p?$13347$12l&&U
     (record-predicate g$6068$13063$12l&&U))
   (g$make-lexical-violation$13069$12l&&U
     g$make-lexical-violation$13348$12l&&U
     (record-constructor g$6069$13065$12l&&U))
   (g$lexical-violation?$13070$12l&&U
     g$lexical-violation?$13349$12l&&U
     (condition-predicate g$6068$13063$12l&&U))
   (g$&lexical-rtd$13071$12l&&U
     g$&lexical-rtd$13350$12l&&U
     g$6068$13063$12l&&U)
   (g$&lexical-rcd$13072$12l&&U
     g$&lexical-rcd$13351$12l&&U
     g$6069$13065$12l&&U)
   (g$6081$13075$12l&&U
     g$6081$13352$12l&&U
     (make-record-type-descriptor
       '&syntax
       g$5986$12997$12l&&U
       'g$6084$12l&&U
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6083$13076$12l&&U g$6083$13353$12l&&U '#f)
   (g$6082$13077$12l&&U
     g$6082$13354$12l&&U
     (make-record-constructor-descriptor
       g$6081$13075$12l&&U
       g$5987$12999$12l&&U
       g$6083$13076$12l&&U))
   (g$p?$13080$12l&&U
     g$p?$13355$12l&&U
     (record-predicate g$6081$13075$12l&&U))
   (g$make-syntax-violation$13081$12l&&U
     g$make-syntax-violation$13356$12l&&U
     (record-constructor g$6082$13077$12l&&U))
   (g$syntax-violation-form$13082$12l&&U
     g$syntax-violation-form$13357$12l&&U
     (record-accessor g$6081$13075$12l&&U '0))
   (g$syntax-violation-subform$13083$12l&&U
     g$syntax-violation-subform$13358$12l&&U
     (record-accessor g$6081$13075$12l&&U '1))
   (g$syntax-violation?$13084$12l&&U
     g$syntax-violation?$13359$12l&&U
     (condition-predicate g$6081$13075$12l&&U))
   (g$syntax-violation-form$13085$12l&&U
     g$syntax-violation-form$13360$12l&&U
     (condition-accessor
       g$6081$13075$12l&&U
       g$syntax-violation-form$13082$12l&&U))
   (g$syntax-violation-subform$13086$12l&&U
     g$syntax-violation-subform$13361$12l&&U
     (condition-accessor
       g$6081$13075$12l&&U
       g$syntax-violation-subform$13083$12l&&U))
   (g$&syntax-rtd$13087$12l&&U
     g$&syntax-rtd$13362$12l&&U
     g$6081$13075$12l&&U)
   (g$&syntax-rcd$13088$12l&&U
     g$&syntax-rcd$13363$12l&&U
     g$6082$13077$12l&&U)
   (g$6098$13089$12l&&U
     g$6098$13364$12l&&U
     (make-record-type-descriptor
       '&undefined
       g$5986$12997$12l&&U
       'g$6101$12l&&U
       '#f
       '#f
       '#()))
   (g$6100$13090$12l&&U g$6100$13365$12l&&U '#f)
   (g$6099$13091$12l&&U
     g$6099$13366$12l&&U
     (make-record-constructor-descriptor
       g$6098$13089$12l&&U
       g$5987$12999$12l&&U
       g$6100$13090$12l&&U))
   (g$p?$13094$12l&&U
     g$p?$13367$12l&&U
     (record-predicate g$6098$13089$12l&&U))
   (g$make-undefined-violation$13095$12l&&U
     g$make-undefined-violation$13368$12l&&U
     (record-constructor g$6099$13091$12l&&U))
   (g$undefined-violation?$13096$12l&&U
     g$undefined-violation?$13369$12l&&U
     (condition-predicate g$6098$13089$12l&&U))
   (g$&undefined-rtd$13097$12l&&U
     g$&undefined-rtd$13370$12l&&U
     g$6098$13089$12l&&U)
   (g$&undefined-rcd$13098$12l&&U
     g$&undefined-rcd$13371$12l&&U
     g$6099$13091$12l&&U)
   (g$6111$13099$12l&&U
     g$6111$13372$12l&&U
     (make-record-type-descriptor
       '&i/o
       g$5973$12987$12l&&U
       'g$6114$12l&&U
       '#f
       '#f
       '#()))
   (g$6113$13100$12l&&U g$6113$13373$12l&&U '#f)
   (g$6112$13101$12l&&U
     g$6112$13374$12l&&U
     (make-record-constructor-descriptor
       g$6111$13099$12l&&U
       g$5974$12989$12l&&U
       g$6113$13100$12l&&U))
   (g$p?$13104$12l&&U
     g$p?$13375$12l&&U
     (record-predicate g$6111$13099$12l&&U))
   (g$make-i/o-error$13105$12l&&U
     g$make-i/o-error$13376$12l&&U
     (record-constructor g$6112$13101$12l&&U))
   (g$i/o-error?$13106$12l&&U
     g$i/o-error?$13377$12l&&U
     (condition-predicate g$6111$13099$12l&&U))
   (g$&i/o-rtd$13107$12l&&U g$&i/o-rtd$13378$12l&&U g$6111$13099$12l&&U)
   (g$&i/o-rcd$13108$12l&&U g$&i/o-rcd$13379$12l&&U g$6112$13101$12l&&U)
   (g$6124$13109$12l&&U
     g$6124$13380$12l&&U
     (make-record-type-descriptor
       '&i/o-read
       g$6111$13099$12l&&U
       'g$6127$12l&&U
       '#f
       '#f
       '#()))
   (g$6126$13110$12l&&U g$6126$13381$12l&&U '#f)
   (g$6125$13111$12l&&U
     g$6125$13382$12l&&U
     (make-record-constructor-descriptor
       g$6124$13109$12l&&U
       g$6112$13101$12l&&U
       g$6126$13110$12l&&U))
   (g$p?$13114$12l&&U
     g$p?$13383$12l&&U
     (record-predicate g$6124$13109$12l&&U))
   (g$make-i/o-read-error$13115$12l&&U
     g$make-i/o-read-error$13384$12l&&U
     (record-constructor g$6125$13111$12l&&U))
   (g$i/o-read-error?$13116$12l&&U
     g$i/o-read-error?$13385$12l&&U
     (condition-predicate g$6124$13109$12l&&U))
   (g$&i/o-read-rtd$13117$12l&&U
     g$&i/o-read-rtd$13386$12l&&U
     g$6124$13109$12l&&U)
   (g$&i/o-read-rcd$13118$12l&&U
     g$&i/o-read-rcd$13387$12l&&U
     g$6125$13111$12l&&U)
   (g$6137$13119$12l&&U
     g$6137$13388$12l&&U
     (make-record-type-descriptor
       '&i/o-write
       g$6111$13099$12l&&U
       'g$6140$12l&&U
       '#f
       '#f
       '#()))
   (g$6139$13120$12l&&U g$6139$13389$12l&&U '#f)
   (g$6138$13121$12l&&U
     g$6138$13390$12l&&U
     (make-record-constructor-descriptor
       g$6137$13119$12l&&U
       g$6112$13101$12l&&U
       g$6139$13120$12l&&U))
   (g$p?$13124$12l&&U
     g$p?$13391$12l&&U
     (record-predicate g$6137$13119$12l&&U))
   (g$make-i/o-write-error$13125$12l&&U
     g$make-i/o-write-error$13392$12l&&U
     (record-constructor g$6138$13121$12l&&U))
   (g$i/o-write-error?$13126$12l&&U
     g$i/o-write-error?$13393$12l&&U
     (condition-predicate g$6137$13119$12l&&U))
   (g$&i/o-write-rtd$13127$12l&&U
     g$&i/o-write-rtd$13394$12l&&U
     g$6137$13119$12l&&U)
   (g$&i/o-write-rcd$13128$12l&&U
     g$&i/o-write-rcd$13395$12l&&U
     g$6138$13121$12l&&U)
   (g$6150$13130$12l&&U
     g$6150$13396$12l&&U
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$6111$13099$12l&&U
       'g$6153$12l&&U
       '#f
       '#f
       '#((immutable position))))
   (g$6152$13131$12l&&U g$6152$13397$12l&&U '#f)
   (g$6151$13132$12l&&U
     g$6151$13398$12l&&U
     (make-record-constructor-descriptor
       g$6150$13130$12l&&U
       g$6112$13101$12l&&U
       g$6152$13131$12l&&U))
   (g$p?$13135$12l&&U
     g$p?$13399$12l&&U
     (record-predicate g$6150$13130$12l&&U))
   (g$make-i/o-invalid-position-error$13136$12l&&U
     g$make-i/o-invalid-position-error$13400$12l&&U
     (record-constructor g$6151$13132$12l&&U))
   (g$i/o-error-position$13137$12l&&U
     g$i/o-error-position$13401$12l&&U
     (record-accessor g$6150$13130$12l&&U '0))
   (g$i/o-invalid-position-error?$13138$12l&&U
     g$i/o-invalid-position-error?$13402$12l&&U
     (condition-predicate g$6150$13130$12l&&U))
   (g$i/o-error-position$13139$12l&&U
     g$i/o-error-position$13403$12l&&U
     (condition-accessor
       g$6150$13130$12l&&U
       g$i/o-error-position$13137$12l&&U))
   (g$&i/o-invalid-position-rtd$13140$12l&&U
     g$&i/o-invalid-position-rtd$13404$12l&&U
     g$6150$13130$12l&&U)
   (g$&i/o-invalid-position-rcd$13141$12l&&U
     g$&i/o-invalid-position-rcd$13405$12l&&U
     g$6151$13132$12l&&U)
   (g$6165$13143$12l&&U
     g$6165$13406$12l&&U
     (make-record-type-descriptor
       '&i/o-filename
       g$6111$13099$12l&&U
       'g$6168$12l&&U
       '#f
       '#f
       '#((immutable filename))))
   (g$6167$13144$12l&&U g$6167$13407$12l&&U '#f)
   (g$6166$13145$12l&&U
     g$6166$13408$12l&&U
     (make-record-constructor-descriptor
       g$6165$13143$12l&&U
       g$6112$13101$12l&&U
       g$6167$13144$12l&&U))
   (g$p?$13148$12l&&U
     g$p?$13409$12l&&U
     (record-predicate g$6165$13143$12l&&U))
   (g$make-i/o-filename-error$13149$12l&&U
     g$make-i/o-filename-error$13410$12l&&U
     (record-constructor g$6166$13145$12l&&U))
   (g$i/o-error-filename$13150$12l&&U
     g$i/o-error-filename$13411$12l&&U
     (record-accessor g$6165$13143$12l&&U '0))
   (g$i/o-filename-error?$13151$12l&&U
     g$i/o-filename-error?$13412$12l&&U
     (condition-predicate g$6165$13143$12l&&U))
   (g$i/o-error-filename$13152$12l&&U
     g$i/o-error-filename$13413$12l&&U
     (condition-accessor
       g$6165$13143$12l&&U
       g$i/o-error-filename$13150$12l&&U))
   (g$&i/o-filename-rtd$13153$12l&&U
     g$&i/o-filename-rtd$13414$12l&&U
     g$6165$13143$12l&&U)
   (g$&i/o-filename-rcd$13154$12l&&U
     g$&i/o-filename-rcd$13415$12l&&U
     g$6166$13145$12l&&U)
   (g$6180$13155$12l&&U
     g$6180$13416$12l&&U
     (make-record-type-descriptor
       '&i/o-file-protection
       g$6165$13143$12l&&U
       'g$6183$12l&&U
       '#f
       '#f
       '#()))
   (g$6182$13156$12l&&U g$6182$13417$12l&&U '#f)
   (g$6181$13157$12l&&U
     g$6181$13418$12l&&U
     (make-record-constructor-descriptor
       g$6180$13155$12l&&U
       g$6166$13145$12l&&U
       g$6182$13156$12l&&U))
   (g$p?$13160$12l&&U
     g$p?$13419$12l&&U
     (record-predicate g$6180$13155$12l&&U))
   (g$make-i/o-file-protection-error$13161$12l&&U
     g$make-i/o-file-protection-error$13420$12l&&U
     (record-constructor g$6181$13157$12l&&U))
   (g$i/o-file-protection-error?$13162$12l&&U
     g$i/o-file-protection-error?$13421$12l&&U
     (condition-predicate g$6180$13155$12l&&U))
   (g$&i/o-file-protection-rtd$13163$12l&&U
     g$&i/o-file-protection-rtd$13422$12l&&U
     g$6180$13155$12l&&U)
   (g$&i/o-file-protection-rcd$13164$12l&&U
     g$&i/o-file-protection-rcd$13423$12l&&U
     g$6181$13157$12l&&U)
   (g$6193$13165$12l&&U
     g$6193$13424$12l&&U
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$6180$13155$12l&&U
       'g$6196$12l&&U
       '#f
       '#f
       '#()))
   (g$6195$13166$12l&&U g$6195$13425$12l&&U '#f)
   (g$6194$13167$12l&&U
     g$6194$13426$12l&&U
     (make-record-constructor-descriptor
       g$6193$13165$12l&&U
       g$6181$13157$12l&&U
       g$6195$13166$12l&&U))
   (g$p?$13170$12l&&U
     g$p?$13427$12l&&U
     (record-predicate g$6193$13165$12l&&U))
   (g$make-i/o-file-is-read-only-error$13171$12l&&U
     g$make-i/o-file-is-read-only-error$13428$12l&&U
     (record-constructor g$6194$13167$12l&&U))
   (g$i/o-file-is-read-only-error?$13172$12l&&U
     g$i/o-file-is-read-only-error?$13429$12l&&U
     (condition-predicate g$6193$13165$12l&&U))
   (g$&i/o-file-is-read-only-rtd$13173$12l&&U
     g$&i/o-file-is-read-only-rtd$13430$12l&&U
     g$6193$13165$12l&&U)
   (g$&i/o-file-is-read-only-rcd$13174$12l&&U
     g$&i/o-file-is-read-only-rcd$13431$12l&&U
     g$6194$13167$12l&&U)
   (g$6206$13175$12l&&U
     g$6206$13432$12l&&U
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$6165$13143$12l&&U
       'g$6209$12l&&U
       '#f
       '#f
       '#()))
   (g$6208$13176$12l&&U g$6208$13433$12l&&U '#f)
   (g$6207$13177$12l&&U
     g$6207$13434$12l&&U
     (make-record-constructor-descriptor
       g$6206$13175$12l&&U
       g$6166$13145$12l&&U
       g$6208$13176$12l&&U))
   (g$p?$13180$12l&&U
     g$p?$13435$12l&&U
     (record-predicate g$6206$13175$12l&&U))
   (g$make-i/o-file-already-exists-error$13181$12l&&U
     g$make-i/o-file-already-exists-error$13436$12l&&U
     (record-constructor g$6207$13177$12l&&U))
   (g$i/o-file-already-exists-error?$13182$12l&&U
     g$i/o-file-already-exists-error?$13437$12l&&U
     (condition-predicate g$6206$13175$12l&&U))
   (g$&i/o-file-already-exists-rtd$13183$12l&&U
     g$&i/o-file-already-exists-rtd$13438$12l&&U
     g$6206$13175$12l&&U)
   (g$&i/o-file-already-exists-rcd$13184$12l&&U
     g$&i/o-file-already-exists-rcd$13439$12l&&U
     g$6207$13177$12l&&U)
   (g$6219$13185$12l&&U
     g$6219$13440$12l&&U
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$6165$13143$12l&&U
       'g$6222$12l&&U
       '#f
       '#f
       '#()))
   (g$6221$13186$12l&&U g$6221$13441$12l&&U '#f)
   (g$6220$13187$12l&&U
     g$6220$13442$12l&&U
     (make-record-constructor-descriptor
       g$6219$13185$12l&&U
       g$6166$13145$12l&&U
       g$6221$13186$12l&&U))
   (g$p?$13190$12l&&U
     g$p?$13443$12l&&U
     (record-predicate g$6219$13185$12l&&U))
   (g$make-i/o-file-does-not-exist-error$13191$12l&&U
     g$make-i/o-file-does-not-exist-error$13444$12l&&U
     (record-constructor g$6220$13187$12l&&U))
   (g$i/o-file-does-not-exist-error?$13192$12l&&U
     g$i/o-file-does-not-exist-error?$13445$12l&&U
     (condition-predicate g$6219$13185$12l&&U))
   (g$&i/o-file-does-not-exist-rtd$13193$12l&&U
     g$&i/o-file-does-not-exist-rtd$13446$12l&&U
     g$6219$13185$12l&&U)
   (g$&i/o-file-does-not-exist-rcd$13194$12l&&U
     g$&i/o-file-does-not-exist-rcd$13447$12l&&U
     g$6220$13187$12l&&U)
   (g$6232$13196$12l&&U
     g$6232$13448$12l&&U
     (make-record-type-descriptor
       '&i/o-port
       g$6111$13099$12l&&U
       'g$6235$12l&&U
       '#f
       '#f
       '#((immutable port))))
   (g$6234$13197$12l&&U g$6234$13449$12l&&U '#f)
   (g$6233$13198$12l&&U
     g$6233$13450$12l&&U
     (make-record-constructor-descriptor
       g$6232$13196$12l&&U
       g$6112$13101$12l&&U
       g$6234$13197$12l&&U))
   (g$p?$13201$12l&&U
     g$p?$13451$12l&&U
     (record-predicate g$6232$13196$12l&&U))
   (g$make-i/o-port-error$13202$12l&&U
     g$make-i/o-port-error$13452$12l&&U
     (record-constructor g$6233$13198$12l&&U))
   (g$i/o-error-port$13203$12l&&U
     g$i/o-error-port$13453$12l&&U
     (record-accessor g$6232$13196$12l&&U '0))
   (g$i/o-port-error?$13204$12l&&U
     g$i/o-port-error?$13454$12l&&U
     (condition-predicate g$6232$13196$12l&&U))
   (g$i/o-error-port$13205$12l&&U
     g$i/o-error-port$13455$12l&&U
     (condition-accessor
       g$6232$13196$12l&&U
       g$i/o-error-port$13203$12l&&U))
   (g$&i/o-port-rtd$13206$12l&&U
     g$&i/o-port-rtd$13456$12l&&U
     g$6232$13196$12l&&U)
   (g$&i/o-port-rcd$13207$12l&&U
     g$&i/o-port-rcd$13457$12l&&U
     g$6233$13198$12l&&U)
   (g$6247$13208$12l&&U
     g$6247$13458$12l&&U
     (make-record-type-descriptor
       '&i/o-decoding
       g$6232$13196$12l&&U
       'g$6250$12l&&U
       '#f
       '#f
       '#()))
   (g$6249$13209$12l&&U g$6249$13459$12l&&U '#f)
   (g$6248$13210$12l&&U
     g$6248$13460$12l&&U
     (make-record-constructor-descriptor
       g$6247$13208$12l&&U
       g$6233$13198$12l&&U
       g$6249$13209$12l&&U))
   (g$p?$13213$12l&&U
     g$p?$13461$12l&&U
     (record-predicate g$6247$13208$12l&&U))
   (g$make-i/o-decoding-error$13214$12l&&U
     g$make-i/o-decoding-error$13462$12l&&U
     (record-constructor g$6248$13210$12l&&U))
   (g$i/o-decoding-error?$13215$12l&&U
     g$i/o-decoding-error?$13463$12l&&U
     (condition-predicate g$6247$13208$12l&&U))
   (g$&i/o-decoding-rtd$13216$12l&&U
     g$&i/o-decoding-rtd$13464$12l&&U
     g$6247$13208$12l&&U)
   (g$&i/o-decoding-rcd$13217$12l&&U
     g$&i/o-decoding-rcd$13465$12l&&U
     g$6248$13210$12l&&U)
   (g$6260$13219$12l&&U
     g$6260$13466$12l&&U
     (make-record-type-descriptor
       '&i/o-encoding
       g$6232$13196$12l&&U
       'g$6263$12l&&U
       '#f
       '#f
       '#((immutable char))))
   (g$6262$13220$12l&&U g$6262$13467$12l&&U '#f)
   (g$6261$13221$12l&&U
     g$6261$13468$12l&&U
     (make-record-constructor-descriptor
       g$6260$13219$12l&&U
       g$6233$13198$12l&&U
       g$6262$13220$12l&&U))
   (g$p?$13224$12l&&U
     g$p?$13469$12l&&U
     (record-predicate g$6260$13219$12l&&U))
   (g$make-i/o-encoding-error$13225$12l&&U
     g$make-i/o-encoding-error$13470$12l&&U
     (record-constructor g$6261$13221$12l&&U))
   (g$i/o-encoding-error-char$13226$12l&&U
     g$i/o-encoding-error-char$13471$12l&&U
     (record-accessor g$6260$13219$12l&&U '0))
   (g$i/o-encoding-error?$13227$12l&&U
     g$i/o-encoding-error?$13472$12l&&U
     (condition-predicate g$6260$13219$12l&&U))
   (g$i/o-encoding-error-char$13228$12l&&U
     g$i/o-encoding-error-char$13473$12l&&U
     (condition-accessor
       g$6260$13219$12l&&U
       g$i/o-encoding-error-char$13226$12l&&U))
   (g$&i/o-encoding-rtd$13229$12l&&U
     g$&i/o-encoding-rtd$13474$12l&&U
     g$6260$13219$12l&&U)
   (g$&i/o-encoding-rcd$13230$12l&&U
     g$&i/o-encoding-rcd$13475$12l&&U
     g$6261$13221$12l&&U)
   (g$6275$13231$12l&&U
     g$6275$13476$12l&&U
     (make-record-type-descriptor
       '&no-infinities
       g$6055$13053$12l&&U
       'g$6278$12l&&U
       '#f
       '#f
       '#()))
   (g$6277$13232$12l&&U g$6277$13477$12l&&U '#f)
   (g$6276$13233$12l&&U
     g$6276$13478$12l&&U
     (make-record-constructor-descriptor
       g$6275$13231$12l&&U
       g$6056$13055$12l&&U
       g$6277$13232$12l&&U))
   (g$p?$13236$12l&&U
     g$p?$13479$12l&&U
     (record-predicate g$6275$13231$12l&&U))
   (g$make-no-infinities-violation$13237$12l&&U
     g$make-no-infinities-violation$13480$12l&&U
     (record-constructor g$6276$13233$12l&&U))
   (g$no-infinities-violation?$13238$12l&&U
     g$no-infinities-violation?$13481$12l&&U
     (condition-predicate g$6275$13231$12l&&U))
   (g$&no-infinities-rtd$13239$12l&&U
     g$&no-infinities-rtd$13482$12l&&U
     g$6275$13231$12l&&U)
   (g$&no-infinities-rcd$13240$12l&&U
     g$&no-infinities-rcd$13483$12l&&U
     g$6276$13233$12l&&U)
   (g$6288$13241$12l&&U
     g$6288$13484$12l&&U
     (make-record-type-descriptor
       '&no-nans
       g$6055$13053$12l&&U
       'g$6291$12l&&U
       '#f
       '#f
       '#()))
   (g$6290$13242$12l&&U g$6290$13485$12l&&U '#f)
   (g$6289$13243$12l&&U
     g$6289$13486$12l&&U
     (make-record-constructor-descriptor
       g$6288$13241$12l&&U
       g$6056$13055$12l&&U
       g$6290$13242$12l&&U))
   (g$p?$13246$12l&&U
     g$p?$13487$12l&&U
     (record-predicate g$6288$13241$12l&&U))
   (g$make-no-nans-violation$13247$12l&&U
     g$make-no-nans-violation$13488$12l&&U
     (record-constructor g$6289$13243$12l&&U))
   (g$no-nans-violation?$13248$12l&&U
     g$no-nans-violation?$13489$12l&&U
     (condition-predicate g$6288$13241$12l&&U))
   (g$&no-nans-rtd$13249$12l&&U
     g$&no-nans-rtd$13490$12l&&U
     g$6288$13241$12l&&U)
   (g$&no-nans-rcd$13250$12l&&U
     g$&no-nans-rcd$13491$12l&&U
     g$6289$13243$12l&&U))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$13492$12l&&U
     g$append!$13498$12l&&U
     (case-lambda
       ((g$a$13493$12l&&U . g$b$13494$12l&&U)
        (if (null? g$a$13493$12l&&U)
          g$b$13494$12l&&U
          (if (null? g$b$13494$12l&&U)
            g$a$13493$12l&&U
            (begin
              ((letrec ((g$f$13495$12l&&U
                          (case-lambda
                            ((g$a$13496$12l&&U)
                             ((case-lambda
                                ((g$n$13497$12l&&U)
                                 (if (null? g$n$13497$12l&&U)
                                   (set-cdr!
                                     g$a$13496$12l&&U
                                     g$b$13494$12l&&U)
                                   (g$f$13495$12l&&U
                                     g$n$13497$12l&&U))))
                              (cdr g$a$13496$12l&&U))))))
                 g$f$13495$12l&&U)
               g$a$13493$12l&&U)
              g$a$13493$12l&&U)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$13499$12l&&U g$inexact->exact$13519$12l&&U exact)
   (g$exact->inexact$13500$12l&&U g$exact->inexact$13520$12l&&U inexact)
   (g$sign$13501$12l&&U
     g$sign$13521$12l&&U
     (case-lambda
       ((g$n$13507$12l&&U)
        (if (> g$n$13507$12l&&U '0)
          '1
          (if (< g$n$13507$12l&&U '0) '-1 '0)))))
   (g$quotient$13502$12l&&U
     g$quotient$13522$12l&&U
     (case-lambda
       ((g$n1$13508$12l&&U g$n2$13509$12l&&U)
        (begin
          (if (not (integer-valued? g$n1$13508$12l&&U))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n1$13508$12l&&U)
            (void))
          (if (not (integer-valued? g$n2$13509$12l&&U))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n2$13509$12l&&U)
            (void))
          (* (g$sign$13501$12l&&U g$n1$13508$12l&&U)
             (g$sign$13501$12l&&U g$n2$13509$12l&&U)
             (div (abs g$n1$13508$12l&&U) (abs g$n2$13509$12l&&U)))))))
   (g$remainder$13503$12l&&U
     g$remainder$13523$12l&&U
     (case-lambda
       ((g$n1$13510$12l&&U g$n2$13511$12l&&U)
        (begin
          (if (not (integer-valued? g$n1$13510$12l&&U))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n1$13510$12l&&U)
            (void))
          (if (not (integer-valued? g$n2$13511$12l&&U))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n2$13511$12l&&U)
            (void))
          (* (g$sign$13501$12l&&U g$n1$13510$12l&&U)
             (g$mod$12585$12l&&U
               (abs g$n1$13510$12l&&U)
               (abs g$n2$13511$12l&&U)))))))
   (g$modulo$13504$12l&&U
     g$modulo$13524$12l&&U
     (case-lambda
       ((g$n1$13512$12l&&U g$n2$13513$12l&&U)
        (begin
          (if (not (integer-valued? g$n1$13512$12l&&U))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n1$13512$12l&&U)
            (void))
          (if (not (integer-valued? g$n2$13513$12l&&U))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n2$13513$12l&&U)
            (void))
          (* (g$sign$13501$12l&&U g$n2$13513$12l&&U)
             (g$mod$12585$12l&&U
               (* (g$sign$13501$12l&&U g$n2$13513$12l&&U)
                  g$n1$13512$12l&&U)
               (abs g$n2$13513$12l&&U)))))))
   (g$make-promise$13505$12l&&U
     g$make-promise$13525$12l&&U
     (case-lambda
       ((g$proc$13514$12l&&U)
        ((case-lambda
           ((g$result-ready?$13515$12l&&U g$result$13516$12l&&U)
            (case-lambda
              (()
               (if g$result-ready?$13515$12l&&U
                 g$result$13516$12l&&U
                 ((case-lambda
                    ((g$x$13517$12l&&U)
                     (if g$result-ready?$13515$12l&&U
                       g$result$13516$12l&&U
                       (begin
                         (set! g$result-ready?$13515$12l&&U '#t)
                         (set! g$result$13516$12l&&U g$x$13517$12l&&U)
                         g$result$13516$12l&&U))))
                  (g$proc$13514$12l&&U)))))))
         '#f
         '#f))))
   (g$force$13506$12l&&U
     g$force$13526$12l&&U
     (case-lambda ((g$object$13518$12l&&U) (g$object$13518$12l&&U)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$13527$12l&&U
     g$split$13552$12l&&U
     (case-lambda
       ((g$ls$13531$12l&&U)
        ((letrec ((g$loop$13532$12l&&U
                    (case-lambda
                      ((g$rest$13533$12l&&U
                         g$left$13534$12l&&U
                         g$right$13535$12l&&U)
                       (if (null? g$rest$13533$12l&&U)
                         (cons g$left$13534$12l&&U g$right$13535$12l&&U)
                         (if (null? (cdr g$rest$13533$12l&&U))
                           (cons
                             (cons
                               (car g$rest$13533$12l&&U)
                               g$left$13534$12l&&U)
                             g$right$13535$12l&&U)
                           (g$loop$13532$12l&&U
                             (g$cddr$12599$12l&&U g$rest$13533$12l&&U)
                             (cons
                               (car g$rest$13533$12l&&U)
                               g$left$13534$12l&&U)
                             (cons
                               (g$cadr$12597$12l&&U g$rest$13533$12l&&U)
                               g$right$13535$12l&&U))))))))
           g$loop$13532$12l&&U)
         g$ls$13531$12l&&U
         '()
         '()))))
   (g$reverse-it$13528$12l&&U
     g$reverse-it$13553$12l&&U
     (case-lambda
       ((g$head$13536$12l&&U g$tail$13537$12l&&U)
        (if (null? g$head$13536$12l&&U)
          g$tail$13537$12l&&U
          (g$reverse-it$13528$12l&&U
            (cdr g$head$13536$12l&&U)
            (cons (car g$head$13536$12l&&U) g$tail$13537$12l&&U))))))
   (g$merge$13529$12l&&U
     g$merge$13554$12l&&U
     (case-lambda
       ((g$list-1$13538$12l&&U
          g$list-2$13539$12l&&U
          g$precedes?$13540$12l&&U)
        ((letrec ((g$loop$13541$12l&&U
                    (case-lambda
                      ((g$source-1$13542$12l&&U
                         g$source-2$13543$12l&&U
                         g$so-far$13544$12l&&U)
                       (if (null? g$source-1$13542$12l&&U)
                         (g$reverse-it$13528$12l&&U
                           g$so-far$13544$12l&&U
                           g$source-2$13543$12l&&U)
                         (if (null? g$source-2$13543$12l&&U)
                           (g$reverse-it$13528$12l&&U
                             g$so-far$13544$12l&&U
                             g$source-1$13542$12l&&U)
                           ((case-lambda
                              ((g$car-1$13545$12l&&U
                                 g$car-2$13546$12l&&U)
                               (if (g$precedes?$13540$12l&&U
                                     g$car-2$13546$12l&&U
                                     g$car-1$13545$12l&&U)
                                 (g$loop$13541$12l&&U
                                   g$source-1$13542$12l&&U
                                   (cdr g$source-2$13543$12l&&U)
                                   (cons
                                     g$car-2$13546$12l&&U
                                     g$so-far$13544$12l&&U))
                                 (g$loop$13541$12l&&U
                                   g$source-2$13543$12l&&U
                                   (cdr g$source-1$13542$12l&&U)
                                   (cons
                                     g$car-1$13545$12l&&U
                                     g$so-far$13544$12l&&U)))))
                            (car g$source-1$13542$12l&&U)
                            (car g$source-2$13543$12l&&U))))))))
           g$loop$13541$12l&&U)
         g$list-1$13538$12l&&U
         g$list-2$13539$12l&&U
         '()))))
   (g$list-sort$13530$12l&&U
     g$list-sort$13555$12l&&U
     (case-lambda
       ((g$precedes?$13547$12l&&U g$ls$13548$12l&&U)
        (if (null? g$ls$13548$12l&&U)
          '()
          ((letrec ((g$helper$13549$12l&&U
                      (case-lambda
                        ((g$piece$13550$12l&&U)
                         (if (null? (cdr g$piece$13550$12l&&U))
                           g$piece$13550$12l&&U
                           ((case-lambda
                              ((g$parts$13551$12l&&U)
                               (g$merge$13529$12l&&U
                                 (g$helper$13549$12l&&U
                                   (car g$parts$13551$12l&&U))
                                 (g$helper$13549$12l&&U
                                   (cdr g$parts$13551$12l&&U))
                                 g$precedes?$13547$12l&&U)))
                            (g$split$13527$12l&&U
                              g$piece$13550$12l&&U)))))))
             g$helper$13549$12l&&U)
           g$ls$13548$12l&&U))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$13594$12l&&U
     g$string-ci=?$13700$12l&&U
     (case-lambda
       ((g$a$13646$12l&&U g$b$13647$12l&&U . g$rest$13648$12l&&U)
        (begin
          (if (not (string? g$a$13646$12l&&U))
            (assertion-violation
              'string-ci=?
              '"not a string"
              g$a$13646$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$13649$12l&&U)
               (begin
                 (if (not (string? g$x$13649$12l&&U))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$13649$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$13650$12l&&U)
                     (begin
                       (set! g$a$13646$12l&&U g$x$13649$12l&&U)
                       g$r$13650$12l&&U)))
                  (= (string-ci-compare
                       g$a$13646$12l&&U
                       g$x$13649$12l&&U)
                     '0)))))
            (cons g$b$13647$12l&&U g$rest$13648$12l&&U))))))
   (g$string-ci<?$13595$12l&&U
     g$string-ci<?$13701$12l&&U
     (case-lambda
       ((g$a$13651$12l&&U g$b$13652$12l&&U . g$rest$13653$12l&&U)
        (begin
          (if (not (string? g$a$13651$12l&&U))
            (assertion-violation
              'string-ci<?
              '"not a string"
              g$a$13651$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$13654$12l&&U)
               (begin
                 (if (not (string? g$x$13654$12l&&U))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$13654$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$13655$12l&&U)
                     (begin
                       (set! g$a$13651$12l&&U g$x$13654$12l&&U)
                       g$r$13655$12l&&U)))
                  (< (string-ci-compare
                       g$a$13651$12l&&U
                       g$x$13654$12l&&U)
                     '0)))))
            (cons g$b$13652$12l&&U g$rest$13653$12l&&U))))))
   (g$string-ci>?$13596$12l&&U
     g$string-ci>?$13702$12l&&U
     (case-lambda
       ((g$a$13656$12l&&U g$b$13657$12l&&U . g$rest$13658$12l&&U)
        (begin
          (if (not (string? g$a$13656$12l&&U))
            (assertion-violation
              'string-ci>?
              '"not a string"
              g$a$13656$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$13659$12l&&U)
               (begin
                 (if (not (string? g$x$13659$12l&&U))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$13659$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$13660$12l&&U)
                     (begin
                       (set! g$a$13656$12l&&U g$x$13659$12l&&U)
                       g$r$13660$12l&&U)))
                  (> (string-ci-compare
                       g$a$13656$12l&&U
                       g$x$13659$12l&&U)
                     '0)))))
            (cons g$b$13657$12l&&U g$rest$13658$12l&&U))))))
   (g$string-ci<=?$13597$12l&&U
     g$string-ci<=?$13703$12l&&U
     (case-lambda
       ((g$a$13661$12l&&U g$b$13662$12l&&U . g$rest$13663$12l&&U)
        (begin
          (if (not (string? g$a$13661$12l&&U))
            (assertion-violation
              'string-ci<=?
              '"not a string"
              g$a$13661$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$13664$12l&&U)
               (begin
                 (if (not (string? g$x$13664$12l&&U))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$13664$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$13665$12l&&U)
                     (begin
                       (set! g$a$13661$12l&&U g$x$13664$12l&&U)
                       g$r$13665$12l&&U)))
                  (<= (string-ci-compare
                        g$a$13661$12l&&U
                        g$x$13664$12l&&U)
                      '0)))))
            (cons g$b$13662$12l&&U g$rest$13663$12l&&U))))))
   (g$string-ci>=?$13598$12l&&U
     g$string-ci>=?$13704$12l&&U
     (case-lambda
       ((g$a$13666$12l&&U g$b$13667$12l&&U . g$rest$13668$12l&&U)
        (begin
          (if (not (string? g$a$13666$12l&&U))
            (assertion-violation
              'string-ci>=?
              '"not a string"
              g$a$13666$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$13669$12l&&U)
               (begin
                 (if (not (string? g$x$13669$12l&&U))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$13669$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$13670$12l&&U)
                     (begin
                       (set! g$a$13666$12l&&U g$x$13669$12l&&U)
                       g$r$13670$12l&&U)))
                  (>= (string-ci-compare
                        g$a$13666$12l&&U
                        g$x$13669$12l&&U)
                      '0)))))
            (cons g$b$13667$12l&&U g$rest$13668$12l&&U))))))
   (g$char-ci=?$13637$12l&&U
     g$char-ci=?$13705$12l&&U
     (case-lambda
       ((g$a$13671$12l&&U g$b$13672$12l&&U . g$rest$13673$12l&&U)
        (begin
          (if (not (g$char?$12576$12l&&U g$a$13671$12l&&U))
            (assertion-violation
              'char-ci=?
              '"not a char"
              g$a$13671$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$13674$12l&&U)
               (begin
                 (if (not (g$char?$12576$12l&&U g$x$13674$12l&&U))
                   (assertion-violation
                     'char-ci=?
                     '"not a char"
                     g$x$13674$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$13675$12l&&U)
                     (begin
                       (set! g$a$13671$12l&&U g$x$13674$12l&&U)
                       g$r$13675$12l&&U)))
                  (= (char->integer (char-upcase g$a$13671$12l&&U))
                     (char->integer (char-upcase g$x$13674$12l&&U)))))))
            (cons g$b$13672$12l&&U g$rest$13673$12l&&U))))))
   (g$char-ci<?$13638$12l&&U
     g$char-ci<?$13706$12l&&U
     (case-lambda
       ((g$a$13676$12l&&U g$b$13677$12l&&U . g$rest$13678$12l&&U)
        (begin
          (if (not (g$char?$12576$12l&&U g$a$13676$12l&&U))
            (assertion-violation
              'char-ci<?
              '"not a char"
              g$a$13676$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$13679$12l&&U)
               (begin
                 (if (not (g$char?$12576$12l&&U g$x$13679$12l&&U))
                   (assertion-violation
                     'char-ci<?
                     '"not a char"
                     g$x$13679$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$13680$12l&&U)
                     (begin
                       (set! g$a$13676$12l&&U g$x$13679$12l&&U)
                       g$r$13680$12l&&U)))
                  (< (char->integer (char-upcase g$a$13676$12l&&U))
                     (char->integer (char-upcase g$x$13679$12l&&U)))))))
            (cons g$b$13677$12l&&U g$rest$13678$12l&&U))))))
   (g$char-ci>?$13639$12l&&U
     g$char-ci>?$13707$12l&&U
     (case-lambda
       ((g$a$13681$12l&&U g$b$13682$12l&&U . g$rest$13683$12l&&U)
        (begin
          (if (not (g$char?$12576$12l&&U g$a$13681$12l&&U))
            (assertion-violation
              'char-ci>?
              '"not a char"
              g$a$13681$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$13684$12l&&U)
               (begin
                 (if (not (g$char?$12576$12l&&U g$x$13684$12l&&U))
                   (assertion-violation
                     'char-ci>?
                     '"not a char"
                     g$x$13684$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$13685$12l&&U)
                     (begin
                       (set! g$a$13681$12l&&U g$x$13684$12l&&U)
                       g$r$13685$12l&&U)))
                  (> (char->integer (char-upcase g$a$13681$12l&&U))
                     (char->integer (char-upcase g$x$13684$12l&&U)))))))
            (cons g$b$13682$12l&&U g$rest$13683$12l&&U))))))
   (g$char-ci<=?$13640$12l&&U
     g$char-ci<=?$13708$12l&&U
     (case-lambda
       ((g$a$13686$12l&&U g$b$13687$12l&&U . g$rest$13688$12l&&U)
        (begin
          (if (not (g$char?$12576$12l&&U g$a$13686$12l&&U))
            (assertion-violation
              'char-ci<=?
              '"not a char"
              g$a$13686$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$13689$12l&&U)
               (begin
                 (if (not (g$char?$12576$12l&&U g$x$13689$12l&&U))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$13689$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$13690$12l&&U)
                     (begin
                       (set! g$a$13686$12l&&U g$x$13689$12l&&U)
                       g$r$13690$12l&&U)))
                  (<= (char->integer (char-upcase g$a$13686$12l&&U))
                      (char->integer
                        (char-upcase g$x$13689$12l&&U)))))))
            (cons g$b$13687$12l&&U g$rest$13688$12l&&U))))))
   (g$char-ci>=?$13641$12l&&U
     g$char-ci>=?$13709$12l&&U
     (case-lambda
       ((g$a$13691$12l&&U g$b$13692$12l&&U . g$rest$13693$12l&&U)
        (begin
          (if (not (g$char?$12576$12l&&U g$a$13691$12l&&U))
            (assertion-violation
              'char-ci>=?
              '"not a char"
              g$a$13691$12l&&U)
            (void))
          (g$for-all$11833$12l&&U
            (case-lambda
              ((g$x$13694$12l&&U)
               (begin
                 (if (not (g$char?$12576$12l&&U g$x$13694$12l&&U))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$13694$12l&&U)
                   (void))
                 ((case-lambda
                    ((g$r$13695$12l&&U)
                     (begin
                       (set! g$a$13691$12l&&U g$x$13694$12l&&U)
                       g$r$13695$12l&&U)))
                  (>= (char->integer (char-upcase g$a$13691$12l&&U))
                      (char->integer
                        (char-upcase g$x$13694$12l&&U)))))))
            (cons g$b$13692$12l&&U g$rest$13693$12l&&U))))))
   (g$string-normalize-nfc$13642$12l&&U
     g$string-normalize-nfc$13710$12l&&U
     (case-lambda
       ((g$s$13696$12l&&U) (string-normalize g$s$13696$12l&&U 'formc))))
   (g$string-normalize-nfd$13643$12l&&U
     g$string-normalize-nfd$13711$12l&&U
     (case-lambda
       ((g$s$13697$12l&&U) (string-normalize g$s$13697$12l&&U 'formd))))
   (g$string-normalize-nfkc$13644$12l&&U
     g$string-normalize-nfkc$13712$12l&&U
     (case-lambda
       ((g$s$13698$12l&&U)
        (string-normalize g$s$13698$12l&&U 'formkc))))
   (g$string-normalize-nfkd$13645$12l&&U
     g$string-normalize-nfkd$13713$12l&&U
     (case-lambda
       ((g$s$13699$12l&&U)
        (string-normalize g$s$13699$12l&&U 'formkd)))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$13714$12l&&U
     g$bitwise-if$13745$12l&&U
     (case-lambda
       ((g$ei1$13721$12l&&U g$ei2$13722$12l&&U g$ei3$13723$12l&&U)
        (bitwise-ior
          (bitwise-and g$ei1$13721$12l&&U g$ei2$13722$12l&&U)
          (bitwise-and
            (bitwise-not g$ei1$13721$12l&&U)
            g$ei3$13723$12l&&U)))))
   (g$bitwise-copy-bit$13715$12l&&U
     g$bitwise-copy-bit$13746$12l&&U
     (case-lambda
       ((g$ei1$13724$12l&&U g$ei2$13725$12l&&U g$ei3$13726$12l&&U)
        (g$bitwise-if$13714$12l&&U
          (g$bitwise-arithmetic-shift-left$13718$12l&&U
            '1
            g$ei2$13725$12l&&U)
          (g$bitwise-arithmetic-shift-left$13718$12l&&U
            g$ei3$13726$12l&&U
            g$ei2$13725$12l&&U)
          g$ei1$13724$12l&&U))))
   (g$bitwise-bit-field$13716$12l&&U
     g$bitwise-bit-field$13747$12l&&U
     (case-lambda
       ((g$ei1$13727$12l&&U g$ei2$13728$12l&&U g$ei3$13729$12l&&U)
        (g$bitwise-arithmetic-shift-right$13719$12l&&U
          (bitwise-and
            g$ei1$13727$12l&&U
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$13718$12l&&U
                '-1
                g$ei3$13729$12l&&U)))
          g$ei2$13728$12l&&U))))
   (g$bitwise-copy-bit-field$13717$12l&&U
     g$bitwise-copy-bit-field$13748$12l&&U
     (case-lambda
       ((g$to$13730$12l&&U
          g$start$13731$12l&&U
          g$end$13732$12l&&U
          g$from$13733$12l&&U)
        (g$bitwise-if$13714$12l&&U
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$13718$12l&&U
              '-1
              g$start$13731$12l&&U)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$13718$12l&&U
                '-1
                g$end$13732$12l&&U)))
          (g$bitwise-arithmetic-shift-left$13718$12l&&U
            g$from$13733$12l&&U
            g$start$13731$12l&&U)
          g$to$13730$12l&&U))))
   (g$bitwise-arithmetic-shift-left$13718$12l&&U
     g$bitwise-arithmetic-shift-left$13749$12l&&U
     (case-lambda
       ((g$ei1$13734$12l&&U g$ei2$13735$12l&&U)
        (bitwise-arithmetic-shift
          g$ei1$13734$12l&&U
          g$ei2$13735$12l&&U))))
   (g$bitwise-arithmetic-shift-right$13719$12l&&U
     g$bitwise-arithmetic-shift-right$13750$12l&&U
     (case-lambda
       ((g$ei1$13736$12l&&U g$ei2$13737$12l&&U)
        (bitwise-arithmetic-shift
          g$ei1$13736$12l&&U
          (- g$ei2$13737$12l&&U)))))
   (g$bitwise-rotate-bit-field$13720$12l&&U
     g$bitwise-rotate-bit-field$13751$12l&&U
     (case-lambda
       ((g$n$13738$12l&&U
          g$start$13739$12l&&U
          g$end$13740$12l&&U
          g$count$13741$12l&&U)
        ((case-lambda
           ((g$width$13742$12l&&U)
            (if (g$positive?$12624$12l&&U g$width$13742$12l&&U)
              ((case-lambda
                 ((g$count$13743$12l&&U g$field$13744$12l&&U)
                  (g$bitwise-copy-bit-field$13717$12l&&U
                    g$n$13738$12l&&U
                    g$start$13739$12l&&U
                    g$end$13740$12l&&U
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$13718$12l&&U
                        g$field$13744$12l&&U
                        g$count$13743$12l&&U)
                      (g$bitwise-arithmetic-shift-right$13719$12l&&U
                        g$field$13744$12l&&U
                        (- g$width$13742$12l&&U
                           g$count$13743$12l&&U))))))
               (g$mod$12585$12l&&U
                 g$count$13741$12l&&U
                 g$width$13742$12l&&U)
               (g$bitwise-bit-field$13716$12l&&U
                 g$n$13738$12l&&U
                 g$start$13739$12l&&U
                 g$end$13740$12l&&U))
              g$n$13738$12l&&U)))
         (- g$end$13740$12l&&U g$start$13739$12l&&U))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$greatest-fixnum$13752$12l&&U
     g$greatest-fixnum$15984$12l&&U
     (case-lambda (() '2147483647)))
   (g$least-fixnum$13753$12l&&U
     g$least-fixnum$15985$12l&&U
     (case-lambda (() '-2147483648)))
   (g$fx+$13859$12l&&U
     g$fx+$15986$12l&&U
     (case-lambda
       ((g$x1$14254$12l&&U g$x2$14255$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14254$12l&&U))
            (assertion-violation 'fx+ '"not a fixnum" g$x1$14254$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14255$12l&&U))
            (assertion-violation 'fx+ '"not a fixnum" g$x2$14255$12l&&U)
            (void))
          ((case-lambda
             (()
              ($try
                ($fx+ g$x1$14254$12l&&U g$x2$14255$12l&&U)
                (g$overflow-error$13862$12l&&U '#f)))))))))
   (g$fx*$13860$12l&&U
     g$fx*$15987$12l&&U
     (case-lambda
       ((g$x1$14256$12l&&U g$x2$14257$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14256$12l&&U))
            (assertion-violation 'fx* '"not a fixnum" g$x1$14256$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14257$12l&&U))
            (assertion-violation 'fx* '"not a fixnum" g$x2$14257$12l&&U)
            (void))
          ((case-lambda
             (()
              ($try
                ($fx* g$x1$14256$12l&&U g$x2$14257$12l&&U)
                (g$overflow-error$13862$12l&&U '#f)))))))))
   (g$fx-$13861$12l&&U
     g$fx-$15988$12l&&U
     (case-lambda
       ((g$x1$14258$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14258$12l&&U))
            (assertion-violation 'fx- '"not a fixnum" g$x1$14258$12l&&U)
            (void))
          (if ($fx=? (g$least-fixnum$13753$12l&&U) g$x1$14258$12l&&U)
            (g$overflow-error$13862$12l&&U 'fx- g$x1$14258$12l&&U)
            (void))
          ($$fx- g$x1$14258$12l&&U)))
       ((g$x1$14259$12l&&U g$x2$14260$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14259$12l&&U))
            (assertion-violation 'fx- '"not a fixnum" g$x1$14259$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14260$12l&&U))
            (assertion-violation 'fx- '"not a fixnum" g$x2$14260$12l&&U)
            (void))
          ($try
            ($fx- g$x1$14259$12l&&U g$x2$14260$12l&&U)
            (g$overflow-error$13862$12l&&U '#f))))))
   (g$overflow-error$13862$12l&&U
     g$overflow-error$15989$12l&&U
     (case-lambda
       ((g$name$14261$12l&&U . g$irritants$14262$12l&&U)
        (raise
          (condition
            (g$make-implementation-restriction-violation$13340$12l&&U)
            (g$make-who-condition$13322$12l&&U g$name$14261$12l&&U)
            (g$make-message-condition$13262$12l&&U
              '"arithmetic overflow")
            (g$make-irritants-condition$13312$12l&&U
              g$irritants$14262$12l&&U))))))
   (g$residual-fxarithmetic-shift*$13878$12l&&U
     g$residual-fxarithmetic-shift*$15990$12l&&U
     (case-lambda
       ((g$x$14283$12l&&U g$k$14284$12l&&U)
        (if ($fx=? g$k$14284$12l&&U '0)
          g$x$14283$12l&&U
          (if ($fx<? g$k$14284$12l&&U '0)
            ($fxarithmetic-shift-right
              g$x$14283$12l&&U
              ($$fx- g$k$14284$12l&&U))
            ((case-lambda
               ((g$i$14285$12l&&U)
                (begin
                  (if ($fx>?
                        (clr-call-internal
                          'System.Math
                          '"abs(int32)"
                          '()
                          g$x$14283$12l&&U)
                        (clr-call-internal
                          'System.Math
                          '"abs(int32)"
                          '()
                          g$i$14285$12l&&U))
                    (g$overflow-error$13862$12l&&U
                      'fxarithmetic-shift
                      g$x$14283$12l&&U
                      g$k$14284$12l&&U)
                    (void))
                  g$i$14285$12l&&U)))
             ($fxarithmetic-shift-left
               g$x$14283$12l&&U
               g$k$14284$12l&&U)))))))
   (g$fxarithmetic-shift$13879$12l&&U
     g$fxarithmetic-shift$15991$12l&&U
     (case-lambda
       ((g$x$14286$12l&&U g$k$14287$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x$14286$12l&&U))
            (assertion-violation
              'fxarithmetic-shift
              '"not a fixnum"
              g$x$14286$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$k$14287$12l&&U))
            (assertion-violation
              'fxarithmetic-shift
              '"not a fixnum"
              g$k$14287$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x$14308$12l&&U g$k$14309$12l&&U)
                  (if ($fx=? g$k$14309$12l&&U '0)
                    g$x$14308$12l&&U
                    (if ($fx<? g$k$14309$12l&&U '0)
                      ($fxarithmetic-shift-right
                        g$x$14308$12l&&U
                        ($$fx- g$k$14309$12l&&U))
                      ((case-lambda
                         ((g$i$14310$12l&&U)
                          (begin
                            (if ($fx>?
                                  (clr-call-internal
                                    'System.Math
                                    '"abs(int32)"
                                    '()
                                    g$x$14308$12l&&U)
                                  (clr-call-internal
                                    'System.Math
                                    '"abs(int32)"
                                    '()
                                    g$i$14310$12l&&U))
                              (g$overflow-error$13862$12l&&U
                                'fxarithmetic-shift
                                g$x$14308$12l&&U
                                g$k$14309$12l&&U)
                              (void))
                            g$i$14310$12l&&U)))
                       ($fxarithmetic-shift-left
                         g$x$14308$12l&&U
                         g$k$14309$12l&&U))))))
               g$x$14286$12l&&U
               g$k$14287$12l&&U))))))))
   (g$residual-fxbit-count*$13895$12l&&U
     g$residual-fxbit-count*$15992$12l&&U
     (case-lambda
       ((g$x$14331$12l&&U)
        (if ($fx<=? g$x$14331$12l&&U '0)
          ($fxnot
            (g$residual-fxbit-count*$13895$12l&&U
              ($fxnot g$x$14331$12l&&U)))
          ((letrec ((g$f$14332$12l&&U
                      (case-lambda
                        ((g$count$14333$12l&&U g$x$14334$12l&&U)
                         (if ($fx<? '0 g$x$14334$12l&&U)
                           (g$f$14332$12l&&U
                             ($$fx+
                               g$count$14333$12l&&U
                               ($fxand g$x$14334$12l&&U '1))
                             ($fxarithmetic-shift-right
                               g$x$14334$12l&&U
                               '1))
                           g$count$14333$12l&&U)))))
             g$f$14332$12l&&U)
           '0
           g$x$14331$12l&&U)))))
   (g$fxbit-count$13896$12l&&U
     g$fxbit-count$15993$12l&&U
     (case-lambda
       ((g$x$14335$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x$14335$12l&&U))
            (assertion-violation
              'fxbit-count
              '"not a fixnum"
              g$x$14335$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x$14356$12l&&U)
                  (if ($fx<=? g$x$14356$12l&&U '0)
                    ($fxnot
                      (g$residual-fxbit-count*$13895$12l&&U
                        ($fxnot g$x$14356$12l&&U)))
                    ((letrec ((g$f$14357$12l&&U
                                (case-lambda
                                  ((g$count$14358$12l&&U
                                     g$x$14359$12l&&U)
                                   (if ($fx<? '0 g$x$14359$12l&&U)
                                     (g$f$14357$12l&&U
                                       ($$fx+
                                         g$count$14358$12l&&U
                                         ($fxand g$x$14359$12l&&U '1))
                                       ($fxarithmetic-shift-right
                                         g$x$14359$12l&&U
                                         '1))
                                     g$count$14358$12l&&U)))))
                       g$f$14357$12l&&U)
                     '0
                     g$x$14356$12l&&U))))
               g$x$14335$12l&&U))))))))
   (g$residual-fxlength*$13912$12l&&U
     g$residual-fxlength*$15994$12l&&U
     (case-lambda
       ((g$x$14380$12l&&U)
        (if ($fx<? g$x$14380$12l&&U '0)
          (g$residual-fxlength*$13912$12l&&U ($fxnot g$x$14380$12l&&U))
          ((letrec ((g$f$14381$12l&&U
                      (case-lambda
                        ((g$count$14382$12l&&U g$x$14383$12l&&U)
                         (if ($fx<? '0 g$x$14383$12l&&U)
                           (g$f$14381$12l&&U
                             ($$fx+ g$count$14382$12l&&U '1)
                             ($fxarithmetic-shift-right
                               g$x$14383$12l&&U
                               '1))
                           g$count$14382$12l&&U)))))
             g$f$14381$12l&&U)
           '0
           g$x$14380$12l&&U)))))
   (g$fxlength$13913$12l&&U
     g$fxlength$15995$12l&&U
     (case-lambda
       ((g$x$14384$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x$14384$12l&&U))
            (assertion-violation
              'fxlength
              '"not a fixnum"
              g$x$14384$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x$14405$12l&&U)
                  (if ($fx<? g$x$14405$12l&&U '0)
                    (g$residual-fxlength*$13912$12l&&U
                      ($fxnot g$x$14405$12l&&U))
                    ((letrec ((g$f$14406$12l&&U
                                (case-lambda
                                  ((g$count$14407$12l&&U
                                     g$x$14408$12l&&U)
                                   (if ($fx<? '0 g$x$14408$12l&&U)
                                     (g$f$14406$12l&&U
                                       ($$fx+ g$count$14407$12l&&U '1)
                                       ($fxarithmetic-shift-right
                                         g$x$14408$12l&&U
                                         '1))
                                     g$count$14407$12l&&U)))))
                       g$f$14406$12l&&U)
                     '0
                     g$x$14405$12l&&U))))
               g$x$14384$12l&&U))))))))
   (g$fxfirst-bit-set$13914$12l&&U
     g$fxfirst-bit-set$15996$12l&&U
     (case-lambda
       ((g$x$14409$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x$14409$12l&&U))
            (assertion-violation
              'fxfirst-bit-set
              '"not a fixnum"
              g$x$14409$12l&&U)
            (void))
          ((case-lambda
             (()
              (if ($fx=? g$x$14409$12l&&U '0)
                '-1
                ((letrec ((g$f$14410$12l&&U
                            (case-lambda
                              ((g$count$14411$12l&&U g$x$14412$12l&&U)
                               (if (not ($fx=? '0 g$x$14412$12l&&U))
                                 (if ($fx=?
                                       '1
                                       ($fxand '1 g$x$14412$12l&&U))
                                   g$count$14411$12l&&U
                                   (g$f$14410$12l&&U
                                     ($$fx+ g$count$14411$12l&&U '1)
                                     ($fxarithmetic-shift-right
                                       g$x$14412$12l&&U
                                       '1)))
                                 g$count$14411$12l&&U)))))
                   g$f$14410$12l&&U)
                 '0
                 g$x$14409$12l&&U)))))))))
   (g$fxbit-set?$13915$12l&&U
     g$fxbit-set?$15997$12l&&U
     (case-lambda
       ((g$x$14413$12l&&U g$k$14414$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x$14413$12l&&U))
            (assertion-violation
              'fxbit-set?
              '"not a fixnum"
              g$x$14413$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$k$14414$12l&&U))
            (assertion-violation
              'fxbit-set?
              '"not a fixnum"
              g$k$14414$12l&&U)
            (void))
          ((case-lambda
             (()
              (begin
                (if ($fx<? g$k$14414$12l&&U '0)
                  (assertion-violation
                    'fxbit-set?
                    '"cannot be negative"
                    g$k$14414$12l&&U)
                  (void))
                (if ($fx>=? g$k$14414$12l&&U '32)
                  (assertion-violation
                    'fxbit-set?
                    '"cannot be larger than 31"
                    g$k$14414$12l&&U)
                  (void))
                (if ($fx=? '0 g$x$14413$12l&&U)
                  '#f
                  ((letrec ((g$f$14415$12l&&U
                              (case-lambda
                                ((g$count$14416$12l&&U g$x$14417$12l&&U)
                                 (if (not ($fx=? '0 g$x$14417$12l&&U))
                                   (if (if ($fx=?
                                             g$count$14416$12l&&U
                                             g$k$14414$12l&&U)
                                         (begin
                                           '#f
                                           ($fx=?
                                             '1
                                             ($fxand
                                               '1
                                               g$x$14417$12l&&U)))
                                         '#f)
                                     '#t
                                     (g$f$14415$12l&&U
                                       ($$fx+ g$count$14416$12l&&U '1)
                                       ($fxarithmetic-shift-right
                                         g$x$14417$12l&&U
                                         '1)))
                                   '#f)))))
                     g$f$14415$12l&&U)
                   '0
                   g$x$14413$12l&&U))))))))))
   (g$fxnot$13916$12l&&U
     g$fxnot$15998$12l&&U
     (case-lambda
       ((g$x1$14418$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14418$12l&&U))
            (assertion-violation
              'fxnot
              '"not a fixnum"
              g$x1$14418$12l&&U)
            (void))
          ((case-lambda (() ($fxnot g$x1$14418$12l&&U))))))))
   (g$fx=?$13967$12l&&U
     g$fx=?$15999$12l&&U
     (case-lambda
       ((g$x1$14419$12l&&U g$x2$14420$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14419$12l&&U))
            (assertion-violation
              'fx=?
              '"not a fixnum"
              g$x1$14419$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14420$12l&&U))
            (assertion-violation
              'fx=?
              '"not a fixnum"
              g$x2$14420$12l&&U)
            (void))
          ($fx=? g$x1$14419$12l&&U g$x2$14420$12l&&U)))
       ((g$x1$14421$12l&&U g$x2$14422$12l&&U . g$rest$14423$12l&&U)
        ((letrec ((g$f$14424$12l&&U
                    (case-lambda
                      ((g$a$14425$12l&&U g$b$14426$12l&&U)
                       (if (null? g$b$14426$12l&&U)
                         '#t
                         (if (g$fx=?$13967$12l&&U
                               g$a$14425$12l&&U
                               ($car g$b$14426$12l&&U))
                           (g$f$14424$12l&&U
                             ($car g$b$14426$12l&&U)
                             ($cdr g$b$14426$12l&&U))
                           '#f))))))
           g$f$14424$12l&&U)
         g$x1$14421$12l&&U
         (cons g$x2$14422$12l&&U g$rest$14423$12l&&U)))))
   (g$fx<?$13968$12l&&U
     g$fx<?$16000$12l&&U
     (case-lambda
       ((g$x1$14427$12l&&U g$x2$14428$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14427$12l&&U))
            (assertion-violation
              'fx<?
              '"not a fixnum"
              g$x1$14427$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14428$12l&&U))
            (assertion-violation
              'fx<?
              '"not a fixnum"
              g$x2$14428$12l&&U)
            (void))
          ($fx<? g$x1$14427$12l&&U g$x2$14428$12l&&U)))
       ((g$x1$14429$12l&&U g$x2$14430$12l&&U . g$rest$14431$12l&&U)
        ((letrec ((g$f$14432$12l&&U
                    (case-lambda
                      ((g$a$14433$12l&&U g$b$14434$12l&&U)
                       (if (null? g$b$14434$12l&&U)
                         '#t
                         (if (g$fx<?$13968$12l&&U
                               g$a$14433$12l&&U
                               ($car g$b$14434$12l&&U))
                           (g$f$14432$12l&&U
                             ($car g$b$14434$12l&&U)
                             ($cdr g$b$14434$12l&&U))
                           '#f))))))
           g$f$14432$12l&&U)
         g$x1$14429$12l&&U
         (cons g$x2$14430$12l&&U g$rest$14431$12l&&U)))))
   (g$fx<=?$13969$12l&&U
     g$fx<=?$16001$12l&&U
     (case-lambda
       ((g$x1$14435$12l&&U g$x2$14436$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14435$12l&&U))
            (assertion-violation
              'fx<=?
              '"not a fixnum"
              g$x1$14435$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14436$12l&&U))
            (assertion-violation
              'fx<=?
              '"not a fixnum"
              g$x2$14436$12l&&U)
            (void))
          ($fx<=? g$x1$14435$12l&&U g$x2$14436$12l&&U)))
       ((g$x1$14437$12l&&U g$x2$14438$12l&&U . g$rest$14439$12l&&U)
        ((letrec ((g$f$14440$12l&&U
                    (case-lambda
                      ((g$a$14441$12l&&U g$b$14442$12l&&U)
                       (if (null? g$b$14442$12l&&U)
                         '#t
                         (if (g$fx<=?$13969$12l&&U
                               g$a$14441$12l&&U
                               ($car g$b$14442$12l&&U))
                           (g$f$14440$12l&&U
                             ($car g$b$14442$12l&&U)
                             ($cdr g$b$14442$12l&&U))
                           '#f))))))
           g$f$14440$12l&&U)
         g$x1$14437$12l&&U
         (cons g$x2$14438$12l&&U g$rest$14439$12l&&U)))))
   (g$fx>?$13970$12l&&U
     g$fx>?$16002$12l&&U
     (case-lambda
       ((g$x1$14443$12l&&U g$x2$14444$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14443$12l&&U))
            (assertion-violation
              'fx>?
              '"not a fixnum"
              g$x1$14443$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14444$12l&&U))
            (assertion-violation
              'fx>?
              '"not a fixnum"
              g$x2$14444$12l&&U)
            (void))
          ($fx>? g$x1$14443$12l&&U g$x2$14444$12l&&U)))
       ((g$x1$14445$12l&&U g$x2$14446$12l&&U . g$rest$14447$12l&&U)
        ((letrec ((g$f$14448$12l&&U
                    (case-lambda
                      ((g$a$14449$12l&&U g$b$14450$12l&&U)
                       (if (null? g$b$14450$12l&&U)
                         '#t
                         (if (g$fx>?$13970$12l&&U
                               g$a$14449$12l&&U
                               ($car g$b$14450$12l&&U))
                           (g$f$14448$12l&&U
                             ($car g$b$14450$12l&&U)
                             ($cdr g$b$14450$12l&&U))
                           '#f))))))
           g$f$14448$12l&&U)
         g$x1$14445$12l&&U
         (cons g$x2$14446$12l&&U g$rest$14447$12l&&U)))))
   (g$fx>=?$13971$12l&&U
     g$fx>=?$16003$12l&&U
     (case-lambda
       ((g$x1$14451$12l&&U g$x2$14452$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14451$12l&&U))
            (assertion-violation
              'fx>=?
              '"not a fixnum"
              g$x1$14451$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14452$12l&&U))
            (assertion-violation
              'fx>=?
              '"not a fixnum"
              g$x2$14452$12l&&U)
            (void))
          ($fx>=? g$x1$14451$12l&&U g$x2$14452$12l&&U)))
       ((g$x1$14453$12l&&U g$x2$14454$12l&&U . g$rest$14455$12l&&U)
        ((letrec ((g$f$14456$12l&&U
                    (case-lambda
                      ((g$a$14457$12l&&U g$b$14458$12l&&U)
                       (if (null? g$b$14458$12l&&U)
                         '#t
                         (if (g$fx>=?$13971$12l&&U
                               g$a$14457$12l&&U
                               ($car g$b$14458$12l&&U))
                           (g$f$14456$12l&&U
                             ($car g$b$14458$12l&&U)
                             ($cdr g$b$14458$12l&&U))
                           '#f))))))
           g$f$14456$12l&&U)
         g$x1$14453$12l&&U
         (cons g$x2$14454$12l&&U g$rest$14455$12l&&U)))))
   (g$fxand$14019$12l&&U
     g$fxand$16004$12l&&U
     (case-lambda
       (() '-1)
       ((g$x1$14459$12l&&U g$x2$14460$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14459$12l&&U))
            (assertion-violation
              'fxand
              '"not a fixnum"
              g$x1$14459$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14460$12l&&U))
            (assertion-violation
              'fxand
              '"not a fixnum"
              g$x2$14460$12l&&U)
            (void))
          ($fxand g$x1$14459$12l&&U g$x2$14460$12l&&U)))
       (g$args$14461$12l&&U
        (g$fold-left$11838$12l&&U
          g$fxand$14019$12l&&U
          (g$fxand$14019$12l&&U)
          g$args$14461$12l&&U))))
   (g$fxior$14020$12l&&U
     g$fxior$16005$12l&&U
     (case-lambda
       (() '0)
       ((g$x1$14462$12l&&U g$x2$14463$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14462$12l&&U))
            (assertion-violation
              'fxior
              '"not a fixnum"
              g$x1$14462$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14463$12l&&U))
            (assertion-violation
              'fxior
              '"not a fixnum"
              g$x2$14463$12l&&U)
            (void))
          ($fxior g$x1$14462$12l&&U g$x2$14463$12l&&U)))
       (g$args$14464$12l&&U
        (g$fold-left$11838$12l&&U
          g$fxior$14020$12l&&U
          (g$fxior$14020$12l&&U)
          g$args$14464$12l&&U))))
   (g$fxxor$14021$12l&&U
     g$fxxor$16006$12l&&U
     (case-lambda
       (() '0)
       ((g$x1$14465$12l&&U g$x2$14466$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14465$12l&&U))
            (assertion-violation
              'fxxor
              '"not a fixnum"
              g$x1$14465$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14466$12l&&U))
            (assertion-violation
              'fxxor
              '"not a fixnum"
              g$x2$14466$12l&&U)
            (void))
          ($fxxor g$x1$14465$12l&&U g$x2$14466$12l&&U)))
       (g$args$14467$12l&&U
        (g$fold-left$11838$12l&&U
          g$fxxor$14021$12l&&U
          (g$fxxor$14021$12l&&U)
          g$args$14467$12l&&U))))
   (g$residual-fxdiv*$14037$12l&&U
     g$residual-fxdiv*$16007$12l&&U
     (case-lambda
       ((g$x1$14488$12l&&U g$x2$14489$12l&&U)
        (begin
          (if ($fx=? '0 g$x2$14489$12l&&U)
            (assertion-violation
              'fxdiv
              '"divide by zero"
              g$x1$14488$12l&&U
              g$x2$14489$12l&&U)
            (void))
          (if (if ($fx=? '-1 g$x2$14489$12l&&U)
                (begin
                  '#f
                  ($fx=?
                    (g$least-fixnum$13753$12l&&U)
                    g$x1$14488$12l&&U))
                '#f)
            (g$overflow-error$13862$12l&&U
              'fxdiv
              g$x1$14488$12l&&U
              g$x2$14489$12l&&U)
            (void))
          (if ($fx=? '0 g$x1$14488$12l&&U)
            '0
            (if ($fx<? '0 g$x1$14488$12l&&U)
              ((case-lambda
                 ((g$x1$14510$12l&&U g$x2$14511$12l&&U)
                  ($fxdiv0 g$x1$14510$12l&&U g$x2$14511$12l&&U)))
               g$x1$14488$12l&&U
               g$x2$14489$12l&&U)
              (if ($fx<? '0 g$x2$14489$12l&&U)
                ((case-lambda
                   ((g$x1$14532$12l&&U g$x2$14533$12l&&U)
                    ($fxdiv0 g$x1$14532$12l&&U g$x2$14533$12l&&U)))
                 ($$fx- g$x1$14488$12l&&U ($$fx- g$x2$14489$12l&&U '1))
                 g$x2$14489$12l&&U)
                ((case-lambda
                   ((g$x1$14554$12l&&U g$x2$14555$12l&&U)
                    ($fxdiv0 g$x1$14554$12l&&U g$x2$14555$12l&&U)))
                 ($$fx+ g$x1$14488$12l&&U ($$fx+ g$x2$14489$12l&&U '1))
                 g$x2$14489$12l&&U))))))))
   (g$fxdiv$14038$12l&&U
     g$fxdiv$16008$12l&&U
     (case-lambda
       ((g$x1$14556$12l&&U g$x2$14557$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14556$12l&&U))
            (assertion-violation
              'fxdiv
              '"not a fixnum"
              g$x1$14556$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14557$12l&&U))
            (assertion-violation
              'fxdiv
              '"not a fixnum"
              g$x2$14557$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$14578$12l&&U g$x2$14579$12l&&U)
                  (begin
                    (if ($fx=? '0 g$x2$14579$12l&&U)
                      (assertion-violation
                        'fxdiv
                        '"divide by zero"
                        g$x1$14578$12l&&U
                        g$x2$14579$12l&&U)
                      (void))
                    (if (if ($fx=? '-1 g$x2$14579$12l&&U)
                          (begin
                            '#f
                            ($fx=?
                              (g$least-fixnum$13753$12l&&U)
                              g$x1$14578$12l&&U))
                          '#f)
                      (g$overflow-error$13862$12l&&U
                        'fxdiv
                        g$x1$14578$12l&&U
                        g$x2$14579$12l&&U)
                      (void))
                    (if ($fx=? '0 g$x1$14578$12l&&U)
                      '0
                      (if ($fx<? '0 g$x1$14578$12l&&U)
                        ((case-lambda
                           ((g$x1$14600$12l&&U g$x2$14601$12l&&U)
                            ($fxdiv0
                              g$x1$14600$12l&&U
                              g$x2$14601$12l&&U)))
                         g$x1$14578$12l&&U
                         g$x2$14579$12l&&U)
                        (if ($fx<? '0 g$x2$14579$12l&&U)
                          ((case-lambda
                             ((g$x1$14622$12l&&U g$x2$14623$12l&&U)
                              ($fxdiv0
                                g$x1$14622$12l&&U
                                g$x2$14623$12l&&U)))
                           ($$fx-
                             g$x1$14578$12l&&U
                             ($$fx- g$x2$14579$12l&&U '1))
                           g$x2$14579$12l&&U)
                          ((case-lambda
                             ((g$x1$14644$12l&&U g$x2$14645$12l&&U)
                              ($fxdiv0
                                g$x1$14644$12l&&U
                                g$x2$14645$12l&&U)))
                           ($$fx+
                             g$x1$14578$12l&&U
                             ($$fx+ g$x2$14579$12l&&U '1))
                           g$x2$14579$12l&&U)))))))
               g$x1$14556$12l&&U
               g$x2$14557$12l&&U))))))))
   (g$residual-fxmod*$14054$12l&&U
     g$residual-fxmod*$16009$12l&&U
     (case-lambda
       ((g$x1$14666$12l&&U g$x2$14667$12l&&U)
        ($$fx-
          g$x1$14666$12l&&U
          ($$fx*
            ((case-lambda
               ((g$x1$14688$12l&&U g$x2$14689$12l&&U)
                (begin
                  (if ($fx=? '0 g$x2$14689$12l&&U)
                    (assertion-violation
                      'fxdiv
                      '"divide by zero"
                      g$x1$14688$12l&&U
                      g$x2$14689$12l&&U)
                    (void))
                  (if (if ($fx=? '-1 g$x2$14689$12l&&U)
                        (begin
                          '#f
                          ($fx=?
                            (g$least-fixnum$13753$12l&&U)
                            g$x1$14688$12l&&U))
                        '#f)
                    (g$overflow-error$13862$12l&&U
                      'fxdiv
                      g$x1$14688$12l&&U
                      g$x2$14689$12l&&U)
                    (void))
                  (if ($fx=? '0 g$x1$14688$12l&&U)
                    '0
                    (if ($fx<? '0 g$x1$14688$12l&&U)
                      ((case-lambda
                         ((g$x1$14710$12l&&U g$x2$14711$12l&&U)
                          ($fxdiv0
                            g$x1$14710$12l&&U
                            g$x2$14711$12l&&U)))
                       g$x1$14688$12l&&U
                       g$x2$14689$12l&&U)
                      (if ($fx<? '0 g$x2$14689$12l&&U)
                        ((case-lambda
                           ((g$x1$14732$12l&&U g$x2$14733$12l&&U)
                            ($fxdiv0
                              g$x1$14732$12l&&U
                              g$x2$14733$12l&&U)))
                         ($$fx-
                           g$x1$14688$12l&&U
                           ($$fx- g$x2$14689$12l&&U '1))
                         g$x2$14689$12l&&U)
                        ((case-lambda
                           ((g$x1$14754$12l&&U g$x2$14755$12l&&U)
                            ($fxdiv0
                              g$x1$14754$12l&&U
                              g$x2$14755$12l&&U)))
                         ($$fx+
                           g$x1$14688$12l&&U
                           ($$fx+ g$x2$14689$12l&&U '1))
                         g$x2$14689$12l&&U)))))))
             g$x1$14666$12l&&U
             g$x2$14667$12l&&U)
            g$x2$14667$12l&&U)))))
   (g$fxmod$14055$12l&&U
     g$fxmod$16010$12l&&U
     (case-lambda
       ((g$x1$14756$12l&&U g$x2$14757$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14756$12l&&U))
            (assertion-violation
              'fxmod
              '"not a fixnum"
              g$x1$14756$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14757$12l&&U))
            (assertion-violation
              'fxmod
              '"not a fixnum"
              g$x2$14757$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$14778$12l&&U g$x2$14779$12l&&U)
                  ($$fx-
                    g$x1$14778$12l&&U
                    ($$fx*
                      ((case-lambda
                         ((g$x1$14800$12l&&U g$x2$14801$12l&&U)
                          (begin
                            (if ($fx=? '0 g$x2$14801$12l&&U)
                              (assertion-violation
                                'fxdiv
                                '"divide by zero"
                                g$x1$14800$12l&&U
                                g$x2$14801$12l&&U)
                              (void))
                            (if (if ($fx=? '-1 g$x2$14801$12l&&U)
                                  (begin
                                    '#f
                                    ($fx=?
                                      (g$least-fixnum$13753$12l&&U)
                                      g$x1$14800$12l&&U))
                                  '#f)
                              (g$overflow-error$13862$12l&&U
                                'fxdiv
                                g$x1$14800$12l&&U
                                g$x2$14801$12l&&U)
                              (void))
                            (if ($fx=? '0 g$x1$14800$12l&&U)
                              '0
                              (if ($fx<? '0 g$x1$14800$12l&&U)
                                ((case-lambda
                                   ((g$x1$14822$12l&&U
                                      g$x2$14823$12l&&U)
                                    ($fxdiv0
                                      g$x1$14822$12l&&U
                                      g$x2$14823$12l&&U)))
                                 g$x1$14800$12l&&U
                                 g$x2$14801$12l&&U)
                                (if ($fx<? '0 g$x2$14801$12l&&U)
                                  ((case-lambda
                                     ((g$x1$14844$12l&&U
                                        g$x2$14845$12l&&U)
                                      ($fxdiv0
                                        g$x1$14844$12l&&U
                                        g$x2$14845$12l&&U)))
                                   ($$fx-
                                     g$x1$14800$12l&&U
                                     ($$fx- g$x2$14801$12l&&U '1))
                                   g$x2$14801$12l&&U)
                                  ((case-lambda
                                     ((g$x1$14866$12l&&U
                                        g$x2$14867$12l&&U)
                                      ($fxdiv0
                                        g$x1$14866$12l&&U
                                        g$x2$14867$12l&&U)))
                                   ($$fx+
                                     g$x1$14800$12l&&U
                                     ($$fx+ g$x2$14801$12l&&U '1))
                                   g$x2$14801$12l&&U)))))))
                       g$x1$14778$12l&&U
                       g$x2$14779$12l&&U)
                      g$x2$14779$12l&&U))))
               g$x1$14756$12l&&U
               g$x2$14757$12l&&U))))))))
   (g$fxmod0$14056$12l&&U
     g$fxmod0$16011$12l&&U
     (case-lambda
       ((g$x1$14868$12l&&U g$x2$14869$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14868$12l&&U))
            (assertion-violation
              'fxmod0
              '"not a fixnum"
              g$x1$14868$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14869$12l&&U))
            (assertion-violation
              'fxmod0
              '"not a fixnum"
              g$x2$14869$12l&&U)
            (void))
          ((case-lambda
             (()
              (begin
                (if ($fx=? '0 g$x2$14869$12l&&U)
                  (assertion-violation
                    'fxmod0
                    '"divide by zero"
                    g$x1$14868$12l&&U
                    g$x2$14869$12l&&U)
                  (void))
                (if (if ($fx=? '-1 g$x2$14869$12l&&U)
                      (begin
                        '#f
                        ($fx=?
                          (g$least-fixnum$13753$12l&&U)
                          g$x1$14868$12l&&U))
                      '#f)
                  (g$overflow-error$13862$12l&&U
                    'fxmod0
                    g$x1$14868$12l&&U
                    g$x2$14869$12l&&U)
                  (void))
                ($fxmod0 g$x1$14868$12l&&U g$x2$14869$12l&&U)))))))))
   (g$fxdiv-and-mod$14057$12l&&U
     g$fxdiv-and-mod$16012$12l&&U
     (case-lambda
       ((g$x1$14870$12l&&U g$x2$14871$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$14870$12l&&U))
            (assertion-violation
              'fxdiv-and-mod
              '"not a fixnum"
              g$x1$14870$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$14871$12l&&U))
            (assertion-violation
              'fxdiv-and-mod
              '"not a fixnum"
              g$x2$14871$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$d$14872$12l&&U)
                  (values
                    g$d$14872$12l&&U
                    ($$fx-
                      g$x1$14870$12l&&U
                      ($$fx* g$d$14872$12l&&U g$x2$14871$12l&&U)))))
               ((case-lambda
                  ((g$x1$14893$12l&&U g$x2$14894$12l&&U)
                   (begin
                     (if ($fx=? '0 g$x2$14894$12l&&U)
                       (assertion-violation
                         'fxdiv
                         '"divide by zero"
                         g$x1$14893$12l&&U
                         g$x2$14894$12l&&U)
                       (void))
                     (if (if ($fx=? '-1 g$x2$14894$12l&&U)
                           (begin
                             '#f
                             ($fx=?
                               (g$least-fixnum$13753$12l&&U)
                               g$x1$14893$12l&&U))
                           '#f)
                       (g$overflow-error$13862$12l&&U
                         'fxdiv
                         g$x1$14893$12l&&U
                         g$x2$14894$12l&&U)
                       (void))
                     (if ($fx=? '0 g$x1$14893$12l&&U)
                       '0
                       (if ($fx<? '0 g$x1$14893$12l&&U)
                         ((case-lambda
                            ((g$x1$14915$12l&&U g$x2$14916$12l&&U)
                             ($fxdiv0
                               g$x1$14915$12l&&U
                               g$x2$14916$12l&&U)))
                          g$x1$14893$12l&&U
                          g$x2$14894$12l&&U)
                         (if ($fx<? '0 g$x2$14894$12l&&U)
                           ((case-lambda
                              ((g$x1$14937$12l&&U g$x2$14938$12l&&U)
                               ($fxdiv0
                                 g$x1$14937$12l&&U
                                 g$x2$14938$12l&&U)))
                            ($$fx-
                              g$x1$14893$12l&&U
                              ($$fx- g$x2$14894$12l&&U '1))
                            g$x2$14894$12l&&U)
                           ((case-lambda
                              ((g$x1$14959$12l&&U g$x2$14960$12l&&U)
                               ($fxdiv0
                                 g$x1$14959$12l&&U
                                 g$x2$14960$12l&&U)))
                            ($$fx+
                              g$x1$14893$12l&&U
                              ($$fx+ g$x2$14894$12l&&U '1))
                            g$x2$14894$12l&&U)))))))
                g$x1$14870$12l&&U
                g$x2$14871$12l&&U)))))))))
   (g$residual-fxdiv0*$14073$12l&&U
     g$residual-fxdiv0*$16013$12l&&U
     (case-lambda
       ((g$x1$14981$12l&&U g$x2$14982$12l&&U)
        (begin
          (if ($fx=? '0 g$x2$14982$12l&&U)
            (assertion-violation
              'fxdiv0
              '"divide by zero"
              g$x1$14981$12l&&U
              g$x2$14982$12l&&U)
            (void))
          (if (if ($fx=? '-1 g$x2$14982$12l&&U)
                (begin
                  '#f
                  ($fx=?
                    (g$least-fixnum$13753$12l&&U)
                    g$x1$14981$12l&&U))
                '#f)
            (g$overflow-error$13862$12l&&U
              'fxdiv0
              g$x1$14981$12l&&U
              g$x2$14982$12l&&U)
            (void))
          ((case-lambda
             ((g$x1$15003$12l&&U g$x2$15004$12l&&U)
              ($fxdiv0 g$x1$15003$12l&&U g$x2$15004$12l&&U)))
           g$x1$14981$12l&&U
           g$x2$14982$12l&&U)))))
   (g$fxdiv0$14074$12l&&U
     g$fxdiv0$16014$12l&&U
     (case-lambda
       ((g$x1$15005$12l&&U g$x2$15006$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$15005$12l&&U))
            (assertion-violation
              'fxdiv0
              '"not a fixnum"
              g$x1$15005$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$15006$12l&&U))
            (assertion-violation
              'fxdiv0
              '"not a fixnum"
              g$x2$15006$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$15027$12l&&U g$x2$15028$12l&&U)
                  (begin
                    (if ($fx=? '0 g$x2$15028$12l&&U)
                      (assertion-violation
                        'fxdiv0
                        '"divide by zero"
                        g$x1$15027$12l&&U
                        g$x2$15028$12l&&U)
                      (void))
                    (if (if ($fx=? '-1 g$x2$15028$12l&&U)
                          (begin
                            '#f
                            ($fx=?
                              (g$least-fixnum$13753$12l&&U)
                              g$x1$15027$12l&&U))
                          '#f)
                      (g$overflow-error$13862$12l&&U
                        'fxdiv0
                        g$x1$15027$12l&&U
                        g$x2$15028$12l&&U)
                      (void))
                    ((case-lambda
                       ((g$x1$15049$12l&&U g$x2$15050$12l&&U)
                        ($fxdiv0 g$x1$15049$12l&&U g$x2$15050$12l&&U)))
                     g$x1$15027$12l&&U
                     g$x2$15028$12l&&U))))
               g$x1$15005$12l&&U
               g$x2$15006$12l&&U))))))))
   (g$residual-%%fxdiv0$14090$12l&&U
     g$residual-%%fxdiv0$16015$12l&&U
     (case-lambda
       ((g$x1$15071$12l&&U g$x2$15072$12l&&U)
        ($fxdiv0 g$x1$15071$12l&&U g$x2$15072$12l&&U))))
   (g$fxdiv0-and-mod0$14091$12l&&U
     g$fxdiv0-and-mod0$16016$12l&&U
     (case-lambda
       ((g$x1$15073$12l&&U g$x2$15074$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$15073$12l&&U))
            (assertion-violation
              'fxdiv0-and-mod0
              '"not a fixnum"
              g$x1$15073$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$x2$15074$12l&&U))
            (assertion-violation
              'fxdiv0-and-mod0
              '"not a fixnum"
              g$x2$15074$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$d$15075$12l&&U)
                  (values
                    g$d$15075$12l&&U
                    ($$fx-
                      g$x1$15073$12l&&U
                      ($$fx* g$d$15075$12l&&U g$x2$15074$12l&&U)))))
               ((case-lambda
                  ((g$x1$15096$12l&&U g$x2$15097$12l&&U)
                   (begin
                     (if ($fx=? '0 g$x2$15097$12l&&U)
                       (assertion-violation
                         'fxdiv0
                         '"divide by zero"
                         g$x1$15096$12l&&U
                         g$x2$15097$12l&&U)
                       (void))
                     (if (if ($fx=? '-1 g$x2$15097$12l&&U)
                           (begin
                             '#f
                             ($fx=?
                               (g$least-fixnum$13753$12l&&U)
                               g$x1$15096$12l&&U))
                           '#f)
                       (g$overflow-error$13862$12l&&U
                         'fxdiv0
                         g$x1$15096$12l&&U
                         g$x2$15097$12l&&U)
                       (void))
                     ((case-lambda
                        ((g$x1$15118$12l&&U g$x2$15119$12l&&U)
                         ($fxdiv0 g$x1$15118$12l&&U g$x2$15119$12l&&U)))
                      g$x1$15096$12l&&U
                      g$x2$15097$12l&&U))))
                g$x1$15073$12l&&U
                g$x2$15074$12l&&U)))))))))
   (g$residual-fxpositive?*$14107$12l&&U
     g$residual-fxpositive?*$16017$12l&&U
     (case-lambda ((g$r$15140$12l&&U) ($fx<? '0 g$r$15140$12l&&U))))
   (g$fxpositive?$14108$12l&&U
     g$fxpositive?$16018$12l&&U
     (case-lambda
       ((g$r$15141$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$r$15141$12l&&U))
            (assertion-violation
              'fxpositive?
              '"not a fixnum"
              g$r$15141$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$r$15162$12l&&U) ($fx<? '0 g$r$15162$12l&&U)))
               g$r$15141$12l&&U))))))))
   (g$residual-fxnegative?*$14124$12l&&U
     g$residual-fxnegative?*$16019$12l&&U
     (case-lambda ((g$r$15183$12l&&U) ($fx>? '0 g$r$15183$12l&&U))))
   (g$fxnegative?$14125$12l&&U
     g$fxnegative?$16020$12l&&U
     (case-lambda
       ((g$r$15184$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$r$15184$12l&&U))
            (assertion-violation
              'fxnegative?
              '"not a fixnum"
              g$r$15184$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$r$15205$12l&&U) ($fx>? '0 g$r$15205$12l&&U)))
               g$r$15184$12l&&U))))))))
   (g$residual-fxzero?*$14141$12l&&U
     g$residual-fxzero?*$16021$12l&&U
     (case-lambda ((g$r$15226$12l&&U) ($fx=? '0 g$r$15226$12l&&U))))
   (g$fxzero?$14142$12l&&U
     g$fxzero?$16022$12l&&U
     (case-lambda
       ((g$r$15227$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$r$15227$12l&&U))
            (assertion-violation
              'fxzero?
              '"not a fixnum"
              g$r$15227$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$r$15248$12l&&U) ($fx=? '0 g$r$15248$12l&&U)))
               g$r$15227$12l&&U))))))))
   (g$residual-fxeven?*$14158$12l&&U
     g$residual-fxeven?*$16023$12l&&U
     (case-lambda
       ((g$n$15269$12l&&U) ($fx=? '0 ($fxand g$n$15269$12l&&U '1)))))
   (g$fxeven?$14159$12l&&U
     g$fxeven?$16024$12l&&U
     (case-lambda
       ((g$n$15270$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$n$15270$12l&&U))
            (assertion-violation
              'fxeven?
              '"not a fixnum"
              g$n$15270$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$n$15291$12l&&U)
                  ($fx=? '0 ($fxand g$n$15291$12l&&U '1))))
               g$n$15270$12l&&U))))))))
   (g$residual-fxodd?*$14175$12l&&U
     g$residual-fxodd?*$16025$12l&&U
     (case-lambda
       ((g$n$15312$12l&&U) ($fx=? '1 ($fxand g$n$15312$12l&&U '1)))))
   (g$fxodd?$14176$12l&&U
     g$fxodd?$16026$12l&&U
     (case-lambda
       ((g$n$15313$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$n$15313$12l&&U))
            (assertion-violation
              'fxodd?
              '"not a fixnum"
              g$n$15313$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$n$15334$12l&&U)
                  ($fx=? '1 ($fxand g$n$15334$12l&&U '1))))
               g$n$15313$12l&&U))))))))
   (g$fxmax$14177$12l&&U
     g$fxmax$16027$12l&&U
     (case-lambda
       ((g$a$15335$12l&&U . g$rest$15336$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$a$15335$12l&&U))
            (assertion-violation
              'fxmax
              '"not a fixnum"
              g$a$15335$12l&&U)
            (void))
          (g$fold-left$11838$12l&&U
            (case-lambda
              ((g$a$15337$12l&&U g$b$15338$12l&&U)
               (if (g$fx<?$13968$12l&&U
                     g$a$15337$12l&&U
                     g$b$15338$12l&&U)
                 g$b$15338$12l&&U
                 g$a$15337$12l&&U)))
            g$a$15335$12l&&U
            g$rest$15336$12l&&U)))))
   (g$fxmin$14178$12l&&U
     g$fxmin$16028$12l&&U
     (case-lambda
       ((g$a$15339$12l&&U . g$rest$15340$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$a$15339$12l&&U))
            (assertion-violation
              'fxmin
              '"not a fixnum"
              g$a$15339$12l&&U)
            (void))
          (g$fold-left$11838$12l&&U
            (case-lambda
              ((g$a$15341$12l&&U g$b$15342$12l&&U)
               (if (g$fx>?$13970$12l&&U
                     g$a$15341$12l&&U
                     g$b$15342$12l&&U)
                 g$b$15342$12l&&U
                 g$a$15341$12l&&U)))
            g$a$15339$12l&&U
            g$rest$15340$12l&&U)))))
   (g$fx*/carry$14179$12l&&U
     g$fx*/carry$16029$12l&&U
     (case-lambda
       ((g$fx1$15343$12l&&U g$fx2$15344$12l&&U g$fx3$15345$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$fx1$15343$12l&&U))
            (assertion-violation
              'fx*/carry
              '"not a fixnum"
              g$fx1$15343$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx2$15344$12l&&U))
            (assertion-violation
              'fx*/carry
              '"not a fixnum"
              g$fx2$15344$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx3$15345$12l&&U))
            (assertion-violation
              'fx*/carry
              '"not a fixnum"
              g$fx3$15345$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$s$15346$12l&&U g$e$15347$12l&&U)
                  (values
                    (g$mod0$12586$12l&&U
                      g$s$15346$12l&&U
                      g$e$15347$12l&&U)
                    (div0 g$s$15346$12l&&U g$e$15347$12l&&U))))
               (+ (* g$fx1$15343$12l&&U g$fx2$15344$12l&&U)
                  g$fx3$15345$12l&&U)
               (expt '2 (g$fixnum-width$12584$12l&&U))))))))))
   (g$fx-/carry$14180$12l&&U
     g$fx-/carry$16030$12l&&U
     (case-lambda
       ((g$fx1$15348$12l&&U g$fx2$15349$12l&&U g$fx3$15350$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$fx1$15348$12l&&U))
            (assertion-violation
              'fx-/carry
              '"not a fixnum"
              g$fx1$15348$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx2$15349$12l&&U))
            (assertion-violation
              'fx-/carry
              '"not a fixnum"
              g$fx2$15349$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx3$15350$12l&&U))
            (assertion-violation
              'fx-/carry
              '"not a fixnum"
              g$fx3$15350$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$s$15351$12l&&U g$e$15352$12l&&U)
                  (values
                    (g$mod0$12586$12l&&U
                      g$s$15351$12l&&U
                      g$e$15352$12l&&U)
                    (div0 g$s$15351$12l&&U g$e$15352$12l&&U))))
               (- g$fx1$15348$12l&&U
                  g$fx2$15349$12l&&U
                  g$fx3$15350$12l&&U)
               (expt '2 (g$fixnum-width$12584$12l&&U))))))))))
   (g$fx+/carry$14181$12l&&U
     g$fx+/carry$16031$12l&&U
     (case-lambda
       ((g$fx1$15353$12l&&U g$fx2$15354$12l&&U g$fx3$15355$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$fx1$15353$12l&&U))
            (assertion-violation
              'fx+/carry
              '"not a fixnum"
              g$fx1$15353$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx2$15354$12l&&U))
            (assertion-violation
              'fx+/carry
              '"not a fixnum"
              g$fx2$15354$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx3$15355$12l&&U))
            (assertion-violation
              'fx+/carry
              '"not a fixnum"
              g$fx3$15355$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$s$15356$12l&&U g$e$15357$12l&&U)
                  (values
                    (g$mod0$12586$12l&&U
                      g$s$15356$12l&&U
                      g$e$15357$12l&&U)
                    (div0 g$s$15356$12l&&U g$e$15357$12l&&U))))
               (+ g$fx1$15353$12l&&U
                  g$fx2$15354$12l&&U
                  g$fx3$15355$12l&&U)
               (expt '2 (g$fixnum-width$12584$12l&&U))))))))))
   (g$residual-fxif*$14197$12l&&U
     g$residual-fxif*$16032$12l&&U
     (case-lambda
       ((g$fx1$15378$12l&&U g$fx2$15379$12l&&U g$fx3$15380$12l&&U)
        ($fxior
          ($fxand g$fx1$15378$12l&&U g$fx2$15379$12l&&U)
          ($fxand ($fxnot g$fx1$15378$12l&&U) g$fx3$15380$12l&&U)))))
   (g$fxif$14198$12l&&U
     g$fxif$16033$12l&&U
     (case-lambda
       ((g$fx1$15381$12l&&U g$fx2$15382$12l&&U g$fx3$15383$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$fx1$15381$12l&&U))
            (assertion-violation
              'fxif
              '"not a fixnum"
              g$fx1$15381$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx2$15382$12l&&U))
            (assertion-violation
              'fxif
              '"not a fixnum"
              g$fx2$15382$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx3$15383$12l&&U))
            (assertion-violation
              'fxif
              '"not a fixnum"
              g$fx3$15383$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$fx1$15404$12l&&U
                    g$fx2$15405$12l&&U
                    g$fx3$15406$12l&&U)
                  ($fxior
                    ($fxand g$fx1$15404$12l&&U g$fx2$15405$12l&&U)
                    ($fxand
                      ($fxnot g$fx1$15404$12l&&U)
                      g$fx3$15406$12l&&U))))
               g$fx1$15381$12l&&U
               g$fx2$15382$12l&&U
               g$fx3$15383$12l&&U))))))))
   (g$residual-fxcopy-bit*$14214$12l&&U
     g$residual-fxcopy-bit*$16034$12l&&U
     (case-lambda
       ((g$fx1$15427$12l&&U g$fx2$15428$12l&&U g$fx3$15429$12l&&U)
        ((case-lambda
           ((g$fx1$15450$12l&&U g$fx2$15451$12l&&U g$fx3$15452$12l&&U)
            ($fxior
              ($fxand g$fx1$15450$12l&&U g$fx2$15451$12l&&U)
              ($fxand ($fxnot g$fx1$15450$12l&&U) g$fx3$15452$12l&&U))))
         ($fxarithmetic-shift-left '1 g$fx2$15428$12l&&U)
         ($fxarithmetic-shift-left
           g$fx3$15429$12l&&U
           g$fx2$15428$12l&&U)
         g$fx1$15427$12l&&U))))
   (g$fxcopy-bit$14215$12l&&U
     g$fxcopy-bit$16035$12l&&U
     (case-lambda
       ((g$fx1$15453$12l&&U g$fx2$15454$12l&&U g$fx3$15455$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$fx1$15453$12l&&U))
            (assertion-violation
              'fxcopy-bit
              '"not a fixnum"
              g$fx1$15453$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx2$15454$12l&&U))
            (assertion-violation
              'fxcopy-bit
              '"not a fixnum"
              g$fx2$15454$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx3$15455$12l&&U))
            (assertion-violation
              'fxcopy-bit
              '"not a fixnum"
              g$fx3$15455$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$fx1$15476$12l&&U
                    g$fx2$15477$12l&&U
                    g$fx3$15478$12l&&U)
                  ((case-lambda
                     ((g$fx1$15499$12l&&U
                        g$fx2$15500$12l&&U
                        g$fx3$15501$12l&&U)
                      ($fxior
                        ($fxand g$fx1$15499$12l&&U g$fx2$15500$12l&&U)
                        ($fxand
                          ($fxnot g$fx1$15499$12l&&U)
                          g$fx3$15501$12l&&U))))
                   ($fxarithmetic-shift-left '1 g$fx2$15477$12l&&U)
                   ($fxarithmetic-shift-left
                     g$fx3$15478$12l&&U
                     g$fx2$15477$12l&&U)
                   g$fx1$15476$12l&&U)))
               g$fx1$15453$12l&&U
               g$fx2$15454$12l&&U
               g$fx3$15455$12l&&U))))))))
   (g$residual-fxbit-field*$14231$12l&&U
     g$residual-fxbit-field*$16036$12l&&U
     (case-lambda
       ((g$fx1$15522$12l&&U g$fx2$15523$12l&&U g$fx3$15524$12l&&U)
        ($fxarithmetic-shift-right
          ($fxand
            g$fx1$15522$12l&&U
            ($fxnot ($fxarithmetic-shift-left '-1 g$fx3$15524$12l&&U)))
          g$fx2$15523$12l&&U))))
   (g$fxbit-field$14232$12l&&U
     g$fxbit-field$16037$12l&&U
     (case-lambda
       ((g$fx1$15525$12l&&U g$fx2$15526$12l&&U g$fx3$15527$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$fx1$15525$12l&&U))
            (assertion-violation
              'fxbit-field
              '"not a fixnum"
              g$fx1$15525$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx2$15526$12l&&U))
            (assertion-violation
              'fxbit-field
              '"not a fixnum"
              g$fx2$15526$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx3$15527$12l&&U))
            (assertion-violation
              'fxbit-field
              '"not a fixnum"
              g$fx3$15527$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$fx1$15548$12l&&U
                    g$fx2$15549$12l&&U
                    g$fx3$15550$12l&&U)
                  ($fxarithmetic-shift-right
                    ($fxand
                      g$fx1$15548$12l&&U
                      ($fxnot
                        ($fxarithmetic-shift-left
                          '-1
                          g$fx3$15550$12l&&U)))
                    g$fx2$15549$12l&&U)))
               g$fx1$15525$12l&&U
               g$fx2$15526$12l&&U
               g$fx3$15527$12l&&U))))))))
   (g$residual-fxcopy-bit-field*$14248$12l&&U
     g$residual-fxcopy-bit-field*$16038$12l&&U
     (case-lambda
       ((g$to$15571$12l&&U
          g$start$15572$12l&&U
          g$end$15573$12l&&U
          g$from$15574$12l&&U)
        ((case-lambda
           ((g$fx1$15595$12l&&U g$fx2$15596$12l&&U g$fx3$15597$12l&&U)
            ($fxior
              ($fxand g$fx1$15595$12l&&U g$fx2$15596$12l&&U)
              ($fxand ($fxnot g$fx1$15595$12l&&U) g$fx3$15597$12l&&U))))
         ($fxand
           ($fxarithmetic-shift-left '-1 g$start$15572$12l&&U)
           ($fxnot ($fxarithmetic-shift-left '-1 g$end$15573$12l&&U)))
         ($fxarithmetic-shift-left
           g$from$15574$12l&&U
           g$start$15572$12l&&U)
         g$to$15571$12l&&U))))
   (g$fxcopy-bit-field$14249$12l&&U
     g$fxcopy-bit-field$16039$12l&&U
     (case-lambda
       ((g$to$15598$12l&&U
          g$start$15599$12l&&U
          g$end$15600$12l&&U
          g$from$15601$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$to$15598$12l&&U))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$to$15598$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$start$15599$12l&&U))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$start$15599$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$end$15600$12l&&U))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$end$15600$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$from$15601$12l&&U))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$from$15601$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$to$15622$12l&&U
                    g$start$15623$12l&&U
                    g$end$15624$12l&&U
                    g$from$15625$12l&&U)
                  ((case-lambda
                     ((g$fx1$15646$12l&&U
                        g$fx2$15647$12l&&U
                        g$fx3$15648$12l&&U)
                      ($fxior
                        ($fxand g$fx1$15646$12l&&U g$fx2$15647$12l&&U)
                        ($fxand
                          ($fxnot g$fx1$15646$12l&&U)
                          g$fx3$15648$12l&&U))))
                   ($fxand
                     ($fxarithmetic-shift-left '-1 g$start$15623$12l&&U)
                     ($fxnot
                       ($fxarithmetic-shift-left
                         '-1
                         g$end$15624$12l&&U)))
                   ($fxarithmetic-shift-left
                     g$from$15625$12l&&U
                     g$start$15623$12l&&U)
                   g$to$15622$12l&&U)))
               g$to$15598$12l&&U
               g$start$15599$12l&&U
               g$end$15600$12l&&U
               g$from$15601$12l&&U))))))))
   (g$fxarithmetic-shift-left$14250$12l&&U
     g$fxarithmetic-shift-left$16040$12l&&U
     (case-lambda
       ((g$fx1$15649$12l&&U g$fx2$15650$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$fx1$15649$12l&&U))
            (assertion-violation
              'fxarithmetic-shift-left
              '"not a fixnum"
              g$fx1$15649$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx2$15650$12l&&U))
            (assertion-violation
              'fxarithmetic-shift-left
              '"not a fixnum"
              g$fx2$15650$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x$15671$12l&&U g$k$15672$12l&&U)
                  (if ($fx=? g$k$15672$12l&&U '0)
                    g$x$15671$12l&&U
                    (if ($fx<? g$k$15672$12l&&U '0)
                      ($fxarithmetic-shift-right
                        g$x$15671$12l&&U
                        ($$fx- g$k$15672$12l&&U))
                      ((case-lambda
                         ((g$i$15673$12l&&U)
                          (begin
                            (if ($fx>?
                                  (clr-call-internal
                                    'System.Math
                                    '"abs(int32)"
                                    '()
                                    g$x$15671$12l&&U)
                                  (clr-call-internal
                                    'System.Math
                                    '"abs(int32)"
                                    '()
                                    g$i$15673$12l&&U))
                              (g$overflow-error$13862$12l&&U
                                'fxarithmetic-shift
                                g$x$15671$12l&&U
                                g$k$15672$12l&&U)
                              (void))
                            g$i$15673$12l&&U)))
                       ($fxarithmetic-shift-left
                         g$x$15671$12l&&U
                         g$k$15672$12l&&U))))))
               g$fx1$15649$12l&&U
               g$fx2$15650$12l&&U))))))))
   (g$fxarithmetic-shift-right$14251$12l&&U
     g$fxarithmetic-shift-right$16041$12l&&U
     (case-lambda
       ((g$fx1$15674$12l&&U g$fx2$15675$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$fx1$15674$12l&&U))
            (assertion-violation
              'fxarithmetic-shift-right
              '"not a fixnum"
              g$fx1$15674$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$fx2$15675$12l&&U))
            (assertion-violation
              'fxarithmetic-shift-right
              '"not a fixnum"
              g$fx2$15675$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x$15696$12l&&U g$k$15697$12l&&U)
                  (if ($fx=? g$k$15697$12l&&U '0)
                    g$x$15696$12l&&U
                    (if ($fx<? g$k$15697$12l&&U '0)
                      ($fxarithmetic-shift-right
                        g$x$15696$12l&&U
                        ($$fx- g$k$15697$12l&&U))
                      ((case-lambda
                         ((g$i$15698$12l&&U)
                          (begin
                            (if ($fx>?
                                  (clr-call-internal
                                    'System.Math
                                    '"abs(int32)"
                                    '()
                                    g$x$15696$12l&&U)
                                  (clr-call-internal
                                    'System.Math
                                    '"abs(int32)"
                                    '()
                                    g$i$15698$12l&&U))
                              (g$overflow-error$13862$12l&&U
                                'fxarithmetic-shift
                                g$x$15696$12l&&U
                                g$k$15697$12l&&U)
                              (void))
                            g$i$15698$12l&&U)))
                       ($fxarithmetic-shift-left
                         g$x$15696$12l&&U
                         g$k$15697$12l&&U))))))
               g$fx1$15674$12l&&U
               ($$fx- g$fx2$15675$12l&&U)))))))))
   (g$fxrotate-bit-field$14252$12l&&U
     g$fxrotate-bit-field$16042$12l&&U
     (case-lambda
       ((g$n$15699$12l&&U
          g$start$15700$12l&&U
          g$end$15701$12l&&U
          g$count$15702$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$n$15699$12l&&U))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$n$15699$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$start$15700$12l&&U))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$start$15700$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$end$15701$12l&&U))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$end$15701$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$count$15702$12l&&U))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$count$15702$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$width$15703$12l&&U)
                  (if ((case-lambda
                         ((g$r$15724$12l&&U)
                          ($fx<? '0 g$r$15724$12l&&U)))
                       g$width$15703$12l&&U)
                    ((case-lambda
                       ((g$count$15725$12l&&U g$field$15726$12l&&U)
                        ((case-lambda
                           ((g$to$15747$12l&&U
                              g$start$15748$12l&&U
                              g$end$15749$12l&&U
                              g$from$15750$12l&&U)
                            ((case-lambda
                               ((g$fx1$15771$12l&&U
                                  g$fx2$15772$12l&&U
                                  g$fx3$15773$12l&&U)
                                ($fxior
                                  ($fxand
                                    g$fx1$15771$12l&&U
                                    g$fx2$15772$12l&&U)
                                  ($fxand
                                    ($fxnot g$fx1$15771$12l&&U)
                                    g$fx3$15773$12l&&U))))
                             ($fxand
                               ($fxarithmetic-shift-left
                                 '-1
                                 g$start$15748$12l&&U)
                               ($fxnot
                                 ($fxarithmetic-shift-left
                                   '-1
                                   g$end$15749$12l&&U)))
                             ($fxarithmetic-shift-left
                               g$from$15750$12l&&U
                               g$start$15748$12l&&U)
                             g$to$15747$12l&&U)))
                         g$n$15699$12l&&U
                         g$start$15700$12l&&U
                         g$end$15701$12l&&U
                         ($fxior
                           ($fxarithmetic-shift-left
                             g$field$15726$12l&&U
                             g$count$15725$12l&&U)
                           ($fxarithmetic-shift-right
                             g$field$15726$12l&&U
                             ($$fx-
                               g$width$15703$12l&&U
                               g$count$15725$12l&&U))))))
                     ((case-lambda
                        ((g$x1$15794$12l&&U g$x2$15795$12l&&U)
                         ($$fx-
                           g$x1$15794$12l&&U
                           ($$fx*
                             ((case-lambda
                                ((g$x1$15816$12l&&U g$x2$15817$12l&&U)
                                 (begin
                                   (if ($fx=? '0 g$x2$15817$12l&&U)
                                     (assertion-violation
                                       'fxdiv
                                       '"divide by zero"
                                       g$x1$15816$12l&&U
                                       g$x2$15817$12l&&U)
                                     (void))
                                   (if (if ($fx=? '-1 g$x2$15817$12l&&U)
                                         (begin
                                           '#f
                                           ($fx=?
                                             (g$least-fixnum$13753$12l&&U)
                                             g$x1$15816$12l&&U))
                                         '#f)
                                     (g$overflow-error$13862$12l&&U
                                       'fxdiv
                                       g$x1$15816$12l&&U
                                       g$x2$15817$12l&&U)
                                     (void))
                                   (if ($fx=? '0 g$x1$15816$12l&&U)
                                     '0
                                     (if ($fx<? '0 g$x1$15816$12l&&U)
                                       ((case-lambda
                                          ((g$x1$15838$12l&&U
                                             g$x2$15839$12l&&U)
                                           ($fxdiv0
                                             g$x1$15838$12l&&U
                                             g$x2$15839$12l&&U)))
                                        g$x1$15816$12l&&U
                                        g$x2$15817$12l&&U)
                                       (if ($fx<? '0 g$x2$15817$12l&&U)
                                         ((case-lambda
                                            ((g$x1$15860$12l&&U
                                               g$x2$15861$12l&&U)
                                             ($fxdiv0
                                               g$x1$15860$12l&&U
                                               g$x2$15861$12l&&U)))
                                          ($$fx-
                                            g$x1$15816$12l&&U
                                            ($$fx-
                                              g$x2$15817$12l&&U
                                              '1))
                                          g$x2$15817$12l&&U)
                                         ((case-lambda
                                            ((g$x1$15882$12l&&U
                                               g$x2$15883$12l&&U)
                                             ($fxdiv0
                                               g$x1$15882$12l&&U
                                               g$x2$15883$12l&&U)))
                                          ($$fx+
                                            g$x1$15816$12l&&U
                                            ($$fx+
                                              g$x2$15817$12l&&U
                                              '1))
                                          g$x2$15817$12l&&U)))))))
                              g$x1$15794$12l&&U
                              g$x2$15795$12l&&U)
                             g$x2$15795$12l&&U))))
                      g$count$15702$12l&&U
                      g$width$15703$12l&&U)
                     ((case-lambda
                        ((g$fx1$15904$12l&&U
                           g$fx2$15905$12l&&U
                           g$fx3$15906$12l&&U)
                         ($fxarithmetic-shift-right
                           ($fxand
                             g$fx1$15904$12l&&U
                             ($fxnot
                               ($fxarithmetic-shift-left
                                 '-1
                                 g$fx3$15906$12l&&U)))
                           g$fx2$15905$12l&&U)))
                      g$n$15699$12l&&U
                      g$start$15700$12l&&U
                      g$end$15701$12l&&U))
                    g$n$15699$12l&&U)))
               ($$fx- g$end$15701$12l&&U g$start$15700$12l&&U)))))))))
   (g$fxreverse-bit-field$14253$12l&&U
     g$fxreverse-bit-field$16043$12l&&U
     (case-lambda
       ((g$x1$15907$12l&&U g$start$15908$12l&&U g$end$15909$12l&&U)
        (begin
          (if (not (g$fixnum?$12582$12l&&U g$x1$15907$12l&&U))
            (assertion-violation
              'fxreverse-bit-field
              '"not a fixnum"
              g$x1$15907$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$start$15908$12l&&U))
            (assertion-violation
              'fxreverse-bit-field
              '"not a fixnum"
              g$start$15908$12l&&U)
            (void))
          (if (not (g$fixnum?$12582$12l&&U g$end$15909$12l&&U))
            (assertion-violation
              'fxreverse-bit-field
              '"not a fixnum"
              g$end$15909$12l&&U)
            (void))
          ((case-lambda
             (()
              (begin
                (if (not ($fx<=?
                           g$start$15908$12l&&U
                           g$end$15909$12l&&U))
                  (assertion-violation
                    'fxreverse-bit-field
                    '"start must be less than end"
                    g$start$15908$12l&&U
                    g$end$15909$12l&&U)
                  (void))
                (letrec ((g$loop$15910$12l&&U
                           (case-lambda
                             ((g$width$15934$12l&&U
                                g$bits$15935$12l&&U
                                g$rbits$15936$12l&&U)
                              (if ($fx=? g$width$15934$12l&&U '0)
                                (begin
                                  (if '#f '#f (void))
                                  ((case-lambda
                                     ((g$to$15957$12l&&U
                                        g$start$15958$12l&&U
                                        g$end$15959$12l&&U
                                        g$from$15960$12l&&U)
                                      ((case-lambda
                                         ((g$fx1$15981$12l&&U
                                            g$fx2$15982$12l&&U
                                            g$fx3$15983$12l&&U)
                                          ($fxior
                                            ($fxand
                                              g$fx1$15981$12l&&U
                                              g$fx2$15982$12l&&U)
                                            ($fxand
                                              ($fxnot
                                                g$fx1$15981$12l&&U)
                                              g$fx3$15983$12l&&U))))
                                       ($fxand
                                         ($fxarithmetic-shift-left
                                           '-1
                                           g$start$15958$12l&&U)
                                         ($fxnot
                                           ($fxarithmetic-shift-left
                                             '-1
                                             g$end$15959$12l&&U)))
                                       ($fxarithmetic-shift-left
                                         g$from$15960$12l&&U
                                         g$start$15958$12l&&U)
                                       g$to$15957$12l&&U)))
                                   g$x1$15907$12l&&U
                                   g$start$15908$12l&&U
                                   g$end$15909$12l&&U
                                   g$rbits$15936$12l&&U))
                                (g$loop$15910$12l&&U
                                  ($$fx- g$width$15934$12l&&U '1)
                                  ($fxarithmetic-shift-right
                                    g$bits$15935$12l&&U
                                    '1)
                                  ($fxior
                                    ($fxarithmetic-shift-left
                                      g$rbits$15936$12l&&U
                                      '1)
                                    ($fxand
                                      g$bits$15935$12l&&U
                                      '1))))))))
                  (g$loop$15910$12l&&U
                    ($$fx- g$end$15909$12l&&U g$start$15908$12l&&U)
                    ((case-lambda
                       ((g$fx1$15931$12l&&U
                          g$fx2$15932$12l&&U
                          g$fx3$15933$12l&&U)
                        ($fxarithmetic-shift-right
                          ($fxand
                            g$fx1$15931$12l&&U
                            ($fxnot
                              ($fxarithmetic-shift-left
                                '-1
                                g$fx3$15933$12l&&U)))
                          g$fx2$15932$12l&&U)))
                     g$x1$15907$12l&&U
                     g$start$15908$12l&&U
                     g$end$15909$12l&&U)
                    '0)))))))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$fl+$16222$12l&&U
     g$fl+$17531$12l&&U
     (case-lambda
       (() '0.0)
       ((g$x1$16343$12l&&U g$x2$16344$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16343$12l&&U))
            (assertion-violation 'fl+ '"not a flonum" g$x1$16343$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16344$12l&&U))
            (assertion-violation 'fl+ '"not a flonum" g$x2$16344$12l&&U)
            (void))
          ($fl+ g$x1$16343$12l&&U g$x2$16344$12l&&U)))
       (g$args$16345$12l&&U
        (g$fold-left$11838$12l&&U
          g$fl+$16222$12l&&U
          (g$fl+$16222$12l&&U)
          g$args$16345$12l&&U))))
   (g$fl*$16223$12l&&U
     g$fl*$17532$12l&&U
     (case-lambda
       (() '1.0)
       ((g$x1$16346$12l&&U g$x2$16347$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16346$12l&&U))
            (assertion-violation 'fl* '"not a flonum" g$x1$16346$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16347$12l&&U))
            (assertion-violation 'fl* '"not a flonum" g$x2$16347$12l&&U)
            (void))
          ($fl* g$x1$16346$12l&&U g$x2$16347$12l&&U)))
       (g$args$16348$12l&&U
        (g$fold-left$11838$12l&&U
          g$fl*$16223$12l&&U
          (g$fl*$16223$12l&&U)
          g$args$16348$12l&&U))))
   (g$fl-$16224$12l&&U
     g$fl-$17533$12l&&U
     (case-lambda
       ((g$x1$16349$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16349$12l&&U))
            (assertion-violation 'fl- '"not a flonum" g$x1$16349$12l&&U)
            (void))
          ($fl- g$x1$16349$12l&&U)))
       ((g$x1$16350$12l&&U g$x2$16351$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16350$12l&&U))
            (assertion-violation 'fl- '"not a flonum" g$x1$16350$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16351$12l&&U))
            (assertion-violation 'fl- '"not a flonum" g$x2$16351$12l&&U)
            (void))
          ($fl- g$x1$16350$12l&&U g$x2$16351$12l&&U)))
       ((g$x1$16352$12l&&U g$x2$16353$12l&&U . g$rest$16354$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16352$12l&&U))
            (assertion-violation 'fl- '"not a flonum" g$x1$16352$12l&&U)
            (void))
          (g$fold-left$11838$12l&&U
            g$fl-$16224$12l&&U
            g$x1$16352$12l&&U
            (cons g$x2$16353$12l&&U g$rest$16354$12l&&U))))))
   (g$fl/$16225$12l&&U
     g$fl/$17534$12l&&U
     (case-lambda
       ((g$x1$16355$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16355$12l&&U))
            (assertion-violation 'fl/ '"not a flonum" g$x1$16355$12l&&U)
            (void))
          ($fl/ '1.0 g$x1$16355$12l&&U)))
       ((g$x1$16356$12l&&U g$x2$16357$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16356$12l&&U))
            (assertion-violation 'fl/ '"not a flonum" g$x1$16356$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16357$12l&&U))
            (assertion-violation 'fl/ '"not a flonum" g$x2$16357$12l&&U)
            (void))
          ($fl/ g$x1$16356$12l&&U g$x2$16357$12l&&U)))
       ((g$x1$16358$12l&&U g$x2$16359$12l&&U . g$rest$16360$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16358$12l&&U))
            (assertion-violation 'fl/ '"not a flonum" g$x1$16358$12l&&U)
            (void))
          (g$fold-left$11838$12l&&U
            g$fl/$16225$12l&&U
            g$x1$16358$12l&&U
            (cons g$x2$16359$12l&&U g$rest$16360$12l&&U))))))
   (g$fl=?$16226$12l&&U
     g$fl=?$17535$12l&&U
     (case-lambda
       ((g$x1$16361$12l&&U g$x2$16362$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16361$12l&&U))
            (assertion-violation
              'fl=?
              '"not a flonum"
              g$x1$16361$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16362$12l&&U))
            (assertion-violation
              'fl=?
              '"not a flonum"
              g$x2$16362$12l&&U)
            (void))
          ($fl=? g$x1$16361$12l&&U g$x2$16362$12l&&U)))
       ((g$x1$16363$12l&&U g$x2$16364$12l&&U . g$rest$16365$12l&&U)
        ((letrec ((g$f$16366$12l&&U
                    (case-lambda
                      ((g$a$16367$12l&&U g$b$16368$12l&&U)
                       (if (null? g$b$16368$12l&&U)
                         '#t
                         (if (g$fl=?$16226$12l&&U
                               g$a$16367$12l&&U
                               ($car g$b$16368$12l&&U))
                           (g$f$16366$12l&&U
                             ($car g$b$16368$12l&&U)
                             ($cdr g$b$16368$12l&&U))
                           '#f))))))
           g$f$16366$12l&&U)
         g$x1$16363$12l&&U
         (cons g$x2$16364$12l&&U g$rest$16365$12l&&U)))))
   (g$fl<?$16227$12l&&U
     g$fl<?$17536$12l&&U
     (case-lambda
       ((g$x1$16369$12l&&U g$x2$16370$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16369$12l&&U))
            (assertion-violation
              'fl<?
              '"not a flonum"
              g$x1$16369$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16370$12l&&U))
            (assertion-violation
              'fl<?
              '"not a flonum"
              g$x2$16370$12l&&U)
            (void))
          ($fl<? g$x1$16369$12l&&U g$x2$16370$12l&&U)))
       ((g$x1$16371$12l&&U g$x2$16372$12l&&U . g$rest$16373$12l&&U)
        ((letrec ((g$f$16374$12l&&U
                    (case-lambda
                      ((g$a$16375$12l&&U g$b$16376$12l&&U)
                       (if (null? g$b$16376$12l&&U)
                         '#t
                         (if (g$fl<?$16227$12l&&U
                               g$a$16375$12l&&U
                               ($car g$b$16376$12l&&U))
                           (g$f$16374$12l&&U
                             ($car g$b$16376$12l&&U)
                             ($cdr g$b$16376$12l&&U))
                           '#f))))))
           g$f$16374$12l&&U)
         g$x1$16371$12l&&U
         (cons g$x2$16372$12l&&U g$rest$16373$12l&&U)))))
   (g$fl<=?$16228$12l&&U
     g$fl<=?$17537$12l&&U
     (case-lambda
       ((g$x1$16377$12l&&U g$x2$16378$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16377$12l&&U))
            (assertion-violation
              'fl<=?
              '"not a flonum"
              g$x1$16377$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16378$12l&&U))
            (assertion-violation
              'fl<=?
              '"not a flonum"
              g$x2$16378$12l&&U)
            (void))
          ($fl<=? g$x1$16377$12l&&U g$x2$16378$12l&&U)))
       ((g$x1$16379$12l&&U g$x2$16380$12l&&U . g$rest$16381$12l&&U)
        ((letrec ((g$f$16382$12l&&U
                    (case-lambda
                      ((g$a$16383$12l&&U g$b$16384$12l&&U)
                       (if (null? g$b$16384$12l&&U)
                         '#t
                         (if (g$fl<=?$16228$12l&&U
                               g$a$16383$12l&&U
                               ($car g$b$16384$12l&&U))
                           (g$f$16382$12l&&U
                             ($car g$b$16384$12l&&U)
                             ($cdr g$b$16384$12l&&U))
                           '#f))))))
           g$f$16382$12l&&U)
         g$x1$16379$12l&&U
         (cons g$x2$16380$12l&&U g$rest$16381$12l&&U)))))
   (g$fl>?$16229$12l&&U
     g$fl>?$17538$12l&&U
     (case-lambda
       ((g$x1$16385$12l&&U g$x2$16386$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16385$12l&&U))
            (assertion-violation
              'fl>?
              '"not a flonum"
              g$x1$16385$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16386$12l&&U))
            (assertion-violation
              'fl>?
              '"not a flonum"
              g$x2$16386$12l&&U)
            (void))
          ($fl>? g$x1$16385$12l&&U g$x2$16386$12l&&U)))
       ((g$x1$16387$12l&&U g$x2$16388$12l&&U . g$rest$16389$12l&&U)
        ((letrec ((g$f$16390$12l&&U
                    (case-lambda
                      ((g$a$16391$12l&&U g$b$16392$12l&&U)
                       (if (null? g$b$16392$12l&&U)
                         '#t
                         (if (g$fl>?$16229$12l&&U
                               g$a$16391$12l&&U
                               ($car g$b$16392$12l&&U))
                           (g$f$16390$12l&&U
                             ($car g$b$16392$12l&&U)
                             ($cdr g$b$16392$12l&&U))
                           '#f))))))
           g$f$16390$12l&&U)
         g$x1$16387$12l&&U
         (cons g$x2$16388$12l&&U g$rest$16389$12l&&U)))))
   (g$fl>=?$16230$12l&&U
     g$fl>=?$17539$12l&&U
     (case-lambda
       ((g$x1$16393$12l&&U g$x2$16394$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16393$12l&&U))
            (assertion-violation
              'fl>=?
              '"not a flonum"
              g$x1$16393$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16394$12l&&U))
            (assertion-violation
              'fl>=?
              '"not a flonum"
              g$x2$16394$12l&&U)
            (void))
          ($fl>=? g$x1$16393$12l&&U g$x2$16394$12l&&U)))
       ((g$x1$16395$12l&&U g$x2$16396$12l&&U . g$rest$16397$12l&&U)
        ((letrec ((g$f$16398$12l&&U
                    (case-lambda
                      ((g$a$16399$12l&&U g$b$16400$12l&&U)
                       (if (null? g$b$16400$12l&&U)
                         '#t
                         (if (g$fl>=?$16230$12l&&U
                               g$a$16399$12l&&U
                               ($car g$b$16400$12l&&U))
                           (g$f$16398$12l&&U
                             ($car g$b$16400$12l&&U)
                             ($cdr g$b$16400$12l&&U))
                           '#f))))))
           g$f$16398$12l&&U)
         g$x1$16395$12l&&U
         (cons g$x2$16396$12l&&U g$rest$16397$12l&&U)))))
   (g$residual-fldiv0*$16246$12l&&U
     g$residual-fldiv0*$17540$12l&&U
     (case-lambda
       ((g$x1$16421$12l&&U g$x2$16422$12l&&U)
        ((case-lambda
           ((g$d$16423$12l&&U)
            ((case-lambda
               ((g$m$16424$12l&&U)
                (if ($fl<?
                      g$m$16424$12l&&U
                      (magnitude ($fl/ g$x2$16422$12l&&U '2.0)))
                  g$d$16423$12l&&U
                  (if ($fl<? '0.0 g$x2$16422$12l&&U)
                    ($fl+ g$d$16423$12l&&U '1.0)
                    ($fl- g$d$16423$12l&&U '1.0)))))
             ($fl-
               g$x1$16421$12l&&U
               ($fl* g$d$16423$12l&&U g$x2$16422$12l&&U)))))
         ((case-lambda
            ((g$x1$16445$12l&&U g$x2$16446$12l&&U)
             (if ($fl<? '0.0 g$x2$16446$12l&&U)
               ((case-lambda
                  ((g$fl$16467$12l&&U)
                   (clr-call-internal
                     'system.math
                     '"floor(double)"
                     '()
                     g$fl$16467$12l&&U)))
                ($fl/ g$x1$16445$12l&&U g$x2$16446$12l&&U))
               ($fl-
                 ((case-lambda
                    ((g$fl$16488$12l&&U)
                     (clr-call-internal
                       'system.math
                       '"floor(double)"
                       '()
                       g$fl$16488$12l&&U)))
                  ($fl/ g$x1$16445$12l&&U ($fl- g$x2$16446$12l&&U)))))))
          g$x1$16421$12l&&U
          g$x2$16422$12l&&U)))))
   (g$fldiv0$16247$12l&&U
     g$fldiv0$17541$12l&&U
     (case-lambda
       ((g$x1$16489$12l&&U g$x2$16490$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16489$12l&&U))
            (assertion-violation
              'fldiv0
              '"not a flonum"
              g$x1$16489$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16490$12l&&U))
            (assertion-violation
              'fldiv0
              '"not a flonum"
              g$x2$16490$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$16511$12l&&U g$x2$16512$12l&&U)
                  ((case-lambda
                     ((g$d$16513$12l&&U)
                      ((case-lambda
                         ((g$m$16514$12l&&U)
                          (if ($fl<?
                                g$m$16514$12l&&U
                                (magnitude
                                  ($fl/ g$x2$16512$12l&&U '2.0)))
                            g$d$16513$12l&&U
                            (if ($fl<? '0.0 g$x2$16512$12l&&U)
                              ($fl+ g$d$16513$12l&&U '1.0)
                              ($fl- g$d$16513$12l&&U '1.0)))))
                       ($fl-
                         g$x1$16511$12l&&U
                         ($fl* g$d$16513$12l&&U g$x2$16512$12l&&U)))))
                   ((case-lambda
                      ((g$x1$16535$12l&&U g$x2$16536$12l&&U)
                       (if ($fl<? '0.0 g$x2$16536$12l&&U)
                         ((case-lambda
                            ((g$fl$16557$12l&&U)
                             (clr-call-internal
                               'system.math
                               '"floor(double)"
                               '()
                               g$fl$16557$12l&&U)))
                          ($fl/ g$x1$16535$12l&&U g$x2$16536$12l&&U))
                         ($fl-
                           ((case-lambda
                              ((g$fl$16578$12l&&U)
                               (clr-call-internal
                                 'system.math
                                 '"floor(double)"
                                 '()
                                 g$fl$16578$12l&&U)))
                            ($fl/
                              g$x1$16535$12l&&U
                              ($fl- g$x2$16536$12l&&U)))))))
                    g$x1$16511$12l&&U
                    g$x2$16512$12l&&U))))
               g$x1$16489$12l&&U
               g$x2$16490$12l&&U))))))))
   (g$residual-flmod*$16263$12l&&U
     g$residual-flmod*$17542$12l&&U
     (case-lambda
       ((g$x1$16599$12l&&U g$x2$16600$12l&&U)
        ($fl-
          g$x1$16599$12l&&U
          ($fl*
            ((case-lambda
               ((g$x1$16621$12l&&U g$x2$16622$12l&&U)
                (if ($fl<? '0.0 g$x2$16622$12l&&U)
                  ((case-lambda
                     ((g$fl$16643$12l&&U)
                      (clr-call-internal
                        'system.math
                        '"floor(double)"
                        '()
                        g$fl$16643$12l&&U)))
                   ($fl/ g$x1$16621$12l&&U g$x2$16622$12l&&U))
                  ($fl-
                    ((case-lambda
                       ((g$fl$16664$12l&&U)
                        (clr-call-internal
                          'system.math
                          '"floor(double)"
                          '()
                          g$fl$16664$12l&&U)))
                     ($fl/
                       g$x1$16621$12l&&U
                       ($fl- g$x2$16622$12l&&U)))))))
             g$x1$16599$12l&&U
             g$x2$16600$12l&&U)
            g$x2$16600$12l&&U)))))
   (g$flmod$16264$12l&&U
     g$flmod$17543$12l&&U
     (case-lambda
       ((g$x1$16665$12l&&U g$x2$16666$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16665$12l&&U))
            (assertion-violation
              'flmod
              '"not a flonum"
              g$x1$16665$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16666$12l&&U))
            (assertion-violation
              'flmod
              '"not a flonum"
              g$x2$16666$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$16687$12l&&U g$x2$16688$12l&&U)
                  ($fl-
                    g$x1$16687$12l&&U
                    ($fl*
                      ((case-lambda
                         ((g$x1$16709$12l&&U g$x2$16710$12l&&U)
                          (if ($fl<? '0.0 g$x2$16710$12l&&U)
                            ((case-lambda
                               ((g$fl$16731$12l&&U)
                                (clr-call-internal
                                  'system.math
                                  '"floor(double)"
                                  '()
                                  g$fl$16731$12l&&U)))
                             ($fl/ g$x1$16709$12l&&U g$x2$16710$12l&&U))
                            ($fl-
                              ((case-lambda
                                 ((g$fl$16752$12l&&U)
                                  (clr-call-internal
                                    'system.math
                                    '"floor(double)"
                                    '()
                                    g$fl$16752$12l&&U)))
                               ($fl/
                                 g$x1$16709$12l&&U
                                 ($fl- g$x2$16710$12l&&U)))))))
                       g$x1$16687$12l&&U
                       g$x2$16688$12l&&U)
                      g$x2$16688$12l&&U))))
               g$x1$16665$12l&&U
               g$x2$16666$12l&&U))))))))
   (g$flmod0$16265$12l&&U
     g$flmod0$17544$12l&&U
     (case-lambda
       ((g$x1$16753$12l&&U g$x2$16754$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16753$12l&&U))
            (assertion-violation
              'flmod0
              '"not a flonum"
              g$x1$16753$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16754$12l&&U))
            (assertion-violation
              'flmod0
              '"not a flonum"
              g$x2$16754$12l&&U)
            (void))
          ((case-lambda
             (()
              ($fl-
                g$x1$16753$12l&&U
                ($fl*
                  ((case-lambda
                     ((g$x1$16775$12l&&U g$x2$16776$12l&&U)
                      ((case-lambda
                         ((g$d$16777$12l&&U)
                          ((case-lambda
                             ((g$m$16778$12l&&U)
                              (if ($fl<?
                                    g$m$16778$12l&&U
                                    (magnitude
                                      ($fl/ g$x2$16776$12l&&U '2.0)))
                                g$d$16777$12l&&U
                                (if ($fl<? '0.0 g$x2$16776$12l&&U)
                                  ($fl+ g$d$16777$12l&&U '1.0)
                                  ($fl- g$d$16777$12l&&U '1.0)))))
                           ($fl-
                             g$x1$16775$12l&&U
                             ($fl*
                               g$d$16777$12l&&U
                               g$x2$16776$12l&&U)))))
                       ((case-lambda
                          ((g$x1$16799$12l&&U g$x2$16800$12l&&U)
                           (if ($fl<? '0.0 g$x2$16800$12l&&U)
                             ((case-lambda
                                ((g$fl$16821$12l&&U)
                                 (clr-call-internal
                                   'system.math
                                   '"floor(double)"
                                   '()
                                   g$fl$16821$12l&&U)))
                              ($fl/
                                g$x1$16799$12l&&U
                                g$x2$16800$12l&&U))
                             ($fl-
                               ((case-lambda
                                  ((g$fl$16842$12l&&U)
                                   (clr-call-internal
                                     'system.math
                                     '"floor(double)"
                                     '()
                                     g$fl$16842$12l&&U)))
                                ($fl/
                                  g$x1$16799$12l&&U
                                  ($fl- g$x2$16800$12l&&U)))))))
                        g$x1$16775$12l&&U
                        g$x2$16776$12l&&U))))
                   g$x1$16753$12l&&U
                   g$x2$16754$12l&&U)
                  g$x2$16754$12l&&U)))))))))
   (g$fldiv-and-mod$16266$12l&&U
     g$fldiv-and-mod$17545$12l&&U
     (case-lambda
       ((g$x1$16843$12l&&U g$x2$16844$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16843$12l&&U))
            (assertion-violation
              'fldiv-and-mod
              '"not a flonum"
              g$x1$16843$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16844$12l&&U))
            (assertion-violation
              'fldiv-and-mod
              '"not a flonum"
              g$x2$16844$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$d$16845$12l&&U)
                  (values
                    g$d$16845$12l&&U
                    ($fl-
                      g$x1$16843$12l&&U
                      ($fl* g$d$16845$12l&&U g$x2$16844$12l&&U)))))
               ((case-lambda
                  ((g$x1$16866$12l&&U g$x2$16867$12l&&U)
                   (if ($fl<? '0.0 g$x2$16867$12l&&U)
                     ((case-lambda
                        ((g$fl$16888$12l&&U)
                         (clr-call-internal
                           'system.math
                           '"floor(double)"
                           '()
                           g$fl$16888$12l&&U)))
                      ($fl/ g$x1$16866$12l&&U g$x2$16867$12l&&U))
                     ($fl-
                       ((case-lambda
                          ((g$fl$16909$12l&&U)
                           (clr-call-internal
                             'system.math
                             '"floor(double)"
                             '()
                             g$fl$16909$12l&&U)))
                        ($fl/
                          g$x1$16866$12l&&U
                          ($fl- g$x2$16867$12l&&U)))))))
                g$x1$16843$12l&&U
                g$x2$16844$12l&&U)))))))))
   (g$residual-fldiv*$16282$12l&&U
     g$residual-fldiv*$17546$12l&&U
     (case-lambda
       ((g$x1$16930$12l&&U g$x2$16931$12l&&U)
        (if ($fl<? '0.0 g$x2$16931$12l&&U)
          ((case-lambda
             ((g$fl$16952$12l&&U)
              (clr-call-internal
                'system.math
                '"floor(double)"
                '()
                g$fl$16952$12l&&U)))
           ($fl/ g$x1$16930$12l&&U g$x2$16931$12l&&U))
          ($fl-
            ((case-lambda
               ((g$fl$16973$12l&&U)
                (clr-call-internal
                  'system.math
                  '"floor(double)"
                  '()
                  g$fl$16973$12l&&U)))
             ($fl/ g$x1$16930$12l&&U ($fl- g$x2$16931$12l&&U))))))))
   (g$fldiv$16283$12l&&U
     g$fldiv$17547$12l&&U
     (case-lambda
       ((g$x1$16974$12l&&U g$x2$16975$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$16974$12l&&U))
            (assertion-violation
              'fldiv
              '"not a flonum"
              g$x1$16974$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$16975$12l&&U))
            (assertion-violation
              'fldiv
              '"not a flonum"
              g$x2$16975$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$16996$12l&&U g$x2$16997$12l&&U)
                  (if ($fl<? '0.0 g$x2$16997$12l&&U)
                    ((case-lambda
                       ((g$fl$17018$12l&&U)
                        (clr-call-internal
                          'system.math
                          '"floor(double)"
                          '()
                          g$fl$17018$12l&&U)))
                     ($fl/ g$x1$16996$12l&&U g$x2$16997$12l&&U))
                    ($fl-
                      ((case-lambda
                         ((g$fl$17039$12l&&U)
                          (clr-call-internal
                            'system.math
                            '"floor(double)"
                            '()
                            g$fl$17039$12l&&U)))
                       ($fl/
                         g$x1$16996$12l&&U
                         ($fl- g$x2$16997$12l&&U)))))))
               g$x1$16974$12l&&U
               g$x2$16975$12l&&U))))))))
   (g$fldiv0-and-mod0$16284$12l&&U
     g$fldiv0-and-mod0$17548$12l&&U
     (case-lambda
       ((g$x1$17040$12l&&U g$x2$17041$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$x1$17040$12l&&U))
            (assertion-violation
              'fldiv0-and-mod0
              '"not a flonum"
              g$x1$17040$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$x2$17041$12l&&U))
            (assertion-violation
              'fldiv0-and-mod0
              '"not a flonum"
              g$x2$17041$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$d$17042$12l&&U)
                  (values
                    g$d$17042$12l&&U
                    ($fl-
                      g$x1$17040$12l&&U
                      ($fl* g$d$17042$12l&&U g$x2$17041$12l&&U)))))
               ((case-lambda
                  ((g$x1$17063$12l&&U g$x2$17064$12l&&U)
                   ((case-lambda
                      ((g$d$17065$12l&&U)
                       ((case-lambda
                          ((g$m$17066$12l&&U)
                           (if ($fl<?
                                 g$m$17066$12l&&U
                                 (magnitude
                                   ($fl/ g$x2$17064$12l&&U '2.0)))
                             g$d$17065$12l&&U
                             (if ($fl<? '0.0 g$x2$17064$12l&&U)
                               ($fl+ g$d$17065$12l&&U '1.0)
                               ($fl- g$d$17065$12l&&U '1.0)))))
                        ($fl-
                          g$x1$17063$12l&&U
                          ($fl* g$d$17065$12l&&U g$x2$17064$12l&&U)))))
                    ((case-lambda
                       ((g$x1$17087$12l&&U g$x2$17088$12l&&U)
                        (if ($fl<? '0.0 g$x2$17088$12l&&U)
                          ((case-lambda
                             ((g$fl$17109$12l&&U)
                              (clr-call-internal
                                'system.math
                                '"floor(double)"
                                '()
                                g$fl$17109$12l&&U)))
                           ($fl/ g$x1$17087$12l&&U g$x2$17088$12l&&U))
                          ($fl-
                            ((case-lambda
                               ((g$fl$17130$12l&&U)
                                (clr-call-internal
                                  'system.math
                                  '"floor(double)"
                                  '()
                                  g$fl$17130$12l&&U)))
                             ($fl/
                               g$x1$17087$12l&&U
                               ($fl- g$x2$17088$12l&&U)))))))
                     g$x1$17063$12l&&U
                     g$x2$17064$12l&&U))))
                g$x1$17040$12l&&U
                g$x2$17041$12l&&U)))))))))
   (g$flinteger?$16285$12l&&U
     g$flinteger?$17549$12l&&U
     (case-lambda
       ((g$fl$17131$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17131$12l&&U))
            (assertion-violation
              'flinteger?
              '"not a flonum"
              g$fl$17131$12l&&U)
            (void))
          ((case-lambda
             (()
              ($fl=?
                '0.0
                ((case-lambda
                   ((g$x1$17152$12l&&U g$x2$17153$12l&&U)
                    ($fl-
                      g$x1$17152$12l&&U
                      ($fl*
                        ((case-lambda
                           ((g$x1$17174$12l&&U g$x2$17175$12l&&U)
                            (if ($fl<? '0.0 g$x2$17175$12l&&U)
                              ((case-lambda
                                 ((g$fl$17196$12l&&U)
                                  (clr-call-internal
                                    'system.math
                                    '"floor(double)"
                                    '()
                                    g$fl$17196$12l&&U)))
                               ($fl/
                                 g$x1$17174$12l&&U
                                 g$x2$17175$12l&&U))
                              ($fl-
                                ((case-lambda
                                   ((g$fl$17217$12l&&U)
                                    (clr-call-internal
                                      'system.math
                                      '"floor(double)"
                                      '()
                                      g$fl$17217$12l&&U)))
                                 ($fl/
                                   g$x1$17174$12l&&U
                                   ($fl- g$x2$17175$12l&&U)))))))
                         g$x1$17152$12l&&U
                         g$x2$17153$12l&&U)
                        g$x2$17153$12l&&U))))
                 g$fl$17131$12l&&U
                 '1.0)))))))))
   (g$flfinite?$16286$12l&&U
     g$flfinite?$17550$12l&&U
     (case-lambda
       ((g$fl$17218$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17218$12l&&U))
            (assertion-violation
              'flfinite?
              '"not a flonum"
              g$fl$17218$12l&&U)
            (void))
          ((case-lambda
             (()
              (not ((case-lambda
                      ((g$fl$17239$12l&&U)
                       (clr-call-internal
                         'system.double
                         'isinfinity
                         '()
                         g$fl$17239$12l&&U)))
                    g$fl$17218$12l&&U)))))))))
   (g$residual-flinfinite?*$16302$12l&&U
     g$residual-flinfinite?*$17551$12l&&U
     (case-lambda
       ((g$fl$17260$12l&&U)
        (clr-call-internal
          'system.double
          'isinfinity
          '()
          g$fl$17260$12l&&U))))
   (g$flinfinite?$16303$12l&&U
     g$flinfinite?$17552$12l&&U
     (case-lambda
       ((g$fl$17261$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17261$12l&&U))
            (assertion-violation
              'flinfinite?
              '"not a flonum"
              g$fl$17261$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$fl$17282$12l&&U)
                  (clr-call-internal
                    'system.double
                    'isinfinity
                    '()
                    g$fl$17282$12l&&U)))
               g$fl$17261$12l&&U))))))))
   (g$flnan?$16304$12l&&U
     g$flnan?$17553$12l&&U
     (case-lambda
       ((g$fl$17283$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17283$12l&&U))
            (assertion-violation
              'flnan?
              '"not a flonum"
              g$fl$17283$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.double
                'isnan
                '()
                g$fl$17283$12l&&U))))))))
   (g$flsin$16305$12l&&U
     g$flsin$17554$12l&&U
     (case-lambda
       ((g$fl$17284$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17284$12l&&U))
            (assertion-violation
              'flsin
              '"not a flonum"
              g$fl$17284$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'sin
                '()
                g$fl$17284$12l&&U))))))))
   (g$flcos$16306$12l&&U
     g$flcos$17555$12l&&U
     (case-lambda
       ((g$fl$17285$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17285$12l&&U))
            (assertion-violation
              'flcos
              '"not a flonum"
              g$fl$17285$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'cos
                '()
                g$fl$17285$12l&&U))))))))
   (g$fltan$16307$12l&&U
     g$fltan$17556$12l&&U
     (case-lambda
       ((g$fl$17286$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17286$12l&&U))
            (assertion-violation
              'fltan
              '"not a flonum"
              g$fl$17286$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'tan
                '()
                g$fl$17286$12l&&U))))))))
   (g$flasin$16308$12l&&U
     g$flasin$17557$12l&&U
     (case-lambda
       ((g$fl$17287$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17287$12l&&U))
            (assertion-violation
              'flasin
              '"not a flonum"
              g$fl$17287$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'asin
                '()
                g$fl$17287$12l&&U))))))))
   (g$flacos$16309$12l&&U
     g$flacos$17558$12l&&U
     (case-lambda
       ((g$fl$17288$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17288$12l&&U))
            (assertion-violation
              'flacos
              '"not a flonum"
              g$fl$17288$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'acos
                '()
                g$fl$17288$12l&&U))))))))
   (g$flatan$16310$12l&&U
     g$flatan$17559$12l&&U
     (case-lambda
       ((g$fl$17289$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17289$12l&&U))
            (assertion-violation
              'flatan
              '"not a flonum"
              g$fl$17289$12l&&U)
            (void))
          (clr-call-internal 'system.math 'atan '() g$fl$17289$12l&&U)))
       ((g$fl1$17290$12l&&U g$fl2$17291$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl1$17290$12l&&U))
            (assertion-violation
              'flatan
              '"not a flonum"
              g$fl1$17290$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$fl2$17291$12l&&U))
            (assertion-violation
              'flatan
              '"not a flonum"
              g$fl2$17291$12l&&U)
            (void))
          (clr-call-internal
            'system.math
            'atan2
            '()
            g$fl1$17290$12l&&U
            g$fl2$17291$12l&&U)))))
   (g$fllog$16311$12l&&U
     g$fllog$17560$12l&&U
     (case-lambda
       ((g$fl$17292$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17292$12l&&U))
            (assertion-violation
              'fllog
              '"not a flonum"
              g$fl$17292$12l&&U)
            (void))
          (clr-call-internal 'system.math 'log '() g$fl$17292$12l&&U)))
       ((g$fl1$17293$12l&&U g$fl2$17294$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl1$17293$12l&&U))
            (assertion-violation
              'fllog
              '"not a flonum"
              g$fl1$17293$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$fl2$17294$12l&&U))
            (assertion-violation
              'fllog
              '"not a flonum"
              g$fl2$17294$12l&&U)
            (void))
          (clr-call-internal
            'system.math
            'log
            '()
            g$fl1$17293$12l&&U
            g$fl2$17294$12l&&U)))))
   (g$flsqrt$16312$12l&&U
     g$flsqrt$17561$12l&&U
     (case-lambda
       ((g$fl$17295$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17295$12l&&U))
            (assertion-violation
              'flsqrt
              '"not a flonum"
              g$fl$17295$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'sqrt
                '()
                g$fl$17295$12l&&U))))))))
   (g$flexp$16313$12l&&U
     g$flexp$17562$12l&&U
     (case-lambda
       ((g$fl$17296$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17296$12l&&U))
            (assertion-violation
              'flexp
              '"not a flonum"
              g$fl$17296$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'exp
                '()
                g$fl$17296$12l&&U))))))))
   (g$flexpt$16314$12l&&U
     g$flexpt$17563$12l&&U
     (case-lambda
       ((g$fl$17297$12l&&U g$n$17298$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17297$12l&&U))
            (assertion-violation
              'flexpt
              '"not a flonum"
              g$fl$17297$12l&&U)
            (void))
          (if (not (g$flonum?$12583$12l&&U g$n$17298$12l&&U))
            (assertion-violation
              'flexpt
              '"not a flonum"
              g$n$17298$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'pow
                '()
                g$fl$17297$12l&&U
                g$n$17298$12l&&U))))))))
   (g$flceiling$16315$12l&&U
     g$flceiling$17564$12l&&U
     (case-lambda
       ((g$fl$17299$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17299$12l&&U))
            (assertion-violation
              'flceiling
              '"not a flonum"
              g$fl$17299$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                '"ceiling(double)"
                '()
                g$fl$17299$12l&&U))))))))
   (g$residual-flfloor*$16331$12l&&U
     g$residual-flfloor*$17565$12l&&U
     (case-lambda
       ((g$fl$17320$12l&&U)
        (clr-call-internal
          'system.math
          '"floor(double)"
          '()
          g$fl$17320$12l&&U))))
   (g$flfloor$16332$12l&&U
     g$flfloor$17566$12l&&U
     (case-lambda
       ((g$fl$17321$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17321$12l&&U))
            (assertion-violation
              'flfloor
              '"not a flonum"
              g$fl$17321$12l&&U)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$fl$17342$12l&&U)
                  (clr-call-internal
                    'system.math
                    '"floor(double)"
                    '()
                    g$fl$17342$12l&&U)))
               g$fl$17321$12l&&U))))))))
   (g$fltruncate$16333$12l&&U
     g$fltruncate$17567$12l&&U
     (case-lambda
       ((g$fl$17343$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17343$12l&&U))
            (assertion-violation
              'fltruncate
              '"not a flonum"
              g$fl$17343$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                '"truncate(double)"
                '()
                g$fl$17343$12l&&U))))))))
   (g$flround$16334$12l&&U
     g$flround$17568$12l&&U
     (case-lambda
       ((g$fl$17344$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17344$12l&&U))
            (assertion-violation
              'flround
              '"not a flonum"
              g$fl$17344$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                '"round(double)"
                '()
                g$fl$17344$12l&&U))))))))
   (g$flabs$16335$12l&&U
     g$flabs$17569$12l&&U
     (case-lambda
       ((g$fl$17345$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$fl$17345$12l&&U))
            (assertion-violation
              'flabs
              '"not a flonum"
              g$fl$17345$12l&&U)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                '"abs(double)"
                '()
                g$fl$17345$12l&&U))))))))
   (g$flpositive?$16336$12l&&U
     g$flpositive?$17570$12l&&U
     (case-lambda
       ((g$r$17346$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$r$17346$12l&&U))
            (assertion-violation
              'flpositive?
              '"not a flonum"
              g$r$17346$12l&&U)
            (void))
          ((case-lambda (() ($fl<? '0.0 g$r$17346$12l&&U))))))))
   (g$flnegative?$16337$12l&&U
     g$flnegative?$17571$12l&&U
     (case-lambda
       ((g$r$17347$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$r$17347$12l&&U))
            (assertion-violation
              'flnegative?
              '"not a flonum"
              g$r$17347$12l&&U)
            (void))
          ((case-lambda (() ($fl>? '0.0 g$r$17347$12l&&U))))))))
   (g$flzero?$16338$12l&&U
     g$flzero?$17572$12l&&U
     (case-lambda
       ((g$r$17348$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$r$17348$12l&&U))
            (assertion-violation
              'flzero?
              '"not a flonum"
              g$r$17348$12l&&U)
            (void))
          ((case-lambda (() ($fl=? '0.0 g$r$17348$12l&&U))))))))
   (g$fleven?$16339$12l&&U
     g$fleven?$17573$12l&&U
     (case-lambda
       ((g$n$17349$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$n$17349$12l&&U))
            (assertion-violation
              'fleven?
              '"not a flonum"
              g$n$17349$12l&&U)
            (void))
          ((case-lambda
             (()
              (begin
                (if (not (integer-valued? g$n$17349$12l&&U))
                  (assertion-violation
                    'fleven?
                    '"not integer valued"
                    g$n$17349$12l&&U)
                  (void))
                ($fl=?
                  '0.0
                  ((case-lambda
                     ((g$x1$17370$12l&&U g$x2$17371$12l&&U)
                      ($fl-
                        g$x1$17370$12l&&U
                        ($fl*
                          ((case-lambda
                             ((g$x1$17392$12l&&U g$x2$17393$12l&&U)
                              (if ($fl<? '0.0 g$x2$17393$12l&&U)
                                ((case-lambda
                                   ((g$fl$17414$12l&&U)
                                    (clr-call-internal
                                      'system.math
                                      '"floor(double)"
                                      '()
                                      g$fl$17414$12l&&U)))
                                 ($fl/
                                   g$x1$17392$12l&&U
                                   g$x2$17393$12l&&U))
                                ($fl-
                                  ((case-lambda
                                     ((g$fl$17435$12l&&U)
                                      (clr-call-internal
                                        'system.math
                                        '"floor(double)"
                                        '()
                                        g$fl$17435$12l&&U)))
                                   ($fl/
                                     g$x1$17392$12l&&U
                                     ($fl- g$x2$17393$12l&&U)))))))
                           g$x1$17370$12l&&U
                           g$x2$17371$12l&&U)
                          g$x2$17371$12l&&U))))
                   g$n$17349$12l&&U
                   '2.0))))))))))
   (g$flodd?$16340$12l&&U
     g$flodd?$17574$12l&&U
     (case-lambda
       ((g$n$17436$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$n$17436$12l&&U))
            (assertion-violation
              'flodd?
              '"not a flonum"
              g$n$17436$12l&&U)
            (void))
          ((case-lambda
             (()
              (begin
                (if (not (integer-valued? g$n$17436$12l&&U))
                  (assertion-violation
                    'flodd?
                    '"not integer valued"
                    g$n$17436$12l&&U)
                  (void))
                ($fl=?
                  '1.0
                  ((case-lambda
                     ((g$x1$17457$12l&&U g$x2$17458$12l&&U)
                      ($fl-
                        g$x1$17457$12l&&U
                        ($fl*
                          ((case-lambda
                             ((g$x1$17479$12l&&U g$x2$17480$12l&&U)
                              (if ($fl<? '0.0 g$x2$17480$12l&&U)
                                ((case-lambda
                                   ((g$fl$17501$12l&&U)
                                    (clr-call-internal
                                      'system.math
                                      '"floor(double)"
                                      '()
                                      g$fl$17501$12l&&U)))
                                 ($fl/
                                   g$x1$17479$12l&&U
                                   g$x2$17480$12l&&U))
                                ($fl-
                                  ((case-lambda
                                     ((g$fl$17522$12l&&U)
                                      (clr-call-internal
                                        'system.math
                                        '"floor(double)"
                                        '()
                                        g$fl$17522$12l&&U)))
                                   ($fl/
                                     g$x1$17479$12l&&U
                                     ($fl- g$x2$17480$12l&&U)))))))
                           g$x1$17457$12l&&U
                           g$x2$17458$12l&&U)
                          g$x2$17458$12l&&U))))
                   g$n$17436$12l&&U
                   '2.0))))))))))
   (g$flmax$16341$12l&&U
     g$flmax$17575$12l&&U
     (case-lambda
       ((g$a$17523$12l&&U . g$rest$17524$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$a$17523$12l&&U))
            (assertion-violation
              'flmax
              '"not a flonum"
              g$a$17523$12l&&U)
            (void))
          (g$fold-left$11838$12l&&U
            (case-lambda
              ((g$a$17525$12l&&U g$b$17526$12l&&U)
               (if (g$fl<?$16227$12l&&U
                     g$a$17525$12l&&U
                     g$b$17526$12l&&U)
                 g$b$17526$12l&&U
                 g$a$17525$12l&&U)))
            g$a$17523$12l&&U
            g$rest$17524$12l&&U)))))
   (g$flmin$16342$12l&&U
     g$flmin$17576$12l&&U
     (case-lambda
       ((g$a$17527$12l&&U . g$rest$17528$12l&&U)
        (begin
          (if (not (g$flonum?$12583$12l&&U g$a$17527$12l&&U))
            (assertion-violation
              'flmin
              '"not a flonum"
              g$a$17527$12l&&U)
            (void))
          (g$fold-left$11838$12l&&U
            (case-lambda
              ((g$a$17529$12l&&U g$b$17530$12l&&U)
               (if (g$fl>?$16229$12l&&U
                     g$a$17529$12l&&U
                     g$b$17530$12l&&U)
                 g$b$17530$12l&&U
                 g$a$17529$12l&&U)))
            g$a$17527$12l&&U
            g$rest$17528$12l&&U))))))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$17578$12l&&U
     g$using$17598$12l&&U
     (clr-using-internal 'ironscheme.runtime))
   (g$put-datum$17579$12l&&U
     g$put-datum$17599$12l&&U
     (case-lambda
       ((g$p$17587$12l&&U g$datum$17588$12l&&U)
        (write g$datum$17588$12l&&U g$p$17587$12l&&U))))
   (g$get-datum$17580$12l&&U g$get-datum$17600$12l&&U read)
   (g$get-output-string$17581$12l&&U
     g$get-output-string$17601$12l&&U
     (case-lambda
       ((g$port$17589$12l&&U)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$17589$12l&&U))))
   (g$open-output-string$17582$12l&&U
     g$open-output-string$17602$12l&&U
     (case-lambda
       (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$17583$12l&&U
     g$open-string-output-port$17603$12l&&U
     (case-lambda
       (()
        ((case-lambda
           ((g$p$17590$12l&&U)
            (values
              g$p$17590$12l&&U
              (case-lambda
                (()
                 (g$get-output-string$17581$12l&&U
                   g$p$17590$12l&&U))))))
         (g$open-output-string$17582$12l&&U)))))
   (g$port?$17584$12l&&U
     g$port?$17604$12l&&U
     (case-lambda
       ((g$obj$17591$12l&&U)
        ((case-lambda
           ((g$t$17592$12l&&U)
            (if g$t$17592$12l&&U
              g$t$17592$12l&&U
              (begin '#f (binary-port? g$obj$17591$12l&&U)))))
         (textual-port? g$obj$17591$12l&&U)))))
   (g$call-with-string-output-port$17585$12l&&U
     g$call-with-string-output-port$17605$12l&&U
     (case-lambda
       ((g$proc$17593$12l&&U)
        ((case-lambda
           ((g$p$17594$12l&&U)
            (begin
              (g$call-with-port$17586$12l&&U
                g$p$17594$12l&&U
                g$proc$17593$12l&&U)
              (g$get-output-string$17581$12l&&U g$p$17594$12l&&U))))
         (g$open-output-string$17582$12l&&U)))))
   (g$call-with-port$17586$12l&&U
     g$call-with-port$17606$12l&&U
     (case-lambda
       ((g$port$17595$12l&&U g$proc$17596$12l&&U)
        ((case-lambda
           ((g$r$17597$12l&&U)
            (begin (close-port g$port$17595$12l&&U) g$r$17597$12l&&U)))
         (g$proc$17596$12l&&U g$port$17595$12l&&U))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$17607$12l&&U
     g$peek-char$17662$12l&&U
     (case-lambda
       (() (g$peek-char$17607$12l&&U (current-input-port)))
       ((g$port$17634$12l&&U) (lookahead-char g$port$17634$12l&&U))))
   (g$read-char$17608$12l&&U
     g$read-char$17663$12l&&U
     (case-lambda
       (() (g$read-char$17608$12l&&U (current-input-port)))
       ((g$port$17635$12l&&U) (get-char g$port$17635$12l&&U))))
   (g$write-char$17609$12l&&U
     g$write-char$17664$12l&&U
     (case-lambda
       ((g$chr$17636$12l&&U)
        (g$write-char$17609$12l&&U
          g$chr$17636$12l&&U
          (current-output-port)))
       ((g$chr$17637$12l&&U g$port$17638$12l&&U)
        (put-char g$port$17638$12l&&U g$chr$17637$12l&&U))))
   (g$with-input-from-file$17629$12l&&U
     g$with-input-from-file$17665$12l&&U
     (case-lambda
       ((g$filename$17639$12l&&U g$thunk$17640$12l&&U)
        ((case-lambda
           ((g$current-input-port$17643$12l&&U g$t$17644$12l&&U)
            ((case-lambda
               ((g$swap$17645$12l&&U)
                (dynamic-wind
                  g$swap$17645$12l&&U
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$17640$12l&&U)))
                       (case-lambda
                         (()
                          (close-input-port (current-input-port)))))))
                  g$swap$17645$12l&&U)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$17646$12l&&U)
                    (begin
                      (g$current-input-port$17643$12l&&U
                        g$t$17644$12l&&U)
                      (set! g$t$17644$12l&&U g$t$17646$12l&&U))))
                 (g$current-input-port$17643$12l&&U)))))))
         current-input-port
         (open-input-file g$filename$17639$12l&&U)))))
   (g$with-output-to-file$17630$12l&&U
     g$with-output-to-file$17666$12l&&U
     (case-lambda
       ((g$filename$17647$12l&&U g$thunk$17648$12l&&U)
        ((case-lambda
           ((g$current-output-port$17651$12l&&U g$t$17652$12l&&U)
            ((case-lambda
               ((g$swap$17653$12l&&U)
                (dynamic-wind
                  g$swap$17653$12l&&U
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$17648$12l&&U)))
                       (case-lambda
                         (()
                          (close-output-port (current-output-port)))))))
                  g$swap$17653$12l&&U)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$17654$12l&&U)
                    (begin
                      (g$current-output-port$17651$12l&&U
                        g$t$17652$12l&&U)
                      (set! g$t$17652$12l&&U g$t$17654$12l&&U))))
                 (g$current-output-port$17651$12l&&U)))))))
         current-output-port
         (open-output-file g$filename$17647$12l&&U)))))
   (g$call-with-input-file$17631$12l&&U
     g$call-with-input-file$17667$12l&&U
     (case-lambda
       ((g$filename$17655$12l&&U g$proc$17656$12l&&U)
        ((case-lambda
           ((g$p$17657$12l&&U)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$17656$12l&&U g$p$17657$12l&&U)))
              (case-lambda (() (close-input-port g$p$17657$12l&&U))))))
         (open-input-file g$filename$17655$12l&&U)))))
   (g$call-with-output-file$17632$12l&&U
     g$call-with-output-file$17668$12l&&U
     (case-lambda
       ((g$filename$17658$12l&&U g$proc$17659$12l&&U)
        ((case-lambda
           ((g$p$17660$12l&&U)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$17659$12l&&U g$p$17660$12l&&U)))
              (case-lambda (() (close-output-port g$p$17660$12l&&U))))))
         (open-output-file g$filename$17658$12l&&U)))))
   (g$newline$17633$12l&&U
     g$newline$17669$12l&&U
     (case-lambda
       (() (g$newline$17633$12l&&U (current-output-port)))
       ((g$port$17661$12l&&U) (display '"
" g$port$17661$12l&&U)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$8151$17670$12l&&U
     g$8151$17783$12l&&U
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$8153$17671$12l&&U g$8153$17784$12l&&U '#f)
   (g$8152$17672$12l&&U
     g$8152$17785$12l&&U
     (make-record-constructor-descriptor
       g$8151$17670$12l&&U
       '#f
       g$8153$17671$12l&&U))
   (g$enum?$17675$12l&&U
     g$enum?$17786$12l&&U
     (record-predicate g$8151$17670$12l&&U))
   (g$make-enum$17676$12l&&U
     g$make-enum$17787$12l&&U
     (record-constructor g$8152$17672$12l&&U))
   (g$enum-value$17677$12l&&U
     g$enum-value$17788$12l&&U
     (record-accessor g$8151$17670$12l&&U '0))
   (g$enum-info$17678$12l&&U
     g$enum-info$17789$12l&&U
     (record-accessor g$8151$17670$12l&&U '1))
   (g$8162$17679$12l&&U
     g$8162$17790$12l&&U
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$8164$17680$12l&&U g$8164$17791$12l&&U '#f)
   (g$8163$17681$12l&&U
     g$8163$17792$12l&&U
     (make-record-constructor-descriptor
       g$8162$17679$12l&&U
       '#f
       g$8164$17680$12l&&U))
   (g$enum-universe?$17684$12l&&U
     g$enum-universe?$17793$12l&&U
     (record-predicate g$8162$17679$12l&&U))
   (g$make-enum-universe$17685$12l&&U
     g$make-enum-universe$17794$12l&&U
     (record-constructor g$8163$17681$12l&&U))
   (g$enum-universe-id$17686$12l&&U
     g$enum-universe-id$17795$12l&&U
     (record-accessor g$8162$17679$12l&&U '0))
   (g$enum-universe-symbols$17687$12l&&U
     g$enum-universe-symbols$17796$12l&&U
     (record-accessor g$8162$17679$12l&&U '1))
   (g$enum-universe-mapping$17688$12l&&U
     g$enum-universe-mapping$17797$12l&&U
     (record-accessor g$8162$17679$12l&&U '2))
   (g$enum-universe-value$17689$12l&&U
     g$enum-universe-value$17798$12l&&U
     (record-accessor g$8162$17679$12l&&U '3))
   (g$enum-type=?$17690$12l&&U
     g$enum-type=?$17799$12l&&U
     (case-lambda
       ((g$enumset1$17712$12l&&U g$enumset2$17713$12l&&U)
        (eq? (g$enum-universe-id$17686$12l&&U
               (g$enum-info$17678$12l&&U g$enumset1$17712$12l&&U))
             (g$enum-universe-id$17686$12l&&U
               (g$enum-info$17678$12l&&U g$enumset2$17713$12l&&U))))))
   (g$get-symbols$17691$12l&&U
     g$get-symbols$17800$12l&&U
     (case-lambda
       ((g$enumset$17714$12l&&U)
        (g$enum-universe-symbols$17687$12l&&U
          (g$enum-info$17678$12l&&U g$enumset$17714$12l&&U)))))
   (g$get-value$17692$12l&&U
     g$get-value$17801$12l&&U
     (case-lambda
       ((g$enumset$17715$12l&&U g$s$17716$12l&&U)
        (g$hashtable-ref$12691$12l&&U
          (g$enum-universe-mapping$17688$12l&&U
            (g$enum-info$17678$12l&&U g$enumset$17715$12l&&U))
          g$s$17716$12l&&U
          '#f))))
   (g$assert-enum$17693$12l&&U
     g$assert-enum$17802$12l&&U
     (case-lambda
       ((g$who$17717$12l&&U g$enumset$17718$12l&&U)
        (if (not (g$enum?$17675$12l&&U g$enumset$17718$12l&&U))
          (assertion-violation
            g$who$17717$12l&&U
            '"not an enumeration"
            g$enumset$17718$12l&&U)
          (void)))))
   (g$make-info$17694$12l&&U
     g$make-info$17803$12l&&U
     (case-lambda
       ((g$symbols$17719$12l&&U)
        ((case-lambda
           ((g$ht$17720$12l&&U)
            ((letrec ((g$f$17721$12l&&U
                        (case-lambda
                          ((g$s$17722$12l&&U
                             g$a$17723$12l&&U
                             g$mask$17724$12l&&U)
                           (if (null? g$s$17722$12l&&U)
                             (values
                               (reverse! g$a$17723$12l&&U)
                               g$ht$17720$12l&&U
                               (- g$mask$17724$12l&&U '1))
                             ((case-lambda
                                ((g$n$17725$12l&&U)
                                 (if (g$symbol?$12579$12l&&U
                                       g$n$17725$12l&&U)
                                   (if (g$hashtable-contains?$12694$12l&&U
                                         g$ht$17720$12l&&U
                                         g$n$17725$12l&&U)
                                     (g$f$17721$12l&&U
                                       (cdr g$s$17722$12l&&U)
                                       g$a$17723$12l&&U
                                       g$mask$17724$12l&&U)
                                     (begin
                                       (g$hashtable-set!$12692$12l&&U
                                         g$ht$17720$12l&&U
                                         g$n$17725$12l&&U
                                         g$mask$17724$12l&&U)
                                       (g$f$17721$12l&&U
                                         (cdr g$s$17722$12l&&U)
                                         (cons
                                           g$n$17725$12l&&U
                                           g$a$17723$12l&&U)
                                         (g$bitwise-arithmetic-shift-left$13749$12l&&U
                                           g$mask$17724$12l&&U
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$17725$12l&&U))))
                              (car g$s$17722$12l&&U)))))))
               g$f$17721$12l&&U)
             g$symbols$17719$12l&&U
             '()
             '1)))
         (g$make-eq-hashtable$12688$12l&&U)))))
   (g$make-name$17695$12l&&U
     g$make-name$17804$12l&&U
     (case-lambda
       ((g$symbols$17726$12l&&U)
        (string->symbol
          (g$format$17843$12l&&U '"~a" g$symbols$17726$12l&&U)))))
   (g$make-enumeration$17696$12l&&U
     g$make-enumeration$17805$12l&&U
     (case-lambda
       ((g$symbols$17727$12l&&U)
        (call-with-values
          (case-lambda
            (() (g$make-info$17694$12l&&U g$symbols$17727$12l&&U)))
          (case-lambda
            ((g$s$17731$12l&&U
               g$mapping$17732$12l&&U
               g$mask$17733$12l&&U)
             ((case-lambda
                ((g$mask$17734$12l&&U
                   g$mapping$17735$12l&&U
                   g$s$17736$12l&&U)
                 (g$make-enum$17676$12l&&U
                   g$mask$17734$12l&&U
                   (g$make-enum-universe$17685$12l&&U
                     (g$make-name$17695$12l&&U g$s$17736$12l&&U)
                     g$s$17736$12l&&U
                     g$mapping$17735$12l&&U
                     g$mask$17734$12l&&U))))
              g$mask$17733$12l&&U
              g$mapping$17732$12l&&U
              g$s$17731$12l&&U)))))))
   (g$enum-set-universe$17697$12l&&U
     g$enum-set-universe$17806$12l&&U
     (case-lambda
       ((g$enumset$17737$12l&&U)
        (begin
          (g$assert-enum$17693$12l&&U
            'enum-set-universe
            g$enumset$17737$12l&&U)
          ((case-lambda
             ((g$ei$17738$12l&&U)
              (g$make-enum$17676$12l&&U
                (g$enum-universe-value$17689$12l&&U g$ei$17738$12l&&U)
                g$ei$17738$12l&&U)))
           (g$enum-info$17678$12l&&U g$enumset$17737$12l&&U))))))
   (g$enum-set-indexer$17698$12l&&U
     g$enum-set-indexer$17807$12l&&U
     (case-lambda
       ((g$enumset$17739$12l&&U)
        (begin
          (g$assert-enum$17693$12l&&U
            'enum-set-indexer
            g$enumset$17739$12l&&U)
          (case-lambda
            ((g$symbol$17740$12l&&U)
             (begin
               (if (not (g$symbol?$12579$12l&&U g$symbol$17740$12l&&U))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$17740$12l&&U)
                 (void))
               ((case-lambda
                  ((g$v$17741$12l&&U)
                   (if g$v$17741$12l&&U
                     (- (bitwise-length g$v$17741$12l&&U) '1)
                     '#f)))
                (g$get-value$17692$12l&&U
                  g$enumset$17739$12l&&U
                  g$symbol$17740$12l&&U)))))))))
   (g$enum-set-constructor$17699$12l&&U
     g$enum-set-constructor$17808$12l&&U
     (case-lambda
       ((g$enumset$17742$12l&&U)
        (begin
          (g$assert-enum$17693$12l&&U
            'enum-set-constructor
            g$enumset$17742$12l&&U)
          (case-lambda
            ((g$symbols$17743$12l&&U)
             ((letrec ((g$f$17744$12l&&U
                         (case-lambda
                           ((g$v$17745$12l&&U g$s$17746$12l&&U)
                            (if (null? g$s$17746$12l&&U)
                              (g$make-enum$17676$12l&&U
                                g$v$17745$12l&&U
                                (g$enum-info$17678$12l&&U
                                  g$enumset$17742$12l&&U))
                              ((case-lambda
                                 ((g$n$17747$12l&&U)
                                  (if (g$symbol?$12579$12l&&U
                                        g$n$17747$12l&&U)
                                    ((case-lambda
                                       ((g$v*$17748$12l&&U)
                                        (if g$v*$17748$12l&&U
                                          (g$f$17744$12l&&U
                                            (bitwise-ior
                                              g$v$17745$12l&&U
                                              g$v*$17748$12l&&U)
                                            (cdr g$s$17746$12l&&U))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$17747$12l&&U))))
                                     (g$get-value$17692$12l&&U
                                       g$enumset$17742$12l&&U
                                       g$n$17747$12l&&U))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$17747$12l&&U))))
                               (car g$s$17746$12l&&U)))))))
                g$f$17744$12l&&U)
              '0
              g$symbols$17743$12l&&U)))))))
   (g$enum-set->list$17700$12l&&U
     g$enum-set->list$17809$12l&&U
     (case-lambda
       ((g$enumset$17749$12l&&U)
        (begin
          (g$assert-enum$17693$12l&&U
            'enum-set->list
            g$enumset$17749$12l&&U)
          ((case-lambda
             ((g$value$17750$12l&&U)
              ((letrec ((g$f$17751$12l&&U
                          (case-lambda
                            ((g$s$17752$12l&&U g$l$17753$12l&&U)
                             (if (null? g$s$17752$12l&&U)
                               (reverse! g$l$17753$12l&&U)
                               (if (g$zero?$12626$12l&&U
                                     (bitwise-and
                                       (g$get-value$17692$12l&&U
                                         g$enumset$17749$12l&&U
                                         (car g$s$17752$12l&&U))
                                       g$value$17750$12l&&U))
                                 (g$f$17751$12l&&U
                                   (cdr g$s$17752$12l&&U)
                                   g$l$17753$12l&&U)
                                 (g$f$17751$12l&&U
                                   (cdr g$s$17752$12l&&U)
                                   (cons
                                     (car g$s$17752$12l&&U)
                                     g$l$17753$12l&&U))))))))
                 g$f$17751$12l&&U)
               (g$get-symbols$17691$12l&&U g$enumset$17749$12l&&U)
               '())))
           (g$enum-value$17677$12l&&U g$enumset$17749$12l&&U))))))
   (g$enum-set-member?$17701$12l&&U
     g$enum-set-member?$17810$12l&&U
     (case-lambda
       ((g$symbol$17754$12l&&U g$enumset$17755$12l&&U)
        (begin
          (if (not (g$symbol?$12579$12l&&U g$symbol$17754$12l&&U))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$17754$12l&&U)
            (void))
          (g$assert-enum$17693$12l&&U
            'enum-set-member?
            g$enumset$17755$12l&&U)
          ((case-lambda
             ((g$v$17756$12l&&U)
              (if g$v$17756$12l&&U
                (not (g$zero?$12626$12l&&U
                       (bitwise-and
                         g$v$17756$12l&&U
                         (g$enum-value$17677$12l&&U
                           g$enumset$17755$12l&&U))))
                '#f)))
           (g$get-value$17692$12l&&U
             g$enumset$17755$12l&&U
             g$symbol$17754$12l&&U))))))
   (g$enum-set-subset?$17702$12l&&U
     g$enum-set-subset?$17811$12l&&U
     (case-lambda
       ((g$enumset1$17757$12l&&U g$enumset2$17758$12l&&U)
        (begin
          (g$assert-enum$17693$12l&&U
            'enum-set-subset?
            g$enumset1$17757$12l&&U)
          (g$assert-enum$17693$12l&&U
            'enum-set-subset?
            g$enumset2$17758$12l&&U)
          ((case-lambda
             ((g$v1$17759$12l&&U g$v2$17760$12l&&U)
              (if (g$enum-type=?$17690$12l&&U
                    g$enumset1$17757$12l&&U
                    g$enumset2$17758$12l&&U)
                (= (bitwise-and g$v1$17759$12l&&U g$v2$17760$12l&&U)
                   g$v1$17759$12l&&U)
                ((letrec ((g$f$17761$12l&&U
                            (case-lambda
                              ((g$s$17762$12l&&U)
                               (if (null? g$s$17762$12l&&U)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$17763$12l&&U
                                       g$v2*$17764$12l&&U)
                                     (if g$v2*$17764$12l&&U
                                       ((case-lambda
                                          ((g$has1$17765$12l&&U
                                             g$has2$17766$12l&&U)
                                           (if (if g$has1$17765$12l&&U
                                                 (begin
                                                   '#f
                                                   (not g$has2$17766$12l&&U))
                                                 '#f)
                                             '#f
                                             (g$f$17761$12l&&U
                                               (cdr g$s$17762$12l&&U)))))
                                        (not (g$zero?$12626$12l&&U
                                               (bitwise-and
                                                 g$v1$17759$12l&&U
                                                 g$v1*$17763$12l&&U)))
                                        (not (g$zero?$12626$12l&&U
                                               (bitwise-and
                                                 g$v2$17760$12l&&U
                                                 g$v2*$17764$12l&&U))))
                                       '#f)))
                                  (g$get-value$17692$12l&&U
                                    g$enumset1$17757$12l&&U
                                    (car g$s$17762$12l&&U))
                                  (g$get-value$17692$12l&&U
                                    g$enumset2$17758$12l&&U
                                    (car g$s$17762$12l&&U))))))))
                   g$f$17761$12l&&U)
                 (g$get-symbols$17691$12l&&U
                   g$enumset1$17757$12l&&U)))))
           (g$enum-value$17677$12l&&U g$enumset1$17757$12l&&U)
           (g$enum-value$17677$12l&&U g$enumset2$17758$12l&&U))))))
   (g$enum-set=?$17703$12l&&U
     g$enum-set=?$17812$12l&&U
     (case-lambda
       ((g$enumset1$17767$12l&&U g$enumset2$17768$12l&&U)
        (begin
          (g$assert-enum$17693$12l&&U
            'enum-set=?
            g$enumset1$17767$12l&&U)
          (g$assert-enum$17693$12l&&U
            'enum-set=?
            g$enumset2$17768$12l&&U)
          (if (g$enum-set-subset?$17702$12l&&U
                g$enumset1$17767$12l&&U
                g$enumset2$17768$12l&&U)
            (begin
              '#f
              (g$enum-set-subset?$17702$12l&&U
                g$enumset2$17768$12l&&U
                g$enumset1$17767$12l&&U))
            '#f)))))
   (g$enum-set-union$17704$12l&&U
     g$enum-set-union$17813$12l&&U
     (case-lambda
       ((g$enumset1$17769$12l&&U g$enumset2$17770$12l&&U)
        (begin
          (g$assert-enum$17693$12l&&U
            'enum-set-union
            g$enumset1$17769$12l&&U)
          (g$assert-enum$17693$12l&&U
            'enum-set-union
            g$enumset2$17770$12l&&U)
          (if (g$enum-type=?$17690$12l&&U
                g$enumset1$17769$12l&&U
                g$enumset2$17770$12l&&U)
            (g$make-enum$17676$12l&&U
              (bitwise-ior
                (g$enum-value$17677$12l&&U g$enumset1$17769$12l&&U)
                (g$enum-value$17677$12l&&U g$enumset2$17770$12l&&U))
              (g$enum-info$17678$12l&&U g$enumset1$17769$12l&&U))
            '#f)))))
   (g$enum-set-intersection$17705$12l&&U
     g$enum-set-intersection$17814$12l&&U
     (case-lambda
       ((g$enumset1$17771$12l&&U g$enumset2$17772$12l&&U)
        (begin
          (g$assert-enum$17693$12l&&U
            'enum-set-intersection
            g$enumset1$17771$12l&&U)
          (g$assert-enum$17693$12l&&U
            'enum-set-intersection
            g$enumset2$17772$12l&&U)
          (if (g$enum-type=?$17690$12l&&U
                g$enumset1$17771$12l&&U
                g$enumset2$17772$12l&&U)
            (g$make-enum$17676$12l&&U
              (bitwise-and
                (g$enum-value$17677$12l&&U g$enumset1$17771$12l&&U)
                (g$enum-value$17677$12l&&U g$enumset2$17772$12l&&U))
              (g$enum-info$17678$12l&&U g$enumset1$17771$12l&&U))
            '#f)))))
   (g$enum-set-difference$17706$12l&&U
     g$enum-set-difference$17815$12l&&U
     (case-lambda
       ((g$enumset1$17773$12l&&U g$enumset2$17774$12l&&U)
        (begin
          (g$assert-enum$17693$12l&&U
            'enum-set-difference
            g$enumset1$17773$12l&&U)
          (g$assert-enum$17693$12l&&U
            'enum-set-difference
            g$enumset2$17774$12l&&U)
          (if (g$enum-type=?$17690$12l&&U
                g$enumset1$17773$12l&&U
                g$enumset2$17774$12l&&U)
            (g$make-enum$17676$12l&&U
              (bitwise-and
                (g$enum-value$17677$12l&&U g$enumset1$17773$12l&&U)
                (bitwise-not
                  (g$enum-value$17677$12l&&U g$enumset2$17774$12l&&U)))
              (g$enum-info$17678$12l&&U g$enumset1$17773$12l&&U))
            '#f)))))
   (g$enum-set-complement$17707$12l&&U
     g$enum-set-complement$17816$12l&&U
     (case-lambda
       ((g$enumset$17775$12l&&U)
        (begin
          (g$assert-enum$17693$12l&&U
            'enum-set-complement
            g$enumset$17775$12l&&U)
          (g$make-enum$17676$12l&&U
            (bitwise-not
              (g$enum-value$17677$12l&&U g$enumset$17775$12l&&U))
            (g$enum-info$17678$12l&&U g$enumset$17775$12l&&U))))))
   (g$enum-set-projection$17708$12l&&U
     g$enum-set-projection$17817$12l&&U
     (case-lambda
       ((g$enumset1$17776$12l&&U g$enumset2$17777$12l&&U)
        (begin
          (g$assert-enum$17693$12l&&U
            'enum-set-projection
            g$enumset1$17776$12l&&U)
          (g$assert-enum$17693$12l&&U
            'enum-set-projection
            g$enumset2$17777$12l&&U)
          ((case-lambda
             ((g$v1$17778$12l&&U)
              ((letrec ((g$f$17779$12l&&U
                          (case-lambda
                            ((g$s$17780$12l&&U g$v$17781$12l&&U)
                             (if (null? g$s$17780$12l&&U)
                               (g$make-enum$17676$12l&&U
                                 g$v$17781$12l&&U
                                 (g$enum-info$17678$12l&&U
                                   g$enumset2$17777$12l&&U))
                               (if (g$zero?$12626$12l&&U
                                     (bitwise-and
                                       g$v1$17778$12l&&U
                                       (g$get-value$17692$12l&&U
                                         g$enumset1$17776$12l&&U
                                         (car g$s$17780$12l&&U))))
                                 (g$f$17779$12l&&U
                                   (cdr g$s$17780$12l&&U)
                                   g$v$17781$12l&&U)
                                 ((case-lambda
                                    ((g$v2$17782$12l&&U)
                                     (if g$v2$17782$12l&&U
                                       (g$f$17779$12l&&U
                                         (cdr g$s$17780$12l&&U)
                                         (bitwise-ior
                                           g$v$17781$12l&&U
                                           g$v2$17782$12l&&U))
                                       (g$f$17779$12l&&U
                                         (cdr g$s$17780$12l&&U)
                                         g$v$17781$12l&&U))))
                                  (g$get-value$17692$12l&&U
                                    g$enumset2$17777$12l&&U
                                    (car g$s$17780$12l&&U)))))))))
                 g$f$17779$12l&&U)
               (g$get-symbols$17691$12l&&U g$enumset1$17776$12l&&U)
               '0)))
           (g$enum-value$17677$12l&&U g$enumset1$17776$12l&&U)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$17709$12l&&U g$p$17710$12l&&U g$wr$17711$12l&&U)
       (g$fprintf$17842$12l&&U
         g$p$17710$12l&&U
         '"#[enum-set ~a]"
         (g$enum-set->list$17700$12l&&U g$x$17709$12l&&U))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$17818$12l&&U
     g$dofmt$17840$12l&&U
     (case-lambda
       ((g$p$17822$12l&&U g$cntl$17823$12l&&U g$args$17824$12l&&U)
        ((case-lambda
           ((g$nmax$17825$12l&&U)
            ((letrec ((g$loop$17826$12l&&U
                        (case-lambda
                          ((g$n$17827$12l&&U g$a$17828$12l&&U)
                           (if (g$fx<=?$16001$12l&&U
                                 g$n$17827$12l&&U
                                 g$nmax$17825$12l&&U)
                             ((case-lambda
                                ((g$c$17829$12l&&U)
                                 (if (if (g$char=?$12640$12l&&U
                                           g$c$17829$12l&&U
                                           '#\~)
                                       (begin
                                         '#f
                                         (g$fx<?$16000$12l&&U
                                           g$n$17827$12l&&U
                                           g$nmax$17825$12l&&U))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$17830$12l&&U)
                                       (if (eqv? g$t$17830$12l&&U '#\a)
                                         (begin
                                           (display
                                             (car g$a$17828$12l&&U)
                                             g$p$17822$12l&&U)
                                           (g$loop$17826$12l&&U
                                             (g$fx+$15986$12l&&U
                                               g$n$17827$12l&&U
                                               '2)
                                             (cdr g$a$17828$12l&&U)))
                                         (if (eqv?
                                               g$t$17830$12l&&U
                                               '#\s)
                                           (begin
                                             (write
                                               (car g$a$17828$12l&&U)
                                               g$p$17822$12l&&U)
                                             (g$loop$17826$12l&&U
                                               (g$fx+$15986$12l&&U
                                                 g$n$17827$12l&&U
                                                 '2)
                                               (cdr g$a$17828$12l&&U)))
                                           (if (eqv?
                                                 g$t$17830$12l&&U
                                                 '#\b)
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$17828$12l&&U)
                                                   '2)
                                                 g$p$17822$12l&&U)
                                               (g$loop$17826$12l&&U
                                                 (g$fx+$15986$12l&&U
                                                   g$n$17827$12l&&U
                                                   '2)
                                                 (cdr g$a$17828$12l&&U)))
                                             (if (eqv?
                                                   g$t$17830$12l&&U
                                                   '#\o)
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$17828$12l&&U)
                                                     '8)
                                                   g$p$17822$12l&&U)
                                                 (g$loop$17826$12l&&U
                                                   (g$fx+$15986$12l&&U
                                                     g$n$17827$12l&&U
                                                     '2)
                                                   (cdr g$a$17828$12l&&U)))
                                               (if (eqv?
                                                     g$t$17830$12l&&U
                                                     '#\x)
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$17828$12l&&U)
                                                       '16)
                                                     g$p$17822$12l&&U)
                                                   (g$loop$17826$12l&&U
                                                     (g$fx+$15986$12l&&U
                                                       g$n$17827$12l&&U
                                                       '2)
                                                     (cdr g$a$17828$12l&&U)))
                                                 (if (eqv?
                                                       g$t$17830$12l&&U
                                                       '#\d)
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$17828$12l&&U)
                                                         '10)
                                                       g$p$17822$12l&&U)
                                                     (g$loop$17826$12l&&U
                                                       (g$fx+$15986$12l&&U
                                                         g$n$17827$12l&&U
                                                         '2)
                                                       (cdr g$a$17828$12l&&U)))
                                                   (if (eqv?
                                                         g$t$17830$12l&&U
                                                         '#\~)
                                                     (begin
                                                       (g$write-char$17664$12l&&U
                                                         '#\~
                                                         g$p$17822$12l&&U)
                                                       (g$loop$17826$12l&&U
                                                         (g$fx+$15986$12l&&U
                                                           g$n$17827$12l&&U
                                                           '2)
                                                         g$a$17828$12l&&U))
                                                     (begin
                                                       (g$write-char$17664$12l&&U
                                                         g$c$17829$12l&&U
                                                         g$p$17822$12l&&U)
                                                       (g$loop$17826$12l&&U
                                                         (g$fx+$15986$12l&&U
                                                           g$n$17827$12l&&U
                                                           '1)
                                                         g$a$17828$12l&&U)))))))))))
                                    (string-ref
                                      g$cntl$17823$12l&&U
                                      (g$fx+$15986$12l&&U
                                        g$n$17827$12l&&U
                                        '1)))
                                   (begin
                                     (g$write-char$17664$12l&&U
                                       g$c$17829$12l&&U
                                       g$p$17822$12l&&U)
                                     (g$loop$17826$12l&&U
                                       (g$fx+$15986$12l&&U
                                         g$n$17827$12l&&U
                                         '1)
                                       g$a$17828$12l&&U)))))
                              (string-ref
                                g$cntl$17823$12l&&U
                                g$n$17827$12l&&U))
                             (void))))))
               g$loop$17826$12l&&U)
             '0
             g$args$17824$12l&&U)))
         (g$fx-$15988$12l&&U (string-length g$cntl$17823$12l&&U) '1)))))
   (g$printf$17819$12l&&U
     g$printf$17841$12l&&U
     (case-lambda
       ((g$control$17831$12l&&U . g$args$17832$12l&&U)
        (g$dofmt$17818$12l&&U
          (current-output-port)
          g$control$17831$12l&&U
          g$args$17832$12l&&U))))
   (g$fprintf$17820$12l&&U
     g$fprintf$17842$12l&&U
     (case-lambda
       ((g$p$17833$12l&&U g$control$17834$12l&&U . g$args$17835$12l&&U)
        (g$dofmt$17818$12l&&U
          g$p$17833$12l&&U
          g$control$17834$12l&&U
          g$args$17835$12l&&U))))
   (g$format$17821$12l&&U
     g$format$17843$12l&&U
     (case-lambda
       ((g$control$17836$12l&&U . g$args$17837$12l&&U)
        (call-with-values
          g$open-string-output-port$17603$12l&&U
          (case-lambda
            ((g$p$17838$12l&&U g$c$17839$12l&&U)
             (begin
               (g$dofmt$17818$12l&&U
                 g$p$17838$12l&&U
                 g$control$17836$12l&&U
                 g$args$17837$12l&&U)
               (g$c$17839$12l&&U)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$17844$12l&&U
     g$make-traced-macro$17847$12l&&U
     (case-lambda
       ((g$name$17845$12l&&U g$x$17846$12l&&U)
        (if (g$procedure?$12581$12l&&U g$x$17846$12l&&U)
          (make-traced-procedure
            g$name$17845$12l&&U
            g$x$17846$12l&&U
            g$syntax->datum$23401$12l&&U)
          (if (g$variable-transformer?$23222$12l&&U g$x$17846$12l&&U)
            (g$make-variable-transformer$23220$12l&&U
              (make-traced-procedure
                g$name$17845$12l&&U
                (g$variable-transformer-procedure$23223$12l&&U
                  g$x$17846$12l&&U)
                g$syntax->datum$23401$12l&&U))
            g$x$17846$12l&&U))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$17848$12l&&U
     g$library-version-mismatch-warning$18049$12l&&U
     (case-lambda
       ((g$name$18021$12l&&U
          g$depname$18022$12l&&U
          g$filename$18023$12l&&U)
        (g$fprintf$17842$12l&&U
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$18021$12l&&U
          g$depname$18022$12l&&U
          g$filename$18023$12l&&U))))
   (g$file-locator-resolution-error$17849$12l&&U
     g$file-locator-resolution-error$18050$12l&&U
     (case-lambda
       ((g$libname$18024$12l&&U g$failed-list$18025$12l&&U)
        (letrec* ((g$8340$18026$12l&&U
                    (make-record-type-descriptor
                      '&library-resolution
                      g$&condition-rtd$13256$12l&&U
                      'g$8343$12l&&U
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$8342$18027$12l&&U '#f)
                  (g$8341$18028$12l&&U
                    (make-record-constructor-descriptor
                      g$8340$18026$12l&&U
                      g$&condition-rcd$13257$12l&&U
                      g$8342$18027$12l&&U))
                  (g$8339$18031$12l&&U
                    (record-predicate g$8340$18026$12l&&U))
                  (g$make-library-resolution-condition$18032$12l&&U
                    (record-constructor g$8341$18028$12l&&U))
                  (g$8337$18033$12l&&U
                    (record-accessor g$8340$18026$12l&&U '0))
                  (g$8338$18034$12l&&U
                    (record-accessor g$8340$18026$12l&&U '1))
                  (g$library-resolution-condition?$18035$12l&&U
                    (condition-predicate g$8340$18026$12l&&U))
                  (g$condition-library$18036$12l&&U
                    (condition-accessor
                      g$8340$18026$12l&&U
                      g$8337$18033$12l&&U))
                  (g$condition-files$18037$12l&&U
                    (condition-accessor
                      g$8340$18026$12l&&U
                      g$8338$18034$12l&&U)))
          (raise
            (condition
              (g$make-error$13288$12l&&U)
              (g$make-who-condition$13322$12l&&U 'expander)
              (g$make-message-condition$13262$12l&&U
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$18032$12l&&U
                g$libname$18024$12l&&U
                g$failed-list$18025$12l&&U)))))))
   (g$read-library-source-file$17850$12l&&U
     g$read-library-source-file$18051$12l&&U
     (case-lambda
       ((g$file-name$18038$12l&&U)
        (g$with-input-from-file$17665$12l&&U
          g$file-name$18038$12l&&U
          read-annotated))))
   (g$make-parameter$17851$12l&&U
     g$make-parameter$18052$12l&&U
     (case-lambda
       ((g$x$18039$12l&&U)
        (g$make-parameter$17851$12l&&U
          g$x$18039$12l&&U
          (case-lambda ((g$x$18040$12l&&U) g$x$18040$12l&&U))))
       ((g$x$18041$12l&&U g$fender$18042$12l&&U)
        (begin
          (if (not (g$procedure?$12581$12l&&U g$fender$18042$12l&&U))
            (g$assertion-error$23394$12l&&U
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(90,8) - (90,36)"))
            (void))
          ((case-lambda
             ((g$x$18043$12l&&U)
              (case-lambda
                (() g$x$18043$12l&&U)
                ((g$v$18044$12l&&U)
                 (set! g$x$18043$12l&&U
                   (g$fender$18042$12l&&U g$v$18044$12l&&U))))))
           (g$fender$18042$12l&&U g$x$18041$12l&&U))))))
   (g$file-options-constructor$18017$12l&&U
     g$file-options-constructor$18053$12l&&U
     (g$make-parameter$17851$12l&&U '#f))
   (g$file-options-spec$18018$12l&&U
     g$file-options-spec$18054$12l&&U
     (case-lambda
       ((g$x$18045$12l&&U)
        ((g$file-options-constructor$18017$12l&&U) g$x$18045$12l&&U))))
   (g$set-label-binding!$18019$12l&&U
     g$set-label-binding!$18055$12l&&U
     (case-lambda
       ((g$label$18046$12l&&U g$binding$18047$12l&&U)
        (set-symbol-value!
          g$label$18046$12l&&U
          g$binding$18047$12l&&U))))
   (g$label-binding$18020$12l&&U
     g$label-binding$18056$12l&&U
     (case-lambda
       ((g$label$18048$12l&&U)
        (if (symbol-bound? g$label$18048$12l&&U)
          (begin '#f (symbol-value g$label$18048$12l&&U))
          '#f)))))
  (void))

(library-letrec* (ironscheme pretty-print)
  ((g$genwrite:newline-str$18057$12l&&U
     g$genwrite:newline-str$18250$12l&&U
     (make-string '1 '#\newline))
   (g$symbol->string$18058$12l&&U
     g$symbol->string$18251$12l&&U
     (case-lambda
       ((g$s$18070$12l&&U)
        (symbol->string
          (if (g$pretty-gensyms$18067$12l&&U)
            (ungensym g$s$18070$12l&&U)
            g$s$18070$12l&&U)))))
   (g$read-macro-body$18059$12l&&U
     g$read-macro-body$18252$12l&&U
     (case-lambda
       ((g$l$18071$12l&&U) (g$cadr$12597$12l&&U g$l$18071$12l&&U))))
   (g$read-macro-prefix$18060$12l&&U
     g$read-macro-prefix$18253$12l&&U
     (case-lambda
       ((g$l$18072$12l&&U)
        ((case-lambda
           ((g$head$18073$12l&&U g$tail$18074$12l&&U)
            ((case-lambda
               ((g$t$18075$12l&&U)
                (if (eqv? g$t$18075$12l&&U 'syntax)
                  '"#'"
                  (if (eqv? g$t$18075$12l&&U 'quasisyntax)
                    '"#`"
                    (if (eqv? g$t$18075$12l&&U 'unsyntax)
                      '"#,"
                      (if (eqv? g$t$18075$12l&&U 'unsyntax-splicing)
                        '"#,@"
                        (if (eqv? g$t$18075$12l&&U 'quote)
                          '"'"
                          (if (eqv? g$t$18075$12l&&U 'quasiquote)
                            '"`"
                            (if (eqv? g$t$18075$12l&&U 'unquote)
                              '","
                              (if (eqv?
                                    g$t$18075$12l&&U
                                    'unquote-splicing)
                                '",@"
                                (if '#f '#f (void))))))))))))
             g$head$18073$12l&&U)))
         (car g$l$18072$12l&&U)
         (cdr g$l$18072$12l&&U)))))
   (g$length1?$18061$12l&&U
     g$length1?$18254$12l&&U
     (case-lambda
       ((g$l$18076$12l&&U)
        (if (pair? g$l$18076$12l&&U)
          (begin '#f (null? (cdr g$l$18076$12l&&U)))
          '#f))))
   (g$read-macro?$18062$12l&&U
     g$read-macro?$18255$12l&&U
     (case-lambda
       ((g$l$18077$12l&&U)
        ((case-lambda
           ((g$head$18078$12l&&U g$tail$18079$12l&&U)
            ((case-lambda
               ((g$t$18080$12l&&U)
                (if (g$memv$11828$12l&&U
                      g$t$18080$12l&&U
                      '(quote
                         quasiquote
                         unquote
                         unquote-splicing
                         syntax
                         quasisyntax
                         unsyntax
                         unsyntax-splicing))
                  (g$length1?$18061$12l&&U g$tail$18079$12l&&U)
                  '#f)))
             g$head$18078$12l&&U)))
         (car g$l$18077$12l&&U)
         (cdr g$l$18077$12l&&U)))))
   (g$generic-write$18063$12l&&U
     g$generic-write$18256$12l&&U
     (case-lambda
       ((g$obj$18081$12l&&U
          g$display?$18082$12l&&U
          g$width$18083$12l&&U
          g$output$18084$12l&&U)
        (letrec* ((g$out$18085$12l&&U
                    (case-lambda
                      ((g$str$18234$12l&&U g$col$18235$12l&&U)
                       (if g$col$18235$12l&&U
                         (if (g$output$18084$12l&&U g$str$18234$12l&&U)
                           (begin
                             '#f
                             (g$fx+$15986$12l&&U
                               g$col$18235$12l&&U
                               (string-length g$str$18234$12l&&U)))
                           '#f)
                         '#f))))
                  (g$wr$18086$12l&&U
                    (case-lambda
                      ((g$obj$18217$12l&&U g$col$18218$12l&&U)
                       (letrec* ((g$wr-expr$18219$12l&&U
                                   (case-lambda
                                     ((g$expr$18232$12l&&U
                                        g$col$18233$12l&&U)
                                      (if (g$read-macro?$18062$12l&&U
                                            g$expr$18232$12l&&U)
                                        (g$wr$18086$12l&&U
                                          (g$read-macro-body$18059$12l&&U
                                            g$expr$18232$12l&&U)
                                          (g$out$18085$12l&&U
                                            (g$read-macro-prefix$18060$12l&&U
                                              g$expr$18232$12l&&U)
                                            g$col$18233$12l&&U))
                                        (g$wr-lst$18220$12l&&U
                                          g$expr$18232$12l&&U
                                          g$col$18233$12l&&U)))))
                                 (g$wr-lst$18220$12l&&U
                                   (case-lambda
                                     ((g$l$18227$12l&&U
                                        g$col$18228$12l&&U)
                                      (if (pair? g$l$18227$12l&&U)
                                        ((letrec ((g$loop$18229$12l&&U
                                                    (case-lambda
                                                      ((g$l$18230$12l&&U
                                                         g$col$18231$12l&&U)
                                                       (if (not g$col$18231$12l&&U)
                                                         g$col$18231$12l&&U
                                                         (if (pair?
                                                               g$l$18230$12l&&U)
                                                           (g$loop$18229$12l&&U
                                                             (cdr g$l$18230$12l&&U)
                                                             (g$wr$18086$12l&&U
                                                               (car g$l$18230$12l&&U)
                                                               (g$out$18085$12l&&U
                                                                 '" "
                                                                 g$col$18231$12l&&U)))
                                                           (if (null?
                                                                 g$l$18230$12l&&U)
                                                             (g$out$18085$12l&&U
                                                               '")"
                                                               g$col$18231$12l&&U)
                                                             (g$out$18085$12l&&U
                                                               '")"
                                                               (g$wr$18086$12l&&U
                                                                 g$l$18230$12l&&U
                                                                 (g$out$18085$12l&&U
                                                                   '" . "
                                                                   g$col$18231$12l&&U))))))))))
                                           g$loop$18229$12l&&U)
                                         (cdr g$l$18227$12l&&U)
                                         (if g$col$18228$12l&&U
                                           (begin
                                             '#f
                                             (g$wr$18086$12l&&U
                                               (car g$l$18227$12l&&U)
                                               (g$out$18085$12l&&U
                                                 '"("
                                                 g$col$18228$12l&&U)))
                                           '#f))
                                        (g$out$18085$12l&&U
                                          '"()"
                                          g$col$18228$12l&&U))))))
                         (if (pair? g$obj$18217$12l&&U)
                           (g$wr-expr$18219$12l&&U
                             g$obj$18217$12l&&U
                             g$col$18218$12l&&U)
                           (if (null? g$obj$18217$12l&&U)
                             (g$wr-lst$18220$12l&&U
                               g$obj$18217$12l&&U
                               g$col$18218$12l&&U)
                             (if (g$vector?$12577$12l&&U
                                   g$obj$18217$12l&&U)
                               (g$wr-lst$18220$12l&&U
                                 (vector->list g$obj$18217$12l&&U)
                                 (g$out$18085$12l&&U
                                   '"#"
                                   g$col$18218$12l&&U))
                               (if (g$boolean?$12580$12l&&U
                                     g$obj$18217$12l&&U)
                                 (g$out$18085$12l&&U
                                   (if g$obj$18217$12l&&U '"#t" '"#f")
                                   g$col$18218$12l&&U)
                                 (if (number? g$obj$18217$12l&&U)
                                   (g$out$18085$12l&&U
                                     (number->string g$obj$18217$12l&&U)
                                     g$col$18218$12l&&U)
                                   (if (g$symbol?$12579$12l&&U
                                         g$obj$18217$12l&&U)
                                     (g$out$18085$12l&&U
                                       (g$symbol->string$18058$12l&&U
                                         g$obj$18217$12l&&U)
                                       g$col$18218$12l&&U)
                                     (if (string? g$obj$18217$12l&&U)
                                       (if g$display?$18082$12l&&U
                                         (g$out$18085$12l&&U
                                           g$obj$18217$12l&&U
                                           g$col$18218$12l&&U)
                                         ((letrec ((g$loop$18221$12l&&U
                                                     (case-lambda
                                                       ((g$i$18222$12l&&U
                                                          g$j$18223$12l&&U
                                                          g$col$18224$12l&&U)
                                                        (if (if g$col$18224$12l&&U
                                                              (begin
                                                                '#f
                                                                (g$fx<?$16000$12l&&U
                                                                  g$j$18223$12l&&U
                                                                  (string-length
                                                                    g$obj$18217$12l&&U)))
                                                              '#f)
                                                          ((case-lambda
                                                             ((g$c$18225$12l&&U)
                                                              (if ((case-lambda
                                                                     ((g$t$18226$12l&&U)
                                                                      (if g$t$18226$12l&&U
                                                                        g$t$18226$12l&&U
                                                                        (begin
                                                                          '#f
                                                                          (g$char=?$12640$12l&&U
                                                                            g$c$18225$12l&&U
                                                                            '#\")))))
                                                                   (g$char=?$12640$12l&&U
                                                                     g$c$18225$12l&&U
                                                                     '#\\))
                                                                (g$loop$18221$12l&&U
                                                                  g$j$18223$12l&&U
                                                                  (g$fx+$15986$12l&&U
                                                                    g$j$18223$12l&&U
                                                                    '1)
                                                                  (g$out$18085$12l&&U
                                                                    '"\\"
                                                                    (g$out$18085$12l&&U
                                                                      (substring
                                                                        g$obj$18217$12l&&U
                                                                        g$i$18222$12l&&U
                                                                        g$j$18223$12l&&U)
                                                                      g$col$18224$12l&&U)))
                                                                (g$loop$18221$12l&&U
                                                                  g$i$18222$12l&&U
                                                                  (g$fx+$15986$12l&&U
                                                                    g$j$18223$12l&&U
                                                                    '1)
                                                                  g$col$18224$12l&&U))))
                                                           (string-ref
                                                             g$obj$18217$12l&&U
                                                             g$j$18223$12l&&U))
                                                          (g$out$18085$12l&&U
                                                            '"\""
                                                            (g$out$18085$12l&&U
                                                              (substring
                                                                g$obj$18217$12l&&U
                                                                g$i$18222$12l&&U
                                                                g$j$18223$12l&&U)
                                                              g$col$18224$12l&&U)))))))
                                            g$loop$18221$12l&&U)
                                          '0
                                          '0
                                          (g$out$18085$12l&&U
                                            '"\""
                                            g$col$18218$12l&&U)))
                                       (g$out$18085$12l&&U
                                         (g$format$17843$12l&&U
                                           (if g$display?$18082$12l&&U
                                             '"~a"
                                             '"~s")
                                           g$obj$18217$12l&&U)
                                         g$col$18218$12l&&U))))))))))))
                  (g$pp$18087$12l&&U
                    (case-lambda
                      ((g$obj$18088$12l&&U g$col$18089$12l&&U)
                       (letrec* ((g$spaces$18090$12l&&U
                                   (case-lambda
                                     ((g$n$18215$12l&&U
                                        g$col$18216$12l&&U)
                                      (if (g$fx>?$16002$12l&&U
                                            g$n$18215$12l&&U
                                            '0)
                                        (if (g$fx>?$16002$12l&&U
                                              g$n$18215$12l&&U
                                              '7)
                                          (g$spaces$18090$12l&&U
                                            (g$fx-$15988$12l&&U
                                              g$n$18215$12l&&U
                                              '8)
                                            (g$out$18085$12l&&U
                                              '"        "
                                              g$col$18216$12l&&U))
                                          (g$out$18085$12l&&U
                                            (substring
                                              '"        "
                                              '0
                                              g$n$18215$12l&&U)
                                            g$col$18216$12l&&U))
                                        g$col$18216$12l&&U))))
                                 (g$indent$18091$12l&&U
                                   (case-lambda
                                     ((g$to$18213$12l&&U
                                        g$col$18214$12l&&U)
                                      (if g$col$18214$12l&&U
                                        (begin
                                          '#f
                                          (if (g$fx<?$16000$12l&&U
                                                g$to$18213$12l&&U
                                                g$col$18214$12l&&U)
                                            (if (g$out$18085$12l&&U
                                                  g$genwrite:newline-str$18057$12l&&U
                                                  g$col$18214$12l&&U)
                                              (begin
                                                '#f
                                                (g$spaces$18090$12l&&U
                                                  g$to$18213$12l&&U
                                                  '0))
                                              '#f)
                                            (g$spaces$18090$12l&&U
                                              (g$fx-$15988$12l&&U
                                                g$to$18213$12l&&U
                                                g$col$18214$12l&&U)
                                              g$col$18214$12l&&U)))
                                        '#f))))
                                 (g$pr$18092$12l&&U
                                   (case-lambda
                                     ((g$obj$18205$12l&&U
                                        g$col$18206$12l&&U
                                        g$extra$18207$12l&&U
                                        g$pp-pair$18208$12l&&U)
                                      (if ((case-lambda
                                             ((g$t$18209$12l&&U)
                                              (if g$t$18209$12l&&U
                                                g$t$18209$12l&&U
                                                (begin
                                                  '#f
                                                  (g$vector?$12577$12l&&U
                                                    g$obj$18205$12l&&U)))))
                                           (pair? g$obj$18205$12l&&U))
                                        ((case-lambda
                                           ((g$result$18210$12l&&U
                                              g$left$18211$12l&&U)
                                            (begin
                                              (g$generic-write$18063$12l&&U
                                                g$obj$18205$12l&&U
                                                g$display?$18082$12l&&U
                                                '#f
                                                (case-lambda
                                                  ((g$str$18212$12l&&U)
                                                   (begin
                                                     (set! g$result$18210$12l&&U
                                                       (cons
                                                         g$str$18212$12l&&U
                                                         g$result$18210$12l&&U))
                                                     (set! g$left$18211$12l&&U
                                                       (g$fx-$15988$12l&&U
                                                         g$left$18211$12l&&U
                                                         (string-length
                                                           g$str$18212$12l&&U)))
                                                     (g$fx>?$16002$12l&&U
                                                       g$left$18211$12l&&U
                                                       '0)))))
                                              (if (g$fx>?$16002$12l&&U
                                                    g$left$18211$12l&&U
                                                    '0)
                                                (g$out$18085$12l&&U
                                                  (g$reverse-string-append$18068$12l&&U
                                                    g$result$18210$12l&&U)
                                                  g$col$18206$12l&&U)
                                                (if (pair?
                                                      g$obj$18205$12l&&U)
                                                  (g$pp-pair$18208$12l&&U
                                                    g$obj$18205$12l&&U
                                                    g$col$18206$12l&&U
                                                    g$extra$18207$12l&&U)
                                                  (g$pp-list$18095$12l&&U
                                                    (vector->list
                                                      g$obj$18205$12l&&U)
                                                    (g$out$18085$12l&&U
                                                      '"#"
                                                      g$col$18206$12l&&U)
                                                    g$extra$18207$12l&&U
                                                    g$pp-expr$18093$12l&&U))))))
                                         '()
                                         (g$min$12630$12l&&U
                                           (g$fx+$15986$12l&&U
                                             (g$fx-$15988$12l&&U
                                               (g$fx-$15988$12l&&U
                                                 g$width$18083$12l&&U
                                                 g$col$18206$12l&&U)
                                               g$extra$18207$12l&&U)
                                             '1)
                                           (g$pretty-width$18064$12l&&U)))
                                        (g$wr$18086$12l&&U
                                          g$obj$18205$12l&&U
                                          g$col$18206$12l&&U)))))
                                 (g$pp-expr$18093$12l&&U
                                   (case-lambda
                                     ((g$expr$18200$12l&&U
                                        g$col$18201$12l&&U
                                        g$extra$18202$12l&&U)
                                      (if (g$read-macro?$18062$12l&&U
                                            g$expr$18200$12l&&U)
                                        (g$pr$18092$12l&&U
                                          (g$read-macro-body$18059$12l&&U
                                            g$expr$18200$12l&&U)
                                          (g$out$18085$12l&&U
                                            (g$read-macro-prefix$18060$12l&&U
                                              g$expr$18200$12l&&U)
                                            g$col$18201$12l&&U)
                                          g$extra$18202$12l&&U
                                          g$pp-expr$18093$12l&&U)
                                        ((case-lambda
                                           ((g$head$18203$12l&&U)
                                            (if (g$symbol?$12579$12l&&U
                                                  g$head$18203$12l&&U)
                                              ((case-lambda
                                                 ((g$proc$18204$12l&&U)
                                                  (if g$proc$18204$12l&&U
                                                    (g$proc$18204$12l&&U
                                                      g$expr$18200$12l&&U
                                                      g$col$18201$12l&&U
                                                      g$extra$18202$12l&&U)
                                                    (if (g$fx>?$16002$12l&&U
                                                          (string-length
                                                            (g$symbol->string$18058$12l&&U
                                                              g$head$18203$12l&&U))
                                                          (g$max-call-head-width$18066$12l&&U))
                                                      (g$pp-general$18097$12l&&U
                                                        g$expr$18200$12l&&U
                                                        g$col$18201$12l&&U
                                                        g$extra$18202$12l&&U
                                                        '#f
                                                        '#f
                                                        '#f
                                                        g$pp-expr$18093$12l&&U)
                                                      (g$pp-call$18094$12l&&U
                                                        g$expr$18200$12l&&U
                                                        g$col$18201$12l&&U
                                                        g$extra$18202$12l&&U
                                                        g$pp-expr$18093$12l&&U)))))
                                               (g$style$18109$12l&&U
                                                 g$head$18203$12l&&U))
                                              (g$pp-list$18095$12l&&U
                                                g$expr$18200$12l&&U
                                                g$col$18201$12l&&U
                                                g$extra$18202$12l&&U
                                                g$pp-expr$18093$12l&&U))))
                                         (car g$expr$18200$12l&&U))))))
                                 (g$pp-call$18094$12l&&U
                                   (case-lambda
                                     ((g$expr$18195$12l&&U
                                        g$col$18196$12l&&U
                                        g$extra$18197$12l&&U
                                        g$pp-item$18198$12l&&U)
                                      ((case-lambda
                                         ((g$col*$18199$12l&&U)
                                          (if g$col$18196$12l&&U
                                            (begin
                                              '#f
                                              (g$pp-down$18096$12l&&U
                                                (cdr g$expr$18195$12l&&U)
                                                g$col*$18199$12l&&U
                                                (g$fx+$15986$12l&&U
                                                  g$col*$18199$12l&&U
                                                  '1)
                                                g$extra$18197$12l&&U
                                                g$pp-item$18198$12l&&U))
                                            '#f)))
                                       (g$wr$18086$12l&&U
                                         (car g$expr$18195$12l&&U)
                                         (g$out$18085$12l&&U
                                           '"("
                                           g$col$18196$12l&&U))))))
                                 (g$pp-list$18095$12l&&U
                                   (case-lambda
                                     ((g$l$18190$12l&&U
                                        g$col$18191$12l&&U
                                        g$extra$18192$12l&&U
                                        g$pp-item$18193$12l&&U)
                                      ((case-lambda
                                         ((g$col$18194$12l&&U)
                                          (g$pp-down$18096$12l&&U
                                            g$l$18190$12l&&U
                                            g$col$18194$12l&&U
                                            g$col$18194$12l&&U
                                            g$extra$18192$12l&&U
                                            g$pp-item$18193$12l&&U)))
                                       (g$out$18085$12l&&U
                                         '"("
                                         g$col$18191$12l&&U)))))
                                 (g$pp-down$18096$12l&&U
                                   (case-lambda
                                     ((g$l$18180$12l&&U
                                        g$col1$18181$12l&&U
                                        g$col2$18182$12l&&U
                                        g$extra$18183$12l&&U
                                        g$pp-item$18184$12l&&U)
                                      ((letrec ((g$loop$18185$12l&&U
                                                  (case-lambda
                                                    ((g$l$18186$12l&&U
                                                       g$col$18187$12l&&U)
                                                     (if g$col$18187$12l&&U
                                                       (begin
                                                         '#f
                                                         (if (pair?
                                                               g$l$18186$12l&&U)
                                                           ((case-lambda
                                                              ((g$rest$18188$12l&&U)
                                                               ((case-lambda
                                                                  ((g$extra$18189$12l&&U)
                                                                   (g$loop$18185$12l&&U
                                                                     g$rest$18188$12l&&U
                                                                     (g$pr$18092$12l&&U
                                                                       (car g$l$18186$12l&&U)
                                                                       (g$indent$18091$12l&&U
                                                                         g$col2$18182$12l&&U
                                                                         g$col$18187$12l&&U)
                                                                       g$extra$18189$12l&&U
                                                                       g$pp-item$18184$12l&&U))))
                                                                (if (null?
                                                                      g$rest$18188$12l&&U)
                                                                  (g$fx+$15986$12l&&U
                                                                    g$extra$18183$12l&&U
                                                                    '1)
                                                                  '0))))
                                                            (cdr g$l$18186$12l&&U))
                                                           (if (null?
                                                                 g$l$18186$12l&&U)
                                                             (g$out$18085$12l&&U
                                                               '")"
                                                               g$col$18187$12l&&U)
                                                             (g$out$18085$12l&&U
                                                               '")"
                                                               (g$pr$18092$12l&&U
                                                                 g$l$18186$12l&&U
                                                                 (g$indent$18091$12l&&U
                                                                   g$col2$18182$12l&&U
                                                                   (g$out$18085$12l&&U
                                                                     '"."
                                                                     (g$indent$18091$12l&&U
                                                                       g$col2$18182$12l&&U
                                                                       g$col$18187$12l&&U)))
                                                                 (g$fx+$15986$12l&&U
                                                                   g$extra$18183$12l&&U
                                                                   '1)
                                                                 g$pp-item$18184$12l&&U)))))
                                                       '#f)))))
                                         g$loop$18185$12l&&U)
                                       g$l$18180$12l&&U
                                       g$col1$18181$12l&&U))))
                                 (g$pp-general$18097$12l&&U
                                   (case-lambda
                                     ((g$expr$18147$12l&&U
                                        g$col$18148$12l&&U
                                        g$extra$18149$12l&&U
                                        g$named?$18150$12l&&U
                                        g$pp-1$18151$12l&&U
                                        g$pp-2$18152$12l&&U
                                        g$pp-3$18153$12l&&U)
                                      (letrec* ((g$tail1$18154$12l&&U
                                                  (case-lambda
                                                    ((g$rest$18173$12l&&U
                                                       g$col1$18174$12l&&U
                                                       g$col2$18175$12l&&U
                                                       g$col3$18176$12l&&U)
                                                     (if (if g$pp-1$18151$12l&&U
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$18173$12l&&U))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$18177$12l&&U)
                                                           ((case-lambda
                                                              ((g$rest$18178$12l&&U)
                                                               ((case-lambda
                                                                  ((g$extra$18179$12l&&U)
                                                                   (g$tail2$18155$12l&&U
                                                                     g$rest$18178$12l&&U
                                                                     g$col1$18174$12l&&U
                                                                     (g$pr$18092$12l&&U
                                                                       g$val1$18177$12l&&U
                                                                       (g$indent$18091$12l&&U
                                                                         g$col3$18176$12l&&U
                                                                         g$col2$18175$12l&&U)
                                                                       g$extra$18179$12l&&U
                                                                       g$pp-1$18151$12l&&U)
                                                                     g$col3$18176$12l&&U)))
                                                                (if (null?
                                                                      g$rest$18178$12l&&U)
                                                                  (g$fx+$15986$12l&&U
                                                                    g$extra$18149$12l&&U
                                                                    '1)
                                                                  '0))))
                                                            (cdr g$rest$18173$12l&&U))))
                                                        (car g$rest$18173$12l&&U))
                                                       (g$tail2$18155$12l&&U
                                                         g$rest$18173$12l&&U
                                                         g$col1$18174$12l&&U
                                                         g$col2$18175$12l&&U
                                                         g$col3$18176$12l&&U)))))
                                                (g$tail2$18155$12l&&U
                                                  (case-lambda
                                                    ((g$rest$18166$12l&&U
                                                       g$col1$18167$12l&&U
                                                       g$col2$18168$12l&&U
                                                       g$col3$18169$12l&&U)
                                                     (if (if g$pp-2$18152$12l&&U
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$18166$12l&&U))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$18170$12l&&U)
                                                           ((case-lambda
                                                              ((g$rest$18171$12l&&U)
                                                               ((case-lambda
                                                                  ((g$extra$18172$12l&&U)
                                                                   (g$tail3$18156$12l&&U
                                                                     g$rest$18171$12l&&U
                                                                     g$col1$18167$12l&&U
                                                                     (g$pr$18092$12l&&U
                                                                       g$val1$18170$12l&&U
                                                                       (g$indent$18091$12l&&U
                                                                         g$col3$18169$12l&&U
                                                                         g$col2$18168$12l&&U)
                                                                       g$extra$18172$12l&&U
                                                                       g$pp-2$18152$12l&&U))))
                                                                (if (null?
                                                                      g$rest$18171$12l&&U)
                                                                  (g$fx+$15986$12l&&U
                                                                    g$extra$18149$12l&&U
                                                                    '1)
                                                                  '0))))
                                                            (cdr g$rest$18166$12l&&U))))
                                                        (car g$rest$18166$12l&&U))
                                                       (g$tail3$18156$12l&&U
                                                         g$rest$18166$12l&&U
                                                         g$col1$18167$12l&&U
                                                         g$col2$18168$12l&&U)))))
                                                (g$tail3$18156$12l&&U
                                                  (case-lambda
                                                    ((g$rest$18163$12l&&U
                                                       g$col1$18164$12l&&U
                                                       g$col2$18165$12l&&U)
                                                     (g$pp-down$18096$12l&&U
                                                       g$rest$18163$12l&&U
                                                       g$col2$18165$12l&&U
                                                       g$col1$18164$12l&&U
                                                       g$extra$18149$12l&&U
                                                       g$pp-3$18153$12l&&U)))))
                                        ((case-lambda
                                           ((g$head$18157$12l&&U)
                                            ((case-lambda
                                               ((g$rest$18158$12l&&U)
                                                ((case-lambda
                                                   ((g$col*$18159$12l&&U)
                                                    (if (if g$named?$18150$12l&&U
                                                          (begin
                                                            '#f
                                                            (pair?
                                                              g$rest$18158$12l&&U))
                                                          '#f)
                                                      ((case-lambda
                                                         ((g$name$18160$12l&&U)
                                                          ((case-lambda
                                                             ((g$rest$18161$12l&&U)
                                                              ((case-lambda
                                                                 ((g$col**$18162$12l&&U)
                                                                  (g$tail1$18154$12l&&U
                                                                    g$rest$18161$12l&&U
                                                                    (g$fx+$15986$12l&&U
                                                                      g$col$18148$12l&&U
                                                                      (g$indent-general$18065$12l&&U))
                                                                    g$col**$18162$12l&&U
                                                                    (g$fx+$15986$12l&&U
                                                                      g$col**$18162$12l&&U
                                                                      '1))))
                                                               (g$wr$18086$12l&&U
                                                                 g$name$18160$12l&&U
                                                                 (g$out$18085$12l&&U
                                                                   '" "
                                                                   g$col*$18159$12l&&U)))))
                                                           (cdr g$rest$18158$12l&&U))))
                                                       (car g$rest$18158$12l&&U))
                                                      (g$tail1$18154$12l&&U
                                                        g$rest$18158$12l&&U
                                                        (g$fx+$15986$12l&&U
                                                          g$col$18148$12l&&U
                                                          (g$indent-general$18065$12l&&U))
                                                        g$col*$18159$12l&&U
                                                        (g$fx+$15986$12l&&U
                                                          g$col*$18159$12l&&U
                                                          '1)))))
                                                 (g$wr$18086$12l&&U
                                                   g$head$18157$12l&&U
                                                   (g$out$18085$12l&&U
                                                     '"("
                                                     g$col$18148$12l&&U)))))
                                             (cdr g$expr$18147$12l&&U))))
                                         (car g$expr$18147$12l&&U))))))
                                 (g$pp-expr-list$18098$12l&&U
                                   (case-lambda
                                     ((g$l$18144$12l&&U
                                        g$col$18145$12l&&U
                                        g$extra$18146$12l&&U)
                                      (g$pp-list$18095$12l&&U
                                        g$l$18144$12l&&U
                                        g$col$18145$12l&&U
                                        g$extra$18146$12l&&U
                                        g$pp-expr$18093$12l&&U))))
                                 (g$pp-SYNTAX-CASE$18099$12l&&U
                                   (case-lambda
                                     ((g$expr$18141$12l&&U
                                        g$col$18142$12l&&U
                                        g$extra$18143$12l&&U)
                                      (g$pp-general$18097$12l&&U
                                        g$expr$18141$12l&&U
                                        g$col$18142$12l&&U
                                        g$extra$18143$12l&&U
                                        '#t
                                        g$pp-expr-list$18098$12l&&U
                                        '#f
                                        g$pp-expr$18093$12l&&U))))
                                 (g$pp-LAMBDA$18100$12l&&U
                                   (case-lambda
                                     ((g$expr$18138$12l&&U
                                        g$col$18139$12l&&U
                                        g$extra$18140$12l&&U)
                                      (g$pp-general$18097$12l&&U
                                        g$expr$18138$12l&&U
                                        g$col$18139$12l&&U
                                        g$extra$18140$12l&&U
                                        '#f
                                        g$pp-expr-list$18098$12l&&U
                                        '#f
                                        g$pp-expr$18093$12l&&U))))
                                 (g$pp-IF$18101$12l&&U
                                   (case-lambda
                                     ((g$expr$18135$12l&&U
                                        g$col$18136$12l&&U
                                        g$extra$18137$12l&&U)
                                      (g$pp-general$18097$12l&&U
                                        g$expr$18135$12l&&U
                                        g$col$18136$12l&&U
                                        g$extra$18137$12l&&U
                                        '#f
                                        g$pp-expr$18093$12l&&U
                                        '#f
                                        g$pp-expr$18093$12l&&U))))
                                 (g$pp-COND$18102$12l&&U
                                   (case-lambda
                                     ((g$expr$18132$12l&&U
                                        g$col$18133$12l&&U
                                        g$extra$18134$12l&&U)
                                      (g$pp-call$18094$12l&&U
                                        g$expr$18132$12l&&U
                                        g$col$18133$12l&&U
                                        g$extra$18134$12l&&U
                                        g$pp-expr-list$18098$12l&&U))))
                                 (g$pp-CASE$18103$12l&&U
                                   (case-lambda
                                     ((g$expr$18129$12l&&U
                                        g$col$18130$12l&&U
                                        g$extra$18131$12l&&U)
                                      (g$pp-general$18097$12l&&U
                                        g$expr$18129$12l&&U
                                        g$col$18130$12l&&U
                                        g$extra$18131$12l&&U
                                        '#f
                                        g$pp-expr$18093$12l&&U
                                        '#f
                                        g$pp-expr-list$18098$12l&&U))))
                                 (g$pp-CASE-LAMBDA$18104$12l&&U
                                   (case-lambda
                                     ((g$expr$18126$12l&&U
                                        g$col$18127$12l&&U
                                        g$extra$18128$12l&&U)
                                      (g$pp-general$18097$12l&&U
                                        g$expr$18126$12l&&U
                                        g$col$18127$12l&&U
                                        g$extra$18128$12l&&U
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr-list$18098$12l&&U))))
                                 (g$pp-AND$18105$12l&&U
                                   (case-lambda
                                     ((g$expr$18123$12l&&U
                                        g$col$18124$12l&&U
                                        g$extra$18125$12l&&U)
                                      (g$pp-call$18094$12l&&U
                                        g$expr$18123$12l&&U
                                        g$col$18124$12l&&U
                                        g$extra$18125$12l&&U
                                        g$pp-expr$18093$12l&&U))))
                                 (g$pp-LET$18106$12l&&U
                                   (case-lambda
                                     ((g$expr$18118$12l&&U
                                        g$col$18119$12l&&U
                                        g$extra$18120$12l&&U)
                                      ((case-lambda
                                         ((g$rest$18121$12l&&U)
                                          ((case-lambda
                                             ((g$named?$18122$12l&&U)
                                              (g$pp-general$18097$12l&&U
                                                g$expr$18118$12l&&U
                                                g$col$18119$12l&&U
                                                g$extra$18120$12l&&U
                                                g$named?$18122$12l&&U
                                                g$pp-expr-list$18098$12l&&U
                                                '#f
                                                g$pp-expr$18093$12l&&U)))
                                           (if (pair?
                                                 g$rest$18121$12l&&U)
                                             (begin
                                               '#f
                                               (g$symbol?$12579$12l&&U
                                                 (car g$rest$18121$12l&&U)))
                                             '#f))))
                                       (cdr g$expr$18118$12l&&U)))))
                                 (g$pp-BEGIN$18107$12l&&U
                                   (case-lambda
                                     ((g$expr$18115$12l&&U
                                        g$col$18116$12l&&U
                                        g$extra$18117$12l&&U)
                                      (g$pp-general$18097$12l&&U
                                        g$expr$18115$12l&&U
                                        g$col$18116$12l&&U
                                        g$extra$18117$12l&&U
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr$18093$12l&&U))))
                                 (g$pp-DO$18108$12l&&U
                                   (case-lambda
                                     ((g$expr$18112$12l&&U
                                        g$col$18113$12l&&U
                                        g$extra$18114$12l&&U)
                                      (g$pp-general$18097$12l&&U
                                        g$expr$18112$12l&&U
                                        g$col$18113$12l&&U
                                        g$extra$18114$12l&&U
                                        '#f
                                        g$pp-expr-list$18098$12l&&U
                                        g$pp-expr-list$18098$12l&&U
                                        g$pp-expr$18093$12l&&U))))
                                 (g$style$18109$12l&&U
                                   (case-lambda
                                     ((g$head$18110$12l&&U)
                                      ((case-lambda
                                         ((g$t$18111$12l&&U)
                                          (if (g$memv$11828$12l&&U
                                                g$t$18111$12l&&U
                                                '(lambda let*
                                                   letrec
                                                   letrec*
                                                   define
                                                   define-syntax
                                                   syntax-rules
                                                   let-syntax
                                                   letrec-syntax
                                                   with-syntax
                                                   library
                                                   library-letrec*))
                                            g$pp-LAMBDA$18100$12l&&U
                                            (if (eqv?
                                                  g$t$18111$12l&&U
                                                  'syntax-case)
                                              g$pp-SYNTAX-CASE$18099$12l&&U
                                              (if (g$memv$11828$12l&&U
                                                    g$t$18111$12l&&U
                                                    '(if set!
                                                       when
                                                       unless))
                                                g$pp-IF$18101$12l&&U
                                                (if (eqv?
                                                      g$t$18111$12l&&U
                                                      'cond)
                                                  g$pp-COND$18102$12l&&U
                                                  (if (eqv?
                                                        g$t$18111$12l&&U
                                                        'case-lambda)
                                                    g$pp-CASE-LAMBDA$18104$12l&&U
                                                    (if (eqv?
                                                          g$t$18111$12l&&U
                                                          'case)
                                                      g$pp-CASE$18103$12l&&U
                                                      (if (g$memv$11828$12l&&U
                                                            g$t$18111$12l&&U
                                                            '(and or
                                                                  import
                                                                  export))
                                                        g$pp-AND$18105$12l&&U
                                                        (if (eqv?
                                                              g$t$18111$12l&&U
                                                              'let)
                                                          g$pp-LET$18106$12l&&U
                                                          (if (eqv?
                                                                g$t$18111$12l&&U
                                                                'begin)
                                                            g$pp-BEGIN$18107$12l&&U
                                                            (if (eqv?
                                                                  g$t$18111$12l&&U
                                                                  'do)
                                                              g$pp-DO$18108$12l&&U
                                                              '#f))))))))))))
                                       g$head$18110$12l&&U)))))
                         (g$pr$18092$12l&&U
                           g$obj$18088$12l&&U
                           g$col$18089$12l&&U
                           '0
                           g$pp-expr$18093$12l&&U))))))
          (if g$width$18083$12l&&U
            (g$out$18085$12l&&U
              g$genwrite:newline-str$18057$12l&&U
              (g$pp$18087$12l&&U g$obj$18081$12l&&U '0))
            (g$wr$18086$12l&&U g$obj$18081$12l&&U '0))))))
   (g$pretty-width$18064$12l&&U
     g$pretty-width$18257$12l&&U
     (g$make-parameter$18052$12l&&U '72))
   (g$indent-general$18065$12l&&U
     g$indent-general$18258$12l&&U
     (g$make-parameter$18052$12l&&U '2))
   (g$max-call-head-width$18066$12l&&U
     g$max-call-head-width$18259$12l&&U
     (g$make-parameter$18052$12l&&U '3))
   (g$pretty-gensyms$18067$12l&&U
     g$pretty-gensyms$18260$12l&&U
     (g$make-parameter$18052$12l&&U '#f))
   (g$reverse-string-append$18068$12l&&U
     g$reverse-string-append$18261$12l&&U
     (case-lambda
       ((g$l$18236$12l&&U)
        (letrec* ((g$rev-string-append$18237$12l&&U
                    (case-lambda
                      ((g$l$18238$12l&&U g$i$18239$12l&&U)
                       (if (pair? g$l$18238$12l&&U)
                         ((case-lambda
                            ((g$str$18240$12l&&U)
                             ((case-lambda
                                ((g$len$18241$12l&&U)
                                 ((case-lambda
                                    ((g$result$18242$12l&&U)
                                     ((letrec ((g$loop$18243$12l&&U
                                                 (case-lambda
                                                   ((g$j$18244$12l&&U
                                                      g$k$18245$12l&&U)
                                                    (if (g$fx<?$16000$12l&&U
                                                          g$j$18244$12l&&U
                                                          g$len$18241$12l&&U)
                                                      (begin
                                                        (string-set!
                                                          g$result$18242$12l&&U
                                                          g$k$18245$12l&&U
                                                          (string-ref
                                                            g$str$18240$12l&&U
                                                            g$j$18244$12l&&U))
                                                        (g$loop$18243$12l&&U
                                                          (g$fx+$15986$12l&&U
                                                            g$j$18244$12l&&U
                                                            '1)
                                                          (g$fx+$15986$12l&&U
                                                            g$k$18245$12l&&U
                                                            '1)))
                                                      g$result$18242$12l&&U)))))
                                        g$loop$18243$12l&&U)
                                      '0
                                      (g$fx-$15988$12l&&U
                                        (g$fx-$15988$12l&&U
                                          (string-length
                                            g$result$18242$12l&&U)
                                          g$i$18239$12l&&U)
                                        g$len$18241$12l&&U))))
                                  (g$rev-string-append$18237$12l&&U
                                    (cdr g$l$18238$12l&&U)
                                    (g$fx+$15986$12l&&U
                                      g$i$18239$12l&&U
                                      g$len$18241$12l&&U)))))
                              (string-length g$str$18240$12l&&U))))
                          (car g$l$18238$12l&&U))
                         (make-string g$i$18239$12l&&U))))))
          (g$rev-string-append$18237$12l&&U g$l$18236$12l&&U '0)))))
   (g$pretty-print$18069$12l&&U
     g$pretty-print$18262$12l&&U
     (case-lambda
       ((g$obj$18246$12l&&U . g$opt$18247$12l&&U)
        ((case-lambda
           ((g$port$18248$12l&&U)
            (g$generic-write$18063$12l&&U
              g$obj$18246$12l&&U
              '#f
              (g$pretty-width$18064$12l&&U)
              (case-lambda
                ((g$s$18249$12l&&U)
                 (begin
                   (display g$s$18249$12l&&U g$port$18248$12l&&U)
                   '#t))))))
         (if (pair? g$opt$18247$12l&&U)
           (car g$opt$18247$12l&&U)
           (current-output-port)))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$18263$12l&&U
     g$cps/generate-reference$18528$12l&&U
     (case-lambda
       ((g$variable$18316$12l&&U)
        (g$cps/generate-operand$18267$12l&&U
          (g$make-reference$18293$12l&&U g$variable$18316$12l&&U)))))
   (g$cps/generate-literal$18264$12l&&U
     g$cps/generate-literal$18529$12l&&U
     (case-lambda
       ((g$datum$18317$12l&&U)
        (g$cps/generate-operand$18267$12l&&U
          (g$make-literal$18292$12l&&U g$datum$18317$12l&&U)))))
   (g$cps/generate-abstraction$18265$12l&&U
     g$cps/generate-abstraction$18530$12l&&U
     (case-lambda
       ((g$bvl$18318$12l&&U g$body-generator$18319$12l&&U)
        (g$cps/generate-operand$18267$12l&&U
          (g$make-user-abstraction$18294$12l&&U
            g$bvl$18318$12l&&U
            (case-lambda
              ((g$continuation-variable$18320$12l&&U)
               (g$body-generator$18319$12l&&U
                 (g$variable-continuator$18280$12l&&U
                   g$continuation-variable$18320$12l&&U)))))))))
   (g$cps/generate-abstractions$18266$12l&&U
     g$cps/generate-abstractions$18531$12l&&U
     (case-lambda
       ((g$bvls$18321$12l&&U g$body-generators$18322$12l&&U)
        (g$cps/generate-operand$18267$12l&&U
          (g$make-user-abstractions$18295$12l&&U
            g$bvls$18321$12l&&U
            (g$map$11835$12l&&U
              (case-lambda
                ((g$body-generator$18323$12l&&U)
                 (case-lambda
                   ((g$continuation-variable$18324$12l&&U)
                    (g$body-generator$18323$12l&&U
                      (g$variable-continuator$18280$12l&&U
                        g$continuation-variable$18324$12l&&U))))))
              g$body-generators$18322$12l&&U))))))
   (g$cps/generate-operand$18267$12l&&U
     g$cps/generate-operand$18532$12l&&U
     (case-lambda
       ((g$operand$18325$12l&&U)
        (case-lambda
          ((g$continuator$18326$12l&&U)
           (g$continue-with-operand$18283$12l&&U
             g$continuator$18326$12l&&U
             g$operand$18325$12l&&U))))))
   (g$cps/generate-conditional$18268$12l&&U
     g$cps/generate-conditional$18533$12l&&U
     (case-lambda
       ((g$condition-generator$18327$12l&&U
          g$consequent-generator$18328$12l&&U
          g$alternative-generator$18329$12l&&U)
        (case-lambda
          ((g$continuator$18330$12l&&U)
           (letrec* ((g$if-variable$18331$12l&&U
                       (case-lambda
                         ((g$continuation-variable$18333$12l&&U)
                          ((case-lambda
                             ((g$continuator*$18334$12l&&U)
                              (g$condition-generator$18327$12l&&U
                                (g$conditional-continuator$18279$12l&&U
                                  (case-lambda
                                    ((g$condition$18335$12l&&U)
                                     (g$make-conditional$18302$12l&&U
                                       g$condition$18335$12l&&U
                                       (g$consequent-generator$18328$12l&&U
                                         g$continuator*$18334$12l&&U)
                                       (g$alternative-generator$18329$12l&&U
                                         g$continuator*$18334$12l&&U))))))))
                           (g$variable-continuator$18280$12l&&U
                             g$continuation-variable$18333$12l&&U))))))
             (g$reify-continuation*$18285$12l&&U
               g$continuator$18330$12l&&U
               g$if-variable$18331$12l&&U
               (case-lambda
                 ((g$continuation-abstraction$18332$12l&&U)
                  (g$make-conditional-join$18303$12l&&U
                    g$continuation-abstraction$18332$12l&&U
                    g$if-variable$18331$12l&&U))))))))))
   (g$cps/generate-recursive-bind$18269$12l&&U
     g$cps/generate-recursive-bind$18534$12l&&U
     (case-lambda
       ((g$variables$18336$12l&&U
          g$generators$18337$12l&&U
          g$body-generator$18338$12l&&U)
        (case-lambda
          ((g$continuator$18339$12l&&U)
           (g$make-recursive-bind$18297$12l&&U
             g$variables$18336$12l&&U
             (g$map$11835$12l&&U
               (case-lambda
                 ((g$generator$18340$12l&&U)
                  (case-lambda
                    ((g$continuation-variable$18341$12l&&U)
                     (g$generator$18340$12l&&U
                       (g$variable-continuator$18280$12l&&U
                         g$continuation-variable$18341$12l&&U))))))
               g$generators$18337$12l&&U)
             (g$body-generator$18338$12l&&U
               (g$reified-continuator$18282$12l&&U
                 g$continuator$18339$12l&&U))))))))
   (g$cps/generate-recursive*-bind$18270$12l&&U
     g$cps/generate-recursive*-bind$18535$12l&&U
     (case-lambda
       ((g$variables$18342$12l&&U
          g$generators$18343$12l&&U
          g$body-generator$18344$12l&&U)
        (case-lambda
          ((g$continuator$18345$12l&&U)
           (g$make-recursive*-bind$18298$12l&&U
             g$variables$18342$12l&&U
             (g$map$11835$12l&&U
               (case-lambda
                 ((g$generator$18346$12l&&U)
                  (case-lambda
                    ((g$continuation-variable$18347$12l&&U)
                     (g$generator$18346$12l&&U
                       (g$variable-continuator$18280$12l&&U
                         g$continuation-variable$18347$12l&&U))))))
               g$generators$18343$12l&&U)
             (g$body-generator$18344$12l&&U
               (g$reified-continuator$18282$12l&&U
                 g$continuator$18345$12l&&U))))))))
   (g$cps/generate-recursive*-library-bind$18271$12l&&U
     g$cps/generate-recursive*-library-bind$18536$12l&&U
     (case-lambda
       ((g$name$18348$12l&&U
          g$variables$18349$12l&&U
          g$variables*$18350$12l&&U
          g$generators$18351$12l&&U
          g$body-generator$18352$12l&&U)
        (case-lambda
          ((g$continuator$18353$12l&&U)
           (g$make-recursive*-library-bind$18299$12l&&U
             g$name$18348$12l&&U
             g$variables$18349$12l&&U
             g$variables*$18350$12l&&U
             (g$map$11835$12l&&U
               (case-lambda
                 ((g$generator$18354$12l&&U)
                  (case-lambda
                    ((g$continuation-variable$18355$12l&&U)
                     (g$generator$18354$12l&&U
                       (g$variable-continuator$18280$12l&&U
                         g$continuation-variable$18355$12l&&U))))))
               g$generators$18351$12l&&U)
             (g$body-generator$18352$12l&&U
               (g$reified-continuator$18282$12l&&U
                 g$continuator$18353$12l&&U))))))))
   (g$cps/generate-sequence$18272$12l&&U
     g$cps/generate-sequence$18537$12l&&U
     (case-lambda
       ((g$generators$18356$12l&&U)
        (case-lambda
          ((g$continuator$18357$12l&&U)
           ((letrec ((g$recur$18358$12l&&U
                       (case-lambda
                         ((g$generators$18359$12l&&U)
                          ((car g$generators$18359$12l&&U)
                           ((case-lambda
                              ((g$generators$18360$12l&&U)
                               (if (pair? g$generators$18360$12l&&U)
                                 (g$effect-continuator$18278$12l&&U
                                   (case-lambda
                                     (()
                                      (g$recur$18358$12l&&U
                                        g$generators$18360$12l&&U))))
                                 g$continuator$18357$12l&&U)))
                            (cdr g$generators$18359$12l&&U)))))))
              g$recur$18358$12l&&U)
            g$generators$18356$12l&&U))))))
   (g$cps/generate-assignment$18273$12l&&U
     g$cps/generate-assignment$18538$12l&&U
     (case-lambda
       ((g$location$18361$12l&&U g$expression-generator$18362$12l&&U)
        (case-lambda
          ((g$continuator$18363$12l&&U)
           (g$expression-generator$18362$12l&&U
             (g$operand-continuator$18277$12l&&U
               (case-lambda
                 ((g$operand$18364$12l&&U)
                  (g$make-assignment$18305$12l&&U
                    g$location$18361$12l&&U
                    g$operand$18364$12l&&U
                    (g$continue-with-operand$18283$12l&&U
                      g$continuator$18363$12l&&U
                      '(cps-void))))))))))))
   (g$cps/generate-declaration$18274$12l&&U
     g$cps/generate-declaration$18539$12l&&U
     (case-lambda
       ((g$location$18365$12l&&U g$expression-generator$18366$12l&&U)
        (case-lambda
          ((g$continuator$18367$12l&&U)
           (g$expression-generator$18366$12l&&U
             (g$operand-continuator$18277$12l&&U
               (case-lambda
                 ((g$operand$18368$12l&&U)
                  (g$make-declaration$18306$12l&&U
                    g$location$18365$12l&&U
                    g$operand$18368$12l&&U
                    (g$continue-with-operand$18283$12l&&U
                      g$continuator$18367$12l&&U
                      '(cps-void))))))))))))
   (g$cps/generate-combination$18275$12l&&U
     g$cps/generate-combination$18540$12l&&U
     (case-lambda
       ((g$operator-generator$18369$12l&&U
          g$operand-generators$18370$12l&&U)
        (g$cps/generate-subproblems$18276$12l&&U
          (g$reverse$12595$12l&&U
            (cons
              g$operator-generator$18369$12l&&U
              g$operand-generators$18370$12l&&U))
          (case-lambda
            ((g$operands$18371$12l&&U g$continuator$18372$12l&&U)
             (g$make-combination$18300$12l&&U
               (car g$operands$18371$12l&&U)
               (g$reify-continuation$18284$12l&&U
                 g$continuator$18372$12l&&U)
               (cdr g$operands$18371$12l&&U))))))))
   (g$cps/generate-subproblems$18276$12l&&U
     g$cps/generate-subproblems$18541$12l&&U
     (case-lambda
       ((g$generators$18373$12l&&U g$combiner$18374$12l&&U)
        (case-lambda
          ((g$continuator$18375$12l&&U)
           ((letrec ((g$recur$18376$12l&&U
                       (case-lambda
                         ((g$generators$18377$12l&&U
                            g$operands$18378$12l&&U)
                          (if (pair? g$generators$18377$12l&&U)
                            ((car g$generators$18377$12l&&U)
                             ((case-lambda
                                ((g$generators$18379$12l&&U)
                                 (g$operand-continuator$18277$12l&&U
                                   (case-lambda
                                     ((g$operand$18380$12l&&U)
                                      (g$recur$18376$12l&&U
                                        g$generators$18379$12l&&U
                                        (cons
                                          g$operand$18380$12l&&U
                                          g$operands$18378$12l&&U)))))))
                              (cdr g$generators$18377$12l&&U)))
                            (g$combiner$18374$12l&&U
                              g$operands$18378$12l&&U
                              g$continuator$18375$12l&&U))))))
              g$recur$18376$12l&&U)
            g$generators$18373$12l&&U
            '()))))))
   (g$operand-continuator$18277$12l&&U
     g$operand-continuator$18542$12l&&U
     (case-lambda
       ((g$generator$18381$12l&&U)
        (case-lambda
          ((g$if-operand$18382$12l&&U
             g$if-effect$18383$12l&&U
             g$if-conditional$18384$12l&&U
             g$if-variable$18385$12l&&U
             g$if-inline$18386$12l&&U)
           (begin
             g$if-effect$18383$12l&&U
             g$if-conditional$18384$12l&&U
             g$if-variable$18385$12l&&U
             g$if-inline$18386$12l&&U
             (g$if-operand$18382$12l&&U g$generator$18381$12l&&U)))))))
   (g$effect-continuator$18278$12l&&U
     g$effect-continuator$18543$12l&&U
     (case-lambda
       ((g$generator$18387$12l&&U)
        (case-lambda
          ((g$if-operand$18388$12l&&U
             g$if-effect$18389$12l&&U
             g$if-conditional$18390$12l&&U
             g$if-variable$18391$12l&&U
             g$if-inline$18392$12l&&U)
           (begin
             g$if-operand$18388$12l&&U
             g$if-conditional$18390$12l&&U
             g$if-variable$18391$12l&&U
             g$if-inline$18392$12l&&U
             (g$if-effect$18389$12l&&U g$generator$18387$12l&&U)))))))
   (g$conditional-continuator$18279$12l&&U
     g$conditional-continuator$18544$12l&&U
     (case-lambda
       ((g$generator$18393$12l&&U)
        (case-lambda
          ((g$if-operand$18394$12l&&U
             g$if-effect$18395$12l&&U
             g$if-conditional$18396$12l&&U
             g$if-variable$18397$12l&&U
             g$if-inline$18398$12l&&U)
           (begin
             g$if-operand$18394$12l&&U
             g$if-effect$18395$12l&&U
             g$if-variable$18397$12l&&U
             g$if-inline$18398$12l&&U
             (g$if-conditional$18396$12l&&U
               g$generator$18393$12l&&U)))))))
   (g$variable-continuator$18280$12l&&U
     g$variable-continuator$18545$12l&&U
     (case-lambda
       ((g$variable$18399$12l&&U)
        (case-lambda
          ((g$if-operand$18400$12l&&U
             g$if-effect$18401$12l&&U
             g$if-conditional$18402$12l&&U
             g$if-variable$18403$12l&&U
             g$if-inline$18404$12l&&U)
           (begin
             g$if-operand$18400$12l&&U
             g$if-effect$18401$12l&&U
             g$if-variable$18403$12l&&U
             g$if-inline$18404$12l&&U
             (g$if-variable$18403$12l&&U g$variable$18399$12l&&U)))))))
   (g$inline-continuator$18281$12l&&U
     g$inline-continuator$18546$12l&&U
     (case-lambda
       ((g$continuation$18405$12l&&U)
        (case-lambda
          ((g$if-operand$18406$12l&&U
             g$if-effect$18407$12l&&U
             g$if-conditional$18408$12l&&U
             g$if-variable$18409$12l&&U
             g$if-inline$18410$12l&&U)
           (begin
             g$if-operand$18406$12l&&U
             g$if-effect$18407$12l&&U
             g$if-conditional$18408$12l&&U
             g$if-variable$18409$12l&&U
             (g$if-inline$18410$12l&&U
               g$continuation$18405$12l&&U)))))))
   (g$reified-continuator$18282$12l&&U
     g$reified-continuator$18547$12l&&U
     (case-lambda
       ((g$continuator$18411$12l&&U)
        (case-lambda
          ((g$if-operand$18412$12l&&U
             g$if-effect$18413$12l&&U
             g$if-conditional$18414$12l&&U
             g$if-variable$18415$12l&&U
             g$if-inline$18416$12l&&U)
           (begin
             g$if-operand$18412$12l&&U
             g$if-effect$18413$12l&&U
             g$if-conditional$18414$12l&&U
             (g$reify-continuation*$18285$12l&&U
               g$continuator$18411$12l&&U
               g$if-variable$18415$12l&&U
               g$if-inline$18416$12l&&U)))))))
   (g$continue-with-operand$18283$12l&&U
     g$continue-with-operand$18548$12l&&U
     (case-lambda
       ((g$continuator$18417$12l&&U g$operand$18418$12l&&U)
        (g$continuator$18417$12l&&U
          (case-lambda
            ((g$generator$18419$12l&&U)
             (g$generator$18419$12l&&U g$operand$18418$12l&&U)))
          (case-lambda
            ((g$generator$18420$12l&&U) (g$generator$18420$12l&&U)))
          (case-lambda
            ((g$generator$18421$12l&&U)
             (g$generator$18421$12l&&U
               (g$make-truth-test$18307$12l&&U
                 g$operand$18418$12l&&U))))
          (case-lambda
            ((g$continuation-variable$18422$12l&&U)
             (g$make-return$18301$12l&&U
               (g$make-reference$18293$12l&&U
                 g$continuation-variable$18422$12l&&U)
               (list g$operand$18418$12l&&U))))
          (case-lambda
            ((g$continuation-abstraction$18423$12l&&U)
             (g$make-return$18301$12l&&U
               g$continuation-abstraction$18423$12l&&U
               (list g$operand$18418$12l&&U))))))))
   (g$reify-continuation$18284$12l&&U
     g$reify-continuation$18549$12l&&U
     (case-lambda
       ((g$continuator$18424$12l&&U)
        (g$continuator$18424$12l&&U
          g$operand-continuation-reifier$18287$12l&&U
          g$effect-continuation-reifier$18289$12l&&U
          g$conditional-continuation-reifier$18291$12l&&U
          (case-lambda
            ((g$variable$18425$12l&&U)
             (g$make-reference$18293$12l&&U g$variable$18425$12l&&U)))
          (case-lambda
            ((g$continuation$18426$12l&&U)
             g$continuation$18426$12l&&U))))))
   (g$reify-continuation*$18285$12l&&U
     g$reify-continuation*$18550$12l&&U
     (case-lambda
       ((g$continuator$18427$12l&&U
          g$if-variable$18428$12l&&U
          g$if-inline$18429$12l&&U)
        (g$continuator$18427$12l&&U
          (g$operand-continuation-reifier*$18286$12l&&U
            g$if-inline$18429$12l&&U)
          (g$effect-continuation-reifier*$18288$12l&&U
            g$if-inline$18429$12l&&U)
          (g$conditional-continuation-reifier*$18290$12l&&U
            g$if-inline$18429$12l&&U)
          g$if-variable$18428$12l&&U
          g$if-inline$18429$12l&&U))))
   (g$operand-continuation-reifier*$18286$12l&&U
     g$operand-continuation-reifier*$18551$12l&&U
     (case-lambda
       ((g$receiver$18430$12l&&U)
        (case-lambda
          ((g$generator$18431$12l&&U)
           (g$receiver$18430$12l&&U
             ((case-lambda
                ((g$variable$18432$12l&&U)
                 (g$make-continuation-abstraction$18296$12l&&U
                   (list g$variable$18432$12l&&U)
                   (g$generator$18431$12l&&U
                     (g$make-reference$18293$12l&&U
                       g$variable$18432$12l&&U)))))
              (g$generate-variable$18308$12l&&U 'V))))))))
   (g$operand-continuation-reifier$18287$12l&&U
     g$operand-continuation-reifier$18552$12l&&U
     (g$operand-continuation-reifier*$18286$12l&&U values))
   (g$effect-continuation-reifier*$18288$12l&&U
     g$effect-continuation-reifier*$18553$12l&&U
     (case-lambda
       ((g$receiver$18433$12l&&U)
        (case-lambda
          ((g$generator$18434$12l&&U)
           (g$receiver$18433$12l&&U
             ((case-lambda
                ((g$variable$18435$12l&&U)
                 (g$make-continuation-abstraction$18296$12l&&U
                   g$variable$18435$12l&&U
                   (g$generator$18434$12l&&U))))
              (g$generate-variable$18308$12l&&U 'IGNORE))))))))
   (g$effect-continuation-reifier$18289$12l&&U
     g$effect-continuation-reifier$18554$12l&&U
     (g$effect-continuation-reifier*$18288$12l&&U values))
   (g$conditional-continuation-reifier*$18290$12l&&U
     g$conditional-continuation-reifier*$18555$12l&&U
     (case-lambda
       ((g$receiver$18436$12l&&U)
        (case-lambda
          ((g$generator$18437$12l&&U)
           (g$receiver$18436$12l&&U
             ((case-lambda
                ((g$variable$18438$12l&&U)
                 (g$make-continuation-abstraction$18296$12l&&U
                   (list g$variable$18438$12l&&U)
                   (g$generator$18437$12l&&U
                     (g$make-truth-test$18307$12l&&U
                       (g$make-reference$18293$12l&&U
                         g$variable$18438$12l&&U))))))
              (g$generate-variable$18308$12l&&U 'T))))))))
   (g$conditional-continuation-reifier$18291$12l&&U
     g$conditional-continuation-reifier$18556$12l&&U
     (g$conditional-continuation-reifier*$18290$12l&&U values))
   (g$make-literal$18292$12l&&U
     g$make-literal$18557$12l&&U
     (case-lambda
       ((g$datum$18439$12l&&U) (list 'quote g$datum$18439$12l&&U))))
   (g$make-reference$18293$12l&&U
     g$make-reference$18558$12l&&U
     (case-lambda ((g$variable$18440$12l&&U) g$variable$18440$12l&&U)))
   (g$make-user-abstraction$18294$12l&&U
     g$make-user-abstraction$18559$12l&&U
     (case-lambda
       ((g$bvl$18441$12l&&U g$body-constructor$18442$12l&&U)
        ((case-lambda
           ((g$continuation$18443$12l&&U)
            (list
              'case-lambda
              (list
                (cons g$continuation$18443$12l&&U g$bvl$18441$12l&&U)
                (g$body-constructor$18442$12l&&U
                  g$continuation$18443$12l&&U)))))
         (g$generate-variable$18308$12l&&U 'C)))))
   (g$make-user-abstractions$18295$12l&&U
     g$make-user-abstractions$18560$12l&&U
     (case-lambda
       ((g$bvls$18444$12l&&U g$body-constructors$18445$12l&&U)
        ((case-lambda
           ((g$continuation$18446$12l&&U)
            (cons
              'case-lambda
              (g$map$11835$12l&&U
                (case-lambda
                  ((g$bvl$18447$12l&&U g$body-constructor$18448$12l&&U)
                   (list
                     (cons
                       g$continuation$18446$12l&&U
                       g$bvl$18447$12l&&U)
                     (g$body-constructor$18448$12l&&U
                       g$continuation$18446$12l&&U))))
                g$bvls$18444$12l&&U
                g$body-constructors$18445$12l&&U))))
         (g$generate-variable$18308$12l&&U 'C)))))
   (g$make-continuation-abstraction$18296$12l&&U
     g$make-continuation-abstraction$18561$12l&&U
     (case-lambda
       ((g$bvl$18449$12l&&U g$body$18450$12l&&U)
        (list
          'case-lambda
          (list g$bvl$18449$12l&&U g$body$18450$12l&&U)))))
   (g$make-recursive-bind$18297$12l&&U
     g$make-recursive-bind$18562$12l&&U
     (case-lambda
       ((g$variables$18451$12l&&U
          g$constructors$18452$12l&&U
          g$body$18453$12l&&U)
        (list
          'letrec
          (g$map$11835$12l&&U
            (case-lambda
              ((g$variable$18454$12l&&U g$constructor$18455$12l&&U)
               (list
                 g$variable$18454$12l&&U
                 (list
                   (g$make-user-abstraction$18294$12l&&U
                     '()
                     g$constructor$18455$12l&&U)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$18454$12l&&U))))))
            g$variables$18451$12l&&U
            g$constructors$18452$12l&&U)
          g$body$18453$12l&&U))))
   (g$make-recursive*-bind$18298$12l&&U
     g$make-recursive*-bind$18563$12l&&U
     (case-lambda
       ((g$variables$18456$12l&&U
          g$constructors$18457$12l&&U
          g$body$18458$12l&&U)
        (list
          'letrec*
          (g$map$11835$12l&&U
            (case-lambda
              ((g$variable$18459$12l&&U g$constructor$18460$12l&&U)
               (list
                 g$variable$18459$12l&&U
                 (list
                   (g$make-user-abstraction$18294$12l&&U
                     '()
                     g$constructor$18460$12l&&U)
                   (list
                     'letrec*-identity
                     (list 'quote g$variable$18459$12l&&U))))))
            g$variables$18456$12l&&U
            g$constructors$18457$12l&&U)
          g$body$18458$12l&&U))))
   (g$make-recursive*-library-bind$18299$12l&&U
     g$make-recursive*-library-bind$18564$12l&&U
     (case-lambda
       ((g$name$18461$12l&&U
          g$variables$18462$12l&&U
          g$variables*$18463$12l&&U
          g$constructors$18464$12l&&U
          g$body$18465$12l&&U)
        (list
          'library-letrec*
          g$name$18461$12l&&U
          (g$map$11835$12l&&U
            (case-lambda
              ((g$variable$18466$12l&&U
                 g$variable*$18467$12l&&U
                 g$constructor$18468$12l&&U)
               (list
                 g$variable$18466$12l&&U
                 g$variable*$18467$12l&&U
                 (list
                   (g$make-user-abstraction$18294$12l&&U
                     '()
                     g$constructor$18468$12l&&U)
                   (list
                     'library-letrec*-identity
                     (list 'quote g$variable$18466$12l&&U))))))
            g$variables$18462$12l&&U
            g$variables*$18463$12l&&U
            g$constructors$18464$12l&&U)
          g$body$18465$12l&&U))))
   (g$make-combination$18300$12l&&U
     g$make-combination$18565$12l&&U
     (case-lambda
       ((g$operator$18469$12l&&U
          g$continuation$18470$12l&&U
          g$operands$18471$12l&&U)
        (cons
          g$operator$18469$12l&&U
          (cons g$continuation$18470$12l&&U g$operands$18471$12l&&U)))))
   (g$make-return$18301$12l&&U
     g$make-return$18566$12l&&U
     (case-lambda
       ((g$continuation$18472$12l&&U g$operands$18473$12l&&U)
        (cons g$continuation$18472$12l&&U g$operands$18473$12l&&U))))
   (g$make-conditional$18302$12l&&U
     g$make-conditional$18567$12l&&U
     (case-lambda
       ((g$condition$18474$12l&&U
          g$consequent$18475$12l&&U
          g$alternative$18476$12l&&U)
        (list
          'if
          g$condition$18474$12l&&U
          g$consequent$18475$12l&&U
          g$alternative$18476$12l&&U))))
   (g$make-conditional-join$18303$12l&&U
     g$make-conditional-join$18568$12l&&U
     (case-lambda
       ((g$continuation$18477$12l&&U g$constructor$18478$12l&&U)
        ((case-lambda
           ((g$variable$18479$12l&&U)
            (g$make-let$18304$12l&&U
              (list g$variable$18479$12l&&U)
              (list g$continuation$18477$12l&&U)
              (g$constructor$18478$12l&&U g$variable$18479$12l&&U))))
         (g$generate-variable$18308$12l&&U 'J)))))
   (g$make-let$18304$12l&&U
     g$make-let$18569$12l&&U
     (case-lambda
       ((g$variables$18480$12l&&U
          g$expressions$18481$12l&&U
          g$body$18482$12l&&U)
        (cons
          (list
            'case-lambda
            (list g$variables$18480$12l&&U g$body$18482$12l&&U))
          g$expressions$18481$12l&&U))))
   (g$make-assignment$18305$12l&&U
     g$make-assignment$18570$12l&&U
     (case-lambda
       ((g$location$18483$12l&&U
          g$operand$18484$12l&&U
          g$expression$18485$12l&&U)
        (list
          'begin
          (list 'set! g$location$18483$12l&&U g$operand$18484$12l&&U)
          g$expression$18485$12l&&U))))
   (g$make-declaration$18306$12l&&U
     g$make-declaration$18571$12l&&U
     (case-lambda
       ((g$location$18486$12l&&U
          g$operand$18487$12l&&U
          g$expression$18488$12l&&U)
        (list
          'begin
          (list 'define g$location$18486$12l&&U g$operand$18487$12l&&U)
          g$expression$18488$12l&&U))))
   (g$make-truth-test$18307$12l&&U
     g$make-truth-test$18572$12l&&U
     (case-lambda ((g$operand$18489$12l&&U) g$operand$18489$12l&&U)))
   (g$generate-variable$18308$12l&&U
     g$generate-variable$18573$12l&&U
     (case-lambda ((g$name$18490$12l&&U) (gensym g$name$18490$12l&&U))))
   (g$parse$18309$12l&&U
     g$parse$18574$12l&&U
     (case-lambda
       ((g$x$18491$12l&&U)
        (if (pair? g$x$18491$12l&&U)
          ((case-lambda
             ((g$t$18492$12l&&U)
              (if (eqv? g$t$18492$12l&&U 'quote)
                (g$cps/generate-literal$18264$12l&&U
                  (g$cadr$12597$12l&&U g$x$18491$12l&&U))
                (if (eqv? g$t$18492$12l&&U 'if)
                  (g$cps/generate-conditional$18268$12l&&U
                    (g$parse$18309$12l&&U
                      (g$cadr$12597$12l&&U g$x$18491$12l&&U))
                    (g$parse$18309$12l&&U
                      (g$caddr$12603$12l&&U g$x$18491$12l&&U))
                    (g$parse$18309$12l&&U
                      (g$cadddr$12615$12l&&U g$x$18491$12l&&U)))
                  (if (eqv? g$t$18492$12l&&U 'case-lambda)
                    ((case-lambda
                       ((g$d$18493$12l&&U)
                        (g$cps/generate-abstractions$18266$12l&&U
                          (g$map$11835$12l&&U car g$d$18493$12l&&U)
                          (g$map$11835$12l&&U
                            (case-lambda
                              ((g$e$18494$12l&&U)
                               (g$cps/generate-sequence$18272$12l&&U
                                 (g$map$11835$12l&&U
                                   g$parse$18309$12l&&U
                                   (cdr g$e$18494$12l&&U)))))
                            g$d$18493$12l&&U))))
                     (cdr g$x$18491$12l&&U))
                    (if (eqv? g$t$18492$12l&&U 'letrec)
                      ((case-lambda
                         ((g$bindings$18495$12l&&U g$body*$18496$12l&&U)
                          ((case-lambda
                             ((g$lhs*$18497$12l&&U g$rhs*$18498$12l&&U)
                              ((case-lambda
                                 ((g$t*$18499$12l&&U
                                    g$tmps$18500$12l&&U)
                                  ((case-lambda
                                     ((g$s*$18501$12l&&U)
                                      (g$parse$18309$12l&&U
                                        (cons
                                          (list
                                            'case-lambda
                                            (list
                                              g$lhs*$18497$12l&&U
                                              (cons
                                                (list
                                                  'case-lambda
                                                  (cons
                                                    g$t*$18499$12l&&U
                                                    (append
                                                      g$s*$18501$12l&&U
                                                      g$body*$18496$12l&&U)))
                                                g$rhs*$18498$12l&&U)))
                                          g$tmps$18500$12l&&U))))
                                   (g$map$11835$12l&&U
                                     (case-lambda
                                       ((g$i$18502$12l&&U
                                          g$t$18503$12l&&U)
                                        (list
                                          'set!
                                          g$i$18502$12l&&U
                                          g$t$18503$12l&&U)))
                                     g$lhs*$18497$12l&&U
                                     g$t*$18499$12l&&U))))
                               (g$map$11835$12l&&U
                                 gensym
                                 g$lhs*$18497$12l&&U)
                               (g$map$11835$12l&&U
                                 (case-lambda
                                   ((g$x$18504$12l&&U) 'uninitialized))
                                 g$lhs*$18497$12l&&U))))
                           (g$map$11835$12l&&U
                             car
                             g$bindings$18495$12l&&U)
                           (g$map$11835$12l&&U
                             g$cadr$12597$12l&&U
                             g$bindings$18495$12l&&U))))
                       (g$cadr$12597$12l&&U g$x$18491$12l&&U)
                       (g$cddr$12599$12l&&U g$x$18491$12l&&U))
                      (if (eqv? g$t$18492$12l&&U 'letrec*)
                        ((case-lambda
                           ((g$bindings$18505$12l&&U
                              g$body*$18506$12l&&U)
                            ((case-lambda
                               ((g$lhs*$18507$12l&&U
                                  g$rhs*$18508$12l&&U)
                                (g$cps/generate-recursive*-bind$18270$12l&&U
                                  g$lhs*$18507$12l&&U
                                  (g$map$11835$12l&&U
                                    g$parse$18309$12l&&U
                                    g$rhs*$18508$12l&&U)
                                  (g$parse$18309$12l&&U
                                    (cons
                                      'begin
                                      g$body*$18506$12l&&U)))))
                             (g$map$11835$12l&&U
                               car
                               g$bindings$18505$12l&&U)
                             (g$map$11835$12l&&U
                               g$cadr$12597$12l&&U
                               g$bindings$18505$12l&&U))))
                         (g$cadr$12597$12l&&U g$x$18491$12l&&U)
                         (g$cddr$12599$12l&&U g$x$18491$12l&&U))
                        (if (eqv? g$t$18492$12l&&U 'library-letrec*)
                          ((case-lambda
                             ((g$name$18509$12l&&U g$x$18510$12l&&U)
                              ((case-lambda
                                 ((g$bindings$18511$12l&&U
                                    g$body*$18512$12l&&U)
                                  ((case-lambda
                                     ((g$lhs*$18513$12l&&U
                                        g$lhs**$18514$12l&&U
                                        g$rhs*$18515$12l&&U)
                                      (g$cps/generate-recursive*-library-bind$18271$12l&&U
                                        g$name$18509$12l&&U
                                        g$lhs*$18513$12l&&U
                                        g$lhs**$18514$12l&&U
                                        (g$map$11835$12l&&U
                                          g$parse$18309$12l&&U
                                          g$rhs*$18515$12l&&U)
                                        (g$parse$18309$12l&&U
                                          (cons
                                            'begin
                                            g$body*$18512$12l&&U)))))
                                   (g$map$11835$12l&&U
                                     car
                                     g$bindings$18511$12l&&U)
                                   (g$map$11835$12l&&U
                                     g$cadr$12597$12l&&U
                                     g$bindings$18511$12l&&U)
                                   (g$map$11835$12l&&U
                                     g$caddr$12603$12l&&U
                                     g$bindings$18511$12l&&U))))
                               (g$cadr$12597$12l&&U g$x$18510$12l&&U)
                               (g$cddr$12599$12l&&U g$x$18510$12l&&U))))
                           (g$cadr$12597$12l&&U g$x$18491$12l&&U)
                           (cdr g$x$18491$12l&&U))
                          (if (eqv? g$t$18492$12l&&U 'begin)
                            (g$cps/generate-sequence$18272$12l&&U
                              (g$map$11835$12l&&U
                                g$parse$18309$12l&&U
                                (cdr g$x$18491$12l&&U)))
                            (if (eqv? g$t$18492$12l&&U 'set!)
                              (g$cps/generate-assignment$18273$12l&&U
                                (g$cadr$12597$12l&&U g$x$18491$12l&&U)
                                (g$parse$18309$12l&&U
                                  (g$caddr$12603$12l&&U
                                    g$x$18491$12l&&U)))
                              (if (eqv? g$t$18492$12l&&U 'define)
                                (g$cps/generate-declaration$18274$12l&&U
                                  (g$cadr$12597$12l&&U g$x$18491$12l&&U)
                                  (g$parse$18309$12l&&U
                                    (g$caddr$12603$12l&&U
                                      g$x$18491$12l&&U)))
                                (if (list? g$x$18491$12l&&U)
                                  (g$cps/generate-combination$18275$12l&&U
                                    (g$parse$18309$12l&&U
                                      (car g$x$18491$12l&&U))
                                    (g$map$11835$12l&&U
                                      g$parse$18309$12l&&U
                                      (cdr g$x$18491$12l&&U)))
                                  (error
                                    'rewrite
                                    '"invalid form ~s ~s"
                                    g$x$18491$12l&&U
                                    (list?
                                      g$x$18491$12l&&U))))))))))))))
           (car g$x$18491$12l&&U))
          (if (g$symbol?$12579$12l&&U g$x$18491$12l&&U)
            (g$cps/generate-reference$18263$12l&&U g$x$18491$12l&&U)
            (g$cps/generate-literal$18264$12l&&U g$x$18491$12l&&U))))))
   (g$starts-with?$18310$12l&&U
     g$starts-with?$18575$12l&&U
     (case-lambda
       ((g$str$18516$12l&&U g$sub$18517$12l&&U)
        (clr-call-internal
          'system.string
          'startswith
          g$str$18516$12l&&U
          g$sub$18517$12l&&U))))
   (g$ends-with?$18311$12l&&U
     g$ends-with?$18576$12l&&U
     (case-lambda
       ((g$str$18518$12l&&U g$sub$18519$12l&&U)
        (clr-call-internal
          'system.string
          'endswith
          g$str$18518$12l&&U
          g$sub$18519$12l&&U))))
   (g$clr-generator?$18312$12l&&U
     g$clr-generator?$18577$12l&&U
     (case-lambda
       ((g$o$18520$12l&&U)
        (if (g$symbol?$12579$12l&&U g$o$18520$12l&&U)
          (begin
            '#f
            ((case-lambda
               ((g$o$18521$12l&&U)
                (if (g$starts-with?$18310$12l&&U
                      g$o$18521$12l&&U
                      '"clr-")
                  (begin
                    '#f
                    (g$ends-with?$18311$12l&&U
                      g$o$18521$12l&&U
                      '"-internal"))
                  '#f)))
             (symbol->string g$o$18520$12l&&U)))
          '#f))))
   (g$fix-primitives$18313$12l&&U
     g$fix-primitives$18578$12l&&U
     (case-lambda
       ((g$e$18522$12l&&U)
        (if (if (pair? g$e$18522$12l&&U)
              (begin '#f (list? g$e$18522$12l&&U))
              '#f)
          ((case-lambda
             ((g$o$18523$12l&&U)
              (if (eq? g$o$18523$12l&&U 'quote)
                g$e$18522$12l&&U
                (if (begin
                      '#f
                      (g$clr-generator?$18312$12l&&U g$o$18523$12l&&U))
                  (if (pair? (cdr g$e$18522$12l&&U))
                    (list
                      (g$fix-primitives$18313$12l&&U
                        (g$cadr$12597$12l&&U g$e$18522$12l&&U))
                      (cons
                        g$o$18523$12l&&U
                        (g$map$11835$12l&&U
                          g$fix-primitives$18313$12l&&U
                          (g$cddr$12599$12l&&U g$e$18522$12l&&U))))
                    g$e$18522$12l&&U)
                  (cons
                    (g$fix-primitives$18313$12l&&U g$o$18523$12l&&U)
                    (g$map$11835$12l&&U
                      g$fix-primitives$18313$12l&&U
                      (cdr g$e$18522$12l&&U)))))))
           (car g$e$18522$12l&&U))
          g$e$18522$12l&&U))))
   (g$parse->cps$18314$12l&&U
     g$parse->cps$18579$12l&&U
     (case-lambda
       ((g$e$18524$12l&&U g$var$18525$12l&&U)
        ((g$parse$18309$12l&&U g$e$18524$12l&&U)
         (g$variable-continuator$18280$12l&&U g$var$18525$12l&&U)))))
   (g$convert->cps$18315$12l&&U
     g$convert->cps$18580$12l&&U
     (case-lambda
       ((g$e$18526$12l&&U g$var$18527$12l&&U)
        (g$fix-primitives$18313$12l&&U
          (g$parse->cps$18314$12l&&U
            g$e$18526$12l&&U
            g$var$18527$12l&&U))))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$18581$12l&&U
     g$current-primitive-locations$18626$12l&&U
     (g$make-parameter$18052$12l&&U
       (case-lambda ((g$x$18587$12l&&U) '#f))
       (case-lambda
         ((g$p$18588$12l&&U)
          (begin
            (if (not (g$procedure?$12581$12l&&U g$p$18588$12l&&U))
              (g$assertion-error$23394$12l&&U
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$18588$12l&&U)))))
   (g$mutable?$18582$12l&&U
     g$mutable?$18627$12l&&U
     (case-lambda
       ((g$x$18589$12l&&U)
        (letrec* ((g$simple?$18590$12l&&U
                    (case-lambda
                      ((g$x$18591$12l&&U)
                       ((case-lambda
                          ((g$t$18592$12l&&U)
                           (if g$t$18592$12l&&U
                             g$t$18592$12l&&U
                             ((case-lambda
                                ((g$t$18593$12l&&U)
                                 (if g$t$18593$12l&&U
                                   g$t$18593$12l&&U
                                   ((case-lambda
                                      ((g$t$18594$12l&&U)
                                       (if g$t$18594$12l&&U
                                         g$t$18594$12l&&U
                                         ((case-lambda
                                            ((g$t$18595$12l&&U)
                                             (if g$t$18595$12l&&U
                                               g$t$18595$12l&&U
                                               ((case-lambda
                                                  ((g$t$18596$12l&&U)
                                                   (if g$t$18596$12l&&U
                                                     g$t$18596$12l&&U
                                                     ((case-lambda
                                                        ((g$t$18597$12l&&U)
                                                         (if g$t$18597$12l&&U
                                                           g$t$18597$12l&&U
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$18591$12l&&U)))))
                                                      (g$bytevector?$12578$12l&&U
                                                        g$x$18591$12l&&U)))))
                                                (string?
                                                  g$x$18591$12l&&U)))))
                                          (g$boolean?$12580$12l&&U
                                            g$x$18591$12l&&U)))))
                                    (g$symbol?$12579$12l&&U
                                      g$x$18591$12l&&U)))))
                              (g$char?$12576$12l&&U
                                g$x$18591$12l&&U)))))
                        (null? g$x$18591$12l&&U))))))
          (not (g$simple?$18590$12l&&U g$x$18589$12l&&U))))))
   (g$rewriter$18583$12l&&U
     g$rewriter$18628$12l&&U
     (case-lambda
       ((g$quote-hack?$18598$12l&&U)
        (letrec* ((g$f$18599$12l&&U
                    (case-lambda
                      ((g$x$18600$12l&&U)
                       (if (pair? g$x$18600$12l&&U)
                         ((case-lambda
                            ((g$t$18601$12l&&U)
                             (if (eqv? g$t$18601$12l&&U 'quote)
                               (if (if g$quote-hack?$18598$12l&&U
                                     (begin
                                       '#f
                                       (g$mutable?$18582$12l&&U
                                         (g$cadr$12597$12l&&U
                                           g$x$18600$12l&&U)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$18602$12l&&U)
                                     (begin
                                       (set-symbol-value!
                                         g$g$18602$12l&&U
                                         (g$cadr$12597$12l&&U
                                           g$x$18600$12l&&U))
                                       g$g$18602$12l&&U)))
                                  (gensym 'weak-temp))
                                 g$x$18600$12l&&U)
                               (if (eqv? g$t$18601$12l&&U 'case-lambda)
                                 (cons
                                   'case-lambda
                                   (g$map$11835$12l&&U
                                     (case-lambda
                                       ((g$x$18603$12l&&U)
                                        (cons
                                          (car g$x$18603$12l&&U)
                                          (g$map$11835$12l&&U
                                            g$f$18599$12l&&U
                                            (cdr g$x$18603$12l&&U)))))
                                     (cdr g$x$18600$12l&&U)))
                                 (if (eqv? g$t$18601$12l&&U 'lambda)
                                   (g$cons*$11837$12l&&U
                                     'lambda
                                     (g$cadr$12597$12l&&U
                                       g$x$18600$12l&&U)
                                     (g$map$11835$12l&&U
                                       g$f$18599$12l&&U
                                       (g$cddr$12599$12l&&U
                                         g$x$18600$12l&&U)))
                                   (if (eqv? g$t$18601$12l&&U 'letrec)
                                     ((case-lambda
                                        ((g$bindings$18604$12l&&U
                                           g$body*$18605$12l&&U)
                                         ((case-lambda
                                            ((g$lhs*$18606$12l&&U
                                               g$rhs*$18607$12l&&U)
                                             (g$cons*$11837$12l&&U
                                               'letrec
                                               (g$map$11835$12l&&U
                                                 list
                                                 g$lhs*$18606$12l&&U
                                                 (g$map$11835$12l&&U
                                                   g$f$18599$12l&&U
                                                   g$rhs*$18607$12l&&U))
                                               (g$map$11835$12l&&U
                                                 g$f$18599$12l&&U
                                                 g$body*$18605$12l&&U))))
                                          (g$map$11835$12l&&U
                                            car
                                            g$bindings$18604$12l&&U)
                                          (g$map$11835$12l&&U
                                            g$cadr$12597$12l&&U
                                            g$bindings$18604$12l&&U))))
                                      (g$cadr$12597$12l&&U
                                        g$x$18600$12l&&U)
                                      (g$cddr$12599$12l&&U
                                        g$x$18600$12l&&U))
                                     (if (eqv?
                                           g$t$18601$12l&&U
                                           'letrec*)
                                       ((case-lambda
                                          ((g$bindings$18608$12l&&U
                                             g$body*$18609$12l&&U)
                                           ((case-lambda
                                              ((g$lhs*$18610$12l&&U
                                                 g$rhs*$18611$12l&&U)
                                               (g$cons*$11837$12l&&U
                                                 'letrec*
                                                 (g$map$11835$12l&&U
                                                   list
                                                   g$lhs*$18610$12l&&U
                                                   (g$map$11835$12l&&U
                                                     g$f$18599$12l&&U
                                                     g$rhs*$18611$12l&&U))
                                                 (g$map$11835$12l&&U
                                                   g$f$18599$12l&&U
                                                   g$body*$18609$12l&&U))))
                                            (g$map$11835$12l&&U
                                              car
                                              g$bindings$18608$12l&&U)
                                            (g$map$11835$12l&&U
                                              g$cadr$12597$12l&&U
                                              g$bindings$18608$12l&&U))))
                                        (g$cadr$12597$12l&&U
                                          g$x$18600$12l&&U)
                                        (g$cddr$12599$12l&&U
                                          g$x$18600$12l&&U))
                                       (if (eqv?
                                             g$t$18601$12l&&U
                                             'library-letrec*)
                                         ((case-lambda
                                            ((g$name$18612$12l&&U
                                               g$x$18613$12l&&U)
                                             ((case-lambda
                                                ((g$bindings$18614$12l&&U
                                                   g$body*$18615$12l&&U)
                                                 ((case-lambda
                                                    ((g$lhs*$18616$12l&&U
                                                       g$lhs**$18617$12l&&U
                                                       g$rhs*$18618$12l&&U)
                                                     (g$cons*$11837$12l&&U
                                                       'library-letrec*
                                                       g$name$18612$12l&&U
                                                       (g$map$11835$12l&&U
                                                         list
                                                         g$lhs*$18616$12l&&U
                                                         g$lhs**$18617$12l&&U
                                                         (g$map$11835$12l&&U
                                                           g$f$18599$12l&&U
                                                           g$rhs*$18618$12l&&U))
                                                       (g$map$11835$12l&&U
                                                         g$f$18599$12l&&U
                                                         g$body*$18615$12l&&U))))
                                                  (g$map$11835$12l&&U
                                                    car
                                                    g$bindings$18614$12l&&U)
                                                  (g$map$11835$12l&&U
                                                    g$cadr$12597$12l&&U
                                                    g$bindings$18614$12l&&U)
                                                  (g$map$11835$12l&&U
                                                    g$caddr$12603$12l&&U
                                                    g$bindings$18614$12l&&U))))
                                              (g$cadr$12597$12l&&U
                                                g$x$18613$12l&&U)
                                              (g$cddr$12599$12l&&U
                                                g$x$18613$12l&&U))))
                                          (g$cadr$12597$12l&&U
                                            g$x$18600$12l&&U)
                                          (cdr g$x$18600$12l&&U))
                                         (if (eqv?
                                               g$t$18601$12l&&U
                                               'begin)
                                           (cons
                                             'begin
                                             (g$map$11835$12l&&U
                                               g$f$18599$12l&&U
                                               (cdr g$x$18600$12l&&U)))
                                           (if (eqv?
                                                 g$t$18601$12l&&U
                                                 'set!)
                                             (list
                                               'set!
                                               (g$cadr$12597$12l&&U
                                                 g$x$18600$12l&&U)
                                               (g$f$18599$12l&&U
                                                 (g$caddr$12603$12l&&U
                                                   g$x$18600$12l&&U)))
                                             (if (eqv?
                                                   g$t$18601$12l&&U
                                                   'primitive)
                                               ((case-lambda
                                                  ((g$op$18619$12l&&U)
                                                   ((case-lambda
                                                      ((g$t$18620$12l&&U)
                                                       (if g$t$18620$12l&&U
                                                         ((case-lambda
                                                            ((g$loc$18621$12l&&U)
                                                             g$loc$18621$12l&&U))
                                                          g$t$18620$12l&&U)
                                                         g$op$18619$12l&&U)))
                                                    ((g$current-primitive-locations$18581$12l&&U)
                                                     g$op$18619$12l&&U))))
                                                (g$cadr$12597$12l&&U
                                                  g$x$18600$12l&&U))
                                               (if (eqv?
                                                     g$t$18601$12l&&U
                                                     'define)
                                                 g$x$18600$12l&&U
                                                 (if (list?
                                                       g$x$18600$12l&&U)
                                                   (g$map$11835$12l&&U
                                                     g$f$18599$12l&&U
                                                     g$x$18600$12l&&U)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$18600$12l&&U
                                                     (list?
                                                       g$x$18600$12l&&U)))))))))))))))
                          (car g$x$18600$12l&&U))
                         g$x$18600$12l&&U)))))
          g$f$18599$12l&&U))))
   (g$expanded->core$18584$12l&&U
     g$expanded->core$18629$12l&&U
     (case-lambda
       ((g$x$18622$12l&&U)
        ((g$rewriter$18583$12l&&U '#t) g$x$18622$12l&&U))))
   (g$compile-core-expr$18585$12l&&U
     g$compile-core-expr$18630$12l&&U
     (case-lambda
       ((g$x$18623$12l&&U)
        ((g$rewriter$18583$12l&&U '#f) g$x$18623$12l&&U))))
   (g$compile-core-expr-to-port$18586$12l&&U
     g$compile-core-expr-to-port$18631$12l&&U
     (case-lambda
       ((g$x$18624$12l&&U g$p$18625$12l&&U)
        (g$pretty-print$18262$12l&&U
          ((g$rewriter$18583$12l&&U '#f) g$x$18624$12l&&U)
          g$p$18625$12l&&U)))))
  (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$18632$12l&&U
     g$make-collection$18841$12l&&U
     (case-lambda
       (()
        ((case-lambda
           ((g$set$18695$12l&&U)
            (letrec* ((g$set-cons$18696$12l&&U
                        (case-lambda
                          ((g$x$18700$12l&&U g$ls$18701$12l&&U)
                           (if (g$memq$11827$12l&&U
                                 g$x$18700$12l&&U
                                 g$ls$18701$12l&&U)
                             g$ls$18701$12l&&U
                             (cons
                               g$x$18700$12l&&U
                               g$ls$18701$12l&&U))))))
              (case-lambda
                (() g$set$18695$12l&&U)
                ((g$x$18697$12l&&U)
                 (set! g$set$18695$12l&&U
                   (g$set-cons$18696$12l&&U
                     g$x$18697$12l&&U
                     g$set$18695$12l&&U)))
                ((g$x$18698$12l&&U g$del?$18699$12l&&U)
                 (if g$del?$18699$12l&&U
                   (set! g$set$18695$12l&&U
                     (g$remq$11842$12l&&U
                       g$x$18698$12l&&U
                       g$set$18695$12l&&U))
                   (set! g$set$18695$12l&&U
                     (g$set-cons$18696$12l&&U
                       g$x$18698$12l&&U
                       g$set$18695$12l&&U))))))))
         '()))))
   (g$current-library-collection$18633$12l&&U
     g$current-library-collection$18842$12l&&U
     (g$make-parameter$18052$12l&&U
       (g$make-collection$18632$12l&&U)
       (case-lambda
         ((g$x$18702$12l&&U)
          (begin
            (if (not (g$procedure?$12581$12l&&U g$x$18702$12l&&U))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$18702$12l&&U)
              (void))
            g$x$18702$12l&&U)))))
   (g$8877$18634$12l&&U
     g$8877$18843$12l&&U
     (make-record-type-descriptor
       'library
       '#f
       'g$8880$12l&&U
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$8879$18635$12l&&U g$8879$18844$12l&&U '#f)
   (g$8878$18636$12l&&U
     g$8878$18845$12l&&U
     (make-record-constructor-descriptor
       g$8877$18634$12l&&U
       '#f
       g$8879$18635$12l&&U))
   (g$library?$18639$12l&&U
     g$library?$18846$12l&&U
     (record-predicate g$8877$18634$12l&&U))
   (g$make-library$18640$12l&&U
     g$make-library$18847$12l&&U
     (record-constructor g$8878$18636$12l&&U))
   (g$library-id$18641$12l&&U
     g$library-id$18848$12l&&U
     (record-accessor g$8877$18634$12l&&U '0))
   (g$library-name$18642$12l&&U
     g$library-name$18849$12l&&U
     (record-accessor g$8877$18634$12l&&U '1))
   (g$library-version$18643$12l&&U
     g$library-version$18850$12l&&U
     (record-accessor g$8877$18634$12l&&U '2))
   (g$library-imp*$18644$12l&&U
     g$library-imp*$18851$12l&&U
     (record-accessor g$8877$18634$12l&&U '3))
   (g$library-vis*$18645$12l&&U
     g$library-vis*$18852$12l&&U
     (record-accessor g$8877$18634$12l&&U '4))
   (g$library-inv*$18646$12l&&U
     g$library-inv*$18853$12l&&U
     (record-accessor g$8877$18634$12l&&U '5))
   (g$library-subst$18647$12l&&U
     g$library-subst$18854$12l&&U
     (record-accessor g$8877$18634$12l&&U '6))
   (g$library-env$18648$12l&&U
     g$library-env$18855$12l&&U
     (record-accessor g$8877$18634$12l&&U '7))
   (g$library-visit-state$18649$12l&&U
     g$library-visit-state$18856$12l&&U
     (record-accessor g$8877$18634$12l&&U '8))
   (g$library-invoke-state$18650$12l&&U
     g$library-invoke-state$18857$12l&&U
     (record-accessor g$8877$18634$12l&&U '9))
   (g$library-visit-code$18651$12l&&U
     g$library-visit-code$18858$12l&&U
     (record-accessor g$8877$18634$12l&&U '10))
   (g$library-invoke-code$18652$12l&&U
     g$library-invoke-code$18859$12l&&U
     (record-accessor g$8877$18634$12l&&U '11))
   (g$library-visible?$18653$12l&&U
     g$library-visible?$18860$12l&&U
     (record-accessor g$8877$18634$12l&&U '12))
   (g$library-source-file-name$18654$12l&&U
     g$library-source-file-name$18861$12l&&U
     (record-accessor g$8877$18634$12l&&U '13))
   (g$set-library-id!$18655$12l&&U
     g$set-library-id!$18862$12l&&U
     (record-mutator g$8877$18634$12l&&U '0))
   (g$set-library-name!$18656$12l&&U
     g$set-library-name!$18863$12l&&U
     (record-mutator g$8877$18634$12l&&U '1))
   (g$set-library-version!$18657$12l&&U
     g$set-library-version!$18864$12l&&U
     (record-mutator g$8877$18634$12l&&U '2))
   (g$set-library-imp*!$18658$12l&&U
     g$set-library-imp*!$18865$12l&&U
     (record-mutator g$8877$18634$12l&&U '3))
   (g$set-library-vis*!$18659$12l&&U
     g$set-library-vis*!$18866$12l&&U
     (record-mutator g$8877$18634$12l&&U '4))
   (g$set-library-inv*!$18660$12l&&U
     g$set-library-inv*!$18867$12l&&U
     (record-mutator g$8877$18634$12l&&U '5))
   (g$set-library-subst!$18661$12l&&U
     g$set-library-subst!$18868$12l&&U
     (record-mutator g$8877$18634$12l&&U '6))
   (g$set-library-env!$18662$12l&&U
     g$set-library-env!$18869$12l&&U
     (record-mutator g$8877$18634$12l&&U '7))
   (g$set-library-visit-state!$18663$12l&&U
     g$set-library-visit-state!$18870$12l&&U
     (record-mutator g$8877$18634$12l&&U '8))
   (g$set-library-invoke-state!$18664$12l&&U
     g$set-library-invoke-state!$18871$12l&&U
     (record-mutator g$8877$18634$12l&&U '9))
   (g$set-library-visit-code!$18665$12l&&U
     g$set-library-visit-code!$18872$12l&&U
     (record-mutator g$8877$18634$12l&&U '10))
   (g$set-library-invoke-code!$18666$12l&&U
     g$set-library-invoke-code!$18873$12l&&U
     (record-mutator g$8877$18634$12l&&U '11))
   (g$set-library-visible?!$18667$12l&&U
     g$set-library-visible?!$18874$12l&&U
     (record-mutator g$8877$18634$12l&&U '12))
   (g$set-library-source-file-name!$18668$12l&&U
     g$set-library-source-file-name!$18875$12l&&U
     (record-mutator g$8877$18634$12l&&U '13))
   (g$rp$18669$12l&&U
     g$rp$18876$12l&&U
     (make-record-printer
       'library
       (case-lambda
         ((g$x$18703$12l&&U g$p$18704$12l&&U g$wr$18705$12l&&U)
          (begin
            (if (not (g$library?$18639$12l&&U g$x$18703$12l&&U))
              (assertion-violation
                'record-type-printer
                '"not a library")
              (void))
            (display
              (g$format$17843$12l&&U
                '"#<library ~s>"
                (if (null?
                      (g$library-version$18643$12l&&U g$x$18703$12l&&U))
                  (g$library-name$18642$12l&&U g$x$18703$12l&&U)
                  (append
                    (g$library-name$18642$12l&&U g$x$18703$12l&&U)
                    (list
                      (g$library-version$18643$12l&&U
                        g$x$18703$12l&&U)))))
              g$p$18704$12l&&U))))))
   (g$find-dependencies$18670$12l&&U
     g$find-dependencies$18877$12l&&U
     (case-lambda
       ((g$ls$18706$12l&&U)
        (if (null? g$ls$18706$12l&&U)
          '()
          (assertion-violation
            'find-dependencies
            '"cannot handle deps yet")))))
   (g$find-library-by$18671$12l&&U
     g$find-library-by$18878$12l&&U
     (case-lambda
       ((g$pred$18707$12l&&U)
        ((letrec ((g$f$18708$12l&&U
                    (case-lambda
                      ((g$ls$18709$12l&&U)
                       (if (null? g$ls$18709$12l&&U)
                         '#f
                         (if (g$pred$18707$12l&&U
                               (car g$ls$18709$12l&&U))
                           (car g$ls$18709$12l&&U)
                           (g$f$18708$12l&&U
                             (cdr g$ls$18709$12l&&U))))))))
           g$f$18708$12l&&U)
         ((g$current-library-collection$18633$12l&&U))))))
   (g$library-path$18672$12l&&U
     g$library-path$18879$12l&&U
     (g$make-parameter$18052$12l&&U
       '(".")
       (case-lambda
         ((g$x$18710$12l&&U)
          (if (if (list? g$x$18710$12l&&U)
                (begin
                  '#f
                  (g$for-all$11833$12l&&U string? g$x$18710$12l&&U))
                '#f)
            (g$map$11835$12l&&U
              (case-lambda ((g$x$18711$12l&&U) g$x$18711$12l&&U))
              g$x$18710$12l&&U)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$18710$12l&&U))))))
   (g$library-extensions$18673$12l&&U
     g$library-extensions$18880$12l&&U
     (g$make-parameter$18052$12l&&U
       '(".sls" ".ss")
       (case-lambda
         ((g$x$18712$12l&&U)
          (if (if (list? g$x$18712$12l&&U)
                (begin
                  '#f
                  (g$for-all$11833$12l&&U string? g$x$18712$12l&&U))
                '#f)
            (g$map$11835$12l&&U
              (case-lambda ((g$x$18713$12l&&U) g$x$18713$12l&&U))
              g$x$18712$12l&&U)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$18712$12l&&U))))))
   (g$library-name->file-name$18674$12l&&U
     g$library-name->file-name$18881$12l&&U
     (case-lambda
       ((g$x$18714$12l&&U)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$17603$12l&&U)))
          (case-lambda
            ((g$p$18717$12l&&U g$extract$18718$12l&&U)
             ((case-lambda
                ((g$extract$18719$12l&&U g$p$18720$12l&&U)
                 (letrec* ((g$display-hex$18721$12l&&U
                             (case-lambda
                               ((g$n$18729$12l&&U)
                                (if (<= '0 g$n$18729$12l&&U '9)
                                  (display
                                    g$n$18729$12l&&U
                                    g$p$18720$12l&&U)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$18729$12l&&U '10)))
                                    g$p$18720$12l&&U))))))
                   (begin
                     ((letrec ((g$f$18722$12l&&U
                                 (case-lambda
                                   ((g$ls$18723$12l&&U)
                                    (if (not (null? g$ls$18723$12l&&U))
                                      (begin
                                        (display '"/" g$p$18720$12l&&U)
                                        (g$for-each$11836$12l&&U
                                          (case-lambda
                                            ((g$c$18724$12l&&U)
                                             (if ((case-lambda
                                                    ((g$t$18725$12l&&U)
                                                     (if g$t$18725$12l&&U
                                                       g$t$18725$12l&&U
                                                       ((case-lambda
                                                          ((g$t$18726$12l&&U)
                                                           (if g$t$18726$12l&&U
                                                             g$t$18726$12l&&U
                                                             ((case-lambda
                                                                ((g$t$18727$12l&&U)
                                                                 (if g$t$18727$12l&&U
                                                                   g$t$18727$12l&&U
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$11828$12l&&U
                                                                       g$c$18724$12l&&U
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$12643$12l&&U
                                                                '#\0
                                                                g$c$18724$12l&&U
                                                                '#\9)))))
                                                        (g$char<=?$12643$12l&&U
                                                          '#\A
                                                          g$c$18724$12l&&U
                                                          '#\Z)))))
                                                  (g$char<=?$12643$12l&&U
                                                    '#\a
                                                    g$c$18724$12l&&U
                                                    '#\z))
                                               (display
                                                 g$c$18724$12l&&U
                                                 g$p$18720$12l&&U)
                                               (begin
                                                 (display
                                                   '"%"
                                                   g$p$18720$12l&&U)
                                                 ((case-lambda
                                                    ((g$n$18728$12l&&U)
                                                     (begin
                                                       (g$display-hex$18721$12l&&U
                                                         (g$quotient$13522$12l&&U
                                                           g$n$18728$12l&&U
                                                           '16))
                                                       (g$display-hex$18721$12l&&U
                                                         (g$remainder$13523$12l&&U
                                                           g$n$18728$12l&&U
                                                           '16)))))
                                                  (char->integer
                                                    g$c$18724$12l&&U))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$18723$12l&&U))))
                                        (g$f$18722$12l&&U
                                          (cdr g$ls$18723$12l&&U)))
                                      (void))))))
                        g$f$18722$12l&&U)
                      g$x$18714$12l&&U)
                     (g$extract$18719$12l&&U)))))
              g$extract$18718$12l&&U
              g$p$18717$12l&&U)))))))
   (g$file-locator$18675$12l&&U
     g$file-locator$18882$12l&&U
     (g$make-parameter$18052$12l&&U
       (case-lambda
         ((g$x$18730$12l&&U)
          ((case-lambda
             ((g$str$18731$12l&&U)
              ((letrec ((g$f$18732$12l&&U
                          (case-lambda
                            ((g$ls$18733$12l&&U
                               g$exts$18734$12l&&U
                               g$failed-list$18735$12l&&U)
                             (if (null? g$ls$18733$12l&&U)
                               (g$file-locator-resolution-error$18050$12l&&U
                                 g$x$18730$12l&&U
                                 (g$reverse$12595$12l&&U
                                   g$failed-list$18735$12l&&U)
                                 ((case-lambda
                                    ((g$ls$18736$12l&&U)
                                     (if (null? g$ls$18736$12l&&U)
                                       (error 'library-manager '"BUG")
                                       (cdr g$ls$18736$12l&&U))))
                                  (g$external-pending-libraries$18681$12l&&U)))
                               (if (null? g$exts$18734$12l&&U)
                                 (g$f$18732$12l&&U
                                   (cdr g$ls$18733$12l&&U)
                                   (g$library-extensions$18673$12l&&U)
                                   g$failed-list$18735$12l&&U)
                                 ((case-lambda
                                    ((g$name$18737$12l&&U)
                                     (if (g$file-exists?$12706$12l&&U
                                           g$name$18737$12l&&U)
                                       g$name$18737$12l&&U
                                       (g$f$18732$12l&&U
                                         g$ls$18733$12l&&U
                                         (cdr g$exts$18734$12l&&U)
                                         (cons
                                           g$name$18737$12l&&U
                                           g$failed-list$18735$12l&&U)))))
                                  (string-append
                                    (car g$ls$18733$12l&&U)
                                    g$str$18731$12l&&U
                                    (car g$exts$18734$12l&&U)))))))))
                 g$f$18732$12l&&U)
               (g$library-path$18672$12l&&U)
               (g$library-extensions$18673$12l&&U)
               '())))
           (g$library-name->file-name$18674$12l&&U g$x$18730$12l&&U))))
       (case-lambda
         ((g$f$18738$12l&&U)
          (if (g$procedure?$12581$12l&&U g$f$18738$12l&&U)
            g$f$18738$12l&&U
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$18738$12l&&U))))))
   (g$serialize-all$18676$12l&&U
     g$serialize-all$18883$12l&&U
     (case-lambda
       ((g$serialize$18739$12l&&U g$compile$18740$12l&&U)
        (letrec* ((g$library-desc$18741$12l&&U
                    (case-lambda
                      ((g$x$18743$12l&&U)
                       (list
                         (g$library-id$18641$12l&&U g$x$18743$12l&&U)
                         (g$library-name$18642$12l&&U
                           g$x$18743$12l&&U))))))
          (g$for-each$11836$12l&&U
            (case-lambda
              ((g$x$18742$12l&&U)
               (if (g$library-source-file-name$18654$12l&&U
                     g$x$18742$12l&&U)
                 (g$serialize$18739$12l&&U
                   (g$library-source-file-name$18654$12l&&U
                     g$x$18742$12l&&U)
                   (list
                     (g$library-id$18641$12l&&U g$x$18742$12l&&U)
                     (g$library-name$18642$12l&&U g$x$18742$12l&&U)
                     (g$library-version$18643$12l&&U g$x$18742$12l&&U)
                     (g$map$11835$12l&&U
                       g$library-desc$18741$12l&&U
                       (g$library-imp*$18644$12l&&U g$x$18742$12l&&U))
                     (g$map$11835$12l&&U
                       g$library-desc$18741$12l&&U
                       (g$library-vis*$18645$12l&&U g$x$18742$12l&&U))
                     (g$map$11835$12l&&U
                       g$library-desc$18741$12l&&U
                       (g$library-inv*$18646$12l&&U g$x$18742$12l&&U))
                     (g$library-subst$18647$12l&&U g$x$18742$12l&&U)
                     (g$library-env$18648$12l&&U g$x$18742$12l&&U)
                     (g$compile$18740$12l&&U
                       (g$library-visit-code$18651$12l&&U
                         g$x$18742$12l&&U))
                     (g$compile$18740$12l&&U
                       (g$library-invoke-code$18652$12l&&U
                         g$x$18742$12l&&U))
                     (g$library-visible?$18653$12l&&U
                       g$x$18742$12l&&U)))
                 (void))))
            ((g$current-library-collection$18633$12l&&U)))))))
   (g$current-precompiled-library-loader$18677$12l&&U
     g$current-precompiled-library-loader$18884$12l&&U
     (g$make-parameter$18052$12l&&U
       (case-lambda ((g$filename$18744$12l&&U g$sk$18745$12l&&U) '#f))))
   (g$try-load-from-file$18678$12l&&U
     g$try-load-from-file$18885$12l&&U
     (case-lambda
       ((g$filename$18746$12l&&U)
        ((g$current-precompiled-library-loader$18677$12l&&U)
         g$filename$18746$12l&&U
         (case-lambda
           ((g$id$18747$12l&&U
              g$name$18748$12l&&U
              g$ver$18749$12l&&U
              g$imp*$18750$12l&&U
              g$vis*$18751$12l&&U
              g$inv*$18752$12l&&U
              g$exp-subst$18753$12l&&U
              g$exp-env$18754$12l&&U
              g$visit-proc$18755$12l&&U
              g$invoke-proc$18756$12l&&U
              g$visible?$18757$12l&&U)
            ((letrec ((g$f$18758$12l&&U
                        (case-lambda
                          ((g$deps$18759$12l&&U)
                           (if (null? g$deps$18759$12l&&U)
                             (begin
                               (g$install-library$18688$12l&&U
                                 g$id$18747$12l&&U
                                 g$name$18748$12l&&U
                                 g$ver$18749$12l&&U
                                 g$imp*$18750$12l&&U
                                 g$vis*$18751$12l&&U
                                 g$inv*$18752$12l&&U
                                 g$exp-subst$18753$12l&&U
                                 g$exp-env$18754$12l&&U
                                 g$visit-proc$18755$12l&&U
                                 g$invoke-proc$18756$12l&&U
                                 '#f
                                 '#f
                                 g$visible?$18757$12l&&U
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$18760$12l&&U)
                                 ((case-lambda
                                    ((g$label$18761$12l&&U
                                       g$dname$18762$12l&&U)
                                     ((case-lambda
                                        ((g$l$18763$12l&&U)
                                         (if (if (g$library?$18639$12l&&U
                                                   g$l$18763$12l&&U)
                                               (begin
                                                 '#f
                                                 (eq? g$label$18761$12l&&U
                                                      (g$library-id$18641$12l&&U
                                                        g$l$18763$12l&&U)))
                                               '#f)
                                           (g$f$18758$12l&&U
                                             (cdr g$deps$18759$12l&&U))
                                           (begin
                                             (g$library-version-mismatch-warning$18049$12l&&U
                                               g$name$18748$12l&&U
                                               g$dname$18762$12l&&U
                                               g$filename$18746$12l&&U)
                                             '#f))))
                                      (g$find-library-by-name$18683$12l&&U
                                        g$dname$18762$12l&&U))))
                                  (car g$d$18760$12l&&U)
                                  (g$cadr$12597$12l&&U
                                    g$d$18760$12l&&U))))
                              (car g$deps$18759$12l&&U)))))))
               g$f$18758$12l&&U)
             (append
               g$imp*$18750$12l&&U
               g$vis*$18751$12l&&U
               g$inv*$18752$12l&&U)))
           (g$others$18764$12l&&U '#f))))))
   (g$library-loader$18679$12l&&U
     g$library-loader$18886$12l&&U
     (g$make-parameter$18052$12l&&U
       (case-lambda
         ((g$x$18765$12l&&U)
          ((case-lambda
             ((g$file-name$18766$12l&&U)
              (if (not g$file-name$18766$12l&&U)
                (assertion-violation
                  '#f
                  '"cannot find library"
                  g$x$18765$12l&&U)
                ((case-lambda
                   ((g$t$18767$12l&&U)
                    (if g$t$18767$12l&&U
                      g$t$18767$12l&&U
                      (begin
                        '#f
                        ((g$current-library-expander$18680$12l&&U)
                         (g$read-library-source-file$18051$12l&&U
                           g$file-name$18766$12l&&U)
                         g$file-name$18766$12l&&U
                         (case-lambda
                           ((g$name$18768$12l&&U)
                            (if (not (equal?
                                       g$name$18768$12l&&U
                                       g$x$18765$12l&&U))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$open-string-output-port$17603$12l&&U)))
                                  (case-lambda
                                    ((g$p$18771$12l&&U g$e$18772$12l&&U)
                                     ((case-lambda
                                        ((g$e$18773$12l&&U
                                           g$p$18774$12l&&U)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$18774$12l&&U)
                                           (write
                                             g$x$18765$12l&&U
                                             g$p$18774$12l&&U)
                                           (display
                                             '" in file "
                                             g$p$18774$12l&&U)
                                           (display
                                             g$file-name$18766$12l&&U
                                             g$p$18774$12l&&U)
                                           (display
                                             '", found "
                                             g$p$18774$12l&&U)
                                           (write
                                             g$name$18768$12l&&U
                                             g$p$18774$12l&&U)
                                           (display
                                             '" instead"
                                             g$p$18774$12l&&U)
                                           (g$e$18773$12l&&U))))
                                      g$e$18772$12l&&U
                                      g$p$18771$12l&&U)))))
                              (void)))))))))
                 (g$try-load-from-file$18678$12l&&U
                   g$file-name$18766$12l&&U)))))
           ((g$file-locator$18675$12l&&U) g$x$18765$12l&&U))))
       (case-lambda
         ((g$f$18775$12l&&U)
          (if (g$procedure?$12581$12l&&U g$f$18775$12l&&U)
            g$f$18775$12l&&U
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$18775$12l&&U))))))
   (g$current-library-expander$18680$12l&&U
     g$current-library-expander$18887$12l&&U
     (g$make-parameter$18052$12l&&U
       (case-lambda
         ((g$x$18776$12l&&U)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$18777$12l&&U)
          (if (g$procedure?$12581$12l&&U g$f$18777$12l&&U)
            g$f$18777$12l&&U
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$18777$12l&&U))))))
   (g$external-pending-libraries$18681$12l&&U
     g$external-pending-libraries$18888$12l&&U
     (g$make-parameter$18052$12l&&U '()))
   (g$find-external-library$18682$12l&&U
     g$find-external-library$18889$12l&&U
     (case-lambda
       ((g$name$18778$12l&&U)
        (begin
          (if (g$member$11829$12l&&U
                g$name$18778$12l&&U
                (g$external-pending-libraries$18681$12l&&U))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$18778$12l&&U)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$18781$12l&&U
                g$external-pending-libraries$18782$12l&&U)
              ((case-lambda
                 ((g$swap$18783$12l&&U)
                  (dynamic-wind
                    g$swap$18783$12l&&U
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$18679$12l&&U)
                          g$name$18778$12l&&U)
                         ((case-lambda
                            ((g$t$18784$12l&&U)
                             (if g$t$18784$12l&&U
                               g$t$18784$12l&&U
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$18778$12l&&U)))))
                          (g$find-library-by$18671$12l&&U
                            (case-lambda
                              ((g$x$18785$12l&&U)
                               (equal?
                                 (g$library-name$18642$12l&&U
                                   g$x$18785$12l&&U)
                                 g$name$18778$12l&&U))))))))
                    g$swap$18783$12l&&U)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$18786$12l&&U)
                      (begin
                        (g$external-pending-libraries$18781$12l&&U
                          g$external-pending-libraries$18782$12l&&U)
                        (set! g$external-pending-libraries$18782$12l&&U
                          g$t$18786$12l&&U))))
                   (g$external-pending-libraries$18781$12l&&U)))))))
           g$external-pending-libraries$18681$12l&&U
           (cons
             g$name$18778$12l&&U
             (g$external-pending-libraries$18681$12l&&U)))))))
   (g$find-library-by-name$18683$12l&&U
     g$find-library-by-name$18890$12l&&U
     (case-lambda
       ((g$name$18787$12l&&U)
        ((case-lambda
           ((g$t$18788$12l&&U)
            (if g$t$18788$12l&&U
              g$t$18788$12l&&U
              (begin
                '#f
                (g$find-external-library$18682$12l&&U
                  g$name$18787$12l&&U)))))
         (g$find-library-by$18671$12l&&U
           (case-lambda
             ((g$x$18789$12l&&U)
              (equal?
                (g$library-name$18642$12l&&U g$x$18789$12l&&U)
                g$name$18787$12l&&U))))))))
   (g$uninstall-library$18684$12l&&U
     g$uninstall-library$18891$12l&&U
     (case-lambda
       ((g$name$18790$12l&&U g$err?$18791$12l&&U)
        (letrec* ((g$who$18792$12l&&U 'uninstall-library))
          ((case-lambda
             ((g$lib$18793$12l&&U)
              (begin
                (if (if g$err?$18791$12l&&U
                      (begin '#f (not g$lib$18793$12l&&U))
                      '#f)
                  (assertion-violation
                    g$who$18792$12l&&U
                    '"library not installed"
                    g$name$18790$12l&&U)
                  (void))
                ((g$current-library-collection$18633$12l&&U)
                 g$lib$18793$12l&&U
                 '#t)
                (g$for-each$11836$12l&&U
                  (case-lambda
                    ((g$x$18794$12l&&U)
                     ((case-lambda
                        ((g$label$18795$12l&&U g$binding$18796$12l&&U)
                         (begin
                           (remove-location g$label$18795$12l&&U)
                           (if (g$memq$11827$12l&&U
                                 (car g$binding$18796$12l&&U)
                                 '(global
                                    global-macro
                                    global-macro!
                                    global-ctv))
                             (remove-location
                               (cdr g$binding$18796$12l&&U))
                             (void)))))
                      (car g$x$18794$12l&&U)
                      (cdr g$x$18794$12l&&U))))
                  (g$library-env$18648$12l&&U g$lib$18793$12l&&U)))))
           (g$find-library-by$18671$12l&&U
             (case-lambda
               ((g$x$18797$12l&&U)
                (equal?
                  (g$library-name$18642$12l&&U g$x$18797$12l&&U)
                  g$name$18790$12l&&U)))))))
       ((g$name$18798$12l&&U)
        (g$uninstall-library$18684$12l&&U g$name$18798$12l&&U '#t))))
   (g$library-exists?$18685$12l&&U
     g$library-exists?$18892$12l&&U
     (case-lambda
       ((g$name$18799$12l&&U)
        (if (g$find-library-by$18671$12l&&U
              (case-lambda
                ((g$x$18800$12l&&U)
                 (equal?
                   (g$library-name$18642$12l&&U g$x$18800$12l&&U)
                   g$name$18799$12l&&U))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$18686$12l&&U
     g$find-library-by-spec/die$18893$12l&&U
     (case-lambda
       ((g$spec$18801$12l&&U)
        ((case-lambda
           ((g$id$18802$12l&&U)
            ((case-lambda
               ((g$t$18803$12l&&U)
                (if g$t$18803$12l&&U
                  g$t$18803$12l&&U
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$18801$12l&&U)))))
             (g$find-library-by$18671$12l&&U
               (case-lambda
                 ((g$x$18804$12l&&U)
                  (eq? g$id$18802$12l&&U
                       (g$library-id$18641$12l&&U
                         g$x$18804$12l&&U))))))))
         (car g$spec$18801$12l&&U)))))
   (g$install-library-record$18687$12l&&U
     g$install-library-record$18894$12l&&U
     (case-lambda
       ((g$lib$18805$12l&&U)
        (begin
          ((case-lambda
             ((g$exp-env$18806$12l&&U)
              (g$for-each$11836$12l&&U
                (case-lambda
                  ((g$x$18807$12l&&U)
                   ((case-lambda
                      ((g$label$18808$12l&&U g$binding$18809$12l&&U)
                       ((case-lambda
                          ((g$binding$18810$12l&&U)
                           (g$set-label-binding!$18055$12l&&U
                             g$label$18808$12l&&U
                             g$binding$18810$12l&&U)))
                        ((case-lambda
                           ((g$t$18811$12l&&U)
                            (if (eqv? g$t$18811$12l&&U 'global)
                              (cons
                                'global
                                (cons
                                  g$lib$18805$12l&&U
                                  (cdr g$binding$18809$12l&&U)))
                              (if (eqv? g$t$18811$12l&&U 'global-macro)
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$18805$12l&&U
                                    (cdr g$binding$18809$12l&&U)))
                                (if (eqv?
                                      g$t$18811$12l&&U
                                      'global-macro!)
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$18805$12l&&U
                                      (cdr g$binding$18809$12l&&U)))
                                  (if (eqv?
                                        g$t$18811$12l&&U
                                        'global-ctv)
                                    (cons
                                      'global-ctv
                                      (cons
                                        g$lib$18805$12l&&U
                                        (cdr g$binding$18809$12l&&U)))
                                    g$binding$18809$12l&&U))))))
                         (car g$binding$18809$12l&&U)))))
                    (car g$x$18807$12l&&U)
                    (cdr g$x$18807$12l&&U))))
                g$exp-env$18806$12l&&U)))
           (g$library-env$18648$12l&&U g$lib$18805$12l&&U))
          ((g$current-library-collection$18633$12l&&U)
           g$lib$18805$12l&&U)))))
   (g$install-library$18688$12l&&U
     g$install-library$18895$12l&&U
     (case-lambda
       ((g$id$18812$12l&&U
          g$name$18813$12l&&U
          g$ver$18814$12l&&U
          g$imp*$18815$12l&&U
          g$vis*$18816$12l&&U
          g$inv*$18817$12l&&U
          g$exp-subst$18818$12l&&U
          g$exp-env$18819$12l&&U
          g$visit-proc$18820$12l&&U
          g$invoke-proc$18821$12l&&U
          g$visit-code$18822$12l&&U
          g$invoke-code$18823$12l&&U
          g$visible?$18824$12l&&U
          g$source-file-name$18825$12l&&U)
        ((case-lambda
           ((g$imp-lib*$18826$12l&&U
              g$vis-lib*$18827$12l&&U
              g$inv-lib*$18828$12l&&U)
            (begin
              (if (not (if (g$symbol?$12579$12l&&U g$id$18812$12l&&U)
                         (if (list? g$name$18813$12l&&U)
                           (begin '#f (list? g$ver$18814$12l&&U))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$18812$12l&&U
                  g$name$18813$12l&&U
                  g$ver$18814$12l&&U)
                (void))
              (if (g$library-exists?$18685$12l&&U g$name$18813$12l&&U)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$18813$12l&&U)
                (void))
              ((case-lambda
                 ((g$lib$18829$12l&&U)
                  (g$install-library-record$18687$12l&&U
                    g$lib$18829$12l&&U)))
               (g$make-library$18640$12l&&U
                 g$id$18812$12l&&U
                 g$name$18813$12l&&U
                 g$ver$18814$12l&&U
                 g$imp-lib*$18826$12l&&U
                 g$vis-lib*$18827$12l&&U
                 g$inv-lib*$18828$12l&&U
                 g$exp-subst$18818$12l&&U
                 g$exp-env$18819$12l&&U
                 g$visit-proc$18820$12l&&U
                 g$invoke-proc$18821$12l&&U
                 g$visit-code$18822$12l&&U
                 g$invoke-code$18823$12l&&U
                 g$visible?$18824$12l&&U
                 g$source-file-name$18825$12l&&U)))))
         (g$map$11835$12l&&U
           g$find-library-by-spec/die$18686$12l&&U
           g$imp*$18815$12l&&U)
         (g$map$11835$12l&&U
           g$find-library-by-spec/die$18686$12l&&U
           g$vis*$18816$12l&&U)
         (g$map$11835$12l&&U
           g$find-library-by-spec/die$18686$12l&&U
           g$inv*$18817$12l&&U)))))
   (g$imported-label->binding$18689$12l&&U
     g$imported-label->binding$18896$12l&&U
     (case-lambda
       ((g$lab$18830$12l&&U)
        (g$label-binding$18056$12l&&U g$lab$18830$12l&&U))))
   (g$invoke-library$18690$12l&&U
     g$invoke-library$18897$12l&&U
     (case-lambda
       ((g$lib$18831$12l&&U)
        ((case-lambda
           ((g$invoke$18832$12l&&U)
            (if (g$procedure?$12581$12l&&U g$invoke$18832$12l&&U)
              (begin
                (g$set-library-invoke-state!$18664$12l&&U
                  g$lib$18831$12l&&U
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$18831$12l&&U))))
                (g$for-each$11836$12l&&U
                  g$invoke-library$18690$12l&&U
                  (g$library-inv*$18646$12l&&U g$lib$18831$12l&&U))
                (g$set-library-invoke-state!$18664$12l&&U
                  g$lib$18831$12l&&U
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$18831$12l&&U))))
                (g$invoke$18832$12l&&U)
                (g$set-library-invoke-state!$18664$12l&&U
                  g$lib$18831$12l&&U
                  '#t))
              (void))))
         (g$library-invoke-state$18650$12l&&U g$lib$18831$12l&&U)))))
   (g$visit-library$18691$12l&&U
     g$visit-library$18898$12l&&U
     (case-lambda
       ((g$lib$18833$12l&&U)
        ((case-lambda
           ((g$visit$18834$12l&&U)
            (if (g$procedure?$12581$12l&&U g$visit$18834$12l&&U)
              (begin
                (g$set-library-visit-state!$18663$12l&&U
                  g$lib$18833$12l&&U
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$18833$12l&&U))))
                (g$for-each$11836$12l&&U
                  g$invoke-library$18690$12l&&U
                  (g$library-vis*$18645$12l&&U g$lib$18833$12l&&U))
                (g$set-library-visit-state!$18663$12l&&U
                  g$lib$18833$12l&&U
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$18833$12l&&U))))
                (g$visit$18834$12l&&U)
                (g$set-library-visit-state!$18663$12l&&U
                  g$lib$18833$12l&&U
                  '#t))
              (void))))
         (g$library-visit-state$18649$12l&&U g$lib$18833$12l&&U)))))
   (g$invoke-library-by-spec$18692$12l&&U
     g$invoke-library-by-spec$18899$12l&&U
     (case-lambda
       ((g$spec$18835$12l&&U)
        (g$invoke-library$18690$12l&&U
          (g$find-library-by-spec/die$18686$12l&&U
            g$spec$18835$12l&&U)))))
   (g$installed-libraries$18693$12l&&U
     g$installed-libraries$18900$12l&&U
     (case-lambda
       ((g$all?$18836$12l&&U)
        ((letrec ((g$f$18837$12l&&U
                    (case-lambda
                      ((g$ls$18838$12l&&U)
                       (if (null? g$ls$18838$12l&&U)
                         '()
                         (if ((case-lambda
                                ((g$t$18839$12l&&U)
                                 (if g$t$18839$12l&&U
                                   g$t$18839$12l&&U
                                   (begin
                                     '#f
                                     (g$library-visible?$18653$12l&&U
                                       (car g$ls$18838$12l&&U))))))
                              g$all?$18836$12l&&U)
                           (cons
                             (g$library-name$18642$12l&&U
                               (car g$ls$18838$12l&&U))
                             (g$f$18837$12l&&U (cdr g$ls$18838$12l&&U)))
                           (g$f$18837$12l&&U
                             (cdr g$ls$18838$12l&&U))))))))
           g$f$18837$12l&&U)
         ((g$current-library-collection$18633$12l&&U))))
       (() (g$installed-libraries$18693$12l&&U '#f))))
   (g$library-spec$18694$12l&&U
     g$library-spec$18901$12l&&U
     (case-lambda
       ((g$x$18840$12l&&U)
        (begin
          (if (not (g$library?$18639$12l&&U g$x$18840$12l&&U))
            (assertion-violation
              'library-spec
              '"not a library"
              g$x$18840$12l&&U)
            (void))
          (list
            (g$library-id$18641$12l&&U g$x$18840$12l&&U)
            (g$library-name$18642$12l&&U g$x$18840$12l&&U)
            (g$library-version$18643$12l&&U g$x$18840$12l&&U)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$18902$12l&&U
     g$build-global-define$19112$12l&&U
     (case-lambda ((g$x$19083$12l&&U) (g$build-void$19079$12l&&U))))
   (g$build-lambda$19013$12l&&U
     g$build-lambda$19113$12l&&U
     (case-lambda
       ((g$ae$19084$12l&&U g$vars$19085$12l&&U g$exp$19086$12l&&U)
        (list
          'case-lambda
          (list g$vars$19085$12l&&U g$exp$19086$12l&&U)))))
   (g$build-case-lambda$19014$12l&&U
     g$build-case-lambda$19114$12l&&U
     (case-lambda
       ((g$ae$19087$12l&&U g$vars*$19088$12l&&U g$exp*$19089$12l&&U)
        (cons
          'case-lambda
          (g$map$11835$12l&&U
            list
            g$vars*$19088$12l&&U
            g$exp*$19089$12l&&U)))))
   (g$build-let$19015$12l&&U
     g$build-let$19115$12l&&U
     (case-lambda
       ((g$ae$19090$12l&&U
          g$lhs*$19091$12l&&U
          g$rhs*$19092$12l&&U
          g$body$19093$12l&&U)
        (cons
          (g$build-lambda$19013$12l&&U
            g$ae$19090$12l&&U
            g$lhs*$19091$12l&&U
            g$body$19093$12l&&U)
          g$rhs*$19092$12l&&U))))
   (g$build-sequence$19078$12l&&U
     g$build-sequence$19116$12l&&U
     (case-lambda
       ((g$ae$19094$12l&&U g$exps$19095$12l&&U)
        ((letrec ((g$loop$19096$12l&&U
                    (case-lambda
                      ((g$exps$19097$12l&&U)
                       (if (null? (cdr g$exps$19097$12l&&U))
                         (car g$exps$19097$12l&&U)
                         (if (equal?
                               (car g$exps$19097$12l&&U)
                               (g$build-void$19079$12l&&U))
                           (g$loop$19096$12l&&U
                             (cdr g$exps$19097$12l&&U))
                           (cons 'begin g$exps$19097$12l&&U)))))))
           g$loop$19096$12l&&U)
         g$exps$19095$12l&&U))))
   (g$build-void$19079$12l&&U
     g$build-void$19117$12l&&U
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$19080$12l&&U
     g$build-letrec$19118$12l&&U
     (case-lambda
       ((g$ae$19098$12l&&U
          g$vars$19099$12l&&U
          g$val-exps$19100$12l&&U
          g$body-exp$19101$12l&&U)
        (if (null? g$vars$19099$12l&&U)
          g$body-exp$19101$12l&&U
          (list
            'letrec
            (g$map$11835$12l&&U
              list
              g$vars$19099$12l&&U
              g$val-exps$19100$12l&&U)
            g$body-exp$19101$12l&&U)))))
   (g$build-letrec*$19081$12l&&U
     g$build-letrec*$19119$12l&&U
     (case-lambda
       ((g$ae$19102$12l&&U
          g$vars$19103$12l&&U
          g$val-exps$19104$12l&&U
          g$body-exp$19105$12l&&U)
        (if (null? g$vars$19103$12l&&U)
          g$body-exp$19105$12l&&U
          (list
            'letrec*
            (g$map$11835$12l&&U
              list
              g$vars$19103$12l&&U
              g$val-exps$19104$12l&&U)
            g$body-exp$19105$12l&&U)))))
   (g$build-library-letrec*$19082$12l&&U
     g$build-library-letrec*$19120$12l&&U
     (case-lambda
       ((g$ae$19106$12l&&U
          g$name$19107$12l&&U
          g$vars$19108$12l&&U
          g$locs$19109$12l&&U
          g$val-exps$19110$12l&&U
          g$body-exp$19111$12l&&U)
        (list
          'library-letrec*
          g$name$19107$12l&&U
          (g$map$11835$12l&&U
            list
            g$vars$19108$12l&&U
            g$locs$19109$12l&&U
            g$val-exps$19110$12l&&U)
          g$body-exp$19111$12l&&U)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$19121$12l&&U
     g$set-cons$23133$12l&&U
     (case-lambda
       ((g$x$19817$12l&&U g$ls$19818$12l&&U)
        (if (g$memq$11827$12l&&U g$x$19817$12l&&U g$ls$19818$12l&&U)
          g$ls$19818$12l&&U
          (cons g$x$19817$12l&&U g$ls$19818$12l&&U)))))
   (g$set-union$19122$12l&&U
     g$set-union$23134$12l&&U
     (case-lambda
       ((g$ls1$19819$12l&&U g$ls2$19820$12l&&U)
        (if (null? g$ls1$19819$12l&&U)
          g$ls2$19820$12l&&U
          (if (g$memq$11827$12l&&U
                (car g$ls1$19819$12l&&U)
                g$ls2$19820$12l&&U)
            (g$set-union$19122$12l&&U
              (cdr g$ls1$19819$12l&&U)
              g$ls2$19820$12l&&U)
            (cons
              (car g$ls1$19819$12l&&U)
              (g$set-union$19122$12l&&U
                (cdr g$ls1$19819$12l&&U)
                g$ls2$19820$12l&&U)))))))
   (g$top-mark*$19124$12l&&U g$top-mark*$23135$12l&&U '(top))
   (g$top-marked?$19125$12l&&U
     g$top-marked?$23136$12l&&U
     (case-lambda
       ((g$m*$19821$12l&&U)
        (g$memq$11827$12l&&U 'top g$m*$19821$12l&&U))))
   (g$gen-lexical$19126$12l&&U
     g$gen-lexical$23137$12l&&U
     (case-lambda
       ((g$sym$19822$12l&&U)
        (if (g$symbol?$12579$12l&&U g$sym$19822$12l&&U)
          (gensym g$sym$19822$12l&&U)
          (if (g$stx?$19163$12l&&U g$sym$19822$12l&&U)
            (g$gen-lexical$19126$12l&&U
              (g$id->sym$19192$12l&&U g$sym$19822$12l&&U))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$19822$12l&&U))))))
   (g$gen-global$19127$12l&&U
     g$gen-global$23138$12l&&U
     (case-lambda
       ((g$x$19823$12l&&U)
        (g$gen-lexical$19126$12l&&U g$x$19823$12l&&U))))
   (g$gen-label$19128$12l&&U
     g$gen-label$23139$12l&&U
     (case-lambda ((g$_$19824$12l&&U) (gensym))))
   (g$gen-top-level-label$19129$12l&&U
     g$gen-top-level-label$23140$12l&&U
     (case-lambda
       ((g$id$19825$12l&&U g$rib$19826$12l&&U)
        (letrec* ((g$find$19827$12l&&U
                    (case-lambda
                      ((g$sym$19833$12l&&U
                         g$mark*$19834$12l&&U
                         g$sym*$19835$12l&&U
                         g$mark**$19836$12l&&U
                         g$label*$19837$12l&&U)
                       (if (pair? g$sym*$19835$12l&&U)
                         (begin
                           '#f
                           (if (if (eq? g$sym$19833$12l&&U
                                        (car g$sym*$19835$12l&&U))
                                 (begin
                                   '#f
                                   (g$same-marks?$19193$12l&&U
                                     g$mark*$19834$12l&&U
                                     (car g$mark**$19836$12l&&U)))
                                 '#f)
                             (car g$label*$19837$12l&&U)
                             (g$find$19827$12l&&U
                               g$sym$19833$12l&&U
                               g$mark*$19834$12l&&U
                               (cdr g$sym*$19835$12l&&U)
                               (cdr g$mark**$19836$12l&&U)
                               (cdr g$label*$19837$12l&&U))))
                         '#f)))))
          ((case-lambda
             ((g$sym$19828$12l&&U g$mark*$19829$12l&&U)
              ((case-lambda
                 ((g$sym*$19830$12l&&U)
                  ((case-lambda
                     ((g$t$19831$12l&&U)
                      (if g$t$19831$12l&&U
                        ((case-lambda
                           ((g$label$19832$12l&&U)
                            (if (g$imported-label->binding$18896$12l&&U
                                  g$label$19832$12l&&U)
                              (gensym)
                              g$label$19832$12l&&U)))
                         g$t$19831$12l&&U)
                        (gensym))))
                   (if (g$memq$11827$12l&&U
                         g$sym$19828$12l&&U
                         (g$rib-sym*$19139$12l&&U g$rib$19826$12l&&U))
                     (begin
                       '#f
                       (g$find$19827$12l&&U
                         g$sym$19828$12l&&U
                         g$mark*$19829$12l&&U
                         g$sym*$19830$12l&&U
                         (g$rib-mark**$19140$12l&&U g$rib$19826$12l&&U)
                         (g$rib-label*$19141$12l&&U
                           g$rib$19826$12l&&U)))
                     '#f))))
               (g$rib-sym*$19139$12l&&U g$rib$19826$12l&&U))))
           (g$id->sym$19192$12l&&U g$id$19825$12l&&U)
           (g$stx-mark*$19166$12l&&U g$id$19825$12l&&U))))))
   (g$gen-define-label+loc$19130$12l&&U
     g$gen-define-label+loc$23141$12l&&U
     (case-lambda
       ((g$id$19838$12l&&U g$rib$19839$12l&&U g$sd?$19840$12l&&U)
        (if g$sd?$19840$12l&&U
          (values
            (gensym)
            (g$gen-lexical$19126$12l&&U g$id$19838$12l&&U))
          ((case-lambda
             ((g$env$19841$12l&&U)
              ((case-lambda
                 ((g$label$19842$12l&&U g$locs$19843$12l&&U)
                  (values
                    g$label$19842$12l&&U
                    ((case-lambda
                       ((g$t$19844$12l&&U)
                        (if g$t$19844$12l&&U
                          (cdr g$t$19844$12l&&U)
                          ((case-lambda
                             ((g$loc$19845$12l&&U)
                              (begin
                                (g$set-interaction-env-locs!$19779$12l&&U
                                  g$env$19841$12l&&U
                                  (cons
                                    (cons
                                      g$label$19842$12l&&U
                                      g$loc$19845$12l&&U)
                                    g$locs$19843$12l&&U))
                                g$loc$19845$12l&&U)))
                           (g$gen-lexical$19126$12l&&U
                             g$id$19838$12l&&U)))))
                     (g$assq$11823$12l&&U
                       g$label$19842$12l&&U
                       g$locs$19843$12l&&U)))))
               (g$gen-top-level-label$19129$12l&&U
                 g$id$19838$12l&&U
                 g$rib$19839$12l&&U)
               (g$interaction-env-locs$19776$12l&&U
                 g$env$19841$12l&&U))))
           (g$top-level-context$19816$12l&&U))))))
   (g$gen-define-label$19131$12l&&U
     g$gen-define-label$23142$12l&&U
     (case-lambda
       ((g$id$19846$12l&&U g$rib$19847$12l&&U g$sd?$19848$12l&&U)
        (if g$sd?$19848$12l&&U
          (gensym)
          (g$gen-top-level-label$19129$12l&&U
            g$id$19846$12l&&U
            g$rib$19847$12l&&U)))))
   (g$9204$19132$12l&&U
     g$9204$23143$12l&&U
     (make-record-type-descriptor
       'rib
       '#f
       'g$9207$12l&&U
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$9206$19133$12l&&U g$9206$23144$12l&&U '#f)
   (g$9205$19134$12l&&U
     g$9205$23145$12l&&U
     (make-record-constructor-descriptor
       g$9204$19132$12l&&U
       '#f
       g$9206$19133$12l&&U))
   (g$rib?$19137$12l&&U
     g$rib?$23146$12l&&U
     (record-predicate g$9204$19132$12l&&U))
   (g$make-rib$19138$12l&&U
     g$make-rib$23147$12l&&U
     (record-constructor g$9205$19134$12l&&U))
   (g$rib-sym*$19139$12l&&U
     g$rib-sym*$23148$12l&&U
     (record-accessor g$9204$19132$12l&&U '0))
   (g$rib-mark**$19140$12l&&U
     g$rib-mark**$23149$12l&&U
     (record-accessor g$9204$19132$12l&&U '1))
   (g$rib-label*$19141$12l&&U
     g$rib-label*$23150$12l&&U
     (record-accessor g$9204$19132$12l&&U '2))
   (g$rib-sealed/freq$19142$12l&&U
     g$rib-sealed/freq$23151$12l&&U
     (record-accessor g$9204$19132$12l&&U '3))
   (g$rib-cache$19143$12l&&U
     g$rib-cache$23152$12l&&U
     (record-accessor g$9204$19132$12l&&U '4))
   (g$set-rib-sym*!$19144$12l&&U
     g$set-rib-sym*!$23153$12l&&U
     (record-mutator g$9204$19132$12l&&U '0))
   (g$set-rib-mark**!$19145$12l&&U
     g$set-rib-mark**!$23154$12l&&U
     (record-mutator g$9204$19132$12l&&U '1))
   (g$set-rib-label*!$19146$12l&&U
     g$set-rib-label*!$23155$12l&&U
     (record-mutator g$9204$19132$12l&&U '2))
   (g$set-rib-sealed/freq!$19147$12l&&U
     g$set-rib-sealed/freq!$23156$12l&&U
     (record-mutator g$9204$19132$12l&&U '3))
   (g$set-rib-cache!$19148$12l&&U
     g$set-rib-cache!$23157$12l&&U
     (record-mutator g$9204$19132$12l&&U '4))
   (g$make-empty-rib$19149$12l&&U
     g$make-empty-rib$23158$12l&&U
     (case-lambda (() (g$make-rib$19138$12l&&U '() '() '() '#f '#f))))
   (g$make-cache-rib$19150$12l&&U
     g$make-cache-rib$23159$12l&&U
     (case-lambda
       (()
        (g$make-rib$19138$12l&&U
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$12688$12l&&U)))))
   (g$find-label$19151$12l&&U
     g$find-label$23160$12l&&U
     (case-lambda
       ((g$rib$19849$12l&&U g$sym$19850$12l&&U g$mark*$19851$12l&&U)
        ((case-lambda
           ((g$ht$19852$12l&&U)
            (if g$ht$19852$12l&&U
              (begin
                '#f
                ((case-lambda
                   ((g$cv$19853$12l&&U)
                    ((case-lambda
                       ((g$t$19854$12l&&U)
                        (if g$t$19854$12l&&U
                          (cdr g$t$19854$12l&&U)
                          '#f)))
                     (if g$cv$19853$12l&&U
                       (begin
                         '#f
                         (g$assp$11826$12l&&U
                           (case-lambda
                             ((g$m$19855$12l&&U)
                              (g$same-marks?$19193$12l&&U
                                g$mark*$19851$12l&&U
                                g$m$19855$12l&&U)))
                           g$cv$19853$12l&&U))
                       '#f))))
                 (g$hashtable-ref$12691$12l&&U
                   g$ht$19852$12l&&U
                   g$sym$19850$12l&&U
                   '#f)))
              '#f)))
         (g$rib-cache$19143$12l&&U g$rib$19849$12l&&U)))))
   (g$extend-rib!$19152$12l&&U
     g$extend-rib!$23161$12l&&U
     (case-lambda
       ((g$rib$19856$12l&&U
          g$id$19857$12l&&U
          g$label$19858$12l&&U
          g$sd?$19859$12l&&U)
        (letrec* ((g$find$19860$12l&&U
                    (case-lambda
                      ((g$sym$19869$12l&&U
                         g$mark*$19870$12l&&U
                         g$sym*$19871$12l&&U
                         g$mark**$19872$12l&&U
                         g$label*$19873$12l&&U)
                       (if (pair? g$sym*$19871$12l&&U)
                         (begin
                           '#f
                           (if (if (eq? g$sym$19869$12l&&U
                                        (car g$sym*$19871$12l&&U))
                                 (begin
                                   '#f
                                   (g$same-marks?$19193$12l&&U
                                     g$mark*$19870$12l&&U
                                     (car g$mark**$19872$12l&&U)))
                                 '#f)
                             g$label*$19873$12l&&U
                             (g$find$19860$12l&&U
                               g$sym$19869$12l&&U
                               g$mark*$19870$12l&&U
                               (cdr g$sym*$19871$12l&&U)
                               (cdr g$mark**$19872$12l&&U)
                               (cdr g$label*$19873$12l&&U))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$19142$12l&&U g$rib$19856$12l&&U)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$19856$12l&&U)
              (void))
            ((case-lambda
               ((g$sym$19861$12l&&U g$mark*$19862$12l&&U)
                ((case-lambda
                   ((g$sym*$19863$12l&&U)
                    ((case-lambda
                       ((g$t$19864$12l&&U)
                        (if g$t$19864$12l&&U
                          ((case-lambda
                             ((g$p$19865$12l&&U)
                              (if (not (eq? g$label$19858$12l&&U
                                            g$p$19865$12l&&U))
                                (g$syntax-violation$19808$12l&&U
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$19857$12l&&U)
                                (void))))
                           g$t$19864$12l&&U)
                          ((case-lambda
                             ((g$t$19866$12l&&U)
                              (if g$t$19866$12l&&U
                                ((case-lambda
                                   ((g$p$19867$12l&&U)
                                    (if (not (eq? g$label$19858$12l&&U
                                                  (car g$p$19867$12l&&U)))
                                      (if (not g$sd?$19859$12l&&U)
                                        (set-car!
                                          g$p$19867$12l&&U
                                          g$label$19858$12l&&U)
                                        (g$syntax-violation$19808$12l&&U
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$19857$12l&&U))
                                      (void))))
                                 g$t$19866$12l&&U)
                                (begin
                                  (if (g$rib-cache$19143$12l&&U
                                        g$rib$19856$12l&&U)
                                    (g$hashtable-update!$12695$12l&&U
                                      (g$rib-cache$19143$12l&&U
                                        g$rib$19856$12l&&U)
                                      g$sym$19861$12l&&U
                                      (case-lambda
                                        ((g$e$19868$12l&&U)
                                         (cons
                                           (cons
                                             g$mark*$19862$12l&&U
                                             g$label$19858$12l&&U)
                                           g$e$19868$12l&&U)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$19144$12l&&U
                                    g$rib$19856$12l&&U
                                    (cons
                                      g$sym$19861$12l&&U
                                      g$sym*$19863$12l&&U))
                                  (g$set-rib-mark**!$19145$12l&&U
                                    g$rib$19856$12l&&U
                                    (cons
                                      g$mark*$19862$12l&&U
                                      (g$rib-mark**$19140$12l&&U
                                        g$rib$19856$12l&&U)))
                                  (g$set-rib-label*!$19146$12l&&U
                                    g$rib$19856$12l&&U
                                    (cons
                                      g$label$19858$12l&&U
                                      (g$rib-label*$19141$12l&&U
                                        g$rib$19856$12l&&U)))))))
                           (if (g$memq$11827$12l&&U
                                 g$sym$19861$12l&&U
                                 (g$rib-sym*$19139$12l&&U
                                   g$rib$19856$12l&&U))
                             (begin
                               '#f
                               (g$find$19860$12l&&U
                                 g$sym$19861$12l&&U
                                 g$mark*$19862$12l&&U
                                 g$sym*$19863$12l&&U
                                 (g$rib-mark**$19140$12l&&U
                                   g$rib$19856$12l&&U)
                                 (g$rib-label*$19141$12l&&U
                                   g$rib$19856$12l&&U)))
                             '#f)))))
                     (g$find-label$19151$12l&&U
                       g$rib$19856$12l&&U
                       g$sym$19861$12l&&U
                       g$mark*$19862$12l&&U))))
                 (g$rib-sym*$19139$12l&&U g$rib$19856$12l&&U))))
             (g$id->sym$19192$12l&&U g$id$19857$12l&&U)
             (g$stx-mark*$19166$12l&&U g$id$19857$12l&&U)))))))
   (g$extend-rib/nc!$19153$12l&&U
     g$extend-rib/nc!$23162$12l&&U
     (case-lambda
       ((g$rib$19874$12l&&U g$id$19875$12l&&U g$label$19876$12l&&U)
        ((case-lambda
           ((g$sym$19877$12l&&U g$mark*$19878$12l&&U)
            ((case-lambda
               ((g$sym*$19879$12l&&U)
                (begin
                  (if (g$rib-cache$19143$12l&&U g$rib$19874$12l&&U)
                    (g$hashtable-update!$12695$12l&&U
                      (g$rib-cache$19143$12l&&U g$rib$19874$12l&&U)
                      g$sym$19877$12l&&U
                      (case-lambda
                        ((g$e$19880$12l&&U)
                         (cons
                           (cons
                             g$mark*$19878$12l&&U
                             g$label$19876$12l&&U)
                           g$e$19880$12l&&U)))
                      '())
                    (void))
                  (g$set-rib-sym*!$19144$12l&&U
                    g$rib$19874$12l&&U
                    (cons g$sym$19877$12l&&U g$sym*$19879$12l&&U))
                  (g$set-rib-mark**!$19145$12l&&U
                    g$rib$19874$12l&&U
                    (cons
                      g$mark*$19878$12l&&U
                      (g$rib-mark**$19140$12l&&U g$rib$19874$12l&&U)))
                  (g$set-rib-label*!$19146$12l&&U
                    g$rib$19874$12l&&U
                    (cons
                      g$label$19876$12l&&U
                      (g$rib-label*$19141$12l&&U
                        g$rib$19874$12l&&U))))))
             (g$rib-sym*$19139$12l&&U g$rib$19874$12l&&U))))
         (g$id->sym$19192$12l&&U g$id$19875$12l&&U)
         (g$stx-mark*$19166$12l&&U g$id$19875$12l&&U)))))
   (g$make-rib-map$19154$12l&&U
     g$make-rib-map$23163$12l&&U
     (case-lambda
       ((g$sym*$19881$12l&&U)
        ((case-lambda
           ((g$ht$19882$12l&&U)
            ((letrec ((g$f$19883$12l&&U
                        (case-lambda
                          ((g$i$19884$12l&&U g$sym*$19885$12l&&U)
                           (if (null? g$sym*$19885$12l&&U)
                             g$ht$19882$12l&&U
                             (begin
                               (g$hashtable-update!$12695$12l&&U
                                 g$ht$19882$12l&&U
                                 (car g$sym*$19885$12l&&U)
                                 (case-lambda
                                   ((g$x$19886$12l&&U)
                                    (cons
                                      g$i$19884$12l&&U
                                      g$x$19886$12l&&U)))
                                 '())
                               (g$f$19883$12l&&U
                                 (+ g$i$19884$12l&&U '1)
                                 (cdr g$sym*$19885$12l&&U))))))))
               g$f$19883$12l&&U)
             '0
             g$sym*$19881$12l&&U)))
         (g$make-eq-hashtable$12688$12l&&U)))))
   (g$seal-rib!$19155$12l&&U
     g$seal-rib!$23164$12l&&U
     (case-lambda
       ((g$rib$19887$12l&&U)
        ((case-lambda
           ((g$sym*$19888$12l&&U)
            (if (not (null? g$sym*$19888$12l&&U))
              (begin
                (g$set-rib-sym*!$19144$12l&&U
                  g$rib$19887$12l&&U
                  (g$list->vector$12589$12l&&U g$sym*$19888$12l&&U))
                (g$set-rib-mark**!$19145$12l&&U
                  g$rib$19887$12l&&U
                  (g$list->vector$12589$12l&&U
                    (g$rib-mark**$19140$12l&&U g$rib$19887$12l&&U)))
                (g$set-rib-label*!$19146$12l&&U
                  g$rib$19887$12l&&U
                  (g$list->vector$12589$12l&&U
                    (g$rib-label*$19141$12l&&U g$rib$19887$12l&&U)))
                (g$set-rib-sealed/freq!$19147$12l&&U
                  g$rib$19887$12l&&U
                  (g$make-rib-map$19154$12l&&U g$sym*$19888$12l&&U)))
              (void))))
         (g$rib-sym*$19139$12l&&U g$rib$19887$12l&&U)))))
   (g$unseal-rib!$19156$12l&&U
     g$unseal-rib!$23165$12l&&U
     (case-lambda
       ((g$rib$19889$12l&&U)
        (if (g$rib-sealed/freq$19142$12l&&U g$rib$19889$12l&&U)
          (begin
            (g$set-rib-sealed/freq!$19147$12l&&U g$rib$19889$12l&&U '#f)
            (g$set-rib-sym*!$19144$12l&&U
              g$rib$19889$12l&&U
              (vector->list
                (g$rib-sym*$19139$12l&&U g$rib$19889$12l&&U)))
            (g$set-rib-mark**!$19145$12l&&U
              g$rib$19889$12l&&U
              (vector->list
                (g$rib-mark**$19140$12l&&U g$rib$19889$12l&&U)))
            (g$set-rib-label*!$19146$12l&&U
              g$rib$19889$12l&&U
              (vector->list
                (g$rib-label*$19141$12l&&U g$rib$19889$12l&&U))))
          (void)))))
   (g$make-full-rib$19157$12l&&U
     g$make-full-rib$23166$12l&&U
     (case-lambda
       ((g$id*$19890$12l&&U g$label*$19891$12l&&U)
        ((case-lambda
           ((g$r$19892$12l&&U)
            (begin
              (g$seal-rib!$19155$12l&&U g$r$19892$12l&&U)
              g$r$19892$12l&&U)))
         (g$make-rib$19138$12l&&U
           (g$map$11835$12l&&U
             g$id->sym$19192$12l&&U
             g$id*$19890$12l&&U)
           (g$map$11835$12l&&U
             g$stx-mark*$19166$12l&&U
             g$id*$19890$12l&&U)
           g$label*$19891$12l&&U
           '#f
           '#f)))))
   (g$9233$19158$12l&&U
     g$9233$23167$12l&&U
     (make-record-type-descriptor
       'stx
       '#f
       'g$9236$12l&&U
       '#t
       '#t
       '#((mutable expr)
          (mutable mark*)
          (mutable subst*)
          (mutable ae*))))
   (g$9235$19159$12l&&U g$9235$23168$12l&&U '#f)
   (g$9234$19160$12l&&U
     g$9234$23169$12l&&U
     (make-record-constructor-descriptor
       g$9233$19158$12l&&U
       '#f
       g$9235$19159$12l&&U))
   (g$stx?$19163$12l&&U
     g$stx?$23170$12l&&U
     (record-predicate g$9233$19158$12l&&U))
   (g$make-stx$19164$12l&&U
     g$make-stx$23171$12l&&U
     (record-constructor g$9234$19160$12l&&U))
   (g$stx-expr$19165$12l&&U
     g$stx-expr$23172$12l&&U
     (record-accessor g$9233$19158$12l&&U '0))
   (g$stx-mark*$19166$12l&&U
     g$stx-mark*$23173$12l&&U
     (record-accessor g$9233$19158$12l&&U '1))
   (g$stx-subst*$19167$12l&&U
     g$stx-subst*$23174$12l&&U
     (record-accessor g$9233$19158$12l&&U '2))
   (g$stx-ae*$19168$12l&&U
     g$stx-ae*$23175$12l&&U
     (record-accessor g$9233$19158$12l&&U '3))
   (g$set-stx-expr!$19169$12l&&U
     g$set-stx-expr!$23176$12l&&U
     (record-mutator g$9233$19158$12l&&U '0))
   (g$set-stx-mark*!$19170$12l&&U
     g$set-stx-mark*!$23177$12l&&U
     (record-mutator g$9233$19158$12l&&U '1))
   (g$set-stx-subst*!$19171$12l&&U
     g$set-stx-subst*!$23178$12l&&U
     (record-mutator g$9233$19158$12l&&U '2))
   (g$set-stx-ae*!$19172$12l&&U
     g$set-stx-ae*!$23179$12l&&U
     (record-mutator g$9233$19158$12l&&U '3))
   (g$rp$19173$12l&&U
     g$rp$23180$12l&&U
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$19893$12l&&U g$p$19894$12l&&U g$wr$19895$12l&&U)
          (begin
            (display '"#<syntax " g$p$19894$12l&&U)
            (write
              (g$stx->datum$19202$12l&&U g$x$19893$12l&&U)
              g$p$19894$12l&&U)
            ((case-lambda
               ((g$expr$19896$12l&&U)
                (if (annotation? g$expr$19896$12l&&U)
                  ((case-lambda
                     ((g$src$19897$12l&&U)
                      (if (pair? g$src$19897$12l&&U)
                        (begin
                          (display '" (" g$p$19894$12l&&U)
                          (display
                            (cdr g$src$19897$12l&&U)
                            g$p$19894$12l&&U)
                          (display '" of " g$p$19894$12l&&U)
                          (display
                            (car g$src$19897$12l&&U)
                            g$p$19894$12l&&U)
                          (display '")" g$p$19894$12l&&U))
                        (void))))
                   (annotation-source g$expr$19896$12l&&U))
                  (void))))
             (g$stx-expr$19165$12l&&U g$x$19893$12l&&U))
            (display '">" g$p$19894$12l&&U))))))
   (g$datum->stx$19174$12l&&U
     g$datum->stx$23181$12l&&U
     (case-lambda
       ((g$id$19898$12l&&U g$datum$19899$12l&&U)
        (g$make-stx$19164$12l&&U
          g$datum$19899$12l&&U
          (g$stx-mark*$19166$12l&&U g$id$19898$12l&&U)
          (g$stx-subst*$19167$12l&&U g$id$19898$12l&&U)
          (g$stx-ae*$19168$12l&&U g$id$19898$12l&&U)))))
   (g$gen-mark$19175$12l&&U
     g$gen-mark$23182$12l&&U
     (case-lambda (() (string '#\m))))
   (g$anti-mark$19176$12l&&U g$anti-mark$23183$12l&&U '#f)
   (g$anti-mark?$19177$12l&&U g$anti-mark?$23184$12l&&U not)
   (g$join-wraps$19178$12l&&U
     g$join-wraps$23185$12l&&U
     (case-lambda
       ((g$m1*$19900$12l&&U
          g$s1*$19901$12l&&U
          g$ae1*$19902$12l&&U
          g$e$19903$12l&&U)
        (letrec* ((g$cancel$19904$12l&&U
                    (case-lambda
                      ((g$ls1$19908$12l&&U g$ls2$19909$12l&&U)
                       ((letrec ((g$f$19910$12l&&U
                                   (case-lambda
                                     ((g$x$19911$12l&&U
                                        g$ls1$19912$12l&&U)
                                      (if (null? g$ls1$19912$12l&&U)
                                        (cdr g$ls2$19909$12l&&U)
                                        (cons
                                          g$x$19911$12l&&U
                                          (g$f$19910$12l&&U
                                            (car g$ls1$19912$12l&&U)
                                            (cdr g$ls1$19912$12l&&U))))))))
                          g$f$19910$12l&&U)
                        (car g$ls1$19908$12l&&U)
                        (cdr g$ls1$19908$12l&&U))))))
          ((case-lambda
             ((g$m2*$19905$12l&&U
                g$s2*$19906$12l&&U
                g$ae2*$19907$12l&&U)
              (if (if (not (null? g$m1*$19900$12l&&U))
                    (if (not (null? g$m2*$19905$12l&&U))
                      (begin
                        '#f
                        (g$anti-mark?$19177$12l&&U
                          (car g$m2*$19905$12l&&U)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$19904$12l&&U
                    g$m1*$19900$12l&&U
                    g$m2*$19905$12l&&U)
                  (g$cancel$19904$12l&&U
                    g$s1*$19901$12l&&U
                    g$s2*$19906$12l&&U)
                  (g$cancel$19904$12l&&U
                    g$ae1*$19902$12l&&U
                    g$ae2*$19907$12l&&U))
                (values
                  (append g$m1*$19900$12l&&U g$m2*$19905$12l&&U)
                  (append g$s1*$19901$12l&&U g$s2*$19906$12l&&U)
                  (append g$ae1*$19902$12l&&U g$ae2*$19907$12l&&U)))))
           (g$stx-mark*$19166$12l&&U g$e$19903$12l&&U)
           (g$stx-subst*$19167$12l&&U g$e$19903$12l&&U)
           (g$stx-ae*$19168$12l&&U g$e$19903$12l&&U))))))
   (g$mkstx$19179$12l&&U
     g$mkstx$23186$12l&&U
     (case-lambda
       ((g$e$19913$12l&&U
          g$m*$19914$12l&&U
          g$s*$19915$12l&&U
          g$ae*$19916$12l&&U)
        (if (if (g$stx?$19163$12l&&U g$e$19913$12l&&U)
              (begin
                '#f
                (not (g$top-marked?$19125$12l&&U g$m*$19914$12l&&U)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$19178$12l&&U
                 g$m*$19914$12l&&U
                 g$s*$19915$12l&&U
                 g$ae*$19916$12l&&U
                 g$e$19913$12l&&U)))
            (case-lambda
              ((g$m*$19920$12l&&U g$s*$19921$12l&&U g$ae*$19922$12l&&U)
               ((case-lambda
                  ((g$ae*$19923$12l&&U
                     g$s*$19924$12l&&U
                     g$m*$19925$12l&&U)
                   (g$make-stx$19164$12l&&U
                     (g$stx-expr$19165$12l&&U g$e$19913$12l&&U)
                     g$m*$19925$12l&&U
                     g$s*$19924$12l&&U
                     g$ae*$19923$12l&&U)))
                g$ae*$19922$12l&&U
                g$s*$19921$12l&&U
                g$m*$19920$12l&&U))))
          (g$make-stx$19164$12l&&U
            g$e$19913$12l&&U
            g$m*$19914$12l&&U
            g$s*$19915$12l&&U
            g$ae*$19916$12l&&U)))))
   (g$add-mark$19180$12l&&U
     g$add-mark$23187$12l&&U
     (case-lambda
       ((g$m$19926$12l&&U g$e$19927$12l&&U g$ae$19928$12l&&U)
        (g$mkstx$19179$12l&&U
          g$e$19927$12l&&U
          (list g$m$19926$12l&&U)
          '(shift)
          (list g$ae$19928$12l&&U)))))
   (g$add-subst$19181$12l&&U
     g$add-subst$23188$12l&&U
     (case-lambda
       ((g$subst$19929$12l&&U g$e$19930$12l&&U)
        (g$mkstx$19179$12l&&U
          g$e$19930$12l&&U
          '()
          (list g$subst$19929$12l&&U)
          '()))))
   (g$syntax-kind?$19182$12l&&U
     g$syntax-kind?$23189$12l&&U
     (case-lambda
       ((g$x$19931$12l&&U g$p?$19932$12l&&U)
        (if (g$stx?$19163$12l&&U g$x$19931$12l&&U)
          (g$syntax-kind?$19182$12l&&U
            (g$stx-expr$19165$12l&&U g$x$19931$12l&&U)
            g$p?$19932$12l&&U)
          (if (annotation? g$x$19931$12l&&U)
            (g$syntax-kind?$19182$12l&&U
              (annotation-expression g$x$19931$12l&&U)
              g$p?$19932$12l&&U)
            (g$p?$19932$12l&&U g$x$19931$12l&&U))))))
   (g$syntax-vector->list$19183$12l&&U
     g$syntax-vector->list$23190$12l&&U
     (case-lambda
       ((g$x$19933$12l&&U)
        (if (g$stx?$19163$12l&&U g$x$19933$12l&&U)
          ((case-lambda
             ((g$ls$19934$12l&&U
                g$m*$19935$12l&&U
                g$s*$19936$12l&&U
                g$ae*$19937$12l&&U)
              (g$map$11835$12l&&U
                (case-lambda
                  ((g$x$19938$12l&&U)
                   (g$mkstx$19179$12l&&U
                     g$x$19938$12l&&U
                     g$m*$19935$12l&&U
                     g$s*$19936$12l&&U
                     g$ae*$19937$12l&&U)))
                g$ls$19934$12l&&U)))
           (g$syntax-vector->list$19183$12l&&U
             (g$stx-expr$19165$12l&&U g$x$19933$12l&&U))
           (g$stx-mark*$19166$12l&&U g$x$19933$12l&&U)
           (g$stx-subst*$19167$12l&&U g$x$19933$12l&&U)
           (g$stx-ae*$19168$12l&&U g$x$19933$12l&&U))
          (if (annotation? g$x$19933$12l&&U)
            (g$syntax-vector->list$19183$12l&&U
              (annotation-expression g$x$19933$12l&&U))
            (if (g$vector?$12577$12l&&U g$x$19933$12l&&U)
              (vector->list g$x$19933$12l&&U)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$19933$12l&&U)))))))
   (g$syntax-pair?$19184$12l&&U
     g$syntax-pair?$23191$12l&&U
     (case-lambda
       ((g$x$19939$12l&&U)
        (g$syntax-kind?$19182$12l&&U g$x$19939$12l&&U pair?))))
   (g$syntax-vector?$19185$12l&&U
     g$syntax-vector?$23192$12l&&U
     (case-lambda
       ((g$x$19940$12l&&U)
        (g$syntax-kind?$19182$12l&&U
          g$x$19940$12l&&U
          g$vector?$12577$12l&&U))))
   (g$syntax-null?$19186$12l&&U
     g$syntax-null?$23193$12l&&U
     (case-lambda
       ((g$x$19941$12l&&U)
        (g$syntax-kind?$19182$12l&&U g$x$19941$12l&&U null?))))
   (g$syntax-list?$19187$12l&&U
     g$syntax-list?$23194$12l&&U
     (case-lambda
       ((g$x$19942$12l&&U)
        ((case-lambda
           ((g$t$19943$12l&&U)
            (if g$t$19943$12l&&U
              g$t$19943$12l&&U
              (begin
                '#f
                (if (g$syntax-pair?$19184$12l&&U g$x$19942$12l&&U)
                  (begin
                    '#f
                    (g$syntax-list?$19187$12l&&U
                      (g$syntax-cdr$19189$12l&&U g$x$19942$12l&&U)))
                  '#f)))))
         (g$syntax-null?$19186$12l&&U g$x$19942$12l&&U)))))
   (g$syntax-car$19188$12l&&U
     g$syntax-car$23195$12l&&U
     (case-lambda
       ((g$x$19944$12l&&U)
        (if (g$stx?$19163$12l&&U g$x$19944$12l&&U)
          (g$mkstx$19179$12l&&U
            (g$syntax-car$19188$12l&&U
              (g$stx-expr$19165$12l&&U g$x$19944$12l&&U))
            (g$stx-mark*$19166$12l&&U g$x$19944$12l&&U)
            (g$stx-subst*$19167$12l&&U g$x$19944$12l&&U)
            (g$stx-ae*$19168$12l&&U g$x$19944$12l&&U))
          (if (annotation? g$x$19944$12l&&U)
            (g$syntax-car$19188$12l&&U
              (annotation-expression g$x$19944$12l&&U))
            (if (pair? g$x$19944$12l&&U)
              (car g$x$19944$12l&&U)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$19944$12l&&U)))))))
   (g$syntax-cdr$19189$12l&&U
     g$syntax-cdr$23196$12l&&U
     (case-lambda
       ((g$x$19945$12l&&U)
        (if (g$stx?$19163$12l&&U g$x$19945$12l&&U)
          (g$mkstx$19179$12l&&U
            (g$syntax-cdr$19189$12l&&U
              (g$stx-expr$19165$12l&&U g$x$19945$12l&&U))
            (g$stx-mark*$19166$12l&&U g$x$19945$12l&&U)
            (g$stx-subst*$19167$12l&&U g$x$19945$12l&&U)
            (g$stx-ae*$19168$12l&&U g$x$19945$12l&&U))
          (if (annotation? g$x$19945$12l&&U)
            (g$syntax-cdr$19189$12l&&U
              (annotation-expression g$x$19945$12l&&U))
            (if (pair? g$x$19945$12l&&U)
              (cdr g$x$19945$12l&&U)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$19945$12l&&U)))))))
   (g$syntax->list$19190$12l&&U
     g$syntax->list$23197$12l&&U
     (case-lambda
       ((g$x$19946$12l&&U)
        (if (g$syntax-pair?$19184$12l&&U g$x$19946$12l&&U)
          (cons
            (g$syntax-car$19188$12l&&U g$x$19946$12l&&U)
            (g$syntax->list$19190$12l&&U
              (g$syntax-cdr$19189$12l&&U g$x$19946$12l&&U)))
          (if (g$syntax-null?$19186$12l&&U g$x$19946$12l&&U)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$19946$12l&&U))))))
   (g$id?$19191$12l&&U
     g$id?$23198$12l&&U
     (case-lambda
       ((g$x$19947$12l&&U)
        (if (g$stx?$19163$12l&&U g$x$19947$12l&&U)
          (begin
            '#f
            ((case-lambda
               ((g$expr$19948$12l&&U)
                (g$symbol?$12579$12l&&U
                  (if (annotation? g$expr$19948$12l&&U)
                    (annotation-stripped g$expr$19948$12l&&U)
                    g$expr$19948$12l&&U))))
             (g$stx-expr$19165$12l&&U g$x$19947$12l&&U)))
          '#f))))
   (g$id->sym$19192$12l&&U
     g$id->sym$23199$12l&&U
     (case-lambda
       ((g$x$19949$12l&&U)
        (begin
          (if (not (g$stx?$19163$12l&&U g$x$19949$12l&&U))
            (error
              'id->sym
              '"BUG in ikarus: not an id"
              g$x$19949$12l&&U)
            (void))
          ((case-lambda
             ((g$expr$19950$12l&&U)
              ((case-lambda
                 ((g$sym$19951$12l&&U)
                  (if (g$symbol?$12579$12l&&U g$sym$19951$12l&&U)
                    g$sym$19951$12l&&U
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$19949$12l&&U))))
               (if (annotation? g$expr$19950$12l&&U)
                 (annotation-stripped g$expr$19950$12l&&U)
                 g$expr$19950$12l&&U))))
           (g$stx-expr$19165$12l&&U g$x$19949$12l&&U))))))
   (g$same-marks?$19193$12l&&U
     g$same-marks?$23200$12l&&U
     (case-lambda
       ((g$x$19952$12l&&U g$y$19953$12l&&U)
        ((case-lambda
           ((g$t$19954$12l&&U)
            (if g$t$19954$12l&&U
              g$t$19954$12l&&U
              (begin
                '#f
                (if (pair? g$x$19952$12l&&U)
                  (if (pair? g$y$19953$12l&&U)
                    (if (eq? (car g$x$19952$12l&&U)
                             (car g$y$19953$12l&&U))
                      (begin
                        '#f
                        (g$same-marks?$19193$12l&&U
                          (cdr g$x$19952$12l&&U)
                          (cdr g$y$19953$12l&&U)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$19952$12l&&U)
           (begin '#f (null? g$y$19953$12l&&U))
           '#f)))))
   (g$bound-id=?$19194$12l&&U
     g$bound-id=?$23201$12l&&U
     (case-lambda
       ((g$x$19955$12l&&U g$y$19956$12l&&U)
        (if (eq? (g$id->sym$19192$12l&&U g$x$19955$12l&&U)
                 (g$id->sym$19192$12l&&U g$y$19956$12l&&U))
          (begin
            '#f
            (g$same-marks?$19193$12l&&U
              (g$stx-mark*$19166$12l&&U g$x$19955$12l&&U)
              (g$stx-mark*$19166$12l&&U g$y$19956$12l&&U)))
          '#f))))
   (g$free-id=?$19195$12l&&U
     g$free-id=?$23202$12l&&U
     (case-lambda
       ((g$i$19957$12l&&U g$j$19958$12l&&U)
        ((case-lambda
           ((g$t0$19959$12l&&U g$t1$19960$12l&&U)
            (if ((case-lambda
                   ((g$t$19961$12l&&U)
                    (if g$t$19961$12l&&U
                      g$t$19961$12l&&U
                      (begin '#f g$t1$19960$12l&&U))))
                 g$t0$19959$12l&&U)
              (eq? g$t0$19959$12l&&U g$t1$19960$12l&&U)
              (eq? (g$id->sym$19192$12l&&U g$i$19957$12l&&U)
                   (g$id->sym$19192$12l&&U g$j$19958$12l&&U)))))
         (g$id->real-label$19205$12l&&U g$i$19957$12l&&U)
         (g$id->real-label$19205$12l&&U g$j$19958$12l&&U)))))
   (g$valid-bound-ids?$19196$12l&&U
     g$valid-bound-ids?$23203$12l&&U
     (case-lambda
       ((g$id*$19962$12l&&U)
        (if (g$for-all$11833$12l&&U
              g$id?$19191$12l&&U
              g$id*$19962$12l&&U)
          (begin
            '#f
            (g$distinct-bound-ids?$19197$12l&&U g$id*$19962$12l&&U))
          '#f))))
   (g$distinct-bound-ids?$19197$12l&&U
     g$distinct-bound-ids?$23204$12l&&U
     (case-lambda
       ((g$id*$19963$12l&&U)
        ((case-lambda
           ((g$t$19964$12l&&U)
            (if g$t$19964$12l&&U
              g$t$19964$12l&&U
              (begin
                '#f
                (if (not (g$bound-id-member?$19198$12l&&U
                           (car g$id*$19963$12l&&U)
                           (cdr g$id*$19963$12l&&U)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$19197$12l&&U
                      (cdr g$id*$19963$12l&&U)))
                  '#f)))))
         (null? g$id*$19963$12l&&U)))))
   (g$bound-id-member?$19198$12l&&U
     g$bound-id-member?$23205$12l&&U
     (case-lambda
       ((g$id$19965$12l&&U g$id*$19966$12l&&U)
        (if (pair? g$id*$19966$12l&&U)
          (begin
            '#f
            ((case-lambda
               ((g$t$19967$12l&&U)
                (if g$t$19967$12l&&U
                  g$t$19967$12l&&U
                  (begin
                    '#f
                    (g$bound-id-member?$19198$12l&&U
                      g$id$19965$12l&&U
                      (cdr g$id*$19966$12l&&U))))))
             (g$bound-id=?$19194$12l&&U
               g$id$19965$12l&&U
               (car g$id*$19966$12l&&U))))
          '#f))))
   (g$self-evaluating?$19199$12l&&U
     g$self-evaluating?$23206$12l&&U
     (case-lambda
       ((g$x$19968$12l&&U)
        ((case-lambda
           ((g$t$19969$12l&&U)
            (if g$t$19969$12l&&U
              g$t$19969$12l&&U
              ((case-lambda
                 ((g$t$19970$12l&&U)
                  (if g$t$19970$12l&&U
                    g$t$19970$12l&&U
                    ((case-lambda
                       ((g$t$19971$12l&&U)
                        (if g$t$19971$12l&&U
                          g$t$19971$12l&&U
                          ((case-lambda
                             ((g$t$19972$12l&&U)
                              (if g$t$19972$12l&&U
                                g$t$19972$12l&&U
                                (begin
                                  '#f
                                  (g$bytevector?$12578$12l&&U
                                    g$x$19968$12l&&U)))))
                           (g$boolean?$12580$12l&&U
                             g$x$19968$12l&&U)))))
                     (g$char?$12576$12l&&U g$x$19968$12l&&U)))))
               (string? g$x$19968$12l&&U)))))
         (number? g$x$19968$12l&&U)))))
   (g$strip-annotations$19200$12l&&U
     g$strip-annotations$23207$12l&&U
     (case-lambda
       ((g$x$19973$12l&&U)
        (if (pair? g$x$19973$12l&&U)
          (cons
            (g$strip-annotations$19200$12l&&U (car g$x$19973$12l&&U))
            (g$strip-annotations$19200$12l&&U (cdr g$x$19973$12l&&U)))
          (if (g$vector?$12577$12l&&U g$x$19973$12l&&U)
            (g$vector-map$12648$12l&&U
              g$strip-annotations$19200$12l&&U
              g$x$19973$12l&&U)
            (if (annotation? g$x$19973$12l&&U)
              (annotation-stripped g$x$19973$12l&&U)
              g$x$19973$12l&&U))))))
   (g$strip$19201$12l&&U
     g$strip$23208$12l&&U
     (case-lambda
       ((g$x$19974$12l&&U g$m*$19975$12l&&U)
        (if (g$top-marked?$19125$12l&&U g$m*$19975$12l&&U)
          (if ((case-lambda
                 ((g$t$19976$12l&&U)
                  (if g$t$19976$12l&&U
                    g$t$19976$12l&&U
                    ((case-lambda
                       ((g$t$19977$12l&&U)
                        (if g$t$19977$12l&&U
                          g$t$19977$12l&&U
                          (begin
                            '#f
                            (if (g$vector?$12577$12l&&U
                                  g$x$19974$12l&&U)
                              (if (> (vector-length g$x$19974$12l&&U)
                                     '0)
                                (begin
                                  '#f
                                  (annotation?
                                    (g$vector-ref$12591$12l&&U
                                      g$x$19974$12l&&U
                                      '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$19974$12l&&U)
                       (begin '#f (annotation? (car g$x$19974$12l&&U)))
                       '#f)))))
               (annotation? g$x$19974$12l&&U))
            (g$strip-annotations$19200$12l&&U g$x$19974$12l&&U)
            g$x$19974$12l&&U)
          ((letrec ((g$f$19978$12l&&U
                      (case-lambda
                        ((g$x$19979$12l&&U)
                         (if (g$stx?$19163$12l&&U g$x$19979$12l&&U)
                           (g$strip$19201$12l&&U
                             (g$stx-expr$19165$12l&&U g$x$19979$12l&&U)
                             (g$stx-mark*$19166$12l&&U
                               g$x$19979$12l&&U))
                           (if (annotation? g$x$19979$12l&&U)
                             (annotation-stripped g$x$19979$12l&&U)
                             (if (pair? g$x$19979$12l&&U)
                               ((case-lambda
                                  ((g$a$19980$12l&&U g$d$19981$12l&&U)
                                   (if (if (eq? g$a$19980$12l&&U
                                                (car g$x$19979$12l&&U))
                                         (begin
                                           '#f
                                           (eq? g$d$19981$12l&&U
                                                (cdr g$x$19979$12l&&U)))
                                         '#f)
                                     g$x$19979$12l&&U
                                     (cons
                                       g$a$19980$12l&&U
                                       g$d$19981$12l&&U))))
                                (g$f$19978$12l&&U
                                  (car g$x$19979$12l&&U))
                                (g$f$19978$12l&&U
                                  (cdr g$x$19979$12l&&U)))
                               (if (g$vector?$12577$12l&&U
                                     g$x$19979$12l&&U)
                                 ((case-lambda
                                    ((g$old$19982$12l&&U)
                                     ((case-lambda
                                        ((g$new$19983$12l&&U)
                                         (if (g$for-all$11833$12l&&U
                                               eq?
                                               g$old$19982$12l&&U
                                               g$new$19983$12l&&U)
                                           g$x$19979$12l&&U
                                           (g$list->vector$12589$12l&&U
                                             g$new$19983$12l&&U))))
                                      (g$map$11835$12l&&U
                                        g$f$19978$12l&&U
                                        g$old$19982$12l&&U))))
                                  (vector->list g$x$19979$12l&&U))
                                 g$x$19979$12l&&U))))))))
             g$f$19978$12l&&U)
           g$x$19974$12l&&U)))))
   (g$stx->datum$19202$12l&&U
     g$stx->datum$23209$12l&&U
     (case-lambda
       ((g$x$19984$12l&&U)
        (g$strip$19201$12l&&U g$x$19984$12l&&U '()))))
   (g$same-marks*?$19203$12l&&U
     g$same-marks*?$23210$12l&&U
     (case-lambda
       ((g$mark*$19985$12l&&U g$mark**$19986$12l&&U g$si$19987$12l&&U)
        (if (null? g$si$19987$12l&&U)
          '#f
          (if (g$same-marks?$19193$12l&&U
                g$mark*$19985$12l&&U
                (g$vector-ref$12591$12l&&U
                  g$mark**$19986$12l&&U
                  (car g$si$19987$12l&&U)))
            (car g$si$19987$12l&&U)
            (g$same-marks*?$19203$12l&&U
              g$mark*$19985$12l&&U
              g$mark**$19986$12l&&U
              (cdr g$si$19987$12l&&U)))))))
   (g$id->label$19204$12l&&U
     g$id->label$23211$12l&&U
     (case-lambda
       ((g$id$19988$12l&&U)
        ((case-lambda
           ((g$t$19989$12l&&U)
            (if g$t$19989$12l&&U
              g$t$19989$12l&&U
              (begin
                '#f
                ((case-lambda
                   ((g$t$19990$12l&&U)
                    (if g$t$19990$12l&&U
                      ((case-lambda
                         ((g$env$19991$12l&&U)
                          ((case-lambda
                             ((g$rib$19992$12l&&U)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$19130$12l&&U
                                     g$id$19988$12l&&U
                                     g$rib$19992$12l&&U
                                     '#f)))
                                (case-lambda
                                  ((g$lab$19995$12l&&U
                                     g$_loc$19996$12l&&U)
                                   ((case-lambda
                                      ((g$_loc$19997$12l&&U
                                         g$lab$19998$12l&&U)
                                       (begin
                                         (g$extend-rib!$19152$12l&&U
                                           g$rib$19992$12l&&U
                                           g$id$19988$12l&&U
                                           g$lab$19998$12l&&U
                                           '#t)
                                         g$lab$19998$12l&&U)))
                                    g$_loc$19996$12l&&U
                                    g$lab$19995$12l&&U))))))
                           (g$interaction-env-rib$19774$12l&&U
                             g$env$19991$12l&&U))))
                       g$t$19990$12l&&U)
                      '#f)))
                 (g$top-level-context$19816$12l&&U))))))
         (g$id->real-label$19205$12l&&U g$id$19988$12l&&U)))))
   (g$id->real-label$19205$12l&&U
     g$id->real-label$23212$12l&&U
     (case-lambda
       ((g$id$19999$12l&&U)
        ((case-lambda
           ((g$sym$20000$12l&&U)
            ((letrec ((g$search$20001$12l&&U
                        (case-lambda
                          ((g$subst*$20002$12l&&U g$mark*$20003$12l&&U)
                           (if (null? g$subst*$20002$12l&&U)
                             '#f
                             (if (eq? (car g$subst*$20002$12l&&U)
                                      'shift)
                               (g$search$20001$12l&&U
                                 (cdr g$subst*$20002$12l&&U)
                                 (cdr g$mark*$20003$12l&&U))
                               ((case-lambda
                                  ((g$rib$20004$12l&&U)
                                   ((case-lambda
                                      ((g$t$20005$12l&&U)
                                       (if g$t$20005$12l&&U
                                         ((case-lambda
                                            ((g$ht$20006$12l&&U)
                                             ((case-lambda
                                                ((g$si$20007$12l&&U)
                                                 ((case-lambda
                                                    ((g$i$20008$12l&&U)
                                                     (if g$i$20008$12l&&U
                                                       (g$vector-ref$12591$12l&&U
                                                         (g$rib-label*$19141$12l&&U
                                                           g$rib$20004$12l&&U)
                                                         g$i$20008$12l&&U)
                                                       (g$search$20001$12l&&U
                                                         (cdr g$subst*$20002$12l&&U)
                                                         g$mark*$20003$12l&&U))))
                                                  (if g$si$20007$12l&&U
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$19203$12l&&U
                                                        g$mark*$20003$12l&&U
                                                        (g$rib-mark**$19140$12l&&U
                                                          g$rib$20004$12l&&U)
                                                        (g$reverse$12595$12l&&U
                                                          g$si$20007$12l&&U)))
                                                    '#f))))
                                              (g$hashtable-ref$12691$12l&&U
                                                g$ht$20006$12l&&U
                                                g$sym$20000$12l&&U
                                                '#f))))
                                          g$t$20005$12l&&U)
                                         ((case-lambda
                                            ((g$t$20009$12l&&U)
                                             (if g$t$20009$12l&&U
                                               g$t$20009$12l&&U
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$20010$12l&&U
                                                             (case-lambda
                                                               ((g$sym*$20011$12l&&U
                                                                  g$mark**$20012$12l&&U
                                                                  g$label*$20013$12l&&U)
                                                                (if (null?
                                                                      g$sym*$20011$12l&&U)
                                                                  (g$search$20001$12l&&U
                                                                    (cdr g$subst*$20002$12l&&U)
                                                                    g$mark*$20003$12l&&U)
                                                                  (if (if (eq? (car g$sym*$20011$12l&&U)
                                                                               g$sym$20000$12l&&U)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$19193$12l&&U
                                                                            (car g$mark**$20012$12l&&U)
                                                                            g$mark*$20003$12l&&U))
                                                                        '#f)
                                                                    (car g$label*$20013$12l&&U)
                                                                    (g$f$20010$12l&&U
                                                                      (cdr g$sym*$20011$12l&&U)
                                                                      (cdr g$mark**$20012$12l&&U)
                                                                      (cdr g$label*$20013$12l&&U))))))))
                                                    g$f$20010$12l&&U)
                                                  (g$rib-sym*$19139$12l&&U
                                                    g$rib$20004$12l&&U)
                                                  (g$rib-mark**$19140$12l&&U
                                                    g$rib$20004$12l&&U)
                                                  (g$rib-label*$19141$12l&&U
                                                    g$rib$20004$12l&&U))))))
                                          (g$find-label$19151$12l&&U
                                            g$rib$20004$12l&&U
                                            g$sym$20000$12l&&U
                                            g$mark*$20003$12l&&U)))))
                                    (g$rib-sealed/freq$19142$12l&&U
                                      g$rib$20004$12l&&U))))
                                (car g$subst*$20002$12l&&U))))))))
               g$search$20001$12l&&U)
             (g$stx-subst*$19167$12l&&U g$id$19999$12l&&U)
             (g$stx-mark*$19166$12l&&U g$id$19999$12l&&U))))
         (g$id->sym$19192$12l&&U g$id$19999$12l&&U)))))
   (g$label->binding$19206$12l&&U
     g$label->binding$23213$12l&&U
     (case-lambda
       ((g$x$20014$12l&&U g$r$20015$12l&&U)
        (if (not g$x$20014$12l&&U)
          '(displaced-lexical)
          ((case-lambda
             ((g$t$20016$12l&&U)
              (if g$t$20016$12l&&U
                ((case-lambda
                   ((g$b$20017$12l&&U)
                    (if (if (pair? g$b$20017$12l&&U)
                          (begin
                            '#f
                            (eq? (car g$b$20017$12l&&U) '$core-rtd))
                          '#f)
                      (cons
                        '$rtd
                        (g$map$11835$12l&&U
                          g$bless$19652$12l&&U
                          (cdr g$b$20017$12l&&U)))
                      (if (if (pair? g$b$20017$12l&&U)
                            (begin
                              '#f
                              (eq? (car g$b$20017$12l&&U) 'global-rtd))
                            '#f)
                        ((case-lambda
                           ((g$lib$20018$12l&&U g$loc$20019$12l&&U)
                            (cons
                              '$rtd
                              (symbol-value g$loc$20019$12l&&U))))
                         (g$cadr$12597$12l&&U g$b$20017$12l&&U)
                         (g$cddr$12599$12l&&U g$b$20017$12l&&U))
                        g$b$20017$12l&&U))))
                 g$t$20016$12l&&U)
                ((case-lambda
                   ((g$t$20020$12l&&U)
                    (if g$t$20020$12l&&U
                      (cdr g$t$20020$12l&&U)
                      ((case-lambda
                         ((g$t$20021$12l&&U)
                          (if g$t$20021$12l&&U
                            ((case-lambda
                               ((g$env$20022$12l&&U)
                                ((case-lambda
                                   ((g$t$20023$12l&&U)
                                    (if g$t$20023$12l&&U
                                      ((case-lambda
                                         ((g$p$20024$12l&&U)
                                          (g$cons*$11837$12l&&U
                                            'lexical
                                            (cdr g$p$20024$12l&&U)
                                            '#f)))
                                       g$t$20023$12l&&U)
                                      '(displaced-lexical . #f))))
                                 (g$assq$11823$12l&&U
                                   g$x$20014$12l&&U
                                   (g$interaction-env-locs$19776$12l&&U
                                     g$env$20022$12l&&U)))))
                             g$t$20021$12l&&U)
                            '(displaced-lexical . #f))))
                       (g$top-level-context$19816$12l&&U)))))
                 (g$assq$11823$12l&&U
                   g$x$20014$12l&&U
                   g$r$20015$12l&&U)))))
           (g$imported-label->binding$18896$12l&&U
             g$x$20014$12l&&U))))))
   (g$make-binding$19207$12l&&U g$make-binding$23214$12l&&U cons)
   (g$binding-type$19208$12l&&U g$binding-type$23215$12l&&U car)
   (g$binding-value$19209$12l&&U g$binding-value$23216$12l&&U cdr)
   (g$raise-unbound-error$19210$12l&&U
     g$raise-unbound-error$23217$12l&&U
     (case-lambda
       ((g$id$20025$12l&&U)
        (g$syntax-violation*$19807$12l&&U
          '#f
          '"unbound identifier"
          g$id$20025$12l&&U
          (g$make-undefined-violation$13368$12l&&U)))))
   (g$syntax-type$19211$12l&&U
     g$syntax-type$23218$12l&&U
     (case-lambda
       ((g$e$20026$12l&&U g$r$20027$12l&&U)
        (if (g$id?$19191$12l&&U g$e$20026$12l&&U)
          ((case-lambda
             ((g$id$20028$12l&&U)
              ((case-lambda
                 ((g$label$20029$12l&&U)
                  ((case-lambda
                     ((g$b$20030$12l&&U)
                      ((case-lambda
                         ((g$type$20031$12l&&U)
                          (begin
                            (if (not g$label$20029$12l&&U)
                              (g$raise-unbound-error$19210$12l&&U
                                g$id$20028$12l&&U)
                              (void))
                            ((case-lambda
                               ((g$t$20032$12l&&U)
                                (if (g$memv$11828$12l&&U
                                      g$t$20032$12l&&U
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable
                                         ctv
                                         local-ctv
                                         global-ctv))
                                  (values
                                    g$type$20031$12l&&U
                                    (g$binding-value$19209$12l&&U
                                      g$b$20030$12l&&U)
                                    g$id$20028$12l&&U)
                                  (values 'other '#f '#f))))
                             g$type$20031$12l&&U))))
                       (g$binding-type$19208$12l&&U g$b$20030$12l&&U))))
                   (g$label->binding$19206$12l&&U
                     g$label$20029$12l&&U
                     g$r$20027$12l&&U))))
               (g$id->label$19204$12l&&U g$id$20028$12l&&U))))
           g$e$20026$12l&&U)
          (if (g$syntax-pair?$19184$12l&&U g$e$20026$12l&&U)
            ((case-lambda
               ((g$id$20033$12l&&U)
                (if (g$id?$19191$12l&&U g$id$20033$12l&&U)
                  ((case-lambda
                     ((g$label$20034$12l&&U)
                      ((case-lambda
                         ((g$b$20035$12l&&U)
                          ((case-lambda
                             ((g$type$20036$12l&&U)
                              (begin
                                (if (not g$label$20034$12l&&U)
                                  (g$raise-unbound-error$19210$12l&&U
                                    g$id$20033$12l&&U)
                                  (void))
                                ((case-lambda
                                   ((g$t$20037$12l&&U)
                                    (if (g$memv$11828$12l&&U
                                          g$t$20037$12l&&U
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd
                                             ctv
                                             local-ctv
                                             global-ctv))
                                      (values
                                        g$type$20036$12l&&U
                                        (g$binding-value$19209$12l&&U
                                          g$b$20035$12l&&U)
                                        g$id$20033$12l&&U)
                                      (values 'call '#f '#f))))
                                 g$type$20036$12l&&U))))
                           (g$binding-type$19208$12l&&U
                             g$b$20035$12l&&U))))
                       (g$label->binding$19206$12l&&U
                         g$label$20034$12l&&U
                         g$r$20027$12l&&U))))
                   (g$id->label$19204$12l&&U g$id$20033$12l&&U))
                  (values 'call '#f '#f))))
             (g$syntax-car$19188$12l&&U g$e$20026$12l&&U))
            ((case-lambda
               ((g$d$20038$12l&&U)
                (if (g$self-evaluating?$19199$12l&&U g$d$20038$12l&&U)
                  (values 'constant g$d$20038$12l&&U '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$19202$12l&&U g$e$20026$12l&&U)))))))
   (g$sanitize-binding$19234$12l&&U
     g$sanitize-binding$23219$12l&&U
     (case-lambda
       ((g$x$20039$12l&&U g$src$20040$12l&&U)
        (if (g$procedure?$12581$12l&&U g$x$20039$12l&&U)
          (g$cons*$11837$12l&&U
            'local-macro
            g$x$20039$12l&&U
            g$src$20040$12l&&U)
          (if (if (pair? g$x$20039$12l&&U)
                (if (eq? (car g$x$20039$12l&&U) 'macro!)
                  (begin
                    '#f
                    (g$procedure?$12581$12l&&U (cdr g$x$20039$12l&&U)))
                  '#f)
                '#f)
            (g$cons*$11837$12l&&U
              'local-macro!
              (cdr g$x$20039$12l&&U)
              g$src$20040$12l&&U)
            (if (if (pair? g$x$20039$12l&&U)
                  (begin '#f (eq? (car g$x$20039$12l&&U) '$rtd))
                  '#f)
              g$x$20039$12l&&U
              (if (if (pair? g$x$20039$12l&&U)
                    (begin '#f (eq? (car g$x$20039$12l&&U) 'ctv))
                    '#f)
                (g$cons*$11837$12l&&U
                  'local-ctv
                  (cdr g$x$20039$12l&&U)
                  g$src$20040$12l&&U)
                (assertion-violation
                  'expand
                  '"invalid transformer"
                  g$x$20039$12l&&U))))))))
   (g$make-variable-transformer$19235$12l&&U
     g$make-variable-transformer$23220$12l&&U
     (case-lambda
       ((g$x$20041$12l&&U)
        (if (g$procedure?$12581$12l&&U g$x$20041$12l&&U)
          (cons 'macro! g$x$20041$12l&&U)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$20041$12l&&U)))))
   (g$make-compile-time-value$19236$12l&&U
     g$make-compile-time-value$23221$12l&&U
     (case-lambda ((g$x$20042$12l&&U) (cons 'ctv g$x$20042$12l&&U))))
   (g$variable-transformer?$19237$12l&&U
     g$variable-transformer?$23222$12l&&U
     (case-lambda
       ((g$x$20043$12l&&U)
        (if (pair? g$x$20043$12l&&U)
          (if (eq? (car g$x$20043$12l&&U) 'macro!)
            (begin
              '#f
              (g$procedure?$12581$12l&&U (cdr g$x$20043$12l&&U)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$19238$12l&&U
     g$variable-transformer-procedure$23223$12l&&U
     (case-lambda
       ((g$x$20044$12l&&U)
        (if (g$variable-transformer?$19237$12l&&U g$x$20044$12l&&U)
          (cdr g$x$20044$12l&&U)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$20044$12l&&U)))))
   (g$make-eval-transformer$19239$12l&&U
     g$make-eval-transformer$23224$12l&&U
     (case-lambda
       ((g$x$20045$12l&&U)
        (g$sanitize-binding$19234$12l&&U
          (eval-core (g$expanded->core$18629$12l&&U g$x$20045$12l&&U))
          g$x$20045$12l&&U))))
   (g$parse-define$19629$12l&&U
     g$parse-define$23225$12l&&U
     (case-lambda
       ((g$x$20046$12l&&U)
        ((case-lambda
           ((g$t$20047$12l&&U)
            ((case-lambda
               ((g$ls/false$20048$12l&&U)
                (if (if g$ls/false$20048$12l&&U
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$20049$12l&&U
                               g$fmls$20050$12l&&U
                               g$b$20051$12l&&U
                               g$b*$20052$12l&&U)
                             (g$id?$19191$12l&&U g$id$20049$12l&&U)))
                          g$ls/false$20048$12l&&U))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$20053$12l&&U
                         g$fmls$20054$12l&&U
                         g$b$20055$12l&&U
                         g$b*$20056$12l&&U)
                       (begin
                         (g$verify-formals$19709$12l&&U
                           g$fmls$20054$12l&&U
                           g$x$20046$12l&&U)
                         (values
                           g$id$20053$12l&&U
                           (cons
                             'defun
                             (cons
                               g$fmls$20054$12l&&U
                               (cons
                                 g$b$20055$12l&&U
                                 g$b*$20056$12l&&U)))))))
                    g$ls/false$20048$12l&&U)
                  ((case-lambda
                     ((g$t$20057$12l&&U)
                      ((case-lambda
                         ((g$ls/false$20058$12l&&U)
                          (if (if g$ls/false$20058$12l&&U
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$20059$12l&&U
                                         g$val$20060$12l&&U)
                                       (g$id?$19191$12l&&U
                                         g$id$20059$12l&&U)))
                                    g$ls/false$20058$12l&&U))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$20061$12l&&U g$val$20062$12l&&U)
                                 (values
                                   g$id$20061$12l&&U
                                   (cons 'expr g$val$20062$12l&&U))))
                              g$ls/false$20058$12l&&U)
                            ((case-lambda
                               ((g$t$20063$12l&&U)
                                ((case-lambda
                                   ((g$ls/false$20064$12l&&U)
                                    (if (if g$ls/false$20064$12l&&U
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$20065$12l&&U)
                                                 (g$id?$19191$12l&&U
                                                   g$id$20065$12l&&U)))
                                              g$ls/false$20064$12l&&U))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$20066$12l&&U)
                                           (values
                                             g$id$20066$12l&&U
                                             (cons
                                               'expr
                                               (g$bless$19652$12l&&U
                                                 '(void))))))
                                        g$ls/false$20064$12l&&U)
                                      (g$syntax-violation$19808$12l&&U
                                        '#f
                                        '"invalid syntax"
                                        g$t$20063$12l&&U))))
                                 (g$syntax-dispatch$19689$12l&&U
                                   g$t$20063$12l&&U
                                   '(_ any)))))
                             g$t$20057$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$20057$12l&&U
                         '(_ any any)))))
                   g$t$20047$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20047$12l&&U
               '(_ (any . any) any . each-any)))))
         g$x$20046$12l&&U))))
   (g$parse-define-syntax$19630$12l&&U
     g$parse-define-syntax$23226$12l&&U
     (case-lambda
       ((g$x$20067$12l&&U)
        ((case-lambda
           ((g$t$20068$12l&&U)
            ((case-lambda
               ((g$ls/false$20069$12l&&U)
                (if (if g$ls/false$20069$12l&&U
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$20070$12l&&U g$val$20071$12l&&U)
                             (g$id?$19191$12l&&U g$id$20070$12l&&U)))
                          g$ls/false$20069$12l&&U))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$20072$12l&&U g$val$20073$12l&&U)
                       (values g$id$20072$12l&&U g$val$20073$12l&&U)))
                    g$ls/false$20069$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20068$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20068$12l&&U
               '(_ any any)))))
         g$x$20067$12l&&U))))
   (g$scheme-stx-hashtable$19631$12l&&U
     g$scheme-stx-hashtable$23227$12l&&U
     (g$make-eq-hashtable$12688$12l&&U))
   (g$scheme-stx$19632$12l&&U
     g$scheme-stx$23228$12l&&U
     (case-lambda
       ((g$sym$20074$12l&&U)
        ((case-lambda
           ((g$t$20075$12l&&U)
            (if g$t$20075$12l&&U
              g$t$20075$12l&&U
              (begin
                '#f
                ((case-lambda
                   ((g$subst$20076$12l&&U)
                    ((case-lambda
                       ((g$stx$20077$12l&&U)
                        ((case-lambda
                           ((g$stx$20078$12l&&U)
                            (begin
                              (g$hashtable-set!$12692$12l&&U
                                g$scheme-stx-hashtable$19631$12l&&U
                                g$sym$20074$12l&&U
                                g$stx$20078$12l&&U)
                              g$stx$20078$12l&&U)))
                         ((case-lambda
                            ((g$t$20079$12l&&U)
                             (if g$t$20079$12l&&U
                               ((case-lambda
                                  ((g$x$20080$12l&&U)
                                   ((case-lambda
                                      ((g$name$20081$12l&&U
                                         g$label$20082$12l&&U)
                                       (g$add-subst$19181$12l&&U
                                         (g$make-rib$19138$12l&&U
                                           (list g$name$20081$12l&&U)
                                           (list
                                             g$top-mark*$19124$12l&&U)
                                           (list g$label$20082$12l&&U)
                                           '#f
                                           '#f)
                                         g$stx$20077$12l&&U)))
                                    (car g$x$20080$12l&&U)
                                    (cdr g$x$20080$12l&&U))))
                                g$t$20079$12l&&U)
                               g$stx$20077$12l&&U)))
                          (g$assq$11823$12l&&U
                            g$sym$20074$12l&&U
                            g$subst$20076$12l&&U)))))
                     (g$make-stx$19164$12l&&U
                       g$sym$20074$12l&&U
                       g$top-mark*$19124$12l&&U
                       '()
                       '()))))
                 (g$library-subst$18854$12l&&U
                   (g$find-library-by-name$18890$12l&&U
                     '(psyntax system $all))))))))
         (g$hashtable-ref$12691$12l&&U
           g$scheme-stx-hashtable$19631$12l&&U
           g$sym$20074$12l&&U
           '#f)))))
   (g$lexical-var$19633$12l&&U g$lexical-var$23229$12l&&U car)
   (g$lexical-mutable?$19634$12l&&U g$lexical-mutable?$23230$12l&&U cdr)
   (g$set-lexical-mutable!$19635$12l&&U
     g$set-lexical-mutable!$23231$12l&&U
     set-cdr!)
   (g$add-lexical$19636$12l&&U
     g$add-lexical$23232$12l&&U
     (case-lambda
       ((g$lab$20083$12l&&U g$lex$20084$12l&&U g$r$20085$12l&&U)
        (cons
          (g$cons*$11837$12l&&U
            g$lab$20083$12l&&U
            'lexical
            g$lex$20084$12l&&U
            '#f)
          g$r$20085$12l&&U))))
   (g$add-lexicals$19637$12l&&U
     g$add-lexicals$23233$12l&&U
     (case-lambda
       ((g$lab*$20086$12l&&U g$lex*$20087$12l&&U g$r$20088$12l&&U)
        (if (null? g$lab*$20086$12l&&U)
          g$r$20088$12l&&U
          (g$add-lexicals$19637$12l&&U
            (cdr g$lab*$20086$12l&&U)
            (cdr g$lex*$20087$12l&&U)
            (g$add-lexical$19636$12l&&U
              (car g$lab*$20086$12l&&U)
              (car g$lex*$20087$12l&&U)
              g$r$20088$12l&&U))))))
   (g$letrec-helper$19638$12l&&U
     g$letrec-helper$23234$12l&&U
     (case-lambda
       ((g$e$20089$12l&&U
          g$r$20090$12l&&U
          g$mr$20091$12l&&U
          g$build$20092$12l&&U)
        ((case-lambda
           ((g$t$20093$12l&&U)
            ((case-lambda
               ((g$ls/false$20094$12l&&U)
                (if g$ls/false$20094$12l&&U
                  (apply
                    (case-lambda
                      ((g$lhs*$20095$12l&&U
                         g$rhs*$20096$12l&&U
                         g$b$20097$12l&&U
                         g$b*$20098$12l&&U)
                       (if (not (g$valid-bound-ids?$19196$12l&&U
                                  g$lhs*$20095$12l&&U))
                         (g$invalid-fmls-error$19654$12l&&U
                           g$e$20089$12l&&U
                           g$lhs*$20095$12l&&U)
                         ((case-lambda
                            ((g$lex*$20099$12l&&U g$lab*$20100$12l&&U)
                             ((case-lambda
                                ((g$rib$20101$12l&&U g$r$20102$12l&&U)
                                 ((case-lambda
                                    ((g$body$20103$12l&&U
                                       g$rhs*$20104$12l&&U)
                                     (g$build$20092$12l&&U
                                       '#f
                                       g$lex*$20099$12l&&U
                                       g$rhs*$20104$12l&&U
                                       g$body$20103$12l&&U)))
                                  (g$chi-internal$19718$12l&&U
                                    (g$add-subst$19181$12l&&U
                                      g$rib$20101$12l&&U
                                      (cons
                                        g$b$20097$12l&&U
                                        g$b*$20098$12l&&U))
                                    g$r$20102$12l&&U
                                    g$mr$20091$12l&&U)
                                  (g$chi-expr*$19705$12l&&U
                                    (g$map$11835$12l&&U
                                      (case-lambda
                                        ((g$x$20105$12l&&U)
                                         (g$add-subst$19181$12l&&U
                                           g$rib$20101$12l&&U
                                           g$x$20105$12l&&U)))
                                      g$rhs*$20096$12l&&U)
                                    g$r$20102$12l&&U
                                    g$mr$20091$12l&&U))))
                              (g$make-full-rib$19157$12l&&U
                                g$lhs*$20095$12l&&U
                                g$lab*$20100$12l&&U)
                              (g$add-lexicals$19637$12l&&U
                                g$lab*$20100$12l&&U
                                g$lex*$20099$12l&&U
                                g$r$20090$12l&&U))))
                          (g$map$11835$12l&&U
                            g$gen-lexical$19126$12l&&U
                            g$lhs*$20095$12l&&U)
                          (g$map$11835$12l&&U
                            g$gen-label$19128$12l&&U
                            g$lhs*$20095$12l&&U)))))
                    g$ls/false$20094$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20093$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20093$12l&&U
               '(_ #(each (any any)) any . each-any)))))
         g$e$20089$12l&&U))))
   (g$letrec-transformer$19639$12l&&U
     g$letrec-transformer$23235$12l&&U
     (case-lambda
       ((g$e$20106$12l&&U g$r$20107$12l&&U g$mr$20108$12l&&U)
        (g$letrec-helper$19638$12l&&U
          g$e$20106$12l&&U
          g$r$20107$12l&&U
          g$mr$20108$12l&&U
          g$build-letrec$19118$12l&&U))))
   (g$letrec*-transformer$19640$12l&&U
     g$letrec*-transformer$23236$12l&&U
     (case-lambda
       ((g$e$20109$12l&&U g$r$20110$12l&&U g$mr$20111$12l&&U)
        (g$letrec-helper$19638$12l&&U
          g$e$20109$12l&&U
          g$r$20110$12l&&U
          g$mr$20111$12l&&U
          g$build-letrec*$19119$12l&&U))))
   (g$fluid-let-syntax-transformer$19641$12l&&U
     g$fluid-let-syntax-transformer$23237$12l&&U
     (case-lambda
       ((g$e$20112$12l&&U g$r$20113$12l&&U g$mr$20114$12l&&U)
        (letrec* ((g$lookup$20115$12l&&U
                    (case-lambda
                      ((g$x$20125$12l&&U)
                       ((case-lambda
                          ((g$t$20126$12l&&U)
                           (if g$t$20126$12l&&U
                             g$t$20126$12l&&U
                             (begin
                               '#f
                               (g$syntax-violation$19808$12l&&U
                                 '#f
                                 '"unbound identifier"
                                 g$e$20112$12l&&U
                                 g$x$20125$12l&&U)))))
                        (g$id->label$19204$12l&&U g$x$20125$12l&&U))))))
          ((case-lambda
             ((g$t$20116$12l&&U)
              ((case-lambda
                 ((g$ls/false$20117$12l&&U)
                  (if g$ls/false$20117$12l&&U
                    (apply
                      (case-lambda
                        ((g$lhs*$20118$12l&&U
                           g$rhs*$20119$12l&&U
                           g$b$20120$12l&&U
                           g$b*$20121$12l&&U)
                         (if (not (g$valid-bound-ids?$19196$12l&&U
                                    g$lhs*$20118$12l&&U))
                           (g$invalid-fmls-error$19654$12l&&U
                             g$e$20112$12l&&U
                             g$lhs*$20118$12l&&U)
                           ((case-lambda
                              ((g$lab*$20122$12l&&U g$rhs*$20123$12l&&U)
                               (g$chi-internal$19718$12l&&U
                                 (cons
                                   g$b$20120$12l&&U
                                   g$b*$20121$12l&&U)
                                 (append
                                   (g$map$11835$12l&&U
                                     cons
                                     g$lab*$20122$12l&&U
                                     g$rhs*$20123$12l&&U)
                                   g$r$20113$12l&&U)
                                 (append
                                   (g$map$11835$12l&&U
                                     cons
                                     g$lab*$20122$12l&&U
                                     g$rhs*$20123$12l&&U)
                                   g$mr$20114$12l&&U))))
                            (g$map$11835$12l&&U
                              g$lookup$20115$12l&&U
                              g$lhs*$20118$12l&&U)
                            (g$map$11835$12l&&U
                              (case-lambda
                                ((g$x$20124$12l&&U)
                                 (g$make-eval-transformer$19239$12l&&U
                                   (g$expand-transformer$19737$12l&&U
                                     g$x$20124$12l&&U
                                     g$mr$20114$12l&&U))))
                              g$rhs*$20119$12l&&U)))))
                      g$ls/false$20117$12l&&U)
                    (g$syntax-violation$19808$12l&&U
                      '#f
                      '"invalid syntax"
                      g$t$20116$12l&&U))))
               (g$syntax-dispatch$19689$12l&&U
                 g$t$20116$12l&&U
                 '(_ #(each (any any)) any . each-any)))))
           g$e$20112$12l&&U)))))
   (g$type-descriptor-transformer$19642$12l&&U
     g$type-descriptor-transformer$23238$12l&&U
     (case-lambda
       ((g$e$20127$12l&&U g$r$20128$12l&&U g$mr$20129$12l&&U)
        ((case-lambda
           ((g$t$20130$12l&&U)
            ((case-lambda
               ((g$ls/false$20131$12l&&U)
                (if (if g$ls/false$20131$12l&&U
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$20132$12l&&U)
                             (g$id?$19191$12l&&U g$id$20132$12l&&U)))
                          g$ls/false$20131$12l&&U))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$20133$12l&&U)
                       ((case-lambda
                          ((g$lab$20134$12l&&U)
                           ((case-lambda
                              ((g$b$20135$12l&&U)
                               ((case-lambda
                                  ((g$type$20136$12l&&U)
                                   (begin
                                     (if (not g$lab$20134$12l&&U)
                                       (g$raise-unbound-error$19210$12l&&U
                                         g$id$20133$12l&&U)
                                       (void))
                                     (if (not (if (eq? g$type$20136$12l&&U
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$19209$12l&&U
                                                           g$b$20135$12l&&U))))
                                                '#f))
                                       (g$syntax-violation$19808$12l&&U
                                         '#f
                                         '"not a record type"
                                         g$e$20127$12l&&U)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$19209$12l&&U
                                         g$b$20135$12l&&U)))))
                                (g$binding-type$19208$12l&&U
                                  g$b$20135$12l&&U))))
                            (g$label->binding$19206$12l&&U
                              g$lab$20134$12l&&U
                              g$r$20128$12l&&U))))
                        (g$id->label$19204$12l&&U g$id$20133$12l&&U))))
                    g$ls/false$20131$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20130$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20130$12l&&U
               '(_ any)))))
         g$e$20127$12l&&U))))
   (g$record-type-descriptor-transformer$19643$12l&&U
     g$record-type-descriptor-transformer$23239$12l&&U
     (case-lambda
       ((g$e$20137$12l&&U g$r$20138$12l&&U g$mr$20139$12l&&U)
        ((case-lambda
           ((g$t$20140$12l&&U)
            ((case-lambda
               ((g$ls/false$20141$12l&&U)
                (if (if g$ls/false$20141$12l&&U
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$20142$12l&&U)
                             (g$id?$19191$12l&&U g$id$20142$12l&&U)))
                          g$ls/false$20141$12l&&U))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$20143$12l&&U)
                       ((case-lambda
                          ((g$lab$20144$12l&&U)
                           ((case-lambda
                              ((g$b$20145$12l&&U)
                               ((case-lambda
                                  ((g$type$20146$12l&&U)
                                   (begin
                                     (if (not g$lab$20144$12l&&U)
                                       (g$raise-unbound-error$19210$12l&&U
                                         g$id$20143$12l&&U)
                                       (void))
                                     (if (not (if (eq? g$type$20146$12l&&U
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$19209$12l&&U
                                                      g$b$20145$12l&&U)))
                                                '#f))
                                       (g$syntax-violation$19808$12l&&U
                                         '#f
                                         '"not a record type"
                                         g$e$20137$12l&&U)
                                       (void))
                                     (g$chi-expr$19707$12l&&U
                                       (car (g$binding-value$19209$12l&&U
                                              g$b$20145$12l&&U))
                                       g$r$20138$12l&&U
                                       g$mr$20139$12l&&U))))
                                (g$binding-type$19208$12l&&U
                                  g$b$20145$12l&&U))))
                            (g$label->binding$19206$12l&&U
                              g$lab$20144$12l&&U
                              g$r$20138$12l&&U))))
                        (g$id->label$19204$12l&&U g$id$20143$12l&&U))))
                    g$ls/false$20141$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20140$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20140$12l&&U
               '(_ any)))))
         g$e$20137$12l&&U))))
   (g$record-constructor-descriptor-transformer$19644$12l&&U
     g$record-constructor-descriptor-transformer$23240$12l&&U
     (case-lambda
       ((g$e$20147$12l&&U g$r$20148$12l&&U g$mr$20149$12l&&U)
        ((case-lambda
           ((g$t$20150$12l&&U)
            ((case-lambda
               ((g$ls/false$20151$12l&&U)
                (if (if g$ls/false$20151$12l&&U
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$20152$12l&&U)
                             (g$id?$19191$12l&&U g$id$20152$12l&&U)))
                          g$ls/false$20151$12l&&U))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$20153$12l&&U)
                       ((case-lambda
                          ((g$lab$20154$12l&&U)
                           ((case-lambda
                              ((g$b$20155$12l&&U)
                               ((case-lambda
                                  ((g$type$20156$12l&&U)
                                   (begin
                                     (if (not g$lab$20154$12l&&U)
                                       (g$raise-unbound-error$19210$12l&&U
                                         g$id$20153$12l&&U)
                                       (void))
                                     (if (not (if (eq? g$type$20156$12l&&U
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$19209$12l&&U
                                                      g$b$20155$12l&&U)))
                                                '#f))
                                       (g$syntax-violation$19808$12l&&U
                                         '#f
                                         '"invalid type"
                                         g$e$20147$12l&&U)
                                       (void))
                                     (g$chi-expr$19707$12l&&U
                                       (g$cadr$12597$12l&&U
                                         (g$binding-value$19209$12l&&U
                                           g$b$20155$12l&&U))
                                       g$r$20148$12l&&U
                                       g$mr$20149$12l&&U))))
                                (g$binding-type$19208$12l&&U
                                  g$b$20155$12l&&U))))
                            (g$label->binding$19206$12l&&U
                              g$lab$20154$12l&&U
                              g$r$20148$12l&&U))))
                        (g$id->label$19204$12l&&U g$id$20153$12l&&U))))
                    g$ls/false$20151$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20150$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20150$12l&&U
               '(_ any)))))
         g$e$20147$12l&&U))))
   (g$when-macro$19645$12l&&U
     g$when-macro$23241$12l&&U
     (case-lambda
       ((g$e$20157$12l&&U)
        ((case-lambda
           ((g$t$20158$12l&&U)
            ((case-lambda
               ((g$ls/false$20159$12l&&U)
                (if g$ls/false$20159$12l&&U
                  (apply
                    (case-lambda
                      ((g$test$20160$12l&&U
                         g$e$20161$12l&&U
                         g$e*$20162$12l&&U)
                       (g$bless$19652$12l&&U
                         (list
                           'if
                           g$test$20160$12l&&U
                           (cons
                             'begin
                             (cons
                               g$e$20161$12l&&U
                               g$e*$20162$12l&&U))))))
                    g$ls/false$20159$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20158$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20158$12l&&U
               '(_ any any . each-any)))))
         g$e$20157$12l&&U))))
   (g$unless-macro$19646$12l&&U
     g$unless-macro$23242$12l&&U
     (case-lambda
       ((g$e$20163$12l&&U)
        ((case-lambda
           ((g$t$20164$12l&&U)
            ((case-lambda
               ((g$ls/false$20165$12l&&U)
                (if g$ls/false$20165$12l&&U
                  (apply
                    (case-lambda
                      ((g$test$20166$12l&&U
                         g$e$20167$12l&&U
                         g$e*$20168$12l&&U)
                       (g$bless$19652$12l&&U
                         (list
                           'if
                           (list 'not g$test$20166$12l&&U)
                           (cons
                             'begin
                             (cons
                               g$e$20167$12l&&U
                               g$e*$20168$12l&&U))))))
                    g$ls/false$20165$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20164$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20164$12l&&U
               '(_ any any . each-any)))))
         g$e$20163$12l&&U))))
   (g$if-transformer$19647$12l&&U
     g$if-transformer$23243$12l&&U
     (case-lambda
       ((g$e$20169$12l&&U g$r$20170$12l&&U g$mr$20171$12l&&U)
        ((case-lambda
           ((g$t$20172$12l&&U)
            ((case-lambda
               ((g$ls/false$20173$12l&&U)
                (if g$ls/false$20173$12l&&U
                  (apply
                    (case-lambda
                      ((g$e0$20174$12l&&U
                         g$e1$20175$12l&&U
                         g$e2$20176$12l&&U)
                       (list
                         'if
                         (g$chi-expr$19707$12l&&U
                           g$e0$20174$12l&&U
                           g$r$20170$12l&&U
                           g$mr$20171$12l&&U)
                         (g$chi-expr$19707$12l&&U
                           g$e1$20175$12l&&U
                           g$r$20170$12l&&U
                           g$mr$20171$12l&&U)
                         (g$chi-expr$19707$12l&&U
                           g$e2$20176$12l&&U
                           g$r$20170$12l&&U
                           g$mr$20171$12l&&U))))
                    g$ls/false$20173$12l&&U)
                  ((case-lambda
                     ((g$t$20177$12l&&U)
                      ((case-lambda
                         ((g$ls/false$20178$12l&&U)
                          (if g$ls/false$20178$12l&&U
                            (apply
                              (case-lambda
                                ((g$e0$20179$12l&&U g$e1$20180$12l&&U)
                                 (list
                                   'if
                                   (g$chi-expr$19707$12l&&U
                                     g$e0$20179$12l&&U
                                     g$r$20170$12l&&U
                                     g$mr$20171$12l&&U)
                                   (g$chi-expr$19707$12l&&U
                                     g$e1$20180$12l&&U
                                     g$r$20170$12l&&U
                                     g$mr$20171$12l&&U)
                                   (g$build-void$19117$12l&&U))))
                              g$ls/false$20178$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"invalid syntax"
                              g$t$20177$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$20177$12l&&U
                         '(_ any any)))))
                   g$t$20172$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20172$12l&&U
               '(_ any any any)))))
         g$e$20169$12l&&U))))
   (g$case-macro$19648$12l&&U
     g$case-macro$23244$12l&&U
     (case-lambda
       ((g$e$20181$12l&&U)
        (letrec* ((g$build-last$20182$12l&&U
                    (case-lambda
                      ((g$cls$20202$12l&&U)
                       ((case-lambda
                          ((g$t$20203$12l&&U)
                           ((case-lambda
                              ((g$ls/false$20204$12l&&U)
                               (if g$ls/false$20204$12l&&U
                                 (apply
                                   (case-lambda
                                     ((g$e$20205$12l&&U
                                        g$e*$20206$12l&&U)
                                      (cons
                                        'begin
                                        (cons
                                          g$e$20205$12l&&U
                                          g$e*$20206$12l&&U))))
                                   g$ls/false$20204$12l&&U)
                                 ((case-lambda
                                    ((g$t$20207$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$20208$12l&&U)
                                         (if g$ls/false$20208$12l&&U
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$20183$12l&&U
                                                  g$cls$20202$12l&&U
                                                  '(if #f #f))))
                                             g$ls/false$20208$12l&&U)
                                           (g$syntax-violation$19808$12l&&U
                                             '#f
                                             '"invalid syntax"
                                             g$t$20207$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$20207$12l&&U
                                        '_))))
                                  g$t$20203$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$20203$12l&&U
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$20202$12l&&U))))
                  (g$build-one$20183$12l&&U
                    (case-lambda
                      ((g$cls$20195$12l&&U g$k$20196$12l&&U)
                       ((case-lambda
                          ((g$t$20197$12l&&U)
                           ((case-lambda
                              ((g$ls/false$20198$12l&&U)
                               (if g$ls/false$20198$12l&&U
                                 (apply
                                   (case-lambda
                                     ((g$d*$20199$12l&&U
                                        g$e$20200$12l&&U
                                        g$e*$20201$12l&&U)
                                      (if (= '1
                                             (length g$d*$20199$12l&&U))
                                        (list
                                          'if
                                          (list
                                            'eqv?
                                            't
                                            (list
                                              'quote
                                              (car g$d*$20199$12l&&U)))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$20200$12l&&U
                                              g$e*$20201$12l&&U))
                                          g$k$20196$12l&&U)
                                        (list
                                          'if
                                          (list
                                            'memv
                                            't
                                            (list
                                              'quote
                                              g$d*$20199$12l&&U))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$20200$12l&&U
                                              g$e*$20201$12l&&U))
                                          g$k$20196$12l&&U))))
                                   g$ls/false$20198$12l&&U)
                                 (g$syntax-violation$19808$12l&&U
                                   '#f
                                   '"invalid syntax"
                                   g$t$20197$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$20197$12l&&U
                              '(each-any any . each-any)))))
                        g$cls$20195$12l&&U)))))
          ((case-lambda
             ((g$t$20184$12l&&U)
              ((case-lambda
                 ((g$ls/false$20185$12l&&U)
                  (if g$ls/false$20185$12l&&U
                    (apply
                      (case-lambda
                        ((g$expr$20186$12l&&U)
                         (g$bless$19652$12l&&U
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$20186$12l&&U))
                               '((if #f #f)))))))
                      g$ls/false$20185$12l&&U)
                    ((case-lambda
                       ((g$t$20187$12l&&U)
                        ((case-lambda
                           ((g$ls/false$20188$12l&&U)
                            (if g$ls/false$20188$12l&&U
                              (apply
                                (case-lambda
                                  ((g$expr$20189$12l&&U
                                     g$cls$20190$12l&&U
                                     g$cls*$20191$12l&&U)
                                   (g$bless$19652$12l&&U
                                     (list
                                       'let
                                       (list
                                         (list 't g$expr$20189$12l&&U))
                                       ((letrec ((g$f$20192$12l&&U
                                                   (case-lambda
                                                     ((g$cls$20193$12l&&U
                                                        g$cls*$20194$12l&&U)
                                                      (if (null?
                                                            g$cls*$20194$12l&&U)
                                                        (g$build-last$20182$12l&&U
                                                          g$cls$20193$12l&&U)
                                                        (g$build-one$20183$12l&&U
                                                          g$cls$20193$12l&&U
                                                          (g$f$20192$12l&&U
                                                            (car g$cls*$20194$12l&&U)
                                                            (cdr g$cls*$20194$12l&&U))))))))
                                          g$f$20192$12l&&U)
                                        g$cls$20190$12l&&U
                                        g$cls*$20191$12l&&U)))))
                                g$ls/false$20188$12l&&U)
                              (g$syntax-violation$19808$12l&&U
                                '#f
                                '"invalid syntax"
                                g$t$20187$12l&&U))))
                         (g$syntax-dispatch$19689$12l&&U
                           g$t$20187$12l&&U
                           '(_ any any . each-any)))))
                     g$t$20184$12l&&U))))
               (g$syntax-dispatch$19689$12l&&U
                 g$t$20184$12l&&U
                 '(_ any)))))
           g$e$20181$12l&&U)))))
   (g$quote-transformer$19649$12l&&U
     g$quote-transformer$23245$12l&&U
     (case-lambda
       ((g$e$20209$12l&&U g$r$20210$12l&&U g$mr$20211$12l&&U)
        ((case-lambda
           ((g$t$20212$12l&&U)
            ((case-lambda
               ((g$ls/false$20213$12l&&U)
                (if g$ls/false$20213$12l&&U
                  (apply
                    (case-lambda
                      ((g$datum$20214$12l&&U)
                       (list
                         'quote
                         (g$stx->datum$19202$12l&&U
                           g$datum$20214$12l&&U))))
                    g$ls/false$20213$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20212$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20212$12l&&U
               '(_ any)))))
         g$e$20209$12l&&U))))
   (g$case-lambda-transformer$19650$12l&&U
     g$case-lambda-transformer$23246$12l&&U
     (case-lambda
       ((g$e$20215$12l&&U g$r$20216$12l&&U g$mr$20217$12l&&U)
        ((case-lambda
           ((g$t$20218$12l&&U)
            ((case-lambda
               ((g$ls/false$20219$12l&&U)
                (if g$ls/false$20219$12l&&U
                  (apply
                    (case-lambda
                      ((g$fmls*$20220$12l&&U
                         g$b*$20221$12l&&U
                         g$b**$20222$12l&&U)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$19711$12l&&U
                              g$e$20215$12l&&U
                              g$fmls*$20220$12l&&U
                              (g$map$11835$12l&&U
                                cons
                                g$b*$20221$12l&&U
                                g$b**$20222$12l&&U)
                              g$r$20216$12l&&U
                              g$mr$20217$12l&&U)))
                         (case-lambda
                           ((g$fmls*$20225$12l&&U g$body*$20226$12l&&U)
                            ((case-lambda
                               ((g$body*$20227$12l&&U
                                  g$fmls*$20228$12l&&U)
                                (g$build-case-lambda$19114$12l&&U
                                  '#f
                                  g$fmls*$20228$12l&&U
                                  g$body*$20227$12l&&U)))
                             g$body*$20226$12l&&U
                             g$fmls*$20225$12l&&U))))))
                    g$ls/false$20219$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20218$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20218$12l&&U
               '(_ . #(each (any any . each-any)))))))
         g$e$20215$12l&&U))))
   (g$lambda-transformer$19651$12l&&U
     g$lambda-transformer$23247$12l&&U
     (case-lambda
       ((g$e$20229$12l&&U g$r$20230$12l&&U g$mr$20231$12l&&U)
        ((case-lambda
           ((g$t$20232$12l&&U)
            ((case-lambda
               ((g$ls/false$20233$12l&&U)
                (if g$ls/false$20233$12l&&U
                  (apply
                    (case-lambda
                      ((g$fmls$20234$12l&&U
                         g$b$20235$12l&&U
                         g$b*$20236$12l&&U)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$19710$12l&&U
                              g$e$20229$12l&&U
                              g$fmls$20234$12l&&U
                              (cons g$b$20235$12l&&U g$b*$20236$12l&&U)
                              g$r$20230$12l&&U
                              g$mr$20231$12l&&U)))
                         (case-lambda
                           ((g$fmls$20239$12l&&U g$body$20240$12l&&U)
                            ((case-lambda
                               ((g$body$20241$12l&&U
                                  g$fmls$20242$12l&&U)
                                (g$build-lambda$19113$12l&&U
                                  '#f
                                  g$fmls$20242$12l&&U
                                  g$body$20241$12l&&U)))
                             g$body$20240$12l&&U
                             g$fmls$20239$12l&&U))))))
                    g$ls/false$20233$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20232$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20232$12l&&U
               '(_ any any . each-any)))))
         g$e$20229$12l&&U))))
   (g$bless$19652$12l&&U
     g$bless$23248$12l&&U
     (case-lambda
       ((g$x$20243$12l&&U)
        (g$mkstx$19179$12l&&U
          ((letrec ((g$f$20244$12l&&U
                      (case-lambda
                        ((g$x$20245$12l&&U)
                         (if (g$stx?$19163$12l&&U g$x$20245$12l&&U)
                           g$x$20245$12l&&U
                           (if (pair? g$x$20245$12l&&U)
                             (cons
                               (g$f$20244$12l&&U (car g$x$20245$12l&&U))
                               (g$f$20244$12l&&U
                                 (cdr g$x$20245$12l&&U)))
                             (if (g$symbol?$12579$12l&&U
                                   g$x$20245$12l&&U)
                               (g$scheme-stx$19632$12l&&U
                                 g$x$20245$12l&&U)
                               (if (g$vector?$12577$12l&&U
                                     g$x$20245$12l&&U)
                                 (g$vector-map$12648$12l&&U
                                   g$f$20244$12l&&U
                                   g$x$20245$12l&&U)
                                 g$x$20245$12l&&U))))))))
             g$f$20244$12l&&U)
           g$x$20243$12l&&U)
          '()
          '()
          '()))))
   (g$with-syntax-macro$19653$12l&&U
     g$with-syntax-macro$23249$12l&&U
     (case-lambda
       ((g$e$20246$12l&&U)
        ((case-lambda
           ((g$t$20247$12l&&U)
            ((case-lambda
               ((g$ls/false$20248$12l&&U)
                (if g$ls/false$20248$12l&&U
                  (apply
                    (case-lambda
                      ((g$pat*$20249$12l&&U
                         g$expr*$20250$12l&&U
                         g$b$20251$12l&&U
                         g$b*$20252$12l&&U)
                       ((case-lambda
                          ((g$idn*$20253$12l&&U)
                           (begin
                             (g$verify-formals$19709$12l&&U
                               (g$map$11835$12l&&U
                                 car
                                 g$idn*$20253$12l&&U)
                               g$e$20246$12l&&U)
                             ((case-lambda
                                ((g$t*$20254$12l&&U)
                                 (g$bless$19652$12l&&U
                                   (list
                                     'let
                                     (g$map$11835$12l&&U
                                       list
                                       g$t*$20254$12l&&U
                                       g$expr*$20250$12l&&U)
                                     ((letrec ((g$f$20255$12l&&U
                                                 (case-lambda
                                                   ((g$pat*$20256$12l&&U
                                                      g$t*$20257$12l&&U)
                                                    (if (null?
                                                          g$pat*$20256$12l&&U)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$20251$12l&&U
                                                            g$b*$20252$12l&&U)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$20257$12l&&U)
                                                        '()
                                                        (list
                                                          (car g$pat*$20256$12l&&U)
                                                          (g$f$20255$12l&&U
                                                            (cdr g$pat*$20256$12l&&U)
                                                            (cdr g$t*$20257$12l&&U)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$20256$12l&&U))
                                                            (car g$t*$20257$12l&&U)))))))))
                                        g$f$20255$12l&&U)
                                      g$pat*$20249$12l&&U
                                      g$t*$20254$12l&&U)))))
                              (g$generate-temporaries$19798$12l&&U
                                g$expr*$20250$12l&&U)))))
                        ((letrec ((g$f$20258$12l&&U
                                    (case-lambda
                                      ((g$pat*$20259$12l&&U)
                                       (if (null? g$pat*$20259$12l&&U)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$19688$12l&&U
                                                (car g$pat*$20259$12l&&U)
                                                '())))
                                           (case-lambda
                                             ((g$pat$20262$12l&&U
                                                g$idn*$20263$12l&&U)
                                              ((case-lambda
                                                 ((g$idn*$20264$12l&&U
                                                    g$pat$20265$12l&&U)
                                                  (append
                                                    g$idn*$20264$12l&&U
                                                    (g$f$20258$12l&&U
                                                      (cdr g$pat*$20259$12l&&U)))))
                                               g$idn*$20263$12l&&U
                                               g$pat$20262$12l&&U)))))))))
                           g$f$20258$12l&&U)
                         g$pat*$20249$12l&&U))))
                    g$ls/false$20248$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20247$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20247$12l&&U
               '(_ #(each (any any)) any . each-any)))))
         g$e$20246$12l&&U))))
   (g$invalid-fmls-error$19654$12l&&U
     g$invalid-fmls-error$23250$12l&&U
     (case-lambda
       ((g$stx$20266$12l&&U g$fmls$20267$12l&&U)
        ((case-lambda
           ((g$t$20268$12l&&U)
            ((case-lambda
               ((g$ls/false$20269$12l&&U)
                (if g$ls/false$20269$12l&&U
                  (apply
                    (case-lambda
                      ((g$id*$20270$12l&&U g$last$20271$12l&&U)
                       ((letrec ((g$f$20272$12l&&U
                                   (case-lambda
                                     ((g$id*$20273$12l&&U)
                                      (if (null? g$id*$20273$12l&&U)
                                        (values)
                                        (if (not (g$id?$19191$12l&&U
                                                   (car g$id*$20273$12l&&U)))
                                          (g$syntax-violation$19808$12l&&U
                                            '#f
                                            '"not an identifier"
                                            g$stx$20266$12l&&U
                                            (car g$id*$20273$12l&&U))
                                          (begin
                                            (g$f$20272$12l&&U
                                              (cdr g$id*$20273$12l&&U))
                                            (if (g$bound-id-member?$19198$12l&&U
                                                  (car g$id*$20273$12l&&U)
                                                  (cdr g$id*$20273$12l&&U))
                                              (g$syntax-violation$19808$12l&&U
                                                '#f
                                                '"duplicate binding"
                                                g$stx$20266$12l&&U
                                                (car g$id*$20273$12l&&U))
                                              (void)))))))))
                          g$f$20272$12l&&U)
                        (if (g$id?$19191$12l&&U g$last$20271$12l&&U)
                          (cons g$last$20271$12l&&U g$id*$20270$12l&&U)
                          (if (g$syntax-null?$19186$12l&&U
                                g$last$20271$12l&&U)
                            g$id*$20270$12l&&U
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"not an identifier"
                              g$stx$20266$12l&&U
                              g$last$20271$12l&&U))))))
                    g$ls/false$20269$12l&&U)
                  ((case-lambda
                     ((g$t$20274$12l&&U)
                      ((case-lambda
                         ((g$ls/false$20275$12l&&U)
                          (if g$ls/false$20275$12l&&U
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$19808$12l&&U
                                   '#f
                                   '"malformed binding form"
                                   g$stx$20266$12l&&U
                                   g$fmls$20267$12l&&U)))
                              g$ls/false$20275$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"invalid syntax"
                              g$t$20274$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$20274$12l&&U
                         '_))))
                   g$t$20268$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20268$12l&&U
               '#(each+ any () any)))))
         g$fmls$20267$12l&&U))))
   (g$let-macro$19655$12l&&U
     g$let-macro$23251$12l&&U
     (case-lambda
       ((g$stx$20276$12l&&U)
        ((case-lambda
           ((g$t$20277$12l&&U)
            ((case-lambda
               ((g$ls/false$20278$12l&&U)
                (if g$ls/false$20278$12l&&U
                  (apply
                    (case-lambda
                      ((g$lhs*$20279$12l&&U
                         g$rhs*$20280$12l&&U
                         g$b$20281$12l&&U
                         g$b*$20282$12l&&U)
                       (if (g$valid-bound-ids?$19196$12l&&U
                             g$lhs*$20279$12l&&U)
                         (g$bless$19652$12l&&U
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$20279$12l&&U
                                 (cons
                                   g$b$20281$12l&&U
                                   g$b*$20282$12l&&U)))
                             g$rhs*$20280$12l&&U))
                         (g$invalid-fmls-error$19654$12l&&U
                           g$stx$20276$12l&&U
                           g$lhs*$20279$12l&&U))))
                    g$ls/false$20278$12l&&U)
                  ((case-lambda
                     ((g$t$20283$12l&&U)
                      ((case-lambda
                         ((g$ls/false$20284$12l&&U)
                          (if (if g$ls/false$20284$12l&&U
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$20285$12l&&U
                                         g$lhs*$20286$12l&&U
                                         g$rhs*$20287$12l&&U
                                         g$b$20288$12l&&U
                                         g$b*$20289$12l&&U)
                                       (g$id?$19191$12l&&U
                                         g$f$20285$12l&&U)))
                                    g$ls/false$20284$12l&&U))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$20290$12l&&U
                                   g$lhs*$20291$12l&&U
                                   g$rhs*$20292$12l&&U
                                   g$b$20293$12l&&U
                                   g$b*$20294$12l&&U)
                                 (if (g$valid-bound-ids?$19196$12l&&U
                                       g$lhs*$20291$12l&&U)
                                   (g$bless$19652$12l&&U
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$20290$12l&&U
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$20291$12l&&U
                                                 (cons
                                                   g$b$20293$12l&&U
                                                   g$b*$20294$12l&&U)))))
                                         g$f$20290$12l&&U)
                                       g$rhs*$20292$12l&&U))
                                   (g$invalid-fmls-error$19654$12l&&U
                                     g$stx$20276$12l&&U
                                     g$lhs*$20291$12l&&U))))
                              g$ls/false$20284$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"invalid syntax"
                              g$t$20283$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$20283$12l&&U
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$20277$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20277$12l&&U
               '(_ #(each (any any)) any . each-any)))))
         g$stx$20276$12l&&U))))
   (g$let-values-macro$19656$12l&&U
     g$let-values-macro$23252$12l&&U
     (case-lambda
       ((g$stx$20295$12l&&U)
        (letrec* ((g$rename$20296$12l&&U
                    (case-lambda
                      ((g$x$20347$12l&&U
                         g$old*$20348$12l&&U
                         g$new*$20349$12l&&U)
                       (begin
                         (if (not (g$id?$19191$12l&&U g$x$20347$12l&&U))
                           (g$syntax-violation$19808$12l&&U
                             '#f
                             '"not an indentifier"
                             g$stx$20295$12l&&U
                             g$x$20347$12l&&U)
                           (void))
                         (if (g$bound-id-member?$19198$12l&&U
                               g$x$20347$12l&&U
                               g$old*$20348$12l&&U)
                           (g$syntax-violation$19808$12l&&U
                             '#f
                             '"duplicate binding"
                             g$stx$20295$12l&&U
                             g$x$20347$12l&&U)
                           (void))
                         ((case-lambda
                            ((g$y$20350$12l&&U)
                             (values
                               g$y$20350$12l&&U
                               (cons
                                 g$x$20347$12l&&U
                                 g$old*$20348$12l&&U)
                               (cons
                                 g$y$20350$12l&&U
                                 g$new*$20349$12l&&U))))
                          (gensym
                            (g$syntax->datum$19811$12l&&U
                              g$x$20347$12l&&U)))))))
                  (g$rename*$20297$12l&&U
                    (case-lambda
                      ((g$x*$20338$12l&&U
                         g$old*$20339$12l&&U
                         g$new*$20340$12l&&U)
                       (if (null? g$x*$20338$12l&&U)
                         (values
                           '()
                           g$old*$20339$12l&&U
                           g$new*$20340$12l&&U)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$20296$12l&&U
                                (car g$x*$20338$12l&&U)
                                g$old*$20339$12l&&U
                                g$new*$20340$12l&&U)))
                           (case-lambda
                             ((g$x$20341$12l&&U
                                g$old*$20342$12l&&U
                                g$new*$20343$12l&&U)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$20297$12l&&U
                                     (cdr g$x*$20338$12l&&U)
                                     g$old*$20342$12l&&U
                                     g$new*$20343$12l&&U)))
                                (case-lambda
                                  ((g$x*$20344$12l&&U
                                     g$old*$20345$12l&&U
                                     g$new*$20346$12l&&U)
                                   (values
                                     (cons
                                       g$x$20341$12l&&U
                                       g$x*$20344$12l&&U)
                                     g$old*$20345$12l&&U
                                     g$new*$20346$12l&&U))))))))))))
          ((case-lambda
             ((g$t$20298$12l&&U)
              ((case-lambda
                 ((g$ls/false$20299$12l&&U)
                  (if g$ls/false$20299$12l&&U
                    (apply
                      (case-lambda
                        ((g$b$20300$12l&&U g$b*$20301$12l&&U)
                         (g$cons*$11837$12l&&U
                           (g$bless$19652$12l&&U 'let)
                           '()
                           g$b$20300$12l&&U
                           g$b*$20301$12l&&U)))
                      g$ls/false$20299$12l&&U)
                    ((case-lambda
                       ((g$t$20302$12l&&U)
                        ((case-lambda
                           ((g$ls/false$20303$12l&&U)
                            (if g$ls/false$20303$12l&&U
                              (apply
                                (case-lambda
                                  ((g$lhs*$20304$12l&&U
                                     g$rhs*$20305$12l&&U
                                     g$b$20306$12l&&U
                                     g$b*$20307$12l&&U)
                                   (g$bless$19652$12l&&U
                                     ((letrec ((g$f$20308$12l&&U
                                                 (case-lambda
                                                   ((g$lhs*$20309$12l&&U
                                                      g$rhs*$20310$12l&&U
                                                      g$old*$20311$12l&&U
                                                      g$new*$20312$12l&&U)
                                                    (if (null?
                                                          g$lhs*$20309$12l&&U)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$11835$12l&&U
                                                            list
                                                            g$old*$20311$12l&&U
                                                            g$new*$20312$12l&&U)
                                                          (cons
                                                            g$b$20306$12l&&U
                                                            g$b*$20307$12l&&U)))
                                                      ((case-lambda
                                                         ((g$t$20313$12l&&U)
                                                          ((case-lambda
                                                             ((g$ls/false$20314$12l&&U)
                                                              (if g$ls/false$20314$12l&&U
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$20315$12l&&U)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$20297$12l&&U
                                                                            g$x*$20315$12l&&U
                                                                            g$old*$20311$12l&&U
                                                                            g$new*$20312$12l&&U)))
                                                                       (case-lambda
                                                                         ((g$y*$20319$12l&&U
                                                                            g$old*$20320$12l&&U
                                                                            g$new*$20321$12l&&U)
                                                                          ((case-lambda
                                                                             ((g$new*$20322$12l&&U
                                                                                g$old*$20323$12l&&U
                                                                                g$y*$20324$12l&&U)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$20310$12l&&U))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$20324$12l&&U
                                                                                  (g$f$20308$12l&&U
                                                                                    (cdr g$lhs*$20309$12l&&U)
                                                                                    (cdr g$rhs*$20310$12l&&U)
                                                                                    g$old*$20323$12l&&U
                                                                                    g$new*$20322$12l&&U)))))
                                                                           g$new*$20321$12l&&U
                                                                           g$old*$20320$12l&&U
                                                                           g$y*$20319$12l&&U))))))
                                                                  g$ls/false$20314$12l&&U)
                                                                ((case-lambda
                                                                   ((g$t$20325$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$ls/false$20326$12l&&U)
                                                                        (if g$ls/false$20326$12l&&U
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$20327$12l&&U
                                                                                 g$x$20328$12l&&U)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$20296$12l&&U
                                                                                      g$x$20328$12l&&U
                                                                                      g$old*$20311$12l&&U
                                                                                      g$new*$20312$12l&&U)))
                                                                                 (case-lambda
                                                                                   ((g$y$20329$12l&&U
                                                                                      g$old*$20330$12l&&U
                                                                                      g$new*$20331$12l&&U)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$20297$12l&&U
                                                                                           g$x*$20327$12l&&U
                                                                                           g$old*$20330$12l&&U
                                                                                           g$new*$20331$12l&&U)))
                                                                                      (case-lambda
                                                                                        ((g$y*$20332$12l&&U
                                                                                           g$old*$20333$12l&&U
                                                                                           g$new*$20334$12l&&U)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$20310$12l&&U))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$20332$12l&&U
                                                                                               g$y$20329$12l&&U)
                                                                                             (g$f$20308$12l&&U
                                                                                               (cdr g$lhs*$20309$12l&&U)
                                                                                               (cdr g$rhs*$20310$12l&&U)
                                                                                               g$old*$20333$12l&&U
                                                                                               g$new*$20334$12l&&U)))))))))))
                                                                            g$ls/false$20326$12l&&U)
                                                                          ((case-lambda
                                                                             ((g$t$20335$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$20336$12l&&U)
                                                                                  (if g$ls/false$20336$12l&&U
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$20337$12l&&U)
                                                                                         (g$syntax-violation$19808$12l&&U
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$20295$12l&&U
                                                                                           g$others$20337$12l&&U)))
                                                                                      g$ls/false$20336$12l&&U)
                                                                                    (g$syntax-violation$19808$12l&&U
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$20335$12l&&U))))
                                                                               (g$syntax-dispatch$19689$12l&&U
                                                                                 g$t$20335$12l&&U
                                                                                 'any))))
                                                                           g$t$20325$12l&&U))))
                                                                     (g$syntax-dispatch$19689$12l&&U
                                                                       g$t$20325$12l&&U
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$20313$12l&&U))))
                                                           (g$syntax-dispatch$19689$12l&&U
                                                             g$t$20313$12l&&U
                                                             'each-any))))
                                                       (car g$lhs*$20309$12l&&U)))))))
                                        g$f$20308$12l&&U)
                                      g$lhs*$20304$12l&&U
                                      g$rhs*$20305$12l&&U
                                      '()
                                      '()))))
                                g$ls/false$20303$12l&&U)
                              (g$syntax-violation$19808$12l&&U
                                '#f
                                '"invalid syntax"
                                g$t$20302$12l&&U))))
                         (g$syntax-dispatch$19689$12l&&U
                           g$t$20302$12l&&U
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$20298$12l&&U))))
               (g$syntax-dispatch$19689$12l&&U
                 g$t$20298$12l&&U
                 '(_ () any . each-any)))))
           g$stx$20295$12l&&U)))))
   (g$let*-values-macro$19657$12l&&U
     g$let*-values-macro$23253$12l&&U
     (case-lambda
       ((g$stx$20351$12l&&U)
        (letrec* ((g$check$20352$12l&&U
                    (case-lambda
                      ((g$x*$20376$12l&&U)
                       (if (not (null? g$x*$20376$12l&&U))
                         ((case-lambda
                            ((g$x$20377$12l&&U)
                             (begin
                               (if (not (g$id?$19191$12l&&U
                                          g$x$20377$12l&&U))
                                 (g$syntax-violation$19808$12l&&U
                                   '#f
                                   '"not an identifier"
                                   g$stx$20351$12l&&U
                                   g$x$20377$12l&&U)
                                 (void))
                               (g$check$20352$12l&&U
                                 (cdr g$x*$20376$12l&&U))
                               (if (g$bound-id-member?$19198$12l&&U
                                     g$x$20377$12l&&U
                                     (cdr g$x*$20376$12l&&U))
                                 (g$syntax-violation$19808$12l&&U
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$20351$12l&&U
                                   g$x$20377$12l&&U)
                                 (void)))))
                          (car g$x*$20376$12l&&U))
                         (void))))))
          ((case-lambda
             ((g$t$20353$12l&&U)
              ((case-lambda
                 ((g$ls/false$20354$12l&&U)
                  (if g$ls/false$20354$12l&&U
                    (apply
                      (case-lambda
                        ((g$b$20355$12l&&U g$b*$20356$12l&&U)
                         (g$cons*$11837$12l&&U
                           (g$bless$19652$12l&&U 'let)
                           '()
                           g$b$20355$12l&&U
                           g$b*$20356$12l&&U)))
                      g$ls/false$20354$12l&&U)
                    ((case-lambda
                       ((g$t$20357$12l&&U)
                        ((case-lambda
                           ((g$ls/false$20358$12l&&U)
                            (if g$ls/false$20358$12l&&U
                              (apply
                                (case-lambda
                                  ((g$lhs*$20359$12l&&U
                                     g$rhs*$20360$12l&&U
                                     g$b$20361$12l&&U
                                     g$b*$20362$12l&&U)
                                   (g$bless$19652$12l&&U
                                     ((letrec ((g$f$20363$12l&&U
                                                 (case-lambda
                                                   ((g$lhs*$20364$12l&&U
                                                      g$rhs*$20365$12l&&U)
                                                    (if (null?
                                                          g$lhs*$20364$12l&&U)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$20361$12l&&U
                                                          g$b*$20362$12l&&U))
                                                      ((case-lambda
                                                         ((g$t$20366$12l&&U)
                                                          ((case-lambda
                                                             ((g$ls/false$20367$12l&&U)
                                                              (if g$ls/false$20367$12l&&U
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$20368$12l&&U)
                                                                     (begin
                                                                       (g$check$20352$12l&&U
                                                                         g$x*$20368$12l&&U)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$20365$12l&&U))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$20368$12l&&U
                                                                           (g$f$20363$12l&&U
                                                                             (cdr g$lhs*$20364$12l&&U)
                                                                             (cdr g$rhs*$20365$12l&&U)))))))
                                                                  g$ls/false$20367$12l&&U)
                                                                ((case-lambda
                                                                   ((g$t$20369$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$ls/false$20370$12l&&U)
                                                                        (if g$ls/false$20370$12l&&U
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$20371$12l&&U
                                                                                 g$x$20372$12l&&U)
                                                                               (begin
                                                                                 (g$check$20352$12l&&U
                                                                                   (cons
                                                                                     g$x$20372$12l&&U
                                                                                     g$x*$20371$12l&&U))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$20365$12l&&U))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$20371$12l&&U
                                                                                       g$x$20372$12l&&U)
                                                                                     (g$f$20363$12l&&U
                                                                                       (cdr g$lhs*$20364$12l&&U)
                                                                                       (cdr g$rhs*$20365$12l&&U)))))))
                                                                            g$ls/false$20370$12l&&U)
                                                                          ((case-lambda
                                                                             ((g$t$20373$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$20374$12l&&U)
                                                                                  (if g$ls/false$20374$12l&&U
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$20375$12l&&U)
                                                                                         (g$syntax-violation$19808$12l&&U
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$20351$12l&&U
                                                                                           g$others$20375$12l&&U)))
                                                                                      g$ls/false$20374$12l&&U)
                                                                                    (g$syntax-violation$19808$12l&&U
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$20373$12l&&U))))
                                                                               (g$syntax-dispatch$19689$12l&&U
                                                                                 g$t$20373$12l&&U
                                                                                 'any))))
                                                                           g$t$20369$12l&&U))))
                                                                     (g$syntax-dispatch$19689$12l&&U
                                                                       g$t$20369$12l&&U
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$20366$12l&&U))))
                                                           (g$syntax-dispatch$19689$12l&&U
                                                             g$t$20366$12l&&U
                                                             'each-any))))
                                                       (car g$lhs*$20364$12l&&U)))))))
                                        g$f$20363$12l&&U)
                                      g$lhs*$20359$12l&&U
                                      g$rhs*$20360$12l&&U))))
                                g$ls/false$20358$12l&&U)
                              (g$syntax-violation$19808$12l&&U
                                '#f
                                '"invalid syntax"
                                g$t$20357$12l&&U))))
                         (g$syntax-dispatch$19689$12l&&U
                           g$t$20357$12l&&U
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$20353$12l&&U))))
               (g$syntax-dispatch$19689$12l&&U
                 g$t$20353$12l&&U
                 '(_ () any . each-any)))))
           g$stx$20351$12l&&U)))))
   (g$trace-lambda-macro$19658$12l&&U
     g$trace-lambda-macro$23254$12l&&U
     (case-lambda
       ((g$stx$20378$12l&&U)
        ((case-lambda
           ((g$t$20379$12l&&U)
            ((case-lambda
               ((g$ls/false$20380$12l&&U)
                (if g$ls/false$20380$12l&&U
                  (apply
                    (case-lambda
                      ((g$who$20381$12l&&U
                         g$fmls$20382$12l&&U
                         g$b$20383$12l&&U
                         g$b*$20384$12l&&U)
                       (if (g$valid-bound-ids?$19196$12l&&U
                             g$fmls$20382$12l&&U)
                         (g$bless$19652$12l&&U
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$20381$12l&&U)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$20382$12l&&U
                                 (cons
                                   g$b$20383$12l&&U
                                   g$b*$20384$12l&&U)))))
                         (g$invalid-fmls-error$19654$12l&&U
                           g$stx$20378$12l&&U
                           g$fmls$20382$12l&&U))))
                    g$ls/false$20380$12l&&U)
                  ((case-lambda
                     ((g$t$20385$12l&&U)
                      ((case-lambda
                         ((g$ls/false$20386$12l&&U)
                          (if g$ls/false$20386$12l&&U
                            (apply
                              (case-lambda
                                ((g$who$20387$12l&&U
                                   g$fmls$20388$12l&&U
                                   g$last$20389$12l&&U
                                   g$b$20390$12l&&U
                                   g$b*$20391$12l&&U)
                                 (if (g$valid-bound-ids?$19196$12l&&U
                                       (cons
                                         g$last$20389$12l&&U
                                         g$fmls$20388$12l&&U))
                                   (g$bless$19652$12l&&U
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$20387$12l&&U)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$20388$12l&&U
                                             g$last$20389$12l&&U)
                                           (cons
                                             g$b$20390$12l&&U
                                             g$b*$20391$12l&&U)))))
                                   (g$invalid-fmls-error$19654$12l&&U
                                     g$stx$20378$12l&&U
                                     (append
                                       g$fmls$20388$12l&&U
                                       g$last$20389$12l&&U)))))
                              g$ls/false$20386$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"invalid syntax"
                              g$t$20385$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$20385$12l&&U
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$20379$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20379$12l&&U
               '(_ any each-any any . each-any)))))
         g$stx$20378$12l&&U))))
   (g$trace-define-macro$19659$12l&&U
     g$trace-define-macro$23255$12l&&U
     (case-lambda
       ((g$stx$20392$12l&&U)
        ((case-lambda
           ((g$t$20393$12l&&U)
            ((case-lambda
               ((g$ls/false$20394$12l&&U)
                (if g$ls/false$20394$12l&&U
                  (apply
                    (case-lambda
                      ((g$who$20395$12l&&U
                         g$fmls$20396$12l&&U
                         g$b$20397$12l&&U
                         g$b*$20398$12l&&U)
                       (if (g$valid-bound-ids?$19196$12l&&U
                             g$fmls$20396$12l&&U)
                         (g$bless$19652$12l&&U
                           (list
                             'define
                             g$who$20395$12l&&U
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$20395$12l&&U)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$20396$12l&&U
                                   (cons
                                     g$b$20397$12l&&U
                                     g$b*$20398$12l&&U))))))
                         (g$invalid-fmls-error$19654$12l&&U
                           g$stx$20392$12l&&U
                           g$fmls$20396$12l&&U))))
                    g$ls/false$20394$12l&&U)
                  ((case-lambda
                     ((g$t$20399$12l&&U)
                      ((case-lambda
                         ((g$ls/false$20400$12l&&U)
                          (if g$ls/false$20400$12l&&U
                            (apply
                              (case-lambda
                                ((g$who$20401$12l&&U
                                   g$fmls$20402$12l&&U
                                   g$last$20403$12l&&U
                                   g$b$20404$12l&&U
                                   g$b*$20405$12l&&U)
                                 (if (g$valid-bound-ids?$19196$12l&&U
                                       (cons
                                         g$last$20403$12l&&U
                                         g$fmls$20402$12l&&U))
                                   (g$bless$19652$12l&&U
                                     (list
                                       'define
                                       g$who$20401$12l&&U
                                       (list
                                         'make-traced-procedure
                                         (list
                                           'quote
                                           g$who$20401$12l&&U)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$20402$12l&&U
                                               g$last$20403$12l&&U)
                                             (cons
                                               g$b$20404$12l&&U
                                               g$b*$20405$12l&&U))))))
                                   (g$invalid-fmls-error$19654$12l&&U
                                     g$stx$20392$12l&&U
                                     (append
                                       g$fmls$20402$12l&&U
                                       g$last$20403$12l&&U)))))
                              g$ls/false$20400$12l&&U)
                            ((case-lambda
                               ((g$t$20406$12l&&U)
                                ((case-lambda
                                   ((g$ls/false$20407$12l&&U)
                                    (if g$ls/false$20407$12l&&U
                                      (apply
                                        (case-lambda
                                          ((g$who$20408$12l&&U
                                             g$expr$20409$12l&&U)
                                           (if (g$id?$19191$12l&&U
                                                 g$who$20408$12l&&U)
                                             (g$bless$19652$12l&&U
                                               (list
                                                 'define
                                                 g$who$20408$12l&&U
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$20409$12l&&U))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$20408$12l&&U)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$19808$12l&&U
                                               '#f
                                               '"invalid name"
                                               g$stx$20392$12l&&U))))
                                        g$ls/false$20407$12l&&U)
                                      (g$syntax-violation$19808$12l&&U
                                        '#f
                                        '"invalid syntax"
                                        g$t$20406$12l&&U))))
                                 (g$syntax-dispatch$19689$12l&&U
                                   g$t$20406$12l&&U
                                   '(_ any any)))))
                             g$t$20399$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$20399$12l&&U
                         '(_ (any . #(each+ any () any))
                             any
                             .
                             each-any)))))
                   g$t$20393$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20393$12l&&U
               '(_ (any . each-any) any . each-any)))))
         g$stx$20392$12l&&U))))
   (g$trace-define-syntax-macro$19660$12l&&U
     g$trace-define-syntax-macro$23256$12l&&U
     (case-lambda
       ((g$stx$20410$12l&&U)
        ((case-lambda
           ((g$t$20411$12l&&U)
            ((case-lambda
               ((g$ls/false$20412$12l&&U)
                (if g$ls/false$20412$12l&&U
                  (apply
                    (case-lambda
                      ((g$who$20413$12l&&U g$expr$20414$12l&&U)
                       (if (g$id?$19191$12l&&U g$who$20413$12l&&U)
                         (g$bless$19652$12l&&U
                           (list
                             'define-syntax
                             g$who$20413$12l&&U
                             (list
                               'make-traced-macro
                               (list 'quote g$who$20413$12l&&U)
                               g$expr$20414$12l&&U)))
                         (g$syntax-violation$19808$12l&&U
                           '#f
                           '"invalid name"
                           g$stx$20410$12l&&U))))
                    g$ls/false$20412$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20411$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20411$12l&&U
               '(_ any any)))))
         g$stx$20410$12l&&U))))
   (g$trace-let/rec-syntax$19661$12l&&U
     g$trace-let/rec-syntax$23257$12l&&U
     (case-lambda
       ((g$who$20415$12l&&U)
        (case-lambda
          ((g$stx$20416$12l&&U)
           ((case-lambda
              ((g$t$20417$12l&&U)
               ((case-lambda
                  ((g$ls/false$20418$12l&&U)
                   (if g$ls/false$20418$12l&&U
                     (apply
                       (case-lambda
                         ((g$lhs*$20419$12l&&U
                            g$rhs*$20420$12l&&U
                            g$b$20421$12l&&U
                            g$b*$20422$12l&&U)
                          (if (g$valid-bound-ids?$19196$12l&&U
                                g$lhs*$20419$12l&&U)
                            ((case-lambda
                               ((g$rhs*$20423$12l&&U)
                                (g$bless$19652$12l&&U
                                  (cons
                                    g$who$20415$12l&&U
                                    (cons
                                      (g$map$11835$12l&&U
                                        list
                                        g$lhs*$20419$12l&&U
                                        g$rhs*$20423$12l&&U)
                                      (cons
                                        g$b$20421$12l&&U
                                        g$b*$20422$12l&&U))))))
                             (g$map$11835$12l&&U
                               (case-lambda
                                 ((g$lhs$20424$12l&&U
                                    g$rhs$20425$12l&&U)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$20424$12l&&U)
                                    g$rhs$20425$12l&&U)))
                               g$lhs*$20419$12l&&U
                               g$rhs*$20420$12l&&U))
                            (g$invalid-fmls-error$19654$12l&&U
                              g$stx$20416$12l&&U
                              g$lhs*$20419$12l&&U))))
                       g$ls/false$20418$12l&&U)
                     (g$syntax-violation$19808$12l&&U
                       '#f
                       '"invalid syntax"
                       g$t$20417$12l&&U))))
                (g$syntax-dispatch$19689$12l&&U
                  g$t$20417$12l&&U
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$20416$12l&&U))))))
   (g$trace-let-syntax-macro$19662$12l&&U
     g$trace-let-syntax-macro$23258$12l&&U
     (g$trace-let/rec-syntax$19661$12l&&U 'let-syntax))
   (g$trace-letrec-syntax-macro$19663$12l&&U
     g$trace-letrec-syntax-macro$23259$12l&&U
     (g$trace-let/rec-syntax$19661$12l&&U 'letrec-syntax))
   (g$guard-macro$19664$12l&&U
     g$guard-macro$23260$12l&&U
     (case-lambda
       ((g$x$20426$12l&&U)
        (letrec* ((g$gen-clauses$20427$12l&&U
                    (case-lambda
                      ((g$con$20439$12l&&U
                         g$outerk$20440$12l&&U
                         g$clause*$20441$12l&&U)
                       (letrec* ((g$f$20442$12l&&U
                                   (case-lambda
                                     ((g$x$20470$12l&&U
                                        g$k$20471$12l&&U)
                                      ((case-lambda
                                         ((g$t$20472$12l&&U)
                                          ((case-lambda
                                             ((g$ls/false$20473$12l&&U)
                                              (if g$ls/false$20473$12l&&U
                                                (apply
                                                  (case-lambda
                                                    ((g$e$20474$12l&&U
                                                       g$p$20475$12l&&U)
                                                     ((case-lambda
                                                        ((g$t$20476$12l&&U)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$20476$12l&&U
                                                               g$e$20474$12l&&U))
                                                           (list
                                                             'if
                                                             g$t$20476$12l&&U
                                                             (list
                                                               g$p$20475$12l&&U
                                                               g$t$20476$12l&&U)
                                                             g$k$20471$12l&&U))))
                                                      (gensym))))
                                                  g$ls/false$20473$12l&&U)
                                                ((case-lambda
                                                   ((g$t$20477$12l&&U)
                                                    ((case-lambda
                                                       ((g$ls/false$20478$12l&&U)
                                                        (if g$ls/false$20478$12l&&U
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$20479$12l&&U)
                                                               ((case-lambda
                                                                  ((g$t$20480$12l&&U)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$20480$12l&&U
                                                                         g$e$20479$12l&&U))
                                                                     (list
                                                                       'if
                                                                       g$t$20480$12l&&U
                                                                       g$t$20480$12l&&U
                                                                       g$k$20471$12l&&U))))
                                                                (gensym))))
                                                            g$ls/false$20478$12l&&U)
                                                          ((case-lambda
                                                             ((g$t$20481$12l&&U)
                                                              ((case-lambda
                                                                 ((g$ls/false$20482$12l&&U)
                                                                  (if g$ls/false$20482$12l&&U
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$20483$12l&&U
                                                                           g$v$20484$12l&&U
                                                                           g$v*$20485$12l&&U)
                                                                         (list
                                                                           'if
                                                                           g$e$20483$12l&&U
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$20484$12l&&U
                                                                               g$v*$20485$12l&&U))
                                                                           g$k$20471$12l&&U)))
                                                                      g$ls/false$20482$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$t$20486$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$ls/false$20487$12l&&U)
                                                                            (if g$ls/false$20487$12l&&U
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$19808$12l&&U
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$20470$12l&&U)))
                                                                                g$ls/false$20487$12l&&U)
                                                                              (g$syntax-violation$19808$12l&&U
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$20486$12l&&U))))
                                                                         (g$syntax-dispatch$19689$12l&&U
                                                                           g$t$20486$12l&&U
                                                                           '_))))
                                                                     g$t$20481$12l&&U))))
                                                               (g$syntax-dispatch$19689$12l&&U
                                                                 g$t$20481$12l&&U
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$20477$12l&&U))))
                                                     (g$syntax-dispatch$19689$12l&&U
                                                       g$t$20477$12l&&U
                                                       '(any)))))
                                                 g$t$20472$12l&&U))))
                                           (g$syntax-dispatch$19689$12l&&U
                                             g$t$20472$12l&&U
                                             '(any #(scheme-id =>)
                                                   any)))))
                                       g$x$20470$12l&&U))))
                                 (g$f*$20443$12l&&U
                                   (case-lambda
                                     ((g$x*$20450$12l&&U)
                                      ((case-lambda
                                         ((g$t$20451$12l&&U)
                                          ((case-lambda
                                             ((g$ls/false$20452$12l&&U)
                                              (if g$ls/false$20452$12l&&U
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$20439$12l&&U)
                                                       '#t)))
                                                  g$ls/false$20452$12l&&U)
                                                ((case-lambda
                                                   ((g$t$20453$12l&&U)
                                                    ((case-lambda
                                                       ((g$ls/false$20454$12l&&U)
                                                        (if g$ls/false$20454$12l&&U
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$20455$12l&&U
                                                                 g$e*$20456$12l&&U)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$20455$12l&&U
                                                                     g$e*$20456$12l&&U))
                                                                 '#f)))
                                                            g$ls/false$20454$12l&&U)
                                                          ((case-lambda
                                                             ((g$t$20457$12l&&U)
                                                              ((case-lambda
                                                                 ((g$ls/false$20458$12l&&U)
                                                                  (if g$ls/false$20458$12l&&U
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$20459$12l&&U
                                                                           g$cls*$20460$12l&&U)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$20443$12l&&U
                                                                                g$cls*$20460$12l&&U)))
                                                                           (case-lambda
                                                                             ((g$e$20463$12l&&U
                                                                                g$g$20464$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$g$20465$12l&&U
                                                                                    g$e$20466$12l&&U)
                                                                                  (values
                                                                                    (g$f$20442$12l&&U
                                                                                      g$cls$20459$12l&&U
                                                                                      g$e$20466$12l&&U)
                                                                                    g$g$20465$12l&&U)))
                                                                               g$g$20464$12l&&U
                                                                               g$e$20463$12l&&U))))))
                                                                      g$ls/false$20458$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$t$20467$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$ls/false$20468$12l&&U)
                                                                            (if g$ls/false$20468$12l&&U
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$20469$12l&&U)
                                                                                   (g$syntax-violation$19808$12l&&U
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$20469$12l&&U)))
                                                                                g$ls/false$20468$12l&&U)
                                                                              (g$syntax-violation$19808$12l&&U
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$20467$12l&&U))))
                                                                         (g$syntax-dispatch$19689$12l&&U
                                                                           g$t$20467$12l&&U
                                                                           'any))))
                                                                     g$t$20457$12l&&U))))
                                                               (g$syntax-dispatch$19689$12l&&U
                                                                 g$t$20457$12l&&U
                                                                 '(any .
                                                                       any)))))
                                                           g$t$20453$12l&&U))))
                                                     (g$syntax-dispatch$19689$12l&&U
                                                       g$t$20453$12l&&U
                                                       '((#(scheme-id
                                                            else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$20451$12l&&U))))
                                           (g$syntax-dispatch$19689$12l&&U
                                             g$t$20451$12l&&U
                                             '()))))
                                       g$x*$20450$12l&&U)))))
                         (call-with-values
                           (case-lambda
                             (()
                              (g$f*$20443$12l&&U
                                g$clause*$20441$12l&&U)))
                           (case-lambda
                             ((g$code$20446$12l&&U
                                g$raisek$20447$12l&&U)
                              ((case-lambda
                                 ((g$raisek$20448$12l&&U
                                    g$code$20449$12l&&U)
                                  (if g$raisek$20448$12l&&U
                                    (list
                                      g$outerk$20440$12l&&U
                                      g$code$20449$12l&&U)
                                    g$code$20449$12l&&U)))
                               g$raisek$20447$12l&&U
                               g$code$20446$12l&&U)))))))))
          ((case-lambda
             ((g$t$20428$12l&&U)
              ((case-lambda
                 ((g$ls/false$20429$12l&&U)
                  (if (if g$ls/false$20429$12l&&U
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$20430$12l&&U
                                 g$clause*$20431$12l&&U
                                 g$b$20432$12l&&U
                                 g$b*$20433$12l&&U)
                               (g$id?$19191$12l&&U g$con$20430$12l&&U)))
                            g$ls/false$20429$12l&&U))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$20434$12l&&U
                           g$clause*$20435$12l&&U
                           g$b$20436$12l&&U
                           g$b*$20437$12l&&U)
                         ((case-lambda
                            ((g$outerk$20438$12l&&U)
                             (g$bless$19652$12l&&U
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$20438$12l&&U)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$20434$12l&&U)
                                           (g$gen-clauses$20427$12l&&U
                                             g$con$20434$12l&&U
                                             g$outerk$20438$12l&&U
                                             g$clause*$20435$12l&&U))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               g$b$20436$12l&&U
                                               g$b*$20437$12l&&U)))))))))))
                          (gensym))))
                      g$ls/false$20429$12l&&U)
                    (g$syntax-violation$19808$12l&&U
                      '#f
                      '"invalid syntax"
                      g$t$20428$12l&&U))))
               (g$syntax-dispatch$19689$12l&&U
                 g$t$20428$12l&&U
                 '(_ (any . each-any) any . each-any)))))
           g$x$20426$12l&&U)))))
   (g$define-enumeration-macro$19665$12l&&U
     g$define-enumeration-macro$23261$12l&&U
     (case-lambda
       ((g$stx$20488$12l&&U)
        (letrec* ((g$set?$20489$12l&&U
                    (case-lambda
                      ((g$x$20502$12l&&U)
                       ((case-lambda
                          ((g$t$20503$12l&&U)
                           (if g$t$20503$12l&&U
                             g$t$20503$12l&&U
                             (begin
                               '#f
                               (if (not (g$memq$11827$12l&&U
                                          (car g$x$20502$12l&&U)
                                          (cdr g$x$20502$12l&&U)))
                                 (begin
                                   '#f
                                   (g$set?$20489$12l&&U
                                     (cdr g$x$20502$12l&&U)))
                                 '#f)))))
                        (null? g$x$20502$12l&&U)))))
                  (g$remove-dups$20490$12l&&U
                    (case-lambda
                      ((g$ls$20501$12l&&U)
                       (if (null? g$ls$20501$12l&&U)
                         '()
                         (cons
                           (car g$ls$20501$12l&&U)
                           (g$remove-dups$20490$12l&&U
                             (g$remq$11842$12l&&U
                               (car g$ls$20501$12l&&U)
                               (cdr g$ls$20501$12l&&U)))))))))
          ((case-lambda
             ((g$t$20491$12l&&U)
              ((case-lambda
                 ((g$ls/false$20492$12l&&U)
                  (if (if g$ls/false$20492$12l&&U
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$20493$12l&&U
                                 g$id*$20494$12l&&U
                                 g$maker$20495$12l&&U)
                               (if (g$id?$19191$12l&&U
                                     g$name$20493$12l&&U)
                                 (if (g$id?$19191$12l&&U
                                       g$maker$20495$12l&&U)
                                   (begin
                                     '#f
                                     (g$for-all$11833$12l&&U
                                       g$id?$19191$12l&&U
                                       g$id*$20494$12l&&U))
                                   '#f)
                                 '#f)))
                            g$ls/false$20492$12l&&U))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$20496$12l&&U
                           g$id*$20497$12l&&U
                           g$maker$20498$12l&&U)
                         ((case-lambda
                            ((g$name*$20499$12l&&U g$mk$20500$12l&&U)
                             (g$bless$19652$12l&&U
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$20500$12l&&U
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list
                                         'quote
                                         g$name*$20499$12l&&U))))
                                 (list
                                   'define-syntax
                                   g$name$20496$12l&&U
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list
                                               'quote
                                               g$name*$20499$12l&&U))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list
                                                 'quote
                                                 g$name$20496$12l&&U)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$20498$12l&&U
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$20498$12l&&U)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$20499$12l&&U))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$20498$12l&&U)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$20500$12l&&U
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$20490$12l&&U
                            (g$syntax->datum$19811$12l&&U
                              g$id*$20497$12l&&U))
                          (gensym))))
                      g$ls/false$20492$12l&&U)
                    (g$syntax-violation$19808$12l&&U
                      '#f
                      '"invalid syntax"
                      g$t$20491$12l&&U))))
               (g$syntax-dispatch$19689$12l&&U
                 g$t$20491$12l&&U
                 '(_ any each-any any)))))
           g$stx$20488$12l&&U)))))
   (g$time-macro$19666$12l&&U
     g$time-macro$23262$12l&&U
     (case-lambda
       ((g$stx$20504$12l&&U)
        ((case-lambda
           ((g$t$20505$12l&&U)
            ((case-lambda
               ((g$ls/false$20506$12l&&U)
                (if g$ls/false$20506$12l&&U
                  (apply
                    (case-lambda
                      ((g$expr$20507$12l&&U)
                       ((case-lambda
                          ((g$str$20508$12l&&U)
                           (g$bless$19652$12l&&U
                             (list
                               'time-it
                               g$str$20508$12l&&U
                               (list
                                 'lambda
                                 '()
                                 g$expr$20507$12l&&U)))))
                        (call-with-values
                          (case-lambda
                            (()
                             (g$open-string-output-port$17603$12l&&U)))
                          (case-lambda
                            ((g$p$20511$12l&&U g$e$20512$12l&&U)
                             ((case-lambda
                                ((g$e$20513$12l&&U g$p$20514$12l&&U)
                                 (begin
                                   (write
                                     (g$syntax->datum$19811$12l&&U
                                       g$expr$20507$12l&&U)
                                     g$p$20514$12l&&U)
                                   (g$e$20513$12l&&U))))
                              g$e$20512$12l&&U
                              g$p$20511$12l&&U)))))))
                    g$ls/false$20506$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20505$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20505$12l&&U
               '(_ any)))))
         g$stx$20504$12l&&U))))
   (g$delay-macro$19667$12l&&U
     g$delay-macro$23263$12l&&U
     (case-lambda
       ((g$stx$20515$12l&&U)
        ((case-lambda
           ((g$t$20516$12l&&U)
            ((case-lambda
               ((g$ls/false$20517$12l&&U)
                (if g$ls/false$20517$12l&&U
                  (apply
                    (case-lambda
                      ((g$expr$20518$12l&&U)
                       (g$bless$19652$12l&&U
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$20518$12l&&U)))))
                    g$ls/false$20517$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20516$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20516$12l&&U
               '(_ any)))))
         g$stx$20515$12l&&U))))
   (g$assert-macro$19668$12l&&U
     g$assert-macro$23264$12l&&U
     (case-lambda
       ((g$stx$20519$12l&&U)
        ((case-lambda
           ((g$t$20520$12l&&U)
            ((case-lambda
               ((g$ls/false$20521$12l&&U)
                (if g$ls/false$20521$12l&&U
                  (apply
                    (case-lambda
                      ((g$expr$20522$12l&&U)
                       ((case-lambda
                          ((g$pos$20523$12l&&U)
                           (g$bless$19652$12l&&U
                             (list
                               'unless
                               g$expr$20522$12l&&U
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$20522$12l&&U)
                                 (list 'quote g$pos$20523$12l&&U))))))
                        ((case-lambda
                           ((g$t$20524$12l&&U)
                            (if g$t$20524$12l&&U
                              g$t$20524$12l&&U
                              (begin
                                '#f
                                (g$expression-position$19803$12l&&U
                                  g$expr$20522$12l&&U)))))
                         (g$expression-position$19803$12l&&U
                           g$stx$20519$12l&&U)))))
                    g$ls/false$20521$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20520$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20520$12l&&U
               '(_ any)))))
         g$stx$20519$12l&&U))))
   (g$endianness-macro$19669$12l&&U
     g$endianness-macro$23265$12l&&U
     (case-lambda
       ((g$stx$20525$12l&&U)
        ((case-lambda
           ((g$t$20526$12l&&U)
            ((case-lambda
               ((g$ls/false$20527$12l&&U)
                (if g$ls/false$20527$12l&&U
                  (apply
                    (case-lambda
                      ((g$e$20528$12l&&U)
                       ((case-lambda
                          ((g$t$20529$12l&&U)
                           (if (eqv? g$t$20529$12l&&U 'little)
                             (g$bless$19652$12l&&U ''little)
                             (if (eqv? g$t$20529$12l&&U 'big)
                               (g$bless$19652$12l&&U ''big)
                               (g$syntax-violation$19808$12l&&U
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$20525$12l&&U)))))
                        (g$syntax->datum$19811$12l&&U
                          g$e$20528$12l&&U))))
                    g$ls/false$20527$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20526$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20526$12l&&U
               '(_ any)))))
         g$stx$20525$12l&&U))))
   (g$identifier-syntax-macro$19670$12l&&U
     g$identifier-syntax-macro$23266$12l&&U
     (case-lambda
       ((g$stx$20530$12l&&U)
        ((case-lambda
           ((g$t$20531$12l&&U)
            ((case-lambda
               ((g$ls/false$20532$12l&&U)
                (if g$ls/false$20532$12l&&U
                  (apply
                    (case-lambda
                      ((g$expr$20533$12l&&U)
                       (g$bless$19652$12l&&U
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$20533$12l&&U))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$20533$12l&&U)
                                   '(#'(e* ...))))))))))
                    g$ls/false$20532$12l&&U)
                  ((case-lambda
                     ((g$t$20534$12l&&U)
                      ((case-lambda
                         ((g$ls/false$20535$12l&&U)
                          (if (if g$ls/false$20535$12l&&U
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$20536$12l&&U
                                         g$expr1$20537$12l&&U
                                         g$id2$20538$12l&&U
                                         g$expr2$20539$12l&&U
                                         g$expr3$20540$12l&&U)
                                       (if (g$id?$19191$12l&&U
                                             g$id1$20536$12l&&U)
                                         (if (g$id?$19191$12l&&U
                                               g$id2$20538$12l&&U)
                                           (begin
                                             '#f
                                             (g$id?$19191$12l&&U
                                               g$expr2$20539$12l&&U))
                                           '#f)
                                         '#f)))
                                    g$ls/false$20535$12l&&U))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$20541$12l&&U
                                   g$expr1$20542$12l&&U
                                   g$id2$20543$12l&&U
                                   g$expr2$20544$12l&&U
                                   g$expr3$20545$12l&&U)
                                 (g$bless$19652$12l&&U
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             g$expr1$20542$12l&&U))
                                         (list
                                           (list
                                             'set!
                                             'id
                                             g$expr2$20544$12l&&U)
                                           (list
                                             'syntax
                                             g$expr3$20545$12l&&U))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$20542$12l&&U
                                               '(e* ...))))))))))
                              g$ls/false$20535$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"invalid syntax"
                              g$t$20534$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$20534$12l&&U
                         '(_ (any any)
                             ((#(scheme-id set!) any any) any))))))
                   g$t$20531$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20531$12l&&U
               '(_ any)))))
         g$stx$20530$12l&&U))))
   (g$do-macro$19671$12l&&U
     g$do-macro$23267$12l&&U
     (case-lambda
       ((g$stx$20546$12l&&U)
        (letrec* ((g$bind$20547$12l&&U
                    (case-lambda
                      ((g$x$20559$12l&&U)
                       ((case-lambda
                          ((g$t$20560$12l&&U)
                           ((case-lambda
                              ((g$ls/false$20561$12l&&U)
                               (if g$ls/false$20561$12l&&U
                                 (apply
                                   (case-lambda
                                     ((g$x$20562$12l&&U
                                        g$init$20563$12l&&U)
                                      (list
                                        g$x$20562$12l&&U
                                        g$init$20563$12l&&U
                                        g$x$20562$12l&&U)))
                                   g$ls/false$20561$12l&&U)
                                 ((case-lambda
                                    ((g$t$20564$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$20565$12l&&U)
                                         (if g$ls/false$20565$12l&&U
                                           (apply
                                             (case-lambda
                                               ((g$x$20566$12l&&U
                                                  g$init$20567$12l&&U
                                                  g$step$20568$12l&&U)
                                                (list
                                                  g$x$20566$12l&&U
                                                  g$init$20567$12l&&U
                                                  g$step$20568$12l&&U)))
                                             g$ls/false$20565$12l&&U)
                                           ((case-lambda
                                              ((g$t$20569$12l&&U)
                                               ((case-lambda
                                                  ((g$ls/false$20570$12l&&U)
                                                   (if g$ls/false$20570$12l&&U
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$19808$12l&&U
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$20546$12l&&U)))
                                                       g$ls/false$20570$12l&&U)
                                                     (g$syntax-violation$19808$12l&&U
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$20569$12l&&U))))
                                                (g$syntax-dispatch$19689$12l&&U
                                                  g$t$20569$12l&&U
                                                  '_))))
                                            g$t$20564$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$20564$12l&&U
                                        '(any any any)))))
                                  g$t$20560$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$20560$12l&&U
                              '(any any)))))
                        g$x$20559$12l&&U)))))
          ((case-lambda
             ((g$t$20548$12l&&U)
              ((case-lambda
                 ((g$ls/false$20549$12l&&U)
                  (if g$ls/false$20549$12l&&U
                    (apply
                      (case-lambda
                        ((g$binding*$20550$12l&&U
                           g$test$20551$12l&&U
                           g$expr*$20552$12l&&U
                           g$command*$20553$12l&&U)
                         ((case-lambda
                            ((g$t$20554$12l&&U)
                             ((case-lambda
                                ((g$ls/false$20555$12l&&U)
                                 (if g$ls/false$20555$12l&&U
                                   (apply
                                     (case-lambda
                                       ((g$x*$20556$12l&&U
                                          g$init*$20557$12l&&U
                                          g$step*$20558$12l&&U)
                                        (if (g$valid-bound-ids?$19196$12l&&U
                                              g$x*$20556$12l&&U)
                                          (g$bless$19652$12l&&U
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$20556$12l&&U
                                                    (list
                                                      'if
                                                      g$test$20551$12l&&U
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$20552$12l&&U))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$20553$12l&&U
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$20558$12l&&U))))))))
                                              (cons
                                                'loop
                                                g$init*$20557$12l&&U)))
                                          (g$syntax-violation$19808$12l&&U
                                            '#f
                                            '"invalid bindings"
                                            g$stx$20546$12l&&U))))
                                     g$ls/false$20555$12l&&U)
                                   (g$syntax-violation$19808$12l&&U
                                     '#f
                                     '"invalid syntax"
                                     g$t$20554$12l&&U))))
                              (g$syntax-dispatch$19689$12l&&U
                                g$t$20554$12l&&U
                                '#(each (any any any))))))
                          (g$map$11835$12l&&U
                            g$bind$20547$12l&&U
                            g$binding*$20550$12l&&U))))
                      g$ls/false$20549$12l&&U)
                    (g$syntax-violation$19808$12l&&U
                      '#f
                      '"invalid syntax"
                      g$t$20548$12l&&U))))
               (g$syntax-dispatch$19689$12l&&U
                 g$t$20548$12l&&U
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$20546$12l&&U)))))
   (g$let*-macro$19672$12l&&U
     g$let*-macro$23268$12l&&U
     (case-lambda
       ((g$stx$20571$12l&&U)
        ((case-lambda
           ((g$t$20572$12l&&U)
            ((case-lambda
               ((g$ls/false$20573$12l&&U)
                (if (if g$ls/false$20573$12l&&U
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$20574$12l&&U
                               g$rhs*$20575$12l&&U
                               g$b$20576$12l&&U
                               g$b*$20577$12l&&U)
                             (g$for-all$11833$12l&&U
                               g$id?$19191$12l&&U
                               g$lhs*$20574$12l&&U)))
                          g$ls/false$20573$12l&&U))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$20578$12l&&U
                         g$rhs*$20579$12l&&U
                         g$b$20580$12l&&U
                         g$b*$20581$12l&&U)
                       (g$bless$19652$12l&&U
                         ((letrec ((g$f$20582$12l&&U
                                     (case-lambda
                                       ((g$x*$20583$12l&&U)
                                        (if (null? g$x*$20583$12l&&U)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$20580$12l&&U
                                                g$b*$20581$12l&&U)))
                                          (if (null?
                                                (cdr g$x*$20583$12l&&U))
                                            (cons
                                              'let
                                              (cons
                                                (list
                                                  (car g$x*$20583$12l&&U))
                                                (cons
                                                  g$b$20580$12l&&U
                                                  g$b*$20581$12l&&U)))
                                            (list
                                              'let
                                              (list
                                                (car g$x*$20583$12l&&U))
                                              (g$f$20582$12l&&U
                                                (cdr g$x*$20583$12l&&U)))))))))
                            g$f$20582$12l&&U)
                          (g$map$11835$12l&&U
                            list
                            g$lhs*$20578$12l&&U
                            g$rhs*$20579$12l&&U)))))
                    g$ls/false$20573$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20572$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20572$12l&&U
               '(_ #(each (any any)) any . each-any)))))
         g$stx$20571$12l&&U))))
   (g$or-macro$19673$12l&&U
     g$or-macro$23269$12l&&U
     (case-lambda
       ((g$stx$20584$12l&&U)
        ((case-lambda
           ((g$t$20585$12l&&U)
            ((case-lambda
               ((g$ls/false$20586$12l&&U)
                (if g$ls/false$20586$12l&&U
                  (apply (case-lambda (() '#f)) g$ls/false$20586$12l&&U)
                  ((case-lambda
                     ((g$t$20587$12l&&U)
                      ((case-lambda
                         ((g$ls/false$20588$12l&&U)
                          (if g$ls/false$20588$12l&&U
                            (apply
                              (case-lambda
                                ((g$e$20589$12l&&U g$e*$20590$12l&&U)
                                 (g$bless$19652$12l&&U
                                   ((letrec ((g$f$20591$12l&&U
                                               (case-lambda
                                                 ((g$e$20592$12l&&U
                                                    g$e*$20593$12l&&U)
                                                  (if (null?
                                                        g$e*$20593$12l&&U)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$20592$12l&&U)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$20592$12l&&U))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$20591$12l&&U
                                                          (car g$e*$20593$12l&&U)
                                                          (cdr g$e*$20593$12l&&U)))))))))
                                      g$f$20591$12l&&U)
                                    g$e$20589$12l&&U
                                    g$e*$20590$12l&&U))))
                              g$ls/false$20588$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"invalid syntax"
                              g$t$20587$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$20587$12l&&U
                         '(_ any . each-any)))))
                   g$t$20585$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U g$t$20585$12l&&U '(_)))))
         g$stx$20584$12l&&U))))
   (g$and-macro$19674$12l&&U
     g$and-macro$23270$12l&&U
     (case-lambda
       ((g$stx$20594$12l&&U)
        ((case-lambda
           ((g$t$20595$12l&&U)
            ((case-lambda
               ((g$ls/false$20596$12l&&U)
                (if g$ls/false$20596$12l&&U
                  (apply (case-lambda (() '#t)) g$ls/false$20596$12l&&U)
                  ((case-lambda
                     ((g$t$20597$12l&&U)
                      ((case-lambda
                         ((g$ls/false$20598$12l&&U)
                          (if g$ls/false$20598$12l&&U
                            (apply
                              (case-lambda
                                ((g$e$20599$12l&&U g$e*$20600$12l&&U)
                                 (g$bless$19652$12l&&U
                                   ((letrec ((g$f$20601$12l&&U
                                               (case-lambda
                                                 ((g$e$20602$12l&&U
                                                    g$e*$20603$12l&&U)
                                                  (if (null?
                                                        g$e*$20603$12l&&U)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$20602$12l&&U)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$20602$12l&&U
                                                        (cons
                                                          (g$f$20601$12l&&U
                                                            (car g$e*$20603$12l&&U)
                                                            (cdr g$e*$20603$12l&&U))
                                                          '(#f)))))))))
                                      g$f$20601$12l&&U)
                                    g$e$20599$12l&&U
                                    g$e*$20600$12l&&U))))
                              g$ls/false$20598$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"invalid syntax"
                              g$t$20597$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$20597$12l&&U
                         '(_ any . each-any)))))
                   g$t$20595$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U g$t$20595$12l&&U '(_)))))
         g$stx$20594$12l&&U))))
   (g$cond-macro$19675$12l&&U
     g$cond-macro$23271$12l&&U
     (case-lambda
       ((g$stx$20604$12l&&U)
        ((case-lambda
           ((g$t$20605$12l&&U)
            ((case-lambda
               ((g$ls/false$20606$12l&&U)
                (if g$ls/false$20606$12l&&U
                  (apply
                    (case-lambda
                      ((g$cls$20607$12l&&U g$cls*$20608$12l&&U)
                       (g$bless$19652$12l&&U
                         ((letrec ((g$f$20609$12l&&U
                                     (case-lambda
                                       ((g$cls$20610$12l&&U
                                          g$cls*$20611$12l&&U)
                                        (if (null? g$cls*$20611$12l&&U)
                                          ((case-lambda
                                             ((g$t$20612$12l&&U)
                                              ((case-lambda
                                                 ((g$ls/false$20613$12l&&U)
                                                  (if g$ls/false$20613$12l&&U
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$20614$12l&&U
                                                           g$e*$20615$12l&&U)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$20614$12l&&U
                                                             g$e*$20615$12l&&U))))
                                                      g$ls/false$20613$12l&&U)
                                                    ((case-lambda
                                                       ((g$t$20616$12l&&U)
                                                        ((case-lambda
                                                           ((g$ls/false$20617$12l&&U)
                                                            (if g$ls/false$20617$12l&&U
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$20618$12l&&U
                                                                     g$p$20619$12l&&U)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$20618$12l&&U))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$20619$12l&&U
                                                                         '(t))))))
                                                                g$ls/false$20617$12l&&U)
                                                              ((case-lambda
                                                                 ((g$t$20620$12l&&U)
                                                                  ((case-lambda
                                                                     ((g$ls/false$20621$12l&&U)
                                                                      (if g$ls/false$20621$12l&&U
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$20622$12l&&U)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$20622$12l&&U
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$20621$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$t$20623$12l&&U)
                                                                            ((case-lambda
                                                                               ((g$ls/false$20624$12l&&U)
                                                                                (if g$ls/false$20624$12l&&U
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$20625$12l&&U
                                                                                         g$e*$20626$12l&&U)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$20625$12l&&U
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$20626$12l&&U))))
                                                                                    g$ls/false$20624$12l&&U)
                                                                                  ((case-lambda
                                                                                     ((g$t$20627$12l&&U)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$20628$12l&&U)
                                                                                          (if g$ls/false$20628$12l&&U
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$19808$12l&&U
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$20604$12l&&U)))
                                                                                              g$ls/false$20628$12l&&U)
                                                                                            (g$syntax-violation$19808$12l&&U
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$20627$12l&&U))))
                                                                                       (g$syntax-dispatch$19689$12l&&U
                                                                                         g$t$20627$12l&&U
                                                                                         '_))))
                                                                                   g$t$20623$12l&&U))))
                                                                             (g$syntax-dispatch$19689$12l&&U
                                                                               g$t$20623$12l&&U
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$20620$12l&&U))))
                                                                   (g$syntax-dispatch$19689$12l&&U
                                                                     g$t$20620$12l&&U
                                                                     '(any)))))
                                                               g$t$20616$12l&&U))))
                                                         (g$syntax-dispatch$19689$12l&&U
                                                           g$t$20616$12l&&U
                                                           '(any #(scheme-id
                                                                   =>)
                                                                 any)))))
                                                     g$t$20612$12l&&U))))
                                               (g$syntax-dispatch$19689$12l&&U
                                                 g$t$20612$12l&&U
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$20610$12l&&U)
                                          ((case-lambda
                                             ((g$t$20629$12l&&U)
                                              ((case-lambda
                                                 ((g$ls/false$20630$12l&&U)
                                                  (if g$ls/false$20630$12l&&U
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$20631$12l&&U
                                                           g$e*$20632$12l&&U)
                                                         (g$syntax-violation$19808$12l&&U
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$20604$12l&&U)))
                                                      g$ls/false$20630$12l&&U)
                                                    ((case-lambda
                                                       ((g$t$20633$12l&&U)
                                                        ((case-lambda
                                                           ((g$ls/false$20634$12l&&U)
                                                            (if g$ls/false$20634$12l&&U
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$20635$12l&&U
                                                                     g$p$20636$12l&&U)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$20635$12l&&U))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$20636$12l&&U
                                                                         '(t))
                                                                       (g$f$20609$12l&&U
                                                                         (car g$cls*$20611$12l&&U)
                                                                         (cdr g$cls*$20611$12l&&U))))))
                                                                g$ls/false$20634$12l&&U)
                                                              ((case-lambda
                                                                 ((g$t$20637$12l&&U)
                                                                  ((case-lambda
                                                                     ((g$ls/false$20638$12l&&U)
                                                                      (if g$ls/false$20638$12l&&U
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$20639$12l&&U)
                                                                             (list
                                                                               'or
                                                                               g$e$20639$12l&&U
                                                                               (g$f$20609$12l&&U
                                                                                 (car g$cls*$20611$12l&&U)
                                                                                 (cdr g$cls*$20611$12l&&U)))))
                                                                          g$ls/false$20638$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$t$20640$12l&&U)
                                                                            ((case-lambda
                                                                               ((g$ls/false$20641$12l&&U)
                                                                                (if g$ls/false$20641$12l&&U
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$20642$12l&&U
                                                                                         g$e*$20643$12l&&U)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$20642$12l&&U
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$20643$12l&&U)
                                                                                         (g$f$20609$12l&&U
                                                                                           (car g$cls*$20611$12l&&U)
                                                                                           (cdr g$cls*$20611$12l&&U)))))
                                                                                    g$ls/false$20641$12l&&U)
                                                                                  ((case-lambda
                                                                                     ((g$t$20644$12l&&U)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$20645$12l&&U)
                                                                                          (if g$ls/false$20645$12l&&U
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$19808$12l&&U
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$20604$12l&&U)))
                                                                                              g$ls/false$20645$12l&&U)
                                                                                            (g$syntax-violation$19808$12l&&U
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$20644$12l&&U))))
                                                                                       (g$syntax-dispatch$19689$12l&&U
                                                                                         g$t$20644$12l&&U
                                                                                         '_))))
                                                                                   g$t$20640$12l&&U))))
                                                                             (g$syntax-dispatch$19689$12l&&U
                                                                               g$t$20640$12l&&U
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$20637$12l&&U))))
                                                                   (g$syntax-dispatch$19689$12l&&U
                                                                     g$t$20637$12l&&U
                                                                     '(any)))))
                                                               g$t$20633$12l&&U))))
                                                         (g$syntax-dispatch$19689$12l&&U
                                                           g$t$20633$12l&&U
                                                           '(any #(scheme-id
                                                                   =>)
                                                                 any)))))
                                                     g$t$20629$12l&&U))))
                                               (g$syntax-dispatch$19689$12l&&U
                                                 g$t$20629$12l&&U
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$20610$12l&&U))))))
                            g$f$20609$12l&&U)
                          g$cls$20607$12l&&U
                          g$cls*$20608$12l&&U))))
                    g$ls/false$20606$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20605$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20605$12l&&U
               '(_ any . each-any)))))
         g$stx$20604$12l&&U))))
   (g$do-include$19676$12l&&U
     g$do-include$23272$12l&&U
     (case-lambda
       ((g$stx$20646$12l&&U g$id$20647$12l&&U g$filename$20648$12l&&U)
        ((case-lambda
           ((g$filename$20649$12l&&U)
            (begin
              (if (not (if (string? g$filename$20649$12l&&U)
                         (begin
                           '#f
                           (g$id?$19191$12l&&U g$id$20647$12l&&U))
                         '#f))
                (g$syntax-violation$19808$12l&&U
                  '#f
                  '"invalid syntax"
                  g$stx$20646$12l&&U)
                (void))
              (cons
                (g$bless$19652$12l&&U 'begin)
                (g$with-input-from-file$17665$12l&&U
                  g$filename$20649$12l&&U
                  (case-lambda
                    (()
                     ((letrec ((g$f$20650$12l&&U
                                 (case-lambda
                                   ((g$ls$20651$12l&&U)
                                    ((case-lambda
                                       ((g$x$20652$12l&&U)
                                        (if (eof-object?
                                              g$x$20652$12l&&U)
                                          (g$reverse$12595$12l&&U
                                            g$ls$20651$12l&&U)
                                          (g$f$20650$12l&&U
                                            (cons
                                              (g$datum->stx$19174$12l&&U
                                                g$id$20647$12l&&U
                                                g$x$20652$12l&&U)
                                              g$ls$20651$12l&&U)))))
                                     (read-annotated))))))
                        g$f$20650$12l&&U)
                      '()))))))))
         (g$stx->datum$19202$12l&&U g$filename$20648$12l&&U)))))
   (g$include-macro$19677$12l&&U
     g$include-macro$23273$12l&&U
     (case-lambda
       ((g$e$20653$12l&&U)
        ((case-lambda
           ((g$t$20654$12l&&U)
            ((case-lambda
               ((g$ls/false$20655$12l&&U)
                (if g$ls/false$20655$12l&&U
                  (apply
                    (case-lambda
                      ((g$id$20656$12l&&U g$filename$20657$12l&&U)
                       (g$do-include$19676$12l&&U
                         g$e$20653$12l&&U
                         g$id$20656$12l&&U
                         g$filename$20657$12l&&U)))
                    g$ls/false$20655$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20654$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20654$12l&&U
               '(any any)))))
         g$e$20653$12l&&U))))
   (g$include-into-macro$19678$12l&&U
     g$include-into-macro$23274$12l&&U
     (case-lambda
       ((g$e$20658$12l&&U)
        ((case-lambda
           ((g$t$20659$12l&&U)
            ((case-lambda
               ((g$ls/false$20660$12l&&U)
                (if g$ls/false$20660$12l&&U
                  (apply
                    (case-lambda
                      ((g$id$20661$12l&&U g$filename$20662$12l&&U)
                       (g$do-include$19676$12l&&U
                         g$e$20658$12l&&U
                         g$id$20661$12l&&U
                         g$filename$20662$12l&&U)))
                    g$ls/false$20660$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20659$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20659$12l&&U
               '(_ any any)))))
         g$e$20658$12l&&U))))
   (g$syntax-rules-macro$19679$12l&&U
     g$syntax-rules-macro$23275$12l&&U
     (case-lambda
       ((g$e$20663$12l&&U)
        ((case-lambda
           ((g$t$20664$12l&&U)
            ((case-lambda
               ((g$ls/false$20665$12l&&U)
                (if g$ls/false$20665$12l&&U
                  (apply
                    (case-lambda
                      ((g$lits$20666$12l&&U
                         g$pat*$20667$12l&&U
                         g$tmp*$20668$12l&&U)
                       (begin
                         (g$verify-literals$19692$12l&&U
                           g$lits$20666$12l&&U
                           g$e$20663$12l&&U)
                         (g$bless$19652$12l&&U
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$20666$12l&&U
                                   (g$map$11835$12l&&U
                                     (case-lambda
                                       ((g$pat$20669$12l&&U
                                          g$tmp$20670$12l&&U)
                                        ((case-lambda
                                           ((g$t$20671$12l&&U)
                                            ((case-lambda
                                               ((g$ls/false$20672$12l&&U)
                                                (if g$ls/false$20672$12l&&U
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$20673$12l&&U)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$20673$12l&&U)
                                                         (list
                                                           'syntax
                                                           g$tmp$20670$12l&&U))))
                                                    g$ls/false$20672$12l&&U)
                                                  ((case-lambda
                                                     ((g$t$20674$12l&&U)
                                                      ((case-lambda
                                                         ((g$ls/false$20675$12l&&U)
                                                          (if g$ls/false$20675$12l&&U
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$19808$12l&&U
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$20663$12l&&U
                                                                   g$pat$20669$12l&&U)))
                                                              g$ls/false$20675$12l&&U)
                                                            (g$syntax-violation$19808$12l&&U
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$20674$12l&&U))))
                                                       (g$syntax-dispatch$19689$12l&&U
                                                         g$t$20674$12l&&U
                                                         '_))))
                                                   g$t$20671$12l&&U))))
                                             (g$syntax-dispatch$19689$12l&&U
                                               g$t$20671$12l&&U
                                               '(_ . any)))))
                                         g$pat$20669$12l&&U)))
                                     g$pat*$20667$12l&&U
                                     g$tmp*$20668$12l&&U)))))))))
                    g$ls/false$20665$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$20664$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$20664$12l&&U
               '(_ each-any . #(each (any any)))))))
         g$e$20663$12l&&U))))
   (g$quasiquote-macro$19680$12l&&U
     g$quasiquote-macro$23276$12l&&U
     ((case-lambda
        (()
         (letrec* ((g$datum$20676$12l&&U
                     (case-lambda
                       ((g$x$20826$12l&&U)
                        (list
                          (g$scheme-stx$19632$12l&&U 'quote)
                          (g$mkstx$19179$12l&&U
                            g$x$20826$12l&&U
                            '()
                            '()
                            '())))))
                   (g$quasicons*$20711$12l&&U
                     (case-lambda
                       ((g$x$20822$12l&&U g$y$20823$12l&&U)
                        ((letrec ((g$f$20824$12l&&U
                                    (case-lambda
                                      ((g$x$20825$12l&&U)
                                       (if (null? g$x$20825$12l&&U)
                                         g$y$20823$12l&&U
                                         (g$quasicons$20712$12l&&U
                                           (car g$x$20825$12l&&U)
                                           (g$f$20824$12l&&U
                                             (cdr g$x$20825$12l&&U))))))))
                           g$f$20824$12l&&U)
                         g$x$20822$12l&&U))))
                   (g$quasicons$20712$12l&&U
                     (case-lambda
                       ((g$x$20803$12l&&U g$y$20804$12l&&U)
                        ((case-lambda
                           ((g$t$20805$12l&&U)
                            ((case-lambda
                               ((g$ls/false$20806$12l&&U)
                                (if g$ls/false$20806$12l&&U
                                  (apply
                                    (case-lambda
                                      ((g$dy$20807$12l&&U)
                                       ((case-lambda
                                          ((g$t$20808$12l&&U)
                                           ((case-lambda
                                              ((g$ls/false$20809$12l&&U)
                                               (if g$ls/false$20809$12l&&U
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$20810$12l&&U)
                                                      (list
                                                        (g$scheme-stx$19632$12l&&U
                                                          'quote)
                                                        (cons
                                                          g$dx$20810$12l&&U
                                                          g$dy$20807$12l&&U))))
                                                   g$ls/false$20809$12l&&U)
                                                 ((case-lambda
                                                    ((g$t$20811$12l&&U)
                                                     ((case-lambda
                                                        ((g$ls/false$20812$12l&&U)
                                                         (if g$ls/false$20812$12l&&U
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$20813$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$ls/false$20814$12l&&U)
                                                                        (if g$ls/false$20814$12l&&U
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$19632$12l&&U
                                                                                   'list)
                                                                                 g$x$20803$12l&&U)))
                                                                            g$ls/false$20814$12l&&U)
                                                                          ((case-lambda
                                                                             ((g$t$20815$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$20816$12l&&U)
                                                                                  (if g$ls/false$20816$12l&&U
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$19632$12l&&U
                                                                                             'cons)
                                                                                           g$x$20803$12l&&U
                                                                                           g$y$20804$12l&&U)))
                                                                                      g$ls/false$20816$12l&&U)
                                                                                    (g$syntax-violation$19808$12l&&U
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$20815$12l&&U))))
                                                                               (g$syntax-dispatch$19689$12l&&U
                                                                                 g$t$20815$12l&&U
                                                                                 '_))))
                                                                           g$t$20813$12l&&U))))
                                                                     (g$syntax-dispatch$19689$12l&&U
                                                                       g$t$20813$12l&&U
                                                                       '()))))
                                                                 g$dy$20807$12l&&U)))
                                                             g$ls/false$20812$12l&&U)
                                                           (g$syntax-violation$19808$12l&&U
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$20811$12l&&U))))
                                                      (g$syntax-dispatch$19689$12l&&U
                                                        g$t$20811$12l&&U
                                                        '_))))
                                                  g$t$20808$12l&&U))))
                                            (g$syntax-dispatch$19689$12l&&U
                                              g$t$20808$12l&&U
                                              '(#(scheme-id quote)
                                                any)))))
                                        g$x$20803$12l&&U)))
                                    g$ls/false$20806$12l&&U)
                                  ((case-lambda
                                     ((g$t$20817$12l&&U)
                                      ((case-lambda
                                         ((g$ls/false$20818$12l&&U)
                                          (if g$ls/false$20818$12l&&U
                                            (apply
                                              (case-lambda
                                                ((g$stuff$20819$12l&&U)
                                                 (g$cons*$11837$12l&&U
                                                   (g$scheme-stx$19632$12l&&U
                                                     'list)
                                                   g$x$20803$12l&&U
                                                   g$stuff$20819$12l&&U)))
                                              g$ls/false$20818$12l&&U)
                                            ((case-lambda
                                               ((g$t$20820$12l&&U)
                                                ((case-lambda
                                                   ((g$ls/false$20821$12l&&U)
                                                    (if g$ls/false$20821$12l&&U
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$19632$12l&&U
                                                               'cons)
                                                             g$x$20803$12l&&U
                                                             g$y$20804$12l&&U)))
                                                        g$ls/false$20821$12l&&U)
                                                      (g$syntax-violation$19808$12l&&U
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$20820$12l&&U))))
                                                 (g$syntax-dispatch$19689$12l&&U
                                                   g$t$20820$12l&&U
                                                   '_))))
                                             g$t$20817$12l&&U))))
                                       (g$syntax-dispatch$19689$12l&&U
                                         g$t$20817$12l&&U
                                         '(#(scheme-id list)
                                           .
                                           each-any)))))
                                   g$t$20805$12l&&U))))
                             (g$syntax-dispatch$19689$12l&&U
                               g$t$20805$12l&&U
                               '(#(scheme-id quote) any)))))
                         g$y$20804$12l&&U))))
                   (g$quasiappend$20713$12l&&U
                     (case-lambda
                       ((g$x$20790$12l&&U g$y$20791$12l&&U)
                        ((case-lambda
                           ((g$ls$20792$12l&&U)
                            (if (null? g$ls$20792$12l&&U)
                              (list
                                (g$scheme-stx$19632$12l&&U 'quote)
                                '())
                              (if (null? (cdr g$ls$20792$12l&&U))
                                (car g$ls$20792$12l&&U)
                                (g$cons*$11837$12l&&U
                                  (g$scheme-stx$19632$12l&&U 'append)
                                  g$ls$20792$12l&&U)))))
                         ((letrec ((g$f$20793$12l&&U
                                     (case-lambda
                                       ((g$x$20794$12l&&U)
                                        (if (null? g$x$20794$12l&&U)
                                          ((case-lambda
                                             ((g$t$20795$12l&&U)
                                              ((case-lambda
                                                 ((g$ls/false$20796$12l&&U)
                                                  (if g$ls/false$20796$12l&&U
                                                    (apply
                                                      (case-lambda
                                                        (() '()))
                                                      g$ls/false$20796$12l&&U)
                                                    ((case-lambda
                                                       ((g$t$20797$12l&&U)
                                                        ((case-lambda
                                                           ((g$ls/false$20798$12l&&U)
                                                            (if g$ls/false$20798$12l&&U
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$20791$12l&&U)))
                                                                g$ls/false$20798$12l&&U)
                                                              (g$syntax-violation$19808$12l&&U
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$20797$12l&&U))))
                                                         (g$syntax-dispatch$19689$12l&&U
                                                           g$t$20797$12l&&U
                                                           '_))))
                                                     g$t$20795$12l&&U))))
                                               (g$syntax-dispatch$19689$12l&&U
                                                 g$t$20795$12l&&U
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           g$y$20791$12l&&U)
                                          ((case-lambda
                                             ((g$t$20799$12l&&U)
                                              ((case-lambda
                                                 ((g$ls/false$20800$12l&&U)
                                                  (if g$ls/false$20800$12l&&U
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$20793$12l&&U
                                                           (cdr g$x$20794$12l&&U))))
                                                      g$ls/false$20800$12l&&U)
                                                    ((case-lambda
                                                       ((g$t$20801$12l&&U)
                                                        ((case-lambda
                                                           ((g$ls/false$20802$12l&&U)
                                                            (if g$ls/false$20802$12l&&U
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$20794$12l&&U)
                                                                     (g$f$20793$12l&&U
                                                                       (cdr g$x$20794$12l&&U)))))
                                                                g$ls/false$20802$12l&&U)
                                                              (g$syntax-violation$19808$12l&&U
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$20801$12l&&U))))
                                                         (g$syntax-dispatch$19689$12l&&U
                                                           g$t$20801$12l&&U
                                                           '_))))
                                                     g$t$20799$12l&&U))))
                                               (g$syntax-dispatch$19689$12l&&U
                                                 g$t$20799$12l&&U
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           (car g$x$20794$12l&&U)))))))
                            g$f$20793$12l&&U)
                          g$x$20790$12l&&U)))))
                   (g$quasivector$20714$12l&&U
                     (case-lambda
                       ((g$x$20765$12l&&U)
                        ((case-lambda
                           ((g$pat-x$20766$12l&&U)
                            ((case-lambda
                               ((g$t$20767$12l&&U)
                                ((case-lambda
                                   ((g$ls/false$20768$12l&&U)
                                    (if g$ls/false$20768$12l&&U
                                      (apply
                                        (case-lambda
                                          ((g$x*$20769$12l&&U)
                                           (list
                                             (g$scheme-stx$19632$12l&&U
                                               'quote)
                                             (g$list->vector$12589$12l&&U
                                               g$x*$20769$12l&&U))))
                                        g$ls/false$20768$12l&&U)
                                      ((case-lambda
                                         ((g$t$20770$12l&&U)
                                          ((case-lambda
                                             ((g$ls/false$20771$12l&&U)
                                              (if g$ls/false$20771$12l&&U
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$20772$12l&&U
                                                                 (case-lambda
                                                                   ((g$x$20773$12l&&U
                                                                      g$k$20774$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$t$20775$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$ls/false$20776$12l&&U)
                                                                            (if g$ls/false$20776$12l&&U
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$20777$12l&&U)
                                                                                   (g$k$20774$12l&&U
                                                                                     (g$map$11835$12l&&U
                                                                                       (case-lambda
                                                                                         ((g$x$20778$12l&&U)
                                                                                          (list
                                                                                            (g$scheme-stx$19632$12l&&U
                                                                                              'quote)
                                                                                            g$x$20778$12l&&U)))
                                                                                       g$x*$20777$12l&&U))))
                                                                                g$ls/false$20776$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$t$20779$12l&&U)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$20780$12l&&U)
                                                                                      (if g$ls/false$20780$12l&&U
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$20781$12l&&U)
                                                                                             (g$k$20774$12l&&U
                                                                                               g$x*$20781$12l&&U)))
                                                                                          g$ls/false$20780$12l&&U)
                                                                                        ((case-lambda
                                                                                           ((g$t$20782$12l&&U)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$20783$12l&&U)
                                                                                                (if g$ls/false$20783$12l&&U
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$20784$12l&&U
                                                                                                         g$y$20785$12l&&U)
                                                                                                       (g$f$20772$12l&&U
                                                                                                         g$y$20785$12l&&U
                                                                                                         (case-lambda
                                                                                                           ((g$ls$20786$12l&&U)
                                                                                                            (g$k$20774$12l&&U
                                                                                                              (cons
                                                                                                                g$x$20784$12l&&U
                                                                                                                g$ls$20786$12l&&U)))))))
                                                                                                    g$ls/false$20783$12l&&U)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$20787$12l&&U)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$20788$12l&&U)
                                                                                                          (if g$ls/false$20788$12l&&U
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$19632$12l&&U
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$20766$12l&&U)))
                                                                                                              g$ls/false$20788$12l&&U)
                                                                                                            (g$syntax-violation$19808$12l&&U
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$20787$12l&&U))))
                                                                                                       (g$syntax-dispatch$19689$12l&&U
                                                                                                         g$t$20787$12l&&U
                                                                                                         '_))))
                                                                                                   g$t$20782$12l&&U))))
                                                                                             (g$syntax-dispatch$19689$12l&&U
                                                                                               g$t$20782$12l&&U
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$20779$12l&&U))))
                                                                                   (g$syntax-dispatch$19689$12l&&U
                                                                                     g$t$20779$12l&&U
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$20775$12l&&U))))
                                                                         (g$syntax-dispatch$19689$12l&&U
                                                                           g$t$20775$12l&&U
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$20773$12l&&U)))))
                                                        g$f$20772$12l&&U)
                                                      g$x$20765$12l&&U
                                                      (case-lambda
                                                        ((g$ls$20789$12l&&U)
                                                         (g$cons*$11837$12l&&U
                                                           (g$scheme-stx$19632$12l&&U
                                                             'vector)
                                                           g$ls$20789$12l&&U))))))
                                                  g$ls/false$20771$12l&&U)
                                                (g$syntax-violation$19808$12l&&U
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$20770$12l&&U))))
                                           (g$syntax-dispatch$19689$12l&&U
                                             g$t$20770$12l&&U
                                             '_))))
                                       g$t$20767$12l&&U))))
                                 (g$syntax-dispatch$19689$12l&&U
                                   g$t$20767$12l&&U
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$20766$12l&&U)))
                         g$x$20765$12l&&U))))
                   (g$vquasi$20715$12l&&U
                     (case-lambda
                       ((g$p$20748$12l&&U g$lev$20749$12l&&U)
                        ((case-lambda
                           ((g$t$20750$12l&&U)
                            ((case-lambda
                               ((g$ls/false$20751$12l&&U)
                                (if g$ls/false$20751$12l&&U
                                  (apply
                                    (case-lambda
                                      ((g$p$20752$12l&&U
                                         g$q$20753$12l&&U)
                                       ((case-lambda
                                          ((g$t$20754$12l&&U)
                                           ((case-lambda
                                              ((g$ls/false$20755$12l&&U)
                                               (if g$ls/false$20755$12l&&U
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$20756$12l&&U)
                                                      (if (= g$lev$20749$12l&&U
                                                             '0)
                                                        (g$quasicons*$20711$12l&&U
                                                          g$p$20756$12l&&U
                                                          (g$vquasi$20715$12l&&U
                                                            g$q$20753$12l&&U
                                                            g$lev$20749$12l&&U))
                                                        (g$quasicons$20712$12l&&U
                                                          (g$quasicons$20712$12l&&U
                                                            (g$datum$20676$12l&&U
                                                              'unquote)
                                                            (g$quasi$20716$12l&&U
                                                              g$p$20756$12l&&U
                                                              (- g$lev$20749$12l&&U
                                                                 '1)))
                                                          (g$vquasi$20715$12l&&U
                                                            g$q$20753$12l&&U
                                                            g$lev$20749$12l&&U)))))
                                                   g$ls/false$20755$12l&&U)
                                                 ((case-lambda
                                                    ((g$t$20757$12l&&U)
                                                     ((case-lambda
                                                        ((g$ls/false$20758$12l&&U)
                                                         (if g$ls/false$20758$12l&&U
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$20759$12l&&U)
                                                                (if (= g$lev$20749$12l&&U
                                                                       '0)
                                                                  (g$quasiappend$20713$12l&&U
                                                                    g$p$20759$12l&&U
                                                                    (g$vquasi$20715$12l&&U
                                                                      g$q$20753$12l&&U
                                                                      g$lev$20749$12l&&U))
                                                                  (g$quasicons$20712$12l&&U
                                                                    (g$quasicons$20712$12l&&U
                                                                      (g$datum$20676$12l&&U
                                                                        'unquote-splicing)
                                                                      (g$quasi$20716$12l&&U
                                                                        g$p$20759$12l&&U
                                                                        (- g$lev$20749$12l&&U
                                                                           '1)))
                                                                    (g$vquasi$20715$12l&&U
                                                                      g$q$20753$12l&&U
                                                                      g$lev$20749$12l&&U)))))
                                                             g$ls/false$20758$12l&&U)
                                                           ((case-lambda
                                                              ((g$t$20760$12l&&U)
                                                               ((case-lambda
                                                                  ((g$ls/false$20761$12l&&U)
                                                                   (if g$ls/false$20761$12l&&U
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$20762$12l&&U)
                                                                          (g$quasicons$20712$12l&&U
                                                                            (g$quasi$20716$12l&&U
                                                                              g$p$20762$12l&&U
                                                                              g$lev$20749$12l&&U)
                                                                            (g$vquasi$20715$12l&&U
                                                                              g$q$20753$12l&&U
                                                                              g$lev$20749$12l&&U))))
                                                                       g$ls/false$20761$12l&&U)
                                                                     (g$syntax-violation$19808$12l&&U
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$20760$12l&&U))))
                                                                (g$syntax-dispatch$19689$12l&&U
                                                                  g$t$20760$12l&&U
                                                                  'any))))
                                                            g$t$20757$12l&&U))))
                                                      (g$syntax-dispatch$19689$12l&&U
                                                        g$t$20757$12l&&U
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$20754$12l&&U))))
                                            (g$syntax-dispatch$19689$12l&&U
                                              g$t$20754$12l&&U
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$20752$12l&&U)))
                                    g$ls/false$20751$12l&&U)
                                  ((case-lambda
                                     ((g$t$20763$12l&&U)
                                      ((case-lambda
                                         ((g$ls/false$20764$12l&&U)
                                          (if g$ls/false$20764$12l&&U
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$19632$12l&&U
                                                     'quote)
                                                   '())))
                                              g$ls/false$20764$12l&&U)
                                            (g$syntax-violation$19808$12l&&U
                                              '#f
                                              '"invalid syntax"
                                              g$t$20763$12l&&U))))
                                       (g$syntax-dispatch$19689$12l&&U
                                         g$t$20763$12l&&U
                                         '()))))
                                   g$t$20750$12l&&U))))
                             (g$syntax-dispatch$19689$12l&&U
                               g$t$20750$12l&&U
                               '(any . any)))))
                         g$p$20748$12l&&U))))
                   (g$quasi$20716$12l&&U
                     (case-lambda
                       ((g$p$20721$12l&&U g$lev$20722$12l&&U)
                        ((case-lambda
                           ((g$t$20723$12l&&U)
                            ((case-lambda
                               ((g$ls/false$20724$12l&&U)
                                (if g$ls/false$20724$12l&&U
                                  (apply
                                    (case-lambda
                                      ((g$p$20725$12l&&U)
                                       (if (= g$lev$20722$12l&&U '0)
                                         g$p$20725$12l&&U
                                         (g$quasicons$20712$12l&&U
                                           (g$datum$20676$12l&&U
                                             'unquote)
                                           (g$quasi$20716$12l&&U
                                             (list g$p$20725$12l&&U)
                                             (- g$lev$20722$12l&&U
                                                '1))))))
                                    g$ls/false$20724$12l&&U)
                                  ((case-lambda
                                     ((g$t$20726$12l&&U)
                                      ((case-lambda
                                         ((g$ls/false$20727$12l&&U)
                                          (if g$ls/false$20727$12l&&U
                                            (apply
                                              (case-lambda
                                                ((g$p$20728$12l&&U
                                                   g$q$20729$12l&&U)
                                                 (if (= g$lev$20722$12l&&U
                                                        '0)
                                                   (g$quasicons*$20711$12l&&U
                                                     g$p$20728$12l&&U
                                                     (g$quasi$20716$12l&&U
                                                       g$q$20729$12l&&U
                                                       g$lev$20722$12l&&U))
                                                   (g$quasicons$20712$12l&&U
                                                     (g$quasicons$20712$12l&&U
                                                       (g$datum$20676$12l&&U
                                                         'unquote)
                                                       (g$quasi$20716$12l&&U
                                                         g$p$20728$12l&&U
                                                         (- g$lev$20722$12l&&U
                                                            '1)))
                                                     (g$quasi$20716$12l&&U
                                                       g$q$20729$12l&&U
                                                       g$lev$20722$12l&&U)))))
                                              g$ls/false$20727$12l&&U)
                                            ((case-lambda
                                               ((g$t$20730$12l&&U)
                                                ((case-lambda
                                                   ((g$ls/false$20731$12l&&U)
                                                    (if g$ls/false$20731$12l&&U
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$20732$12l&&U
                                                             g$q$20733$12l&&U)
                                                           (if (= g$lev$20722$12l&&U
                                                                  '0)
                                                             (g$quasiappend$20713$12l&&U
                                                               g$p$20732$12l&&U
                                                               (g$quasi$20716$12l&&U
                                                                 g$q$20733$12l&&U
                                                                 g$lev$20722$12l&&U))
                                                             (g$quasicons$20712$12l&&U
                                                               (g$quasicons$20712$12l&&U
                                                                 (g$datum$20676$12l&&U
                                                                   'unquote-splicing)
                                                                 (g$quasi$20716$12l&&U
                                                                   g$p$20732$12l&&U
                                                                   (- g$lev$20722$12l&&U
                                                                      '1)))
                                                               (g$quasi$20716$12l&&U
                                                                 g$q$20733$12l&&U
                                                                 g$lev$20722$12l&&U)))))
                                                        g$ls/false$20731$12l&&U)
                                                      ((case-lambda
                                                         ((g$t$20734$12l&&U)
                                                          ((case-lambda
                                                             ((g$ls/false$20735$12l&&U)
                                                              (if g$ls/false$20735$12l&&U
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$20736$12l&&U)
                                                                     (g$quasicons$20712$12l&&U
                                                                       (g$datum$20676$12l&&U
                                                                         'quasiquote)
                                                                       (g$quasi$20716$12l&&U
                                                                         (list
                                                                           g$p$20736$12l&&U)
                                                                         (+ g$lev$20722$12l&&U
                                                                            '1)))))
                                                                  g$ls/false$20735$12l&&U)
                                                                ((case-lambda
                                                                   ((g$t$20737$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$ls/false$20738$12l&&U)
                                                                        (if g$ls/false$20738$12l&&U
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$20739$12l&&U
                                                                                 g$q$20740$12l&&U)
                                                                               (g$quasicons$20712$12l&&U
                                                                                 (g$quasi$20716$12l&&U
                                                                                   g$p$20739$12l&&U
                                                                                   g$lev$20722$12l&&U)
                                                                                 (g$quasi$20716$12l&&U
                                                                                   g$q$20740$12l&&U
                                                                                   g$lev$20722$12l&&U))))
                                                                            g$ls/false$20738$12l&&U)
                                                                          ((case-lambda
                                                                             ((g$t$20741$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$20742$12l&&U)
                                                                                  (if (if g$ls/false$20742$12l&&U
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$20743$12l&&U)
                                                                                               (not (g$stx?$19163$12l&&U
                                                                                                      g$x$20743$12l&&U))))
                                                                                            g$ls/false$20742$12l&&U))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$20744$12l&&U)
                                                                                         (g$quasivector$20714$12l&&U
                                                                                           (g$vquasi$20715$12l&&U
                                                                                             g$x$20744$12l&&U
                                                                                             g$lev$20722$12l&&U))))
                                                                                      g$ls/false$20742$12l&&U)
                                                                                    ((case-lambda
                                                                                       ((g$t$20745$12l&&U)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$20746$12l&&U)
                                                                                            (if g$ls/false$20746$12l&&U
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$20747$12l&&U)
                                                                                                   (list
                                                                                                     (g$scheme-stx$19632$12l&&U
                                                                                                       'quote)
                                                                                                     g$p$20747$12l&&U)))
                                                                                                g$ls/false$20746$12l&&U)
                                                                                              (g$syntax-violation$19808$12l&&U
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$20745$12l&&U))))
                                                                                         (g$syntax-dispatch$19689$12l&&U
                                                                                           g$t$20745$12l&&U
                                                                                           'any))))
                                                                                     g$t$20741$12l&&U))))
                                                                               (g$syntax-dispatch$19689$12l&&U
                                                                                 g$t$20741$12l&&U
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$20737$12l&&U))))
                                                                     (g$syntax-dispatch$19689$12l&&U
                                                                       g$t$20737$12l&&U
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$20734$12l&&U))))
                                                           (g$syntax-dispatch$19689$12l&&U
                                                             g$t$20734$12l&&U
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$20730$12l&&U))))
                                                 (g$syntax-dispatch$19689$12l&&U
                                                   g$t$20730$12l&&U
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$20726$12l&&U))))
                                       (g$syntax-dispatch$19689$12l&&U
                                         g$t$20726$12l&&U
                                         '((#(scheme-id unquote)
                                            .
                                            each-any)
                                           .
                                           any)))))
                                   g$t$20723$12l&&U))))
                             (g$syntax-dispatch$19689$12l&&U
                               g$t$20723$12l&&U
                               '(#(scheme-id unquote) any)))))
                         g$p$20721$12l&&U)))))
           (case-lambda
             ((g$x$20717$12l&&U)
              ((case-lambda
                 ((g$t$20718$12l&&U)
                  ((case-lambda
                     ((g$ls/false$20719$12l&&U)
                      (if g$ls/false$20719$12l&&U
                        (apply
                          (case-lambda
                            ((g$e$20720$12l&&U)
                             (g$quasi$20716$12l&&U
                               g$e$20720$12l&&U
                               '0)))
                          g$ls/false$20719$12l&&U)
                        (g$syntax-violation$19808$12l&&U
                          '#f
                          '"invalid syntax"
                          g$t$20718$12l&&U))))
                   (g$syntax-dispatch$19689$12l&&U
                     g$t$20718$12l&&U
                     '(_ any)))))
               g$x$20717$12l&&U))))))))
   (g$quasisyntax-macro$19681$12l&&U
     g$quasisyntax-macro$23277$12l&&U
     ((case-lambda
        (()
         (letrec* ((g$quasi$20827$12l&&U
                     (case-lambda
                       ((g$p$20841$12l&&U g$lev$20842$12l&&U)
                        ((case-lambda
                           ((g$t$20843$12l&&U)
                            ((case-lambda
                               ((g$ls/false$20844$12l&&U)
                                (if g$ls/false$20844$12l&&U
                                  (apply
                                    (case-lambda
                                      ((g$p$20845$12l&&U)
                                       (if (= g$lev$20842$12l&&U '0)
                                         ((case-lambda
                                            ((g$g$20846$12l&&U)
                                             (values
                                               (list g$g$20846$12l&&U)
                                               (list g$p$20845$12l&&U)
                                               g$g$20846$12l&&U)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$20827$12l&&U
                                                g$p$20845$12l&&U
                                                (- g$lev$20842$12l&&U
                                                   '1))))
                                           (case-lambda
                                             ((g$lhs*$20850$12l&&U
                                                g$rhs*$20851$12l&&U
                                                g$p$20852$12l&&U)
                                              ((case-lambda
                                                 ((g$p$20853$12l&&U
                                                    g$rhs*$20854$12l&&U
                                                    g$lhs*$20855$12l&&U)
                                                  (values
                                                    g$lhs*$20855$12l&&U
                                                    g$rhs*$20854$12l&&U
                                                    (list
                                                      'unsyntax
                                                      g$p$20853$12l&&U))))
                                               g$p$20852$12l&&U
                                               g$rhs*$20851$12l&&U
                                               g$lhs*$20850$12l&&U)))))))
                                    g$ls/false$20844$12l&&U)
                                  ((case-lambda
                                     ((g$t$20856$12l&&U)
                                      ((case-lambda
                                         ((g$ls/false$20857$12l&&U)
                                          (if (if g$ls/false$20857$12l&&U
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$20842$12l&&U
                                                          '0)))
                                                    g$ls/false$20857$12l&&U))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$19808$12l&&U
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$20841$12l&&U)))
                                              g$ls/false$20857$12l&&U)
                                            ((case-lambda
                                               ((g$t$20858$12l&&U)
                                                ((case-lambda
                                                   ((g$ls/false$20859$12l&&U)
                                                    (if g$ls/false$20859$12l&&U
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$20860$12l&&U
                                                             g$q$20861$12l&&U)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$20827$12l&&U
                                                                  g$q$20861$12l&&U
                                                                  g$lev$20842$12l&&U)))
                                                             (case-lambda
                                                               ((g$lhs*$20865$12l&&U
                                                                  g$rhs*$20866$12l&&U
                                                                  g$q$20867$12l&&U)
                                                                ((case-lambda
                                                                   ((g$q$20868$12l&&U
                                                                      g$rhs*$20869$12l&&U
                                                                      g$lhs*$20870$12l&&U)
                                                                    (if (= g$lev$20842$12l&&U
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$20871$12l&&U)
                                                                          (values
                                                                            (append
                                                                              g$g*$20871$12l&&U
                                                                              g$lhs*$20870$12l&&U)
                                                                            (append
                                                                              g$p*$20860$12l&&U
                                                                              g$rhs*$20869$12l&&U)
                                                                            (append
                                                                              g$g*$20871$12l&&U
                                                                              g$q$20868$12l&&U))))
                                                                       (g$map$11835$12l&&U
                                                                         (case-lambda
                                                                           ((g$x$20872$12l&&U)
                                                                            (gensym)))
                                                                         g$p*$20860$12l&&U))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$20827$12l&&U
                                                                             g$p*$20860$12l&&U
                                                                             (- g$lev$20842$12l&&U
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$20876$12l&&U
                                                                             g$rhs2*$20877$12l&&U
                                                                             g$p*$20878$12l&&U)
                                                                           ((case-lambda
                                                                              ((g$p*$20879$12l&&U
                                                                                 g$rhs2*$20880$12l&&U
                                                                                 g$lhs2*$20881$12l&&U)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$20881$12l&&U
                                                                                   g$lhs*$20870$12l&&U)
                                                                                 (append
                                                                                   g$rhs2*$20880$12l&&U
                                                                                   g$rhs*$20869$12l&&U)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$20879$12l&&U)
                                                                                   g$q$20868$12l&&U))))
                                                                            g$p*$20878$12l&&U
                                                                            g$rhs2*$20877$12l&&U
                                                                            g$lhs2*$20876$12l&&U)))))))
                                                                 g$q$20867$12l&&U
                                                                 g$rhs*$20866$12l&&U
                                                                 g$lhs*$20865$12l&&U))))))
                                                        g$ls/false$20859$12l&&U)
                                                      ((case-lambda
                                                         ((g$t$20882$12l&&U)
                                                          ((case-lambda
                                                             ((g$ls/false$20883$12l&&U)
                                                              (if g$ls/false$20883$12l&&U
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$20884$12l&&U
                                                                       g$q$20885$12l&&U)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$20827$12l&&U
                                                                            g$q$20885$12l&&U
                                                                            g$lev$20842$12l&&U)))
                                                                       (case-lambda
                                                                         ((g$lhs*$20889$12l&&U
                                                                            g$rhs*$20890$12l&&U
                                                                            g$q$20891$12l&&U)
                                                                          ((case-lambda
                                                                             ((g$q$20892$12l&&U
                                                                                g$rhs*$20893$12l&&U
                                                                                g$lhs*$20894$12l&&U)
                                                                              (if (= g$lev$20842$12l&&U
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$20895$12l&&U)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$11835$12l&&U
                                                                                          (case-lambda
                                                                                            ((g$g$20896$12l&&U)
                                                                                             (cons
                                                                                               g$g$20896$12l&&U
                                                                                               '(...))))
                                                                                          g$g*$20895$12l&&U)
                                                                                        g$lhs*$20894$12l&&U)
                                                                                      (append
                                                                                        g$p*$20884$12l&&U
                                                                                        g$rhs*$20893$12l&&U)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$11835$12l&&U
                                                                                            (case-lambda
                                                                                              ((g$g$20897$12l&&U)
                                                                                               (cons
                                                                                                 g$g$20897$12l&&U
                                                                                                 '(...))))
                                                                                            g$g*$20895$12l&&U))
                                                                                        g$q$20892$12l&&U))))
                                                                                 (g$map$11835$12l&&U
                                                                                   (case-lambda
                                                                                     ((g$x$20898$12l&&U)
                                                                                      (gensym)))
                                                                                   g$p*$20884$12l&&U))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$20827$12l&&U
                                                                                       g$p*$20884$12l&&U
                                                                                       (- g$lev$20842$12l&&U
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$20902$12l&&U
                                                                                       g$rhs2*$20903$12l&&U
                                                                                       g$p*$20904$12l&&U)
                                                                                     ((case-lambda
                                                                                        ((g$p*$20905$12l&&U
                                                                                           g$rhs2*$20906$12l&&U
                                                                                           g$lhs2*$20907$12l&&U)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$20907$12l&&U
                                                                                             g$lhs*$20894$12l&&U)
                                                                                           (append
                                                                                             g$rhs2*$20906$12l&&U
                                                                                             g$rhs*$20893$12l&&U)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$20905$12l&&U)
                                                                                             g$q$20892$12l&&U))))
                                                                                      g$p*$20904$12l&&U
                                                                                      g$rhs2*$20903$12l&&U
                                                                                      g$lhs2*$20902$12l&&U)))))))
                                                                           g$q$20891$12l&&U
                                                                           g$rhs*$20890$12l&&U
                                                                           g$lhs*$20889$12l&&U))))))
                                                                  g$ls/false$20883$12l&&U)
                                                                ((case-lambda
                                                                   ((g$t$20908$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$ls/false$20909$12l&&U)
                                                                        (if (if g$ls/false$20909$12l&&U
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$20842$12l&&U
                                                                                        '0)))
                                                                                  g$ls/false$20909$12l&&U))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$19808$12l&&U
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$20841$12l&&U)))
                                                                            g$ls/false$20909$12l&&U)
                                                                          ((case-lambda
                                                                             ((g$t$20910$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$20911$12l&&U)
                                                                                  (if g$ls/false$20911$12l&&U
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$20912$12l&&U)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$20827$12l&&U
                                                                                                g$p$20912$12l&&U
                                                                                                (+ g$lev$20842$12l&&U
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$20916$12l&&U
                                                                                                g$rhs*$20917$12l&&U
                                                                                                g$p$20918$12l&&U)
                                                                                              ((case-lambda
                                                                                                 ((g$p$20919$12l&&U
                                                                                                    g$rhs*$20920$12l&&U
                                                                                                    g$lhs*$20921$12l&&U)
                                                                                                  (values
                                                                                                    g$lhs*$20921$12l&&U
                                                                                                    g$rhs*$20920$12l&&U
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$20919$12l&&U))))
                                                                                               g$p$20918$12l&&U
                                                                                               g$rhs*$20917$12l&&U
                                                                                               g$lhs*$20916$12l&&U))))))
                                                                                      g$ls/false$20911$12l&&U)
                                                                                    ((case-lambda
                                                                                       ((g$t$20922$12l&&U)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$20923$12l&&U)
                                                                                            (if g$ls/false$20923$12l&&U
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$20924$12l&&U
                                                                                                     g$q$20925$12l&&U)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$20827$12l&&U
                                                                                                          g$p$20924$12l&&U
                                                                                                          g$lev$20842$12l&&U)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$20932$12l&&U
                                                                                                          g$rhs*$20933$12l&&U
                                                                                                          g$p$20934$12l&&U)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$20827$12l&&U
                                                                                                               g$q$20925$12l&&U
                                                                                                               g$lev$20842$12l&&U)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$20935$12l&&U
                                                                                                               g$rhs2*$20936$12l&&U
                                                                                                               g$q$20937$12l&&U)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$20938$12l&&U
                                                                                                                   g$rhs2*$20939$12l&&U
                                                                                                                   g$lhs2*$20940$12l&&U
                                                                                                                   g$p$20941$12l&&U
                                                                                                                   g$rhs*$20942$12l&&U
                                                                                                                   g$lhs*$20943$12l&&U)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$20940$12l&&U
                                                                                                                     g$lhs*$20943$12l&&U)
                                                                                                                   (append
                                                                                                                     g$rhs2*$20939$12l&&U
                                                                                                                     g$rhs*$20942$12l&&U)
                                                                                                                   (cons
                                                                                                                     g$p$20941$12l&&U
                                                                                                                     g$q$20938$12l&&U))))
                                                                                                              g$q$20937$12l&&U
                                                                                                              g$rhs2*$20936$12l&&U
                                                                                                              g$lhs2*$20935$12l&&U
                                                                                                              g$p$20934$12l&&U
                                                                                                              g$rhs*$20933$12l&&U
                                                                                                              g$lhs*$20932$12l&&U)))))))))
                                                                                                g$ls/false$20923$12l&&U)
                                                                                              ((case-lambda
                                                                                                 ((g$t$20944$12l&&U)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$20945$12l&&U)
                                                                                                      (if g$ls/false$20945$12l&&U
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$20946$12l&&U)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$20827$12l&&U
                                                                                                                    g$x*$20946$12l&&U
                                                                                                                    g$lev$20842$12l&&U)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$20950$12l&&U
                                                                                                                    g$rhs*$20951$12l&&U
                                                                                                                    g$x*$20952$12l&&U)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$20953$12l&&U
                                                                                                                        g$rhs*$20954$12l&&U
                                                                                                                        g$lhs*$20955$12l&&U)
                                                                                                                      (values
                                                                                                                        g$lhs*$20955$12l&&U
                                                                                                                        g$rhs*$20954$12l&&U
                                                                                                                        (g$list->vector$12589$12l&&U
                                                                                                                          g$x*$20953$12l&&U))))
                                                                                                                   g$x*$20952$12l&&U
                                                                                                                   g$rhs*$20951$12l&&U
                                                                                                                   g$lhs*$20950$12l&&U))))))
                                                                                                          g$ls/false$20945$12l&&U)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$20956$12l&&U)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$20957$12l&&U)
                                                                                                                (if g$ls/false$20957$12l&&U
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$20841$12l&&U)))
                                                                                                                    g$ls/false$20957$12l&&U)
                                                                                                                  (g$syntax-violation$19808$12l&&U
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$20956$12l&&U))))
                                                                                                             (g$syntax-dispatch$19689$12l&&U
                                                                                                               g$t$20956$12l&&U
                                                                                                               '_))))
                                                                                                         g$t$20944$12l&&U))))
                                                                                                   (g$syntax-dispatch$19689$12l&&U
                                                                                                     g$t$20944$12l&&U
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$20922$12l&&U))))
                                                                                         (g$syntax-dispatch$19689$12l&&U
                                                                                           g$t$20922$12l&&U
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$20910$12l&&U))))
                                                                               (g$syntax-dispatch$19689$12l&&U
                                                                                 g$t$20910$12l&&U
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$20908$12l&&U))))
                                                                     (g$syntax-dispatch$19689$12l&&U
                                                                       g$t$20908$12l&&U
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$20882$12l&&U))))
                                                           (g$syntax-dispatch$19689$12l&&U
                                                             g$t$20882$12l&&U
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$20858$12l&&U))))
                                                 (g$syntax-dispatch$19689$12l&&U
                                                   g$t$20858$12l&&U
                                                   '((#(scheme-id
                                                        unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$20856$12l&&U))))
                                       (g$syntax-dispatch$19689$12l&&U
                                         g$t$20856$12l&&U
                                         '#(scheme-id unsyntax)))))
                                   g$t$20843$12l&&U))))
                             (g$syntax-dispatch$19689$12l&&U
                               g$t$20843$12l&&U
                               '(#(scheme-id unsyntax) any)))))
                         g$p$20841$12l&&U)))))
           (case-lambda
             ((g$x$20828$12l&&U)
              ((case-lambda
                 ((g$t$20829$12l&&U)
                  ((case-lambda
                     ((g$ls/false$20830$12l&&U)
                      (if g$ls/false$20830$12l&&U
                        (apply
                          (case-lambda
                            ((g$e$20831$12l&&U)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$quasi$20827$12l&&U
                                    g$e$20831$12l&&U
                                    '0)))
                               (case-lambda
                                 ((g$lhs*$20835$12l&&U
                                    g$rhs*$20836$12l&&U
                                    g$v$20837$12l&&U)
                                  ((case-lambda
                                     ((g$v$20838$12l&&U
                                        g$rhs*$20839$12l&&U
                                        g$lhs*$20840$12l&&U)
                                      (g$bless$19652$12l&&U
                                        (list
                                          'syntax-case
                                          (cons
                                            'list
                                            g$rhs*$20839$12l&&U)
                                          '()
                                          (list
                                            g$lhs*$20840$12l&&U
                                            (list
                                              'syntax
                                              g$v$20838$12l&&U))))))
                                   g$v$20837$12l&&U
                                   g$rhs*$20836$12l&&U
                                   g$lhs*$20835$12l&&U))))))
                          g$ls/false$20830$12l&&U)
                        (g$syntax-violation$19808$12l&&U
                          '#f
                          '"invalid syntax"
                          g$t$20829$12l&&U))))
                   (g$syntax-dispatch$19689$12l&&U
                     g$t$20829$12l&&U
                     '(_ any)))))
               g$x$20828$12l&&U))))))))
   (g$define-struct-macro$19682$12l&&U
     g$define-struct-macro$23278$12l&&U
     (case-lambda
       ((g$stx$20958$12l&&U)
        (g$syntax-violation$19808$12l&&U
          '#f
          '"define-struct not supported"
          g$stx$20958$12l&&U))))
   (g$define-record-type-macro$19683$12l&&U
     g$define-record-type-macro$23279$12l&&U
     (case-lambda
       ((g$x$20959$12l&&U)
        (letrec* ((g$id$20960$12l&&U
                    (case-lambda
                      ((g$ctxt$21212$12l&&U . g$str*$21213$12l&&U)
                       (g$datum->syntax$19810$12l&&U
                         g$ctxt$21212$12l&&U
                         (string->symbol
                           (apply
                             string-append
                             (g$map$11835$12l&&U
                               (case-lambda
                                 ((g$x$21214$12l&&U)
                                  (if (g$symbol?$12579$12l&&U
                                        g$x$21214$12l&&U)
                                    (symbol->string g$x$21214$12l&&U)
                                    (if (string? g$x$21214$12l&&U)
                                      g$x$21214$12l&&U
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$21213$12l&&U)))))))
                  (g$get-record-name$20961$12l&&U
                    (case-lambda
                      ((g$spec$21203$12l&&U)
                       ((case-lambda
                          ((g$t$21204$12l&&U)
                           ((case-lambda
                              ((g$ls/false$21205$12l&&U)
                               (if g$ls/false$21205$12l&&U
                                 (apply
                                   (case-lambda
                                     ((g$foo$21206$12l&&U
                                        g$make-foo$21207$12l&&U
                                        g$foo?$21208$12l&&U)
                                      g$foo$21206$12l&&U))
                                   g$ls/false$21205$12l&&U)
                                 ((case-lambda
                                    ((g$t$21209$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$21210$12l&&U)
                                         (if g$ls/false$21210$12l&&U
                                           (apply
                                             (case-lambda
                                               ((g$foo$21211$12l&&U)
                                                g$foo$21211$12l&&U))
                                             g$ls/false$21210$12l&&U)
                                           (g$syntax-violation$19808$12l&&U
                                             '#f
                                             '"invalid syntax"
                                             g$t$21209$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$21209$12l&&U
                                        'any))))
                                  g$t$21204$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$21204$12l&&U
                              '(any any any)))))
                        g$spec$21203$12l&&U))))
                  (g$get-record-constructor-name$20962$12l&&U
                    (case-lambda
                      ((g$spec$21193$12l&&U)
                       ((case-lambda
                          ((g$t$21194$12l&&U)
                           ((case-lambda
                              ((g$ls/false$21195$12l&&U)
                               (if g$ls/false$21195$12l&&U
                                 (apply
                                   (case-lambda
                                     ((g$foo$21196$12l&&U
                                        g$make-foo$21197$12l&&U
                                        g$foo?$21198$12l&&U)
                                      g$make-foo$21197$12l&&U))
                                   g$ls/false$21195$12l&&U)
                                 ((case-lambda
                                    ((g$t$21199$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$21200$12l&&U)
                                         (if (if g$ls/false$21200$12l&&U
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$21201$12l&&U)
                                                      (g$id?$19191$12l&&U
                                                        g$foo$21201$12l&&U)))
                                                   g$ls/false$21200$12l&&U))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$21202$12l&&U)
                                                (g$id$20960$12l&&U
                                                  g$foo$21202$12l&&U
                                                  '"make-"
                                                  (g$stx->datum$19202$12l&&U
                                                    g$foo$21202$12l&&U))))
                                             g$ls/false$21200$12l&&U)
                                           (g$syntax-violation$19808$12l&&U
                                             '#f
                                             '"invalid syntax"
                                             g$t$21199$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$21199$12l&&U
                                        'any))))
                                  g$t$21194$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$21194$12l&&U
                              '(any any any)))))
                        g$spec$21193$12l&&U))))
                  (g$get-record-predicate-name$20963$12l&&U
                    (case-lambda
                      ((g$spec$21183$12l&&U)
                       ((case-lambda
                          ((g$t$21184$12l&&U)
                           ((case-lambda
                              ((g$ls/false$21185$12l&&U)
                               (if g$ls/false$21185$12l&&U
                                 (apply
                                   (case-lambda
                                     ((g$foo$21186$12l&&U
                                        g$make-foo$21187$12l&&U
                                        g$foo?$21188$12l&&U)
                                      g$foo?$21188$12l&&U))
                                   g$ls/false$21185$12l&&U)
                                 ((case-lambda
                                    ((g$t$21189$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$21190$12l&&U)
                                         (if (if g$ls/false$21190$12l&&U
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$21191$12l&&U)
                                                      (g$id?$19191$12l&&U
                                                        g$foo$21191$12l&&U)))
                                                   g$ls/false$21190$12l&&U))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$21192$12l&&U)
                                                (g$id$20960$12l&&U
                                                  g$foo$21192$12l&&U
                                                  (g$stx->datum$19202$12l&&U
                                                    g$foo$21192$12l&&U)
                                                  '"?")))
                                             g$ls/false$21190$12l&&U)
                                           (g$syntax-violation$19808$12l&&U
                                             '#f
                                             '"invalid syntax"
                                             g$t$21189$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$21189$12l&&U
                                        'any))))
                                  g$t$21184$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$21184$12l&&U
                              '(any any any)))))
                        g$spec$21183$12l&&U))))
                  (g$get-clause$20964$12l&&U
                    (case-lambda
                      ((g$id$21174$12l&&U g$ls$21175$12l&&U)
                       ((case-lambda
                          ((g$t$21176$12l&&U)
                           ((case-lambda
                              ((g$ls/false$21177$12l&&U)
                               (if g$ls/false$21177$12l&&U
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$21177$12l&&U)
                                 ((case-lambda
                                    ((g$t$21178$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$21179$12l&&U)
                                         (if g$ls/false$21179$12l&&U
                                           (apply
                                             (case-lambda
                                               ((g$x$21180$12l&&U
                                                  g$rest$21181$12l&&U
                                                  g$ls$21182$12l&&U)
                                                (if (g$free-id=?$19195$12l&&U
                                                      (g$bless$19652$12l&&U
                                                        g$id$21174$12l&&U)
                                                      g$x$21180$12l&&U)
                                                  (cons
                                                    g$x$21180$12l&&U
                                                    g$rest$21181$12l&&U)
                                                  (g$get-clause$20964$12l&&U
                                                    g$id$21174$12l&&U
                                                    g$ls$21182$12l&&U))))
                                             g$ls/false$21179$12l&&U)
                                           (g$syntax-violation$19808$12l&&U
                                             '#f
                                             '"invalid syntax"
                                             g$t$21178$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$21178$12l&&U
                                        '((any . any) . any)))))
                                  g$t$21176$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$21176$12l&&U
                              '()))))
                        g$ls$21175$12l&&U))))
                  (g$foo-rtd-code$20965$12l&&U
                    (case-lambda
                      ((g$name$21133$12l&&U
                         g$clause*$21134$12l&&U
                         g$parent-rtd-code$21135$12l&&U)
                       (letrec* ((g$convert-field-spec*$21136$12l&&U
                                   (case-lambda
                                     ((g$ls$21161$12l&&U)
                                      (g$list->vector$12589$12l&&U
                                        (g$map$11835$12l&&U
                                          (case-lambda
                                            ((g$x$21162$12l&&U)
                                             ((case-lambda
                                                ((g$t$21163$12l&&U)
                                                 ((case-lambda
                                                    ((g$ls/false$21164$12l&&U)
                                                     (if g$ls/false$21164$12l&&U
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$21165$12l&&U
                                                              g$rest$21166$12l&&U)
                                                            (list
                                                              'mutable
                                                              g$name$21165$12l&&U)))
                                                         g$ls/false$21164$12l&&U)
                                                       ((case-lambda
                                                          ((g$t$21167$12l&&U)
                                                           ((case-lambda
                                                              ((g$ls/false$21168$12l&&U)
                                                               (if g$ls/false$21168$12l&&U
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$21169$12l&&U
                                                                        g$rest$21170$12l&&U)
                                                                      (list
                                                                        'immutable
                                                                        g$name$21169$12l&&U)))
                                                                   g$ls/false$21168$12l&&U)
                                                                 ((case-lambda
                                                                    ((g$t$21171$12l&&U)
                                                                     ((case-lambda
                                                                        ((g$ls/false$21172$12l&&U)
                                                                         (if g$ls/false$21172$12l&&U
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$21173$12l&&U)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$21173$12l&&U)))
                                                                             g$ls/false$21172$12l&&U)
                                                                           (g$syntax-violation$19808$12l&&U
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$21171$12l&&U))))
                                                                      (g$syntax-dispatch$19689$12l&&U
                                                                        g$t$21171$12l&&U
                                                                        'any))))
                                                                  g$t$21167$12l&&U))))
                                                            (g$syntax-dispatch$19689$12l&&U
                                                              g$t$21167$12l&&U
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$21163$12l&&U))))
                                                  (g$syntax-dispatch$19689$12l&&U
                                                    g$t$21163$12l&&U
                                                    '(#(scheme-id
                                                        mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$21162$12l&&U)))
                                          g$ls$21161$12l&&U))))))
                         ((case-lambda
                            ((g$uid-code$21137$12l&&U
                               g$sealed?$21138$12l&&U
                               g$opaque?$21139$12l&&U
                               g$fields$21140$12l&&U)
                             (g$bless$19652$12l&&U
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$21133$12l&&U)
                                 g$parent-rtd-code$21135$12l&&U
                                 g$uid-code$21137$12l&&U
                                 g$sealed?$21138$12l&&U
                                 g$opaque?$21139$12l&&U
                                 g$fields$21140$12l&&U))))
                          ((case-lambda
                             ((g$t$21141$12l&&U)
                              ((case-lambda
                                 ((g$ls/false$21142$12l&&U)
                                  (if g$ls/false$21142$12l&&U
                                    (apply
                                      (case-lambda
                                        (() (list 'quote (gensym))))
                                      g$ls/false$21142$12l&&U)
                                    ((case-lambda
                                       ((g$t$21143$12l&&U)
                                        ((case-lambda
                                           ((g$ls/false$21144$12l&&U)
                                            (if g$ls/false$21144$12l&&U
                                              (apply
                                                (case-lambda
                                                  ((g$uid$21145$12l&&U)
                                                   (list
                                                     'quote
                                                     g$uid$21145$12l&&U)))
                                                g$ls/false$21144$12l&&U)
                                              ((case-lambda
                                                 ((g$t$21146$12l&&U)
                                                  ((case-lambda
                                                     ((g$ls/false$21147$12l&&U)
                                                      (if g$ls/false$21147$12l&&U
                                                        (apply
                                                          (case-lambda
                                                            (() '#f))
                                                          g$ls/false$21147$12l&&U)
                                                        (g$syntax-violation$19808$12l&&U
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$21146$12l&&U))))
                                                   (g$syntax-dispatch$19689$12l&&U
                                                     g$t$21146$12l&&U
                                                     '_))))
                                               g$t$21143$12l&&U))))
                                         (g$syntax-dispatch$19689$12l&&U
                                           g$t$21143$12l&&U
                                           '(_ any)))))
                                     g$t$21141$12l&&U))))
                               (g$syntax-dispatch$19689$12l&&U
                                 g$t$21141$12l&&U
                                 '(_)))))
                           (g$get-clause$20964$12l&&U
                             'nongenerative
                             g$clause*$21134$12l&&U))
                          ((case-lambda
                             ((g$t$21148$12l&&U)
                              ((case-lambda
                                 ((g$ls/false$21149$12l&&U)
                                  (if g$ls/false$21149$12l&&U
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$21149$12l&&U)
                                    ((case-lambda
                                       ((g$t$21150$12l&&U)
                                        ((case-lambda
                                           ((g$ls/false$21151$12l&&U)
                                            (if g$ls/false$21151$12l&&U
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$21151$12l&&U)
                                              (g$syntax-violation$19808$12l&&U
                                                '#f
                                                '"invalid syntax"
                                                g$t$21150$12l&&U))))
                                         (g$syntax-dispatch$19689$12l&&U
                                           g$t$21150$12l&&U
                                           '_))))
                                     g$t$21148$12l&&U))))
                               (g$syntax-dispatch$19689$12l&&U
                                 g$t$21148$12l&&U
                                 '(_ #(atom #t))))))
                           (g$get-clause$20964$12l&&U
                             'sealed
                             g$clause*$21134$12l&&U))
                          ((case-lambda
                             ((g$t$21152$12l&&U)
                              ((case-lambda
                                 ((g$ls/false$21153$12l&&U)
                                  (if g$ls/false$21153$12l&&U
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$21153$12l&&U)
                                    ((case-lambda
                                       ((g$t$21154$12l&&U)
                                        ((case-lambda
                                           ((g$ls/false$21155$12l&&U)
                                            (if g$ls/false$21155$12l&&U
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$21155$12l&&U)
                                              (g$syntax-violation$19808$12l&&U
                                                '#f
                                                '"invalid syntax"
                                                g$t$21154$12l&&U))))
                                         (g$syntax-dispatch$19689$12l&&U
                                           g$t$21154$12l&&U
                                           '_))))
                                     g$t$21152$12l&&U))))
                               (g$syntax-dispatch$19689$12l&&U
                                 g$t$21152$12l&&U
                                 '(_ #(atom #t))))))
                           (g$get-clause$20964$12l&&U
                             'opaque
                             g$clause*$21134$12l&&U))
                          ((case-lambda
                             ((g$t$21156$12l&&U)
                              ((case-lambda
                                 ((g$ls/false$21157$12l&&U)
                                  (if g$ls/false$21157$12l&&U
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$21158$12l&&U)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$21136$12l&&U
                                             g$field-spec*$21158$12l&&U))))
                                      g$ls/false$21157$12l&&U)
                                    ((case-lambda
                                       ((g$t$21159$12l&&U)
                                        ((case-lambda
                                           ((g$ls/false$21160$12l&&U)
                                            (if g$ls/false$21160$12l&&U
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$21160$12l&&U)
                                              (g$syntax-violation$19808$12l&&U
                                                '#f
                                                '"invalid syntax"
                                                g$t$21159$12l&&U))))
                                         (g$syntax-dispatch$19689$12l&&U
                                           g$t$21159$12l&&U
                                           '_))))
                                     g$t$21156$12l&&U))))
                               (g$syntax-dispatch$19689$12l&&U
                                 g$t$21156$12l&&U
                                 '(_ . each-any)))))
                           (g$get-clause$20964$12l&&U
                             'fields
                             g$clause*$21134$12l&&U)))))))
                  (g$parent-rtd-code$20966$12l&&U
                    (case-lambda
                      ((g$clause*$21121$12l&&U)
                       ((case-lambda
                          ((g$t$21122$12l&&U)
                           ((case-lambda
                              ((g$ls/false$21123$12l&&U)
                               (if g$ls/false$21123$12l&&U
                                 (apply
                                   (case-lambda
                                     ((g$name$21124$12l&&U)
                                      (list
                                        'record-type-descriptor
                                        g$name$21124$12l&&U)))
                                   g$ls/false$21123$12l&&U)
                                 ((case-lambda
                                    ((g$t$21125$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$21126$12l&&U)
                                         (if g$ls/false$21126$12l&&U
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$21127$12l&&U)
                                                    ((case-lambda
                                                       ((g$ls/false$21128$12l&&U)
                                                        (if g$ls/false$21128$12l&&U
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$21129$12l&&U
                                                                 g$rcd$21130$12l&&U)
                                                               g$rtd$21129$12l&&U))
                                                            g$ls/false$21128$12l&&U)
                                                          ((case-lambda
                                                             ((g$t$21131$12l&&U)
                                                              ((case-lambda
                                                                 ((g$ls/false$21132$12l&&U)
                                                                  (if g$ls/false$21132$12l&&U
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$21132$12l&&U)
                                                                    (g$syntax-violation$19808$12l&&U
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$21131$12l&&U))))
                                                               (g$syntax-dispatch$19689$12l&&U
                                                                 g$t$21131$12l&&U
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$21127$12l&&U))))
                                                     (g$syntax-dispatch$19689$12l&&U
                                                       g$t$21127$12l&&U
                                                       '(_ any any)))))
                                                 (g$get-clause$20964$12l&&U
                                                   'parent-rtd
                                                   g$clause*$21121$12l&&U))))
                                             g$ls/false$21126$12l&&U)
                                           (g$syntax-violation$19808$12l&&U
                                             '#f
                                             '"invalid syntax"
                                             g$t$21125$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$21125$12l&&U
                                        '#(atom #f)))))
                                  g$t$21122$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$21122$12l&&U
                              '(_ any)))))
                        (g$get-clause$20964$12l&&U
                          'parent
                          g$clause*$21121$12l&&U)))))
                  (g$parent-rcd-code$20967$12l&&U
                    (case-lambda
                      ((g$clause*$21109$12l&&U)
                       ((case-lambda
                          ((g$t$21110$12l&&U)
                           ((case-lambda
                              ((g$ls/false$21111$12l&&U)
                               (if g$ls/false$21111$12l&&U
                                 (apply
                                   (case-lambda
                                     ((g$name$21112$12l&&U)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$21112$12l&&U)))
                                   g$ls/false$21111$12l&&U)
                                 ((case-lambda
                                    ((g$t$21113$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$21114$12l&&U)
                                         (if g$ls/false$21114$12l&&U
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$21115$12l&&U)
                                                    ((case-lambda
                                                       ((g$ls/false$21116$12l&&U)
                                                        (if g$ls/false$21116$12l&&U
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$21117$12l&&U
                                                                 g$rcd$21118$12l&&U)
                                                               g$rcd$21118$12l&&U))
                                                            g$ls/false$21116$12l&&U)
                                                          ((case-lambda
                                                             ((g$t$21119$12l&&U)
                                                              ((case-lambda
                                                                 ((g$ls/false$21120$12l&&U)
                                                                  (if g$ls/false$21120$12l&&U
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$21120$12l&&U)
                                                                    (g$syntax-violation$19808$12l&&U
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$21119$12l&&U))))
                                                               (g$syntax-dispatch$19689$12l&&U
                                                                 g$t$21119$12l&&U
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$21115$12l&&U))))
                                                     (g$syntax-dispatch$19689$12l&&U
                                                       g$t$21115$12l&&U
                                                       '(_ any any)))))
                                                 (g$get-clause$20964$12l&&U
                                                   'parent-rtd
                                                   g$clause*$21109$12l&&U))))
                                             g$ls/false$21114$12l&&U)
                                           (g$syntax-violation$19808$12l&&U
                                             '#f
                                             '"invalid syntax"
                                             g$t$21113$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$21113$12l&&U
                                        '#(atom #f)))))
                                  g$t$21110$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$21110$12l&&U
                              '(_ any)))))
                        (g$get-clause$20964$12l&&U
                          'parent
                          g$clause*$21109$12l&&U)))))
                  (g$foo-rcd-code$20968$12l&&U
                    (case-lambda
                      ((g$clause*$21105$12l&&U
                         g$foo-rtd$21106$12l&&U
                         g$protocol$21107$12l&&U
                         g$parent-rcd-code$21108$12l&&U)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$21106$12l&&U
                         g$parent-rcd-code$21108$12l&&U
                         g$protocol$21107$12l&&U))))
                  (g$get-protocol-code$20969$12l&&U
                    (case-lambda
                      ((g$clause*$21099$12l&&U)
                       ((case-lambda
                          ((g$t$21100$12l&&U)
                           ((case-lambda
                              ((g$ls/false$21101$12l&&U)
                               (if g$ls/false$21101$12l&&U
                                 (apply
                                   (case-lambda
                                     ((g$expr$21102$12l&&U)
                                      g$expr$21102$12l&&U))
                                   g$ls/false$21101$12l&&U)
                                 ((case-lambda
                                    ((g$t$21103$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$21104$12l&&U)
                                         (if g$ls/false$21104$12l&&U
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$21104$12l&&U)
                                           (g$syntax-violation$19808$12l&&U
                                             '#f
                                             '"invalid syntax"
                                             g$t$21103$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$21103$12l&&U
                                        '_))))
                                  g$t$21100$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$21100$12l&&U
                              '(_ any)))))
                        (g$get-clause$20964$12l&&U
                          'protocol
                          g$clause*$21099$12l&&U)))))
                  (g$get-fields$20970$12l&&U
                    (case-lambda
                      ((g$clause*$21090$12l&&U)
                       ((case-lambda
                          ((g$t$21091$12l&&U)
                           ((case-lambda
                              ((g$ls/false$21092$12l&&U)
                               (if g$ls/false$21092$12l&&U
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$21092$12l&&U)
                                 ((case-lambda
                                    ((g$t$21093$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$21094$12l&&U)
                                         (if g$ls/false$21094$12l&&U
                                           (apply
                                             (case-lambda
                                               ((g$f*$21095$12l&&U)
                                                g$f*$21095$12l&&U))
                                             g$ls/false$21094$12l&&U)
                                           ((case-lambda
                                              ((g$t$21096$12l&&U)
                                               ((case-lambda
                                                  ((g$ls/false$21097$12l&&U)
                                                   (if g$ls/false$21097$12l&&U
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$21098$12l&&U)
                                                          (g$get-fields$20970$12l&&U
                                                            g$rest$21098$12l&&U)))
                                                       g$ls/false$21097$12l&&U)
                                                     (g$syntax-violation$19808$12l&&U
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$21096$12l&&U))))
                                                (g$syntax-dispatch$19689$12l&&U
                                                  g$t$21096$12l&&U
                                                  '(_ . any)))))
                                            g$t$21093$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$21093$12l&&U
                                        '((#(scheme-id fields)
                                           .
                                           each-any)
                                          .
                                          _)))))
                                  g$t$21091$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$21091$12l&&U
                              '()))))
                        g$clause*$21090$12l&&U))))
                  (g$get-mutator-indices$20971$12l&&U
                    (case-lambda
                      ((g$fields$21078$12l&&U)
                       ((letrec ((g$f$21079$12l&&U
                                   (case-lambda
                                     ((g$fields$21080$12l&&U
                                        g$i$21081$12l&&U)
                                      ((case-lambda
                                         ((g$t$21082$12l&&U)
                                          ((case-lambda
                                             ((g$ls/false$21083$12l&&U)
                                              (if g$ls/false$21083$12l&&U
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$21083$12l&&U)
                                                ((case-lambda
                                                   ((g$t$21084$12l&&U)
                                                    ((case-lambda
                                                       ((g$ls/false$21085$12l&&U)
                                                        (if g$ls/false$21085$12l&&U
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$21086$12l&&U)
                                                               (cons
                                                                 g$i$21081$12l&&U
                                                                 (g$f$21079$12l&&U
                                                                   g$rest$21086$12l&&U
                                                                   (+ g$i$21081$12l&&U
                                                                      '1)))))
                                                            g$ls/false$21085$12l&&U)
                                                          ((case-lambda
                                                             ((g$t$21087$12l&&U)
                                                              ((case-lambda
                                                                 ((g$ls/false$21088$12l&&U)
                                                                  (if g$ls/false$21088$12l&&U
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$21089$12l&&U)
                                                                         (g$f$21079$12l&&U
                                                                           g$rest$21089$12l&&U
                                                                           (+ g$i$21081$12l&&U
                                                                              '1))))
                                                                      g$ls/false$21088$12l&&U)
                                                                    (g$syntax-violation$19808$12l&&U
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$21087$12l&&U))))
                                                               (g$syntax-dispatch$19689$12l&&U
                                                                 g$t$21087$12l&&U
                                                                 '(_ .
                                                                     any)))))
                                                           g$t$21084$12l&&U))))
                                                     (g$syntax-dispatch$19689$12l&&U
                                                       g$t$21084$12l&&U
                                                       '((#(scheme-id
                                                            mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$21082$12l&&U))))
                                           (g$syntax-dispatch$19689$12l&&U
                                             g$t$21082$12l&&U
                                             '()))))
                                       g$fields$21080$12l&&U)))))
                          g$f$21079$12l&&U)
                        g$fields$21078$12l&&U
                        '0))))
                  (g$get-mutators$20972$12l&&U
                    (case-lambda
                      ((g$foo$21057$12l&&U g$fields$21058$12l&&U)
                       (letrec* ((g$gen-name$21059$12l&&U
                                   (case-lambda
                                     ((g$x$21077$12l&&U)
                                      (g$datum->syntax$19810$12l&&U
                                        g$foo$21057$12l&&U
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$19811$12l&&U
                                                g$foo$21057$12l&&U))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$19811$12l&&U
                                                g$x$21077$12l&&U))
                                            '"-set!")))))))
                         ((letrec ((g$f$21060$12l&&U
                                     (case-lambda
                                       ((g$fields$21061$12l&&U)
                                        ((case-lambda
                                           ((g$t$21062$12l&&U)
                                            ((case-lambda
                                               ((g$ls/false$21063$12l&&U)
                                                (if g$ls/false$21063$12l&&U
                                                  (apply
                                                    (case-lambda
                                                      (() '()))
                                                    g$ls/false$21063$12l&&U)
                                                  ((case-lambda
                                                     ((g$t$21064$12l&&U)
                                                      ((case-lambda
                                                         ((g$ls/false$21065$12l&&U)
                                                          (if g$ls/false$21065$12l&&U
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$21066$12l&&U
                                                                   g$accessor$21067$12l&&U
                                                                   g$mutator$21068$12l&&U
                                                                   g$rest$21069$12l&&U)
                                                                 (cons
                                                                   g$mutator$21068$12l&&U
                                                                   (g$f$21060$12l&&U
                                                                     g$rest$21069$12l&&U))))
                                                              g$ls/false$21065$12l&&U)
                                                            ((case-lambda
                                                               ((g$t$21070$12l&&U)
                                                                ((case-lambda
                                                                   ((g$ls/false$21071$12l&&U)
                                                                    (if g$ls/false$21071$12l&&U
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$21072$12l&&U
                                                                             g$rest$21073$12l&&U)
                                                                           (cons
                                                                             (g$gen-name$21059$12l&&U
                                                                               g$name$21072$12l&&U)
                                                                             (g$f$21060$12l&&U
                                                                               g$rest$21073$12l&&U))))
                                                                        g$ls/false$21071$12l&&U)
                                                                      ((case-lambda
                                                                         ((g$t$21074$12l&&U)
                                                                          ((case-lambda
                                                                             ((g$ls/false$21075$12l&&U)
                                                                              (if g$ls/false$21075$12l&&U
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$21076$12l&&U)
                                                                                     (g$f$21060$12l&&U
                                                                                       g$rest$21076$12l&&U)))
                                                                                  g$ls/false$21075$12l&&U)
                                                                                (g$syntax-violation$19808$12l&&U
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$21074$12l&&U))))
                                                                           (g$syntax-dispatch$19689$12l&&U
                                                                             g$t$21074$12l&&U
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$21070$12l&&U))))
                                                                 (g$syntax-dispatch$19689$12l&&U
                                                                   g$t$21070$12l&&U
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$21064$12l&&U))))
                                                       (g$syntax-dispatch$19689$12l&&U
                                                         g$t$21064$12l&&U
                                                         '((#(scheme-id
                                                              mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$21062$12l&&U))))
                                             (g$syntax-dispatch$19689$12l&&U
                                               g$t$21062$12l&&U
                                               '()))))
                                         g$fields$21061$12l&&U)))))
                            g$f$21060$12l&&U)
                          g$fields$21058$12l&&U)))))
                  (g$get-accessors$20973$12l&&U
                    (case-lambda
                      ((g$foo$21023$12l&&U g$fields$21024$12l&&U)
                       (letrec* ((g$gen-name$21025$12l&&U
                                   (case-lambda
                                     ((g$x$21056$12l&&U)
                                      (g$datum->syntax$19810$12l&&U
                                        g$foo$21023$12l&&U
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$19811$12l&&U
                                                g$foo$21023$12l&&U))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$19811$12l&&U
                                                g$x$21056$12l&&U)))))))))
                         (g$map$11835$12l&&U
                           (case-lambda
                             ((g$field$21026$12l&&U)
                              ((case-lambda
                                 ((g$t$21027$12l&&U)
                                  ((case-lambda
                                     ((g$ls/false$21028$12l&&U)
                                      (if (if g$ls/false$21028$12l&&U
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$21029$12l&&U
                                                     g$accessor$21030$12l&&U
                                                     g$mutator$21031$12l&&U)
                                                   (g$id?$19191$12l&&U
                                                     g$accessor$21030$12l&&U)))
                                                g$ls/false$21028$12l&&U))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$21032$12l&&U
                                               g$accessor$21033$12l&&U
                                               g$mutator$21034$12l&&U)
                                             g$accessor$21033$12l&&U))
                                          g$ls/false$21028$12l&&U)
                                        ((case-lambda
                                           ((g$t$21035$12l&&U)
                                            ((case-lambda
                                               ((g$ls/false$21036$12l&&U)
                                                (if (if g$ls/false$21036$12l&&U
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$21037$12l&&U
                                                               g$accessor$21038$12l&&U)
                                                             (g$id?$19191$12l&&U
                                                               g$accessor$21038$12l&&U)))
                                                          g$ls/false$21036$12l&&U))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$21039$12l&&U
                                                         g$accessor$21040$12l&&U)
                                                       g$accessor$21040$12l&&U))
                                                    g$ls/false$21036$12l&&U)
                                                  ((case-lambda
                                                     ((g$t$21041$12l&&U)
                                                      ((case-lambda
                                                         ((g$ls/false$21042$12l&&U)
                                                          (if (if g$ls/false$21042$12l&&U
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$21043$12l&&U)
                                                                       (g$id?$19191$12l&&U
                                                                         g$name$21043$12l&&U)))
                                                                    g$ls/false$21042$12l&&U))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$21044$12l&&U)
                                                                 (g$gen-name$21025$12l&&U
                                                                   g$name$21044$12l&&U)))
                                                              g$ls/false$21042$12l&&U)
                                                            ((case-lambda
                                                               ((g$t$21045$12l&&U)
                                                                ((case-lambda
                                                                   ((g$ls/false$21046$12l&&U)
                                                                    (if (if g$ls/false$21046$12l&&U
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$21047$12l&&U)
                                                                                 (g$id?$19191$12l&&U
                                                                                   g$name$21047$12l&&U)))
                                                                              g$ls/false$21046$12l&&U))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$21048$12l&&U)
                                                                           (g$gen-name$21025$12l&&U
                                                                             g$name$21048$12l&&U)))
                                                                        g$ls/false$21046$12l&&U)
                                                                      ((case-lambda
                                                                         ((g$t$21049$12l&&U)
                                                                          ((case-lambda
                                                                             ((g$ls/false$21050$12l&&U)
                                                                              (if (if g$ls/false$21050$12l&&U
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$21051$12l&&U)
                                                                                           (g$id?$19191$12l&&U
                                                                                             g$name$21051$12l&&U)))
                                                                                        g$ls/false$21050$12l&&U))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$21052$12l&&U)
                                                                                     (g$gen-name$21025$12l&&U
                                                                                       g$name$21052$12l&&U)))
                                                                                  g$ls/false$21050$12l&&U)
                                                                                ((case-lambda
                                                                                   ((g$t$21053$12l&&U)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$21054$12l&&U)
                                                                                        (if g$ls/false$21054$12l&&U
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$21055$12l&&U)
                                                                                               (g$syntax-violation$19808$12l&&U
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$21026$12l&&U)))
                                                                                            g$ls/false$21054$12l&&U)
                                                                                          (g$syntax-violation$19808$12l&&U
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$21053$12l&&U))))
                                                                                     (g$syntax-dispatch$19689$12l&&U
                                                                                       g$t$21053$12l&&U
                                                                                       'any))))
                                                                                 g$t$21049$12l&&U))))
                                                                           (g$syntax-dispatch$19689$12l&&U
                                                                             g$t$21049$12l&&U
                                                                             'any))))
                                                                       g$t$21045$12l&&U))))
                                                                 (g$syntax-dispatch$19689$12l&&U
                                                                   g$t$21045$12l&&U
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$21041$12l&&U))))
                                                       (g$syntax-dispatch$19689$12l&&U
                                                         g$t$21041$12l&&U
                                                         '(#(scheme-id
                                                             mutable)
                                                           any)))))
                                                   g$t$21035$12l&&U))))
                                             (g$syntax-dispatch$19689$12l&&U
                                               g$t$21035$12l&&U
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$21027$12l&&U))))
                                   (g$syntax-dispatch$19689$12l&&U
                                     g$t$21027$12l&&U
                                     '(#(scheme-id mutable)
                                       any
                                       any
                                       any)))))
                               g$field$21026$12l&&U)))
                           g$fields$21024$12l&&U)))))
                  (g$enumerate$20974$12l&&U
                    (case-lambda
                      ((g$ls$21019$12l&&U)
                       ((letrec ((g$f$21020$12l&&U
                                   (case-lambda
                                     ((g$ls$21021$12l&&U
                                        g$i$21022$12l&&U)
                                      (if (null? g$ls$21021$12l&&U)
                                        '()
                                        (cons
                                          g$i$21022$12l&&U
                                          (g$f$21020$12l&&U
                                            (cdr g$ls$21021$12l&&U)
                                            (+ g$i$21022$12l&&U
                                               '1))))))))
                          g$f$21020$12l&&U)
                        g$ls$21019$12l&&U
                        '0))))
                  (g$do-define-record$20975$12l&&U
                    (case-lambda
                      ((g$namespec$20999$12l&&U g$clause*$21000$12l&&U)
                       ((case-lambda
                          ((g$foo$21001$12l&&U)
                           ((case-lambda
                              ((g$foo-rtd$21002$12l&&U)
                               ((case-lambda
                                  ((g$foo-rcd$21003$12l&&U)
                                   ((case-lambda
                                      ((g$protocol$21004$12l&&U)
                                       ((case-lambda
                                          ((g$make-foo$21005$12l&&U)
                                           ((case-lambda
                                              ((g$fields$21006$12l&&U)
                                               ((case-lambda
                                                  ((g$idx*$21007$12l&&U)
                                                   ((case-lambda
                                                      ((g$foo-x*$21008$12l&&U)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$21009$12l&&U)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$21010$12l&&U)
                                                               ((case-lambda
                                                                  ((g$foo?$21011$12l&&U)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$21012$12l&&U)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$21013$12l&&U)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$21014$12l&&U)
                                                                               (g$bless$19652$12l&&U
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$21002$12l&&U
                                                                                       g$foo-rtd-code$21012$12l&&U)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$21004$12l&&U
                                                                                         g$protocol-code$21014$12l&&U)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$21003$12l&&U
                                                                                           g$foo-rcd-code$21013$12l&&U)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$21001$12l&&U
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$21002$12l&&U)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$21003$12l&&U)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$21011$12l&&U
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$21002$12l&&U))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$21005$12l&&U
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$21003$12l&&U))
                                                                                               (append
                                                                                                 (g$map$11835$12l&&U
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$21015$12l&&U
                                                                                                        g$idx$21016$12l&&U)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$21015$12l&&U
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$21002$12l&&U
                                                                                                          g$idx$21016$12l&&U))))
                                                                                                   g$foo-x*$21008$12l&&U
                                                                                                   g$idx*$21007$12l&&U)
                                                                                                 (g$map$11835$12l&&U
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$21017$12l&&U
                                                                                                        g$idx$21018$12l&&U)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$21017$12l&&U
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$21002$12l&&U
                                                                                                          g$idx$21018$12l&&U))))
                                                                                                   g$set-foo-x!*$21009$12l&&U
                                                                                                   g$set-foo-idx*$21010$12l&&U))))))))))))
                                                                            (g$get-protocol-code$20969$12l&&U
                                                                              g$clause*$21000$12l&&U))))
                                                                        (g$foo-rcd-code$20968$12l&&U
                                                                          g$clause*$21000$12l&&U
                                                                          g$foo-rtd$21002$12l&&U
                                                                          g$protocol$21004$12l&&U
                                                                          (g$parent-rcd-code$20967$12l&&U
                                                                            g$clause*$21000$12l&&U)))))
                                                                    (g$foo-rtd-code$20965$12l&&U
                                                                      g$foo$21001$12l&&U
                                                                      g$clause*$21000$12l&&U
                                                                      (g$parent-rtd-code$20966$12l&&U
                                                                        g$clause*$21000$12l&&U)))))
                                                                (g$get-record-predicate-name$20963$12l&&U
                                                                  g$namespec$20999$12l&&U))))
                                                            (g$get-mutator-indices$20971$12l&&U
                                                              g$fields$21006$12l&&U))))
                                                        (g$get-mutators$20972$12l&&U
                                                          g$foo$21001$12l&&U
                                                          g$fields$21006$12l&&U))))
                                                    (g$get-accessors$20973$12l&&U
                                                      g$foo$21001$12l&&U
                                                      g$fields$21006$12l&&U))))
                                                (g$enumerate$20974$12l&&U
                                                  g$fields$21006$12l&&U))))
                                            (g$get-fields$20970$12l&&U
                                              g$clause*$21000$12l&&U))))
                                        (g$get-record-constructor-name$20962$12l&&U
                                          g$namespec$20999$12l&&U))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$20961$12l&&U
                          g$namespec$20999$12l&&U)))))
                  (g$verify-clauses$20976$12l&&U
                    (case-lambda
                      ((g$x$20981$12l&&U g$cls*$20982$12l&&U)
                       (letrec* ((g$valid-kwds$20983$12l&&U
                                   (g$map$11835$12l&&U
                                     g$bless$19652$12l&&U
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$20984$12l&&U
                                   (case-lambda
                                     ((g$x$20996$12l&&U
                                        g$ls$20997$12l&&U)
                                      (if (pair? g$ls$20997$12l&&U)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$20998$12l&&U)
                                              (if g$t$20998$12l&&U
                                                g$t$20998$12l&&U
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$20984$12l&&U
                                                    g$x$20996$12l&&U
                                                    (cdr g$ls$20997$12l&&U))))))
                                           (g$free-id=?$19195$12l&&U
                                             g$x$20996$12l&&U
                                             (car g$ls$20997$12l&&U))))
                                        '#f)))))
                         ((letrec ((g$f$20985$12l&&U
                                     (case-lambda
                                       ((g$cls*$20986$12l&&U
                                          g$seen*$20987$12l&&U)
                                        (if (not (null?
                                                   g$cls*$20986$12l&&U))
                                          ((case-lambda
                                             ((g$t$20988$12l&&U)
                                              ((case-lambda
                                                 ((g$ls/false$20989$12l&&U)
                                                  (if g$ls/false$20989$12l&&U
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$20990$12l&&U
                                                           g$rest$20991$12l&&U)
                                                         (if ((case-lambda
                                                                ((g$t$20992$12l&&U)
                                                                 (if g$t$20992$12l&&U
                                                                   g$t$20992$12l&&U
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$20984$12l&&U
                                                                            g$kwd$20990$12l&&U
                                                                            g$valid-kwds$20983$12l&&U))))))
                                                              (not (g$id?$19191$12l&&U
                                                                     g$kwd$20990$12l&&U)))
                                                           (g$syntax-violation$19808$12l&&U
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$20990$12l&&U)
                                                           (if (g$bound-id-member?$19198$12l&&U
                                                                 g$kwd$20990$12l&&U
                                                                 g$seen*$20987$12l&&U)
                                                             (g$syntax-violation$19808$12l&&U
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$20981$12l&&U
                                                               g$kwd$20990$12l&&U)
                                                             (g$f$20985$12l&&U
                                                               (cdr g$cls*$20986$12l&&U)
                                                               (cons
                                                                 g$kwd$20990$12l&&U
                                                                 g$seen*$20987$12l&&U))))))
                                                      g$ls/false$20989$12l&&U)
                                                    ((case-lambda
                                                       ((g$t$20993$12l&&U)
                                                        ((case-lambda
                                                           ((g$ls/false$20994$12l&&U)
                                                            (if g$ls/false$20994$12l&&U
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$20995$12l&&U)
                                                                   (g$syntax-violation$19808$12l&&U
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$20995$12l&&U)))
                                                                g$ls/false$20994$12l&&U)
                                                              (g$syntax-violation$19808$12l&&U
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$20993$12l&&U))))
                                                         (g$syntax-dispatch$19689$12l&&U
                                                           g$t$20993$12l&&U
                                                           'any))))
                                                     g$t$20988$12l&&U))))
                                               (g$syntax-dispatch$19689$12l&&U
                                                 g$t$20988$12l&&U
                                                 '(any . any)))))
                                           (car g$cls*$20986$12l&&U))
                                          (void))))))
                            g$f$20985$12l&&U)
                          g$cls*$20982$12l&&U
                          '()))))))
          ((case-lambda
             ((g$t$20977$12l&&U)
              ((case-lambda
                 ((g$ls/false$20978$12l&&U)
                  (if g$ls/false$20978$12l&&U
                    (apply
                      (case-lambda
                        ((g$namespec$20979$12l&&U
                           g$clause*$20980$12l&&U)
                         (begin
                           (g$verify-clauses$20976$12l&&U
                             g$x$20959$12l&&U
                             g$clause*$20980$12l&&U)
                           (g$do-define-record$20975$12l&&U
                             g$namespec$20979$12l&&U
                             g$clause*$20980$12l&&U))))
                      g$ls/false$20978$12l&&U)
                    (g$syntax-violation$19808$12l&&U
                      '#f
                      '"invalid syntax"
                      g$t$20977$12l&&U))))
               (g$syntax-dispatch$19689$12l&&U
                 g$t$20977$12l&&U
                 '(_ any . each-any)))))
           g$x$20959$12l&&U)))))
   (g$define-condition-type-macro$19684$12l&&U
     g$define-condition-type-macro$23280$12l&&U
     (case-lambda
       ((g$x$21215$12l&&U)
        (letrec* ((g$mkname$21216$12l&&U
                    (case-lambda
                      ((g$name$21239$12l&&U g$suffix$21240$12l&&U)
                       (g$datum->syntax$19810$12l&&U
                         g$name$21239$12l&&U
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$19811$12l&&U
                                 g$name$21239$12l&&U))
                             g$suffix$21240$12l&&U)))))))
          ((case-lambda
             ((g$t$21217$12l&&U)
              ((case-lambda
                 ((g$ls/false$21218$12l&&U)
                  (if (if g$ls/false$21218$12l&&U
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$21219$12l&&U
                                 g$name$21220$12l&&U
                                 g$super$21221$12l&&U
                                 g$constructor$21222$12l&&U
                                 g$predicate$21223$12l&&U
                                 g$field*$21224$12l&&U
                                 g$accessor*$21225$12l&&U)
                               (if (g$id?$19191$12l&&U
                                     g$name$21220$12l&&U)
                                 (if (g$id?$19191$12l&&U
                                       g$super$21221$12l&&U)
                                   (if (g$id?$19191$12l&&U
                                         g$constructor$21222$12l&&U)
                                     (if (g$id?$19191$12l&&U
                                           g$predicate$21223$12l&&U)
                                       (if (g$for-all$11833$12l&&U
                                             g$id?$19191$12l&&U
                                             g$field*$21224$12l&&U)
                                         (begin
                                           '#f
                                           (g$for-all$11833$12l&&U
                                             g$id?$19191$12l&&U
                                             g$accessor*$21225$12l&&U))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$21218$12l&&U))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$21226$12l&&U
                           g$name$21227$12l&&U
                           g$super$21228$12l&&U
                           g$constructor$21229$12l&&U
                           g$predicate$21230$12l&&U
                           g$field*$21231$12l&&U
                           g$accessor*$21232$12l&&U)
                         ((case-lambda
                            ((g$aux-accessor*$21233$12l&&U)
                             (g$bless$19652$12l&&U
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$21227$12l&&U
                                         g$constructor$21229$12l&&U
                                         (gensym))
                                       (cons
                                         (list
                                           'parent
                                           g$super$21228$12l&&U)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$11835$12l&&U
                                               (case-lambda
                                                 ((g$field$21234$12l&&U
                                                    g$aux$21235$12l&&U)
                                                  (list
                                                    'immutable
                                                    g$field$21234$12l&&U
                                                    g$aux$21235$12l&&U)))
                                               g$field*$21231$12l&&U
                                               g$aux-accessor*$21233$12l&&U))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$21230$12l&&U
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$21227$12l&&U)))
                                     (g$map$11835$12l&&U
                                       (case-lambda
                                         ((g$accessor$21236$12l&&U
                                            g$aux$21237$12l&&U)
                                          (list
                                            'define
                                            g$accessor$21236$12l&&U
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$21227$12l&&U)
                                              g$aux$21237$12l&&U))))
                                       g$accessor*$21232$12l&&U
                                       g$aux-accessor*$21233$12l&&U)))))))
                          (g$map$11835$12l&&U
                            (case-lambda ((g$x$21238$12l&&U) (gensym)))
                            g$accessor*$21232$12l&&U))))
                      g$ls/false$21218$12l&&U)
                    (g$syntax-violation$19808$12l&&U
                      '#f
                      '"invalid syntax"
                      g$t$21217$12l&&U))))
               (g$syntax-dispatch$19689$12l&&U
                 g$t$21217$12l&&U
                 '(any any any any any . #(each (any any)))))))
           g$x$21215$12l&&U)))))
   (g$incorrect-usage-macro$19685$12l&&U
     g$incorrect-usage-macro$23281$12l&&U
     (case-lambda
       ((g$e$21241$12l&&U)
        (g$syntax-violation$19808$12l&&U
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$21241$12l&&U))))
   (g$parameterize-macro$19686$12l&&U
     g$parameterize-macro$23282$12l&&U
     (case-lambda
       ((g$e$21242$12l&&U)
        ((case-lambda
           ((g$t$21243$12l&&U)
            ((case-lambda
               ((g$ls/false$21244$12l&&U)
                (if g$ls/false$21244$12l&&U
                  (apply
                    (case-lambda
                      ((g$b$21245$12l&&U g$b*$21246$12l&&U)
                       (g$bless$19652$12l&&U
                         (cons
                           'let
                           (cons
                             '()
                             (cons
                               g$b$21245$12l&&U
                               g$b*$21246$12l&&U))))))
                    g$ls/false$21244$12l&&U)
                  ((case-lambda
                     ((g$t$21247$12l&&U)
                      ((case-lambda
                         ((g$ls/false$21248$12l&&U)
                          (if g$ls/false$21248$12l&&U
                            (apply
                              (case-lambda
                                ((g$olhs*$21249$12l&&U
                                   g$orhs*$21250$12l&&U
                                   g$b$21251$12l&&U
                                   g$b*$21252$12l&&U)
                                 ((case-lambda
                                    ((g$lhs*$21253$12l&&U
                                       g$rhs*$21254$12l&&U)
                                     (g$bless$19652$12l&&U
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$21253$12l&&U
                                             g$rhs*$21254$12l&&U)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$11835$12l&&U
                                                       (case-lambda
                                                         ((g$lhs$21255$12l&&U
                                                            g$rhs$21256$12l&&U)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$21255$12l&&U)))
                                                            (list
                                                              g$lhs$21255$12l&&U
                                                              g$rhs$21256$12l&&U)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$21256$12l&&U
                                                                '(t))))))
                                                       g$lhs*$21253$12l&&U
                                                       g$rhs*$21254$12l&&U)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$21251$12l&&U
                                                         g$b*$21252$12l&&U)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$21249$12l&&U
                                           g$orhs*$21250$12l&&U)))))
                                  (g$generate-temporaries$19798$12l&&U
                                    g$olhs*$21249$12l&&U)
                                  (g$generate-temporaries$19798$12l&&U
                                    g$orhs*$21250$12l&&U))))
                              g$ls/false$21248$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"invalid syntax"
                              g$t$21247$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$21247$12l&&U
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$21243$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$21243$12l&&U
               '(_ () any . each-any)))))
         g$e$21242$12l&&U))))
   (g$foreign-call-transformer$19687$12l&&U
     g$foreign-call-transformer$23283$12l&&U
     (case-lambda
       ((g$e$21257$12l&&U g$r$21258$12l&&U g$mr$21259$12l&&U)
        ((case-lambda
           ((g$t$21260$12l&&U)
            ((case-lambda
               ((g$ls/false$21261$12l&&U)
                (if g$ls/false$21261$12l&&U
                  (apply
                    (case-lambda
                      ((g$name$21262$12l&&U g$arg*$21263$12l&&U)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$19707$12l&&U
                             g$name$21262$12l&&U
                             g$r$21258$12l&&U
                             g$mr$21259$12l&&U)
                           (g$chi-expr*$19705$12l&&U
                             g$arg*$21263$12l&&U
                             g$r$21258$12l&&U
                             g$mr$21259$12l&&U)))))
                    g$ls/false$21261$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$21260$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$21260$12l&&U
               '(_ any . each-any)))))
         g$e$21257$12l&&U))))
   (g$convert-pattern$19688$12l&&U
     g$convert-pattern$23284$12l&&U
     (case-lambda
       ((g$pattern$21264$12l&&U g$keys$21265$12l&&U)
        (letrec* ((g$cvt*$21266$12l&&U
                    (case-lambda
                      ((g$p*$21346$12l&&U
                         g$n$21347$12l&&U
                         g$ids$21348$12l&&U)
                       (if (null? g$p*$21346$12l&&U)
                         (values '() g$ids$21348$12l&&U)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$21266$12l&&U
                                (cdr g$p*$21346$12l&&U)
                                g$n$21347$12l&&U
                                g$ids$21348$12l&&U)))
                           (case-lambda
                             ((g$y$21351$12l&&U g$ids$21352$12l&&U)
                              ((case-lambda
                                 ((g$ids$21353$12l&&U g$y$21354$12l&&U)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$21267$12l&&U
                                         (car g$p*$21346$12l&&U)
                                         g$n$21347$12l&&U
                                         g$ids$21353$12l&&U)))
                                    (case-lambda
                                      ((g$x$21357$12l&&U
                                         g$ids$21358$12l&&U)
                                       ((case-lambda
                                          ((g$ids$21359$12l&&U
                                             g$x$21360$12l&&U)
                                           (values
                                             (cons
                                               g$x$21360$12l&&U
                                               g$y$21354$12l&&U)
                                             g$ids$21359$12l&&U)))
                                        g$ids$21358$12l&&U
                                        g$x$21357$12l&&U))))))
                               g$ids$21352$12l&&U
                               g$y$21351$12l&&U))))))))
                  (g$cvt$21267$12l&&U
                    (case-lambda
                      ((g$p$21268$12l&&U
                         g$n$21269$12l&&U
                         g$ids$21270$12l&&U)
                       ((case-lambda
                          ((g$t$21271$12l&&U)
                           ((case-lambda
                              ((g$ls/false$21272$12l&&U)
                               (if (if g$ls/false$21272$12l&&U
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$21273$12l&&U)
                                            (g$id?$19191$12l&&U
                                              g$id$21273$12l&&U)))
                                         g$ls/false$21272$12l&&U))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$21274$12l&&U)
                                      (if (g$bound-id-member?$19198$12l&&U
                                            g$p$21268$12l&&U
                                            g$keys$21265$12l&&U)
                                        (values
                                          (vector
                                            'free-id
                                            g$p$21268$12l&&U)
                                          g$ids$21270$12l&&U)
                                        (if (g$free-id=?$19195$12l&&U
                                              g$p$21268$12l&&U
                                              (g$scheme-stx$19632$12l&&U
                                                '_))
                                          (values '_ g$ids$21270$12l&&U)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$21268$12l&&U
                                                g$n$21269$12l&&U)
                                              g$ids$21270$12l&&U))))))
                                   g$ls/false$21272$12l&&U)
                                 ((case-lambda
                                    ((g$t$21275$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$21276$12l&&U)
                                         (if (if g$ls/false$21276$12l&&U
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$21277$12l&&U
                                                        g$dots$21278$12l&&U)
                                                      (g$ellipsis?$19690$12l&&U
                                                        g$dots$21278$12l&&U)))
                                                   g$ls/false$21276$12l&&U))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$21279$12l&&U
                                                  g$dots$21280$12l&&U)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$21267$12l&&U
                                                       g$p$21279$12l&&U
                                                       (+ g$n$21269$12l&&U
                                                          '1)
                                                       g$ids$21270$12l&&U)))
                                                  (case-lambda
                                                    ((g$p$21283$12l&&U
                                                       g$ids$21284$12l&&U)
                                                     ((case-lambda
                                                        ((g$ids$21285$12l&&U
                                                           g$p$21286$12l&&U)
                                                         (values
                                                           (if (eq? g$p$21286$12l&&U
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$21286$12l&&U))
                                                           g$ids$21285$12l&&U)))
                                                      g$ids$21284$12l&&U
                                                      g$p$21283$12l&&U))))))
                                             g$ls/false$21276$12l&&U)
                                           ((case-lambda
                                              ((g$t$21287$12l&&U)
                                               ((case-lambda
                                                  ((g$ls/false$21288$12l&&U)
                                                   (if (if g$ls/false$21288$12l&&U
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$21289$12l&&U
                                                                  g$dots$21290$12l&&U
                                                                  g$ys$21291$12l&&U
                                                                  g$z$21292$12l&&U)
                                                                (g$ellipsis?$19690$12l&&U
                                                                  g$dots$21290$12l&&U)))
                                                             g$ls/false$21288$12l&&U))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$21293$12l&&U
                                                            g$dots$21294$12l&&U
                                                            g$ys$21295$12l&&U
                                                            g$z$21296$12l&&U)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$21267$12l&&U
                                                                 g$z$21296$12l&&U
                                                                 g$n$21269$12l&&U
                                                                 g$ids$21270$12l&&U)))
                                                            (case-lambda
                                                              ((g$z$21299$12l&&U
                                                                 g$ids$21300$12l&&U)
                                                               ((case-lambda
                                                                  ((g$ids$21301$12l&&U
                                                                     g$z$21302$12l&&U)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$21266$12l&&U
                                                                          g$ys$21295$12l&&U
                                                                          g$n$21269$12l&&U
                                                                          g$ids$21301$12l&&U)))
                                                                     (case-lambda
                                                                       ((g$ys$21305$12l&&U
                                                                          g$ids$21306$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$ids$21307$12l&&U
                                                                              g$ys$21308$12l&&U)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$21267$12l&&U
                                                                                   g$x$21293$12l&&U
                                                                                   (+ g$n$21269$12l&&U
                                                                                      '1)
                                                                                   g$ids$21307$12l&&U)))
                                                                              (case-lambda
                                                                                ((g$x$21311$12l&&U
                                                                                   g$ids$21312$12l&&U)
                                                                                 ((case-lambda
                                                                                    ((g$ids$21313$12l&&U
                                                                                       g$x$21314$12l&&U)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$21314$12l&&U
                                                                                         (g$reverse$12595$12l&&U
                                                                                           g$ys$21308$12l&&U)
                                                                                         g$z$21302$12l&&U)
                                                                                       g$ids$21313$12l&&U)))
                                                                                  g$ids$21312$12l&&U
                                                                                  g$x$21311$12l&&U))))))
                                                                         g$ids$21306$12l&&U
                                                                         g$ys$21305$12l&&U))))))
                                                                g$ids$21300$12l&&U
                                                                g$z$21299$12l&&U))))))
                                                       g$ls/false$21288$12l&&U)
                                                     ((case-lambda
                                                        ((g$t$21315$12l&&U)
                                                         ((case-lambda
                                                            ((g$ls/false$21316$12l&&U)
                                                             (if g$ls/false$21316$12l&&U
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$21317$12l&&U
                                                                      g$y$21318$12l&&U)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$21267$12l&&U
                                                                           g$y$21318$12l&&U
                                                                           g$n$21269$12l&&U
                                                                           g$ids$21270$12l&&U)))
                                                                      (case-lambda
                                                                        ((g$y$21321$12l&&U
                                                                           g$ids$21322$12l&&U)
                                                                         ((case-lambda
                                                                            ((g$ids$21323$12l&&U
                                                                               g$y$21324$12l&&U)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$21267$12l&&U
                                                                                    g$x$21317$12l&&U
                                                                                    g$n$21269$12l&&U
                                                                                    g$ids$21323$12l&&U)))
                                                                               (case-lambda
                                                                                 ((g$x$21327$12l&&U
                                                                                    g$ids$21328$12l&&U)
                                                                                  ((case-lambda
                                                                                     ((g$ids$21329$12l&&U
                                                                                        g$x$21330$12l&&U)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$21330$12l&&U
                                                                                          g$y$21324$12l&&U)
                                                                                        g$ids$21329$12l&&U)))
                                                                                   g$ids$21328$12l&&U
                                                                                   g$x$21327$12l&&U))))))
                                                                          g$ids$21322$12l&&U
                                                                          g$y$21321$12l&&U))))))
                                                                 g$ls/false$21316$12l&&U)
                                                               ((case-lambda
                                                                  ((g$t$21331$12l&&U)
                                                                   ((case-lambda
                                                                      ((g$ls/false$21332$12l&&U)
                                                                       (if g$ls/false$21332$12l&&U
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$21270$12l&&U)))
                                                                           g$ls/false$21332$12l&&U)
                                                                         ((case-lambda
                                                                            ((g$t$21333$12l&&U)
                                                                             ((case-lambda
                                                                                ((g$ls/false$21334$12l&&U)
                                                                                 (if (if g$ls/false$21334$12l&&U
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$21335$12l&&U)
                                                                                              (not (g$stx?$19163$12l&&U
                                                                                                     g$p$21335$12l&&U))))
                                                                                           g$ls/false$21334$12l&&U))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$21336$12l&&U)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$21267$12l&&U
                                                                                               g$p$21336$12l&&U
                                                                                               g$n$21269$12l&&U
                                                                                               g$ids$21270$12l&&U)))
                                                                                          (case-lambda
                                                                                            ((g$p$21339$12l&&U
                                                                                               g$ids$21340$12l&&U)
                                                                                             ((case-lambda
                                                                                                ((g$ids$21341$12l&&U
                                                                                                   g$p$21342$12l&&U)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$21342$12l&&U)
                                                                                                   g$ids$21341$12l&&U)))
                                                                                              g$ids$21340$12l&&U
                                                                                              g$p$21339$12l&&U))))))
                                                                                     g$ls/false$21334$12l&&U)
                                                                                   ((case-lambda
                                                                                      ((g$t$21343$12l&&U)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$21344$12l&&U)
                                                                                           (if g$ls/false$21344$12l&&U
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$21345$12l&&U)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$19202$12l&&U
                                                                                                        g$datum$21345$12l&&U))
                                                                                                    g$ids$21270$12l&&U)))
                                                                                               g$ls/false$21344$12l&&U)
                                                                                             (g$syntax-violation$19808$12l&&U
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$21343$12l&&U))))
                                                                                        (g$syntax-dispatch$19689$12l&&U
                                                                                          g$t$21343$12l&&U
                                                                                          'any))))
                                                                                    g$t$21333$12l&&U))))
                                                                              (g$syntax-dispatch$19689$12l&&U
                                                                                g$t$21333$12l&&U
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$21331$12l&&U))))
                                                                    (g$syntax-dispatch$19689$12l&&U
                                                                      g$t$21331$12l&&U
                                                                      '()))))
                                                                g$t$21315$12l&&U))))
                                                          (g$syntax-dispatch$19689$12l&&U
                                                            g$t$21315$12l&&U
                                                            '(any .
                                                                  any)))))
                                                      g$t$21287$12l&&U))))
                                                (g$syntax-dispatch$19689$12l&&U
                                                  g$t$21287$12l&&U
                                                  '(any any
                                                        .
                                                        #(each+
                                                          any
                                                          ()
                                                          any))))))
                                            g$t$21275$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$21275$12l&&U
                                        '(any any)))))
                                  g$t$21271$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$21271$12l&&U
                              'any))))
                        g$p$21268$12l&&U)))))
          (g$cvt$21267$12l&&U g$pattern$21264$12l&&U '0 '())))))
   (g$syntax-dispatch$19689$12l&&U
     g$syntax-dispatch$23285$12l&&U
     (case-lambda
       ((g$e$21361$12l&&U g$p$21362$12l&&U)
        (letrec* ((g$stx^$21363$12l&&U
                    (case-lambda
                      ((g$e$21471$12l&&U
                         g$m*$21472$12l&&U
                         g$s*$21473$12l&&U
                         g$ae*$21474$12l&&U)
                       (if (if (null? g$m*$21472$12l&&U)
                             (if (null? g$s*$21473$12l&&U)
                               (begin '#f (null? g$ae*$21474$12l&&U))
                               '#f)
                             '#f)
                         g$e$21471$12l&&U
                         (g$mkstx$19179$12l&&U
                           g$e$21471$12l&&U
                           g$m*$21472$12l&&U
                           g$s*$21473$12l&&U
                           g$ae*$21474$12l&&U)))))
                  (g$match-each$21364$12l&&U
                    (case-lambda
                      ((g$e$21455$12l&&U
                         g$p$21456$12l&&U
                         g$m*$21457$12l&&U
                         g$s*$21458$12l&&U
                         g$ae*$21459$12l&&U)
                       (if (pair? g$e$21455$12l&&U)
                         ((case-lambda
                            ((g$first$21460$12l&&U)
                             (if g$first$21460$12l&&U
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$21461$12l&&U)
                                     (if g$rest$21461$12l&&U
                                       (begin
                                         '#f
                                         (cons
                                           g$first$21460$12l&&U
                                           g$rest$21461$12l&&U))
                                       '#f)))
                                  (g$match-each$21364$12l&&U
                                    (cdr g$e$21455$12l&&U)
                                    g$p$21456$12l&&U
                                    g$m*$21457$12l&&U
                                    g$s*$21458$12l&&U
                                    g$ae*$21459$12l&&U)))
                               '#f)))
                          (g$match$21370$12l&&U
                            (car g$e$21455$12l&&U)
                            g$p$21456$12l&&U
                            g$m*$21457$12l&&U
                            g$s*$21458$12l&&U
                            g$ae*$21459$12l&&U
                            '()))
                         (if (null? g$e$21455$12l&&U)
                           '()
                           (if (g$stx?$19163$12l&&U g$e$21455$12l&&U)
                             (if (not (g$top-marked?$19125$12l&&U
                                        g$m*$21457$12l&&U))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$19178$12l&&U
                                        g$m*$21457$12l&&U
                                        g$s*$21458$12l&&U
                                        g$ae*$21459$12l&&U
                                        g$e$21455$12l&&U)))
                                   (case-lambda
                                     ((g$m*$21465$12l&&U
                                        g$s*$21466$12l&&U
                                        g$ae*$21467$12l&&U)
                                      ((case-lambda
                                         ((g$ae*$21468$12l&&U
                                            g$s*$21469$12l&&U
                                            g$m*$21470$12l&&U)
                                          (g$match-each$21364$12l&&U
                                            (g$stx-expr$19165$12l&&U
                                              g$e$21455$12l&&U)
                                            g$p$21456$12l&&U
                                            g$m*$21470$12l&&U
                                            g$s*$21469$12l&&U
                                            g$ae*$21468$12l&&U)))
                                       g$ae*$21467$12l&&U
                                       g$s*$21466$12l&&U
                                       g$m*$21465$12l&&U)))))
                               '#f)
                             (if (annotation? g$e$21455$12l&&U)
                               (g$match-each$21364$12l&&U
                                 (annotation-expression
                                   g$e$21455$12l&&U)
                                 g$p$21456$12l&&U
                                 g$m*$21457$12l&&U
                                 g$s*$21458$12l&&U
                                 g$ae*$21459$12l&&U)
                               '#f)))))))
                  (g$match-each+$21365$12l&&U
                    (case-lambda
                      ((g$e$21423$12l&&U
                         g$x-pat$21424$12l&&U
                         g$y-pat$21425$12l&&U
                         g$z-pat$21426$12l&&U
                         g$m*$21427$12l&&U
                         g$s*$21428$12l&&U
                         g$ae*$21429$12l&&U
                         g$r$21430$12l&&U)
                       ((letrec ((g$f$21431$12l&&U
                                   (case-lambda
                                     ((g$e$21432$12l&&U
                                        g$m*$21433$12l&&U
                                        g$s*$21434$12l&&U
                                        g$ae*$21435$12l&&U)
                                      (if (pair? g$e$21432$12l&&U)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$21431$12l&&U
                                               (cdr g$e$21432$12l&&U)
                                               g$m*$21433$12l&&U
                                               g$s*$21434$12l&&U
                                               g$ae*$21435$12l&&U)))
                                          (case-lambda
                                            ((g$xr*$21439$12l&&U
                                               g$y-pat$21440$12l&&U
                                               g$r$21441$12l&&U)
                                             ((case-lambda
                                                ((g$r$21442$12l&&U
                                                   g$y-pat$21443$12l&&U
                                                   g$xr*$21444$12l&&U)
                                                 (if g$r$21442$12l&&U
                                                   (if (null?
                                                         g$y-pat$21443$12l&&U)
                                                     ((case-lambda
                                                        ((g$xr$21445$12l&&U)
                                                         (if g$xr$21445$12l&&U
                                                           (values
                                                             (cons
                                                               g$xr$21445$12l&&U
                                                               g$xr*$21444$12l&&U)
                                                             g$y-pat$21443$12l&&U
                                                             g$r$21442$12l&&U)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$21370$12l&&U
                                                        (car g$e$21432$12l&&U)
                                                        g$x-pat$21424$12l&&U
                                                        g$m*$21433$12l&&U
                                                        g$s*$21434$12l&&U
                                                        g$ae*$21435$12l&&U
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$21443$12l&&U)
                                                       (g$match$21370$12l&&U
                                                         (car g$e$21432$12l&&U)
                                                         (car g$y-pat$21443$12l&&U)
                                                         g$m*$21433$12l&&U
                                                         g$s*$21434$12l&&U
                                                         g$ae*$21435$12l&&U
                                                         g$r$21442$12l&&U)))
                                                   (values
                                                     '#f
                                                     '#f
                                                     '#f))))
                                              g$r$21441$12l&&U
                                              g$y-pat$21440$12l&&U
                                              g$xr*$21439$12l&&U))))
                                        (if (g$stx?$19163$12l&&U
                                              g$e$21432$12l&&U)
                                          (if (g$top-marked?$19125$12l&&U
                                                g$m*$21433$12l&&U)
                                            (values
                                              '()
                                              g$y-pat$21425$12l&&U
                                              (g$match$21370$12l&&U
                                                g$e$21432$12l&&U
                                                g$z-pat$21426$12l&&U
                                                g$m*$21433$12l&&U
                                                g$s*$21434$12l&&U
                                                g$ae*$21435$12l&&U
                                                g$r$21430$12l&&U))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$19178$12l&&U
                                                   g$m*$21433$12l&&U
                                                   g$s*$21434$12l&&U
                                                   g$ae*$21435$12l&&U
                                                   g$e$21432$12l&&U)))
                                              (case-lambda
                                                ((g$m*$21449$12l&&U
                                                   g$s*$21450$12l&&U
                                                   g$ae*$21451$12l&&U)
                                                 ((case-lambda
                                                    ((g$ae*$21452$12l&&U
                                                       g$s*$21453$12l&&U
                                                       g$m*$21454$12l&&U)
                                                     (g$f$21431$12l&&U
                                                       (g$stx-expr$19165$12l&&U
                                                         g$e$21432$12l&&U)
                                                       g$m*$21454$12l&&U
                                                       g$s*$21453$12l&&U
                                                       g$ae*$21452$12l&&U)))
                                                  g$ae*$21451$12l&&U
                                                  g$s*$21450$12l&&U
                                                  g$m*$21449$12l&&U)))))
                                          (if (annotation?
                                                g$e$21432$12l&&U)
                                            (g$f$21431$12l&&U
                                              (annotation-expression
                                                g$e$21432$12l&&U)
                                              g$m*$21433$12l&&U
                                              g$s*$21434$12l&&U
                                              g$ae*$21435$12l&&U)
                                            (values
                                              '()
                                              g$y-pat$21425$12l&&U
                                              (g$match$21370$12l&&U
                                                g$e$21432$12l&&U
                                                g$z-pat$21426$12l&&U
                                                g$m*$21433$12l&&U
                                                g$s*$21434$12l&&U
                                                g$ae*$21435$12l&&U
                                                g$r$21430$12l&&U)))))))))
                          g$f$21431$12l&&U)
                        g$e$21423$12l&&U
                        g$m*$21427$12l&&U
                        g$s*$21428$12l&&U
                        g$ae*$21429$12l&&U))))
                  (g$match-each-any$21366$12l&&U
                    (case-lambda
                      ((g$e$21409$12l&&U
                         g$m*$21410$12l&&U
                         g$s*$21411$12l&&U
                         g$ae*$21412$12l&&U)
                       (if (pair? g$e$21409$12l&&U)
                         ((case-lambda
                            ((g$l$21413$12l&&U)
                             (if g$l$21413$12l&&U
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$21363$12l&&U
                                     (car g$e$21409$12l&&U)
                                     g$m*$21410$12l&&U
                                     g$s*$21411$12l&&U
                                     g$ae*$21412$12l&&U)
                                   g$l$21413$12l&&U))
                               '#f)))
                          (g$match-each-any$21366$12l&&U
                            (cdr g$e$21409$12l&&U)
                            g$m*$21410$12l&&U
                            g$s*$21411$12l&&U
                            g$ae*$21412$12l&&U))
                         (if (null? g$e$21409$12l&&U)
                           '()
                           (if (g$stx?$19163$12l&&U g$e$21409$12l&&U)
                             (if (not (g$top-marked?$19125$12l&&U
                                        g$m*$21410$12l&&U))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$19178$12l&&U
                                        g$m*$21410$12l&&U
                                        g$s*$21411$12l&&U
                                        g$ae*$21412$12l&&U
                                        g$e$21409$12l&&U)))
                                   (case-lambda
                                     ((g$m*$21417$12l&&U
                                        g$s*$21418$12l&&U
                                        g$ae*$21419$12l&&U)
                                      ((case-lambda
                                         ((g$ae*$21420$12l&&U
                                            g$s*$21421$12l&&U
                                            g$m*$21422$12l&&U)
                                          (g$match-each-any$21366$12l&&U
                                            (g$stx-expr$19165$12l&&U
                                              g$e$21409$12l&&U)
                                            g$m*$21422$12l&&U
                                            g$s*$21421$12l&&U
                                            g$ae*$21420$12l&&U)))
                                       g$ae*$21419$12l&&U
                                       g$s*$21418$12l&&U
                                       g$m*$21417$12l&&U)))))
                               '#f)
                             (if (annotation? g$e$21409$12l&&U)
                               (g$match-each-any$21366$12l&&U
                                 (annotation-expression
                                   g$e$21409$12l&&U)
                                 g$m*$21410$12l&&U
                                 g$s*$21411$12l&&U
                                 g$ae*$21412$12l&&U)
                               '#f)))))))
                  (g$match-empty$21367$12l&&U
                    (case-lambda
                      ((g$p$21406$12l&&U g$r$21407$12l&&U)
                       (if (null? g$p$21406$12l&&U)
                         g$r$21407$12l&&U
                         (if (eq? g$p$21406$12l&&U '_)
                           g$r$21407$12l&&U
                           (if (eq? g$p$21406$12l&&U 'any)
                             (cons '() g$r$21407$12l&&U)
                             (if (pair? g$p$21406$12l&&U)
                               (g$match-empty$21367$12l&&U
                                 (car g$p$21406$12l&&U)
                                 (g$match-empty$21367$12l&&U
                                   (cdr g$p$21406$12l&&U)
                                   g$r$21407$12l&&U))
                               (if (eq? g$p$21406$12l&&U 'each-any)
                                 (cons '() g$r$21407$12l&&U)
                                 ((case-lambda
                                    ((g$t$21408$12l&&U)
                                     (if (eqv? g$t$21408$12l&&U 'each)
                                       (g$match-empty$21367$12l&&U
                                         (g$vector-ref$12591$12l&&U
                                           g$p$21406$12l&&U
                                           '1)
                                         g$r$21407$12l&&U)
                                       (if (eqv?
                                             g$t$21408$12l&&U
                                             'each+)
                                         (g$match-empty$21367$12l&&U
                                           (g$vector-ref$12591$12l&&U
                                             g$p$21406$12l&&U
                                             '1)
                                           (g$match-empty$21367$12l&&U
                                             (g$reverse$12595$12l&&U
                                               (g$vector-ref$12591$12l&&U
                                                 g$p$21406$12l&&U
                                                 '2))
                                             (g$match-empty$21367$12l&&U
                                               (g$vector-ref$12591$12l&&U
                                                 g$p$21406$12l&&U
                                                 '3)
                                               g$r$21407$12l&&U)))
                                         (if (g$memv$11828$12l&&U
                                               g$t$21408$12l&&U
                                               '(free-id atom))
                                           g$r$21407$12l&&U
                                           (if (g$memv$11828$12l&&U
                                                 g$t$21408$12l&&U
                                                 '(scheme-id atom))
                                             g$r$21407$12l&&U
                                             (if (eqv?
                                                   g$t$21408$12l&&U
                                                   'vector)
                                               (g$match-empty$21367$12l&&U
                                                 (g$vector-ref$12591$12l&&U
                                                   g$p$21406$12l&&U
                                                   '1)
                                                 g$r$21407$12l&&U)
                                               (assertion-violation
                                                 'syntax-dispatch
                                                 '"invalid pattern"
                                                 g$p$21406$12l&&U))))))))
                                  (g$vector-ref$12591$12l&&U
                                    g$p$21406$12l&&U
                                    '0))))))))))
                  (g$combine$21368$12l&&U
                    (case-lambda
                      ((g$r*$21404$12l&&U g$r$21405$12l&&U)
                       (if (null? (car g$r*$21404$12l&&U))
                         g$r$21405$12l&&U
                         (cons
                           (g$map$11835$12l&&U car g$r*$21404$12l&&U)
                           (g$combine$21368$12l&&U
                             (g$map$11835$12l&&U cdr g$r*$21404$12l&&U)
                             g$r$21405$12l&&U))))))
                  (g$match*$21369$12l&&U
                    (case-lambda
                      ((g$e$21386$12l&&U
                         g$p$21387$12l&&U
                         g$m*$21388$12l&&U
                         g$s*$21389$12l&&U
                         g$ae*$21390$12l&&U
                         g$r$21391$12l&&U)
                       (if (null? g$p$21387$12l&&U)
                         (if (null? g$e$21386$12l&&U)
                           (begin '#f g$r$21391$12l&&U)
                           '#f)
                         (if (pair? g$p$21387$12l&&U)
                           (if (pair? g$e$21386$12l&&U)
                             (begin
                               '#f
                               (g$match$21370$12l&&U
                                 (car g$e$21386$12l&&U)
                                 (car g$p$21387$12l&&U)
                                 g$m*$21388$12l&&U
                                 g$s*$21389$12l&&U
                                 g$ae*$21390$12l&&U
                                 (g$match$21370$12l&&U
                                   (cdr g$e$21386$12l&&U)
                                   (cdr g$p$21387$12l&&U)
                                   g$m*$21388$12l&&U
                                   g$s*$21389$12l&&U
                                   g$ae*$21390$12l&&U
                                   g$r$21391$12l&&U)))
                             '#f)
                           (if (eq? g$p$21387$12l&&U 'each-any)
                             ((case-lambda
                                ((g$l$21392$12l&&U)
                                 (if g$l$21392$12l&&U
                                   (begin
                                     '#f
                                     (cons
                                       g$l$21392$12l&&U
                                       g$r$21391$12l&&U))
                                   '#f)))
                              (g$match-each-any$21366$12l&&U
                                g$e$21386$12l&&U
                                g$m*$21388$12l&&U
                                g$s*$21389$12l&&U
                                g$ae*$21390$12l&&U))
                             ((case-lambda
                                ((g$t$21393$12l&&U)
                                 (if (eqv? g$t$21393$12l&&U 'each)
                                   (if (null? g$e$21386$12l&&U)
                                     (g$match-empty$21367$12l&&U
                                       (g$vector-ref$12591$12l&&U
                                         g$p$21387$12l&&U
                                         '1)
                                       g$r$21391$12l&&U)
                                     ((case-lambda
                                        ((g$r*$21394$12l&&U)
                                         (if g$r*$21394$12l&&U
                                           (begin
                                             '#f
                                             (g$combine$21368$12l&&U
                                               g$r*$21394$12l&&U
                                               g$r$21391$12l&&U))
                                           '#f)))
                                      (g$match-each$21364$12l&&U
                                        g$e$21386$12l&&U
                                        (g$vector-ref$12591$12l&&U
                                          g$p$21387$12l&&U
                                          '1)
                                        g$m*$21388$12l&&U
                                        g$s*$21389$12l&&U
                                        g$ae*$21390$12l&&U)))
                                   (if (eqv? g$t$21393$12l&&U 'free-id)
                                     (if (g$symbol?$12579$12l&&U
                                           g$e$21386$12l&&U)
                                       (if (g$top-marked?$19125$12l&&U
                                             g$m*$21388$12l&&U)
                                         (if (g$free-id=?$19195$12l&&U
                                               (g$stx^$21363$12l&&U
                                                 g$e$21386$12l&&U
                                                 g$m*$21388$12l&&U
                                                 g$s*$21389$12l&&U
                                                 g$ae*$21390$12l&&U)
                                               (g$vector-ref$12591$12l&&U
                                                 g$p$21387$12l&&U
                                                 '1))
                                           (begin '#f g$r$21391$12l&&U)
                                           '#f)
                                         '#f)
                                       '#f)
                                     (if (eqv?
                                           g$t$21393$12l&&U
                                           'scheme-id)
                                       (if (g$symbol?$12579$12l&&U
                                             g$e$21386$12l&&U)
                                         (if (g$top-marked?$19125$12l&&U
                                               g$m*$21388$12l&&U)
                                           (if (g$free-id=?$19195$12l&&U
                                                 (g$stx^$21363$12l&&U
                                                   g$e$21386$12l&&U
                                                   g$m*$21388$12l&&U
                                                   g$s*$21389$12l&&U
                                                   g$ae*$21390$12l&&U)
                                                 (g$scheme-stx$19632$12l&&U
                                                   (g$vector-ref$12591$12l&&U
                                                     g$p$21387$12l&&U
                                                     '1)))
                                             (begin
                                               '#f
                                               g$r$21391$12l&&U)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (eqv?
                                             g$t$21393$12l&&U
                                             'each+)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$match-each+$21365$12l&&U
                                                g$e$21386$12l&&U
                                                (g$vector-ref$12591$12l&&U
                                                  g$p$21387$12l&&U
                                                  '1)
                                                (g$vector-ref$12591$12l&&U
                                                  g$p$21387$12l&&U
                                                  '2)
                                                (g$vector-ref$12591$12l&&U
                                                  g$p$21387$12l&&U
                                                  '3)
                                                g$m*$21388$12l&&U
                                                g$s*$21389$12l&&U
                                                g$ae*$21390$12l&&U
                                                g$r$21391$12l&&U)))
                                           (case-lambda
                                             ((g$xr*$21398$12l&&U
                                                g$y-pat$21399$12l&&U
                                                g$r$21400$12l&&U)
                                              ((case-lambda
                                                 ((g$r$21401$12l&&U
                                                    g$y-pat$21402$12l&&U
                                                    g$xr*$21403$12l&&U)
                                                  (if g$r$21401$12l&&U
                                                    (if (null?
                                                          g$y-pat$21402$12l&&U)
                                                      (begin
                                                        '#f
                                                        (if (null?
                                                              g$xr*$21403$12l&&U)
                                                          (g$match-empty$21367$12l&&U
                                                            (g$vector-ref$12591$12l&&U
                                                              g$p$21387$12l&&U
                                                              '1)
                                                            g$r$21401$12l&&U)
                                                          (g$combine$21368$12l&&U
                                                            g$xr*$21403$12l&&U
                                                            g$r$21401$12l&&U)))
                                                      '#f)
                                                    '#f)))
                                               g$r$21400$12l&&U
                                               g$y-pat$21399$12l&&U
                                               g$xr*$21398$12l&&U))))
                                         (if (eqv?
                                               g$t$21393$12l&&U
                                               'atom)
                                           (if (equal?
                                                 (g$vector-ref$12591$12l&&U
                                                   g$p$21387$12l&&U
                                                   '1)
                                                 (g$strip$19201$12l&&U
                                                   g$e$21386$12l&&U
                                                   g$m*$21388$12l&&U))
                                             (begin
                                               '#f
                                               g$r$21391$12l&&U)
                                             '#f)
                                           (if (eqv?
                                                 g$t$21393$12l&&U
                                                 'vector)
                                             (if (g$vector?$12577$12l&&U
                                                   g$e$21386$12l&&U)
                                               (begin
                                                 '#f
                                                 (g$match$21370$12l&&U
                                                   (vector->list
                                                     g$e$21386$12l&&U)
                                                   (g$vector-ref$12591$12l&&U
                                                     g$p$21387$12l&&U
                                                     '1)
                                                   g$m*$21388$12l&&U
                                                   g$s*$21389$12l&&U
                                                   g$ae*$21390$12l&&U
                                                   g$r$21391$12l&&U))
                                               '#f)
                                             (assertion-violation
                                               'syntax-dispatch
                                               '"invalid pattern"
                                               g$p$21387$12l&&U)))))))))
                              (g$vector-ref$12591$12l&&U
                                g$p$21387$12l&&U
                                '0))))))))
                  (g$match$21370$12l&&U
                    (case-lambda
                      ((g$e$21371$12l&&U
                         g$p$21372$12l&&U
                         g$m*$21373$12l&&U
                         g$s*$21374$12l&&U
                         g$ae*$21375$12l&&U
                         g$r$21376$12l&&U)
                       (if (not g$r$21376$12l&&U)
                         '#f
                         (if (eq? g$p$21372$12l&&U '_)
                           g$r$21376$12l&&U
                           (if (eq? g$p$21372$12l&&U 'any)
                             (cons
                               (g$stx^$21363$12l&&U
                                 g$e$21371$12l&&U
                                 g$m*$21373$12l&&U
                                 g$s*$21374$12l&&U
                                 g$ae*$21375$12l&&U)
                               g$r$21376$12l&&U)
                             (if (g$stx?$19163$12l&&U g$e$21371$12l&&U)
                               (if (not (g$top-marked?$19125$12l&&U
                                          g$m*$21373$12l&&U))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$19178$12l&&U
                                          g$m*$21373$12l&&U
                                          g$s*$21374$12l&&U
                                          g$ae*$21375$12l&&U
                                          g$e$21371$12l&&U)))
                                     (case-lambda
                                       ((g$m*$21380$12l&&U
                                          g$s*$21381$12l&&U
                                          g$ae*$21382$12l&&U)
                                        ((case-lambda
                                           ((g$ae*$21383$12l&&U
                                              g$s*$21384$12l&&U
                                              g$m*$21385$12l&&U)
                                            (g$match$21370$12l&&U
                                              (g$stx-expr$19165$12l&&U
                                                g$e$21371$12l&&U)
                                              g$p$21372$12l&&U
                                              g$m*$21385$12l&&U
                                              g$s*$21384$12l&&U
                                              g$ae*$21383$12l&&U
                                              g$r$21376$12l&&U)))
                                         g$ae*$21382$12l&&U
                                         g$s*$21381$12l&&U
                                         g$m*$21380$12l&&U)))))
                                 '#f)
                               (if (annotation? g$e$21371$12l&&U)
                                 (g$match$21370$12l&&U
                                   (annotation-expression
                                     g$e$21371$12l&&U)
                                   g$p$21372$12l&&U
                                   g$m*$21373$12l&&U
                                   g$s*$21374$12l&&U
                                   g$ae*$21375$12l&&U
                                   g$r$21376$12l&&U)
                                 (g$match*$21369$12l&&U
                                   g$e$21371$12l&&U
                                   g$p$21372$12l&&U
                                   g$m*$21373$12l&&U
                                   g$s*$21374$12l&&U
                                   g$ae*$21375$12l&&U
                                   g$r$21376$12l&&U))))))))))
          (g$match$21370$12l&&U
            g$e$21361$12l&&U
            g$p$21362$12l&&U
            '()
            '()
            '()
            '())))))
   (g$ellipsis?$19690$12l&&U
     g$ellipsis?$23286$12l&&U
     (case-lambda
       ((g$x$21475$12l&&U)
        (if (g$id?$19191$12l&&U g$x$21475$12l&&U)
          (begin
            '#f
            (g$free-id=?$19195$12l&&U
              g$x$21475$12l&&U
              (g$scheme-stx$19632$12l&&U '...)))
          '#f))))
   (g$underscore?$19691$12l&&U
     g$underscore?$23287$12l&&U
     (case-lambda
       ((g$x$21476$12l&&U)
        (if (g$id?$19191$12l&&U g$x$21476$12l&&U)
          (begin
            '#f
            (g$free-id=?$19195$12l&&U
              g$x$21476$12l&&U
              (g$scheme-stx$19632$12l&&U '_)))
          '#f))))
   (g$verify-literals$19692$12l&&U
     g$verify-literals$23288$12l&&U
     (case-lambda
       ((g$lits$21477$12l&&U g$expr$21478$12l&&U)
        (g$for-each$11836$12l&&U
          (case-lambda
            ((g$x$21479$12l&&U)
             (if ((case-lambda
                    ((g$t$21480$12l&&U)
                     (if g$t$21480$12l&&U
                       g$t$21480$12l&&U
                       ((case-lambda
                          ((g$t$21481$12l&&U)
                           (if g$t$21481$12l&&U
                             g$t$21481$12l&&U
                             (begin
                               '#f
                               (g$underscore?$19691$12l&&U
                                 g$x$21479$12l&&U)))))
                        (g$ellipsis?$19690$12l&&U g$x$21479$12l&&U)))))
                  (not (g$id?$19191$12l&&U g$x$21479$12l&&U)))
               (g$syntax-violation$19808$12l&&U
                 '#f
                 '"invalid literal"
                 g$expr$21478$12l&&U
                 g$x$21479$12l&&U)
               (void))))
          g$lits$21477$12l&&U))))
   (g$syntax-case-transformer$19693$12l&&U
     g$syntax-case-transformer$23289$12l&&U
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$21482$12l&&U
                     (case-lambda
                       ((g$pvars$21539$12l&&U
                          g$expr$21540$12l&&U
                          g$y$21541$12l&&U
                          g$r$21542$12l&&U
                          g$mr$21543$12l&&U)
                        ((case-lambda
                           ((g$ids$21544$12l&&U g$levels$21545$12l&&U)
                            ((case-lambda
                               ((g$labels$21546$12l&&U
                                  g$new-vars$21547$12l&&U)
                                ((case-lambda
                                   ((g$body$21548$12l&&U)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$19113$12l&&U
                                        '#f
                                        g$new-vars$21547$12l&&U
                                        g$body$21548$12l&&U)
                                      g$y$21541$12l&&U)))
                                 (g$chi-expr$19707$12l&&U
                                   (g$add-subst$19181$12l&&U
                                     (g$make-full-rib$19157$12l&&U
                                       g$ids$21544$12l&&U
                                       g$labels$21546$12l&&U)
                                     g$expr$21540$12l&&U)
                                   (append
                                     (g$map$11835$12l&&U
                                       (case-lambda
                                         ((g$label$21549$12l&&U
                                            g$var$21550$12l&&U
                                            g$level$21551$12l&&U)
                                          (cons
                                            g$label$21549$12l&&U
                                            (g$make-binding$19207$12l&&U
                                              'syntax
                                              (cons
                                                g$var$21550$12l&&U
                                                g$level$21551$12l&&U)))))
                                       g$labels$21546$12l&&U
                                       g$new-vars$21547$12l&&U
                                       (g$map$11835$12l&&U
                                         cdr
                                         g$pvars$21539$12l&&U))
                                     g$r$21542$12l&&U)
                                   g$mr$21543$12l&&U))))
                             (g$map$11835$12l&&U
                               g$gen-label$19128$12l&&U
                               g$ids$21544$12l&&U)
                             (g$map$11835$12l&&U
                               g$gen-lexical$19126$12l&&U
                               g$ids$21544$12l&&U))))
                         (g$map$11835$12l&&U car g$pvars$21539$12l&&U)
                         (g$map$11835$12l&&U
                           cdr
                           g$pvars$21539$12l&&U)))))
                   (g$invalid-ids-error$21483$12l&&U
                     (case-lambda
                       ((g$id*$21533$12l&&U
                          g$e$21534$12l&&U
                          g$class$21535$12l&&U)
                        ((letrec ((g$find$21536$12l&&U
                                    (case-lambda
                                      ((g$id*$21537$12l&&U
                                         g$ok*$21538$12l&&U)
                                       (if (null? g$id*$21537$12l&&U)
                                         (g$syntax-violation$19808$12l&&U
                                           '#f
                                           '"invalid syntax"
                                           g$e$21534$12l&&U)
                                         (if (g$id?$19191$12l&&U
                                               (car g$id*$21537$12l&&U))
                                           (if (g$bound-id-member?$19198$12l&&U
                                                 (car g$id*$21537$12l&&U)
                                                 g$ok*$21538$12l&&U)
                                             (g$syntax-error$19805$12l&&U
                                               (car g$id*$21537$12l&&U)
                                               '"duplicate "
                                               g$class$21535$12l&&U)
                                             (g$find$21536$12l&&U
                                               (cdr g$id*$21537$12l&&U)
                                               (cons
                                                 (car g$id*$21537$12l&&U)
                                                 g$ok*$21538$12l&&U)))
                                           (g$syntax-error$19805$12l&&U
                                             (car g$id*$21537$12l&&U)
                                             '"invalid "
                                             g$class$21535$12l&&U)))))))
                           g$find$21536$12l&&U)
                         g$id*$21533$12l&&U
                         '()))))
                   (g$gen-clause$21484$12l&&U
                     (case-lambda
                       ((g$x$21513$12l&&U
                          g$keys$21514$12l&&U
                          g$clauses$21515$12l&&U
                          g$r$21516$12l&&U
                          g$mr$21517$12l&&U
                          g$pat$21518$12l&&U
                          g$fender$21519$12l&&U
                          g$expr$21520$12l&&U)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$19688$12l&&U
                               g$pat$21518$12l&&U
                               g$keys$21514$12l&&U)))
                          (case-lambda
                            ((g$p$21523$12l&&U g$pvars$21524$12l&&U)
                             ((case-lambda
                                ((g$pvars$21525$12l&&U g$p$21526$12l&&U)
                                 (if (not (g$distinct-bound-ids?$19197$12l&&U
                                            (g$map$11835$12l&&U
                                              car
                                              g$pvars$21525$12l&&U)))
                                   (g$invalid-ids-error$21483$12l&&U
                                     (g$map$11835$12l&&U
                                       car
                                       g$pvars$21525$12l&&U)
                                     g$pat$21518$12l&&U
                                     '"pattern variable")
                                   (if (not (g$for-all$11833$12l&&U
                                              (case-lambda
                                                ((g$x$21527$12l&&U)
                                                 (not (g$ellipsis?$19690$12l&&U
                                                        (car g$x$21527$12l&&U)))))
                                              g$pvars$21525$12l&&U))
                                     (g$syntax-violation$19808$12l&&U
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$21518$12l&&U)
                                     ((case-lambda
                                        ((g$y$21528$12l&&U)
                                         ((case-lambda
                                            ((g$test$21529$12l&&U)
                                             ((case-lambda
                                                ((g$conseq$21530$12l&&U)
                                                 ((case-lambda
                                                    ((g$altern$21531$12l&&U)
                                                     (list
                                                       (g$build-lambda$19113$12l&&U
                                                         '#f
                                                         (list
                                                           g$y$21528$12l&&U)
                                                         (list
                                                           'if
                                                           g$test$21529$12l&&U
                                                           g$conseq$21530$12l&&U
                                                           g$altern$21531$12l&&U))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$21513$12l&&U
                                                         (list
                                                           'quote
                                                           g$p$21526$12l&&U)))))
                                                  (g$gen-syntax-case$21485$12l&&U
                                                    g$x$21513$12l&&U
                                                    g$keys$21514$12l&&U
                                                    g$clauses$21515$12l&&U
                                                    g$r$21516$12l&&U
                                                    g$mr$21517$12l&&U))))
                                              (g$build-dispatch-call$21482$12l&&U
                                                g$pvars$21525$12l&&U
                                                g$expr$21520$12l&&U
                                                g$y$21528$12l&&U
                                                g$r$21516$12l&&U
                                                g$mr$21517$12l&&U))))
                                          (if (eq? g$fender$21519$12l&&U
                                                   '#t)
                                            g$y$21528$12l&&U
                                            ((case-lambda
                                               ((g$call$21532$12l&&U)
                                                (list
                                                  'if
                                                  g$y$21528$12l&&U
                                                  g$call$21532$12l&&U
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$21482$12l&&U
                                               g$pvars$21525$12l&&U
                                               g$fender$21519$12l&&U
                                               g$y$21528$12l&&U
                                               g$r$21516$12l&&U
                                               g$mr$21517$12l&&U))))))
                                      (g$gen-lexical$19126$12l&&U
                                        'tmp))))))
                              g$pvars$21524$12l&&U
                              g$p$21523$12l&&U)))))))
                   (g$gen-syntax-case$21485$12l&&U
                     (case-lambda
                       ((g$x$21496$12l&&U
                          g$keys$21497$12l&&U
                          g$clauses$21498$12l&&U
                          g$r$21499$12l&&U
                          g$mr$21500$12l&&U)
                        (if (null? g$clauses$21498$12l&&U)
                          (list
                            '(primitive syntax-error)
                            g$x$21496$12l&&U)
                          ((case-lambda
                             ((g$t$21501$12l&&U)
                              ((case-lambda
                                 ((g$ls/false$21502$12l&&U)
                                  (if g$ls/false$21502$12l&&U
                                    (apply
                                      (case-lambda
                                        ((g$pat$21503$12l&&U
                                           g$expr$21504$12l&&U)
                                         (if (if (g$id?$19191$12l&&U
                                                   g$pat$21503$12l&&U)
                                               (if (not (g$bound-id-member?$19198$12l&&U
                                                          g$pat$21503$12l&&U
                                                          g$keys$21497$12l&&U))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$19690$12l&&U
                                                          g$pat$21503$12l&&U)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$19195$12l&&U
                                                 g$pat$21503$12l&&U
                                                 (g$scheme-stx$19632$12l&&U
                                                   '_))
                                             (g$chi-expr$19707$12l&&U
                                               g$expr$21504$12l&&U
                                               g$r$21499$12l&&U
                                               g$mr$21500$12l&&U)
                                             ((case-lambda
                                                ((g$lab$21505$12l&&U
                                                   g$lex$21506$12l&&U)
                                                 ((case-lambda
                                                    ((g$body$21507$12l&&U)
                                                     (list
                                                       (g$build-lambda$19113$12l&&U
                                                         '#f
                                                         (list
                                                           g$lex$21506$12l&&U)
                                                         g$body$21507$12l&&U)
                                                       g$x$21496$12l&&U)))
                                                  (g$chi-expr$19707$12l&&U
                                                    (g$add-subst$19181$12l&&U
                                                      (g$make-full-rib$19157$12l&&U
                                                        (list
                                                          g$pat$21503$12l&&U)
                                                        (list
                                                          g$lab$21505$12l&&U))
                                                      g$expr$21504$12l&&U)
                                                    (cons
                                                      (cons
                                                        g$lab$21505$12l&&U
                                                        (g$make-binding$19207$12l&&U
                                                          'syntax
                                                          (cons
                                                            g$lex$21506$12l&&U
                                                            '0)))
                                                      g$r$21499$12l&&U)
                                                    g$mr$21500$12l&&U))))
                                              (g$gen-label$19128$12l&&U
                                                g$pat$21503$12l&&U)
                                              (g$gen-lexical$19126$12l&&U
                                                g$pat$21503$12l&&U)))
                                           (g$gen-clause$21484$12l&&U
                                             g$x$21496$12l&&U
                                             g$keys$21497$12l&&U
                                             (cdr g$clauses$21498$12l&&U)
                                             g$r$21499$12l&&U
                                             g$mr$21500$12l&&U
                                             g$pat$21503$12l&&U
                                             '#t
                                             g$expr$21504$12l&&U))))
                                      g$ls/false$21502$12l&&U)
                                    ((case-lambda
                                       ((g$t$21508$12l&&U)
                                        ((case-lambda
                                           ((g$ls/false$21509$12l&&U)
                                            (if g$ls/false$21509$12l&&U
                                              (apply
                                                (case-lambda
                                                  ((g$pat$21510$12l&&U
                                                     g$fender$21511$12l&&U
                                                     g$expr$21512$12l&&U)
                                                   (g$gen-clause$21484$12l&&U
                                                     g$x$21496$12l&&U
                                                     g$keys$21497$12l&&U
                                                     (cdr g$clauses$21498$12l&&U)
                                                     g$r$21499$12l&&U
                                                     g$mr$21500$12l&&U
                                                     g$pat$21510$12l&&U
                                                     g$fender$21511$12l&&U
                                                     g$expr$21512$12l&&U)))
                                                g$ls/false$21509$12l&&U)
                                              (g$syntax-violation$19808$12l&&U
                                                '#f
                                                '"invalid syntax"
                                                g$t$21508$12l&&U))))
                                         (g$syntax-dispatch$19689$12l&&U
                                           g$t$21508$12l&&U
                                           '(any any any)))))
                                     g$t$21501$12l&&U))))
                               (g$syntax-dispatch$19689$12l&&U
                                 g$t$21501$12l&&U
                                 '(any any)))))
                           (car g$clauses$21498$12l&&U)))))))
           (case-lambda
             ((g$e$21486$12l&&U g$r$21487$12l&&U g$mr$21488$12l&&U)
              ((case-lambda
                 ((g$t$21489$12l&&U)
                  ((case-lambda
                     ((g$ls/false$21490$12l&&U)
                      (if g$ls/false$21490$12l&&U
                        (apply
                          (case-lambda
                            ((g$expr$21491$12l&&U
                               g$keys$21492$12l&&U
                               g$clauses$21493$12l&&U)
                             (begin
                               (g$verify-literals$19692$12l&&U
                                 g$keys$21492$12l&&U
                                 g$e$21486$12l&&U)
                               ((case-lambda
                                  ((g$x$21494$12l&&U)
                                   ((case-lambda
                                      ((g$body$21495$12l&&U)
                                       (list
                                         (g$build-lambda$19113$12l&&U
                                           '#f
                                           (list g$x$21494$12l&&U)
                                           g$body$21495$12l&&U)
                                         (g$chi-expr$19707$12l&&U
                                           g$expr$21491$12l&&U
                                           g$r$21487$12l&&U
                                           g$mr$21488$12l&&U))))
                                    (g$gen-syntax-case$21485$12l&&U
                                      g$x$21494$12l&&U
                                      g$keys$21492$12l&&U
                                      g$clauses$21493$12l&&U
                                      g$r$21487$12l&&U
                                      g$mr$21488$12l&&U))))
                                (g$gen-lexical$19126$12l&&U 'tmp)))))
                          g$ls/false$21490$12l&&U)
                        (g$syntax-violation$19808$12l&&U
                          '#f
                          '"invalid syntax"
                          g$t$21489$12l&&U))))
                   (g$syntax-dispatch$19689$12l&&U
                     g$t$21489$12l&&U
                     '(_ any each-any . each-any)))))
               g$e$21486$12l&&U))))))))
   (g$ellipsis-map$19694$12l&&U
     g$ellipsis-map$23290$12l&&U
     (case-lambda
       ((g$proc$21552$12l&&U g$ls$21553$12l&&U . g$ls*$21554$12l&&U)
        (letrec* ((g$who$21555$12l&&U '...))
          (begin
            (if (not (list? g$ls$21553$12l&&U))
              (assertion-violation
                g$who$21555$12l&&U
                '"not a list"
                g$ls$21553$12l&&U)
              (void))
            (if (not (null? g$ls*$21554$12l&&U))
              ((case-lambda
                 ((g$n$21556$12l&&U)
                  (g$for-each$11836$12l&&U
                    (case-lambda
                      ((g$x$21557$12l&&U)
                       (begin
                         (if (not (list? g$x$21557$12l&&U))
                           (assertion-violation
                             g$who$21555$12l&&U
                             '"not a list"
                             g$x$21557$12l&&U)
                           (void))
                         (if (not (= (length g$x$21557$12l&&U)
                                     g$n$21556$12l&&U))
                           (assertion-violation
                             g$who$21555$12l&&U
                             '"length mismatch"
                             g$ls$21553$12l&&U
                             g$x$21557$12l&&U)
                           (void)))))
                    g$ls*$21554$12l&&U)))
               (length g$ls$21553$12l&&U))
              (void))
            (apply
              g$map$11835$12l&&U
              g$proc$21552$12l&&U
              g$ls$21553$12l&&U
              g$ls*$21554$12l&&U))))))
   (g$syntax-transformer$19695$12l&&U
     g$syntax-transformer$23291$12l&&U
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$21558$12l&&U
                     (case-lambda
                       ((g$src$21618$12l&&U
                          g$e$21619$12l&&U
                          g$r$21620$12l&&U
                          g$maps$21621$12l&&U
                          g$ellipsis?$21622$12l&&U
                          g$vec?$21623$12l&&U)
                        ((case-lambda
                           ((g$t$21624$12l&&U)
                            ((case-lambda
                               ((g$ls/false$21625$12l&&U)
                                (if (if g$ls/false$21625$12l&&U
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$21626$12l&&U)
                                             (g$ellipsis?$21622$12l&&U
                                               g$dots$21626$12l&&U)))
                                          g$ls/false$21625$12l&&U))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$21627$12l&&U)
                                       (g$syntax-violation$19808$12l&&U
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$21618$12l&&U)))
                                    g$ls/false$21625$12l&&U)
                                  ((case-lambda
                                     ((g$t$21628$12l&&U)
                                      ((case-lambda
                                         ((g$ls/false$21629$12l&&U)
                                          (if (if g$ls/false$21629$12l&&U
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$21630$12l&&U)
                                                       (g$id?$19191$12l&&U
                                                         g$id$21630$12l&&U)))
                                                    g$ls/false$21629$12l&&U))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$21631$12l&&U)
                                                 ((case-lambda
                                                    ((g$label$21632$12l&&U)
                                                     ((case-lambda
                                                        ((g$b$21633$12l&&U)
                                                         (if (eq? (g$binding-type$19208$12l&&U
                                                                    g$b$21633$12l&&U)
                                                                  'syntax)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$var.lev$21636$12l&&U)
                                                                    (g$gen-ref$21559$12l&&U
                                                                      g$src$21618$12l&&U
                                                                      (car g$var.lev$21636$12l&&U)
                                                                      (cdr g$var.lev$21636$12l&&U)
                                                                      g$maps$21621$12l&&U)))
                                                                 (g$binding-value$19209$12l&&U
                                                                   g$b$21633$12l&&U))))
                                                             (case-lambda
                                                               ((g$var$21637$12l&&U
                                                                  g$maps$21638$12l&&U)
                                                                ((case-lambda
                                                                   ((g$maps$21639$12l&&U
                                                                      g$var$21640$12l&&U)
                                                                    (values
                                                                      (list
                                                                        'ref
                                                                        g$var$21640$12l&&U)
                                                                      g$maps$21639$12l&&U)))
                                                                 g$maps$21638$12l&&U
                                                                 g$var$21637$12l&&U))))
                                                           (values
                                                             (list
                                                               'quote
                                                               g$e$21619$12l&&U)
                                                             g$maps$21621$12l&&U))))
                                                      (g$label->binding$19206$12l&&U
                                                        g$label$21632$12l&&U
                                                        g$r$21620$12l&&U))))
                                                  (g$id->label$19204$12l&&U
                                                    g$e$21619$12l&&U))))
                                              g$ls/false$21629$12l&&U)
                                            ((case-lambda
                                               ((g$t$21641$12l&&U)
                                                ((case-lambda
                                                   ((g$ls/false$21642$12l&&U)
                                                    (if (if g$ls/false$21642$12l&&U
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$21643$12l&&U
                                                                   g$e$21644$12l&&U)
                                                                 (g$ellipsis?$21622$12l&&U
                                                                   g$dots$21643$12l&&U)))
                                                              g$ls/false$21642$12l&&U))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$21645$12l&&U
                                                             g$e$21646$12l&&U)
                                                           (if g$vec?$21623$12l&&U
                                                             (g$syntax-violation$19808$12l&&U
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$21618$12l&&U)
                                                             (g$gen-syntax$21558$12l&&U
                                                               g$src$21618$12l&&U
                                                               g$e$21646$12l&&U
                                                               g$r$21620$12l&&U
                                                               g$maps$21621$12l&&U
                                                               (case-lambda
                                                                 ((g$x$21647$12l&&U)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$21642$12l&&U)
                                                      ((case-lambda
                                                         ((g$t$21648$12l&&U)
                                                          ((case-lambda
                                                             ((g$ls/false$21649$12l&&U)
                                                              (if (if g$ls/false$21649$12l&&U
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$21650$12l&&U
                                                                             g$dots$21651$12l&&U
                                                                             g$y$21652$12l&&U)
                                                                           (g$ellipsis?$21622$12l&&U
                                                                             g$dots$21651$12l&&U)))
                                                                        g$ls/false$21649$12l&&U))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$21653$12l&&U
                                                                       g$dots$21654$12l&&U
                                                                       g$y$21655$12l&&U)
                                                                     ((letrec ((g$f$21656$12l&&U
                                                                                 (case-lambda
                                                                                   ((g$y$21657$12l&&U
                                                                                      g$k$21658$12l&&U)
                                                                                    ((case-lambda
                                                                                       ((g$t$21659$12l&&U)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$21660$12l&&U)
                                                                                            (if g$ls/false$21660$12l&&U
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$21658$12l&&U
                                                                                                     g$maps$21621$12l&&U)))
                                                                                                g$ls/false$21660$12l&&U)
                                                                                              ((case-lambda
                                                                                                 ((g$t$21661$12l&&U)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$21662$12l&&U)
                                                                                                      (if (if g$ls/false$21662$12l&&U
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$21663$12l&&U
                                                                                                                     g$y$21664$12l&&U)
                                                                                                                   (g$ellipsis?$21622$12l&&U
                                                                                                                     g$dots$21663$12l&&U)))
                                                                                                                g$ls/false$21662$12l&&U))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$21665$12l&&U
                                                                                                               g$y$21666$12l&&U)
                                                                                                             (g$f$21656$12l&&U
                                                                                                               g$y$21666$12l&&U
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$21667$12l&&U)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$21658$12l&&U
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$21667$12l&&U))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$21670$12l&&U
                                                                                                                         g$maps$21671$12l&&U)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$21672$12l&&U
                                                                                                                             g$x$21673$12l&&U)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$21672$12l&&U))
                                                                                                                             (g$syntax-violation$19808$12l&&U
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$21618$12l&&U)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$21561$12l&&U
                                                                                                                                 g$x$21673$12l&&U
                                                                                                                                 (car g$maps$21672$12l&&U))
                                                                                                                               (cdr g$maps$21672$12l&&U)))))
                                                                                                                        g$maps$21671$12l&&U
                                                                                                                        g$x$21670$12l&&U)))))))))
                                                                                                          g$ls/false$21662$12l&&U)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$21674$12l&&U)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$21675$12l&&U)
                                                                                                                (if g$ls/false$21675$12l&&U
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$21558$12l&&U
                                                                                                                              g$src$21618$12l&&U
                                                                                                                              g$y$21657$12l&&U
                                                                                                                              g$r$21620$12l&&U
                                                                                                                              g$maps$21621$12l&&U
                                                                                                                              g$ellipsis?$21622$12l&&U
                                                                                                                              g$vec?$21623$12l&&U)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$21678$12l&&U
                                                                                                                              g$maps$21679$12l&&U)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$21680$12l&&U
                                                                                                                                  g$y$21681$12l&&U)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$21658$12l&&U
                                                                                                                                       g$maps$21680$12l&&U)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$21684$12l&&U
                                                                                                                                       g$maps$21685$12l&&U)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$21686$12l&&U
                                                                                                                                           g$x$21687$12l&&U)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$21560$12l&&U
                                                                                                                                             g$x$21687$12l&&U
                                                                                                                                             g$y$21681$12l&&U)
                                                                                                                                           g$maps$21686$12l&&U)))
                                                                                                                                      g$maps$21685$12l&&U
                                                                                                                                      g$x$21684$12l&&U))))))
                                                                                                                             g$maps$21679$12l&&U
                                                                                                                             g$y$21678$12l&&U))))))
                                                                                                                    g$ls/false$21675$12l&&U)
                                                                                                                  (g$syntax-violation$19808$12l&&U
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$21674$12l&&U))))
                                                                                                             (g$syntax-dispatch$19689$12l&&U
                                                                                                               g$t$21674$12l&&U
                                                                                                               '_))))
                                                                                                         g$t$21661$12l&&U))))
                                                                                                   (g$syntax-dispatch$19689$12l&&U
                                                                                                     g$t$21661$12l&&U
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$21659$12l&&U))))
                                                                                         (g$syntax-dispatch$19689$12l&&U
                                                                                           g$t$21659$12l&&U
                                                                                           '()))))
                                                                                     g$y$21657$12l&&U)))))
                                                                        g$f$21656$12l&&U)
                                                                      g$y$21655$12l&&U
                                                                      (case-lambda
                                                                        ((g$maps$21688$12l&&U)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$21558$12l&&U
                                                                                g$src$21618$12l&&U
                                                                                g$x$21653$12l&&U
                                                                                g$r$21620$12l&&U
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$21688$12l&&U)
                                                                                g$ellipsis?$21622$12l&&U
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$21691$12l&&U
                                                                                g$maps$21692$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$maps$21693$12l&&U
                                                                                    g$x$21694$12l&&U)
                                                                                  (if (null?
                                                                                        (car g$maps$21693$12l&&U))
                                                                                    (g$syntax-violation$19808$12l&&U
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$21618$12l&&U)
                                                                                    (values
                                                                                      (g$gen-map$21562$12l&&U
                                                                                        g$x$21694$12l&&U
                                                                                        (car g$maps$21693$12l&&U))
                                                                                      (cdr g$maps$21693$12l&&U)))))
                                                                               g$maps$21692$12l&&U
                                                                               g$x$21691$12l&&U)))))))))
                                                                  g$ls/false$21649$12l&&U)
                                                                ((case-lambda
                                                                   ((g$t$21695$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$ls/false$21696$12l&&U)
                                                                        (if g$ls/false$21696$12l&&U
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$21697$12l&&U
                                                                                 g$y$21698$12l&&U)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$21558$12l&&U
                                                                                      g$src$21618$12l&&U
                                                                                      g$x$21697$12l&&U
                                                                                      g$r$21620$12l&&U
                                                                                      g$maps$21621$12l&&U
                                                                                      g$ellipsis?$21622$12l&&U
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$21701$12l&&U
                                                                                      g$maps$21702$12l&&U)
                                                                                    ((case-lambda
                                                                                       ((g$maps$21703$12l&&U
                                                                                          g$xnew$21704$12l&&U)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$21558$12l&&U
                                                                                               g$src$21618$12l&&U
                                                                                               g$y$21698$12l&&U
                                                                                               g$r$21620$12l&&U
                                                                                               g$maps$21703$12l&&U
                                                                                               g$ellipsis?$21622$12l&&U
                                                                                               g$vec?$21623$12l&&U)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$21707$12l&&U
                                                                                               g$maps$21708$12l&&U)
                                                                                             ((case-lambda
                                                                                                ((g$maps$21709$12l&&U
                                                                                                   g$ynew$21710$12l&&U)
                                                                                                 (values
                                                                                                   (g$gen-cons$21563$12l&&U
                                                                                                     g$e$21619$12l&&U
                                                                                                     g$x$21697$12l&&U
                                                                                                     g$y$21698$12l&&U
                                                                                                     g$xnew$21704$12l&&U
                                                                                                     g$ynew$21710$12l&&U)
                                                                                                   g$maps$21709$12l&&U)))
                                                                                              g$maps$21708$12l&&U
                                                                                              g$ynew$21707$12l&&U))))))
                                                                                     g$maps$21702$12l&&U
                                                                                     g$xnew$21701$12l&&U))))))
                                                                            g$ls/false$21696$12l&&U)
                                                                          ((case-lambda
                                                                             ((g$t$21711$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$21712$12l&&U)
                                                                                  (if g$ls/false$21712$12l&&U
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$21713$12l&&U)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$21558$12l&&U
                                                                                                g$src$21618$12l&&U
                                                                                                g$ls$21713$12l&&U
                                                                                                g$r$21620$12l&&U
                                                                                                g$maps$21621$12l&&U
                                                                                                g$ellipsis?$21622$12l&&U
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$21716$12l&&U
                                                                                                g$maps$21717$12l&&U)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$21718$12l&&U
                                                                                                    g$lsnew$21719$12l&&U)
                                                                                                  (values
                                                                                                    (g$gen-vector$21564$12l&&U
                                                                                                      g$e$21619$12l&&U
                                                                                                      g$ls$21713$12l&&U
                                                                                                      g$lsnew$21719$12l&&U)
                                                                                                    g$maps$21718$12l&&U)))
                                                                                               g$maps$21717$12l&&U
                                                                                               g$lsnew$21716$12l&&U))))))
                                                                                      g$ls/false$21712$12l&&U)
                                                                                    ((case-lambda
                                                                                       ((g$t$21720$12l&&U)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$21721$12l&&U)
                                                                                            (if g$ls/false$21721$12l&&U
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$21619$12l&&U)
                                                                                                     g$maps$21621$12l&&U)))
                                                                                                g$ls/false$21721$12l&&U)
                                                                                              (g$syntax-violation$19808$12l&&U
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$21720$12l&&U))))
                                                                                         (g$syntax-dispatch$19689$12l&&U
                                                                                           g$t$21720$12l&&U
                                                                                           '_))))
                                                                                     g$t$21711$12l&&U))))
                                                                               (g$syntax-dispatch$19689$12l&&U
                                                                                 g$t$21711$12l&&U
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$21695$12l&&U))))
                                                                     (g$syntax-dispatch$19689$12l&&U
                                                                       g$t$21695$12l&&U
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$21648$12l&&U))))
                                                           (g$syntax-dispatch$19689$12l&&U
                                                             g$t$21648$12l&&U
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$21641$12l&&U))))
                                                 (g$syntax-dispatch$19689$12l&&U
                                                   g$t$21641$12l&&U
                                                   '(any any)))))
                                             g$t$21628$12l&&U))))
                                       (g$syntax-dispatch$19689$12l&&U
                                         g$t$21628$12l&&U
                                         'any))))
                                   g$t$21624$12l&&U))))
                             (g$syntax-dispatch$19689$12l&&U
                               g$t$21624$12l&&U
                               'any))))
                         g$e$21619$12l&&U))))
                   (g$gen-ref$21559$12l&&U
                     (case-lambda
                       ((g$src$21605$12l&&U
                          g$var$21606$12l&&U
                          g$level$21607$12l&&U
                          g$maps$21608$12l&&U)
                        (if (= g$level$21607$12l&&U '0)
                          (values
                            g$var$21606$12l&&U
                            g$maps$21608$12l&&U)
                          (if (null? g$maps$21608$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$21605$12l&&U)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$21559$12l&&U
                                   g$src$21605$12l&&U
                                   g$var$21606$12l&&U
                                   (- g$level$21607$12l&&U '1)
                                   (cdr g$maps$21608$12l&&U))))
                              (case-lambda
                                ((g$outer-var$21611$12l&&U
                                   g$outer-maps$21612$12l&&U)
                                 ((case-lambda
                                    ((g$outer-maps$21613$12l&&U
                                       g$outer-var$21614$12l&&U)
                                     ((case-lambda
                                        ((g$t$21615$12l&&U)
                                         (if g$t$21615$12l&&U
                                           ((case-lambda
                                              ((g$b$21616$12l&&U)
                                               (values
                                                 (cdr g$b$21616$12l&&U)
                                                 g$maps$21608$12l&&U)))
                                            g$t$21615$12l&&U)
                                           ((case-lambda
                                              ((g$inner-var$21617$12l&&U)
                                               (values
                                                 g$inner-var$21617$12l&&U
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$21614$12l&&U
                                                       g$inner-var$21617$12l&&U)
                                                     (car g$maps$21608$12l&&U))
                                                   g$outer-maps$21613$12l&&U))))
                                            (g$gen-lexical$19126$12l&&U
                                              'tmp)))))
                                      (g$assq$11823$12l&&U
                                        g$outer-var$21614$12l&&U
                                        (car g$maps$21608$12l&&U)))))
                                  g$outer-maps$21612$12l&&U
                                  g$outer-var$21611$12l&&U)))))))))
                   (g$gen-append$21560$12l&&U
                     (case-lambda
                       ((g$x$21603$12l&&U g$y$21604$12l&&U)
                        (if (equal? g$y$21604$12l&&U ''())
                          g$x$21603$12l&&U
                          (list
                            'append
                            g$x$21603$12l&&U
                            g$y$21604$12l&&U)))))
                   (g$gen-mappend$21561$12l&&U
                     (case-lambda
                       ((g$e$21601$12l&&U g$map-env$21602$12l&&U)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$21562$12l&&U
                            g$e$21601$12l&&U
                            g$map-env$21602$12l&&U)))))
                   (g$gen-map$21562$12l&&U
                     (case-lambda
                       ((g$e$21592$12l&&U g$map-env$21593$12l&&U)
                        ((case-lambda
                           ((g$formals$21594$12l&&U
                              g$actuals$21595$12l&&U)
                            (if (eq? (car g$e$21592$12l&&U) 'ref)
                              (car g$actuals$21595$12l&&U)
                              (if (g$for-all$11833$12l&&U
                                    (case-lambda
                                      ((g$x$21596$12l&&U)
                                       (if (eq? (car g$x$21596$12l&&U)
                                                'ref)
                                         (begin
                                           '#f
                                           (g$memq$11827$12l&&U
                                             (g$cadr$12597$12l&&U
                                               g$x$21596$12l&&U)
                                             g$formals$21594$12l&&U))
                                         '#f)))
                                    (cdr g$e$21592$12l&&U))
                                ((case-lambda
                                   ((g$args$21597$12l&&U)
                                    (cons
                                      'map
                                      (cons
                                        (list
                                          'primitive
                                          (car g$e$21592$12l&&U))
                                        g$args$21597$12l&&U))))
                                 (g$map$11835$12l&&U
                                   ((case-lambda
                                      ((g$r$21598$12l&&U)
                                       (case-lambda
                                         ((g$x$21599$12l&&U)
                                          (cdr (g$assq$11823$12l&&U
                                                 (g$cadr$12597$12l&&U
                                                   g$x$21599$12l&&U)
                                                 g$r$21598$12l&&U))))))
                                    (g$map$11835$12l&&U
                                      cons
                                      g$formals$21594$12l&&U
                                      g$actuals$21595$12l&&U))
                                   (cdr g$e$21592$12l&&U)))
                                (g$cons*$11837$12l&&U
                                  'map
                                  (list
                                    'lambda
                                    g$formals$21594$12l&&U
                                    g$e$21592$12l&&U)
                                  g$actuals$21595$12l&&U)))))
                         (g$map$11835$12l&&U cdr g$map-env$21593$12l&&U)
                         (g$map$11835$12l&&U
                           (case-lambda
                             ((g$x$21600$12l&&U)
                              (list 'ref (car g$x$21600$12l&&U))))
                           g$map-env$21593$12l&&U)))))
                   (g$gen-cons$21563$12l&&U
                     (case-lambda
                       ((g$e$21584$12l&&U
                          g$x$21585$12l&&U
                          g$y$21586$12l&&U
                          g$xnew$21587$12l&&U
                          g$ynew$21588$12l&&U)
                        ((case-lambda
                           ((g$t$21589$12l&&U)
                            (if (eqv? g$t$21589$12l&&U 'quote)
                              (if (eq? (car g$xnew$21587$12l&&U) 'quote)
                                ((case-lambda
                                   ((g$xnew$21590$12l&&U
                                      g$ynew$21591$12l&&U)
                                    (if (if (eq? g$xnew$21590$12l&&U
                                                 g$x$21585$12l&&U)
                                          (begin
                                            '#f
                                            (eq? g$ynew$21591$12l&&U
                                                 g$y$21586$12l&&U))
                                          '#f)
                                      (list 'quote g$e$21584$12l&&U)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$21590$12l&&U
                                          g$ynew$21591$12l&&U)))))
                                 (g$cadr$12597$12l&&U
                                   g$xnew$21587$12l&&U)
                                 (g$cadr$12597$12l&&U
                                   g$ynew$21588$12l&&U))
                                (if (null?
                                      (g$cadr$12597$12l&&U
                                        g$ynew$21588$12l&&U))
                                  (list 'list g$xnew$21587$12l&&U)
                                  (list
                                    'cons
                                    g$xnew$21587$12l&&U
                                    g$ynew$21588$12l&&U)))
                              (if (eqv? g$t$21589$12l&&U 'list)
                                (cons
                                  'list
                                  (cons
                                    g$xnew$21587$12l&&U
                                    (cdr g$ynew$21588$12l&&U)))
                                (list
                                  'cons
                                  g$xnew$21587$12l&&U
                                  g$ynew$21588$12l&&U)))))
                         (car g$ynew$21588$12l&&U)))))
                   (g$gen-vector$21564$12l&&U
                     (case-lambda
                       ((g$e$21581$12l&&U
                          g$ls$21582$12l&&U
                          g$lsnew$21583$12l&&U)
                        (if (eq? (car g$lsnew$21583$12l&&U) 'quote)
                          (if (eq? (g$cadr$12597$12l&&U
                                     g$lsnew$21583$12l&&U)
                                   g$ls$21582$12l&&U)
                            (list 'quote g$e$21581$12l&&U)
                            (list
                              'quote
                              (g$list->vector$12589$12l&&U
                                (g$cadr$12597$12l&&U
                                  g$lsnew$21583$12l&&U))))
                          (if (eq? (car g$lsnew$21583$12l&&U) 'list)
                            (cons 'vector (cdr g$lsnew$21583$12l&&U))
                            (list
                              'list->vector
                              g$lsnew$21583$12l&&U))))))
                   (g$regen$21565$12l&&U
                     (case-lambda
                       ((g$x$21578$12l&&U)
                        ((case-lambda
                           ((g$t$21579$12l&&U)
                            (if (eqv? g$t$21579$12l&&U 'ref)
                              (g$cadr$12597$12l&&U g$x$21578$12l&&U)
                              (if (eqv? g$t$21579$12l&&U 'primitive)
                                (list
                                  'primitive
                                  (g$cadr$12597$12l&&U
                                    g$x$21578$12l&&U))
                                (if (eqv? g$t$21579$12l&&U 'quote)
                                  (list
                                    'quote
                                    (g$cadr$12597$12l&&U
                                      g$x$21578$12l&&U))
                                  (if (eqv? g$t$21579$12l&&U 'lambda)
                                    (g$build-lambda$19113$12l&&U
                                      '#f
                                      (g$cadr$12597$12l&&U
                                        g$x$21578$12l&&U)
                                      (g$regen$21565$12l&&U
                                        (g$caddr$12603$12l&&U
                                          g$x$21578$12l&&U)))
                                    (if (eqv? g$t$21579$12l&&U 'map)
                                      ((case-lambda
                                         ((g$ls$21580$12l&&U)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$21580$12l&&U)))
                                       (g$map$11835$12l&&U
                                         g$regen$21565$12l&&U
                                         (cdr g$x$21578$12l&&U)))
                                      (cons
                                        (list
                                          'primitive
                                          (car g$x$21578$12l&&U))
                                        (g$map$11835$12l&&U
                                          g$regen$21565$12l&&U
                                          (cdr g$x$21578$12l&&U))))))))))
                         (car g$x$21578$12l&&U))))))
           (case-lambda
             ((g$e$21566$12l&&U g$r$21567$12l&&U g$mr$21568$12l&&U)
              ((case-lambda
                 ((g$t$21569$12l&&U)
                  ((case-lambda
                     ((g$ls/false$21570$12l&&U)
                      (if g$ls/false$21570$12l&&U
                        (apply
                          (case-lambda
                            ((g$x$21571$12l&&U)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$21558$12l&&U
                                    g$e$21566$12l&&U
                                    g$x$21571$12l&&U
                                    g$r$21567$12l&&U
                                    '()
                                    g$ellipsis?$19690$12l&&U
                                    '#f)))
                               (case-lambda
                                 ((g$e$21574$12l&&U g$maps$21575$12l&&U)
                                  ((case-lambda
                                     ((g$maps$21576$12l&&U
                                        g$e$21577$12l&&U)
                                      (g$regen$21565$12l&&U
                                        g$e$21577$12l&&U)))
                                   g$maps$21575$12l&&U
                                   g$e$21574$12l&&U))))))
                          g$ls/false$21570$12l&&U)
                        (g$syntax-violation$19808$12l&&U
                          '#f
                          '"invalid syntax"
                          g$t$21569$12l&&U))))
                   (g$syntax-dispatch$19689$12l&&U
                     g$t$21569$12l&&U
                     '(_ any)))))
               g$e$21566$12l&&U))))))))
   (g$core-macro-transformer$19696$12l&&U
     g$core-macro-transformer$23292$12l&&U
     (case-lambda
       ((g$name$21722$12l&&U)
        ((case-lambda
           ((g$t$21723$12l&&U)
            (if (eqv? g$t$21723$12l&&U 'quote)
              g$quote-transformer$19649$12l&&U
              (if (eqv? g$t$21723$12l&&U 'lambda)
                g$lambda-transformer$19651$12l&&U
                (if (eqv? g$t$21723$12l&&U 'case-lambda)
                  g$case-lambda-transformer$19650$12l&&U
                  (if (eqv? g$t$21723$12l&&U 'letrec)
                    g$letrec-transformer$19639$12l&&U
                    (if (eqv? g$t$21723$12l&&U 'letrec*)
                      g$letrec*-transformer$19640$12l&&U
                      (if (eqv? g$t$21723$12l&&U 'if)
                        g$if-transformer$19647$12l&&U
                        (if (eqv? g$t$21723$12l&&U 'foreign-call)
                          g$foreign-call-transformer$19687$12l&&U
                          (if (eqv? g$t$21723$12l&&U 'syntax-case)
                            g$syntax-case-transformer$19693$12l&&U
                            (if (eqv? g$t$21723$12l&&U 'syntax)
                              g$syntax-transformer$19695$12l&&U
                              (if (eqv?
                                    g$t$21723$12l&&U
                                    'type-descriptor)
                                g$type-descriptor-transformer$19642$12l&&U
                                (if (eqv?
                                      g$t$21723$12l&&U
                                      'record-type-descriptor)
                                  g$record-type-descriptor-transformer$19643$12l&&U
                                  (if (eqv?
                                        g$t$21723$12l&&U
                                        'record-constructor-descriptor)
                                    g$record-constructor-descriptor-transformer$19644$12l&&U
                                    (if (eqv?
                                          g$t$21723$12l&&U
                                          'fluid-let-syntax)
                                      g$fluid-let-syntax-transformer$19641$12l&&U
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$21722$12l&&U))))))))))))))))
         g$name$21722$12l&&U))))
   (g$file-options-macro$19697$12l&&U
     g$file-options-macro$23293$12l&&U
     (case-lambda
       ((g$x$21724$12l&&U)
        (letrec* ((g$valid-option?$21725$12l&&U
                    (case-lambda
                      ((g$x$21730$12l&&U)
                       (if (g$id?$19191$12l&&U g$x$21730$12l&&U)
                         (begin
                           '#f
                           (g$memq$11827$12l&&U
                             (g$id->sym$19192$12l&&U g$x$21730$12l&&U)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$21726$12l&&U)
              ((case-lambda
                 ((g$ls/false$21727$12l&&U)
                  (if (if g$ls/false$21727$12l&&U
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$21728$12l&&U)
                               (if (g$for-all$11833$12l&&U
                                     g$valid-option?$21725$12l&&U
                                     g$opt*$21728$12l&&U)
                                 (begin
                                   '#f
                                   (g$file-options-spec$18054$12l&&U
                                     (g$map$11835$12l&&U
                                       g$id->sym$19192$12l&&U
                                       g$opt*$21728$12l&&U)))
                                 '#f)))
                            g$ls/false$21727$12l&&U))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$21729$12l&&U)
                         (g$bless$19652$12l&&U
                           (list
                             'quote
                             (g$file-options-spec$18054$12l&&U
                               (g$map$11835$12l&&U
                                 g$id->sym$19192$12l&&U
                                 g$opt*$21729$12l&&U))))))
                      g$ls/false$21727$12l&&U)
                    (g$syntax-violation$19808$12l&&U
                      '#f
                      '"invalid syntax"
                      g$t$21726$12l&&U))))
               (g$syntax-dispatch$19689$12l&&U
                 g$t$21726$12l&&U
                 '(_ . each-any)))))
           g$x$21724$12l&&U)))))
   (g$symbol-macro$19698$12l&&U
     g$symbol-macro$23294$12l&&U
     (case-lambda
       ((g$x$21731$12l&&U g$set$21732$12l&&U)
        ((case-lambda
           ((g$t$21733$12l&&U)
            ((case-lambda
               ((g$ls/false$21734$12l&&U)
                (if (if g$ls/false$21734$12l&&U
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$21735$12l&&U)
                             (if (g$id?$19191$12l&&U
                                   g$name$21735$12l&&U)
                               (begin
                                 '#f
                                 (g$memq$11827$12l&&U
                                   (g$id->sym$19192$12l&&U
                                     g$name$21735$12l&&U)
                                   g$set$21732$12l&&U))
                               '#f)))
                          g$ls/false$21734$12l&&U))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$21736$12l&&U)
                       (g$bless$19652$12l&&U
                         (list 'quote g$name$21736$12l&&U))))
                    g$ls/false$21734$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$21733$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$21733$12l&&U
               '(_ any)))))
         g$x$21731$12l&&U))))
   (g$macro-transformer$19699$12l&&U
     g$macro-transformer$23295$12l&&U
     (case-lambda
       ((g$x$21737$12l&&U)
        (if (g$procedure?$12581$12l&&U g$x$21737$12l&&U)
          g$x$21737$12l&&U
          (if (g$symbol?$12579$12l&&U g$x$21737$12l&&U)
            ((case-lambda
               ((g$t$21738$12l&&U)
                (if (eqv? g$t$21738$12l&&U 'define-record-type)
                  g$define-record-type-macro$19683$12l&&U
                  (if (eqv? g$t$21738$12l&&U 'define-struct)
                    g$define-struct-macro$19682$12l&&U
                    (if (eqv? g$t$21738$12l&&U 'include)
                      g$include-macro$19677$12l&&U
                      (if (eqv? g$t$21738$12l&&U 'cond)
                        g$cond-macro$19675$12l&&U
                        (if (eqv? g$t$21738$12l&&U 'let)
                          g$let-macro$19655$12l&&U
                          (if (eqv? g$t$21738$12l&&U 'do)
                            g$do-macro$19671$12l&&U
                            (if (eqv? g$t$21738$12l&&U 'or)
                              g$or-macro$19673$12l&&U
                              (if (eqv? g$t$21738$12l&&U 'and)
                                g$and-macro$19674$12l&&U
                                (if (eqv? g$t$21738$12l&&U 'let*)
                                  g$let*-macro$19672$12l&&U
                                  (if (eqv?
                                        g$t$21738$12l&&U
                                        'let-values)
                                    g$let-values-macro$19656$12l&&U
                                    (if (eqv?
                                          g$t$21738$12l&&U
                                          'let*-values)
                                      g$let*-values-macro$19657$12l&&U
                                      (if (eqv?
                                            g$t$21738$12l&&U
                                            'syntax-rules)
                                        g$syntax-rules-macro$19679$12l&&U
                                        (if (eqv?
                                              g$t$21738$12l&&U
                                              'quasiquote)
                                          g$quasiquote-macro$19680$12l&&U
                                          (if (eqv?
                                                g$t$21738$12l&&U
                                                'quasisyntax)
                                            g$quasisyntax-macro$19681$12l&&U
                                            (if (eqv?
                                                  g$t$21738$12l&&U
                                                  'with-syntax)
                                              g$with-syntax-macro$19653$12l&&U
                                              (if (eqv?
                                                    g$t$21738$12l&&U
                                                    'when)
                                                g$when-macro$19645$12l&&U
                                                (if (eqv?
                                                      g$t$21738$12l&&U
                                                      'unless)
                                                  g$unless-macro$19646$12l&&U
                                                  (if (eqv?
                                                        g$t$21738$12l&&U
                                                        'case)
                                                    g$case-macro$19648$12l&&U
                                                    (if (eqv?
                                                          g$t$21738$12l&&U
                                                          'identifier-syntax)
                                                      g$identifier-syntax-macro$19670$12l&&U
                                                      (if (eqv?
                                                            g$t$21738$12l&&U
                                                            'time)
                                                        g$time-macro$19666$12l&&U
                                                        (if (eqv?
                                                              g$t$21738$12l&&U
                                                              'delay)
                                                          g$delay-macro$19667$12l&&U
                                                          (if (eqv?
                                                                g$t$21738$12l&&U
                                                                'assert)
                                                            g$assert-macro$19668$12l&&U
                                                            (if (eqv?
                                                                  g$t$21738$12l&&U
                                                                  'endianness)
                                                              g$endianness-macro$19669$12l&&U
                                                              (if (eqv?
                                                                    g$t$21738$12l&&U
                                                                    'guard)
                                                                g$guard-macro$19664$12l&&U
                                                                (if (eqv?
                                                                      g$t$21738$12l&&U
                                                                      'define-enumeration)
                                                                  g$define-enumeration-macro$19665$12l&&U
                                                                  (if (eqv?
                                                                        g$t$21738$12l&&U
                                                                        'trace-lambda)
                                                                    g$trace-lambda-macro$19658$12l&&U
                                                                    (if (eqv?
                                                                          g$t$21738$12l&&U
                                                                          'trace-define)
                                                                      g$trace-define-macro$19659$12l&&U
                                                                      (if (eqv?
                                                                            g$t$21738$12l&&U
                                                                            'trace-define-syntax)
                                                                        g$trace-define-syntax-macro$19660$12l&&U
                                                                        (if (eqv?
                                                                              g$t$21738$12l&&U
                                                                              'trace-let-syntax)
                                                                          g$trace-let-syntax-macro$19662$12l&&U
                                                                          (if (eqv?
                                                                                g$t$21738$12l&&U
                                                                                'trace-letrec-syntax)
                                                                            g$trace-letrec-syntax-macro$19663$12l&&U
                                                                            (if (eqv?
                                                                                  g$t$21738$12l&&U
                                                                                  'define-condition-type)
                                                                              g$define-condition-type-macro$19684$12l&&U
                                                                              (if (eqv?
                                                                                    g$t$21738$12l&&U
                                                                                    'parameterize)
                                                                                g$parameterize-macro$19686$12l&&U
                                                                                (if (eqv?
                                                                                      g$t$21738$12l&&U
                                                                                      'include-into)
                                                                                  g$include-into-macro$19678$12l&&U
                                                                                  (if (eqv?
                                                                                        g$t$21738$12l&&U
                                                                                        'eol-style)
                                                                                    (case-lambda
                                                                                      ((g$x$21739$12l&&U)
                                                                                       (g$symbol-macro$19698$12l&&U
                                                                                         g$x$21739$12l&&U
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (eqv?
                                                                                          g$t$21738$12l&&U
                                                                                          'error-handling-mode)
                                                                                      (case-lambda
                                                                                        ((g$x$21740$12l&&U)
                                                                                         (g$symbol-macro$19698$12l&&U
                                                                                           g$x$21740$12l&&U
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (eqv?
                                                                                            g$t$21738$12l&&U
                                                                                            'buffer-mode)
                                                                                        (case-lambda
                                                                                          ((g$x$21741$12l&&U)
                                                                                           (g$symbol-macro$19698$12l&&U
                                                                                             g$x$21741$12l&&U
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (eqv?
                                                                                              g$t$21738$12l&&U
                                                                                              'file-options)
                                                                                          g$file-options-macro$19697$12l&&U
                                                                                          (if (g$memv$11828$12l&&U
                                                                                                g$t$21738$12l&&U
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$19685$12l&&U
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$21737$12l&&U)))))))))))))))))))))))))))))))))))))))))
             g$x$21737$12l&&U)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$21737$12l&&U))))))
   (g$local-macro-transformer$19700$12l&&U
     g$local-macro-transformer$23296$12l&&U
     (case-lambda ((g$x$21742$12l&&U) (car g$x$21742$12l&&U))))
   (g$do-macro-call$19701$12l&&U
     g$do-macro-call$23297$12l&&U
     (case-lambda
       ((g$transformer$21743$12l&&U
          g$expr$21744$12l&&U
          g$r$21745$12l&&U)
        (letrec* ((g$return$21746$12l&&U
                    (case-lambda
                      ((g$x$21754$12l&&U)
                       (begin
                         ((letrec ((g$f$21755$12l&&U
                                     (case-lambda
                                       ((g$x$21756$12l&&U)
                                        (if (not (g$stx?$19163$12l&&U
                                                   g$x$21756$12l&&U))
                                          (if (pair? g$x$21756$12l&&U)
                                            (begin
                                              (g$f$21755$12l&&U
                                                (car g$x$21756$12l&&U))
                                              (g$f$21755$12l&&U
                                                (cdr g$x$21756$12l&&U)))
                                            (if (g$vector?$12577$12l&&U
                                                  g$x$21756$12l&&U)
                                              (g$vector-for-each$12649$12l&&U
                                                g$f$21755$12l&&U
                                                g$x$21756$12l&&U)
                                              (if (g$symbol?$12579$12l&&U
                                                    g$x$21756$12l&&U)
                                                (g$syntax-violation$19808$12l&&U
                                                  '#f
                                                  '"raw symbol encountered in output of macro"
                                                  g$expr$21744$12l&&U
                                                  g$x$21756$12l&&U)
                                                (void))))
                                          (void))))))
                            g$f$21755$12l&&U)
                          g$x$21754$12l&&U)
                         (g$add-mark$19180$12l&&U
                           (g$gen-mark$19175$12l&&U)
                           g$x$21754$12l&&U
                           g$expr$21744$12l&&U))))))
          ((case-lambda
             ((g$x$21747$12l&&U)
              (if (g$procedure?$12581$12l&&U g$x$21747$12l&&U)
                (g$return$21746$12l&&U
                  (g$x$21747$12l&&U
                    (case-lambda
                      ((g$id$21748$12l&&U)
                       (begin
                         (if (not (g$id?$19191$12l&&U
                                    g$id$21748$12l&&U))
                           (assertion-violation
                             'rho
                             '"not an identifier"
                             g$id$21748$12l&&U)
                           (void))
                         ((case-lambda
                            ((g$label$21749$12l&&U)
                             ((case-lambda
                                ((g$binding$21750$12l&&U)
                                 ((case-lambda
                                    ((g$t$21751$12l&&U)
                                     (if (eqv?
                                           g$t$21751$12l&&U
                                           'local-ctv)
                                       (g$cadr$12597$12l&&U
                                         g$binding$21750$12l&&U)
                                       (if (eqv?
                                             g$t$21751$12l&&U
                                             'global-ctv)
                                         ((case-lambda
                                            ((g$lib$21752$12l&&U
                                               g$loc$21753$12l&&U)
                                             (begin
                                               (g$visit-library$18898$12l&&U
                                                 g$lib$21752$12l&&U)
                                               (symbol-value
                                                 g$loc$21753$12l&&U))))
                                          (g$cadr$12597$12l&&U
                                            g$binding$21750$12l&&U)
                                          (g$cddr$12599$12l&&U
                                            g$binding$21750$12l&&U))
                                         '#f))))
                                  (car g$binding$21750$12l&&U))))
                              (g$label->binding$19206$12l&&U
                                g$label$21749$12l&&U
                                g$r$21745$12l&&U))))
                          (g$id->label$19204$12l&&U
                            g$id$21748$12l&&U)))))))
                (g$return$21746$12l&&U g$x$21747$12l&&U))))
           (g$transformer$21743$12l&&U
             (g$add-mark$19180$12l&&U
               g$anti-mark$19176$12l&&U
               g$expr$21744$12l&&U
               '#f)))))))
   (g$chi-macro$19702$12l&&U
     g$chi-macro$23298$12l&&U
     (case-lambda
       ((g$p$21757$12l&&U g$e$21758$12l&&U g$r$21759$12l&&U)
        (g$do-macro-call$19701$12l&&U
          (g$macro-transformer$19699$12l&&U g$p$21757$12l&&U)
          g$e$21758$12l&&U
          g$r$21759$12l&&U))))
   (g$chi-local-macro$19703$12l&&U
     g$chi-local-macro$23299$12l&&U
     (case-lambda
       ((g$p$21760$12l&&U g$e$21761$12l&&U g$r$21762$12l&&U)
        (g$do-macro-call$19701$12l&&U
          (g$local-macro-transformer$19700$12l&&U g$p$21760$12l&&U)
          g$e$21761$12l&&U
          g$r$21762$12l&&U))))
   (g$chi-global-macro$19704$12l&&U
     g$chi-global-macro$23300$12l&&U
     (case-lambda
       ((g$p$21763$12l&&U g$e$21764$12l&&U g$r$21765$12l&&U)
        ((case-lambda
           ((g$lib$21766$12l&&U g$loc$21767$12l&&U)
            (begin
              (g$visit-library$18898$12l&&U g$lib$21766$12l&&U)
              ((case-lambda
                 ((g$x$21768$12l&&U)
                  ((case-lambda
                     ((g$transformer$21769$12l&&U)
                      (g$do-macro-call$19701$12l&&U
                        g$transformer$21769$12l&&U
                        g$e$21764$12l&&U
                        g$r$21765$12l&&U)))
                   (if (g$procedure?$12581$12l&&U g$x$21768$12l&&U)
                     g$x$21768$12l&&U
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$21768$12l&&U)))))
               (symbol-value g$loc$21767$12l&&U)))))
         (car g$p$21763$12l&&U)
         (cdr g$p$21763$12l&&U)))))
   (g$chi-expr*$19705$12l&&U
     g$chi-expr*$23301$12l&&U
     (case-lambda
       ((g$e*$21770$12l&&U g$r$21771$12l&&U g$mr$21772$12l&&U)
        (if (null? g$e*$21770$12l&&U)
          '()
          ((case-lambda
             ((g$e$21773$12l&&U)
              (cons
                g$e$21773$12l&&U
                (g$chi-expr*$19705$12l&&U
                  (cdr g$e*$21770$12l&&U)
                  g$r$21771$12l&&U
                  g$mr$21772$12l&&U))))
           (g$chi-expr$19707$12l&&U
             (car g$e*$21770$12l&&U)
             g$r$21771$12l&&U
             g$mr$21772$12l&&U))))))
   (g$chi-application$19706$12l&&U
     g$chi-application$23302$12l&&U
     (case-lambda
       ((g$e$21774$12l&&U g$r$21775$12l&&U g$mr$21776$12l&&U)
        ((case-lambda
           ((g$t$21777$12l&&U)
            ((case-lambda
               ((g$ls/false$21778$12l&&U)
                (if g$ls/false$21778$12l&&U
                  (apply
                    (case-lambda
                      ((g$rator$21779$12l&&U g$rands$21780$12l&&U)
                       ((case-lambda
                          ((g$rator$21781$12l&&U)
                           (cons
                             g$rator$21781$12l&&U
                             (g$chi-expr*$19705$12l&&U
                               g$rands$21780$12l&&U
                               g$r$21775$12l&&U
                               g$mr$21776$12l&&U))))
                        (g$chi-expr$19707$12l&&U
                          g$rator$21779$12l&&U
                          g$r$21775$12l&&U
                          g$mr$21776$12l&&U))))
                    g$ls/false$21778$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$21777$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$21777$12l&&U
               '(any . each-any)))))
         g$e$21774$12l&&U))))
   (g$chi-expr$19707$12l&&U
     g$chi-expr$23303$12l&&U
     (case-lambda
       ((g$e$21782$12l&&U g$r$21783$12l&&U g$mr$21784$12l&&U)
        (call-with-values
          (case-lambda
            (()
             (g$syntax-type$19211$12l&&U
               g$e$21782$12l&&U
               g$r$21783$12l&&U)))
          (case-lambda
            ((g$type$21788$12l&&U
               g$value$21789$12l&&U
               g$kwd$21790$12l&&U)
             ((case-lambda
                ((g$kwd$21791$12l&&U
                   g$value$21792$12l&&U
                   g$type$21793$12l&&U)
                 ((case-lambda
                    ((g$t$21794$12l&&U)
                     (if (eqv? g$t$21794$12l&&U 'core-macro)
                       ((case-lambda
                          ((g$transformer$21795$12l&&U)
                           (g$transformer$21795$12l&&U
                             g$e$21782$12l&&U
                             g$r$21783$12l&&U
                             g$mr$21784$12l&&U)))
                        (g$core-macro-transformer$19696$12l&&U
                          g$value$21792$12l&&U))
                       (if (eqv? g$t$21794$12l&&U 'global)
                         ((case-lambda
                            ((g$lib$21796$12l&&U)
                             ((case-lambda
                                ((g$loc$21797$12l&&U)
                                 (begin
                                   ((g$inv-collector$19744$12l&&U)
                                    g$lib$21796$12l&&U)
                                   g$loc$21797$12l&&U)))
                              (cdr g$value$21792$12l&&U))))
                          (car g$value$21792$12l&&U))
                         (if (eqv? g$t$21794$12l&&U 'core-prim)
                           ((case-lambda
                              ((g$name$21798$12l&&U)
                               (list 'primitive g$name$21798$12l&&U)))
                            g$value$21792$12l&&U)
                           (if (eqv? g$t$21794$12l&&U 'call)
                             (g$chi-application$19706$12l&&U
                               g$e$21782$12l&&U
                               g$r$21783$12l&&U
                               g$mr$21784$12l&&U)
                             (if (eqv? g$t$21794$12l&&U 'lexical)
                               ((case-lambda
                                  ((g$lex$21799$12l&&U)
                                   g$lex$21799$12l&&U))
                                (g$lexical-var$19633$12l&&U
                                  g$value$21792$12l&&U))
                               (if (g$memv$11828$12l&&U
                                     g$t$21794$12l&&U
                                     '(global-macro global-macro!))
                                 (g$chi-expr$19707$12l&&U
                                   (g$chi-global-macro$19704$12l&&U
                                     g$value$21792$12l&&U
                                     g$e$21782$12l&&U
                                     g$r$21783$12l&&U)
                                   g$r$21783$12l&&U
                                   g$mr$21784$12l&&U)
                                 (if (g$memv$11828$12l&&U
                                       g$t$21794$12l&&U
                                       '(local-macro local-macro!))
                                   (g$chi-expr$19707$12l&&U
                                     (g$chi-local-macro$19703$12l&&U
                                       g$value$21792$12l&&U
                                       g$e$21782$12l&&U
                                       g$r$21783$12l&&U)
                                     g$r$21783$12l&&U
                                     g$mr$21784$12l&&U)
                                   (if (g$memv$11828$12l&&U
                                         g$t$21794$12l&&U
                                         '(macro macro!))
                                     (g$chi-expr$19707$12l&&U
                                       (g$chi-macro$19702$12l&&U
                                         g$value$21792$12l&&U
                                         g$e$21782$12l&&U
                                         g$r$21783$12l&&U)
                                       g$r$21783$12l&&U
                                       g$mr$21784$12l&&U)
                                     (if (eqv?
                                           g$t$21794$12l&&U
                                           'constant)
                                       ((case-lambda
                                          ((g$datum$21800$12l&&U)
                                           (list
                                             'quote
                                             g$datum$21800$12l&&U)))
                                        g$value$21792$12l&&U)
                                       (if (eqv? g$t$21794$12l&&U 'set!)
                                         (g$chi-set!$19708$12l&&U
                                           g$e$21782$12l&&U
                                           g$r$21783$12l&&U
                                           g$mr$21784$12l&&U)
                                         (if (eqv?
                                               g$t$21794$12l&&U
                                               'begin)
                                           ((case-lambda
                                              ((g$t$21801$12l&&U)
                                               ((case-lambda
                                                  ((g$ls/false$21802$12l&&U)
                                                   (if g$ls/false$21802$12l&&U
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$21803$12l&&U
                                                            g$x*$21804$12l&&U)
                                                          (g$build-sequence$19116$12l&&U
                                                            '#f
                                                            (g$chi-expr*$19705$12l&&U
                                                              (cons
                                                                g$x$21803$12l&&U
                                                                g$x*$21804$12l&&U)
                                                              g$r$21783$12l&&U
                                                              g$mr$21784$12l&&U))))
                                                       g$ls/false$21802$12l&&U)
                                                     (g$syntax-violation$19808$12l&&U
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$21801$12l&&U))))
                                                (g$syntax-dispatch$19689$12l&&U
                                                  g$t$21801$12l&&U
                                                  '(_ any
                                                      .
                                                      each-any)))))
                                            g$e$21782$12l&&U)
                                           (if (g$memv$11828$12l&&U
                                                 g$t$21794$12l&&U
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$21805$12l&&U)
                                                 ((case-lambda
                                                    ((g$ls/false$21806$12l&&U)
                                                     (if (if g$ls/false$21806$12l&&U
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$21807$12l&&U
                                                                    g$xrhs*$21808$12l&&U
                                                                    g$xbody$21809$12l&&U
                                                                    g$xbody*$21810$12l&&U)
                                                                  (if (not (g$valid-bound-ids?$19196$12l&&U
                                                                             g$xlhs*$21807$12l&&U))
                                                                    (g$syntax-violation$19808$12l&&U
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$21782$12l&&U)
                                                                    (void))))
                                                               g$ls/false$21806$12l&&U))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$21811$12l&&U
                                                              g$xrhs*$21812$12l&&U
                                                              g$xbody$21813$12l&&U
                                                              g$xbody*$21814$12l&&U)
                                                            ((case-lambda
                                                               ((g$xlab*$21815$12l&&U)
                                                                ((case-lambda
                                                                   ((g$xrib$21816$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$xb*$21817$12l&&U)
                                                                        (g$build-sequence$19116$12l&&U
                                                                          '#f
                                                                          (g$chi-expr*$19705$12l&&U
                                                                            (g$map$11835$12l&&U
                                                                              (case-lambda
                                                                                ((g$x$21818$12l&&U)
                                                                                 (g$add-subst$19181$12l&&U
                                                                                   g$xrib$21816$12l&&U
                                                                                   g$x$21818$12l&&U)))
                                                                              (cons
                                                                                g$xbody$21813$12l&&U
                                                                                g$xbody*$21814$12l&&U))
                                                                            (append
                                                                              (g$map$11835$12l&&U
                                                                                cons
                                                                                g$xlab*$21815$12l&&U
                                                                                g$xb*$21817$12l&&U)
                                                                              g$r$21783$12l&&U)
                                                                            (append
                                                                              (g$map$11835$12l&&U
                                                                                cons
                                                                                g$xlab*$21815$12l&&U
                                                                                g$xb*$21817$12l&&U)
                                                                              g$mr$21784$12l&&U)))))
                                                                     (g$map$11835$12l&&U
                                                                       (case-lambda
                                                                         ((g$x$21819$12l&&U)
                                                                          (g$make-eval-transformer$19239$12l&&U
                                                                            (g$expand-transformer$19737$12l&&U
                                                                              (if (eq? g$type$21793$12l&&U
                                                                                       'let-syntax)
                                                                                g$x$21819$12l&&U
                                                                                (g$add-subst$19181$12l&&U
                                                                                  g$xrib$21816$12l&&U
                                                                                  g$x$21819$12l&&U))
                                                                              g$mr$21784$12l&&U))))
                                                                       g$xrhs*$21812$12l&&U))))
                                                                 (g$make-full-rib$19157$12l&&U
                                                                   g$xlhs*$21811$12l&&U
                                                                   g$xlab*$21815$12l&&U))))
                                                             (g$map$11835$12l&&U
                                                               g$gen-label$19128$12l&&U
                                                               g$xlhs*$21811$12l&&U))))
                                                         g$ls/false$21806$12l&&U)
                                                       (g$syntax-violation$19808$12l&&U
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$21805$12l&&U))))
                                                  (g$syntax-dispatch$19689$12l&&U
                                                    g$t$21805$12l&&U
                                                    '(_ #(each
                                                          (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$21782$12l&&U)
                                             (if (eqv?
                                                   g$t$21794$12l&&U
                                                   'displaced-lexical)
                                               (g$syntax-violation$19808$12l&&U
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$21782$12l&&U)
                                               (if (eqv?
                                                     g$t$21794$12l&&U
                                                     'syntax)
                                                 (g$syntax-violation$19808$12l&&U
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$21782$12l&&U)
                                                 (if (g$memv$11828$12l&&U
                                                       g$t$21794$12l&&U
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$19808$12l&&U
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$21820$12l&&U)
                                                           (if (eqv?
                                                                 g$t$21820$12l&&U
                                                                 'define)
                                                             '"a definition"
                                                             (if (eqv?
                                                                   g$t$21820$12l&&U
                                                                   'define-syntax)
                                                               '"a define-syntax"
                                                               (if (eqv?
                                                                     g$t$21820$12l&&U
                                                                     'module)
                                                                 '"a module definition"
                                                                 (if (eqv?
                                                                       g$t$21820$12l&&U
                                                                       'library)
                                                                   '"a library definition"
                                                                   (if (eqv?
                                                                         g$t$21820$12l&&U
                                                                         'import)
                                                                     '"an import declaration"
                                                                     (if (eqv?
                                                                           g$t$21820$12l&&U
                                                                           'export)
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$21793$12l&&U)
                                                       '" was found where an expression was expected")
                                                     g$e$21782$12l&&U)
                                                   (if (eqv?
                                                         g$t$21794$12l&&U
                                                         'mutable)
                                                     (g$syntax-violation$19808$12l&&U
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$21782$12l&&U)
                                                     (g$syntax-violation$19808$12l&&U
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$21782$12l&&U)))))))))))))))))))
                  g$type$21793$12l&&U)))
              g$kwd$21790$12l&&U
              g$value$21789$12l&&U
              g$type$21788$12l&&U)))))))
   (g$chi-set!$19708$12l&&U
     g$chi-set!$23304$12l&&U
     (case-lambda
       ((g$e$21821$12l&&U g$r$21822$12l&&U g$mr$21823$12l&&U)
        ((case-lambda
           ((g$t$21824$12l&&U)
            ((case-lambda
               ((g$ls/false$21825$12l&&U)
                (if (if g$ls/false$21825$12l&&U
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$21826$12l&&U g$v$21827$12l&&U)
                             (g$id?$19191$12l&&U g$x$21826$12l&&U)))
                          g$ls/false$21825$12l&&U))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$21828$12l&&U g$v$21829$12l&&U)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$19211$12l&&U
                              g$x$21828$12l&&U
                              g$r$21822$12l&&U)))
                         (case-lambda
                           ((g$type$21833$12l&&U
                              g$value$21834$12l&&U
                              g$kwd$21835$12l&&U)
                            ((case-lambda
                               ((g$kwd$21836$12l&&U
                                  g$value$21837$12l&&U
                                  g$type$21838$12l&&U)
                                ((case-lambda
                                   ((g$t$21839$12l&&U)
                                    (if (eqv? g$t$21839$12l&&U 'lexical)
                                      (begin
                                        (g$set-lexical-mutable!$19635$12l&&U
                                          g$value$21837$12l&&U
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$19633$12l&&U
                                            g$value$21837$12l&&U)
                                          (g$chi-expr$19707$12l&&U
                                            g$v$21829$12l&&U
                                            g$r$21822$12l&&U
                                            g$mr$21823$12l&&U)))
                                      (if (eqv?
                                            g$t$21839$12l&&U
                                            'core-prim)
                                        (g$syntax-violation$19808$12l&&U
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$21821$12l&&U)
                                        (if (eqv?
                                              g$t$21839$12l&&U
                                              'global)
                                          (g$syntax-violation$19808$12l&&U
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$21821$12l&&U)
                                          (if (eqv?
                                                g$t$21839$12l&&U
                                                'global-macro!)
                                            (g$chi-expr$19707$12l&&U
                                              (g$chi-global-macro$19704$12l&&U
                                                g$value$21837$12l&&U
                                                g$e$21821$12l&&U
                                                g$r$21822$12l&&U)
                                              g$r$21822$12l&&U
                                              g$mr$21823$12l&&U)
                                            (if (eqv?
                                                  g$t$21839$12l&&U
                                                  'local-macro!)
                                              (g$chi-expr$19707$12l&&U
                                                (g$chi-local-macro$19703$12l&&U
                                                  g$value$21837$12l&&U
                                                  g$e$21821$12l&&U
                                                  g$r$21822$12l&&U)
                                                g$r$21822$12l&&U
                                                g$mr$21823$12l&&U)
                                              (if (eqv?
                                                    g$t$21839$12l&&U
                                                    'mutable)
                                                (g$syntax-violation$19808$12l&&U
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$21821$12l&&U)
                                                (g$syntax-violation$19808$12l&&U
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$21821$12l&&U)))))))))
                                 g$type$21838$12l&&U)))
                             g$kwd$21835$12l&&U
                             g$value$21834$12l&&U
                             g$type$21833$12l&&U))))))
                    g$ls/false$21825$12l&&U)
                  (g$syntax-violation$19808$12l&&U
                    '#f
                    '"invalid syntax"
                    g$t$21824$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$21824$12l&&U
               '(_ any any)))))
         g$e$21821$12l&&U))))
   (g$verify-formals$19709$12l&&U
     g$verify-formals$23305$12l&&U
     (case-lambda
       ((g$fmls$21840$12l&&U g$stx$21841$12l&&U)
        ((case-lambda
           ((g$t$21842$12l&&U)
            ((case-lambda
               ((g$ls/false$21843$12l&&U)
                (if g$ls/false$21843$12l&&U
                  (apply
                    (case-lambda
                      ((g$x*$21844$12l&&U)
                       (if (not (g$valid-bound-ids?$19196$12l&&U
                                  g$x*$21844$12l&&U))
                         (g$invalid-fmls-error$19654$12l&&U
                           g$stx$21841$12l&&U
                           g$fmls$21840$12l&&U)
                         (void))))
                    g$ls/false$21843$12l&&U)
                  ((case-lambda
                     ((g$t$21845$12l&&U)
                      ((case-lambda
                         ((g$ls/false$21846$12l&&U)
                          (if g$ls/false$21846$12l&&U
                            (apply
                              (case-lambda
                                ((g$x*$21847$12l&&U g$x$21848$12l&&U)
                                 (if (not (g$valid-bound-ids?$19196$12l&&U
                                            (cons
                                              g$x$21848$12l&&U
                                              g$x*$21847$12l&&U)))
                                   (g$invalid-fmls-error$19654$12l&&U
                                     g$stx$21841$12l&&U
                                     g$fmls$21840$12l&&U)
                                   (void))))
                              g$ls/false$21846$12l&&U)
                            ((case-lambda
                               ((g$t$21849$12l&&U)
                                ((case-lambda
                                   ((g$ls/false$21850$12l&&U)
                                    (if g$ls/false$21850$12l&&U
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$19808$12l&&U
                                             '#f
                                             '"invalid syntax"
                                             g$stx$21841$12l&&U)))
                                        g$ls/false$21850$12l&&U)
                                      (g$syntax-violation$19808$12l&&U
                                        '#f
                                        '"invalid syntax"
                                        g$t$21849$12l&&U))))
                                 (g$syntax-dispatch$19689$12l&&U
                                   g$t$21849$12l&&U
                                   '_))))
                             g$t$21845$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$21845$12l&&U
                         '#(each+ any () any)))))
                   g$t$21842$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$21842$12l&&U
               'each-any))))
         g$fmls$21840$12l&&U))))
   (g$chi-lambda-clause$19710$12l&&U
     g$chi-lambda-clause$23306$12l&&U
     (case-lambda
       ((g$stx$21851$12l&&U
          g$fmls$21852$12l&&U
          g$body*$21853$12l&&U
          g$r$21854$12l&&U
          g$mr$21855$12l&&U)
        ((case-lambda
           ((g$t$21856$12l&&U)
            ((case-lambda
               ((g$ls/false$21857$12l&&U)
                (if g$ls/false$21857$12l&&U
                  (apply
                    (case-lambda
                      ((g$x*$21858$12l&&U)
                       (begin
                         (g$verify-formals$19709$12l&&U
                           g$fmls$21852$12l&&U
                           g$stx$21851$12l&&U)
                         ((case-lambda
                            ((g$lex*$21859$12l&&U g$lab*$21860$12l&&U)
                             (values
                               g$lex*$21859$12l&&U
                               (g$chi-internal$19718$12l&&U
                                 (g$add-subst$19181$12l&&U
                                   (g$make-full-rib$19157$12l&&U
                                     g$x*$21858$12l&&U
                                     g$lab*$21860$12l&&U)
                                   g$body*$21853$12l&&U)
                                 (g$add-lexicals$19637$12l&&U
                                   g$lab*$21860$12l&&U
                                   g$lex*$21859$12l&&U
                                   g$r$21854$12l&&U)
                                 g$mr$21855$12l&&U))))
                          (g$map$11835$12l&&U
                            g$gen-lexical$19126$12l&&U
                            g$x*$21858$12l&&U)
                          (g$map$11835$12l&&U
                            g$gen-label$19128$12l&&U
                            g$x*$21858$12l&&U)))))
                    g$ls/false$21857$12l&&U)
                  ((case-lambda
                     ((g$t$21861$12l&&U)
                      ((case-lambda
                         ((g$ls/false$21862$12l&&U)
                          (if g$ls/false$21862$12l&&U
                            (apply
                              (case-lambda
                                ((g$x*$21863$12l&&U g$x$21864$12l&&U)
                                 (begin
                                   (g$verify-formals$19709$12l&&U
                                     g$fmls$21852$12l&&U
                                     g$stx$21851$12l&&U)
                                   ((case-lambda
                                      ((g$lex*$21865$12l&&U
                                         g$lab*$21866$12l&&U
                                         g$lex$21867$12l&&U
                                         g$lab$21868$12l&&U)
                                       (values
                                         (append
                                           g$lex*$21865$12l&&U
                                           g$lex$21867$12l&&U)
                                         (g$chi-internal$19718$12l&&U
                                           (g$add-subst$19181$12l&&U
                                             (g$make-full-rib$19157$12l&&U
                                               (cons
                                                 g$x$21864$12l&&U
                                                 g$x*$21863$12l&&U)
                                               (cons
                                                 g$lab$21868$12l&&U
                                                 g$lab*$21866$12l&&U))
                                             g$body*$21853$12l&&U)
                                           (g$add-lexicals$19637$12l&&U
                                             (cons
                                               g$lab$21868$12l&&U
                                               g$lab*$21866$12l&&U)
                                             (cons
                                               g$lex$21867$12l&&U
                                               g$lex*$21865$12l&&U)
                                             g$r$21854$12l&&U)
                                           g$mr$21855$12l&&U))))
                                    (g$map$11835$12l&&U
                                      g$gen-lexical$19126$12l&&U
                                      g$x*$21863$12l&&U)
                                    (g$map$11835$12l&&U
                                      g$gen-label$19128$12l&&U
                                      g$x*$21863$12l&&U)
                                    (g$gen-lexical$19126$12l&&U
                                      g$x$21864$12l&&U)
                                    (g$gen-label$19128$12l&&U
                                      g$x$21864$12l&&U)))))
                              g$ls/false$21862$12l&&U)
                            ((case-lambda
                               ((g$t$21869$12l&&U)
                                ((case-lambda
                                   ((g$ls/false$21870$12l&&U)
                                    (if g$ls/false$21870$12l&&U
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$19808$12l&&U
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$21852$12l&&U)))
                                        g$ls/false$21870$12l&&U)
                                      (g$syntax-violation$19808$12l&&U
                                        '#f
                                        '"invalid syntax"
                                        g$t$21869$12l&&U))))
                                 (g$syntax-dispatch$19689$12l&&U
                                   g$t$21869$12l&&U
                                   '_))))
                             g$t$21861$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$21861$12l&&U
                         '#(each+ any () any)))))
                   g$t$21856$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$21856$12l&&U
               'each-any))))
         g$fmls$21852$12l&&U))))
   (g$chi-lambda-clause*$19711$12l&&U
     g$chi-lambda-clause*$23307$12l&&U
     (case-lambda
       ((g$stx$21871$12l&&U
          g$fmls*$21872$12l&&U
          g$body**$21873$12l&&U
          g$r$21874$12l&&U
          g$mr$21875$12l&&U)
        (if (null? g$fmls*$21872$12l&&U)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$19710$12l&&U
                 g$stx$21871$12l&&U
                 (car g$fmls*$21872$12l&&U)
                 (car g$body**$21873$12l&&U)
                 g$r$21874$12l&&U
                 g$mr$21875$12l&&U)))
            (case-lambda
              ((g$a$21878$12l&&U g$b$21879$12l&&U)
               ((case-lambda
                  ((g$b$21880$12l&&U g$a$21881$12l&&U)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$19711$12l&&U
                          g$stx$21871$12l&&U
                          (cdr g$fmls*$21872$12l&&U)
                          (cdr g$body**$21873$12l&&U)
                          g$r$21874$12l&&U
                          g$mr$21875$12l&&U)))
                     (case-lambda
                       ((g$a*$21884$12l&&U g$b*$21885$12l&&U)
                        ((case-lambda
                           ((g$b*$21886$12l&&U g$a*$21887$12l&&U)
                            (values
                              (cons g$a$21881$12l&&U g$a*$21887$12l&&U)
                              (cons
                                g$b$21880$12l&&U
                                g$b*$21886$12l&&U))))
                         g$b*$21885$12l&&U
                         g$a*$21884$12l&&U))))))
                g$b$21879$12l&&U
                g$a$21878$12l&&U))))))))
   (g$chi-defun$19712$12l&&U
     g$chi-defun$23308$12l&&U
     (case-lambda
       ((g$x$21888$12l&&U g$r$21889$12l&&U g$mr$21890$12l&&U)
        ((case-lambda
           ((g$fmls$21891$12l&&U g$body*$21892$12l&&U)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$19710$12l&&U
                   g$fmls$21891$12l&&U
                   g$fmls$21891$12l&&U
                   g$body*$21892$12l&&U
                   g$r$21889$12l&&U
                   g$mr$21890$12l&&U)))
              (case-lambda
                ((g$fmls$21895$12l&&U g$body$21896$12l&&U)
                 ((case-lambda
                    ((g$body$21897$12l&&U g$fmls$21898$12l&&U)
                     (g$build-lambda$19113$12l&&U
                       '#f
                       g$fmls$21898$12l&&U
                       g$body$21897$12l&&U)))
                  g$body$21896$12l&&U
                  g$fmls$21895$12l&&U))))))
         (car g$x$21888$12l&&U)
         (cdr g$x$21888$12l&&U)))))
   (g$chi-rhs$19713$12l&&U
     g$chi-rhs$23309$12l&&U
     (case-lambda
       ((g$rhs$21899$12l&&U g$r$21900$12l&&U g$mr$21901$12l&&U)
        ((case-lambda
           ((g$t$21902$12l&&U)
            (if (eqv? g$t$21902$12l&&U 'defun)
              (g$chi-defun$19712$12l&&U
                (cdr g$rhs$21899$12l&&U)
                g$r$21900$12l&&U
                g$mr$21901$12l&&U)
              (if (eqv? g$t$21902$12l&&U 'expr)
                ((case-lambda
                   ((g$expr$21903$12l&&U)
                    (g$chi-expr$19707$12l&&U
                      g$expr$21903$12l&&U
                      g$r$21900$12l&&U
                      g$mr$21901$12l&&U)))
                 (cdr g$rhs$21899$12l&&U))
                (if (eqv? g$t$21902$12l&&U 'top-expr)
                  ((case-lambda
                     ((g$expr$21904$12l&&U)
                      (g$build-sequence$19116$12l&&U
                        '#f
                        (list
                          (g$chi-expr$19707$12l&&U
                            g$expr$21904$12l&&U
                            g$r$21900$12l&&U
                            g$mr$21901$12l&&U)
                          (g$build-void$19117$12l&&U)))))
                   (cdr g$rhs$21899$12l&&U))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$21899$12l&&U))))))
         (car g$rhs$21899$12l&&U)))))
   (g$expand-interaction-rhs*/init*$19714$12l&&U
     g$expand-interaction-rhs*/init*$23310$12l&&U
     (case-lambda
       ((g$lhs*$21905$12l&&U
          g$rhs*$21906$12l&&U
          g$init*$21907$12l&&U
          g$r$21908$12l&&U
          g$mr$21909$12l&&U)
        ((letrec ((g$f$21910$12l&&U
                    (case-lambda
                      ((g$lhs*$21911$12l&&U g$rhs*$21912$12l&&U)
                       (if (null? g$lhs*$21911$12l&&U)
                         (g$map$11835$12l&&U
                           (case-lambda
                             ((g$x$21913$12l&&U)
                              (g$chi-expr$19707$12l&&U
                                g$x$21913$12l&&U
                                g$r$21908$12l&&U
                                g$mr$21909$12l&&U)))
                           g$init*$21907$12l&&U)
                         ((case-lambda
                            ((g$lhs$21914$12l&&U g$rhs$21915$12l&&U)
                             ((case-lambda
                                ((g$t$21916$12l&&U)
                                 (if (eqv? g$t$21916$12l&&U 'defun)
                                   ((case-lambda
                                      ((g$rhs$21917$12l&&U)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$21914$12l&&U
                                           g$rhs$21917$12l&&U)
                                         (g$f$21910$12l&&U
                                           (cdr g$lhs*$21911$12l&&U)
                                           (cdr g$rhs*$21912$12l&&U)))))
                                    (g$chi-defun$19712$12l&&U
                                      (cdr g$rhs$21915$12l&&U)
                                      g$r$21908$12l&&U
                                      g$mr$21909$12l&&U))
                                   (if (eqv? g$t$21916$12l&&U 'expr)
                                     ((case-lambda
                                        ((g$rhs$21918$12l&&U)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$21914$12l&&U
                                             g$rhs$21918$12l&&U)
                                           (g$f$21910$12l&&U
                                             (cdr g$lhs*$21911$12l&&U)
                                             (cdr g$rhs*$21912$12l&&U)))))
                                      (g$chi-expr$19707$12l&&U
                                        (cdr g$rhs$21915$12l&&U)
                                        g$r$21908$12l&&U
                                        g$mr$21909$12l&&U))
                                     (if (eqv?
                                           g$t$21916$12l&&U
                                           'top-expr)
                                       ((case-lambda
                                          ((g$e$21919$12l&&U)
                                           (cons
                                             g$e$21919$12l&&U
                                             (g$f$21910$12l&&U
                                               (cdr g$lhs*$21911$12l&&U)
                                               (cdr g$rhs*$21912$12l&&U)))))
                                        (g$chi-expr$19707$12l&&U
                                          (cdr g$rhs$21915$12l&&U)
                                          g$r$21908$12l&&U
                                          g$mr$21909$12l&&U))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$21915$12l&&U))))))
                              (car g$rhs$21915$12l&&U))))
                          (car g$lhs*$21911$12l&&U)
                          (car g$rhs*$21912$12l&&U)))))))
           g$f$21910$12l&&U)
         g$lhs*$21905$12l&&U
         g$rhs*$21906$12l&&U))))
   (g$chi-rhs*$19715$12l&&U
     g$chi-rhs*$23311$12l&&U
     (case-lambda
       ((g$rhs*$21920$12l&&U g$r$21921$12l&&U g$mr$21922$12l&&U)
        ((letrec ((g$f$21923$12l&&U
                    (case-lambda
                      ((g$ls$21924$12l&&U)
                       (if (null? g$ls$21924$12l&&U)
                         '()
                         ((case-lambda
                            ((g$a$21925$12l&&U)
                             (cons
                               g$a$21925$12l&&U
                               (g$f$21923$12l&&U
                                 (cdr g$ls$21924$12l&&U)))))
                          (g$chi-rhs$19713$12l&&U
                            (car g$ls$21924$12l&&U)
                            g$r$21921$12l&&U
                            g$mr$21922$12l&&U)))))))
           g$f$21923$12l&&U)
         g$rhs*$21920$12l&&U))))
   (g$find-bound=?$19716$12l&&U
     g$find-bound=?$23312$12l&&U
     (case-lambda
       ((g$x$21926$12l&&U g$lhs*$21927$12l&&U g$rhs*$21928$12l&&U)
        (if (null? g$lhs*$21927$12l&&U)
          '#f
          (if (g$bound-id=?$19194$12l&&U
                g$x$21926$12l&&U
                (car g$lhs*$21927$12l&&U))
            (car g$rhs*$21928$12l&&U)
            (g$find-bound=?$19716$12l&&U
              g$x$21926$12l&&U
              (cdr g$lhs*$21927$12l&&U)
              (cdr g$rhs*$21928$12l&&U)))))))
   (g$find-dups$19717$12l&&U
     g$find-dups$23313$12l&&U
     (case-lambda
       ((g$ls$21929$12l&&U)
        ((letrec ((g$f$21930$12l&&U
                    (case-lambda
                      ((g$ls$21931$12l&&U g$dups$21932$12l&&U)
                       (if (null? g$ls$21931$12l&&U)
                         g$dups$21932$12l&&U
                         ((case-lambda
                            ((g$t$21933$12l&&U)
                             (if g$t$21933$12l&&U
                               ((case-lambda
                                  ((g$x$21934$12l&&U)
                                   (g$f$21930$12l&&U
                                     (cdr g$ls$21931$12l&&U)
                                     (cons
                                       (list
                                         (car g$ls$21931$12l&&U)
                                         g$x$21934$12l&&U)
                                       g$dups$21932$12l&&U))))
                                g$t$21933$12l&&U)
                               (g$f$21930$12l&&U
                                 (cdr g$ls$21931$12l&&U)
                                 g$dups$21932$12l&&U))))
                          (g$find-bound=?$19716$12l&&U
                            (car g$ls$21931$12l&&U)
                            (cdr g$ls$21931$12l&&U)
                            (cdr g$ls$21931$12l&&U))))))))
           g$f$21930$12l&&U)
         g$ls$21929$12l&&U
         '()))))
   (g$chi-internal$19718$12l&&U
     g$chi-internal$23314$12l&&U
     (case-lambda
       ((g$e*$21935$12l&&U g$r$21936$12l&&U g$mr$21937$12l&&U)
        ((case-lambda
           ((g$rib$21938$12l&&U)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$19736$12l&&U
                   (g$map$11835$12l&&U
                     (case-lambda
                       ((g$x$21947$12l&&U)
                        (g$add-subst$19181$12l&&U
                          g$rib$21938$12l&&U
                          g$x$21947$12l&&U)))
                     (g$syntax->list$19190$12l&&U g$e*$21935$12l&&U))
                   g$r$21936$12l&&U
                   g$mr$21937$12l&&U
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$21938$12l&&U
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$21948$12l&&U
                   g$r$21949$12l&&U
                   g$mr$21950$12l&&U
                   g$lex*$21951$12l&&U
                   g$rhs*$21952$12l&&U
                   g$mod**$21953$12l&&U
                   g$kwd*$21954$12l&&U
                   g$_exp*$21955$12l&&U)
                 ((case-lambda
                    ((g$_exp*$21956$12l&&U
                       g$kwd*$21957$12l&&U
                       g$mod**$21958$12l&&U
                       g$rhs*$21959$12l&&U
                       g$lex*$21960$12l&&U
                       g$mr$21961$12l&&U
                       g$r$21962$12l&&U
                       g$e*$21963$12l&&U)
                     (begin
                       (if (null? g$e*$21963$12l&&U)
                         (g$syntax-violation$19808$12l&&U
                           '#f
                           '"no expression in body"
                           g$e*$21963$12l&&U)
                         (void))
                       ((case-lambda
                          ((g$init*$21964$12l&&U)
                           ((case-lambda
                              ((g$rhs*$21965$12l&&U)
                               (g$build-letrec*$19119$12l&&U
                                 '#f
                                 (g$reverse$12595$12l&&U
                                   g$lex*$21960$12l&&U)
                                 (g$reverse$12595$12l&&U
                                   g$rhs*$21965$12l&&U)
                                 (g$build-sequence$19116$12l&&U
                                   '#f
                                   g$init*$21964$12l&&U))))
                            (g$chi-rhs*$19715$12l&&U
                              g$rhs*$21959$12l&&U
                              g$r$21962$12l&&U
                              g$mr$21961$12l&&U))))
                        (g$chi-expr*$19705$12l&&U
                          (append
                            (apply
                              append
                              (g$reverse$12595$12l&&U
                                g$mod**$21958$12l&&U))
                            g$e*$21963$12l&&U)
                          g$r$21962$12l&&U
                          g$mr$21961$12l&&U)))))
                  g$_exp*$21955$12l&&U
                  g$kwd*$21954$12l&&U
                  g$mod**$21953$12l&&U
                  g$rhs*$21952$12l&&U
                  g$lex*$21951$12l&&U
                  g$mr$21950$12l&&U
                  g$r$21949$12l&&U
                  g$e*$21948$12l&&U))))))
         (g$make-empty-rib$19149$12l&&U)))))
   (g$parse-module$19719$12l&&U
     g$parse-module$23315$12l&&U
     (case-lambda
       ((g$e$21966$12l&&U)
        ((case-lambda
           ((g$t$21967$12l&&U)
            ((case-lambda
               ((g$ls/false$21968$12l&&U)
                (if g$ls/false$21968$12l&&U
                  (apply
                    (case-lambda
                      ((g$export*$21969$12l&&U g$b*$21970$12l&&U)
                       (begin
                         (if (not (g$for-all$11833$12l&&U
                                    g$id?$19191$12l&&U
                                    g$export*$21969$12l&&U))
                           (g$syntax-violation$19808$12l&&U
                             '#f
                             '"module exports must be identifiers"
                             g$e$21966$12l&&U)
                           (void))
                         (values
                           '#f
                           (g$list->vector$12589$12l&&U
                             g$export*$21969$12l&&U)
                           g$b*$21970$12l&&U))))
                    g$ls/false$21968$12l&&U)
                  ((case-lambda
                     ((g$t$21971$12l&&U)
                      ((case-lambda
                         ((g$ls/false$21972$12l&&U)
                          (if g$ls/false$21972$12l&&U
                            (apply
                              (case-lambda
                                ((g$name$21973$12l&&U
                                   g$export*$21974$12l&&U
                                   g$b*$21975$12l&&U)
                                 (begin
                                   (if (not (g$id?$19191$12l&&U
                                              g$name$21973$12l&&U))
                                     (g$syntax-violation$19808$12l&&U
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$21966$12l&&U)
                                     (void))
                                   (if (not (g$for-all$11833$12l&&U
                                              g$id?$19191$12l&&U
                                              g$export*$21974$12l&&U))
                                     (g$syntax-violation$19808$12l&&U
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$21966$12l&&U)
                                     (void))
                                   (values
                                     g$name$21973$12l&&U
                                     (g$list->vector$12589$12l&&U
                                       g$export*$21974$12l&&U)
                                     g$b*$21975$12l&&U))))
                              g$ls/false$21972$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"invalid syntax"
                              g$t$21971$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$21971$12l&&U
                         '(_ any each-any . each-any)))))
                   g$t$21967$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$21967$12l&&U
               '(_ each-any . each-any)))))
         g$e$21966$12l&&U))))
   (g$9518$19720$12l&&U
     g$9518$23316$12l&&U
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$9521$12l&&U
       '#t
       '#t
       '#((mutable first-mark)
          (mutable exp-id-vec)
          (mutable exp-lab-vec))))
   (g$9520$19721$12l&&U g$9520$23317$12l&&U '#f)
   (g$9519$19722$12l&&U
     g$9519$23318$12l&&U
     (make-record-constructor-descriptor
       g$9518$19720$12l&&U
       '#f
       g$9520$19721$12l&&U))
   (g$module-interface?$19725$12l&&U
     g$module-interface?$23319$12l&&U
     (record-predicate g$9518$19720$12l&&U))
   (g$make-module-interface$19726$12l&&U
     g$make-module-interface$23320$12l&&U
     (record-constructor g$9519$19722$12l&&U))
   (g$module-interface-first-mark$19727$12l&&U
     g$module-interface-first-mark$23321$12l&&U
     (record-accessor g$9518$19720$12l&&U '0))
   (g$module-interface-exp-id-vec$19728$12l&&U
     g$module-interface-exp-id-vec$23322$12l&&U
     (record-accessor g$9518$19720$12l&&U '1))
   (g$module-interface-exp-lab-vec$19729$12l&&U
     g$module-interface-exp-lab-vec$23323$12l&&U
     (record-accessor g$9518$19720$12l&&U '2))
   (g$set-module-interface-first-mark!$19730$12l&&U
     g$set-module-interface-first-mark!$23324$12l&&U
     (record-mutator g$9518$19720$12l&&U '0))
   (g$set-module-interface-exp-id-vec!$19731$12l&&U
     g$set-module-interface-exp-id-vec!$23325$12l&&U
     (record-mutator g$9518$19720$12l&&U '1))
   (g$set-module-interface-exp-lab-vec!$19732$12l&&U
     g$set-module-interface-exp-lab-vec!$23326$12l&&U
     (record-mutator g$9518$19720$12l&&U '2))
   (g$module-interface-exp-id*$19733$12l&&U
     g$module-interface-exp-id*$23327$12l&&U
     (case-lambda
       ((g$iface$21976$12l&&U g$id$21977$12l&&U)
        (letrec* ((g$diff-marks$21978$12l&&U
                    (case-lambda
                      ((g$ls$21982$12l&&U g$x$21983$12l&&U)
                       (begin
                         (if (null? g$ls$21982$12l&&U)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$21984$12l&&U)
                             (if (eq? g$a$21984$12l&&U g$x$21983$12l&&U)
                               '()
                               (cons
                                 g$a$21984$12l&&U
                                 (g$diff-marks$21978$12l&&U
                                   (cdr g$ls$21982$12l&&U)
                                   g$x$21983$12l&&U)))))
                          (car g$ls$21982$12l&&U)))))))
          ((case-lambda
             ((g$diff$21979$12l&&U g$id-vec$21980$12l&&U)
              (if (null? g$diff$21979$12l&&U)
                g$id-vec$21980$12l&&U
                (g$vector-map$12648$12l&&U
                  (case-lambda
                    ((g$x$21981$12l&&U)
                     (g$make-stx$19164$12l&&U
                       (g$stx-expr$19165$12l&&U g$x$21981$12l&&U)
                       (append
                         g$diff$21979$12l&&U
                         (g$stx-mark*$19166$12l&&U g$x$21981$12l&&U))
                       '()
                       '())))
                  g$id-vec$21980$12l&&U))))
           (g$diff-marks$21978$12l&&U
             (g$stx-mark*$19166$12l&&U g$id$21977$12l&&U)
             (g$module-interface-first-mark$19727$12l&&U
               g$iface$21976$12l&&U))
           (g$module-interface-exp-id-vec$19728$12l&&U
             g$iface$21976$12l&&U))))))
   (g$syntax-transpose$19734$12l&&U
     g$syntax-transpose$23328$12l&&U
     (case-lambda
       ((g$object$21985$12l&&U
          g$base-id$21986$12l&&U
          g$new-id$21987$12l&&U)
        (letrec* ((g$who$21988$12l&&U 'syntax-transpose)
                  (g$err$21989$12l&&U
                    (case-lambda
                      ((g$msg$22031$12l&&U . g$args$22032$12l&&U)
                       (apply
                         assertion-violation
                         g$who$21988$12l&&U
                         g$msg$22031$12l&&U
                         g$args$22032$12l&&U))))
                  (g$split$21990$12l&&U
                    (case-lambda
                      ((g$s*$22024$12l&&U)
                       (if (eq? (car g$s*$22024$12l&&U) 'shift)
                         (values (list 'shift) (cdr g$s*$22024$12l&&U))
                         (call-with-values
                           (case-lambda
                             (()
                              (g$split$21990$12l&&U
                                (cdr g$s*$22024$12l&&U))))
                           (case-lambda
                             ((g$s1*$22027$12l&&U g$s2*$22028$12l&&U)
                              ((case-lambda
                                 ((g$s2*$22029$12l&&U
                                    g$s1*$22030$12l&&U)
                                  (values
                                    (cons
                                      (car g$s*$22024$12l&&U)
                                      g$s1*$22030$12l&&U)
                                    g$s2*$22029$12l&&U)))
                               g$s2*$22028$12l&&U
                               g$s1*$22027$12l&&U))))))))
                  (g$final$21991$12l&&U
                    (case-lambda
                      ((g$s*$22022$12l&&U)
                       (if ((case-lambda
                              ((g$t$22023$12l&&U)
                               (if g$t$22023$12l&&U
                                 g$t$22023$12l&&U
                                 (begin
                                   '#f
                                   (eq? (car g$s*$22022$12l&&U)
                                        'shift)))))
                            (null? g$s*$22022$12l&&U))
                         '()
                         (cons
                           (car g$s*$22022$12l&&U)
                           (g$final$21991$12l&&U
                             (cdr g$s*$22022$12l&&U)))))))
                  (g$diff$21992$12l&&U
                    (case-lambda
                      ((g$m$22002$12l&&U
                         g$m*$22003$12l&&U
                         g$s*$22004$12l&&U
                         g$ae*$22005$12l&&U)
                       (if (null? g$m*$22003$12l&&U)
                         (g$err$21989$12l&&U
                           '"unmatched identifiers"
                           g$base-id$21986$12l&&U
                           g$new-id$21987$12l&&U)
                         ((case-lambda
                            ((g$m1$22006$12l&&U)
                             (if (eq? g$m$22002$12l&&U
                                      g$m1$22006$12l&&U)
                               (values
                                 '()
                                 (g$final$21991$12l&&U
                                   g$s*$22004$12l&&U)
                                 '())
                               (call-with-values
                                 (case-lambda
                                   (()
                                    (g$split$21990$12l&&U
                                      g$s*$22004$12l&&U)))
                                 (case-lambda
                                   ((g$s1*$22009$12l&&U
                                      g$s2*$22010$12l&&U)
                                    ((case-lambda
                                       ((g$s2*$22011$12l&&U
                                          g$s1*$22012$12l&&U)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$diff$21992$12l&&U
                                               g$m$22002$12l&&U
                                               (cdr g$m*$22003$12l&&U)
                                               g$s2*$22011$12l&&U
                                               (cdr g$ae*$22005$12l&&U))))
                                          (case-lambda
                                            ((g$nm*$22016$12l&&U
                                               g$ns*$22017$12l&&U
                                               g$nae*$22018$12l&&U)
                                             ((case-lambda
                                                ((g$nae*$22019$12l&&U
                                                   g$ns*$22020$12l&&U
                                                   g$nm*$22021$12l&&U)
                                                 (values
                                                   (cons
                                                     g$m1$22006$12l&&U
                                                     g$nm*$22021$12l&&U)
                                                   (append
                                                     g$s1*$22012$12l&&U
                                                     g$ns*$22020$12l&&U)
                                                   (cons
                                                     (car g$ae*$22005$12l&&U)
                                                     g$nae*$22019$12l&&U))))
                                              g$nae*$22018$12l&&U
                                              g$ns*$22017$12l&&U
                                              g$nm*$22016$12l&&U))))))
                                     g$s2*$22010$12l&&U
                                     g$s1*$22009$12l&&U)))))))
                          (car g$m*$22003$12l&&U)))))))
          (begin
            (if (not (g$id?$19191$12l&&U g$base-id$21986$12l&&U))
              (g$err$21989$12l&&U
                '"not an identifier"
                g$base-id$21986$12l&&U)
              (void))
            (if (not (g$id?$19191$12l&&U g$new-id$21987$12l&&U))
              (g$err$21989$12l&&U
                '"not an identifier"
                g$new-id$21987$12l&&U)
              (void))
            (if (not (g$free-identifier=?$19799$12l&&U
                       g$base-id$21986$12l&&U
                       g$new-id$21987$12l&&U))
              (g$err$21989$12l&&U
                '"not the same identifier"
                g$base-id$21986$12l&&U
                g$new-id$21987$12l&&U)
              (void))
            (call-with-values
              (case-lambda
                (()
                 (g$diff$21992$12l&&U
                   (car (g$stx-mark*$19166$12l&&U
                          g$base-id$21986$12l&&U))
                   (g$stx-mark*$19166$12l&&U g$new-id$21987$12l&&U)
                   (g$stx-subst*$19167$12l&&U g$new-id$21987$12l&&U)
                   (g$stx-ae*$19168$12l&&U g$new-id$21987$12l&&U))))
              (case-lambda
                ((g$m*$21996$12l&&U
                   g$s*$21997$12l&&U
                   g$ae*$21998$12l&&U)
                 ((case-lambda
                    ((g$ae*$21999$12l&&U
                       g$s*$22000$12l&&U
                       g$m*$22001$12l&&U)
                     (if (if (null? g$m*$22001$12l&&U)
                           (begin '#f (null? g$s*$22000$12l&&U))
                           '#f)
                       g$object$21985$12l&&U
                       (g$mkstx$19179$12l&&U
                         g$object$21985$12l&&U
                         g$m*$22001$12l&&U
                         g$s*$22000$12l&&U
                         g$ae*$21999$12l&&U))))
                  g$ae*$21998$12l&&U
                  g$s*$21997$12l&&U
                  g$m*$21996$12l&&U)))))))))
   (g$chi-internal-module$19735$12l&&U
     g$chi-internal-module$23329$12l&&U
     (case-lambda
       ((g$e$22033$12l&&U
          g$r$22034$12l&&U
          g$mr$22035$12l&&U
          g$lex*$22036$12l&&U
          g$rhs*$22037$12l&&U
          g$mod**$22038$12l&&U
          g$kwd*$22039$12l&&U)
        (call-with-values
          (case-lambda
            (() (g$parse-module$19719$12l&&U g$e$22033$12l&&U)))
          (case-lambda
            ((g$name$22043$12l&&U
               g$exp-id*$22044$12l&&U
               g$e*$22045$12l&&U)
             ((case-lambda
                ((g$e*$22046$12l&&U
                   g$exp-id*$22047$12l&&U
                   g$name$22048$12l&&U)
                 ((case-lambda
                    ((g$rib$22049$12l&&U)
                     ((case-lambda
                        ((g$e*$22050$12l&&U)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$19736$12l&&U
                                g$e*$22050$12l&&U
                                g$r$22034$12l&&U
                                g$mr$22035$12l&&U
                                g$lex*$22036$12l&&U
                                g$rhs*$22037$12l&&U
                                g$mod**$22038$12l&&U
                                g$kwd*$22039$12l&&U
                                '()
                                g$rib$22049$12l&&U
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$22059$12l&&U
                                g$r$22060$12l&&U
                                g$mr$22061$12l&&U
                                g$lex*$22062$12l&&U
                                g$rhs*$22063$12l&&U
                                g$mod**$22064$12l&&U
                                g$kwd*$22065$12l&&U
                                g$_exp*$22066$12l&&U)
                              ((case-lambda
                                 ((g$_exp*$22067$12l&&U
                                    g$kwd*$22068$12l&&U
                                    g$mod**$22069$12l&&U
                                    g$rhs*$22070$12l&&U
                                    g$lex*$22071$12l&&U
                                    g$mr$22072$12l&&U
                                    g$r$22073$12l&&U
                                    g$e*$22074$12l&&U)
                                  ((case-lambda
                                     ((g$exp-lab*$22075$12l&&U
                                        g$mod**$22076$12l&&U)
                                      (if (not g$name$22048$12l&&U)
                                        (values
                                          g$lex*$22071$12l&&U
                                          g$rhs*$22070$12l&&U
                                          g$exp-id*$22047$12l&&U
                                          g$exp-lab*$22075$12l&&U
                                          g$r$22073$12l&&U
                                          g$mr$22072$12l&&U
                                          g$mod**$22076$12l&&U
                                          g$kwd*$22068$12l&&U)
                                        ((case-lambda
                                           ((g$lab$22077$12l&&U
                                              g$iface$22078$12l&&U)
                                            (values
                                              g$lex*$22071$12l&&U
                                              g$rhs*$22070$12l&&U
                                              (vector
                                                g$name$22048$12l&&U)
                                              (vector
                                                g$lab$22077$12l&&U)
                                              (cons
                                                (cons
                                                  g$lab$22077$12l&&U
                                                  (cons
                                                    '$module
                                                    g$iface$22078$12l&&U))
                                                g$r$22073$12l&&U)
                                              (cons
                                                (cons
                                                  g$lab$22077$12l&&U
                                                  (cons
                                                    '$module
                                                    g$iface$22078$12l&&U))
                                                g$mr$22072$12l&&U)
                                              g$mod**$22076$12l&&U
                                              g$kwd*$22068$12l&&U)))
                                         (g$gen-label$19128$12l&&U
                                           'module)
                                         (g$make-module-interface$19726$12l&&U
                                           (car (g$stx-mark*$19166$12l&&U
                                                  g$name$22048$12l&&U))
                                           (g$vector-map$12648$12l&&U
                                             (case-lambda
                                               ((g$x$22079$12l&&U)
                                                (g$make-stx$19164$12l&&U
                                                  (g$stx-expr$19165$12l&&U
                                                    g$x$22079$12l&&U)
                                                  (g$stx-mark*$19166$12l&&U
                                                    g$x$22079$12l&&U)
                                                  '()
                                                  '())))
                                             g$exp-id*$22047$12l&&U)
                                           g$exp-lab*$22075$12l&&U)))))
                                   (g$vector-map$12648$12l&&U
                                     (case-lambda
                                       ((g$x$22080$12l&&U)
                                        ((case-lambda
                                           ((g$t$22081$12l&&U)
                                            (if g$t$22081$12l&&U
                                              g$t$22081$12l&&U
                                              (begin
                                                '#f
                                                (g$syntax-violation$19808$12l&&U
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$22080$12l&&U)))))
                                         (g$id->label$19204$12l&&U
                                           (g$make-stx$19164$12l&&U
                                             (g$id->sym$19192$12l&&U
                                               g$x$22080$12l&&U)
                                             (g$stx-mark*$19166$12l&&U
                                               g$x$22080$12l&&U)
                                             (list g$rib$22049$12l&&U)
                                             '())))))
                                     g$exp-id*$22047$12l&&U)
                                   (cons
                                     g$e*$22074$12l&&U
                                     g$mod**$22069$12l&&U))))
                               g$_exp*$22066$12l&&U
                               g$kwd*$22065$12l&&U
                               g$mod**$22064$12l&&U
                               g$rhs*$22063$12l&&U
                               g$lex*$22062$12l&&U
                               g$mr$22061$12l&&U
                               g$r$22060$12l&&U
                               g$e*$22059$12l&&U))))))
                      (g$map$11835$12l&&U
                        (case-lambda
                          ((g$x$22082$12l&&U)
                           (g$add-subst$19181$12l&&U
                             g$rib$22049$12l&&U
                             g$x$22082$12l&&U)))
                        (g$syntax->list$19190$12l&&U
                          g$e*$22046$12l&&U)))))
                  (g$make-empty-rib$19149$12l&&U))))
              g$e*$22045$12l&&U
              g$exp-id*$22044$12l&&U
              g$name$22043$12l&&U)))))))
   (g$chi-body*$19736$12l&&U
     g$chi-body*$23330$12l&&U
     (case-lambda
       ((g$e*$22083$12l&&U
          g$r$22084$12l&&U
          g$mr$22085$12l&&U
          g$lex*$22086$12l&&U
          g$rhs*$22087$12l&&U
          g$mod**$22088$12l&&U
          g$kwd*$22089$12l&&U
          g$exp*$22090$12l&&U
          g$rib$22091$12l&&U
          g$mix?$22092$12l&&U
          g$sd?$22093$12l&&U)
        (if (null? g$e*$22083$12l&&U)
          (values
            g$e*$22083$12l&&U
            g$r$22084$12l&&U
            g$mr$22085$12l&&U
            g$lex*$22086$12l&&U
            g$rhs*$22087$12l&&U
            g$mod**$22088$12l&&U
            g$kwd*$22089$12l&&U
            g$exp*$22090$12l&&U)
          ((case-lambda
             ((g$e$22094$12l&&U)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$19211$12l&&U
                     g$e$22094$12l&&U
                     g$r$22084$12l&&U)))
                (case-lambda
                  ((g$type$22098$12l&&U
                     g$value$22099$12l&&U
                     g$kwd$22100$12l&&U)
                   ((case-lambda
                      ((g$kwd$22101$12l&&U
                         g$value$22102$12l&&U
                         g$type$22103$12l&&U)
                       ((case-lambda
                          ((g$kwd*$22104$12l&&U)
                           ((case-lambda
                              ((g$t$22105$12l&&U)
                               (if (eqv? g$t$22105$12l&&U 'define)
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$19629$12l&&U
                                        g$e$22094$12l&&U)))
                                   (case-lambda
                                     ((g$id$22108$12l&&U
                                        g$rhs$22109$12l&&U)
                                      ((case-lambda
                                         ((g$rhs$22110$12l&&U
                                            g$id$22111$12l&&U)
                                          (begin
                                            (if (g$bound-id-member?$19198$12l&&U
                                                  g$id$22111$12l&&U
                                                  g$kwd*$22104$12l&&U)
                                              (g$syntax-violation$19808$12l&&U
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$22094$12l&&U)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$19130$12l&&U
                                                   g$id$22111$12l&&U
                                                   g$rib$22091$12l&&U
                                                   g$sd?$22093$12l&&U)))
                                              (case-lambda
                                                ((g$lab$22114$12l&&U
                                                   g$lex$22115$12l&&U)
                                                 ((case-lambda
                                                    ((g$lex$22116$12l&&U
                                                       g$lab$22117$12l&&U)
                                                     (begin
                                                       (g$extend-rib!$19152$12l&&U
                                                         g$rib$22091$12l&&U
                                                         g$id$22111$12l&&U
                                                         g$lab$22117$12l&&U
                                                         g$sd?$22093$12l&&U)
                                                       (g$chi-body*$19736$12l&&U
                                                         (cdr g$e*$22083$12l&&U)
                                                         (g$add-lexical$19636$12l&&U
                                                           g$lab$22117$12l&&U
                                                           g$lex$22116$12l&&U
                                                           g$r$22084$12l&&U)
                                                         g$mr$22085$12l&&U
                                                         (cons
                                                           g$lex$22116$12l&&U
                                                           g$lex*$22086$12l&&U)
                                                         (cons
                                                           g$rhs$22110$12l&&U
                                                           g$rhs*$22087$12l&&U)
                                                         g$mod**$22088$12l&&U
                                                         g$kwd*$22104$12l&&U
                                                         g$exp*$22090$12l&&U
                                                         g$rib$22091$12l&&U
                                                         g$mix?$22092$12l&&U
                                                         g$sd?$22093$12l&&U))))
                                                  g$lex$22115$12l&&U
                                                  g$lab$22114$12l&&U)))))))
                                       g$rhs$22109$12l&&U
                                       g$id$22108$12l&&U))))
                                 (if (eqv?
                                       g$t$22105$12l&&U
                                       'define-syntax)
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$19630$12l&&U
                                          g$e$22094$12l&&U)))
                                     (case-lambda
                                       ((g$id$22120$12l&&U
                                          g$rhs$22121$12l&&U)
                                        ((case-lambda
                                           ((g$rhs$22122$12l&&U
                                              g$id$22123$12l&&U)
                                            (begin
                                              (if (g$bound-id-member?$19198$12l&&U
                                                    g$id$22123$12l&&U
                                                    g$kwd*$22104$12l&&U)
                                                (g$syntax-violation$19808$12l&&U
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$22094$12l&&U)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$22124$12l&&U)
                                                  ((case-lambda
                                                     ((g$expanded-rhs$22125$12l&&U)
                                                      (begin
                                                        (g$extend-rib!$19152$12l&&U
                                                          g$rib$22091$12l&&U
                                                          g$id$22123$12l&&U
                                                          g$lab$22124$12l&&U
                                                          g$sd?$22093$12l&&U)
                                                        ((case-lambda
                                                           ((g$b$22126$12l&&U)
                                                            (g$chi-body*$19736$12l&&U
                                                              (cdr g$e*$22083$12l&&U)
                                                              (cons
                                                                (cons
                                                                  g$lab$22124$12l&&U
                                                                  g$b$22126$12l&&U)
                                                                g$r$22084$12l&&U)
                                                              (cons
                                                                (cons
                                                                  g$lab$22124$12l&&U
                                                                  g$b$22126$12l&&U)
                                                                g$mr$22085$12l&&U)
                                                              g$lex*$22086$12l&&U
                                                              g$rhs*$22087$12l&&U
                                                              g$mod**$22088$12l&&U
                                                              g$kwd*$22104$12l&&U
                                                              g$exp*$22090$12l&&U
                                                              g$rib$22091$12l&&U
                                                              g$mix?$22092$12l&&U
                                                              g$sd?$22093$12l&&U)))
                                                         (g$make-eval-transformer$19239$12l&&U
                                                           g$expanded-rhs$22125$12l&&U)))))
                                                   (g$expand-transformer$19737$12l&&U
                                                     g$rhs$22122$12l&&U
                                                     g$mr$22085$12l&&U))))
                                               (g$gen-define-label$19131$12l&&U
                                                 g$id$22123$12l&&U
                                                 g$rib$22091$12l&&U
                                                 g$sd?$22093$12l&&U)))))
                                         g$rhs$22121$12l&&U
                                         g$id$22120$12l&&U))))
                                   (if (g$memv$11828$12l&&U
                                         g$t$22105$12l&&U
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$22127$12l&&U)
                                         ((case-lambda
                                            ((g$ls/false$22128$12l&&U)
                                             (if (if g$ls/false$22128$12l&&U
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$22129$12l&&U
                                                            g$xrhs*$22130$12l&&U
                                                            g$xbody*$22131$12l&&U)
                                                          (if (not (g$valid-bound-ids?$19196$12l&&U
                                                                     g$xlhs*$22129$12l&&U))
                                                            (g$syntax-violation$19808$12l&&U
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$22094$12l&&U)
                                                            (void))))
                                                       g$ls/false$22128$12l&&U))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$22132$12l&&U
                                                      g$xrhs*$22133$12l&&U
                                                      g$xbody*$22134$12l&&U)
                                                    ((case-lambda
                                                       ((g$xlab*$22135$12l&&U)
                                                        ((case-lambda
                                                           ((g$xrib$22136$12l&&U)
                                                            ((case-lambda
                                                               ((g$xb*$22137$12l&&U)
                                                                (g$chi-body*$19736$12l&&U
                                                                  (append
                                                                    (g$map$11835$12l&&U
                                                                      (case-lambda
                                                                        ((g$x$22138$12l&&U)
                                                                         (g$add-subst$19181$12l&&U
                                                                           g$xrib$22136$12l&&U
                                                                           g$x$22138$12l&&U)))
                                                                      g$xbody*$22134$12l&&U)
                                                                    (cdr g$e*$22083$12l&&U))
                                                                  (append
                                                                    (g$map$11835$12l&&U
                                                                      cons
                                                                      g$xlab*$22135$12l&&U
                                                                      g$xb*$22137$12l&&U)
                                                                    g$r$22084$12l&&U)
                                                                  (append
                                                                    (g$map$11835$12l&&U
                                                                      cons
                                                                      g$xlab*$22135$12l&&U
                                                                      g$xb*$22137$12l&&U)
                                                                    g$mr$22085$12l&&U)
                                                                  g$lex*$22086$12l&&U
                                                                  g$rhs*$22087$12l&&U
                                                                  g$mod**$22088$12l&&U
                                                                  g$kwd*$22104$12l&&U
                                                                  g$exp*$22090$12l&&U
                                                                  g$rib$22091$12l&&U
                                                                  g$mix?$22092$12l&&U
                                                                  g$sd?$22093$12l&&U)))
                                                             (g$map$11835$12l&&U
                                                               (case-lambda
                                                                 ((g$x$22139$12l&&U)
                                                                  (g$make-eval-transformer$19239$12l&&U
                                                                    (g$expand-transformer$19737$12l&&U
                                                                      (if (eq? g$type$22103$12l&&U
                                                                               'let-syntax)
                                                                        g$x$22139$12l&&U
                                                                        (g$add-subst$19181$12l&&U
                                                                          g$xrib$22136$12l&&U
                                                                          g$x$22139$12l&&U))
                                                                      g$mr$22085$12l&&U))))
                                                               g$xrhs*$22133$12l&&U))))
                                                         (g$make-full-rib$19157$12l&&U
                                                           g$xlhs*$22132$12l&&U
                                                           g$xlab*$22135$12l&&U))))
                                                     (g$map$11835$12l&&U
                                                       g$gen-label$19128$12l&&U
                                                       g$xlhs*$22132$12l&&U))))
                                                 g$ls/false$22128$12l&&U)
                                               (g$syntax-violation$19808$12l&&U
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$22127$12l&&U))))
                                          (g$syntax-dispatch$19689$12l&&U
                                            g$t$22127$12l&&U
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$22094$12l&&U)
                                     (if (eqv? g$t$22105$12l&&U 'begin)
                                       ((case-lambda
                                          ((g$t$22140$12l&&U)
                                           ((case-lambda
                                              ((g$ls/false$22141$12l&&U)
                                               (if g$ls/false$22141$12l&&U
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$22142$12l&&U)
                                                      (g$chi-body*$19736$12l&&U
                                                        (append
                                                          g$x*$22142$12l&&U
                                                          (cdr g$e*$22083$12l&&U))
                                                        g$r$22084$12l&&U
                                                        g$mr$22085$12l&&U
                                                        g$lex*$22086$12l&&U
                                                        g$rhs*$22087$12l&&U
                                                        g$mod**$22088$12l&&U
                                                        g$kwd*$22104$12l&&U
                                                        g$exp*$22090$12l&&U
                                                        g$rib$22091$12l&&U
                                                        g$mix?$22092$12l&&U
                                                        g$sd?$22093$12l&&U)))
                                                   g$ls/false$22141$12l&&U)
                                                 (g$syntax-violation$19808$12l&&U
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$22140$12l&&U))))
                                            (g$syntax-dispatch$19689$12l&&U
                                              g$t$22140$12l&&U
                                              '(_ . each-any)))))
                                        g$e$22094$12l&&U)
                                       (if (g$memv$11828$12l&&U
                                             g$t$22105$12l&&U
                                             '(global-macro
                                                global-macro!))
                                         (g$chi-body*$19736$12l&&U
                                           (cons
                                             (g$add-subst$19181$12l&&U
                                               g$rib$22091$12l&&U
                                               (g$chi-global-macro$19704$12l&&U
                                                 g$value$22102$12l&&U
                                                 g$e$22094$12l&&U
                                                 g$r$22084$12l&&U))
                                             (cdr g$e*$22083$12l&&U))
                                           g$r$22084$12l&&U
                                           g$mr$22085$12l&&U
                                           g$lex*$22086$12l&&U
                                           g$rhs*$22087$12l&&U
                                           g$mod**$22088$12l&&U
                                           g$kwd*$22104$12l&&U
                                           g$exp*$22090$12l&&U
                                           g$rib$22091$12l&&U
                                           g$mix?$22092$12l&&U
                                           g$sd?$22093$12l&&U)
                                         (if (g$memv$11828$12l&&U
                                               g$t$22105$12l&&U
                                               '(local-macro
                                                  local-macro!))
                                           (g$chi-body*$19736$12l&&U
                                             (cons
                                               (g$add-subst$19181$12l&&U
                                                 g$rib$22091$12l&&U
                                                 (g$chi-local-macro$19703$12l&&U
                                                   g$value$22102$12l&&U
                                                   g$e$22094$12l&&U
                                                   g$r$22084$12l&&U))
                                               (cdr g$e*$22083$12l&&U))
                                             g$r$22084$12l&&U
                                             g$mr$22085$12l&&U
                                             g$lex*$22086$12l&&U
                                             g$rhs*$22087$12l&&U
                                             g$mod**$22088$12l&&U
                                             g$kwd*$22104$12l&&U
                                             g$exp*$22090$12l&&U
                                             g$rib$22091$12l&&U
                                             g$mix?$22092$12l&&U
                                             g$sd?$22093$12l&&U)
                                           (if (g$memv$11828$12l&&U
                                                 g$t$22105$12l&&U
                                                 '(macro macro!))
                                             (g$chi-body*$19736$12l&&U
                                               (cons
                                                 (g$add-subst$19181$12l&&U
                                                   g$rib$22091$12l&&U
                                                   (g$chi-macro$19702$12l&&U
                                                     g$value$22102$12l&&U
                                                     g$e$22094$12l&&U
                                                     g$r$22084$12l&&U))
                                                 (cdr g$e*$22083$12l&&U))
                                               g$r$22084$12l&&U
                                               g$mr$22085$12l&&U
                                               g$lex*$22086$12l&&U
                                               g$rhs*$22087$12l&&U
                                               g$mod**$22088$12l&&U
                                               g$kwd*$22104$12l&&U
                                               g$exp*$22090$12l&&U
                                               g$rib$22091$12l&&U
                                               g$mix?$22092$12l&&U
                                               g$sd?$22093$12l&&U)
                                             (if (eqv?
                                                   g$t$22105$12l&&U
                                                   'module)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$19735$12l&&U
                                                      g$e$22094$12l&&U
                                                      g$r$22084$12l&&U
                                                      g$mr$22085$12l&&U
                                                      g$lex*$22086$12l&&U
                                                      g$rhs*$22087$12l&&U
                                                      g$mod**$22088$12l&&U
                                                      g$kwd*$22104$12l&&U)))
                                                 (case-lambda
                                                   ((g$lex*$22151$12l&&U
                                                      g$rhs*$22152$12l&&U
                                                      g$m-exp-id*$22153$12l&&U
                                                      g$m-exp-lab*$22154$12l&&U
                                                      g$r$22155$12l&&U
                                                      g$mr$22156$12l&&U
                                                      g$mod**$22157$12l&&U
                                                      g$kwd*$22158$12l&&U)
                                                    ((case-lambda
                                                       ((g$kwd*$22159$12l&&U
                                                          g$mod**$22160$12l&&U
                                                          g$mr$22161$12l&&U
                                                          g$r$22162$12l&&U
                                                          g$m-exp-lab*$22163$12l&&U
                                                          g$m-exp-id*$22164$12l&&U
                                                          g$rhs*$22165$12l&&U
                                                          g$lex*$22166$12l&&U)
                                                        (begin
                                                          (g$vector-for-each$12649$12l&&U
                                                            (case-lambda
                                                              ((g$id$22167$12l&&U
                                                                 g$lab$22168$12l&&U)
                                                               (g$extend-rib!$19152$12l&&U
                                                                 g$rib$22091$12l&&U
                                                                 g$id$22167$12l&&U
                                                                 g$lab$22168$12l&&U
                                                                 g$sd?$22093$12l&&U)))
                                                            g$m-exp-id*$22164$12l&&U
                                                            g$m-exp-lab*$22163$12l&&U)
                                                          (g$chi-body*$19736$12l&&U
                                                            (cdr g$e*$22083$12l&&U)
                                                            g$r$22162$12l&&U
                                                            g$mr$22161$12l&&U
                                                            g$lex*$22166$12l&&U
                                                            g$rhs*$22165$12l&&U
                                                            g$mod**$22160$12l&&U
                                                            g$kwd*$22159$12l&&U
                                                            g$exp*$22090$12l&&U
                                                            g$rib$22091$12l&&U
                                                            g$mix?$22092$12l&&U
                                                            g$sd?$22093$12l&&U))))
                                                     g$kwd*$22158$12l&&U
                                                     g$mod**$22157$12l&&U
                                                     g$mr$22156$12l&&U
                                                     g$r$22155$12l&&U
                                                     g$m-exp-lab*$22154$12l&&U
                                                     g$m-exp-id*$22153$12l&&U
                                                     g$rhs*$22152$12l&&U
                                                     g$lex*$22151$12l&&U))))
                                               (if (eqv?
                                                     g$t$22105$12l&&U
                                                     'library)
                                                 (begin
                                                   (g$library-expander$19792$12l&&U
                                                     (g$stx->datum$19202$12l&&U
                                                       g$e$22094$12l&&U))
                                                   (g$chi-body*$19736$12l&&U
                                                     (cdr g$e*$22083$12l&&U)
                                                     g$r$22084$12l&&U
                                                     g$mr$22085$12l&&U
                                                     g$lex*$22086$12l&&U
                                                     g$rhs*$22087$12l&&U
                                                     g$mod**$22088$12l&&U
                                                     g$kwd*$22104$12l&&U
                                                     g$exp*$22090$12l&&U
                                                     g$rib$22091$12l&&U
                                                     g$mix?$22092$12l&&U
                                                     g$sd?$22093$12l&&U))
                                                 (if (eqv?
                                                       g$t$22105$12l&&U
                                                       'export)
                                                   ((case-lambda
                                                      ((g$t$22169$12l&&U)
                                                       ((case-lambda
                                                          ((g$ls/false$22170$12l&&U)
                                                           (if g$ls/false$22170$12l&&U
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$22171$12l&&U)
                                                                  (g$chi-body*$19736$12l&&U
                                                                    (cdr g$e*$22083$12l&&U)
                                                                    g$r$22084$12l&&U
                                                                    g$mr$22085$12l&&U
                                                                    g$lex*$22086$12l&&U
                                                                    g$rhs*$22087$12l&&U
                                                                    g$mod**$22088$12l&&U
                                                                    g$kwd*$22104$12l&&U
                                                                    (append
                                                                      g$exp-decl*$22171$12l&&U
                                                                      g$exp*$22090$12l&&U)
                                                                    g$rib$22091$12l&&U
                                                                    g$mix?$22092$12l&&U
                                                                    g$sd?$22093$12l&&U)))
                                                               g$ls/false$22170$12l&&U)
                                                             (g$syntax-violation$19808$12l&&U
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$22169$12l&&U))))
                                                        (g$syntax-dispatch$19689$12l&&U
                                                          g$t$22169$12l&&U
                                                          '(_ .
                                                              each-any)))))
                                                    g$e$22094$12l&&U)
                                                   (if (eqv?
                                                         g$t$22105$12l&&U
                                                         'import)
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$22172$12l&&U
                                                                     (case-lambda
                                                                       ((g$e$22214$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$t$22215$12l&&U)
                                                                            ((case-lambda
                                                                               ((g$ls/false$22216$12l&&U)
                                                                                (if (if g$ls/false$22216$12l&&U
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$22217$12l&&U)
                                                                                             (g$id?$19191$12l&&U
                                                                                               g$id$22217$12l&&U)))
                                                                                          g$ls/false$22216$12l&&U))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$22218$12l&&U)
                                                                                       '#t))
                                                                                    g$ls/false$22216$12l&&U)
                                                                                  ((case-lambda
                                                                                     ((g$t$22219$12l&&U)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$22220$12l&&U)
                                                                                          (if g$ls/false$22220$12l&&U
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$22221$12l&&U)
                                                                                                 '#f))
                                                                                              g$ls/false$22220$12l&&U)
                                                                                            ((case-lambda
                                                                                               ((g$t$22222$12l&&U)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$22223$12l&&U)
                                                                                                    (if g$ls/false$22223$12l&&U
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$19808$12l&&U
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$22214$12l&&U)))
                                                                                                        g$ls/false$22223$12l&&U)
                                                                                                      (g$syntax-violation$19808$12l&&U
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$22222$12l&&U))))
                                                                                                 (g$syntax-dispatch$19689$12l&&U
                                                                                                   g$t$22222$12l&&U
                                                                                                   '_))))
                                                                                             g$t$22219$12l&&U))))
                                                                                       (g$syntax-dispatch$19689$12l&&U
                                                                                         g$t$22219$12l&&U
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$22215$12l&&U))))
                                                                             (g$syntax-dispatch$19689$12l&&U
                                                                               g$t$22215$12l&&U
                                                                               '(_ any)))))
                                                                         g$e$22214$12l&&U))))
                                                                   (g$module-import$22173$12l&&U
                                                                     (case-lambda
                                                                       ((g$e$22197$12l&&U
                                                                          g$r$22198$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$t$22199$12l&&U)
                                                                            ((case-lambda
                                                                               ((g$ls/false$22200$12l&&U)
                                                                                (if (if g$ls/false$22200$12l&&U
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$22201$12l&&U)
                                                                                             (g$id?$19191$12l&&U
                                                                                               g$id$22201$12l&&U)))
                                                                                          g$ls/false$22200$12l&&U))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$22202$12l&&U)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$19211$12l&&U
                                                                                              g$id$22202$12l&&U
                                                                                              g$r$22198$12l&&U)))
                                                                                         (case-lambda
                                                                                           ((g$type$22206$12l&&U
                                                                                              g$value$22207$12l&&U
                                                                                              g$kwd$22208$12l&&U)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$22209$12l&&U
                                                                                                  g$value$22210$12l&&U
                                                                                                  g$type$22211$12l&&U)
                                                                                                ((case-lambda
                                                                                                   ((g$t$22212$12l&&U)
                                                                                                    (if (eqv?
                                                                                                          g$t$22212$12l&&U
                                                                                                          '$module)
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$22213$12l&&U)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$19733$12l&&U
                                                                                                              g$iface$22213$12l&&U
                                                                                                              g$id$22202$12l&&U)
                                                                                                            (g$module-interface-exp-lab-vec$19729$12l&&U
                                                                                                              g$iface$22213$12l&&U))))
                                                                                                       g$value$22210$12l&&U)
                                                                                                      (g$syntax-violation$19808$12l&&U
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$22197$12l&&U))))
                                                                                                 g$type$22211$12l&&U)))
                                                                                             g$kwd$22208$12l&&U
                                                                                             g$value$22207$12l&&U
                                                                                             g$type$22206$12l&&U))))))
                                                                                    g$ls/false$22200$12l&&U)
                                                                                  (g$syntax-violation$19808$12l&&U
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$22199$12l&&U))))
                                                                             (g$syntax-dispatch$19689$12l&&U
                                                                               g$t$22199$12l&&U
                                                                               '(_ any)))))
                                                                         g$e$22197$12l&&U))))
                                                                   (g$library-import$22174$12l&&U
                                                                     (case-lambda
                                                                       ((g$e$22183$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$t$22184$12l&&U)
                                                                            ((case-lambda
                                                                               ((g$ls/false$22185$12l&&U)
                                                                                (if g$ls/false$22185$12l&&U
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$22186$12l&&U
                                                                                         g$imp*$22187$12l&&U)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$19741$12l&&U
                                                                                              (g$syntax->datum$19811$12l&&U
                                                                                                g$imp*$22187$12l&&U))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$22190$12l&&U
                                                                                              g$subst-labels$22191$12l&&U)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$22192$12l&&U
                                                                                                  g$subst-names$22193$12l&&U)
                                                                                                (values
                                                                                                  (g$vector-map$12648$12l&&U
                                                                                                    (case-lambda
                                                                                                      ((g$name$22194$12l&&U)
                                                                                                       (g$datum->stx$19174$12l&&U
                                                                                                         g$ctxt$22186$12l&&U
                                                                                                         g$name$22194$12l&&U)))
                                                                                                    g$subst-names$22193$12l&&U)
                                                                                                  g$subst-labels$22192$12l&&U)))
                                                                                             g$subst-labels$22191$12l&&U
                                                                                             g$subst-names$22190$12l&&U))))))
                                                                                    g$ls/false$22185$12l&&U)
                                                                                  ((case-lambda
                                                                                     ((g$t$22195$12l&&U)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$22196$12l&&U)
                                                                                          (if g$ls/false$22196$12l&&U
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$19808$12l&&U
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$22183$12l&&U)))
                                                                                              g$ls/false$22196$12l&&U)
                                                                                            (g$syntax-violation$19808$12l&&U
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$22195$12l&&U))))
                                                                                       (g$syntax-dispatch$19689$12l&&U
                                                                                         g$t$22195$12l&&U
                                                                                         '_))))
                                                                                   g$t$22184$12l&&U))))
                                                                             (g$syntax-dispatch$19689$12l&&U
                                                                               g$t$22184$12l&&U
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$22183$12l&&U)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$22172$12l&&U
                                                                        g$e$22094$12l&&U)
                                                                    (g$module-import$22173$12l&&U
                                                                      g$e$22094$12l&&U
                                                                      g$r$22084$12l&&U)
                                                                    (g$library-import$22174$12l&&U
                                                                      g$e$22094$12l&&U))))
                                                               (case-lambda
                                                                 ((g$id*$22177$12l&&U
                                                                    g$lab*$22178$12l&&U)
                                                                  ((case-lambda
                                                                     ((g$lab*$22179$12l&&U
                                                                        g$id*$22180$12l&&U)
                                                                      (g$vector-for-each$12649$12l&&U
                                                                        (case-lambda
                                                                          ((g$id$22181$12l&&U
                                                                             g$lab$22182$12l&&U)
                                                                           (g$extend-rib!$19152$12l&&U
                                                                             g$rib$22091$12l&&U
                                                                             g$id$22181$12l&&U
                                                                             g$lab$22182$12l&&U
                                                                             g$sd?$22093$12l&&U)))
                                                                        g$id*$22180$12l&&U
                                                                        g$lab*$22179$12l&&U)))
                                                                   g$lab*$22178$12l&&U
                                                                   g$id*$22177$12l&&U))))
                                                             (g$chi-body*$19736$12l&&U
                                                               (cdr g$e*$22083$12l&&U)
                                                               g$r$22084$12l&&U
                                                               g$mr$22085$12l&&U
                                                               g$lex*$22086$12l&&U
                                                               g$rhs*$22087$12l&&U
                                                               g$mod**$22088$12l&&U
                                                               g$kwd*$22104$12l&&U
                                                               g$exp*$22090$12l&&U
                                                               g$rib$22091$12l&&U
                                                               g$mix?$22092$12l&&U
                                                               g$sd?$22093$12l&&U))))))
                                                     (if g$mix?$22092$12l&&U
                                                       (g$chi-body*$19736$12l&&U
                                                         (cdr g$e*$22083$12l&&U)
                                                         g$r$22084$12l&&U
                                                         g$mr$22085$12l&&U
                                                         (cons
                                                           (g$gen-lexical$19126$12l&&U
                                                             'dummy)
                                                           g$lex*$22086$12l&&U)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$22094$12l&&U)
                                                           g$rhs*$22087$12l&&U)
                                                         g$mod**$22088$12l&&U
                                                         g$kwd*$22104$12l&&U
                                                         g$exp*$22090$12l&&U
                                                         g$rib$22091$12l&&U
                                                         '#t
                                                         g$sd?$22093$12l&&U)
                                                       (values
                                                         g$e*$22083$12l&&U
                                                         g$r$22084$12l&&U
                                                         g$mr$22085$12l&&U
                                                         g$lex*$22086$12l&&U
                                                         g$rhs*$22087$12l&&U
                                                         g$mod**$22088$12l&&U
                                                         g$kwd*$22104$12l&&U
                                                         g$exp*$22090$12l&&U)))))))))))))))
                            g$type$22103$12l&&U)))
                        (if (g$id?$19191$12l&&U g$kwd$22101$12l&&U)
                          (cons g$kwd$22101$12l&&U g$kwd*$22089$12l&&U)
                          g$kwd*$22089$12l&&U))))
                    g$kwd$22100$12l&&U
                    g$value$22099$12l&&U
                    g$type$22098$12l&&U))))))
           (car g$e*$22083$12l&&U))))))
   (g$expand-transformer$19737$12l&&U
     g$expand-transformer$23331$12l&&U
     (case-lambda
       ((g$expr$22224$12l&&U g$r$22225$12l&&U)
        ((case-lambda
           ((g$rtc$22226$12l&&U)
            ((case-lambda
               ((g$expanded-rhs$22227$12l&&U)
                (begin
                  (g$for-each$11836$12l&&U
                    ((case-lambda
                       ((g$mark-visit$22228$12l&&U)
                        (case-lambda
                          ((g$x$22229$12l&&U)
                           (begin
                             (g$invoke-library$18897$12l&&U
                               g$x$22229$12l&&U)
                             (g$mark-visit$22228$12l&&U
                               g$x$22229$12l&&U))))))
                     (g$vis-collector$19745$12l&&U))
                    (g$rtc$22226$12l&&U))
                  g$expanded-rhs$22227$12l&&U)))
             ((case-lambda
                ((g$inv-collector$22234$12l&&U
                   g$vis-collector$22235$12l&&U
                   g$inv-collector$22236$12l&&U
                   g$vis-collector$22237$12l&&U)
                 ((case-lambda
                    ((g$swap$22238$12l&&U)
                     (dynamic-wind
                       g$swap$22238$12l&&U
                       (case-lambda
                         (()
                          (g$chi-expr$19707$12l&&U
                            g$expr$22224$12l&&U
                            g$r$22225$12l&&U
                            g$r$22225$12l&&U)))
                       g$swap$22238$12l&&U)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$22239$12l&&U)
                           (begin
                             (g$inv-collector$22234$12l&&U
                               g$inv-collector$22236$12l&&U)
                             (set! g$inv-collector$22236$12l&&U
                               g$t$22239$12l&&U))))
                        (g$inv-collector$22234$12l&&U))
                       ((case-lambda
                          ((g$t$22240$12l&&U)
                           (begin
                             (g$vis-collector$22235$12l&&U
                               g$vis-collector$22237$12l&&U)
                             (set! g$vis-collector$22237$12l&&U
                               g$t$22240$12l&&U))))
                        (g$vis-collector$22235$12l&&U))))))))
              g$inv-collector$19744$12l&&U
              g$vis-collector$19745$12l&&U
              g$rtc$22226$12l&&U
              (case-lambda ((g$x$22241$12l&&U) (values)))))))
         (g$make-collector$19743$12l&&U)))))
   (g$parse-exports$19738$12l&&U
     g$parse-exports$23332$12l&&U
     (case-lambda
       ((g$exp*$22242$12l&&U)
        ((letrec ((g$f$22243$12l&&U
                    (case-lambda
                      ((g$exp*$22244$12l&&U
                         g$int*$22245$12l&&U
                         g$ext*$22246$12l&&U)
                       (if (null? g$exp*$22244$12l&&U)
                         (begin
                           (if (not (g$valid-bound-ids?$19196$12l&&U
                                      g$ext*$22246$12l&&U))
                             (g$syntax-violation$19808$12l&&U
                               'export
                               '"invalid exports"
                               (g$find-dups$19717$12l&&U
                                 g$ext*$22246$12l&&U))
                             (void))
                           (values
                             (g$map$11835$12l&&U
                               g$syntax->datum$19811$12l&&U
                               g$ext*$22246$12l&&U)
                             g$int*$22245$12l&&U))
                         ((case-lambda
                            ((g$t$22247$12l&&U)
                             ((case-lambda
                                ((g$ls/false$22248$12l&&U)
                                 (if g$ls/false$22248$12l&&U
                                   (apply
                                     (case-lambda
                                       ((g$rename$22249$12l&&U
                                          g$i*$22250$12l&&U
                                          g$e*$22251$12l&&U)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$19811$12l&&U
                                                              g$rename$22249$12l&&U)
                                                            'rename)
                                                     (if (g$for-all$11833$12l&&U
                                                           g$id?$19191$12l&&U
                                                           g$i*$22250$12l&&U)
                                                       (begin
                                                         '#f
                                                         (g$for-all$11833$12l&&U
                                                           g$id?$19191$12l&&U
                                                           g$e*$22251$12l&&U))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$19808$12l&&U
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$22244$12l&&U))
                                            (void))
                                          (g$f$22243$12l&&U
                                            (cdr g$exp*$22244$12l&&U)
                                            (append
                                              g$i*$22250$12l&&U
                                              g$int*$22245$12l&&U)
                                            (append
                                              g$e*$22251$12l&&U
                                              g$ext*$22246$12l&&U)))))
                                     g$ls/false$22248$12l&&U)
                                   ((case-lambda
                                      ((g$t$22252$12l&&U)
                                       ((case-lambda
                                          ((g$ls/false$22253$12l&&U)
                                           (if g$ls/false$22253$12l&&U
                                             (apply
                                               (case-lambda
                                                 ((g$ie$22254$12l&&U)
                                                  (begin
                                                    (if (not (g$id?$19191$12l&&U
                                                               g$ie$22254$12l&&U))
                                                      (g$syntax-violation$19808$12l&&U
                                                        'export
                                                        '"invalid export"
                                                        g$ie$22254$12l&&U)
                                                      (void))
                                                    (g$f$22243$12l&&U
                                                      (cdr g$exp*$22244$12l&&U)
                                                      (cons
                                                        g$ie$22254$12l&&U
                                                        g$int*$22245$12l&&U)
                                                      (cons
                                                        g$ie$22254$12l&&U
                                                        g$ext*$22246$12l&&U)))))
                                               g$ls/false$22253$12l&&U)
                                             (g$syntax-violation$19808$12l&&U
                                               '#f
                                               '"invalid syntax"
                                               g$t$22252$12l&&U))))
                                        (g$syntax-dispatch$19689$12l&&U
                                          g$t$22252$12l&&U
                                          'any))))
                                    g$t$22247$12l&&U))))
                              (g$syntax-dispatch$19689$12l&&U
                                g$t$22247$12l&&U
                                '(any . #(each (any any)))))))
                          (car g$exp*$22244$12l&&U)))))))
           g$f$22243$12l&&U)
         g$exp*$22242$12l&&U
         '()
         '()))))
   (g$parse-library-name$19739$12l&&U
     g$parse-library-name$23333$12l&&U
     (case-lambda
       ((g$spec$22255$12l&&U)
        (letrec* ((g$parse$22256$12l&&U
                    (case-lambda
                      ((g$x$22263$12l&&U)
                       ((case-lambda
                          ((g$t$22264$12l&&U)
                           ((case-lambda
                              ((g$ls/false$22265$12l&&U)
                               (if (if g$ls/false$22265$12l&&U
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$22266$12l&&U)
                                            (g$for-all$11833$12l&&U
                                              (case-lambda
                                                ((g$x$22267$12l&&U)
                                                 ((case-lambda
                                                    ((g$x$22268$12l&&U)
                                                     (if (integer?
                                                           g$x$22268$12l&&U)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$22268$12l&&U))
                                                       '#f)))
                                                  (g$syntax->datum$19811$12l&&U
                                                    g$x$22267$12l&&U))))
                                              g$v*$22266$12l&&U)))
                                         g$ls/false$22265$12l&&U))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$22269$12l&&U)
                                      (values
                                        '()
                                        (g$map$11835$12l&&U
                                          g$syntax->datum$19811$12l&&U
                                          g$v*$22269$12l&&U))))
                                   g$ls/false$22265$12l&&U)
                                 ((case-lambda
                                    ((g$t$22270$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$22271$12l&&U)
                                         (if (if g$ls/false$22271$12l&&U
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$22272$12l&&U
                                                        g$rest$22273$12l&&U)
                                                      (g$symbol?$12579$12l&&U
                                                        (g$syntax->datum$19811$12l&&U
                                                          g$x$22272$12l&&U))))
                                                   g$ls/false$22271$12l&&U))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$22274$12l&&U
                                                  g$rest$22275$12l&&U)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$22256$12l&&U
                                                       g$rest$22275$12l&&U)))
                                                  (case-lambda
                                                    ((g$x*$22278$12l&&U
                                                       g$v*$22279$12l&&U)
                                                     ((case-lambda
                                                        ((g$v*$22280$12l&&U
                                                           g$x*$22281$12l&&U)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$19811$12l&&U
                                                               g$x$22274$12l&&U)
                                                             g$x*$22281$12l&&U)
                                                           g$v*$22280$12l&&U)))
                                                      g$v*$22279$12l&&U
                                                      g$x*$22278$12l&&U))))))
                                             g$ls/false$22271$12l&&U)
                                           ((case-lambda
                                              ((g$t$22282$12l&&U)
                                               ((case-lambda
                                                  ((g$ls/false$22283$12l&&U)
                                                   (if g$ls/false$22283$12l&&U
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (values
                                                            '()
                                                            '())))
                                                       g$ls/false$22283$12l&&U)
                                                     ((case-lambda
                                                        ((g$t$22284$12l&&U)
                                                         ((case-lambda
                                                            ((g$ls/false$22285$12l&&U)
                                                             (if g$ls/false$22285$12l&&U
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$19808$12l&&U
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$22255$12l&&U)))
                                                                 g$ls/false$22285$12l&&U)
                                                               (g$syntax-violation$19808$12l&&U
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$22284$12l&&U))))
                                                          (g$syntax-dispatch$19689$12l&&U
                                                            g$t$22284$12l&&U
                                                            '_))))
                                                      g$t$22282$12l&&U))))
                                                (g$syntax-dispatch$19689$12l&&U
                                                  g$t$22282$12l&&U
                                                  '()))))
                                            g$t$22270$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$22270$12l&&U
                                        '(any . any)))))
                                  g$t$22264$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$22264$12l&&U
                              '(each-any)))))
                        g$x$22263$12l&&U)))))
          (call-with-values
            (case-lambda
              (() (g$parse$22256$12l&&U g$spec$22255$12l&&U)))
            (case-lambda
              ((g$name*$22259$12l&&U g$ver*$22260$12l&&U)
               ((case-lambda
                  ((g$ver*$22261$12l&&U g$name*$22262$12l&&U)
                   (begin
                     (if (null? g$name*$22262$12l&&U)
                       (g$syntax-violation$19808$12l&&U
                         '#f
                         '"empty library name"
                         g$spec$22255$12l&&U)
                       (void))
                     (values
                       g$name*$22262$12l&&U
                       g$ver*$22261$12l&&U))))
                g$ver*$22260$12l&&U
                g$name*$22259$12l&&U))))))))
   (g$parse-library$19740$12l&&U
     g$parse-library$23334$12l&&U
     (case-lambda
       ((g$e$22286$12l&&U)
        ((case-lambda
           ((g$t$22287$12l&&U)
            ((case-lambda
               ((g$ls/false$22288$12l&&U)
                (if (if g$ls/false$22288$12l&&U
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$22289$12l&&U
                               g$name*$22290$12l&&U
                               g$export$22291$12l&&U
                               g$exp*$22292$12l&&U
                               g$import$22293$12l&&U
                               g$imp*$22294$12l&&U
                               g$b*$22295$12l&&U)
                             (if (eq? (g$syntax->datum$19811$12l&&U
                                        g$export$22291$12l&&U)
                                      'export)
                               (if (eq? (g$syntax->datum$19811$12l&&U
                                          g$import$22293$12l&&U)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$19811$12l&&U
                                          g$library$22289$12l&&U)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$22288$12l&&U))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$22296$12l&&U
                         g$name*$22297$12l&&U
                         g$export$22298$12l&&U
                         g$exp*$22299$12l&&U
                         g$import$22300$12l&&U
                         g$imp*$22301$12l&&U
                         g$b*$22302$12l&&U)
                       (values
                         g$name*$22297$12l&&U
                         g$exp*$22299$12l&&U
                         g$imp*$22301$12l&&U
                         g$b*$22302$12l&&U)))
                    g$ls/false$22288$12l&&U)
                  ((case-lambda
                     ((g$t$22303$12l&&U)
                      ((case-lambda
                         ((g$ls/false$22304$12l&&U)
                          (if g$ls/false$22304$12l&&U
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$19808$12l&&U
                                   '#f
                                   '"malformed library"
                                   g$e$22286$12l&&U)))
                              g$ls/false$22304$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"invalid syntax"
                              g$t$22303$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$22303$12l&&U
                         '_))))
                   g$t$22287$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$22287$12l&&U
               '(any each-any
                     (any . each-any)
                     (any . each-any)
                     .
                     each-any)))))
         g$e$22286$12l&&U))))
   (g$parse-import-spec*$19741$12l&&U
     g$parse-import-spec*$23335$12l&&U
     (case-lambda
       ((g$imp*$22305$12l&&U)
        (letrec* ((g$idsyn?$22306$12l&&U
                    (case-lambda
                      ((g$x$22566$12l&&U)
                       (g$symbol?$12579$12l&&U
                         (g$syntax->datum$19811$12l&&U
                           g$x$22566$12l&&U)))))
                  (g$dup-error$22307$12l&&U
                    (case-lambda
                      ((g$name$22565$12l&&U)
                       (g$syntax-violation$19808$12l&&U
                         'import
                         '"two imports with different bindings"
                         g$name$22565$12l&&U))))
                  (g$merge-substs$22308$12l&&U
                    (case-lambda
                      ((g$s$22556$12l&&U g$subst$22557$12l&&U)
                       (letrec* ((g$insert-to-subst$22558$12l&&U
                                   (case-lambda
                                     ((g$a$22559$12l&&U
                                        g$subst$22560$12l&&U)
                                      ((case-lambda
                                         ((g$name$22561$12l&&U
                                            g$label$22562$12l&&U)
                                          ((case-lambda
                                             ((g$t$22563$12l&&U)
                                              (if g$t$22563$12l&&U
                                                ((case-lambda
                                                   ((g$x$22564$12l&&U)
                                                    (if (eq? (cdr g$x$22564$12l&&U)
                                                             g$label$22562$12l&&U)
                                                      g$subst$22560$12l&&U
                                                      (g$dup-error$22307$12l&&U
                                                        g$name$22561$12l&&U))))
                                                 g$t$22563$12l&&U)
                                                (cons
                                                  g$a$22559$12l&&U
                                                  g$subst$22560$12l&&U))))
                                           (g$assq$11823$12l&&U
                                             g$name$22561$12l&&U
                                             g$subst$22560$12l&&U))))
                                       (car g$a$22559$12l&&U)
                                       (cdr g$a$22559$12l&&U))))))
                         (if (null? g$s$22556$12l&&U)
                           g$subst$22557$12l&&U
                           (g$insert-to-subst$22558$12l&&U
                             (car g$s$22556$12l&&U)
                             (g$merge-substs$22308$12l&&U
                               (cdr g$s$22556$12l&&U)
                               g$subst$22557$12l&&U)))))))
                  (g$exclude*$22309$12l&&U
                    (case-lambda
                      ((g$sym*$22532$12l&&U g$subst$22533$12l&&U)
                       (letrec* ((g$exclude$22534$12l&&U
                                   (case-lambda
                                     ((g$sym$22547$12l&&U
                                        g$subst$22548$12l&&U)
                                      (if (null? g$subst$22548$12l&&U)
                                        (g$syntax-violation$19808$12l&&U
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$22547$12l&&U)
                                        (if (eq? g$sym$22547$12l&&U
                                                 (g$caar$12596$12l&&U
                                                   g$subst$22548$12l&&U))
                                          (values
                                            (g$cdar$12598$12l&&U
                                              g$subst$22548$12l&&U)
                                            (cdr g$subst$22548$12l&&U))
                                          ((case-lambda
                                             ((g$a$22549$12l&&U)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$22534$12l&&U
                                                     g$sym$22547$12l&&U
                                                     (cdr g$subst$22548$12l&&U))))
                                                (case-lambda
                                                  ((g$old$22552$12l&&U
                                                     g$subst$22553$12l&&U)
                                                   ((case-lambda
                                                      ((g$subst$22554$12l&&U
                                                         g$old$22555$12l&&U)
                                                       (values
                                                         g$old$22555$12l&&U
                                                         (cons
                                                           g$a$22549$12l&&U
                                                           g$subst$22554$12l&&U))))
                                                    g$subst$22553$12l&&U
                                                    g$old$22552$12l&&U))))))
                                           (car g$subst$22548$12l&&U))))))))
                         (if (null? g$sym*$22532$12l&&U)
                           (values '() g$subst$22533$12l&&U)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$22534$12l&&U
                                  (car g$sym*$22532$12l&&U)
                                  g$subst$22533$12l&&U)))
                             (case-lambda
                               ((g$old$22537$12l&&U
                                  g$subst$22538$12l&&U)
                                ((case-lambda
                                   ((g$subst$22539$12l&&U
                                      g$old$22540$12l&&U)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$22309$12l&&U
                                           (cdr g$sym*$22532$12l&&U)
                                           g$subst$22539$12l&&U)))
                                      (case-lambda
                                        ((g$old*$22543$12l&&U
                                           g$subst$22544$12l&&U)
                                         ((case-lambda
                                            ((g$subst$22545$12l&&U
                                               g$old*$22546$12l&&U)
                                             (values
                                               (cons
                                                 g$old$22540$12l&&U
                                                 g$old*$22546$12l&&U)
                                               g$subst$22545$12l&&U)))
                                          g$subst$22544$12l&&U
                                          g$old*$22543$12l&&U))))))
                                 g$subst$22538$12l&&U
                                 g$old$22537$12l&&U)))))))))
                  (g$find*$22310$12l&&U
                    (case-lambda
                      ((g$sym*$22528$12l&&U g$subst$22529$12l&&U)
                       (g$map$11835$12l&&U
                         (case-lambda
                           ((g$x$22530$12l&&U)
                            ((case-lambda
                               ((g$t$22531$12l&&U)
                                (if g$t$22531$12l&&U
                                  (cdr g$t$22531$12l&&U)
                                  (g$syntax-violation$19808$12l&&U
                                    'import
                                    '"cannot find identifier"
                                    g$x$22530$12l&&U))))
                             (g$assq$11823$12l&&U
                               g$x$22530$12l&&U
                               g$subst$22529$12l&&U))))
                         g$sym*$22528$12l&&U))))
                  (g$rem*$22311$12l&&U
                    (case-lambda
                      ((g$sym*$22524$12l&&U g$subst$22525$12l&&U)
                       ((letrec ((g$f$22526$12l&&U
                                   (case-lambda
                                     ((g$subst$22527$12l&&U)
                                      (if (null? g$subst$22527$12l&&U)
                                        '()
                                        (if (g$memq$11827$12l&&U
                                              (g$caar$12596$12l&&U
                                                g$subst$22527$12l&&U)
                                              g$sym*$22524$12l&&U)
                                          (g$f$22526$12l&&U
                                            (cdr g$subst$22527$12l&&U))
                                          (cons
                                            (car g$subst$22527$12l&&U)
                                            (g$f$22526$12l&&U
                                              (cdr g$subst$22527$12l&&U)))))))))
                          g$f$22526$12l&&U)
                        g$subst$22525$12l&&U))))
                  (g$remove-dups$22312$12l&&U
                    (case-lambda
                      ((g$ls$22523$12l&&U)
                       (if (null? g$ls$22523$12l&&U)
                         '()
                         (if (g$memq$11827$12l&&U
                               (car g$ls$22523$12l&&U)
                               (cdr g$ls$22523$12l&&U))
                           (g$remove-dups$22312$12l&&U
                             (cdr g$ls$22523$12l&&U))
                           (cons
                             (car g$ls$22523$12l&&U)
                             (g$remove-dups$22312$12l&&U
                               (cdr g$ls$22523$12l&&U))))))))
                  (g$parse-library-name$22313$12l&&U
                    (case-lambda
                      ((g$spec$22407$12l&&U)
                       (letrec* ((g$subversion?$22408$12l&&U
                                   (case-lambda
                                     ((g$x$22521$12l&&U)
                                      ((case-lambda
                                         ((g$x$22522$12l&&U)
                                          (if (integer?
                                                g$x$22522$12l&&U)
                                            (if (exact?
                                                  g$x$22522$12l&&U)
                                              (begin
                                                '#f
                                                (>= g$x$22522$12l&&U
                                                    '0))
                                              '#f)
                                            '#f)))
                                       (g$syntax->datum$19811$12l&&U
                                         g$x$22521$12l&&U)))))
                                 (g$subversion-pred$22409$12l&&U
                                   (case-lambda
                                     ((g$x*$22473$12l&&U)
                                      ((case-lambda
                                         ((g$t$22474$12l&&U)
                                          ((case-lambda
                                             ((g$ls/false$22475$12l&&U)
                                              (if (if g$ls/false$22475$12l&&U
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$22476$12l&&U)
                                                           (g$subversion?$22408$12l&&U
                                                             g$n$22476$12l&&U)))
                                                        g$ls/false$22475$12l&&U))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$22477$12l&&U)
                                                     (case-lambda
                                                       ((g$x$22478$12l&&U)
                                                        (= g$x$22478$12l&&U
                                                           (g$syntax->datum$19811$12l&&U
                                                             g$n$22477$12l&&U))))))
                                                  g$ls/false$22475$12l&&U)
                                                ((case-lambda
                                                   ((g$t$22479$12l&&U)
                                                    ((case-lambda
                                                       ((g$ls/false$22480$12l&&U)
                                                        (if (if g$ls/false$22480$12l&&U
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$22481$12l&&U
                                                                       g$sub*$22482$12l&&U)
                                                                     (eq? (g$syntax->datum$19811$12l&&U
                                                                            g$p?$22481$12l&&U)
                                                                          'and)))
                                                                  g$ls/false$22480$12l&&U))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$22483$12l&&U
                                                                 g$sub*$22484$12l&&U)
                                                               ((case-lambda
                                                                  ((g$p*$22485$12l&&U)
                                                                   (case-lambda
                                                                     ((g$x$22486$12l&&U)
                                                                      (g$for-all$11833$12l&&U
                                                                        (case-lambda
                                                                          ((g$p$22487$12l&&U)
                                                                           (g$p$22487$12l&&U
                                                                             g$x$22486$12l&&U)))
                                                                        g$p*$22485$12l&&U)))))
                                                                (g$map$11835$12l&&U
                                                                  g$subversion-pred$22409$12l&&U
                                                                  g$sub*$22484$12l&&U))))
                                                            g$ls/false$22480$12l&&U)
                                                          ((case-lambda
                                                             ((g$t$22488$12l&&U)
                                                              ((case-lambda
                                                                 ((g$ls/false$22489$12l&&U)
                                                                  (if (if g$ls/false$22489$12l&&U
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$22490$12l&&U
                                                                                 g$sub*$22491$12l&&U)
                                                                               (eq? (g$syntax->datum$19811$12l&&U
                                                                                      g$p?$22490$12l&&U)
                                                                                    'or)))
                                                                            g$ls/false$22489$12l&&U))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$22492$12l&&U
                                                                           g$sub*$22493$12l&&U)
                                                                         ((case-lambda
                                                                            ((g$p*$22494$12l&&U)
                                                                             (case-lambda
                                                                               ((g$x$22495$12l&&U)
                                                                                (g$exists$11834$12l&&U
                                                                                  (case-lambda
                                                                                    ((g$p$22496$12l&&U)
                                                                                     (g$p$22496$12l&&U
                                                                                       g$x$22495$12l&&U)))
                                                                                  g$p*$22494$12l&&U)))))
                                                                          (g$map$11835$12l&&U
                                                                            g$subversion-pred$22409$12l&&U
                                                                            g$sub*$22493$12l&&U))))
                                                                      g$ls/false$22489$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$t$22497$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$ls/false$22498$12l&&U)
                                                                            (if (if g$ls/false$22498$12l&&U
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$22499$12l&&U
                                                                                           g$sub$22500$12l&&U)
                                                                                         (eq? (g$syntax->datum$19811$12l&&U
                                                                                                g$p?$22499$12l&&U)
                                                                                              'not)))
                                                                                      g$ls/false$22498$12l&&U))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$22501$12l&&U
                                                                                     g$sub$22502$12l&&U)
                                                                                   ((case-lambda
                                                                                      ((g$p$22503$12l&&U)
                                                                                       (case-lambda
                                                                                         ((g$x$22504$12l&&U)
                                                                                          (not (g$p$22503$12l&&U
                                                                                                 g$x$22504$12l&&U))))))
                                                                                    (g$subversion-pred$22409$12l&&U
                                                                                      g$sub$22502$12l&&U))))
                                                                                g$ls/false$22498$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$t$22505$12l&&U)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$22506$12l&&U)
                                                                                      (if (if g$ls/false$22506$12l&&U
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$22507$12l&&U
                                                                                                     g$n$22508$12l&&U)
                                                                                                   (if (eq? (g$syntax->datum$19811$12l&&U
                                                                                                              g$p?$22507$12l&&U)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$22408$12l&&U
                                                                                                         g$n$22508$12l&&U))
                                                                                                     '#f)))
                                                                                                g$ls/false$22506$12l&&U))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$22509$12l&&U
                                                                                               g$n$22510$12l&&U)
                                                                                             (case-lambda
                                                                                               ((g$x$22511$12l&&U)
                                                                                                (<= g$x$22511$12l&&U
                                                                                                    (g$syntax->datum$19811$12l&&U
                                                                                                      g$n$22510$12l&&U))))))
                                                                                          g$ls/false$22506$12l&&U)
                                                                                        ((case-lambda
                                                                                           ((g$t$22512$12l&&U)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$22513$12l&&U)
                                                                                                (if (if g$ls/false$22513$12l&&U
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$22514$12l&&U
                                                                                                               g$n$22515$12l&&U)
                                                                                                             (if (eq? (g$syntax->datum$19811$12l&&U
                                                                                                                        g$p?$22514$12l&&U)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$22408$12l&&U
                                                                                                                   g$n$22515$12l&&U))
                                                                                                               '#f)))
                                                                                                          g$ls/false$22513$12l&&U))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$22516$12l&&U
                                                                                                         g$n$22517$12l&&U)
                                                                                                       (case-lambda
                                                                                                         ((g$x$22518$12l&&U)
                                                                                                          (>= g$x$22518$12l&&U
                                                                                                              (g$syntax->datum$19811$12l&&U
                                                                                                                g$n$22517$12l&&U))))))
                                                                                                    g$ls/false$22513$12l&&U)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$22519$12l&&U)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$22520$12l&&U)
                                                                                                          (if g$ls/false$22520$12l&&U
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$19808$12l&&U
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$22407$12l&&U
                                                                                                                   g$x*$22473$12l&&U)))
                                                                                                              g$ls/false$22520$12l&&U)
                                                                                                            (g$syntax-violation$19808$12l&&U
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$22519$12l&&U))))
                                                                                                       (g$syntax-dispatch$19689$12l&&U
                                                                                                         g$t$22519$12l&&U
                                                                                                         '_))))
                                                                                                   g$t$22512$12l&&U))))
                                                                                             (g$syntax-dispatch$19689$12l&&U
                                                                                               g$t$22512$12l&&U
                                                                                               '(any any)))))
                                                                                         g$t$22505$12l&&U))))
                                                                                   (g$syntax-dispatch$19689$12l&&U
                                                                                     g$t$22505$12l&&U
                                                                                     '(any any)))))
                                                                               g$t$22497$12l&&U))))
                                                                         (g$syntax-dispatch$19689$12l&&U
                                                                           g$t$22497$12l&&U
                                                                           '(any any)))))
                                                                     g$t$22488$12l&&U))))
                                                               (g$syntax-dispatch$19689$12l&&U
                                                                 g$t$22488$12l&&U
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$22479$12l&&U))))
                                                     (g$syntax-dispatch$19689$12l&&U
                                                       g$t$22479$12l&&U
                                                       '(any .
                                                             each-any)))))
                                                 g$t$22474$12l&&U))))
                                           (g$syntax-dispatch$19689$12l&&U
                                             g$t$22474$12l&&U
                                             'any))))
                                       g$x*$22473$12l&&U))))
                                 (g$version-pred$22410$12l&&U
                                   (case-lambda
                                     ((g$x*$22433$12l&&U)
                                      ((case-lambda
                                         ((g$t$22434$12l&&U)
                                          ((case-lambda
                                             ((g$ls/false$22435$12l&&U)
                                              (if g$ls/false$22435$12l&&U
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$22436$12l&&U)
                                                        '#t))))
                                                  g$ls/false$22435$12l&&U)
                                                ((case-lambda
                                                   ((g$t$22437$12l&&U)
                                                    ((case-lambda
                                                       ((g$ls/false$22438$12l&&U)
                                                        (if (if g$ls/false$22438$12l&&U
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$22439$12l&&U
                                                                       g$ver*$22440$12l&&U)
                                                                     (eq? (g$syntax->datum$19811$12l&&U
                                                                            g$c$22439$12l&&U)
                                                                          'and)))
                                                                  g$ls/false$22438$12l&&U))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$22441$12l&&U
                                                                 g$ver*$22442$12l&&U)
                                                               ((case-lambda
                                                                  ((g$p*$22443$12l&&U)
                                                                   (case-lambda
                                                                     ((g$x$22444$12l&&U)
                                                                      (g$for-all$11833$12l&&U
                                                                        (case-lambda
                                                                          ((g$p$22445$12l&&U)
                                                                           (g$p$22445$12l&&U
                                                                             g$x$22444$12l&&U)))
                                                                        g$p*$22443$12l&&U)))))
                                                                (g$map$11835$12l&&U
                                                                  g$version-pred$22410$12l&&U
                                                                  g$ver*$22442$12l&&U))))
                                                            g$ls/false$22438$12l&&U)
                                                          ((case-lambda
                                                             ((g$t$22446$12l&&U)
                                                              ((case-lambda
                                                                 ((g$ls/false$22447$12l&&U)
                                                                  (if (if g$ls/false$22447$12l&&U
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$22448$12l&&U
                                                                                 g$ver*$22449$12l&&U)
                                                                               (eq? (g$syntax->datum$19811$12l&&U
                                                                                      g$c$22448$12l&&U)
                                                                                    'or)))
                                                                            g$ls/false$22447$12l&&U))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$22450$12l&&U
                                                                           g$ver*$22451$12l&&U)
                                                                         ((case-lambda
                                                                            ((g$p*$22452$12l&&U)
                                                                             (case-lambda
                                                                               ((g$x$22453$12l&&U)
                                                                                (g$exists$11834$12l&&U
                                                                                  (case-lambda
                                                                                    ((g$p$22454$12l&&U)
                                                                                     (g$p$22454$12l&&U
                                                                                       g$x$22453$12l&&U)))
                                                                                  g$p*$22452$12l&&U)))))
                                                                          (g$map$11835$12l&&U
                                                                            g$version-pred$22410$12l&&U
                                                                            g$ver*$22451$12l&&U))))
                                                                      g$ls/false$22447$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$t$22455$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$ls/false$22456$12l&&U)
                                                                            (if (if g$ls/false$22456$12l&&U
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$22457$12l&&U
                                                                                           g$ver$22458$12l&&U)
                                                                                         (eq? (g$syntax->datum$19811$12l&&U
                                                                                                g$c$22457$12l&&U)
                                                                                              'not)))
                                                                                      g$ls/false$22456$12l&&U))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$22459$12l&&U
                                                                                     g$ver$22460$12l&&U)
                                                                                   ((case-lambda
                                                                                      ((g$p$22461$12l&&U)
                                                                                       (case-lambda
                                                                                         ((g$x$22462$12l&&U)
                                                                                          (not (g$p$22461$12l&&U
                                                                                                 g$x$22462$12l&&U))))))
                                                                                    (g$version-pred$22410$12l&&U
                                                                                      g$ver$22460$12l&&U))))
                                                                                g$ls/false$22456$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$t$22463$12l&&U)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$22464$12l&&U)
                                                                                      (if g$ls/false$22464$12l&&U
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$22465$12l&&U)
                                                                                             ((case-lambda
                                                                                                ((g$p*$22466$12l&&U)
                                                                                                 (case-lambda
                                                                                                   ((g$x$22467$12l&&U)
                                                                                                    ((letrec ((g$f$22468$12l&&U
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$22469$12l&&U
                                                                                                                     g$x$22470$12l&&U)
                                                                                                                   (if (null?
                                                                                                                         g$p*$22469$12l&&U)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$22470$12l&&U)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$22469$12l&&U)
                                                                                                                            (car g$x$22470$12l&&U))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$22468$12l&&U
                                                                                                                             (cdr g$p*$22469$12l&&U)
                                                                                                                             (cdr g$x$22470$12l&&U)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$22468$12l&&U)
                                                                                                     g$p*$22466$12l&&U
                                                                                                     g$x$22467$12l&&U)))))
                                                                                              (g$map$11835$12l&&U
                                                                                                g$subversion-pred$22409$12l&&U
                                                                                                g$sub*$22465$12l&&U))))
                                                                                          g$ls/false$22464$12l&&U)
                                                                                        ((case-lambda
                                                                                           ((g$t$22471$12l&&U)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$22472$12l&&U)
                                                                                                (if g$ls/false$22472$12l&&U
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$19808$12l&&U
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$22407$12l&&U
                                                                                                         g$x*$22433$12l&&U)))
                                                                                                    g$ls/false$22472$12l&&U)
                                                                                                  (g$syntax-violation$19808$12l&&U
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$22471$12l&&U))))
                                                                                             (g$syntax-dispatch$19689$12l&&U
                                                                                               g$t$22471$12l&&U
                                                                                               '_))))
                                                                                         g$t$22463$12l&&U))))
                                                                                   (g$syntax-dispatch$19689$12l&&U
                                                                                     g$t$22463$12l&&U
                                                                                     'each-any))))
                                                                               g$t$22455$12l&&U))))
                                                                         (g$syntax-dispatch$19689$12l&&U
                                                                           g$t$22455$12l&&U
                                                                           '(any any)))))
                                                                     g$t$22446$12l&&U))))
                                                               (g$syntax-dispatch$19689$12l&&U
                                                                 g$t$22446$12l&&U
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$22437$12l&&U))))
                                                     (g$syntax-dispatch$19689$12l&&U
                                                       g$t$22437$12l&&U
                                                       '(any .
                                                             each-any)))))
                                                 g$t$22434$12l&&U))))
                                           (g$syntax-dispatch$19689$12l&&U
                                             g$t$22434$12l&&U
                                             '()))))
                                       g$x*$22433$12l&&U)))))
                         ((letrec ((g$f$22411$12l&&U
                                     (case-lambda
                                       ((g$x$22412$12l&&U)
                                        ((case-lambda
                                           ((g$t$22413$12l&&U)
                                            ((case-lambda
                                               ((g$ls/false$22414$12l&&U)
                                                (if g$ls/false$22414$12l&&U
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$22415$12l&&U)
                                                       (values
                                                         '()
                                                         (g$version-pred$22410$12l&&U
                                                           g$version-spec*$22415$12l&&U))))
                                                    g$ls/false$22414$12l&&U)
                                                  ((case-lambda
                                                     ((g$t$22416$12l&&U)
                                                      ((case-lambda
                                                         ((g$ls/false$22417$12l&&U)
                                                          (if (if g$ls/false$22417$12l&&U
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$22418$12l&&U
                                                                         g$x*$22419$12l&&U)
                                                                       (g$idsyn?$22306$12l&&U
                                                                         g$x$22418$12l&&U)))
                                                                    g$ls/false$22417$12l&&U))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$22420$12l&&U
                                                                   g$x*$22421$12l&&U)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$22411$12l&&U
                                                                        g$x*$22421$12l&&U)))
                                                                   (case-lambda
                                                                     ((g$name$22424$12l&&U
                                                                        g$pred$22425$12l&&U)
                                                                      ((case-lambda
                                                                         ((g$pred$22426$12l&&U
                                                                            g$name$22427$12l&&U)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$19811$12l&&U
                                                                                g$x$22420$12l&&U)
                                                                              g$name$22427$12l&&U)
                                                                            g$pred$22426$12l&&U)))
                                                                       g$pred$22425$12l&&U
                                                                       g$name$22424$12l&&U))))))
                                                              g$ls/false$22417$12l&&U)
                                                            ((case-lambda
                                                               ((g$t$22428$12l&&U)
                                                                ((case-lambda
                                                                   ((g$ls/false$22429$12l&&U)
                                                                    (if g$ls/false$22429$12l&&U
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$22430$12l&&U)
                                                                                '#t)))))
                                                                        g$ls/false$22429$12l&&U)
                                                                      ((case-lambda
                                                                         ((g$t$22431$12l&&U)
                                                                          ((case-lambda
                                                                             ((g$ls/false$22432$12l&&U)
                                                                              (if g$ls/false$22432$12l&&U
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$19808$12l&&U
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$22407$12l&&U)))
                                                                                  g$ls/false$22432$12l&&U)
                                                                                (g$syntax-violation$19808$12l&&U
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$22431$12l&&U))))
                                                                           (g$syntax-dispatch$19689$12l&&U
                                                                             g$t$22431$12l&&U
                                                                             '_))))
                                                                       g$t$22428$12l&&U))))
                                                                 (g$syntax-dispatch$19689$12l&&U
                                                                   g$t$22428$12l&&U
                                                                   '()))))
                                                             g$t$22416$12l&&U))))
                                                       (g$syntax-dispatch$19689$12l&&U
                                                         g$t$22416$12l&&U
                                                         '(any .
                                                               any)))))
                                                   g$t$22413$12l&&U))))
                                             (g$syntax-dispatch$19689$12l&&U
                                               g$t$22413$12l&&U
                                               '(each-any)))))
                                         g$x$22412$12l&&U)))))
                            g$f$22411$12l&&U)
                          g$spec$22407$12l&&U)))))
                  (g$import-library$22314$12l&&U
                    (case-lambda
                      ((g$spec*$22399$12l&&U)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$22313$12l&&U
                              g$spec*$22399$12l&&U)))
                         (case-lambda
                           ((g$name$22402$12l&&U g$pred$22403$12l&&U)
                            ((case-lambda
                               ((g$pred$22404$12l&&U
                                  g$name$22405$12l&&U)
                                (begin
                                  (if (null? g$name$22405$12l&&U)
                                    (g$syntax-violation$19808$12l&&U
                                      'import
                                      '"empty library name"
                                      g$spec*$22399$12l&&U)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$22406$12l&&U)
                                      (begin
                                        (if (not g$lib$22406$12l&&U)
                                          (g$syntax-violation$19808$12l&&U
                                            'import
                                            '"cannot find library with required name"
                                            g$name$22405$12l&&U)
                                          (void))
                                        (if (not (g$pred$22404$12l&&U
                                                   (g$library-version$18850$12l&&U
                                                     g$lib$22406$12l&&U)))
                                          (g$syntax-violation$19808$12l&&U
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$22399$12l&&U
                                            g$lib$22406$12l&&U)
                                          (void))
                                        ((g$imp-collector$19746$12l&&U)
                                         g$lib$22406$12l&&U)
                                        (g$library-subst$18854$12l&&U
                                          g$lib$22406$12l&&U))))
                                   (g$find-library-by-name$18890$12l&&U
                                     g$name$22405$12l&&U)))))
                             g$pred$22403$12l&&U
                             g$name$22402$12l&&U)))))))
                  (g$get-import$22315$12l&&U
                    (case-lambda
                      ((g$spec$22328$12l&&U)
                       ((case-lambda
                          ((g$t$22329$12l&&U)
                           ((case-lambda
                              ((g$ls/false$22330$12l&&U)
                               (if (if g$ls/false$22330$12l&&U
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$22331$12l&&U
                                              g$x*$22332$12l&&U)
                                            (not (g$memq$11827$12l&&U
                                                   (g$syntax->datum$19811$12l&&U
                                                     g$x$22331$12l&&U)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$22330$12l&&U))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$22333$12l&&U
                                        g$x*$22334$12l&&U)
                                      (g$import-library$22314$12l&&U
                                        (cons
                                          g$x$22333$12l&&U
                                          g$x*$22334$12l&&U))))
                                   g$ls/false$22330$12l&&U)
                                 ((case-lambda
                                    ((g$t$22335$12l&&U)
                                     ((case-lambda
                                        ((g$ls/false$22336$12l&&U)
                                         (if (if g$ls/false$22336$12l&&U
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$22337$12l&&U
                                                        g$isp$22338$12l&&U
                                                        g$old*$22339$12l&&U
                                                        g$new*$22340$12l&&U)
                                                      (if (eq? (g$syntax->datum$19811$12l&&U
                                                                 g$rename$22337$12l&&U)
                                                               'rename)
                                                        (if (g$for-all$11833$12l&&U
                                                              g$idsyn?$22306$12l&&U
                                                              g$old*$22339$12l&&U)
                                                          (begin
                                                            '#f
                                                            (g$for-all$11833$12l&&U
                                                              g$idsyn?$22306$12l&&U
                                                              g$new*$22340$12l&&U))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$22336$12l&&U))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$22341$12l&&U
                                                  g$isp$22342$12l&&U
                                                  g$old*$22343$12l&&U
                                                  g$new*$22344$12l&&U)
                                                ((case-lambda
                                                   ((g$subst$22345$12l&&U
                                                      g$old*$22346$12l&&U
                                                      g$new*$22347$12l&&U)
                                                    ((case-lambda
                                                       ((g$old-label*$22348$12l&&U)
                                                        ((case-lambda
                                                           ((g$subst$22349$12l&&U)
                                                            (g$merge-substs$22308$12l&&U
                                                              (g$map$11835$12l&&U
                                                                cons
                                                                g$new*$22347$12l&&U
                                                                g$old-label*$22348$12l&&U)
                                                              g$subst$22349$12l&&U)))
                                                         (g$rem*$22311$12l&&U
                                                           g$old*$22346$12l&&U
                                                           g$subst$22345$12l&&U))))
                                                     (g$find*$22310$12l&&U
                                                       g$old*$22346$12l&&U
                                                       g$subst$22345$12l&&U))))
                                                 (g$get-import$22315$12l&&U
                                                   g$isp$22342$12l&&U)
                                                 (g$map$11835$12l&&U
                                                   g$syntax->datum$19811$12l&&U
                                                   g$old*$22343$12l&&U)
                                                 (g$map$11835$12l&&U
                                                   g$syntax->datum$19811$12l&&U
                                                   g$new*$22344$12l&&U))))
                                             g$ls/false$22336$12l&&U)
                                           ((case-lambda
                                              ((g$t$22350$12l&&U)
                                               ((case-lambda
                                                  ((g$ls/false$22351$12l&&U)
                                                   (if (if g$ls/false$22351$12l&&U
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$22352$12l&&U
                                                                  g$isp$22353$12l&&U
                                                                  g$sym*$22354$12l&&U)
                                                                (if (eq? (g$syntax->datum$19811$12l&&U
                                                                           g$except$22352$12l&&U)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$11833$12l&&U
                                                                      g$idsyn?$22306$12l&&U
                                                                      g$sym*$22354$12l&&U))
                                                                  '#f)))
                                                             g$ls/false$22351$12l&&U))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$22355$12l&&U
                                                            g$isp$22356$12l&&U
                                                            g$sym*$22357$12l&&U)
                                                          ((case-lambda
                                                             ((g$subst$22358$12l&&U)
                                                              (g$rem*$22311$12l&&U
                                                                (g$map$11835$12l&&U
                                                                  g$syntax->datum$19811$12l&&U
                                                                  g$sym*$22357$12l&&U)
                                                                g$subst$22358$12l&&U)))
                                                           (g$get-import$22315$12l&&U
                                                             g$isp$22356$12l&&U))))
                                                       g$ls/false$22351$12l&&U)
                                                     ((case-lambda
                                                        ((g$t$22359$12l&&U)
                                                         ((case-lambda
                                                            ((g$ls/false$22360$12l&&U)
                                                             (if (if g$ls/false$22360$12l&&U
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$22361$12l&&U
                                                                            g$isp$22362$12l&&U
                                                                            g$sym*$22363$12l&&U)
                                                                          (if (eq? (g$syntax->datum$19811$12l&&U
                                                                                     g$only$22361$12l&&U)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$11833$12l&&U
                                                                                g$idsyn?$22306$12l&&U
                                                                                g$sym*$22363$12l&&U))
                                                                            '#f)))
                                                                       g$ls/false$22360$12l&&U))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$22364$12l&&U
                                                                      g$isp$22365$12l&&U
                                                                      g$sym*$22366$12l&&U)
                                                                    ((case-lambda
                                                                       ((g$subst$22367$12l&&U
                                                                          g$sym*$22368$12l&&U)
                                                                        ((case-lambda
                                                                           ((g$sym*$22369$12l&&U)
                                                                            ((case-lambda
                                                                               ((g$lab*$22370$12l&&U)
                                                                                (g$map$11835$12l&&U
                                                                                  cons
                                                                                  g$sym*$22369$12l&&U
                                                                                  g$lab*$22370$12l&&U)))
                                                                             (g$find*$22310$12l&&U
                                                                               g$sym*$22369$12l&&U
                                                                               g$subst$22367$12l&&U))))
                                                                         (g$remove-dups$22312$12l&&U
                                                                           g$sym*$22368$12l&&U))))
                                                                     (g$get-import$22315$12l&&U
                                                                       g$isp$22365$12l&&U)
                                                                     (g$map$11835$12l&&U
                                                                       g$syntax->datum$19811$12l&&U
                                                                       g$sym*$22366$12l&&U))))
                                                                 g$ls/false$22360$12l&&U)
                                                               ((case-lambda
                                                                  ((g$t$22371$12l&&U)
                                                                   ((case-lambda
                                                                      ((g$ls/false$22372$12l&&U)
                                                                       (if (if g$ls/false$22372$12l&&U
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$22373$12l&&U
                                                                                      g$isp$22374$12l&&U
                                                                                      g$p$22375$12l&&U)
                                                                                    (if (eq? (g$syntax->datum$19811$12l&&U
                                                                                               g$prefix$22373$12l&&U)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$22306$12l&&U
                                                                                          g$p$22375$12l&&U))
                                                                                      '#f)))
                                                                                 g$ls/false$22372$12l&&U))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$22376$12l&&U
                                                                                g$isp$22377$12l&&U
                                                                                g$p$22378$12l&&U)
                                                                              ((case-lambda
                                                                                 ((g$subst$22379$12l&&U
                                                                                    g$prefix$22380$12l&&U)
                                                                                  (g$map$11835$12l&&U
                                                                                    (case-lambda
                                                                                      ((g$x$22381$12l&&U)
                                                                                       (cons
                                                                                         (string->symbol
                                                                                           (string-append
                                                                                             g$prefix$22380$12l&&U
                                                                                             (symbol->string
                                                                                               (car g$x$22381$12l&&U))))
                                                                                         (cdr g$x$22381$12l&&U))))
                                                                                    g$subst$22379$12l&&U)))
                                                                               (g$get-import$22315$12l&&U
                                                                                 g$isp$22377$12l&&U)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$19811$12l&&U
                                                                                   g$p$22378$12l&&U)))))
                                                                           g$ls/false$22372$12l&&U)
                                                                         ((case-lambda
                                                                            ((g$t$22382$12l&&U)
                                                                             ((case-lambda
                                                                                ((g$ls/false$22383$12l&&U)
                                                                                 (if (if g$ls/false$22383$12l&&U
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$22384$12l&&U
                                                                                                g$spec*$22385$12l&&U)
                                                                                              (eq? (g$syntax->datum$19811$12l&&U
                                                                                                     g$library$22384$12l&&U)
                                                                                                   'library)))
                                                                                           g$ls/false$22383$12l&&U))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$22386$12l&&U
                                                                                          g$spec*$22387$12l&&U)
                                                                                        (g$import-library$22314$12l&&U
                                                                                          g$spec*$22387$12l&&U)))
                                                                                     g$ls/false$22383$12l&&U)
                                                                                   ((case-lambda
                                                                                      ((g$t$22388$12l&&U)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$22389$12l&&U)
                                                                                           (if (if g$ls/false$22389$12l&&U
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$22390$12l&&U
                                                                                                          g$isp$22391$12l&&U
                                                                                                          g$rest$22392$12l&&U)
                                                                                                        (eq? (g$syntax->datum$19811$12l&&U
                                                                                                               g$for$22390$12l&&U)
                                                                                                             'for)))
                                                                                                     g$ls/false$22389$12l&&U))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$22393$12l&&U
                                                                                                    g$isp$22394$12l&&U
                                                                                                    g$rest$22395$12l&&U)
                                                                                                  (g$get-import$22315$12l&&U
                                                                                                    g$isp$22394$12l&&U)))
                                                                                               g$ls/false$22389$12l&&U)
                                                                                             ((case-lambda
                                                                                                ((g$t$22396$12l&&U)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$22397$12l&&U)
                                                                                                     (if g$ls/false$22397$12l&&U
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$22398$12l&&U)
                                                                                                            (g$syntax-violation$19808$12l&&U
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$22398$12l&&U)))
                                                                                                         g$ls/false$22397$12l&&U)
                                                                                                       (g$syntax-violation$19808$12l&&U
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$22396$12l&&U))))
                                                                                                  (g$syntax-dispatch$19689$12l&&U
                                                                                                    g$t$22396$12l&&U
                                                                                                    'any))))
                                                                                              g$t$22388$12l&&U))))
                                                                                        (g$syntax-dispatch$19689$12l&&U
                                                                                          g$t$22388$12l&&U
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$22382$12l&&U))))
                                                                              (g$syntax-dispatch$19689$12l&&U
                                                                                g$t$22382$12l&&U
                                                                                '(any each-any)))))
                                                                          g$t$22371$12l&&U))))
                                                                    (g$syntax-dispatch$19689$12l&&U
                                                                      g$t$22371$12l&&U
                                                                      '(any any
                                                                            any)))))
                                                                g$t$22359$12l&&U))))
                                                          (g$syntax-dispatch$19689$12l&&U
                                                            g$t$22359$12l&&U
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$22350$12l&&U))))
                                                (g$syntax-dispatch$19689$12l&&U
                                                  g$t$22350$12l&&U
                                                  '(any any
                                                        .
                                                        each-any)))))
                                            g$t$22335$12l&&U))))
                                      (g$syntax-dispatch$19689$12l&&U
                                        g$t$22335$12l&&U
                                        '(any any
                                              .
                                              #(each (any any)))))))
                                  g$t$22329$12l&&U))))
                            (g$syntax-dispatch$19689$12l&&U
                              g$t$22329$12l&&U
                              '(any . each-any)))))
                        g$spec$22328$12l&&U))))
                  (g$add-imports!$22316$12l&&U
                    (case-lambda
                      ((g$imp$22320$12l&&U g$h$22321$12l&&U)
                       ((case-lambda
                          ((g$subst$22322$12l&&U)
                           (g$for-each$11836$12l&&U
                             (case-lambda
                               ((g$x$22323$12l&&U)
                                ((case-lambda
                                   ((g$name$22324$12l&&U
                                      g$label$22325$12l&&U)
                                    ((case-lambda
                                       ((g$t$22326$12l&&U)
                                        (if g$t$22326$12l&&U
                                          ((case-lambda
                                             ((g$l$22327$12l&&U)
                                              (if (not (eq? g$l$22327$12l&&U
                                                            g$label$22325$12l&&U))
                                                (g$dup-error$22307$12l&&U
                                                  g$name$22324$12l&&U)
                                                (void))))
                                           g$t$22326$12l&&U)
                                          (g$hashtable-set!$12692$12l&&U
                                            g$h$22321$12l&&U
                                            g$name$22324$12l&&U
                                            g$label$22325$12l&&U))))
                                     (g$hashtable-ref$12691$12l&&U
                                       g$h$22321$12l&&U
                                       g$name$22324$12l&&U
                                       '#f))))
                                 (car g$x$22323$12l&&U)
                                 (cdr g$x$22323$12l&&U))))
                             g$subst$22322$12l&&U)))
                        (g$get-import$22315$12l&&U
                          g$imp$22320$12l&&U))))))
          ((letrec ((g$f$22317$12l&&U
                      (case-lambda
                        ((g$imp*$22318$12l&&U g$h$22319$12l&&U)
                         (if (null? g$imp*$22318$12l&&U)
                           (hashtable-entries g$h$22319$12l&&U)
                           (begin
                             (g$add-imports!$22316$12l&&U
                               (car g$imp*$22318$12l&&U)
                               g$h$22319$12l&&U)
                             (g$f$22317$12l&&U
                               (cdr g$imp*$22318$12l&&U)
                               g$h$22319$12l&&U)))))))
             g$f$22317$12l&&U)
           g$imp*$22305$12l&&U
           (g$make-eq-hashtable$12688$12l&&U))))))
   (g$make-top-rib$19742$12l&&U
     g$make-top-rib$23336$12l&&U
     (case-lambda
       ((g$names$22567$12l&&U g$labels$22568$12l&&U)
        ((case-lambda
           ((g$rib$22569$12l&&U)
            (begin
              (g$vector-for-each$12649$12l&&U
                (case-lambda
                  ((g$name$22570$12l&&U g$label$22571$12l&&U)
                   (begin
                     (if (not (g$symbol?$12579$12l&&U
                                g$name$22570$12l&&U))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$22570$12l&&U)
                       (void))
                     (g$extend-rib/nc!$19153$12l&&U
                       g$rib$22569$12l&&U
                       (g$make-stx$19164$12l&&U
                         g$name$22570$12l&&U
                         g$top-mark*$19124$12l&&U
                         '()
                         '())
                       g$label$22571$12l&&U))))
                g$names$22567$12l&&U
                g$labels$22568$12l&&U)
              g$rib$22569$12l&&U)))
         (g$make-cache-rib$19150$12l&&U)))))
   (g$make-collector$19743$12l&&U
     g$make-collector$23337$12l&&U
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$22572$12l&&U)
            (case-lambda
              (() g$ls$22572$12l&&U)
              ((g$x$22573$12l&&U)
               (set! g$ls$22572$12l&&U
                 (g$set-cons$19121$12l&&U
                   g$x$22573$12l&&U
                   g$ls$22572$12l&&U))))))
         '()))))
   (g$inv-collector$19744$12l&&U
     g$inv-collector$23338$12l&&U
     (g$make-parameter$18052$12l&&U
       (case-lambda
         (g$args$22574$12l&&U
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$22575$12l&&U)
          (begin
            (if (not (g$procedure?$12581$12l&&U g$x$22575$12l&&U))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$22575$12l&&U)
              (void))
            g$x$22575$12l&&U)))))
   (g$vis-collector$19745$12l&&U
     g$vis-collector$23339$12l&&U
     (g$make-parameter$18052$12l&&U
       (case-lambda
         (g$args$22576$12l&&U
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$22577$12l&&U)
          (begin
            (if (not (g$procedure?$12581$12l&&U g$x$22577$12l&&U))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$22577$12l&&U)
              (void))
            g$x$22577$12l&&U)))))
   (g$imp-collector$19746$12l&&U
     g$imp-collector$23340$12l&&U
     (g$make-parameter$18052$12l&&U
       (case-lambda
         (g$args$22578$12l&&U
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$22579$12l&&U)
          (begin
            (if (not (g$procedure?$12581$12l&&U g$x$22579$12l&&U))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$22579$12l&&U)
              (void))
            g$x$22579$12l&&U)))))
   (g$chi-library-internal$19747$12l&&U
     g$chi-library-internal$23341$12l&&U
     (case-lambda
       ((g$e*$22580$12l&&U g$rib$22581$12l&&U g$mix?$22582$12l&&U)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$19736$12l&&U
               g$e*$22580$12l&&U
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$22581$12l&&U
               g$mix?$22582$12l&&U
               '#t)))
          (case-lambda
            ((g$e*$22591$12l&&U
               g$r$22592$12l&&U
               g$mr$22593$12l&&U
               g$lex*$22594$12l&&U
               g$rhs*$22595$12l&&U
               g$mod**$22596$12l&&U
               g$_kwd*$22597$12l&&U
               g$exp*$22598$12l&&U)
             ((case-lambda
                ((g$exp*$22599$12l&&U
                   g$_kwd*$22600$12l&&U
                   g$mod**$22601$12l&&U
                   g$rhs*$22602$12l&&U
                   g$lex*$22603$12l&&U
                   g$mr$22604$12l&&U
                   g$r$22605$12l&&U
                   g$e*$22606$12l&&U)
                 (values
                   (append
                     (apply
                       append
                       (g$reverse$12595$12l&&U g$mod**$22601$12l&&U))
                     g$e*$22606$12l&&U)
                   g$r$22605$12l&&U
                   g$mr$22604$12l&&U
                   (g$reverse$12595$12l&&U g$lex*$22603$12l&&U)
                   (g$reverse$12595$12l&&U g$rhs*$22602$12l&&U)
                   g$exp*$22599$12l&&U)))
              g$exp*$22598$12l&&U
              g$_kwd*$22597$12l&&U
              g$mod**$22596$12l&&U
              g$rhs*$22595$12l&&U
              g$lex*$22594$12l&&U
              g$mr$22593$12l&&U
              g$r$22592$12l&&U
              g$e*$22591$12l&&U)))))))
   (g$chi-interaction-expr$19748$12l&&U
     g$chi-interaction-expr$23342$12l&&U
     (case-lambda
       ((g$e$22607$12l&&U g$rib$22608$12l&&U g$r$22609$12l&&U)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$19736$12l&&U
               (list g$e$22607$12l&&U)
               g$r$22609$12l&&U
               g$r$22609$12l&&U
               '()
               '()
               '()
               '()
               '()
               g$rib$22608$12l&&U
               '#t
               '#f)))
          (case-lambda
            ((g$e*$22618$12l&&U
               g$r$22619$12l&&U
               g$mr$22620$12l&&U
               g$lex*$22621$12l&&U
               g$rhs*$22622$12l&&U
               g$mod**$22623$12l&&U
               g$_kwd*$22624$12l&&U
               g$_exp*$22625$12l&&U)
             ((case-lambda
                ((g$_exp*$22626$12l&&U
                   g$_kwd*$22627$12l&&U
                   g$mod**$22628$12l&&U
                   g$rhs*$22629$12l&&U
                   g$lex*$22630$12l&&U
                   g$mr$22631$12l&&U
                   g$r$22632$12l&&U
                   g$e*$22633$12l&&U)
                 ((case-lambda
                    ((g$e*$22634$12l&&U)
                     ((case-lambda
                        ((g$e$22635$12l&&U)
                         (values g$e$22635$12l&&U g$r$22632$12l&&U)))
                      (if (null? g$e*$22634$12l&&U)
                        (g$build-void$19117$12l&&U)
                        (if (null? (cdr g$e*$22634$12l&&U))
                          (car g$e*$22634$12l&&U)
                          (g$build-sequence$19116$12l&&U
                            '#f
                            g$e*$22634$12l&&U))))))
                  (g$expand-interaction-rhs*/init*$19714$12l&&U
                    (g$reverse$12595$12l&&U g$lex*$22630$12l&&U)
                    (g$reverse$12595$12l&&U g$rhs*$22629$12l&&U)
                    (append
                      (apply
                        append
                        (g$reverse$12595$12l&&U g$mod**$22628$12l&&U))
                      g$e*$22633$12l&&U)
                    g$r$22632$12l&&U
                    g$mr$22631$12l&&U))))
              g$_exp*$22625$12l&&U
              g$_kwd*$22624$12l&&U
              g$mod**$22623$12l&&U
              g$rhs*$22622$12l&&U
              g$lex*$22621$12l&&U
              g$mr$22620$12l&&U
              g$r$22619$12l&&U
              g$e*$22618$12l&&U)))))))
   (g$library-body-expander$19749$12l&&U
     g$library-body-expander$23343$12l&&U
     (case-lambda
       ((g$name$22636$12l&&U
          g$main-exp*$22637$12l&&U
          g$imp*$22638$12l&&U
          g$b*$22639$12l&&U
          g$mix?$22640$12l&&U)
        (letrec* ((g$itc$22641$12l&&U (g$make-collector$19743$12l&&U)))
          ((case-lambda
             ((g$imp-collector$22646$12l&&U
                g$top-level-context$22647$12l&&U
                g$imp-collector$22648$12l&&U
                g$top-level-context$22649$12l&&U)
              ((case-lambda
                 ((g$swap$22650$12l&&U)
                  (dynamic-wind
                    g$swap$22650$12l&&U
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$19741$12l&&U
                              g$imp*$22638$12l&&U)))
                         (case-lambda
                           ((g$subst-names$22653$12l&&U
                              g$subst-labels$22654$12l&&U)
                            ((case-lambda
                               ((g$subst-labels$22655$12l&&U
                                  g$subst-names$22656$12l&&U)
                                ((case-lambda
                                   ((g$rib$22657$12l&&U)
                                    (letrec* ((g$wrap$22658$12l&&U
                                                (case-lambda
                                                  ((g$x$22720$12l&&U)
                                                   (g$make-stx$19164$12l&&U
                                                     g$x$22720$12l&&U
                                                     g$top-mark*$19124$12l&&U
                                                     (list
                                                       g$rib$22657$12l&&U)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$22659$12l&&U
                                            g$main-exp*$22660$12l&&U
                                            g$rtc$22661$12l&&U
                                            g$vtc$22662$12l&&U)
                                          ((case-lambda
                                             ((g$inv-collector$22667$12l&&U
                                                g$vis-collector$22668$12l&&U
                                                g$inv-collector$22669$12l&&U
                                                g$vis-collector$22670$12l&&U)
                                              ((case-lambda
                                                 ((g$swap$22671$12l&&U)
                                                  (dynamic-wind
                                                    g$swap$22671$12l&&U
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$19747$12l&&U
                                                              g$b*$22659$12l&&U
                                                              g$rib$22657$12l&&U
                                                              g$mix?$22640$12l&&U)))
                                                         (case-lambda
                                                           ((g$init*$22678$12l&&U
                                                              g$r$22679$12l&&U
                                                              g$mr$22680$12l&&U
                                                              g$lex*$22681$12l&&U
                                                              g$rhs*$22682$12l&&U
                                                              g$internal-exp*$22683$12l&&U)
                                                            ((case-lambda
                                                               ((g$internal-exp*$22684$12l&&U
                                                                  g$rhs*$22685$12l&&U
                                                                  g$lex*$22686$12l&&U
                                                                  g$mr$22687$12l&&U
                                                                  g$r$22688$12l&&U
                                                                  g$init*$22689$12l&&U)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$19738$12l&&U
                                                                       (append
                                                                         g$main-exp*$22660$12l&&U
                                                                         g$internal-exp*$22684$12l&&U))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$22692$12l&&U
                                                                       g$exp-id*$22693$12l&&U)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$22694$12l&&U
                                                                           g$exp-name*$22695$12l&&U)
                                                                         (begin
                                                                           (g$seal-rib!$19155$12l&&U
                                                                             g$rib$22657$12l&&U)
                                                                           ((case-lambda
                                                                              ((g$init*$22696$12l&&U)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$22697$12l&&U)
                                                                                   (begin
                                                                                     (g$unseal-rib!$19156$12l&&U
                                                                                       g$rib$22657$12l&&U)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$22698$12l&&U
                                                                                           g$export-subst$22699$12l&&U)
                                                                                         (letrec* ((g$errstr$22700$12l&&U
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$19797$12l&&U
                                                                                                  g$lex*$22686$12l&&U
                                                                                                  g$loc*$22698$12l&&U
                                                                                                  g$r$22688$12l&&U)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$22704$12l&&U
                                                                                                  g$global*$22705$12l&&U
                                                                                                  g$macro*$22706$12l&&U)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$22707$12l&&U
                                                                                                      g$global*$22708$12l&&U
                                                                                                      g$export-env$22709$12l&&U)
                                                                                                    (begin
                                                                                                      (g$for-each$11836$12l&&U
                                                                                                        (case-lambda
                                                                                                          ((g$s$22710$12l&&U)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$22711$12l&&U
                                                                                                                 g$label$22712$12l&&U)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$22713$12l&&U)
                                                                                                                   (if g$p$22713$12l&&U
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$22714$12l&&U)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$22715$12l&&U)
                                                                                                                             (if (eq? g$type$22715$12l&&U
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$19808$12l&&U
                                                                                                                                 'export
                                                                                                                                 g$errstr$22700$12l&&U
                                                                                                                                 g$name$22711$12l&&U)
                                                                                                                               (void))))
                                                                                                                          (car g$b$22714$12l&&U))))
                                                                                                                      (cdr g$p$22713$12l&&U))
                                                                                                                     (void))))
                                                                                                                (g$assq$11823$12l&&U
                                                                                                                  g$label$22712$12l&&U
                                                                                                                  g$export-env$22709$12l&&U))))
                                                                                                            (car g$s$22710$12l&&U)
                                                                                                            (cdr g$s$22710$12l&&U))))
                                                                                                        g$export-subst$22699$12l&&U)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$22716$12l&&U
                                                                                                            g$invoke-definitions$22717$12l&&U)
                                                                                                          (values
                                                                                                            (g$itc$22641$12l&&U)
                                                                                                            (g$rtc$22661$12l&&U)
                                                                                                            (g$vtc$22662$12l&&U)
                                                                                                            (g$build-sequence$19116$12l&&U
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$22717$12l&&U
                                                                                                                (list
                                                                                                                  g$invoke-body$22716$12l&&U)))
                                                                                                            g$macro*$22707$12l&&U
                                                                                                            g$export-subst$22699$12l&&U
                                                                                                            g$export-env$22709$12l&&U)))
                                                                                                       (g$build-library-letrec*$19120$12l&&U
                                                                                                         '#f
                                                                                                         g$name$22636$12l&&U
                                                                                                         g$lex*$22686$12l&&U
                                                                                                         g$loc*$22698$12l&&U
                                                                                                         g$rhs*$22697$12l&&U
                                                                                                         (if (null?
                                                                                                               g$init*$22696$12l&&U)
                                                                                                           (g$build-void$19117$12l&&U)
                                                                                                           (g$build-sequence$19116$12l&&U
                                                                                                             '#f
                                                                                                             g$init*$22696$12l&&U)))
                                                                                                       (g$map$11835$12l&&U
                                                                                                         g$build-global-define$19112$12l&&U
                                                                                                         (g$map$11835$12l&&U
                                                                                                           cdr
                                                                                                           g$global*$22708$12l&&U))))))
                                                                                                 g$macro*$22706$12l&&U
                                                                                                 g$global*$22705$12l&&U
                                                                                                 g$export-env$22704$12l&&U)))))))
                                                                                      (g$map$11835$12l&&U
                                                                                        g$gen-global$19127$12l&&U
                                                                                        g$lex*$22686$12l&&U)
                                                                                      (g$make-export-subst$19796$12l&&U
                                                                                        g$exp-name*$22695$12l&&U
                                                                                        g$exp-id*$22694$12l&&U)))))
                                                                                (g$chi-rhs*$19715$12l&&U
                                                                                  g$rhs*$22685$12l&&U
                                                                                  g$r$22688$12l&&U
                                                                                  g$mr$22687$12l&&U))))
                                                                            (g$chi-expr*$19705$12l&&U
                                                                              g$init*$22689$12l&&U
                                                                              g$r$22688$12l&&U
                                                                              g$mr$22687$12l&&U)))))
                                                                      g$exp-id*$22693$12l&&U
                                                                      g$exp-name*$22692$12l&&U))))))
                                                             g$internal-exp*$22683$12l&&U
                                                             g$rhs*$22682$12l&&U
                                                             g$lex*$22681$12l&&U
                                                             g$mr$22680$12l&&U
                                                             g$r$22679$12l&&U
                                                             g$init*$22678$12l&&U))))))
                                                    g$swap$22671$12l&&U)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$22718$12l&&U)
                                                        (begin
                                                          (g$inv-collector$22667$12l&&U
                                                            g$inv-collector$22669$12l&&U)
                                                          (set! g$inv-collector$22669$12l&&U
                                                            g$t$22718$12l&&U))))
                                                     (g$inv-collector$22667$12l&&U))
                                                    ((case-lambda
                                                       ((g$t$22719$12l&&U)
                                                        (begin
                                                          (g$vis-collector$22668$12l&&U
                                                            g$vis-collector$22670$12l&&U)
                                                          (set! g$vis-collector$22670$12l&&U
                                                            g$t$22719$12l&&U))))
                                                     (g$vis-collector$22668$12l&&U))))))))
                                           g$inv-collector$19744$12l&&U
                                           g$vis-collector$19745$12l&&U
                                           g$rtc$22661$12l&&U
                                           g$vtc$22662$12l&&U)))
                                       (g$map$11835$12l&&U
                                         g$wrap$22658$12l&&U
                                         g$b*$22639$12l&&U)
                                       (g$map$11835$12l&&U
                                         g$wrap$22658$12l&&U
                                         g$main-exp*$22637$12l&&U)
                                       (g$make-collector$19743$12l&&U)
                                       (g$make-collector$19743$12l&&U)))))
                                 (g$make-top-rib$19742$12l&&U
                                   g$subst-names$22656$12l&&U
                                   g$subst-labels$22655$12l&&U))))
                             g$subst-labels$22654$12l&&U
                             g$subst-names$22653$12l&&U))))))
                    g$swap$22650$12l&&U)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$22721$12l&&U)
                        (begin
                          (g$imp-collector$22646$12l&&U
                            g$imp-collector$22648$12l&&U)
                          (set! g$imp-collector$22648$12l&&U
                            g$t$22721$12l&&U))))
                     (g$imp-collector$22646$12l&&U))
                    ((case-lambda
                       ((g$t$22722$12l&&U)
                        (begin
                          (g$top-level-context$22647$12l&&U
                            g$top-level-context$22649$12l&&U)
                          (set! g$top-level-context$22649$12l&&U
                            g$t$22722$12l&&U))))
                     (g$top-level-context$22647$12l&&U))))))))
           g$imp-collector$19746$12l&&U
           g$top-level-context$19816$12l&&U
           g$itc$22641$12l&&U
           '#f)))))
   (g$core-library-expander$19750$12l&&U
     g$core-library-expander$23344$12l&&U
     (case-lambda
       ((g$e$22723$12l&&U g$verify-name$22724$12l&&U)
        (call-with-values
          (case-lambda
            (() (g$parse-library$19740$12l&&U g$e$22723$12l&&U)))
          (case-lambda
            ((g$name*$22729$12l&&U
               g$exp*$22730$12l&&U
               g$imp*$22731$12l&&U
               g$b*$22732$12l&&U)
             ((case-lambda
                ((g$b*$22733$12l&&U
                   g$imp*$22734$12l&&U
                   g$exp*$22735$12l&&U
                   g$name*$22736$12l&&U)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$parse-library-name$19739$12l&&U
                        g$name*$22736$12l&&U)))
                   (case-lambda
                     ((g$name$22739$12l&&U g$ver$22740$12l&&U)
                      ((case-lambda
                         ((g$ver$22741$12l&&U g$name$22742$12l&&U)
                          (begin
                            (g$verify-name$22724$12l&&U
                              g$name$22742$12l&&U)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$19749$12l&&U
                                   g$name$22742$12l&&U
                                   g$exp*$22735$12l&&U
                                   g$imp*$22734$12l&&U
                                   g$b*$22733$12l&&U
                                   '#f)))
                              (case-lambda
                                ((g$imp*$22750$12l&&U
                                   g$invoke-req*$22751$12l&&U
                                   g$visit-req*$22752$12l&&U
                                   g$invoke-code$22753$12l&&U
                                   g$visit-code$22754$12l&&U
                                   g$export-subst$22755$12l&&U
                                   g$export-env$22756$12l&&U)
                                 ((case-lambda
                                    ((g$export-env$22757$12l&&U
                                       g$export-subst$22758$12l&&U
                                       g$visit-code$22759$12l&&U
                                       g$invoke-code$22760$12l&&U
                                       g$visit-req*$22761$12l&&U
                                       g$invoke-req*$22762$12l&&U
                                       g$imp*$22763$12l&&U)
                                     (values
                                       g$name$22742$12l&&U
                                       g$ver$22741$12l&&U
                                       g$imp*$22763$12l&&U
                                       g$invoke-req*$22762$12l&&U
                                       g$visit-req*$22761$12l&&U
                                       g$invoke-code$22760$12l&&U
                                       g$visit-code$22759$12l&&U
                                       g$export-subst$22758$12l&&U
                                       g$export-env$22757$12l&&U)))
                                  g$export-env$22756$12l&&U
                                  g$export-subst$22755$12l&&U
                                  g$visit-code$22754$12l&&U
                                  g$invoke-code$22753$12l&&U
                                  g$visit-req*$22752$12l&&U
                                  g$invoke-req*$22751$12l&&U
                                  g$imp*$22750$12l&&U)))))))
                       g$ver$22740$12l&&U
                       g$name$22739$12l&&U))))))
              g$b*$22732$12l&&U
              g$imp*$22731$12l&&U
              g$exp*$22730$12l&&U
              g$name*$22729$12l&&U)))))))
   (g$parse-top-level-program$19751$12l&&U
     g$parse-top-level-program$23345$12l&&U
     (case-lambda
       ((g$e*$22764$12l&&U)
        ((case-lambda
           ((g$t$22765$12l&&U)
            ((case-lambda
               ((g$ls/false$22766$12l&&U)
                (if (if g$ls/false$22766$12l&&U
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$22767$12l&&U
                               g$imp*$22768$12l&&U
                               g$b*$22769$12l&&U)
                             (eq? (g$syntax->datum$19811$12l&&U
                                    g$import$22767$12l&&U)
                                  'import)))
                          g$ls/false$22766$12l&&U))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$22770$12l&&U
                         g$imp*$22771$12l&&U
                         g$b*$22772$12l&&U)
                       (values g$imp*$22771$12l&&U g$b*$22772$12l&&U)))
                    g$ls/false$22766$12l&&U)
                  ((case-lambda
                     ((g$t$22773$12l&&U)
                      ((case-lambda
                         ((g$ls/false$22774$12l&&U)
                          (if (if g$ls/false$22774$12l&&U
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$22775$12l&&U
                                         g$x$22776$12l&&U
                                         g$y$22777$12l&&U)
                                       (eq? (g$syntax->datum$19811$12l&&U
                                              g$import$22775$12l&&U)
                                            'import)))
                                    g$ls/false$22774$12l&&U))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$22778$12l&&U
                                   g$x$22779$12l&&U
                                   g$y$22780$12l&&U)
                                 (g$syntax-violation$19808$12l&&U
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$19188$12l&&U
                                     g$e*$22764$12l&&U))))
                              g$ls/false$22774$12l&&U)
                            ((case-lambda
                               ((g$t$22781$12l&&U)
                                ((case-lambda
                                   ((g$ls/false$22782$12l&&U)
                                    (if g$ls/false$22782$12l&&U
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$22782$12l&&U)
                                      (g$syntax-violation$19808$12l&&U
                                        '#f
                                        '"invalid syntax"
                                        g$t$22781$12l&&U))))
                                 (g$syntax-dispatch$19689$12l&&U
                                   g$t$22781$12l&&U
                                   '_))))
                             g$t$22773$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$22773$12l&&U
                         '((any . any) . any)))))
                   g$t$22765$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$22765$12l&&U
               '((any . each-any) . each-any)))))
         g$e*$22764$12l&&U))))
   (g$top-level-expander$19752$12l&&U
     g$top-level-expander$23346$12l&&U
     (case-lambda
       ((g$e*$22783$12l&&U)
        (call-with-values
          (case-lambda
            (()
             (g$parse-top-level-program$19751$12l&&U
               g$e*$22783$12l&&U)))
          (case-lambda
            ((g$imp*$22786$12l&&U g$b*$22787$12l&&U)
             ((case-lambda
                ((g$b*$22788$12l&&U g$imp*$22789$12l&&U)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$19749$12l&&U
                        '()
                        '()
                        g$imp*$22789$12l&&U
                        g$b*$22788$12l&&U
                        '#t)))
                   (case-lambda
                     ((g$imp*$22797$12l&&U
                        g$invoke-req*$22798$12l&&U
                        g$visit-req*$22799$12l&&U
                        g$invoke-code$22800$12l&&U
                        g$visit-code$22801$12l&&U
                        g$export-subst$22802$12l&&U
                        g$export-env$22803$12l&&U)
                      ((case-lambda
                         ((g$export-env$22804$12l&&U
                            g$export-subst$22805$12l&&U
                            g$visit-code$22806$12l&&U
                            g$invoke-code$22807$12l&&U
                            g$visit-req*$22808$12l&&U
                            g$invoke-req*$22809$12l&&U
                            g$imp*$22810$12l&&U)
                          (values
                            g$invoke-req*$22809$12l&&U
                            g$invoke-code$22807$12l&&U)))
                       g$export-env$22803$12l&&U
                       g$export-subst$22802$12l&&U
                       g$visit-code$22801$12l&&U
                       g$invoke-code$22800$12l&&U
                       g$visit-req*$22799$12l&&U
                       g$invoke-req*$22798$12l&&U
                       g$imp*$22797$12l&&U))))))
              g$b*$22787$12l&&U
              g$imp*$22786$12l&&U)))))))
   (g$9554$19753$12l&&U
     g$9554$23347$12l&&U
     (make-record-type-descriptor
       'env
       '#f
       'g$9557$12l&&U
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$9556$19754$12l&&U g$9556$23348$12l&&U '#f)
   (g$9555$19755$12l&&U
     g$9555$23349$12l&&U
     (make-record-constructor-descriptor
       g$9554$19753$12l&&U
       '#f
       g$9556$19754$12l&&U))
   (g$env?$19758$12l&&U
     g$env?$23350$12l&&U
     (record-predicate g$9554$19753$12l&&U))
   (g$make-env$19759$12l&&U
     g$make-env$23351$12l&&U
     (record-constructor g$9555$19755$12l&&U))
   (g$env-names$19760$12l&&U
     g$env-names$23352$12l&&U
     (record-accessor g$9554$19753$12l&&U '0))
   (g$env-labels$19761$12l&&U
     g$env-labels$23353$12l&&U
     (record-accessor g$9554$19753$12l&&U '1))
   (g$env-itc$19762$12l&&U
     g$env-itc$23354$12l&&U
     (record-accessor g$9554$19753$12l&&U '2))
   (g$set-env-names!$19763$12l&&U
     g$set-env-names!$23355$12l&&U
     (record-mutator g$9554$19753$12l&&U '0))
   (g$set-env-labels!$19764$12l&&U
     g$set-env-labels!$23356$12l&&U
     (record-mutator g$9554$19753$12l&&U '1))
   (g$set-env-itc!$19765$12l&&U
     g$set-env-itc!$23357$12l&&U
     (record-mutator g$9554$19753$12l&&U '2))
   (g$rp$19766$12l&&U
     g$rp$23358$12l&&U
     (make-record-printer
       'env
       (case-lambda
         ((g$x$22811$12l&&U g$p$22812$12l&&U g$wr$22813$12l&&U)
          (display '"#<environment>" g$p$22812$12l&&U)))))
   (g$9571$19767$12l&&U
     g$9571$23359$12l&&U
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$9574$12l&&U
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$9573$19768$12l&&U g$9573$23360$12l&&U '#f)
   (g$9572$19769$12l&&U
     g$9572$23361$12l&&U
     (make-record-constructor-descriptor
       g$9571$19767$12l&&U
       '#f
       g$9573$19768$12l&&U))
   (g$interaction-env?$19772$12l&&U
     g$interaction-env?$23362$12l&&U
     (record-predicate g$9571$19767$12l&&U))
   (g$make-interaction-env$19773$12l&&U
     g$make-interaction-env$23363$12l&&U
     (record-constructor g$9572$19769$12l&&U))
   (g$interaction-env-rib$19774$12l&&U
     g$interaction-env-rib$23364$12l&&U
     (record-accessor g$9571$19767$12l&&U '0))
   (g$interaction-env-r$19775$12l&&U
     g$interaction-env-r$23365$12l&&U
     (record-accessor g$9571$19767$12l&&U '1))
   (g$interaction-env-locs$19776$12l&&U
     g$interaction-env-locs$23366$12l&&U
     (record-accessor g$9571$19767$12l&&U '2))
   (g$set-interaction-env-rib!$19777$12l&&U
     g$set-interaction-env-rib!$23367$12l&&U
     (record-mutator g$9571$19767$12l&&U '0))
   (g$set-interaction-env-r!$19778$12l&&U
     g$set-interaction-env-r!$23368$12l&&U
     (record-mutator g$9571$19767$12l&&U '1))
   (g$set-interaction-env-locs!$19779$12l&&U
     g$set-interaction-env-locs!$23369$12l&&U
     (record-mutator g$9571$19767$12l&&U '2))
   (g$rp$19780$12l&&U
     g$rp$23370$12l&&U
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$22814$12l&&U g$p$22815$12l&&U g$wr$22816$12l&&U)
          (display '"#<environment>" g$p$22815$12l&&U)))))
   (g$interaction-environment-symbols$19781$12l&&U
     g$interaction-environment-symbols$23371$12l&&U
     (case-lambda
       (()
        (g$environment-symbols$19785$12l&&U
          (g$interaction-environment$19815$12l&&U)))))
   (g$environment-bindings$19782$12l&&U
     g$environment-bindings$23372$12l&&U
     (case-lambda
       ((g$e$22817$12l&&U)
        (vector->list
          (g$vector-map$12648$12l&&U
            (case-lambda
              ((g$name$22818$12l&&U g$label$22819$12l&&U)
               (g$parse-binding$19783$12l&&U
                 (cons
                   g$name$22818$12l&&U
                   (g$imported-label->binding$18896$12l&&U
                     g$label$22819$12l&&U)))))
            (g$env-names$19760$12l&&U g$e$22817$12l&&U)
            (g$env-labels$19761$12l&&U g$e$22817$12l&&U))))))
   (g$parse-binding$19783$12l&&U
     g$parse-binding$23373$12l&&U
     (case-lambda
       ((g$b$22820$12l&&U)
        (cons
          (car g$b$22820$12l&&U)
          ((case-lambda
             ((g$t$22821$12l&&U)
              (if (g$memv$11828$12l&&U
                    g$t$22821$12l&&U
                    '(core-prim global))
                'procedure
                (if (g$memv$11828$12l&&U
                      g$t$22821$12l&&U
                      '(core-macro macro global-macro))
                  'syntax
                  (if (eqv? g$t$22821$12l&&U '$core-rtd)
                    'record
                    (if (eq? (car g$b$22820$12l&&U)
                             (g$cadr$12597$12l&&U g$b$22820$12l&&U))
                      'syntax
                      'unknown))))))
           (g$cadr$12597$12l&&U g$b$22820$12l&&U))))))
   (g$environment?$19784$12l&&U
     g$environment?$23374$12l&&U
     (case-lambda
       ((g$x$22822$12l&&U)
        ((case-lambda
           ((g$t$22823$12l&&U)
            (if g$t$22823$12l&&U
              g$t$22823$12l&&U
              (begin
                '#f
                (g$interaction-env?$19772$12l&&U g$x$22822$12l&&U)))))
         (g$env?$19758$12l&&U g$x$22822$12l&&U)))))
   (g$environment-symbols$19785$12l&&U
     g$environment-symbols$23375$12l&&U
     (case-lambda
       ((g$x$22824$12l&&U)
        (if (g$env?$19758$12l&&U g$x$22824$12l&&U)
          (vector->list (g$env-names$19760$12l&&U g$x$22824$12l&&U))
          (if (g$interaction-env?$19772$12l&&U g$x$22824$12l&&U)
            (g$map$11835$12l&&U
              values
              (g$rib-sym*$19139$12l&&U
                (g$interaction-env-rib$19774$12l&&U g$x$22824$12l&&U)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$22824$12l&&U))))))
   (g$environment$19786$12l&&U
     g$environment$23376$12l&&U
     (case-lambda
       (g$imp*$22825$12l&&U
        ((case-lambda
           ((g$itc$22826$12l&&U)
            ((case-lambda
               ((g$imp-collector$22829$12l&&U
                  g$imp-collector$22830$12l&&U)
                ((case-lambda
                   ((g$swap$22831$12l&&U)
                    (dynamic-wind
                      g$swap$22831$12l&&U
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$19741$12l&&U
                                g$imp*$22825$12l&&U)))
                           (case-lambda
                             ((g$subst-names$22834$12l&&U
                                g$subst-labels$22835$12l&&U)
                              ((case-lambda
                                 ((g$subst-labels$22836$12l&&U
                                    g$subst-names$22837$12l&&U)
                                  (g$make-env$19759$12l&&U
                                    g$subst-names$22837$12l&&U
                                    g$subst-labels$22836$12l&&U
                                    g$itc$22826$12l&&U)))
                               g$subst-labels$22835$12l&&U
                               g$subst-names$22834$12l&&U))))))
                      g$swap$22831$12l&&U)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$22838$12l&&U)
                        (begin
                          (g$imp-collector$22829$12l&&U
                            g$imp-collector$22830$12l&&U)
                          (set! g$imp-collector$22830$12l&&U
                            g$t$22838$12l&&U))))
                     (g$imp-collector$22829$12l&&U)))))))
             g$imp-collector$19746$12l&&U
             g$itc$22826$12l&&U)))
         (g$make-collector$19743$12l&&U)))))
   (g$null-environment$19787$12l&&U
     g$null-environment$23377$12l&&U
     (case-lambda
       ((g$n$22839$12l&&U)
        (begin
          (if (not (eqv? g$n$22839$12l&&U '5))
            (assertion-violation
              'null-environment
              '"not 5"
              g$n$22839$12l&&U)
            (void))
          (g$environment$19786$12l&&U '(psyntax null-environment-5))))))
   (g$scheme-report-environment$19788$12l&&U
     g$scheme-report-environment$23378$12l&&U
     (case-lambda
       ((g$n$22840$12l&&U)
        (begin
          (if (not (eqv? g$n$22840$12l&&U '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$22840$12l&&U)
            (void))
          (g$environment$19786$12l&&U
            '(psyntax scheme-report-environment-5))))))
   (g$expand$19789$12l&&U
     g$expand$23379$12l&&U
     (case-lambda
       ((g$x$22841$12l&&U g$env$22842$12l&&U)
        (if (g$env?$19758$12l&&U g$env$22842$12l&&U)
          ((case-lambda
             ((g$rib$22843$12l&&U)
              ((case-lambda
                 ((g$x$22844$12l&&U
                    g$itc$22845$12l&&U
                    g$rtc$22846$12l&&U
                    g$vtc$22847$12l&&U)
                  ((case-lambda
                     ((g$x$22848$12l&&U)
                      (begin
                        (g$seal-rib!$19155$12l&&U g$rib$22843$12l&&U)
                        (values
                          g$x$22848$12l&&U
                          (g$rtc$22846$12l&&U)))))
                   ((case-lambda
                      ((g$top-level-context$22857$12l&&U
                         g$inv-collector$22858$12l&&U
                         g$vis-collector$22859$12l&&U
                         g$imp-collector$22860$12l&&U
                         g$top-level-context$22861$12l&&U
                         g$inv-collector$22862$12l&&U
                         g$vis-collector$22863$12l&&U
                         g$imp-collector$22864$12l&&U)
                       ((case-lambda
                          ((g$swap$22865$12l&&U)
                           (dynamic-wind
                             g$swap$22865$12l&&U
                             (case-lambda
                               (()
                                (g$chi-expr$19707$12l&&U
                                  g$x$22844$12l&&U
                                  '()
                                  '())))
                             g$swap$22865$12l&&U)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$22866$12l&&U)
                                 (begin
                                   (g$top-level-context$22857$12l&&U
                                     g$top-level-context$22861$12l&&U)
                                   (set! g$top-level-context$22861$12l&&U
                                     g$t$22866$12l&&U))))
                              (g$top-level-context$22857$12l&&U))
                             ((case-lambda
                                ((g$t$22867$12l&&U)
                                 (begin
                                   (g$inv-collector$22858$12l&&U
                                     g$inv-collector$22862$12l&&U)
                                   (set! g$inv-collector$22862$12l&&U
                                     g$t$22867$12l&&U))))
                              (g$inv-collector$22858$12l&&U))
                             ((case-lambda
                                ((g$t$22868$12l&&U)
                                 (begin
                                   (g$vis-collector$22859$12l&&U
                                     g$vis-collector$22863$12l&&U)
                                   (set! g$vis-collector$22863$12l&&U
                                     g$t$22868$12l&&U))))
                              (g$vis-collector$22859$12l&&U))
                             ((case-lambda
                                ((g$t$22869$12l&&U)
                                 (begin
                                   (g$imp-collector$22860$12l&&U
                                     g$imp-collector$22864$12l&&U)
                                   (set! g$imp-collector$22864$12l&&U
                                     g$t$22869$12l&&U))))
                              (g$imp-collector$22860$12l&&U))))))))
                    g$top-level-context$19816$12l&&U
                    g$inv-collector$19744$12l&&U
                    g$vis-collector$19745$12l&&U
                    g$imp-collector$19746$12l&&U
                    '#f
                    g$rtc$22846$12l&&U
                    g$vtc$22847$12l&&U
                    g$itc$22845$12l&&U))))
               (g$make-stx$19164$12l&&U
                 g$x$22841$12l&&U
                 g$top-mark*$19124$12l&&U
                 (list g$rib$22843$12l&&U)
                 '())
               (g$env-itc$19762$12l&&U g$env$22842$12l&&U)
               (g$make-collector$19743$12l&&U)
               (g$make-collector$19743$12l&&U))))
           (g$make-top-rib$19742$12l&&U
             (g$env-names$19760$12l&&U g$env$22842$12l&&U)
             (g$env-labels$19761$12l&&U g$env$22842$12l&&U)))
          (if (g$interaction-env?$19772$12l&&U g$env$22842$12l&&U)
            ((case-lambda
               ((g$rib$22870$12l&&U g$r$22871$12l&&U g$rtc$22872$12l&&U)
                ((case-lambda
                   ((g$x$22873$12l&&U)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$22884$12l&&U
                               g$inv-collector$22885$12l&&U
                               g$vis-collector$22886$12l&&U
                               g$imp-collector$22887$12l&&U
                               g$top-level-context$22888$12l&&U
                               g$inv-collector$22889$12l&&U
                               g$vis-collector$22890$12l&&U
                               g$imp-collector$22891$12l&&U)
                             ((case-lambda
                                ((g$swap$22892$12l&&U)
                                 (dynamic-wind
                                   g$swap$22892$12l&&U
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$19748$12l&&U
                                        g$x$22873$12l&&U
                                        g$rib$22870$12l&&U
                                        g$r$22871$12l&&U)))
                                   g$swap$22892$12l&&U)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$22893$12l&&U)
                                       (begin
                                         (g$top-level-context$22884$12l&&U
                                           g$top-level-context$22888$12l&&U)
                                         (set! g$top-level-context$22888$12l&&U
                                           g$t$22893$12l&&U))))
                                    (g$top-level-context$22884$12l&&U))
                                   ((case-lambda
                                      ((g$t$22894$12l&&U)
                                       (begin
                                         (g$inv-collector$22885$12l&&U
                                           g$inv-collector$22889$12l&&U)
                                         (set! g$inv-collector$22889$12l&&U
                                           g$t$22894$12l&&U))))
                                    (g$inv-collector$22885$12l&&U))
                                   ((case-lambda
                                      ((g$t$22895$12l&&U)
                                       (begin
                                         (g$vis-collector$22886$12l&&U
                                           g$vis-collector$22890$12l&&U)
                                         (set! g$vis-collector$22890$12l&&U
                                           g$t$22895$12l&&U))))
                                    (g$vis-collector$22886$12l&&U))
                                   ((case-lambda
                                      ((g$t$22896$12l&&U)
                                       (begin
                                         (g$imp-collector$22887$12l&&U
                                           g$imp-collector$22891$12l&&U)
                                         (set! g$imp-collector$22891$12l&&U
                                           g$t$22896$12l&&U))))
                                    (g$imp-collector$22887$12l&&U))))))))
                          g$top-level-context$19816$12l&&U
                          g$inv-collector$19744$12l&&U
                          g$vis-collector$19745$12l&&U
                          g$imp-collector$19746$12l&&U
                          g$env$22842$12l&&U
                          g$rtc$22872$12l&&U
                          (g$make-collector$19743$12l&&U)
                          (g$make-collector$19743$12l&&U))))
                      (case-lambda
                        ((g$e$22897$12l&&U g$r^$22898$12l&&U)
                         ((case-lambda
                            ((g$r^$22899$12l&&U g$e$22900$12l&&U)
                             (begin
                               (g$set-interaction-env-r!$19778$12l&&U
                                 g$env$22842$12l&&U
                                 g$r^$22899$12l&&U)
                               (values
                                 g$e$22900$12l&&U
                                 (g$rtc$22872$12l&&U)))))
                          g$r^$22898$12l&&U
                          g$e$22897$12l&&U))))))
                 (g$make-stx$19164$12l&&U
                   g$x$22841$12l&&U
                   g$top-mark*$19124$12l&&U
                   (list g$rib$22870$12l&&U)
                   '()))))
             (g$interaction-env-rib$19774$12l&&U g$env$22842$12l&&U)
             (g$interaction-env-r$19775$12l&&U g$env$22842$12l&&U)
             (g$make-collector$19743$12l&&U))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$22842$12l&&U))))))
   (g$eval$19790$12l&&U
     g$eval$23380$12l&&U
     (case-lambda
       ((g$x$22901$12l&&U g$env$22902$12l&&U)
        (begin
          (if (not (g$environment?$19784$12l&&U g$env$22902$12l&&U))
            (error 'eval '"not an environment" g$env$22902$12l&&U)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$19789$12l&&U
                 g$x$22901$12l&&U
                 g$env$22902$12l&&U)))
            (case-lambda
              ((g$x$22905$12l&&U g$invoke-req*$22906$12l&&U)
               ((case-lambda
                  ((g$invoke-req*$22907$12l&&U g$x$22908$12l&&U)
                   (begin
                     (g$for-each$11836$12l&&U
                       g$invoke-library$18897$12l&&U
                       g$invoke-req*$22907$12l&&U)
                     (eval-core
                       (g$expanded->core$18629$12l&&U
                         g$x$22908$12l&&U)))))
                g$invoke-req*$22906$12l&&U
                g$x$22905$12l&&U))))))))
   (g$expand->core$19791$12l&&U
     g$expand->core$23381$12l&&U
     (case-lambda
       ((g$x$22909$12l&&U g$env$22910$12l&&U)
        (begin
          (if (not (g$environment?$19784$12l&&U g$env$22910$12l&&U))
            (error 'eval '"not an environment" g$env$22910$12l&&U)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$19789$12l&&U
                 g$x$22909$12l&&U
                 g$env$22910$12l&&U)))
            (case-lambda
              ((g$x$22913$12l&&U g$invoke-req*$22914$12l&&U)
               ((case-lambda
                  ((g$invoke-req*$22915$12l&&U g$x$22916$12l&&U)
                   (begin
                     (g$for-each$11836$12l&&U
                       g$invoke-library$18897$12l&&U
                       g$invoke-req*$22915$12l&&U)
                     (g$expanded->core$18629$12l&&U g$x$22916$12l&&U))))
                g$invoke-req*$22914$12l&&U
                g$x$22913$12l&&U))))))))
   (g$library-expander$19792$12l&&U
     g$library-expander$23382$12l&&U
     (case-lambda
       ((g$x$22917$12l&&U
          g$filename$22918$12l&&U
          g$verify-name$22919$12l&&U)
        (letrec* ((g$build-visit-code$22920$12l&&U
                    (case-lambda
                      ((g$macro*$22963$12l&&U)
                       (if (null? g$macro*$22963$12l&&U)
                         (g$build-void$19117$12l&&U)
                         (g$build-sequence$19116$12l&&U
                           '#f
                           (g$map$11835$12l&&U
                             (case-lambda
                               ((g$x$22964$12l&&U)
                                ((case-lambda
                                   ((g$loc$22965$12l&&U
                                      g$src$22966$12l&&U)
                                    (list
                                      'set!
                                      g$loc$22965$12l&&U
                                      g$src$22966$12l&&U)))
                                 (car g$x$22964$12l&&U)
                                 (g$cddr$12599$12l&&U
                                   g$x$22964$12l&&U))))
                             g$macro*$22963$12l&&U))))))
                  (g$visit!$22921$12l&&U
                    (case-lambda
                      ((g$macro*$22959$12l&&U)
                       (g$for-each$11836$12l&&U
                         (case-lambda
                           ((g$x$22960$12l&&U)
                            ((case-lambda
                               ((g$loc$22961$12l&&U g$proc$22962$12l&&U)
                                (set-symbol-value!
                                  g$loc$22961$12l&&U
                                  g$proc$22962$12l&&U)))
                             (car g$x$22960$12l&&U)
                             (g$cadr$12597$12l&&U g$x$22960$12l&&U))))
                         g$macro*$22959$12l&&U)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$19750$12l&&U
                 g$x$22917$12l&&U
                 g$verify-name$22919$12l&&U)))
            (case-lambda
              ((g$name$22931$12l&&U
                 g$ver$22932$12l&&U
                 g$imp*$22933$12l&&U
                 g$inv*$22934$12l&&U
                 g$vis*$22935$12l&&U
                 g$invoke-code$22936$12l&&U
                 g$macro*$22937$12l&&U
                 g$export-subst$22938$12l&&U
                 g$export-env$22939$12l&&U)
               ((case-lambda
                  ((g$export-env$22940$12l&&U
                     g$export-subst$22941$12l&&U
                     g$macro*$22942$12l&&U
                     g$invoke-code$22943$12l&&U
                     g$vis*$22944$12l&&U
                     g$inv*$22945$12l&&U
                     g$imp*$22946$12l&&U
                     g$ver$22947$12l&&U
                     g$name$22948$12l&&U)
                   ((case-lambda
                      ((g$id$22949$12l&&U
                         g$name$22950$12l&&U
                         g$ver$22951$12l&&U
                         g$imp*$22952$12l&&U
                         g$vis*$22953$12l&&U
                         g$inv*$22954$12l&&U
                         g$visit-proc$22955$12l&&U
                         g$invoke-proc$22956$12l&&U
                         g$visit-code$22957$12l&&U
                         g$invoke-code$22958$12l&&U)
                       (begin
                         (g$install-library$18895$12l&&U
                           g$id$22949$12l&&U
                           g$name$22950$12l&&U
                           g$ver$22951$12l&&U
                           g$imp*$22952$12l&&U
                           g$vis*$22953$12l&&U
                           g$inv*$22954$12l&&U
                           g$export-subst$22941$12l&&U
                           g$export-env$22940$12l&&U
                           g$visit-proc$22955$12l&&U
                           g$invoke-proc$22956$12l&&U
                           g$visit-code$22957$12l&&U
                           g$invoke-code$22958$12l&&U
                           '#t
                           g$filename$22918$12l&&U)
                         (values
                           g$id$22949$12l&&U
                           g$name$22950$12l&&U
                           g$ver$22951$12l&&U
                           g$imp*$22952$12l&&U
                           g$vis*$22953$12l&&U
                           g$inv*$22954$12l&&U
                           g$invoke-code$22958$12l&&U
                           g$visit-code$22957$12l&&U
                           g$export-subst$22941$12l&&U
                           g$export-env$22940$12l&&U))))
                    (gensym)
                    g$name$22948$12l&&U
                    g$ver$22947$12l&&U
                    (g$map$11835$12l&&U
                      g$library-spec$18901$12l&&U
                      g$imp*$22946$12l&&U)
                    (g$map$11835$12l&&U
                      g$library-spec$18901$12l&&U
                      g$vis*$22944$12l&&U)
                    (g$map$11835$12l&&U
                      g$library-spec$18901$12l&&U
                      g$inv*$22945$12l&&U)
                    (case-lambda
                      (()
                       (g$visit!$22921$12l&&U g$macro*$22942$12l&&U)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$18629$12l&&U
                           g$invoke-code$22943$12l&&U))))
                    (g$build-visit-code$22920$12l&&U
                      g$macro*$22942$12l&&U)
                    g$invoke-code$22943$12l&&U)))
                g$export-env$22939$12l&&U
                g$export-subst$22938$12l&&U
                g$macro*$22937$12l&&U
                g$invoke-code$22936$12l&&U
                g$vis*$22935$12l&&U
                g$inv*$22934$12l&&U
                g$imp*$22933$12l&&U
                g$ver$22932$12l&&U
                g$name$22931$12l&&U))))))
       ((g$x$22967$12l&&U g$filename$22968$12l&&U)
        (g$library-expander$19792$12l&&U
          g$x$22967$12l&&U
          g$filename$22968$12l&&U
          (case-lambda ((g$x$22969$12l&&U) (values)))))
       ((g$x$22970$12l&&U)
        (g$library-expander$19792$12l&&U
          g$x$22970$12l&&U
          '#f
          (case-lambda ((g$x$22971$12l&&U) (values)))))))
   (g$boot-library-expand$19793$12l&&U
     g$boot-library-expand$23383$12l&&U
     (case-lambda
       ((g$x$22972$12l&&U)
        (call-with-values
          (case-lambda
            (() (g$library-expander$19792$12l&&U g$x$22972$12l&&U)))
          (case-lambda
            ((g$id$22983$12l&&U
               g$name$22984$12l&&U
               g$ver$22985$12l&&U
               g$imp*$22986$12l&&U
               g$vis*$22987$12l&&U
               g$inv*$22988$12l&&U
               g$invoke-code$22989$12l&&U
               g$visit-code$22990$12l&&U
               g$export-subst$22991$12l&&U
               g$export-env$22992$12l&&U)
             ((case-lambda
                ((g$export-env$22993$12l&&U
                   g$export-subst$22994$12l&&U
                   g$visit-code$22995$12l&&U
                   g$invoke-code$22996$12l&&U
                   g$inv*$22997$12l&&U
                   g$vis*$22998$12l&&U
                   g$imp*$22999$12l&&U
                   g$ver$23000$12l&&U
                   g$name$23001$12l&&U
                   g$id$23002$12l&&U)
                 (values
                   g$name$23001$12l&&U
                   g$invoke-code$22996$12l&&U
                   g$export-subst$22994$12l&&U
                   g$export-env$22993$12l&&U)))
              g$export-env$22992$12l&&U
              g$export-subst$22991$12l&&U
              g$visit-code$22990$12l&&U
              g$invoke-code$22989$12l&&U
              g$inv*$22988$12l&&U
              g$vis*$22987$12l&&U
              g$imp*$22986$12l&&U
              g$ver$22985$12l&&U
              g$name$22984$12l&&U
              g$id$22983$12l&&U)))))))
   (g$rev-map-append$19794$12l&&U
     g$rev-map-append$23384$12l&&U
     (case-lambda
       ((g$f$23003$12l&&U g$ls$23004$12l&&U g$ac$23005$12l&&U)
        (if (null? g$ls$23004$12l&&U)
          g$ac$23005$12l&&U
          (g$rev-map-append$19794$12l&&U
            g$f$23003$12l&&U
            (cdr g$ls$23004$12l&&U)
            (cons
              (g$f$23003$12l&&U (car g$ls$23004$12l&&U))
              g$ac$23005$12l&&U))))))
   (g$build-exports$19795$12l&&U
     g$build-exports$23385$12l&&U
     (case-lambda
       ((g$lex*+loc*$23006$12l&&U g$init*$23007$12l&&U)
        (g$build-sequence$19116$12l&&U
          '#f
          (cons
            (g$build-void$19117$12l&&U)
            (g$rev-map-append$19794$12l&&U
              (case-lambda
                ((g$x$23008$12l&&U)
                 (list
                   'set!
                   (cdr g$x$23008$12l&&U)
                   (car g$x$23008$12l&&U))))
              g$lex*+loc*$23006$12l&&U
              g$init*$23007$12l&&U))))))
   (g$make-export-subst$19796$12l&&U
     g$make-export-subst$23386$12l&&U
     (case-lambda
       ((g$name*$23009$12l&&U g$id*$23010$12l&&U)
        (g$map$11835$12l&&U
          (case-lambda
            ((g$name$23011$12l&&U g$id$23012$12l&&U)
             ((case-lambda
                ((g$label$23013$12l&&U)
                 (begin
                   (if (not g$label$23013$12l&&U)
                     (g$syntax-violation$19808$12l&&U
                       '#f
                       '"cannot export unbound identifier"
                       g$id$23012$12l&&U)
                     (void))
                   (cons g$name$23011$12l&&U g$label$23013$12l&&U))))
              (g$id->label$19204$12l&&U g$id$23012$12l&&U))))
          g$name*$23009$12l&&U
          g$id*$23010$12l&&U))))
   (g$make-export-env/macros$19797$12l&&U
     g$make-export-env/macros$23387$12l&&U
     (case-lambda
       ((g$lex*$23014$12l&&U g$loc*$23015$12l&&U g$r$23016$12l&&U)
        (letrec* ((g$lookup$23017$12l&&U
                    (case-lambda
                      ((g$x$23033$12l&&U)
                       ((letrec ((g$f$23034$12l&&U
                                   (case-lambda
                                     ((g$x$23035$12l&&U
                                        g$lex*$23036$12l&&U
                                        g$loc*$23037$12l&&U)
                                      (if (pair? g$lex*$23036$12l&&U)
                                        (if (eq? g$x$23035$12l&&U
                                                 (car g$lex*$23036$12l&&U))
                                          (car g$loc*$23037$12l&&U)
                                          (g$f$23034$12l&&U
                                            g$x$23035$12l&&U
                                            (cdr g$lex*$23036$12l&&U)
                                            (cdr g$loc*$23037$12l&&U)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$23034$12l&&U)
                        g$x$23033$12l&&U
                        g$lex*$23014$12l&&U
                        g$loc*$23015$12l&&U)))))
          ((letrec ((g$f$23018$12l&&U
                      (case-lambda
                        ((g$r$23019$12l&&U
                           g$env$23020$12l&&U
                           g$global*$23021$12l&&U
                           g$macro*$23022$12l&&U)
                         (if (null? g$r$23019$12l&&U)
                           (values
                             g$env$23020$12l&&U
                             g$global*$23021$12l&&U
                             g$macro*$23022$12l&&U)
                           ((case-lambda
                              ((g$x$23023$12l&&U)
                               ((case-lambda
                                  ((g$label$23024$12l&&U
                                     g$b$23025$12l&&U)
                                   ((case-lambda
                                      ((g$t$23026$12l&&U)
                                       (if (eqv?
                                             g$t$23026$12l&&U
                                             'lexical)
                                         ((case-lambda
                                            ((g$v$23027$12l&&U)
                                             ((case-lambda
                                                ((g$loc$23028$12l&&U
                                                   g$type$23029$12l&&U)
                                                 (g$f$23018$12l&&U
                                                   (cdr g$r$23019$12l&&U)
                                                   (cons
                                                     (g$cons*$11837$12l&&U
                                                       g$label$23024$12l&&U
                                                       g$type$23029$12l&&U
                                                       g$loc$23028$12l&&U)
                                                     g$env$23020$12l&&U)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$19633$12l&&U
                                                         g$v$23027$12l&&U)
                                                       g$loc$23028$12l&&U)
                                                     g$global*$23021$12l&&U)
                                                   g$macro*$23022$12l&&U)))
                                              (g$lookup$23017$12l&&U
                                                (g$lexical-var$19633$12l&&U
                                                  g$v$23027$12l&&U))
                                              (if (g$lexical-mutable?$19634$12l&&U
                                                    g$v$23027$12l&&U)
                                                'mutable
                                                'global))))
                                          (g$binding-value$19209$12l&&U
                                            g$b$23025$12l&&U))
                                         (if (eqv?
                                               g$t$23026$12l&&U
                                               'local-macro)
                                           ((case-lambda
                                              ((g$loc$23030$12l&&U)
                                               (g$f$23018$12l&&U
                                                 (cdr g$r$23019$12l&&U)
                                                 (cons
                                                   (g$cons*$11837$12l&&U
                                                     g$label$23024$12l&&U
                                                     'global-macro
                                                     g$loc$23030$12l&&U)
                                                   g$env$23020$12l&&U)
                                                 g$global*$23021$12l&&U
                                                 (cons
                                                   (cons
                                                     g$loc$23030$12l&&U
                                                     (g$binding-value$19209$12l&&U
                                                       g$b$23025$12l&&U))
                                                   g$macro*$23022$12l&&U))))
                                            (gensym))
                                           (if (eqv?
                                                 g$t$23026$12l&&U
                                                 'local-macro!)
                                             ((case-lambda
                                                ((g$loc$23031$12l&&U)
                                                 (g$f$23018$12l&&U
                                                   (cdr g$r$23019$12l&&U)
                                                   (cons
                                                     (g$cons*$11837$12l&&U
                                                       g$label$23024$12l&&U
                                                       'global-macro!
                                                       g$loc$23031$12l&&U)
                                                     g$env$23020$12l&&U)
                                                   g$global*$23021$12l&&U
                                                   (cons
                                                     (cons
                                                       g$loc$23031$12l&&U
                                                       (g$binding-value$19209$12l&&U
                                                         g$b$23025$12l&&U))
                                                     g$macro*$23022$12l&&U))))
                                              (gensym))
                                             (if (eqv?
                                                   g$t$23026$12l&&U
                                                   'local-ctv)
                                               ((case-lambda
                                                  ((g$loc$23032$12l&&U)
                                                   (g$f$23018$12l&&U
                                                     (cdr g$r$23019$12l&&U)
                                                     (cons
                                                       (g$cons*$11837$12l&&U
                                                         g$label$23024$12l&&U
                                                         'global-ctv
                                                         g$loc$23032$12l&&U)
                                                       g$env$23020$12l&&U)
                                                     g$global*$23021$12l&&U
                                                     (cons
                                                       (cons
                                                         g$loc$23032$12l&&U
                                                         (g$binding-value$19209$12l&&U
                                                           g$b$23025$12l&&U))
                                                       g$macro*$23022$12l&&U))))
                                                (gensym))
                                               (if (g$memv$11828$12l&&U
                                                     g$t$23026$12l&&U
                                                     '($rtd $module))
                                                 (g$f$23018$12l&&U
                                                   (cdr g$r$23019$12l&&U)
                                                   (cons
                                                     g$x$23023$12l&&U
                                                     g$env$23020$12l&&U)
                                                   g$global*$23021$12l&&U
                                                   g$macro*$23022$12l&&U)
                                                 (assertion-violation
                                                   'expander
                                                   '"BUG: do not know how to export"
                                                   (g$binding-type$19208$12l&&U
                                                     g$b$23025$12l&&U)
                                                   (g$binding-value$19209$12l&&U
                                                     g$b$23025$12l&&U)))))))))
                                    (g$binding-type$19208$12l&&U
                                      g$b$23025$12l&&U))))
                                (car g$x$23023$12l&&U)
                                (cdr g$x$23023$12l&&U))))
                            (car g$r$23019$12l&&U)))))))
             g$f$23018$12l&&U)
           g$r$23016$12l&&U
           '()
           '()
           '())))))
   (g$generate-temporaries$19798$12l&&U
     g$generate-temporaries$23388$12l&&U
     (case-lambda
       ((g$ls$23038$12l&&U)
        ((case-lambda
           ((g$t$23039$12l&&U)
            ((case-lambda
               ((g$ls/false$23040$12l&&U)
                (if g$ls/false$23040$12l&&U
                  (apply
                    (case-lambda
                      ((g$ls$23041$12l&&U)
                       (g$map$11835$12l&&U
                         (case-lambda
                           ((g$x$23042$12l&&U)
                            (g$make-stx$19164$12l&&U
                              ((case-lambda
                                 ((g$x$23043$12l&&U)
                                  (if ((case-lambda
                                         ((g$t$23044$12l&&U)
                                          (if g$t$23044$12l&&U
                                            g$t$23044$12l&&U
                                            (begin
                                              '#f
                                              (string?
                                                g$x$23043$12l&&U)))))
                                       (g$symbol?$12579$12l&&U
                                         g$x$23043$12l&&U))
                                    (gensym g$x$23043$12l&&U)
                                    (gensym 't))))
                               (g$syntax->datum$19811$12l&&U
                                 g$x$23042$12l&&U))
                              g$top-mark*$19124$12l&&U
                              '()
                              '())))
                         g$ls$23041$12l&&U)))
                    g$ls/false$23040$12l&&U)
                  ((case-lambda
                     ((g$t$23045$12l&&U)
                      ((case-lambda
                         ((g$ls/false$23046$12l&&U)
                          (if g$ls/false$23046$12l&&U
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$23046$12l&&U)
                            (g$syntax-violation$19808$12l&&U
                              '#f
                              '"invalid syntax"
                              g$t$23045$12l&&U))))
                       (g$syntax-dispatch$19689$12l&&U
                         g$t$23045$12l&&U
                         '_))))
                   g$t$23039$12l&&U))))
             (g$syntax-dispatch$19689$12l&&U
               g$t$23039$12l&&U
               'each-any))))
         g$ls$23038$12l&&U))))
   (g$free-identifier=?$19799$12l&&U
     g$free-identifier=?$23389$12l&&U
     (case-lambda
       ((g$x$23047$12l&&U g$y$23048$12l&&U)
        (if (g$id?$19191$12l&&U g$x$23047$12l&&U)
          (if (g$id?$19191$12l&&U g$y$23048$12l&&U)
            (g$free-id=?$19195$12l&&U g$x$23047$12l&&U g$y$23048$12l&&U)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$23048$12l&&U))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$23047$12l&&U)))))
   (g$bound-identifier=?$19800$12l&&U
     g$bound-identifier=?$23390$12l&&U
     (case-lambda
       ((g$x$23049$12l&&U g$y$23050$12l&&U)
        (if (g$id?$19191$12l&&U g$x$23049$12l&&U)
          (if (g$id?$19191$12l&&U g$y$23050$12l&&U)
            (g$bound-id=?$19194$12l&&U
              g$x$23049$12l&&U
              g$y$23050$12l&&U)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$23050$12l&&U))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$23049$12l&&U)))))
   (g$make-source-condition$19801$12l&&U
     g$make-source-condition$23391$12l&&U
     (case-lambda
       ((g$x$23051$12l&&U)
        (letrec* ((g$12544$23052$12l&&U
                    (make-record-type-descriptor
                      '&source-information
                      g$&condition-rtd$13256$12l&&U
                      'g$12547$12l&&U
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$12546$23053$12l&&U '#f)
                  (g$12545$23054$12l&&U
                    (make-record-constructor-descriptor
                      g$12544$23052$12l&&U
                      g$&condition-rcd$13257$12l&&U
                      g$12546$23053$12l&&U))
                  (g$12543$23057$12l&&U
                    (record-predicate g$12544$23052$12l&&U))
                  (g$make-source-condition$23058$12l&&U
                    (record-constructor g$12545$23054$12l&&U))
                  (g$12541$23059$12l&&U
                    (record-accessor g$12544$23052$12l&&U '0))
                  (g$12542$23060$12l&&U
                    (record-accessor g$12544$23052$12l&&U '1))
                  (g$source-condition?$23061$12l&&U
                    (condition-predicate g$12544$23052$12l&&U))
                  (g$source-filename$23062$12l&&U
                    (condition-accessor
                      g$12544$23052$12l&&U
                      g$12541$23059$12l&&U))
                  (g$source-character$23063$12l&&U
                    (condition-accessor
                      g$12544$23052$12l&&U
                      g$12542$23060$12l&&U)))
          (if (pair? g$x$23051$12l&&U)
            (g$make-source-condition$23058$12l&&U
              (car g$x$23051$12l&&U)
              (cdr g$x$23051$12l&&U))
            (condition))))))
   (g$extract-position-condition$19802$12l&&U
     g$extract-position-condition$23392$12l&&U
     (case-lambda
       ((g$x$23064$12l&&U)
        (g$make-source-condition$19801$12l&&U
          (g$expression-position$19803$12l&&U g$x$23064$12l&&U)))))
   (g$expression-position$19803$12l&&U
     g$expression-position$23393$12l&&U
     (case-lambda
       ((g$x$23065$12l&&U)
        (if (g$stx?$19163$12l&&U g$x$23065$12l&&U)
          (begin
            '#f
            ((case-lambda
               ((g$x$23066$12l&&U)
                (if (annotation? g$x$23066$12l&&U)
                  (begin '#f (annotation-source g$x$23066$12l&&U))
                  '#f)))
             (g$stx-expr$19165$12l&&U g$x$23065$12l&&U)))
          '#f))))
   (g$assertion-error$19804$12l&&U
     g$assertion-error$23394$12l&&U
     (case-lambda
       ((g$expr$23067$12l&&U g$pos$23068$12l&&U)
        (raise
          (condition
            (g$make-assertion-violation$13304$12l&&U)
            (g$make-who-condition$13322$12l&&U 'assert)
            (g$make-message-condition$13262$12l&&U '"assertion failed")
            (g$make-irritants-condition$13312$12l&&U
              (list g$expr$23067$12l&&U))
            (g$make-source-condition$19801$12l&&U
              g$pos$23068$12l&&U))))))
   (g$syntax-error$19805$12l&&U
     g$syntax-error$23395$12l&&U
     (case-lambda
       ((g$x$23069$12l&&U . g$args$23070$12l&&U)
        (begin
          (if (not (g$for-all$11833$12l&&U string? g$args$23070$12l&&U))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$23070$12l&&U)
            (void))
          (raise
            (condition
              (g$make-message-condition$13262$12l&&U
                (if (null? g$args$23070$12l&&U)
                  '"invalid syntax"
                  (apply string-append g$args$23070$12l&&U)))
              (g$make-syntax-violation$13356$12l&&U
                (g$syntax->datum$19811$12l&&U g$x$23069$12l&&U)
                '#f)
              (g$extract-position-condition$19802$12l&&U
                g$x$23069$12l&&U)
              (g$extract-trace$19806$12l&&U g$x$23069$12l&&U)))))))
   (g$extract-trace$19806$12l&&U
     g$extract-trace$23396$12l&&U
     (case-lambda
       ((g$x$23071$12l&&U)
        (letrec* ((g$12569$23072$12l&&U
                    (make-record-type-descriptor
                      '&trace
                      g$&condition-rtd$13256$12l&&U
                      'g$12572$12l&&U
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$12571$23073$12l&&U '#f)
                  (g$12570$23074$12l&&U
                    (make-record-constructor-descriptor
                      g$12569$23072$12l&&U
                      g$&condition-rcd$13257$12l&&U
                      g$12571$23073$12l&&U))
                  (g$12568$23077$12l&&U
                    (record-predicate g$12569$23072$12l&&U))
                  (g$make-trace$23078$12l&&U
                    (record-constructor g$12570$23074$12l&&U))
                  (g$12567$23079$12l&&U
                    (record-accessor g$12569$23072$12l&&U '0))
                  (g$trace?$23080$12l&&U
                    (condition-predicate g$12569$23072$12l&&U))
                  (g$trace-form$23081$12l&&U
                    (condition-accessor
                      g$12569$23072$12l&&U
                      g$12567$23079$12l&&U)))
          ((letrec ((g$f$23082$12l&&U
                      (case-lambda
                        ((g$x$23083$12l&&U)
                         (if (g$stx?$19163$12l&&U g$x$23083$12l&&U)
                           (apply
                             condition
                             (g$make-trace$23078$12l&&U
                               g$x$23083$12l&&U)
                             (g$map$11835$12l&&U
                               g$f$23082$12l&&U
                               (g$stx-ae*$19168$12l&&U
                                 g$x$23083$12l&&U)))
                           (if (annotation? g$x$23083$12l&&U)
                             (g$make-trace$23078$12l&&U
                               (g$make-stx$19164$12l&&U
                                 g$x$23083$12l&&U
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$23082$12l&&U)
           g$x$23071$12l&&U)))))
   (g$syntax-violation*$19807$12l&&U
     g$syntax-violation*$23397$12l&&U
     (case-lambda
       ((g$who$23084$12l&&U
          g$msg$23085$12l&&U
          g$form$23086$12l&&U
          g$condition-object$23087$12l&&U)
        (begin
          (if (not (string? g$msg$23085$12l&&U))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$23085$12l&&U)
            (void))
          ((case-lambda
             ((g$who$23088$12l&&U)
              (raise
                (condition
                  (if g$who$23088$12l&&U
                    (g$make-who-condition$13322$12l&&U
                      g$who$23088$12l&&U)
                    (condition))
                  (g$make-message-condition$13262$12l&&U
                    g$msg$23085$12l&&U)
                  g$condition-object$23087$12l&&U
                  (g$extract-position-condition$19802$12l&&U
                    g$form$23086$12l&&U)
                  (g$extract-trace$19806$12l&&U g$form$23086$12l&&U)))))
           (if ((case-lambda
                  ((g$t$23089$12l&&U)
                   (if g$t$23089$12l&&U
                     g$t$23089$12l&&U
                     (begin
                       '#f
                       (g$symbol?$12579$12l&&U g$who$23084$12l&&U)))))
                (string? g$who$23084$12l&&U))
             g$who$23084$12l&&U
             (if (not g$who$23084$12l&&U)
               ((case-lambda
                  ((g$t$23090$12l&&U)
                   ((case-lambda
                      ((g$ls/false$23091$12l&&U)
                       (if (if g$ls/false$23091$12l&&U
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$23092$12l&&U)
                                    (g$id?$19191$12l&&U
                                      g$id$23092$12l&&U)))
                                 g$ls/false$23091$12l&&U))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$23093$12l&&U)
                              (g$syntax->datum$19811$12l&&U
                                g$id$23093$12l&&U)))
                           g$ls/false$23091$12l&&U)
                         ((case-lambda
                            ((g$t$23094$12l&&U)
                             ((case-lambda
                                ((g$ls/false$23095$12l&&U)
                                 (if (if g$ls/false$23095$12l&&U
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$23096$12l&&U
                                                g$rest$23097$12l&&U)
                                              (g$id?$19191$12l&&U
                                                g$id$23096$12l&&U)))
                                           g$ls/false$23095$12l&&U))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$23098$12l&&U
                                          g$rest$23099$12l&&U)
                                        (g$syntax->datum$19811$12l&&U
                                          g$id$23098$12l&&U)))
                                     g$ls/false$23095$12l&&U)
                                   ((case-lambda
                                      ((g$t$23100$12l&&U)
                                       ((case-lambda
                                          ((g$ls/false$23101$12l&&U)
                                           (if g$ls/false$23101$12l&&U
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$23101$12l&&U)
                                             (g$syntax-violation$19808$12l&&U
                                               '#f
                                               '"invalid syntax"
                                               g$t$23100$12l&&U))))
                                        (g$syntax-dispatch$19689$12l&&U
                                          g$t$23100$12l&&U
                                          '_))))
                                    g$t$23094$12l&&U))))
                              (g$syntax-dispatch$19689$12l&&U
                                g$t$23094$12l&&U
                                '(any . any)))))
                          g$t$23090$12l&&U))))
                    (g$syntax-dispatch$19689$12l&&U
                      g$t$23090$12l&&U
                      'any))))
                g$form$23086$12l&&U)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$23084$12l&&U))))))))
   (g$syntax-violation$19808$12l&&U
     g$syntax-violation$23398$12l&&U
     (case-lambda
       ((g$who$23102$12l&&U g$msg$23103$12l&&U g$form$23104$12l&&U)
        (g$syntax-violation$19808$12l&&U
          g$who$23102$12l&&U
          g$msg$23103$12l&&U
          g$form$23104$12l&&U
          '#f))
       ((g$who$23105$12l&&U
          g$msg$23106$12l&&U
          g$form$23107$12l&&U
          g$subform$23108$12l&&U)
        (g$syntax-violation*$19807$12l&&U
          g$who$23105$12l&&U
          g$msg$23106$12l&&U
          g$form$23107$12l&&U
          (g$make-syntax-violation$13356$12l&&U
            (g$syntax->datum$19811$12l&&U g$form$23107$12l&&U)
            (g$syntax->datum$19811$12l&&U g$subform$23108$12l&&U))))))
   (g$identifier?$19809$12l&&U
     g$identifier?$23399$12l&&U
     (case-lambda
       ((g$x$23109$12l&&U) (g$id?$19191$12l&&U g$x$23109$12l&&U))))
   (g$datum->syntax$19810$12l&&U
     g$datum->syntax$23400$12l&&U
     (case-lambda
       ((g$id$23110$12l&&U g$datum$23111$12l&&U)
        (if (g$id?$19191$12l&&U g$id$23110$12l&&U)
          (g$datum->stx$19174$12l&&U
            g$id$23110$12l&&U
            g$datum$23111$12l&&U)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$23110$12l&&U)))))
   (g$syntax->datum$19811$12l&&U
     g$syntax->datum$23401$12l&&U
     (case-lambda
       ((g$x$23112$12l&&U)
        (g$stx->datum$19202$12l&&U g$x$23112$12l&&U))))
   (g$compile-r6rs-top-level$19812$12l&&U
     g$compile-r6rs-top-level$23402$12l&&U
     (case-lambda
       ((g$x*$23113$12l&&U)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$19752$12l&&U g$x*$23113$12l&&U)))
          (case-lambda
            ((g$lib*$23116$12l&&U g$invoke-code$23117$12l&&U)
             ((case-lambda
                ((g$invoke-code$23118$12l&&U g$lib*$23119$12l&&U)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$11836$12l&&U
                        g$invoke-library$18897$12l&&U
                        g$lib*$23119$12l&&U)
                      (eval-core
                        (g$expanded->core$18629$12l&&U
                          g$invoke-code$23118$12l&&U)))))))
              g$invoke-code$23117$12l&&U
              g$lib*$23116$12l&&U)))))))
   (g$pre-compile-r6rs-top-level$19813$12l&&U
     g$pre-compile-r6rs-top-level$23403$12l&&U
     (case-lambda
       ((g$x*$23120$12l&&U)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$19752$12l&&U g$x*$23120$12l&&U)))
          (case-lambda
            ((g$lib*$23123$12l&&U g$invoke-code$23124$12l&&U)
             ((case-lambda
                ((g$invoke-code$23125$12l&&U g$lib*$23126$12l&&U)
                 (begin
                   (g$for-each$11836$12l&&U
                     g$invoke-library$18897$12l&&U
                     g$lib*$23126$12l&&U)
                   (compile-core
                     (g$expanded->core$18629$12l&&U
                       g$invoke-code$23125$12l&&U)))))
              g$invoke-code$23124$12l&&U
              g$lib*$23123$12l&&U)))))))
   (g$new-interaction-environment$19814$12l&&U
     g$new-interaction-environment$23404$12l&&U
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$23127$12l&&U g$rib$23128$12l&&U)
            (begin
              ((case-lambda
                 ((g$subst$23129$12l&&U)
                  (begin
                    (g$set-rib-sym*!$19144$12l&&U
                      g$rib$23128$12l&&U
                      (g$map$11835$12l&&U car g$subst$23129$12l&&U))
                    (g$set-rib-mark**!$19145$12l&&U
                      g$rib$23128$12l&&U
                      (g$map$11835$12l&&U
                        (case-lambda
                          ((g$x$23130$12l&&U) g$top-mark*$19124$12l&&U))
                        g$subst$23129$12l&&U))
                    (g$set-rib-label*!$19146$12l&&U
                      g$rib$23128$12l&&U
                      (g$map$11835$12l&&U cdr g$subst$23129$12l&&U)))))
               (g$library-subst$18854$12l&&U g$lib$23127$12l&&U))
              (g$make-interaction-env$19773$12l&&U
                g$rib$23128$12l&&U
                '()
                '()))))
         (g$find-library-by-name$18890$12l&&U '(ironscheme))
         (g$make-empty-rib$19149$12l&&U)))))
   (g$interaction-environment$19815$12l&&U
     g$interaction-environment$23405$12l&&U
     ((case-lambda
        ((g$e$23131$12l&&U)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$23132$12l&&U)
                (if g$t$23132$12l&&U
                  g$t$23132$12l&&U
                  (begin
                    '#f
                    (begin
                      (set! g$e$23131$12l&&U
                        (g$new-interaction-environment$19814$12l&&U))
                      g$e$23131$12l&&U)))))
             g$e$23131$12l&&U)))))
      '#f))
   (g$top-level-context$19816$12l&&U
     g$top-level-context$23406$12l&&U
     (g$make-parameter$18052$12l&&U '#f)))
  (g$current-library-expander$18887$12l&&U
    g$library-expander$19792$12l&&U))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$18626$12l&&U
      (case-lambda
        ((g$x$23487$12l&&U)
         ((case-lambda
            ((g$t$23488$12l&&U)
             (if g$t$23488$12l&&U (cdr g$t$23488$12l&&U) '#f)))
          (g$assq$11823$12l&&U
            g$x$23487$12l&&U
            '((ellipsis-map . g$ellipsis-map$23290$12l&&U)
              (&no-nans-rcd . g$&no-nans-rcd$13491$12l&&U)
              (&no-nans-rtd . g$&no-nans-rtd$13490$12l&&U)
              (&no-infinities-rcd . g$&no-infinities-rcd$13483$12l&&U)
              (&no-infinities-rtd . g$&no-infinities-rtd$13482$12l&&U)
              (&i/o-encoding-rcd . g$&i/o-encoding-rcd$13475$12l&&U)
              (&i/o-encoding-rtd . g$&i/o-encoding-rtd$13474$12l&&U)
              (&i/o-decoding-rcd . g$&i/o-decoding-rcd$13465$12l&&U)
              (&i/o-decoding-rtd . g$&i/o-decoding-rtd$13464$12l&&U)
              (&i/o-port-rcd . g$&i/o-port-rcd$13457$12l&&U)
              (&i/o-port-rtd . g$&i/o-port-rtd$13456$12l&&U)
              (&i/o-file-does-not-exist-rcd
                .
                g$&i/o-file-does-not-exist-rcd$13447$12l&&U)
              (&i/o-file-does-not-exist-rtd
                .
                g$&i/o-file-does-not-exist-rtd$13446$12l&&U)
              (&i/o-file-already-exists-rcd
                .
                g$&i/o-file-already-exists-rcd$13439$12l&&U)
              (&i/o-file-already-exists-rtd
                .
                g$&i/o-file-already-exists-rtd$13438$12l&&U)
              (&i/o-file-is-read-only-rcd
                .
                g$&i/o-file-is-read-only-rcd$13431$12l&&U)
              (&i/o-file-is-read-only-rtd
                .
                g$&i/o-file-is-read-only-rtd$13430$12l&&U)
              (&i/o-file-protection-rcd
                .
                g$&i/o-file-protection-rcd$13423$12l&&U)
              (&i/o-file-protection-rtd
                .
                g$&i/o-file-protection-rtd$13422$12l&&U)
              (&i/o-filename-rcd . g$&i/o-filename-rcd$13415$12l&&U)
              (&i/o-filename-rtd . g$&i/o-filename-rtd$13414$12l&&U)
              (&i/o-invalid-position-rcd
                .
                g$&i/o-invalid-position-rcd$13405$12l&&U)
              (&i/o-invalid-position-rtd
                .
                g$&i/o-invalid-position-rtd$13404$12l&&U)
              (&i/o-write-rcd . g$&i/o-write-rcd$13395$12l&&U)
              (&i/o-write-rtd . g$&i/o-write-rtd$13394$12l&&U)
              (&i/o-read-rcd . g$&i/o-read-rcd$13387$12l&&U)
              (&i/o-read-rtd . g$&i/o-read-rtd$13386$12l&&U)
              (&i/o-rcd . g$&i/o-rcd$13379$12l&&U)
              (&i/o-rtd . g$&i/o-rtd$13378$12l&&U)
              (&undefined-rcd . g$&undefined-rcd$13371$12l&&U)
              (&undefined-rtd . g$&undefined-rtd$13370$12l&&U)
              (&syntax-rcd . g$&syntax-rcd$13363$12l&&U)
              (&syntax-rtd . g$&syntax-rtd$13362$12l&&U)
              (&lexical-rcd . g$&lexical-rcd$13351$12l&&U)
              (&lexical-rtd . g$&lexical-rtd$13350$12l&&U)
              (&implementation-restriction-rcd
                .
                g$&implementation-restriction-rcd$13343$12l&&U)
              (&implementation-restriction-rtd
                .
                g$&implementation-restriction-rtd$13342$12l&&U)
              (&non-continuable-rcd
                .
                g$&non-continuable-rcd$13335$12l&&U)
              (&non-continuable-rtd
                .
                g$&non-continuable-rtd$13334$12l&&U)
              (&who-rcd . g$&who-rcd$13327$12l&&U)
              (&who-rtd . g$&who-rtd$13326$12l&&U)
              (&irritants-rcd . g$&irritants-rcd$13317$12l&&U)
              (&irritants-rtd . g$&irritants-rtd$13316$12l&&U)
              (&assertion-rcd . g$&assertion-rcd$13307$12l&&U)
              (&assertion-rtd . g$&assertion-rtd$13306$12l&&U)
              (&violation-rcd . g$&violation-rcd$13299$12l&&U)
              (&violation-rtd . g$&violation-rtd$13298$12l&&U)
              (&error-rcd . g$&error-rcd$13291$12l&&U)
              (&error-rtd . g$&error-rtd$13290$12l&&U)
              (&serious-rcd . g$&serious-rcd$13283$12l&&U)
              (&serious-rtd . g$&serious-rtd$13282$12l&&U)
              (&warning-rcd . g$&warning-rcd$13275$12l&&U)
              (&warning-rtd . g$&warning-rtd$13274$12l&&U)
              (&message-rcd . g$&message-rcd$13267$12l&&U)
              (&message-rtd . g$&message-rtd$13266$12l&&U)
              (&condition-rcd . g$&condition-rcd$13257$12l&&U)
              (&condition-rtd . g$&condition-rtd$13256$12l&&U)
              (make-list . g$make-list$11818$12l&&U)
              (last-pair . g$last-pair$11817$12l&&U)
              (ironscheme-build . g$ironscheme-build$23478$12l&&U)
              (syntax-error . g$syntax-error$23395$12l&&U)
              (syntax-dispatch . g$syntax-dispatch$23285$12l&&U)
              (compile-system-libraries
                .
                g$compile-system-libraries$23482$12l&&U)
              (compile->closure . g$compile->closure$23484$12l&&U)
              (compile . g$compile$23483$12l&&U)
              (load . g$load$23477$12l&&U)
              (interaction-environment
                .
                g$interaction-environment$23405$12l&&U)
              (string-normalize-nfkd
                .
                g$string-normalize-nfkd$13713$12l&&U)
              (string-normalize-nfkc
                .
                g$string-normalize-nfkc$13712$12l&&U)
              (string-normalize-nfd
                .
                g$string-normalize-nfd$13711$12l&&U)
              (string-normalize-nfc
                .
                g$string-normalize-nfc$13710$12l&&U)
              (string-ci>? . g$string-ci>?$13702$12l&&U)
              (string-ci>=? . g$string-ci>=?$13704$12l&&U)
              (string-ci=? . g$string-ci=?$13700$12l&&U)
              (string-ci<? . g$string-ci<?$13701$12l&&U)
              (string-ci<=? . g$string-ci<=?$13703$12l&&U)
              (char-ci>? . g$char-ci>?$13707$12l&&U)
              (char-ci>=? . g$char-ci>=?$13709$12l&&U)
              (char-ci=? . g$char-ci=?$13705$12l&&U)
              (char-ci<? . g$char-ci<?$13706$12l&&U)
              (char-ci<=? . g$char-ci<=?$13708$12l&&U)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$23223$12l&&U)
              (variable-transformer?
                .
                g$variable-transformer?$23222$12l&&U)
              (make-variable-transformer
                .
                g$make-variable-transformer$23220$12l&&U)
              (identifier? . g$identifier?$23399$12l&&U)
              (generate-temporaries
                .
                g$generate-temporaries$23388$12l&&U)
              (free-identifier=? . g$free-identifier=?$23389$12l&&U)
              (syntax->datum . g$syntax->datum$23401$12l&&U)
              (datum->syntax . g$datum->syntax$23400$12l&&U)
              (bound-identifier=? . g$bound-identifier=?$23390$12l&&U)
              (delete-file . g$delete-file$12707$12l&&U)
              (file-exists? . g$file-exists?$12706$12l&&U)
              (list-sort . g$list-sort$13555$12l&&U)
              (make-eqv-hashtable . g$make-eqv-hashtable$12689$12l&&U)
              (make-eq-hashtable . g$make-eq-hashtable$12688$12l&&U)
              (hashtable-update! . g$hashtable-update!$12695$12l&&U)
              (hashtable-size . g$hashtable-size$12690$12l&&U)
              (hashtable-set! . g$hashtable-set!$12692$12l&&U)
              (hashtable-ref . g$hashtable-ref$12691$12l&&U)
              (hashtable-delete! . g$hashtable-delete!$12693$12l&&U)
              (hashtable-contains? . g$hashtable-contains?$12694$12l&&U)
              (hashtable-clear! . g$hashtable-clear!$12696$12l&&U)
              (call-with-output-file
                .
                g$call-with-output-file$17668$12l&&U)
              (call-with-input-file
                .
                g$call-with-input-file$17667$12l&&U)
              (write-char . g$write-char$17664$12l&&U)
              (with-output-to-file . g$with-output-to-file$17666$12l&&U)
              (with-input-from-file
                .
                g$with-input-from-file$17665$12l&&U)
              (read-char . g$read-char$17663$12l&&U)
              (peek-char . g$peek-char$17662$12l&&U)
              (newline . g$newline$17669$12l&&U)
              (put-datum . g$put-datum$17599$12l&&U)
              (port? . g$port?$17604$12l&&U)
              (open-string-output-port
                .
                g$open-string-output-port$17603$12l&&U)
              (make-i/o-write-error
                .
                g$make-i/o-write-error$13392$12l&&U)
              (make-i/o-read-error . g$make-i/o-read-error$13384$12l&&U)
              (make-i/o-port-error . g$make-i/o-port-error$13452$12l&&U)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$13400$12l&&U)
              (make-i/o-filename-error
                .
                g$make-i/o-filename-error$13410$12l&&U)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$13420$12l&&U)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$13428$12l&&U)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$13444$12l&&U)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$13436$12l&&U)
              (make-i/o-error . g$make-i/o-error$13376$12l&&U)
              (make-i/o-encoding-error
                .
                g$make-i/o-encoding-error$13470$12l&&U)
              (make-i/o-decoding-error
                .
                g$make-i/o-decoding-error$13462$12l&&U)
              (i/o-write-error? . g$i/o-write-error?$13393$12l&&U)
              (i/o-read-error? . g$i/o-read-error?$13385$12l&&U)
              (i/o-port-error? . g$i/o-port-error?$13454$12l&&U)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$13402$12l&&U)
              (i/o-error-position . g$i/o-error-position$13403$12l&&U)
              (i/o-filename-error? . g$i/o-filename-error?$13412$12l&&U)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$13421$12l&&U)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$13429$12l&&U)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$13445$12l&&U)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$13437$12l&&U)
              (i/o-error? . g$i/o-error?$13377$12l&&U)
              (i/o-error-port . g$i/o-error-port$13455$12l&&U)
              (i/o-error-filename . g$i/o-error-filename$13413$12l&&U)
              (i/o-encoding-error? . g$i/o-encoding-error?$13472$12l&&U)
              (i/o-encoding-error-char
                .
                g$i/o-encoding-error-char$13473$12l&&U)
              (i/o-decoding-error? . g$i/o-decoding-error?$13463$12l&&U)
              (get-datum . g$get-datum$17600$12l&&U)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$17605$12l&&U)
              (call-with-port . g$call-with-port$17606$12l&&U)
              (scheme-report-environment
                .
                g$scheme-report-environment$23378$12l&&U)
              (quotient . g$quotient$13522$12l&&U)
              (null-environment . g$null-environment$23377$12l&&U)
              (remainder . g$remainder$13523$12l&&U)
              (modulo . g$modulo$13524$12l&&U)
              (inexact->exact . g$inexact->exact$13519$12l&&U)
              (force . g$force$13526$12l&&U)
              (exact->inexact . g$exact->inexact$13520$12l&&U)
              (command-line . g$command-line$23473$12l&&U)
              (remove . g$remove$11840$12l&&U)
              (remv . g$remv$11841$12l&&U)
              (remp . g$remp$11821$12l&&U)
              (remq . g$remq$11842$12l&&U)
              (partition . g$partition$11820$12l&&U)
              (memv . g$memv$11828$12l&&U)
              (memq . g$memq$11827$12l&&U)
              (memp . g$memp$11830$12l&&U)
              (member . g$member$11829$12l&&U)
              (exists . g$exists$11834$12l&&U)
              (for-all . g$for-all$11833$12l&&U)
              (fold-right . g$fold-right$11839$12l&&U)
              (fold-left . g$fold-left$11838$12l&&U)
              (find . g$find$11819$12l&&U)
              (filter . g$filter$11822$12l&&U)
              (cons* . g$cons*$11837$12l&&U)
              (assv . g$assv$11824$12l&&U)
              (assq . g$assq$11823$12l&&U)
              (assp . g$assp$11826$12l&&U)
              (assoc . g$assoc$11825$12l&&U)
              (eval . g$eval$23380$12l&&U)
              (environment . g$environment$23376$12l&&U)
              (make-enumeration . g$make-enumeration$17805$12l&&U)
              (enum-set=? . g$enum-set=?$17812$12l&&U)
              (enum-set-universe . g$enum-set-universe$17806$12l&&U)
              (enum-set-union . g$enum-set-union$17813$12l&&U)
              (enum-set-subset? . g$enum-set-subset?$17811$12l&&U)
              (enum-set-projection . g$enum-set-projection$17817$12l&&U)
              (enum-set-member? . g$enum-set-member?$17810$12l&&U)
              (enum-set-intersection
                .
                g$enum-set-intersection$17814$12l&&U)
              (enum-set-indexer . g$enum-set-indexer$17807$12l&&U)
              (enum-set-difference . g$enum-set-difference$17815$12l&&U)
              (enum-set-constructor
                .
                g$enum-set-constructor$17808$12l&&U)
              (enum-set-complement . g$enum-set-complement$17816$12l&&U)
              (enum-set->list . g$enum-set->list$17809$12l&&U)
              (who-condition? . g$who-condition?$13324$12l&&U)
              (warning? . g$warning?$13273$12l&&U)
              (violation? . g$violation?$13297$12l&&U)
              (undefined-violation?
                .
                g$undefined-violation?$13369$12l&&U)
              (syntax-violation? . g$syntax-violation?$13359$12l&&U)
              (syntax-violation-subform
                .
                g$syntax-violation-subform$13361$12l&&U)
              (syntax-violation-form
                .
                g$syntax-violation-form$13360$12l&&U)
              (syntax-violation . g$syntax-violation$23398$12l&&U)
              (serious-condition? . g$serious-condition?$13281$12l&&U)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$13333$12l&&U)
              (message-condition? . g$message-condition?$13264$12l&&U)
              (make-who-condition . g$make-who-condition$13322$12l&&U)
              (make-warning . g$make-warning$13272$12l&&U)
              (make-violation . g$make-violation$13296$12l&&U)
              (make-undefined-violation
                .
                g$make-undefined-violation$13368$12l&&U)
              (make-syntax-violation
                .
                g$make-syntax-violation$13356$12l&&U)
              (make-serious-condition
                .
                g$make-serious-condition$13280$12l&&U)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$13332$12l&&U)
              (make-message-condition
                .
                g$make-message-condition$13262$12l&&U)
              (make-lexical-violation
                .
                g$make-lexical-violation$13348$12l&&U)
              (make-irritants-condition
                .
                g$make-irritants-condition$13312$12l&&U)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$13340$12l&&U)
              (make-error . g$make-error$13288$12l&&U)
              (make-assertion-violation
                .
                g$make-assertion-violation$13304$12l&&U)
              (lexical-violation? . g$lexical-violation?$13349$12l&&U)
              (irritants-condition?
                .
                g$irritants-condition?$13314$12l&&U)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$13341$12l&&U)
              (error? . g$error?$13289$12l&&U)
              (condition-who . g$condition-who$13325$12l&&U)
              (condition-message . g$condition-message$13265$12l&&U)
              (condition-irritants . g$condition-irritants$13315$12l&&U)
              (assertion-violation?
                .
                g$assertion-violation?$13305$12l&&U)
              (native-endianness . g$native-endianness$12820$12l&&U)
              (bytevector? . g$bytevector?$12578$12l&&U)
              (bytevector-u64-set! . g$bytevector-u64-set!$12841$12l&&U)
              (bytevector-u64-ref . g$bytevector-u64-ref$12837$12l&&U)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$12843$12l&&U)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$12839$12l&&U)
              (bytevector-u32-set! . g$bytevector-u32-set!$12833$12l&&U)
              (bytevector-u32-ref . g$bytevector-u32-ref$12829$12l&&U)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$12835$12l&&U)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$12831$12l&&U)
              (bytevector-u16-set! . g$bytevector-u16-set!$12825$12l&&U)
              (bytevector-u16-ref . g$bytevector-u16-ref$12821$12l&&U)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$12827$12l&&U)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$12823$12l&&U)
              (bytevector-s64-set! . g$bytevector-s64-set!$12842$12l&&U)
              (bytevector-s64-ref . g$bytevector-s64-ref$12838$12l&&U)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$12844$12l&&U)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$12840$12l&&U)
              (bytevector-s32-set! . g$bytevector-s32-set!$12834$12l&&U)
              (bytevector-s32-ref . g$bytevector-s32-ref$12830$12l&&U)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$12836$12l&&U)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$12832$12l&&U)
              (bytevector-s16-set! . g$bytevector-s16-set!$12826$12l&&U)
              (bytevector-s16-ref . g$bytevector-s16-ref$12822$12l&&U)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$12828$12l&&U)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$12824$12l&&U)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$12847$12l&&U)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$12845$12l&&U)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$12848$12l&&U)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$12846$12l&&U)
              (no-nans-violation? . g$no-nans-violation?$13489$12l&&U)
              (no-infinities-violation?
                .
                g$no-infinities-violation?$13481$12l&&U)
              (make-no-nans-violation
                .
                g$make-no-nans-violation$13488$12l&&U)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$13480$12l&&U)
              (flzero? . g$flzero?$17572$12l&&U)
              (fltruncate . g$fltruncate$17567$12l&&U)
              (fltan . g$fltan$17556$12l&&U)
              (flsqrt . g$flsqrt$17561$12l&&U)
              (flsin . g$flsin$17554$12l&&U)
              (flround . g$flround$17568$12l&&U)
              (flpositive? . g$flpositive?$17570$12l&&U)
              (flonum? . g$flonum?$12583$12l&&U)
              (flodd? . g$flodd?$17574$12l&&U)
              (flnegative? . g$flnegative?$17571$12l&&U)
              (flnan? . g$flnan?$17553$12l&&U)
              (flmod0 . g$flmod0$17544$12l&&U)
              (flmod . g$flmod$17543$12l&&U)
              (flmin . g$flmin$17576$12l&&U)
              (flmax . g$flmax$17575$12l&&U)
              (fllog . g$fllog$17560$12l&&U)
              (flinteger? . g$flinteger?$17549$12l&&U)
              (flinfinite? . g$flinfinite?$17552$12l&&U)
              (flfloor . g$flfloor$17566$12l&&U)
              (flfinite? . g$flfinite?$17550$12l&&U)
              (flexpt . g$flexpt$17563$12l&&U)
              (flexp . g$flexp$17562$12l&&U)
              (fleven? . g$fleven?$17573$12l&&U)
              (fldiv0-and-mod0 . g$fldiv0-and-mod0$17548$12l&&U)
              (fldiv0 . g$fldiv0$17541$12l&&U)
              (fldiv-and-mod . g$fldiv-and-mod$17545$12l&&U)
              (fldiv . g$fldiv$17547$12l&&U)
              (flcos . g$flcos$17555$12l&&U)
              (flceiling . g$flceiling$17564$12l&&U)
              (flatan . g$flatan$17559$12l&&U)
              (flasin . g$flasin$17557$12l&&U)
              (flacos . g$flacos$17558$12l&&U)
              (flabs . g$flabs$17569$12l&&U)
              (fl>? . g$fl>?$17538$12l&&U)
              (fl>=? . g$fl>=?$17539$12l&&U)
              (fl=? . g$fl=?$17535$12l&&U)
              (fl<? . g$fl<?$17536$12l&&U)
              (fl<=? . g$fl<=?$17537$12l&&U)
              (fl/ . g$fl/$17534$12l&&U)
              (fl- . g$fl-$17533$12l&&U)
              (fl+ . g$fl+$17531$12l&&U)
              (fl* . g$fl*$17532$12l&&U)
              (fxzero? . g$fxzero?$16022$12l&&U)
              (fxxor . g$fxxor$16006$12l&&U)
              (fxrotate-bit-field . g$fxrotate-bit-field$16042$12l&&U)
              (fxreverse-bit-field . g$fxreverse-bit-field$16043$12l&&U)
              (fxpositive? . g$fxpositive?$16018$12l&&U)
              (fxodd? . g$fxodd?$16026$12l&&U)
              (fxnot . g$fxnot$15998$12l&&U)
              (fxnegative? . g$fxnegative?$16020$12l&&U)
              (fxmod0 . g$fxmod0$16011$12l&&U)
              (fxmod . g$fxmod$16010$12l&&U)
              (fxmin . g$fxmin$16028$12l&&U)
              (fxmax . g$fxmax$16027$12l&&U)
              (fxlength . g$fxlength$15995$12l&&U)
              (fxior . g$fxior$16005$12l&&U)
              (fxif . g$fxif$16033$12l&&U)
              (fxfirst-bit-set . g$fxfirst-bit-set$15996$12l&&U)
              (fxeven? . g$fxeven?$16024$12l&&U)
              (fxdiv0-and-mod0 . g$fxdiv0-and-mod0$16016$12l&&U)
              (fxdiv0 . g$fxdiv0$16014$12l&&U)
              (fxdiv-and-mod . g$fxdiv-and-mod$16012$12l&&U)
              (fxdiv . g$fxdiv$16008$12l&&U)
              (fxcopy-bit-field . g$fxcopy-bit-field$16039$12l&&U)
              (fxcopy-bit . g$fxcopy-bit$16035$12l&&U)
              (fxbit-set? . g$fxbit-set?$15997$12l&&U)
              (fxbit-field . g$fxbit-field$16037$12l&&U)
              (fxbit-count . g$fxbit-count$15993$12l&&U)
              (fxarithmetic-shift-right
                .
                g$fxarithmetic-shift-right$16041$12l&&U)
              (fxarithmetic-shift-left
                .
                g$fxarithmetic-shift-left$16040$12l&&U)
              (fxarithmetic-shift . g$fxarithmetic-shift$15991$12l&&U)
              (fxand . g$fxand$16004$12l&&U)
              (fx>? . g$fx>?$16002$12l&&U)
              (fx>=? . g$fx>=?$16003$12l&&U)
              (fx=? . g$fx=?$15999$12l&&U)
              (fx<? . g$fx<?$16000$12l&&U)
              (fx<=? . g$fx<=?$16001$12l&&U)
              (fx-/carry . g$fx-/carry$16030$12l&&U)
              (fx- . g$fx-$15988$12l&&U)
              (fx+/carry . g$fx+/carry$16031$12l&&U)
              (fx+ . g$fx+$15986$12l&&U)
              (fx*/carry . g$fx*/carry$16029$12l&&U)
              (fx* . g$fx*$15987$12l&&U)
              (greatest-fixnum . g$greatest-fixnum$15984$12l&&U)
              (least-fixnum . g$least-fixnum$15985$12l&&U)
              (fixnum-width . g$fixnum-width$12584$12l&&U)
              (fixnum? . g$fixnum?$12582$12l&&U)
              (bitwise-rotate-bit-field
                .
                g$bitwise-rotate-bit-field$13751$12l&&U)
              (bitwise-if . g$bitwise-if$13745$12l&&U)
              (bitwise-copy-bit-field
                .
                g$bitwise-copy-bit-field$13748$12l&&U)
              (bitwise-copy-bit . g$bitwise-copy-bit$13746$12l&&U)
              (bitwise-bit-field . g$bitwise-bit-field$13747$12l&&U)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$13750$12l&&U)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$13749$12l&&U)
              (zero? . g$zero?$12626$12l&&U)
              (vector? . g$vector?$12577$12l&&U)
              (vector-set! . g$vector-set!$12592$12l&&U)
              (vector-ref . g$vector-ref$12591$12l&&U)
              (vector-map . g$vector-map$12648$12l&&U)
              (vector-for-each . g$vector-for-each$12649$12l&&U)
              (vector-fill! . g$vector-fill!$12593$12l&&U)
              (symbol? . g$symbol?$12579$12l&&U)
              (symbol=? . g$symbol=?$12638$12l&&U)
              (string>? . g$string>?$12635$12l&&U)
              (string>=? . g$string>=?$12637$12l&&U)
              (string=? . g$string=?$12633$12l&&U)
              (string<? . g$string<?$12634$12l&&U)
              (string<=? . g$string<=?$12636$12l&&U)
              (string-for-each . g$string-for-each$12650$12l&&U)
              (reverse . g$reverse$12595$12l&&U)
              (rationalize . g$rationalize$12645$12l&&U)
              (procedure? . g$procedure?$12581$12l&&U)
              (positive? . g$positive?$12624$12l&&U)
              (odd? . g$odd?$12628$12l&&U)
              (negative? . g$negative?$12625$12l&&U)
              (min . g$min$12630$12l&&U)
              (max . g$max$12629$12l&&U)
              (map . g$map$11835$12l&&U)
              (list-tail . g$list-tail$11815$12l&&U)
              (list-ref . g$list-ref$11816$12l&&U)
              (list->vector . g$list->vector$12589$12l&&U)
              (list->string . g$list->string$12590$12l&&U)
              (lcm . g$lcm$12632$12l&&U)
              (gcd . g$gcd$12631$12l&&U)
              (for-each . g$for-each$11836$12l&&U)
              (even? . g$even?$12627$12l&&U)
              (div0-and-mod0 . g$div0-and-mod0$12588$12l&&U)
              (mod0 . g$mod0$12586$12l&&U)
              (div-and-mod . g$div-and-mod$12587$12l&&U)
              (mod . g$mod$12585$12l&&U)
              (char? . g$char?$12576$12l&&U)
              (char>? . g$char>?$12642$12l&&U)
              (char>=? . g$char>=?$12644$12l&&U)
              (char=? . g$char=?$12640$12l&&U)
              (char<? . g$char<?$12641$12l&&U)
              (char<=? . g$char<=?$12643$12l&&U)
              (cddddr . g$cddddr$12623$12l&&U)
              (cdddar . g$cdddar$12622$12l&&U)
              (cddadr . g$cddadr$12621$12l&&U)
              (cddaar . g$cddaar$12620$12l&&U)
              (cdaddr . g$cdaddr$12619$12l&&U)
              (cdadar . g$cdadar$12618$12l&&U)
              (cdaadr . g$cdaadr$12617$12l&&U)
              (cdaaar . g$cdaaar$12616$12l&&U)
              (cadddr . g$cadddr$12615$12l&&U)
              (caddar . g$caddar$12614$12l&&U)
              (cadadr . g$cadadr$12613$12l&&U)
              (cadaar . g$cadaar$12612$12l&&U)
              (caaddr . g$caaddr$12611$12l&&U)
              (caadar . g$caadar$12610$12l&&U)
              (caaadr . g$caaadr$12609$12l&&U)
              (caaaar . g$caaaar$12608$12l&&U)
              (cdddr . g$cdddr$12607$12l&&U)
              (cddar . g$cddar$12606$12l&&U)
              (cdadr . g$cdadr$12605$12l&&U)
              (cdaar . g$cdaar$12604$12l&&U)
              (caddr . g$caddr$12603$12l&&U)
              (cadar . g$cadar$12602$12l&&U)
              (caadr . g$caadr$12601$12l&&U)
              (caaar . g$caaar$12600$12l&&U)
              (cddr . g$cddr$12599$12l&&U)
              (cdar . g$cdar$12598$12l&&U)
              (cadr . g$cadr$12597$12l&&U)
              (caar . g$caar$12596$12l&&U)
              (boolean? . g$boolean?$12580$12l&&U)
              (boolean=? . g$boolean=?$12639$12l&&U)
              (enum-set? . g$enum?$17786$12l&&U)
              (make-promise . g$make-promise$13525$12l&&U)
              (load/unload . g$load/unload$23476$12l&&U)
              (load/args . g$load/args$23475$12l&&U)
              (printf . g$printf$17841$12l&&U)
              (fprintf . g$fprintf$17842$12l&&U)
              (format . g$format$17843$12l&&U)
              (trace-printer . g$trace-printer$23472$12l&&U)
              (make-traced-macro . g$make-traced-macro$17847$12l&&U)
              (assertion-error . g$assertion-error$23394$12l&&U)
              (make-parameter . g$make-parameter$18052$12l&&U)
              (environment-bindings
                .
                g$environment-bindings$23372$12l&&U)
              (environment-symbols . g$environment-symbols$23375$12l&&U)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$23371$12l&&U)
              (library-path . g$library-path$18879$12l&&U)
              (make-compile-time-value
                .
                g$make-compile-time-value$23221$12l&&U)
              (expand->core . g$expand->core$23381$12l&&U)
              (expand . g$expand$23379$12l&&U)
              (syntax-transpose . g$syntax-transpose$23328$12l&&U)
              (convert->cps . g$convert->cps$18580$12l&&U)
              (installed-libraries . g$installed-libraries$18900$12l&&U)
              (uninstall-library . g$uninstall-library$18891$12l&&U)
              (pretty-gensyms . g$pretty-gensyms$18260$12l&&U)
              (pretty-width . g$pretty-width$18257$12l&&U)
              (pretty-print . g$pretty-print$18262$12l&&U)))))))
    (g$install-library$18895$12l&&U
      'g$13161$12l&&U
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$13154$12l&&U)
        (cosh . g$13153$12l&&U)
        (sinh . g$13152$12l&&U)
        (make-guid . g$13151$12l&&U)
        (unspecified? . g$13150$12l&&U)
        (make-list . g$5142$12l&&U)
        (last-pair . g$5141$12l&&U)
        (load-r5rs . g$13149$12l&&U)
        (license . g$13148$12l&&U)
        (stacktrace . g$13147$12l&&U)
        (ironscheme-build . g$12639$12l&&U)
        (remove-location . g$13134$12l&&U)
        (set-symbol-value! . g$13133$12l&&U)
        (symbol-value . g$13132$12l&&U)
        (symbol-bound? . g$13131$12l&&U)
        (ungensym . g$13130$12l&&U)
        (gensym . g$13129$12l&&U)
        (void . g$13128$12l&&U)
        (compile-system-libraries . g$12643$12l&&U)
        (compile->closure . g$12645$12l&&U)
        (compile . g$12644$12l&&U)
        (load . g$12638$12l&&U)
        (interaction-environment . g$9622$12l&&U)
        (string-upcase . g$13123$12l&&U)
        (string-titlecase . g$13122$12l&&U)
        (string-normalize-nfkd . g$6383$12l&&U)
        (string-normalize-nfkc . g$6382$12l&&U)
        (string-normalize-nfd . g$6381$12l&&U)
        (string-normalize-nfc . g$6380$12l&&U)
        (string-foldcase . g$13121$12l&&U)
        (string-downcase . g$13120$12l&&U)
        (string-ci>? . g$6367$12l&&U)
        (string-ci>=? . g$6369$12l&&U)
        (string-ci=? . g$6365$12l&&U)
        (string-ci<? . g$6366$12l&&U)
        (string-ci<=? . g$6368$12l&&U)
        (char-whitespace? . g$13119$12l&&U)
        (char-upper-case? . g$13118$12l&&U)
        (char-title-case? . g$13117$12l&&U)
        (char-numeric? . g$13116$12l&&U)
        (char-lower-case? . g$13115$12l&&U)
        (char-general-category . g$13114$12l&&U)
        (char-upcase . g$13113$12l&&U)
        (char-titlecase . g$13112$12l&&U)
        (char-foldcase . g$13111$12l&&U)
        (char-downcase . g$13110$12l&&U)
        (char-ci>? . g$6377$12l&&U)
        (char-ci>=? . g$6379$12l&&U)
        (char-ci=? . g$6375$12l&&U)
        (char-ci<? . g$6376$12l&&U)
        (char-ci<=? . g$6378$12l&&U)
        (char-alphabetic? . g$13109$12l&&U)
        (make-variable-transformer . g$9296$12l&&U)
        (identifier? . g$9616$12l&&U)
        (generate-temporaries . g$9605$12l&&U)
        (free-identifier=? . g$9606$12l&&U)
        (syntax->datum . g$9618$12l&&U)
        (datum->syntax . g$9617$12l&&U)
        (bound-identifier=? . g$9607$12l&&U)
        (record-type-descriptor? . g$13108$12l&&U)
        (record-predicate . g$13107$12l&&U)
        (record-mutator . g$13106$12l&&U)
        (record-constructor . g$13105$12l&&U)
        (record-accessor . g$13104$12l&&U)
        (make-record-type-descriptor . g$13103$12l&&U)
        (make-record-constructor-descriptor . g$13102$12l&&U)
        (record? . g$13101$12l&&U)
        (record-type-uid . g$13100$12l&&U)
        (record-type-sealed? . g$13099$12l&&U)
        (record-type-parent . g$13098$12l&&U)
        (record-type-opaque? . g$13097$12l&&U)
        (record-type-name . g$13096$12l&&U)
        (record-type-generative? . g$13095$12l&&U)
        (record-type-field-names . g$13094$12l&&U)
        (record-rtd . g$13093$12l&&U)
        (record-field-mutable? . g$13092$12l&&U)
        (delete-file . g$5774$12l&&U)
        (file-exists? . g$5773$12l&&U)
        (vector-sort! . g$13091$12l&&U)
        (vector-sort . g$13090$12l&&U)
        (list-sort . g$6336$12l&&U)
        (symbol-hash . g$13089$12l&&U)
        (string-ci-hash . g$13088$12l&&U)
        (string-hash . g$13087$12l&&U)
        (equal-hash . g$13086$12l&&U)
        (hashtable-equivalence-function . g$13085$12l&&U)
        (make-hashtable . g$13084$12l&&U)
        (hashtable-hash-function . g$13083$12l&&U)
        (make-eqv-hashtable . g$5741$12l&&U)
        (make-eq-hashtable . g$5740$12l&&U)
        (hashtable? . g$13082$12l&&U)
        (hashtable-update! . g$5747$12l&&U)
        (hashtable-size . g$5742$12l&&U)
        (hashtable-set! . g$5744$12l&&U)
        (hashtable-ref . g$5743$12l&&U)
        (hashtable-mutable? . g$13081$12l&&U)
        (hashtable-keys . g$13080$12l&&U)
        (hashtable-entries . g$13079$12l&&U)
        (hashtable-delete! . g$5745$12l&&U)
        (hashtable-copy . g$13078$12l&&U)
        (hashtable-contains? . g$5746$12l&&U)
        (hashtable-clear! . g$5748$12l&&U)
        (call-with-output-file . g$8120$12l&&U)
        (call-with-input-file . g$8119$12l&&U)
        (write-char . g$8111$12l&&U)
        (write . g$13077$12l&&U)
        (with-output-to-file . g$8118$12l&&U)
        (with-input-from-file . g$8117$12l&&U)
        (read-char . g$8110$12l&&U)
        (read . g$13076$12l&&U)
        (peek-char . g$8109$12l&&U)
        (open-output-file . g$13075$12l&&U)
        (open-input-file . g$13074$12l&&U)
        (newline . g$8121$12l&&U)
        (display . g$13073$12l&&U)
        (close-output-port . g$13072$12l&&U)
        (close-input-port . g$13071$12l&&U)
        (eof-object? . g$13070$12l&&U)
        (eof-object . g$13069$12l&&U)
        (current-error-port . g$13068$12l&&U)
        (current-output-port . g$13067$12l&&U)
        (current-input-port . g$13066$12l&&U)
        (output-port? . g$13065$12l&&U)
        (input-port? . g$13064$12l&&U)
        (utf-8-codec . g$13063$12l&&U)
        (utf-16-codec . g$13062$12l&&U)
        (transcoder-error-handling-mode . g$13061$12l&&U)
        (transcoder-eol-style . g$13060$12l&&U)
        (transcoder-codec . g$13059$12l&&U)
        (transcoded-port . g$13058$12l&&U)
        (textual-port? . g$13057$12l&&U)
        (string->bytevector . g$13056$12l&&U)
        (standard-output-port . g$13055$12l&&U)
        (standard-input-port . g$13054$12l&&U)
        (standard-error-port . g$13053$12l&&U)
        (set-port-position! . g$13052$12l&&U)
        (put-u8 . g$13051$12l&&U)
        (put-string . g$13050$12l&&U)
        (put-datum . g$8089$12l&&U)
        (put-char . g$13049$12l&&U)
        (put-bytevector . g$13048$12l&&U)
        (port? . g$8094$12l&&U)
        (port-transcoder . g$13047$12l&&U)
        (port-position . g$13046$12l&&U)
        (port-has-set-port-position!? . g$13045$12l&&U)
        (port-has-port-position? . g$13044$12l&&U)
        (port-eof? . g$13043$12l&&U)
        (output-port-buffer-mode . g$13042$12l&&U)
        (open-string-output-port . g$8093$12l&&U)
        (open-string-input-port . g$13041$12l&&U)
        (open-file-output-port . g$13040$12l&&U)
        (open-file-input/output-port . g$13039$12l&&U)
        (open-file-input-port . g$13038$12l&&U)
        (open-bytevector-output-port . g$13037$12l&&U)
        (open-bytevector-input-port . g$13036$12l&&U)
        (native-transcoder . g$13035$12l&&U)
        (native-eol-style . g$13034$12l&&U)
        (make-transcoder . g$13033$12l&&U)
        (latin-1-codec . g$13032$12l&&U)
        (make-i/o-write-error . g$6146$12l&&U)
        (make-i/o-read-error . g$6133$12l&&U)
        (make-i/o-port-error . g$6241$12l&&U)
        (make-i/o-invalid-position-error . g$6159$12l&&U)
        (make-i/o-filename-error . g$6174$12l&&U)
        (make-i/o-file-protection-error . g$6189$12l&&U)
        (make-i/o-file-is-read-only-error . g$6202$12l&&U)
        (make-i/o-file-does-not-exist-error . g$6228$12l&&U)
        (make-i/o-file-already-exists-error . g$6215$12l&&U)
        (make-i/o-error . g$6120$12l&&U)
        (make-i/o-encoding-error . g$6269$12l&&U)
        (make-i/o-decoding-error . g$6256$12l&&U)
        (make-custom-textual-output-port . g$13031$12l&&U)
        (make-custom-textual-input/output-port . g$13030$12l&&U)
        (make-custom-textual-input-port . g$13029$12l&&U)
        (make-custom-binary-output-port . g$13028$12l&&U)
        (make-custom-binary-input/output-port . g$13027$12l&&U)
        (make-custom-binary-input-port . g$13026$12l&&U)
        (make-bytevector . g$13025$12l&&U)
        (lookahead-u8 . g$13024$12l&&U)
        (lookahead-char . g$13023$12l&&U)
        (i/o-write-error? . g$6147$12l&&U)
        (i/o-read-error? . g$6134$12l&&U)
        (i/o-port-error? . g$6243$12l&&U)
        (i/o-invalid-position-error? . g$6161$12l&&U)
        (i/o-error-position . g$6162$12l&&U)
        (i/o-filename-error? . g$6176$12l&&U)
        (i/o-file-protection-error? . g$6190$12l&&U)
        (i/o-file-is-read-only-error? . g$6203$12l&&U)
        (i/o-file-does-not-exist-error? . g$6229$12l&&U)
        (i/o-file-already-exists-error? . g$6216$12l&&U)
        (i/o-error? . g$6121$12l&&U)
        (i/o-error-port . g$6244$12l&&U)
        (i/o-error-filename . g$6177$12l&&U)
        (i/o-encoding-error? . g$6271$12l&&U)
        (i/o-encoding-error-char . g$6272$12l&&U)
        (i/o-decoding-error? . g$6257$12l&&U)
        (get-u8 . g$13022$12l&&U)
        (get-string-n! . g$13021$12l&&U)
        (get-string-n . g$13020$12l&&U)
        (get-string-all . g$13019$12l&&U)
        (get-line . g$13018$12l&&U)
        (get-datum . g$8090$12l&&U)
        (get-char . g$13017$12l&&U)
        (get-bytevector-some . g$13016$12l&&U)
        (get-bytevector-n! . g$13015$12l&&U)
        (get-bytevector-n . g$13014$12l&&U)
        (get-bytevector-all . g$13013$12l&&U)
        (flush-output-port . g$13012$12l&&U)
        (close-port . g$13011$12l&&U)
        (call-with-string-output-port . g$8095$12l&&U)
        (call-with-port . g$8096$12l&&U)
        (call-with-bytevector-output-port . g$13010$12l&&U)
        (bytevector->string . g$13009$12l&&U)
        (buffer-mode? . g$13008$12l&&U)
        (binary-port? . g$13007$12l&&U)
        (scheme-report-environment . g$9595$12l&&U)
        (quotient . g$6315$12l&&U)
        (null-environment . g$9594$12l&&U)
        (remainder . g$6316$12l&&U)
        (modulo . g$6317$12l&&U)
        (inexact->exact . g$6312$12l&&U)
        (force . g$6319$12l&&U)
        (exact->inexact . g$6313$12l&&U)
        (exit . g$13006$12l&&U)
        (command-line . g$12634$12l&&U)
        (string-fill! . g$13005$12l&&U)
        (string-set! . g$13004$12l&&U)
        (set-cdr! . g$13003$12l&&U)
        (set-car! . g$13002$12l&&U)
        (remove . g$5164$12l&&U)
        (remv . g$5165$12l&&U)
        (remp . g$5145$12l&&U)
        (remq . g$5166$12l&&U)
        (partition . g$5144$12l&&U)
        (memv . g$5152$12l&&U)
        (memq . g$5151$12l&&U)
        (memp . g$5154$12l&&U)
        (member . g$5153$12l&&U)
        (exists . g$5158$12l&&U)
        (for-all . g$5157$12l&&U)
        (fold-right . g$5163$12l&&U)
        (fold-left . g$5162$12l&&U)
        (find . g$5143$12l&&U)
        (filter . g$5146$12l&&U)
        (cons* . g$5161$12l&&U)
        (assv . g$5148$12l&&U)
        (assq . g$5147$12l&&U)
        (assp . g$5150$12l&&U)
        (assoc . g$5149$12l&&U)
        (with-exception-handler . g$13001$12l&&U)
        (raise-continuable . g$13000$12l&&U)
        (raise . g$12999$12l&&U)
        (eval . g$9597$12l&&U)
        (environment . g$9593$12l&&U)
        (make-enumeration . g$8181$12l&&U)
        (enum-set=? . g$8188$12l&&U)
        (enum-set-universe . g$8182$12l&&U)
        (enum-set-union . g$8189$12l&&U)
        (enum-set-subset? . g$8187$12l&&U)
        (enum-set-projection . g$8193$12l&&U)
        (enum-set-member? . g$8186$12l&&U)
        (enum-set-intersection . g$8190$12l&&U)
        (enum-set-indexer . g$8183$12l&&U)
        (enum-set-difference . g$8191$12l&&U)
        (enum-set-constructor . g$8184$12l&&U)
        (enum-set-complement . g$8192$12l&&U)
        (enum-set->list . g$8185$12l&&U)
        (who-condition? . g$6038$12l&&U)
        (warning? . g$5957$12l&&U)
        (violation? . g$5996$12l&&U)
        (undefined-violation? . g$6108$12l&&U)
        (syntax-violation? . g$6093$12l&&U)
        (syntax-violation-subform . g$6095$12l&&U)
        (syntax-violation-form . g$6094$12l&&U)
        (syntax-violation . g$9615$12l&&U)
        (simple-conditions . g$12998$12l&&U)
        (serious-condition? . g$5970$12l&&U)
        (non-continuable-violation? . g$6052$12l&&U)
        (message-condition? . g$5943$12l&&U)
        (make-who-condition . g$6036$12l&&U)
        (make-warning . g$5956$12l&&U)
        (make-violation . g$5995$12l&&U)
        (make-undefined-violation . g$6107$12l&&U)
        (make-syntax-violation . g$6090$12l&&U)
        (make-serious-condition . g$5969$12l&&U)
        (make-non-continuable-violation . g$6051$12l&&U)
        (make-message-condition . g$5941$12l&&U)
        (make-lexical-violation . g$6077$12l&&U)
        (make-irritants-condition . g$6021$12l&&U)
        (make-implementation-restriction-violation . g$6064$12l&&U)
        (make-error . g$5982$12l&&U)
        (make-assertion-violation . g$6008$12l&&U)
        (lexical-violation? . g$6078$12l&&U)
        (irritants-condition? . g$6023$12l&&U)
        (implementation-restriction-violation? . g$6065$12l&&U)
        (error? . g$5983$12l&&U)
        (condition-who . g$6039$12l&&U)
        (condition-predicate . g$12997$12l&&U)
        (condition-message . g$5944$12l&&U)
        (condition-irritants . g$6024$12l&&U)
        (condition-accessor . g$12996$12l&&U)
        (condition . g$12995$12l&&U)
        (assertion-violation? . g$6009$12l&&U)
        (condition? . g$12994$12l&&U)
        (utf32->string . g$12993$12l&&U)
        (utf16->string . g$12992$12l&&U)
        (utf8->string . g$12991$12l&&U)
        (uint-list->bytevector . g$12990$12l&&U)
        (u8-list->bytevector . g$12989$12l&&U)
        (string->utf8 . g$12988$12l&&U)
        (string->utf32 . g$12987$12l&&U)
        (string->utf16 . g$12986$12l&&U)
        (sint-list->bytevector . g$12985$12l&&U)
        (native-endianness . g$5780$12l&&U)
        (bytevector? . g$5469$12l&&U)
        (bytevector=? . g$12984$12l&&U)
        (bytevector-uint-set! . g$12983$12l&&U)
        (bytevector-uint-ref . g$12982$12l&&U)
        (bytevector-u8-set! . g$12981$12l&&U)
        (bytevector-u8-ref . g$12980$12l&&U)
        (bytevector-u64-set! . g$5801$12l&&U)
        (bytevector-u64-ref . g$5797$12l&&U)
        (bytevector-u64-native-set! . g$5803$12l&&U)
        (bytevector-u64-native-ref . g$5799$12l&&U)
        (bytevector-u32-set! . g$5793$12l&&U)
        (bytevector-u32-ref . g$5789$12l&&U)
        (bytevector-u32-native-set! . g$5795$12l&&U)
        (bytevector-u32-native-ref . g$5791$12l&&U)
        (bytevector-u16-set! . g$5785$12l&&U)
        (bytevector-u16-ref . g$5781$12l&&U)
        (bytevector-u16-native-set! . g$5787$12l&&U)
        (bytevector-u16-native-ref . g$5783$12l&&U)
        (bytevector-sint-set! . g$12979$12l&&U)
        (bytevector-sint-ref . g$12978$12l&&U)
        (bytevector-s8-set! . g$12977$12l&&U)
        (bytevector-s8-ref . g$12976$12l&&U)
        (bytevector-s64-set! . g$5802$12l&&U)
        (bytevector-s64-ref . g$5798$12l&&U)
        (bytevector-s64-native-set! . g$5804$12l&&U)
        (bytevector-s64-native-ref . g$5800$12l&&U)
        (bytevector-s32-set! . g$5794$12l&&U)
        (bytevector-s32-ref . g$5790$12l&&U)
        (bytevector-s32-native-set! . g$5796$12l&&U)
        (bytevector-s32-native-ref . g$5792$12l&&U)
        (bytevector-s16-set! . g$5786$12l&&U)
        (bytevector-s16-ref . g$5782$12l&&U)
        (bytevector-s16-native-set! . g$5788$12l&&U)
        (bytevector-s16-native-ref . g$5784$12l&&U)
        (bytevector-length . g$12975$12l&&U)
        (bytevector-ieee-single-set! . g$12974$12l&&U)
        (bytevector-ieee-single-ref . g$12973$12l&&U)
        (bytevector-ieee-single-native-set! . g$5807$12l&&U)
        (bytevector-ieee-single-native-ref . g$5805$12l&&U)
        (bytevector-ieee-double-set! . g$12972$12l&&U)
        (bytevector-ieee-double-ref . g$12971$12l&&U)
        (bytevector-ieee-double-native-set! . g$5808$12l&&U)
        (bytevector-ieee-double-native-ref . g$5806$12l&&U)
        (bytevector-fill! . g$12970$12l&&U)
        (bytevector-copy! . g$12969$12l&&U)
        (bytevector-copy . g$12968$12l&&U)
        (bytevector->uint-list . g$12967$12l&&U)
        (bytevector->u8-list . g$12966$12l&&U)
        (bytevector->sint-list . g$12965$12l&&U)
        (no-nans-violation? . g$6298$12l&&U)
        (no-infinities-violation? . g$6285$12l&&U)
        (make-no-nans-violation . g$6297$12l&&U)
        (make-no-infinities-violation . g$6284$12l&&U)
        (real->flonum . g$12964$12l&&U)
        (flzero? . g$7535$12l&&U)
        (fltruncate . g$7530$12l&&U)
        (fltan . g$7516$12l&&U)
        (flsqrt . g$7521$12l&&U)
        (flsin . g$7514$12l&&U)
        (flround . g$7531$12l&&U)
        (flpositive? . g$7533$12l&&U)
        (flonum? . g$5474$12l&&U)
        (flodd? . g$7537$12l&&U)
        (flnumerator . g$12963$12l&&U)
        (flnegative? . g$7534$12l&&U)
        (flnan? . g$7513$12l&&U)
        (flmod0 . g$7498$12l&&U)
        (flmod . g$7497$12l&&U)
        (flmin . g$7539$12l&&U)
        (flmax . g$7538$12l&&U)
        (fllog . g$7520$12l&&U)
        (flinteger? . g$7506$12l&&U)
        (flinfinite? . g$7512$12l&&U)
        (flfloor . g$7529$12l&&U)
        (flfinite? . g$7507$12l&&U)
        (flexpt . g$7523$12l&&U)
        (flexp . g$7522$12l&&U)
        (fleven? . g$7536$12l&&U)
        (fldiv0-and-mod0 . g$7505$12l&&U)
        (fldiv0 . g$7492$12l&&U)
        (fldiv-and-mod . g$7499$12l&&U)
        (fldiv . g$7504$12l&&U)
        (fldenominator . g$12962$12l&&U)
        (flcos . g$7515$12l&&U)
        (flceiling . g$7524$12l&&U)
        (flatan . g$7519$12l&&U)
        (flasin . g$7517$12l&&U)
        (flacos . g$7518$12l&&U)
        (flabs . g$7532$12l&&U)
        (fl>? . g$7486$12l&&U)
        (fl>=? . g$7487$12l&&U)
        (fl=? . g$7483$12l&&U)
        (fl<? . g$7484$12l&&U)
        (fl<=? . g$7485$12l&&U)
        (fl/ . g$7482$12l&&U)
        (fl- . g$7481$12l&&U)
        (fl+ . g$7479$12l&&U)
        (fl* . g$7480$12l&&U)
        (fixnum->flonum . g$12961$12l&&U)
        (fxzero? . g$6579$12l&&U)
        (fxxor . g$6542$12l&&U)
        (fxrotate-bit-field . g$6617$12l&&U)
        (fxreverse-bit-field . g$6618$12l&&U)
        (fxpositive? . g$6569$12l&&U)
        (fxodd? . g$6589$12l&&U)
        (fxnot . g$6523$12l&&U)
        (fxnegative? . g$6574$12l&&U)
        (fxmod0 . g$6553$12l&&U)
        (fxmod . g$6552$12l&&U)
        (fxmin . g$6591$12l&&U)
        (fxmax . g$6590$12l&&U)
        (fxlength . g$6520$12l&&U)
        (fxior . g$6541$12l&&U)
        (fxif . g$6599$12l&&U)
        (fxfirst-bit-set . g$6521$12l&&U)
        (fxeven? . g$6584$12l&&U)
        (fxdiv0-and-mod0 . g$6564$12l&&U)
        (fxdiv0 . g$6559$12l&&U)
        (fxdiv-and-mod . g$6554$12l&&U)
        (fxdiv . g$6547$12l&&U)
        (fxcopy-bit-field . g$6614$12l&&U)
        (fxcopy-bit . g$6604$12l&&U)
        (fxbit-set? . g$6522$12l&&U)
        (fxbit-field . g$6609$12l&&U)
        (fxbit-count . g$6515$12l&&U)
        (fxarithmetic-shift-right . g$6616$12l&&U)
        (fxarithmetic-shift-left . g$6615$12l&&U)
        (fxarithmetic-shift . g$6510$12l&&U)
        (fxand . g$6540$12l&&U)
        (fx>? . g$6532$12l&&U)
        (fx>=? . g$6533$12l&&U)
        (fx=? . g$6529$12l&&U)
        (fx<? . g$6530$12l&&U)
        (fx<=? . g$6531$12l&&U)
        (fx-/carry . g$6593$12l&&U)
        (fx- . g$6504$12l&&U)
        (fx+/carry . g$6594$12l&&U)
        (fx+ . g$6502$12l&&U)
        (fx*/carry . g$6592$12l&&U)
        (fx* . g$6503$12l&&U)
        (greatest-fixnum . g$6473$12l&&U)
        (least-fixnum . g$6474$12l&&U)
        (fixnum-width . g$5475$12l&&U)
        (fixnum? . g$5473$12l&&U)
        (bitwise-rotate-bit-field . g$6447$12l&&U)
        (bitwise-reverse-bit-field . g$12960$12l&&U)
        (bitwise-length . g$12959$12l&&U)
        (bitwise-if . g$6441$12l&&U)
        (bitwise-first-bit-set . g$12958$12l&&U)
        (bitwise-copy-bit-field . g$6444$12l&&U)
        (bitwise-copy-bit . g$6442$12l&&U)
        (bitwise-bit-set? . g$12957$12l&&U)
        (bitwise-bit-field . g$6443$12l&&U)
        (bitwise-bit-count . g$12956$12l&&U)
        (bitwise-xor . g$12955$12l&&U)
        (bitwise-ior . g$12954$12l&&U)
        (bitwise-and . g$12953$12l&&U)
        (bitwise-not . g$12952$12l&&U)
        (bitwise-arithmetic-shift-right . g$6446$12l&&U)
        (bitwise-arithmetic-shift-left . g$6445$12l&&U)
        (bitwise-arithmetic-shift . g$12951$12l&&U)
        (zero? . g$5517$12l&&U)
        (vector? . g$5468$12l&&U)
        (vector-set! . g$5483$12l&&U)
        (vector-ref . g$5482$12l&&U)
        (vector-map . g$5549$12l&&U)
        (vector-length . g$12950$12l&&U)
        (vector-for-each . g$5550$12l&&U)
        (vector-fill! . g$5484$12l&&U)
        (vector->list . g$12949$12l&&U)
        (vector . g$12948$12l&&U)
        (values . g$12947$12l&&U)
        (truncate . g$12946$12l&&U)
        (tan . g$12945$12l&&U)
        (symbol? . g$5470$12l&&U)
        (symbol=? . g$5534$12l&&U)
        (symbol->string . g$12944$12l&&U)
        (substring . g$12943$12l&&U)
        (string? . g$12942$12l&&U)
        (string>? . g$5531$12l&&U)
        (string>=? . g$5533$12l&&U)
        (string=? . g$5529$12l&&U)
        (string<? . g$5530$12l&&U)
        (string<=? . g$5532$12l&&U)
        (string-ref . g$12941$12l&&U)
        (string-length . g$12940$12l&&U)
        (string-for-each . g$5551$12l&&U)
        (string-copy . g$12939$12l&&U)
        (string-append . g$12938$12l&&U)
        (string->symbol . g$12937$12l&&U)
        (string->number . g$12936$12l&&U)
        (string->list . g$12935$12l&&U)
        (string . g$12934$12l&&U)
        (sqrt . g$12933$12l&&U)
        (sin . g$12932$12l&&U)
        (round . g$12931$12l&&U)
        (reverse . g$5486$12l&&U)
        (real? . g$12930$12l&&U)
        (real-valued? . g$12929$12l&&U)
        (real-part . g$12928$12l&&U)
        (rationalize . g$5546$12l&&U)
        (rational? . g$12927$12l&&U)
        (rational-valued? . g$12926$12l&&U)
        (procedure? . g$5472$12l&&U)
        (positive? . g$5515$12l&&U)
        (pair? . g$12925$12l&&U)
        (odd? . g$5519$12l&&U)
        (numerator . g$12924$12l&&U)
        (number? . g$12923$12l&&U)
        (number->string . g$12922$12l&&U)
        (null? . g$12921$12l&&U)
        (not . g$12920$12l&&U)
        (negative? . g$5516$12l&&U)
        (nan? . g$12919$12l&&U)
        (min . g$5521$12l&&U)
        (max . g$5520$12l&&U)
        (map . g$5159$12l&&U)
        (make-vector . g$12918$12l&&U)
        (make-string . g$12917$12l&&U)
        (make-rectangular . g$12916$12l&&U)
        (make-polar . g$12915$12l&&U)
        (magnitude . g$12914$12l&&U)
        (log . g$12913$12l&&U)
        (list? . g$12912$12l&&U)
        (list-tail . g$5139$12l&&U)
        (list-ref . g$5140$12l&&U)
        (list->vector . g$5480$12l&&U)
        (list->string . g$5481$12l&&U)
        (list . g$12911$12l&&U)
        (length . g$12910$12l&&U)
        (lcm . g$5523$12l&&U)
        (integer? . g$12909$12l&&U)
        (integer-valued? . g$12908$12l&&U)
        (integer->char . g$12907$12l&&U)
        (infinite? . g$12906$12l&&U)
        (inexact? . g$12905$12l&&U)
        (inexact . g$12904$12l&&U)
        (imag-part . g$12903$12l&&U)
        (gcd . g$5522$12l&&U)
        (for-each . g$5160$12l&&U)
        (floor . g$12902$12l&&U)
        (finite? . g$12901$12l&&U)
        (expt . g$12900$12l&&U)
        (exp . g$12899$12l&&U)
        (exact? . g$12898$12l&&U)
        (exact-integer-sqrt . g$12897$12l&&U)
        (exact . g$12896$12l&&U)
        (even? . g$5518$12l&&U)
        (error . g$12895$12l&&U)
        (eqv? . g$12894$12l&&U)
        (equal? . g$12893$12l&&U)
        (eq? . g$12892$12l&&U)
        (dynamic-wind . g$12891$12l&&U)
        (div0-and-mod0 . g$5479$12l&&U)
        (mod0 . g$5477$12l&&U)
        (div0 . g$12890$12l&&U)
        (div-and-mod . g$5478$12l&&U)
        (mod . g$5476$12l&&U)
        (div . g$12889$12l&&U)
        (denominator . g$12888$12l&&U)
        (cos . g$12887$12l&&U)
        (cons . g$12886$12l&&U)
        (complex? . g$12885$12l&&U)
        (char? . g$5467$12l&&U)
        (char>? . g$5543$12l&&U)
        (char>=? . g$5545$12l&&U)
        (char=? . g$5541$12l&&U)
        (char<? . g$5542$12l&&U)
        (char<=? . g$5544$12l&&U)
        (char->integer . g$12884$12l&&U)
        (ceiling . g$12883$12l&&U)
        (call-with-values . g$12882$12l&&U)
        (call/cc . g$12881$12l&&U)
        (call-with-current-continuation . g$12880$12l&&U)
        (cddddr . g$5514$12l&&U)
        (cdddar . g$5513$12l&&U)
        (cddadr . g$5512$12l&&U)
        (cddaar . g$5511$12l&&U)
        (cdaddr . g$5510$12l&&U)
        (cdadar . g$5509$12l&&U)
        (cdaadr . g$5508$12l&&U)
        (cdaaar . g$5507$12l&&U)
        (cadddr . g$5506$12l&&U)
        (caddar . g$5505$12l&&U)
        (cadadr . g$5504$12l&&U)
        (cadaar . g$5503$12l&&U)
        (caaddr . g$5502$12l&&U)
        (caadar . g$5501$12l&&U)
        (caaadr . g$5500$12l&&U)
        (caaaar . g$5499$12l&&U)
        (cdddr . g$5498$12l&&U)
        (cddar . g$5497$12l&&U)
        (cdadr . g$5496$12l&&U)
        (cdaar . g$5495$12l&&U)
        (caddr . g$5494$12l&&U)
        (cadar . g$5493$12l&&U)
        (caadr . g$5492$12l&&U)
        (caaar . g$5491$12l&&U)
        (cddr . g$5490$12l&&U)
        (cdar . g$5489$12l&&U)
        (cadr . g$5488$12l&&U)
        (caar . g$5487$12l&&U)
        (cdr . g$12879$12l&&U)
        (car . g$12878$12l&&U)
        (boolean? . g$5471$12l&&U)
        (boolean=? . g$5535$12l&&U)
        (atan . g$12877$12l&&U)
        (assertion-violation . g$12876$12l&&U)
        (asin . g$12875$12l&&U)
        (apply . g$12874$12l&&U)
        (append . g$12873$12l&&U)
        (angle . g$12872$12l&&U)
        (acos . g$12871$12l&&U)
        (abs . g$12870$12l&&U)
        (/ . g$12869$12l&&U)
        (* . g$12868$12l&&U)
        (- . g$12867$12l&&U)
        (+ . g$12866$12l&&U)
        (>= . g$12865$12l&&U)
        (> . g$12864$12l&&U)
        (= . g$12863$12l&&U)
        (<= . g$12862$12l&&U)
        (< . g$12861$12l&&U)
        (deserialize-port . g$12824$12l&&U)
        (serialize-port . g$12823$12l&&U)
        (enum-set? . g$8158$12l&&U)
        (load/unload . g$12637$12l&&U)
        (load/args . g$12636$12l&&U)
        (printf . g$8267$12l&&U)
        (fprintf . g$8268$12l&&U)
        (format . g$8269$12l&&U)
        (procedure-form . g$12822$12l&&U)
        (procedure-environment . g$12821$12l&&U)
        (procedure-name . g$12820$12l&&U)
        (procedure-arity . g$12819$12l&&U)
        (gc-collect . g$12818$12l&&U)
        (typeof . g$12817$12l&&U)
        (clr-type? . g$12816$12l&&U)
        (get-clr-type . g$12815$12l&&U)
        (vector-append . g$12813$12l&&U)
        (vector-filter . g$12812$12l&&U)
        (vector-reverse! . g$12811$12l&&U)
        (vector-contains? . g$12810$12l&&U)
        (vector-index-of . g$12809$12l&&U)
        (vector-copy . g$12808$12l&&U)
        (vector-binary-search . g$12807$12l&&U)
        (string-ci-compare . g$12806$12l&&U)
        (string-compare . g$12805$12l&&U)
        (string-format . g$12804$12l&&U)
        (trace-printer . g$12633$12l&&U)
        (time-it . g$12802$12l&&U)
        (make-parameter . g$8296$12l&&U)
        (open-tcp-input/output-port . g$12799$12l&&U)
        (hashtable-for-each . g$12798$12l&&U)
        (hashtable-map . g$12797$12l&&U)
        (environment-bindings . g$9589$12l&&U)
        (environment-symbols . g$9592$12l&&U)
        (interaction-environment-symbols . g$9588$12l&&U)
        (optimization-level . g$12796$12l&&U)
        (library-path . g$8918$12l&&U)
        (make-compile-time-value . g$9297$12l&&U)
        (expand->core . g$9598$12l&&U)
        (expand . g$9596$12l&&U)
        (syntax-transpose . g$9535$12l&&U)
        (convert->cps . g$8615$12l&&U)
        (installed-libraries . g$8939$12l&&U)
        (uninstall-library . g$8930$12l&&U)
        (pretty-gensyms . g$8379$12l&&U)
        (pretty-width . g$8376$12l&&U)
        (pretty-print . g$8381$12l&&U)
        (&no-nans . g$12795$12l&&U)
        (&no-infinities . g$12794$12l&&U)
        (&i/o-encoding . g$12793$12l&&U)
        (&i/o-decoding . g$12792$12l&&U)
        (&i/o-port . g$12791$12l&&U)
        (&i/o-file-does-not-exist . g$12790$12l&&U)
        (&i/o-file-already-exists . g$12789$12l&&U)
        (&i/o-file-is-read-only . g$12788$12l&&U)
        (&i/o-file-protection . g$12787$12l&&U)
        (&i/o-filename . g$12786$12l&&U)
        (&i/o-invalid-position . g$12785$12l&&U)
        (&i/o-write . g$12784$12l&&U)
        (&i/o-read . g$12783$12l&&U)
        (&i/o . g$12782$12l&&U)
        (&non-continuable . g$12781$12l&&U)
        (&undefined . g$12780$12l&&U)
        (&syntax . g$12779$12l&&U)
        (&lexical . g$12778$12l&&U)
        (&implementation-restriction . g$12777$12l&&U)
        (&who . g$12776$12l&&U)
        (&irritants . g$12775$12l&&U)
        (&assertion . g$12774$12l&&U)
        (&violation . g$12773$12l&&U)
        (&error . g$12772$12l&&U)
        (&serious . g$12771$12l&&U)
        (&warning . g$12770$12l&&U)
        (&message . g$12769$12l&&U)
        (&condition . g$12768$12l&&U)
        (define-condition-type . g$12767$12l&&U)
        (define-enumeration . g$12766$12l&&U)
        (define-record-type . g$12765$12l&&U)
        (parent-rtd . g$12764$12l&&U)
        (nongenerative . g$12763$12l&&U)
        (opaque . g$12762$12l&&U)
        (sealed . g$12761$12l&&U)
        (protocol . g$12760$12l&&U)
        (parent . g$12759$12l&&U)
        (immutable . g$12758$12l&&U)
        (mutable . g$12757$12l&&U)
        (fields . g$12756$12l&&U)
        (error-handling-mode . g$12755$12l&&U)
        (file-options . g$12754$12l&&U)
        (buffer-mode . g$12753$12l&&U)
        (eol-style . g$12752$12l&&U)
        (guard . g$12751$12l&&U)
        (trace-letrec-syntax . g$12750$12l&&U)
        (trace-let-syntax . g$12749$12l&&U)
        (trace-define-syntax . g$12748$12l&&U)
        (trace-define . g$12747$12l&&U)
        (trace-lambda . g$12746$12l&&U)
        (unsyntax-splicing . g$12745$12l&&U)
        (unsyntax . g$12744$12l&&U)
        (unquote-splicing . g$12743$12l&&U)
        (unquote . g$12742$12l&&U)
        (_ . g$12741$12l&&U)
        (else . g$12740$12l&&U)
        (=> . g$12739$12l&&U)
        (... . g$12738$12l&&U)
        (assert . g$12737$12l&&U)
        (endianness . g$12736$12l&&U)
        (delay . g$12735$12l&&U)
        (time . g$12734$12l&&U)
        (or . g$12733$12l&&U)
        (and . g$12732$12l&&U)
        (do . g$12731$12l&&U)
        (cond . g$12730$12l&&U)
        (let* . g$12729$12l&&U)
        (let . g$12728$12l&&U)
        (identifier-syntax . g$12727$12l&&U)
        (with-syntax . g$12726$12l&&U)
        (quasisyntax . g$12725$12l&&U)
        (quasiquote . g$12724$12l&&U)
        (syntax-rules . g$12723$12l&&U)
        (include-into . g$12722$12l&&U)
        (include . g$12721$12l&&U)
        (let-values . g$12719$12l&&U)
        (let*-values . g$12718$12l&&U)
        (record-constructor-descriptor . g$12717$12l&&U)
        (record-type-descriptor . g$12716$12l&&U)
        (fluid-let-syntax . g$12715$12l&&U)
        (case . g$12714$12l&&U)
        (parameterize . g$12713$12l&&U)
        (unless . g$12712$12l&&U)
        (when . g$12711$12l&&U)
        (if . g$12710$12l&&U)
        (letrec* . g$12709$12l&&U)
        (letrec . g$12708$12l&&U)
        (case-lambda . g$12706$12l&&U)
        (lambda . g$12705$12l&&U)
        (syntax . g$12704$12l&&U)
        (syntax-case . g$12703$12l&&U)
        (quote . g$12702$12l&&U)
        (letrec-syntax . g$12700$12l&&U)
        (let-syntax . g$12699$12l&&U)
        (set! . g$12698$12l&&U)
        (export . g$12697$12l&&U)
        (import . g$12696$12l&&U)
        (library . g$12695$12l&&U)
        (begin . g$12694$12l&&U)
        (module . g$12693$12l&&U)
        (define-syntax . g$12692$12l&&U)
        (define . g$12691$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13162$12l&&U
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$12800$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$18895$12l&&U
      'g$13163$12l&&U
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$13159$12l&&U)
        (annotation-source . g$13158$12l&&U)
        (annotation-expression . g$13157$12l&&U)
        (annotation? . g$13156$12l&&U)
        (read-annotated . g$13155$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$18895$12l&&U
      'g$13164$12l&&U
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$13127$12l&&U)
        (serialize-library . g$13126$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$18895$12l&&U
      'g$13165$12l&&U
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((string-normalize . g$13125$12l&&U)
        (variable-transformer-procedure . g$9299$12l&&U)
        (variable-transformer? . g$9298$12l&&U)
        (eqv-hash . g$12826$12l&&U)
        (reverse! . g$12825$12l&&U)
        (make-promise . g$6318$12l&&U)
        (format . g$8269$12l&&U)
        (get-command-line . g$12814$12l&&U)
        (make-traced-procedure . g$12803$12l&&U)
        (make-traced-macro . g$8289$12l&&U)
        (assertion-error . g$9611$12l&&U)
        (library-locator . g$12801$12l&&U)
        (get-library-paths . g$12800$12l&&U)
        (library-path . g$8918$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$18895$12l&&U
      'g$13166$12l&&U
      '(ironscheme unsafe)
      '()
      '()
      '()
      '()
      '(($fl>=? . g$12860$12l&&U)
        ($fl>? . g$12859$12l&&U)
        ($fl<=? . g$12858$12l&&U)
        ($fl<? . g$12857$12l&&U)
        ($fl- . g$12856$12l&&U)
        ($fl/ . g$12855$12l&&U)
        ($fl* . g$12854$12l&&U)
        ($fl+ . g$12853$12l&&U)
        ($fl=? . g$12852$12l&&U)
        ($try . g$12851$12l&&U)
        ($fxarithmetic-shift-right . g$12850$12l&&U)
        ($fxarithmetic-shift-left . g$12849$12l&&U)
        ($$fx- . g$12848$12l&&U)
        ($$fx* . g$12847$12l&&U)
        ($$fx+ . g$12846$12l&&U)
        ($fxnot . g$12845$12l&&U)
        ($fxxor . g$12844$12l&&U)
        ($fxior . g$12843$12l&&U)
        ($fxand . g$12842$12l&&U)
        ($fx>=? . g$12841$12l&&U)
        ($fx>? . g$12840$12l&&U)
        ($fx<=? . g$12839$12l&&U)
        ($fx<? . g$12838$12l&&U)
        ($fx- . g$12837$12l&&U)
        ($fxmod0 . g$12836$12l&&U)
        ($fxdiv0 . g$12835$12l&&U)
        ($fx* . g$12834$12l&&U)
        ($fx+ . g$12833$12l&&U)
        ($fx=? . g$12832$12l&&U)
        ($vector-set! . g$12831$12l&&U)
        ($vector-ref . g$12830$12l&&U)
        ($cdr . g$12829$12l&&U)
        ($car . g$12828$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$18895$12l&&U
      'g$13167$12l&&U
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$12827$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13168$12l&&U
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$13146$12l&&U)
        (clr-field-set!-internal . g$13145$12l&&U)
        (clr-field-get-internal . g$13144$12l&&U)
        (clr-cast-internal . g$13143$12l&&U)
        (clr-call-internal . g$13142$12l&&U)
        (clr-new-internal . g$13141$12l&&U)
        (clr-new-array-internal . g$13140$12l&&U)
        (clr-is-internal . g$13139$12l&&U)
        (clr-reference-internal . g$13138$12l&&U)
        (clr-using-internal . g$13137$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13169$12l&&U
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$12743$12l&&U)
        (unquote . g$12742$12l&&U)
        (else . g$12740$12l&&U)
        (=> . g$12739$12l&&U)
        (delay . g$12735$12l&&U)
        (or . g$12733$12l&&U)
        (and . g$12732$12l&&U)
        (do . g$12731$12l&&U)
        (cond . g$12730$12l&&U)
        (let* . g$12729$12l&&U)
        (let . g$12728$12l&&U)
        (quasiquote . g$12724$12l&&U)
        (syntax-rules . g$12723$12l&&U)
        (case . g$12714$12l&&U)
        (if . g$12710$12l&&U)
        (letrec . g$12708$12l&&U)
        (lambda . g$12705$12l&&U)
        (quote . g$12702$12l&&U)
        (letrec-syntax . g$12700$12l&&U)
        (let-syntax . g$12699$12l&&U)
        (set! . g$12698$12l&&U)
        (begin . g$12694$12l&&U)
        (define-syntax . g$12692$12l&&U)
        (define . g$12691$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$18895$12l&&U
      'g$13170$12l&&U
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((char-ready? . g$13124$12l&&U)
        (string-ci>? . g$6367$12l&&U)
        (string-ci>=? . g$6369$12l&&U)
        (string-ci=? . g$6365$12l&&U)
        (string-ci<? . g$6366$12l&&U)
        (string-ci<=? . g$6368$12l&&U)
        (char-whitespace? . g$13119$12l&&U)
        (char-upper-case? . g$13118$12l&&U)
        (char-numeric? . g$13116$12l&&U)
        (char-lower-case? . g$13115$12l&&U)
        (char-upcase . g$13113$12l&&U)
        (char-downcase . g$13110$12l&&U)
        (char-ci>? . g$6377$12l&&U)
        (char-ci>=? . g$6379$12l&&U)
        (char-ci=? . g$6375$12l&&U)
        (char-ci<? . g$6376$12l&&U)
        (char-ci<=? . g$6378$12l&&U)
        (char-alphabetic? . g$13109$12l&&U)
        (call-with-output-file . g$8120$12l&&U)
        (call-with-input-file . g$8119$12l&&U)
        (write-char . g$8111$12l&&U)
        (write . g$13077$12l&&U)
        (with-output-to-file . g$8118$12l&&U)
        (with-input-from-file . g$8117$12l&&U)
        (read-char . g$8110$12l&&U)
        (read . g$13076$12l&&U)
        (peek-char . g$8109$12l&&U)
        (open-output-file . g$13075$12l&&U)
        (open-input-file . g$13074$12l&&U)
        (newline . g$8121$12l&&U)
        (display . g$13073$12l&&U)
        (close-output-port . g$13072$12l&&U)
        (close-input-port . g$13071$12l&&U)
        (eof-object? . g$13070$12l&&U)
        (current-error-port . g$13068$12l&&U)
        (current-output-port . g$13067$12l&&U)
        (current-input-port . g$13066$12l&&U)
        (output-port? . g$13065$12l&&U)
        (input-port? . g$13064$12l&&U)
        (scheme-report-environment . g$9595$12l&&U)
        (quotient . g$6315$12l&&U)
        (null-environment . g$9594$12l&&U)
        (remainder . g$6316$12l&&U)
        (modulo . g$6317$12l&&U)
        (inexact->exact . g$6312$12l&&U)
        (force . g$6319$12l&&U)
        (exact->inexact . g$6313$12l&&U)
        (string-fill! . g$13005$12l&&U)
        (string-set! . g$13004$12l&&U)
        (set-cdr! . g$13003$12l&&U)
        (set-car! . g$13002$12l&&U)
        (memv . g$5152$12l&&U)
        (memq . g$5151$12l&&U)
        (member . g$5153$12l&&U)
        (assv . g$5148$12l&&U)
        (assq . g$5147$12l&&U)
        (assoc . g$5149$12l&&U)
        (eval . g$9597$12l&&U)
        (zero? . g$5517$12l&&U)
        (vector? . g$5468$12l&&U)
        (vector-set! . g$5483$12l&&U)
        (vector-ref . g$5482$12l&&U)
        (vector-length . g$12950$12l&&U)
        (vector-fill! . g$5484$12l&&U)
        (vector->list . g$12949$12l&&U)
        (vector . g$12948$12l&&U)
        (values . g$12947$12l&&U)
        (truncate . g$12946$12l&&U)
        (tan . g$12945$12l&&U)
        (symbol? . g$5470$12l&&U)
        (symbol->string . g$12944$12l&&U)
        (substring . g$12943$12l&&U)
        (string? . g$12942$12l&&U)
        (string>? . g$5531$12l&&U)
        (string>=? . g$5533$12l&&U)
        (string=? . g$5529$12l&&U)
        (string<? . g$5530$12l&&U)
        (string<=? . g$5532$12l&&U)
        (string-ref . g$12941$12l&&U)
        (string-length . g$12940$12l&&U)
        (string-copy . g$12939$12l&&U)
        (string-append . g$12938$12l&&U)
        (string->symbol . g$12937$12l&&U)
        (string->number . g$12936$12l&&U)
        (string->list . g$12935$12l&&U)
        (string . g$12934$12l&&U)
        (sqrt . g$12933$12l&&U)
        (sin . g$12932$12l&&U)
        (round . g$12931$12l&&U)
        (reverse . g$5486$12l&&U)
        (real? . g$12930$12l&&U)
        (real-part . g$12928$12l&&U)
        (rationalize . g$5546$12l&&U)
        (rational? . g$12927$12l&&U)
        (procedure? . g$5472$12l&&U)
        (positive? . g$5515$12l&&U)
        (pair? . g$12925$12l&&U)
        (odd? . g$5519$12l&&U)
        (numerator . g$12924$12l&&U)
        (number? . g$12923$12l&&U)
        (number->string . g$12922$12l&&U)
        (null? . g$12921$12l&&U)
        (not . g$12920$12l&&U)
        (negative? . g$5516$12l&&U)
        (min . g$5521$12l&&U)
        (max . g$5520$12l&&U)
        (map . g$5159$12l&&U)
        (make-vector . g$12918$12l&&U)
        (make-string . g$12917$12l&&U)
        (make-rectangular . g$12916$12l&&U)
        (make-polar . g$12915$12l&&U)
        (magnitude . g$12914$12l&&U)
        (log . g$12913$12l&&U)
        (list? . g$12912$12l&&U)
        (list-tail . g$5139$12l&&U)
        (list-ref . g$5140$12l&&U)
        (list->vector . g$5480$12l&&U)
        (list->string . g$5481$12l&&U)
        (list . g$12911$12l&&U)
        (length . g$12910$12l&&U)
        (lcm . g$5523$12l&&U)
        (integer? . g$12909$12l&&U)
        (integer->char . g$12907$12l&&U)
        (inexact? . g$12905$12l&&U)
        (imag-part . g$12903$12l&&U)
        (gcd . g$5522$12l&&U)
        (for-each . g$5160$12l&&U)
        (floor . g$12902$12l&&U)
        (expt . g$12900$12l&&U)
        (exp . g$12899$12l&&U)
        (exact? . g$12898$12l&&U)
        (even? . g$5518$12l&&U)
        (eqv? . g$12894$12l&&U)
        (equal? . g$12893$12l&&U)
        (eq? . g$12892$12l&&U)
        (dynamic-wind . g$12891$12l&&U)
        (denominator . g$12888$12l&&U)
        (cos . g$12887$12l&&U)
        (cons . g$12886$12l&&U)
        (complex? . g$12885$12l&&U)
        (char? . g$5467$12l&&U)
        (char>? . g$5543$12l&&U)
        (char>=? . g$5545$12l&&U)
        (char=? . g$5541$12l&&U)
        (char<? . g$5542$12l&&U)
        (char<=? . g$5544$12l&&U)
        (char->integer . g$12884$12l&&U)
        (ceiling . g$12883$12l&&U)
        (call-with-values . g$12882$12l&&U)
        (call-with-current-continuation . g$12880$12l&&U)
        (cddddr . g$5514$12l&&U)
        (cdddar . g$5513$12l&&U)
        (cddadr . g$5512$12l&&U)
        (cddaar . g$5511$12l&&U)
        (cdaddr . g$5510$12l&&U)
        (cdadar . g$5509$12l&&U)
        (cdaadr . g$5508$12l&&U)
        (cdaaar . g$5507$12l&&U)
        (cadddr . g$5506$12l&&U)
        (caddar . g$5505$12l&&U)
        (cadadr . g$5504$12l&&U)
        (cadaar . g$5503$12l&&U)
        (caaddr . g$5502$12l&&U)
        (caadar . g$5501$12l&&U)
        (caaadr . g$5500$12l&&U)
        (caaaar . g$5499$12l&&U)
        (cdddr . g$5498$12l&&U)
        (cddar . g$5497$12l&&U)
        (cdadr . g$5496$12l&&U)
        (cdaar . g$5495$12l&&U)
        (caddr . g$5494$12l&&U)
        (cadar . g$5493$12l&&U)
        (caadr . g$5492$12l&&U)
        (caaar . g$5491$12l&&U)
        (cddr . g$5490$12l&&U)
        (cdar . g$5489$12l&&U)
        (cadr . g$5488$12l&&U)
        (caar . g$5487$12l&&U)
        (cdr . g$12879$12l&&U)
        (car . g$12878$12l&&U)
        (boolean? . g$5471$12l&&U)
        (atan . g$12877$12l&&U)
        (asin . g$12875$12l&&U)
        (apply . g$12874$12l&&U)
        (append . g$12873$12l&&U)
        (angle . g$12872$12l&&U)
        (acos . g$12871$12l&&U)
        (abs . g$12870$12l&&U)
        (/ . g$12869$12l&&U)
        (* . g$12868$12l&&U)
        (- . g$12867$12l&&U)
        (+ . g$12866$12l&&U)
        (>= . g$12865$12l&&U)
        (> . g$12864$12l&&U)
        (= . g$12863$12l&&U)
        (<= . g$12862$12l&&U)
        (< . g$12861$12l&&U)
        (unquote-splicing . g$12743$12l&&U)
        (unquote . g$12742$12l&&U)
        (else . g$12740$12l&&U)
        (=> . g$12739$12l&&U)
        (... . g$12738$12l&&U)
        (delay . g$12735$12l&&U)
        (or . g$12733$12l&&U)
        (and . g$12732$12l&&U)
        (do . g$12731$12l&&U)
        (cond . g$12730$12l&&U)
        (let* . g$12729$12l&&U)
        (let . g$12728$12l&&U)
        (quasiquote . g$12724$12l&&U)
        (syntax-rules . g$12723$12l&&U)
        (case . g$12714$12l&&U)
        (if . g$12710$12l&&U)
        (letrec . g$12708$12l&&U)
        (lambda . g$12705$12l&&U)
        (quote . g$12702$12l&&U)
        (letrec-syntax . g$12700$12l&&U)
        (let-syntax . g$12699$12l&&U)
        (set! . g$12698$12l&&U)
        (begin . g$12694$12l&&U)
        (define-syntax . g$12692$12l&&U)
        (define . g$12691$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$18895$12l&&U
      'g$13171$12l&&U
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$13123$12l&&U)
        (string-titlecase . g$13122$12l&&U)
        (string-normalize-nfkd . g$6383$12l&&U)
        (string-normalize-nfkc . g$6382$12l&&U)
        (string-normalize-nfd . g$6381$12l&&U)
        (string-normalize-nfc . g$6380$12l&&U)
        (string-foldcase . g$13121$12l&&U)
        (string-downcase . g$13120$12l&&U)
        (string-ci>? . g$6367$12l&&U)
        (string-ci>=? . g$6369$12l&&U)
        (string-ci=? . g$6365$12l&&U)
        (string-ci<? . g$6366$12l&&U)
        (string-ci<=? . g$6368$12l&&U)
        (char-whitespace? . g$13119$12l&&U)
        (char-upper-case? . g$13118$12l&&U)
        (char-title-case? . g$13117$12l&&U)
        (char-numeric? . g$13116$12l&&U)
        (char-lower-case? . g$13115$12l&&U)
        (char-general-category . g$13114$12l&&U)
        (char-upcase . g$13113$12l&&U)
        (char-titlecase . g$13112$12l&&U)
        (char-foldcase . g$13111$12l&&U)
        (char-downcase . g$13110$12l&&U)
        (char-ci>? . g$6377$12l&&U)
        (char-ci>=? . g$6379$12l&&U)
        (char-ci=? . g$6375$12l&&U)
        (char-ci<? . g$6376$12l&&U)
        (char-ci<=? . g$6378$12l&&U)
        (char-alphabetic? . g$13109$12l&&U)
        (make-variable-transformer . g$9296$12l&&U)
        (identifier? . g$9616$12l&&U)
        (generate-temporaries . g$9605$12l&&U)
        (free-identifier=? . g$9606$12l&&U)
        (syntax->datum . g$9618$12l&&U)
        (datum->syntax . g$9617$12l&&U)
        (bound-identifier=? . g$9607$12l&&U)
        (record-type-descriptor? . g$13108$12l&&U)
        (record-predicate . g$13107$12l&&U)
        (record-mutator . g$13106$12l&&U)
        (record-constructor . g$13105$12l&&U)
        (record-accessor . g$13104$12l&&U)
        (make-record-type-descriptor . g$13103$12l&&U)
        (make-record-constructor-descriptor . g$13102$12l&&U)
        (record? . g$13101$12l&&U)
        (record-type-uid . g$13100$12l&&U)
        (record-type-sealed? . g$13099$12l&&U)
        (record-type-parent . g$13098$12l&&U)
        (record-type-opaque? . g$13097$12l&&U)
        (record-type-name . g$13096$12l&&U)
        (record-type-generative? . g$13095$12l&&U)
        (record-type-field-names . g$13094$12l&&U)
        (record-rtd . g$13093$12l&&U)
        (record-field-mutable? . g$13092$12l&&U)
        (delete-file . g$5774$12l&&U)
        (file-exists? . g$5773$12l&&U)
        (vector-sort! . g$13091$12l&&U)
        (vector-sort . g$13090$12l&&U)
        (list-sort . g$6336$12l&&U)
        (symbol-hash . g$13089$12l&&U)
        (string-ci-hash . g$13088$12l&&U)
        (string-hash . g$13087$12l&&U)
        (equal-hash . g$13086$12l&&U)
        (hashtable-equivalence-function . g$13085$12l&&U)
        (make-hashtable . g$13084$12l&&U)
        (hashtable-hash-function . g$13083$12l&&U)
        (make-eqv-hashtable . g$5741$12l&&U)
        (make-eq-hashtable . g$5740$12l&&U)
        (hashtable? . g$13082$12l&&U)
        (hashtable-update! . g$5747$12l&&U)
        (hashtable-size . g$5742$12l&&U)
        (hashtable-set! . g$5744$12l&&U)
        (hashtable-ref . g$5743$12l&&U)
        (hashtable-mutable? . g$13081$12l&&U)
        (hashtable-keys . g$13080$12l&&U)
        (hashtable-entries . g$13079$12l&&U)
        (hashtable-delete! . g$5745$12l&&U)
        (hashtable-copy . g$13078$12l&&U)
        (hashtable-contains? . g$5746$12l&&U)
        (hashtable-clear! . g$5748$12l&&U)
        (call-with-output-file . g$8120$12l&&U)
        (call-with-input-file . g$8119$12l&&U)
        (write-char . g$8111$12l&&U)
        (write . g$13077$12l&&U)
        (with-output-to-file . g$8118$12l&&U)
        (with-input-from-file . g$8117$12l&&U)
        (read-char . g$8110$12l&&U)
        (read . g$13076$12l&&U)
        (peek-char . g$8109$12l&&U)
        (open-output-file . g$13075$12l&&U)
        (open-input-file . g$13074$12l&&U)
        (newline . g$8121$12l&&U)
        (display . g$13073$12l&&U)
        (close-output-port . g$13072$12l&&U)
        (close-input-port . g$13071$12l&&U)
        (eof-object? . g$13070$12l&&U)
        (eof-object . g$13069$12l&&U)
        (current-error-port . g$13068$12l&&U)
        (current-output-port . g$13067$12l&&U)
        (current-input-port . g$13066$12l&&U)
        (output-port? . g$13065$12l&&U)
        (input-port? . g$13064$12l&&U)
        (utf-8-codec . g$13063$12l&&U)
        (utf-16-codec . g$13062$12l&&U)
        (transcoder-error-handling-mode . g$13061$12l&&U)
        (transcoder-eol-style . g$13060$12l&&U)
        (transcoder-codec . g$13059$12l&&U)
        (transcoded-port . g$13058$12l&&U)
        (textual-port? . g$13057$12l&&U)
        (string->bytevector . g$13056$12l&&U)
        (standard-output-port . g$13055$12l&&U)
        (standard-input-port . g$13054$12l&&U)
        (standard-error-port . g$13053$12l&&U)
        (set-port-position! . g$13052$12l&&U)
        (put-u8 . g$13051$12l&&U)
        (put-string . g$13050$12l&&U)
        (put-datum . g$8089$12l&&U)
        (put-char . g$13049$12l&&U)
        (put-bytevector . g$13048$12l&&U)
        (port? . g$8094$12l&&U)
        (port-transcoder . g$13047$12l&&U)
        (port-position . g$13046$12l&&U)
        (port-has-set-port-position!? . g$13045$12l&&U)
        (port-has-port-position? . g$13044$12l&&U)
        (port-eof? . g$13043$12l&&U)
        (output-port-buffer-mode . g$13042$12l&&U)
        (open-string-output-port . g$8093$12l&&U)
        (open-string-input-port . g$13041$12l&&U)
        (open-file-output-port . g$13040$12l&&U)
        (open-file-input/output-port . g$13039$12l&&U)
        (open-file-input-port . g$13038$12l&&U)
        (open-bytevector-output-port . g$13037$12l&&U)
        (open-bytevector-input-port . g$13036$12l&&U)
        (native-transcoder . g$13035$12l&&U)
        (native-eol-style . g$13034$12l&&U)
        (make-transcoder . g$13033$12l&&U)
        (latin-1-codec . g$13032$12l&&U)
        (make-i/o-write-error . g$6146$12l&&U)
        (make-i/o-read-error . g$6133$12l&&U)
        (make-i/o-port-error . g$6241$12l&&U)
        (make-i/o-invalid-position-error . g$6159$12l&&U)
        (make-i/o-filename-error . g$6174$12l&&U)
        (make-i/o-file-protection-error . g$6189$12l&&U)
        (make-i/o-file-is-read-only-error . g$6202$12l&&U)
        (make-i/o-file-does-not-exist-error . g$6228$12l&&U)
        (make-i/o-file-already-exists-error . g$6215$12l&&U)
        (make-i/o-error . g$6120$12l&&U)
        (make-i/o-encoding-error . g$6269$12l&&U)
        (make-i/o-decoding-error . g$6256$12l&&U)
        (make-custom-textual-output-port . g$13031$12l&&U)
        (make-custom-textual-input/output-port . g$13030$12l&&U)
        (make-custom-textual-input-port . g$13029$12l&&U)
        (make-custom-binary-output-port . g$13028$12l&&U)
        (make-custom-binary-input/output-port . g$13027$12l&&U)
        (make-custom-binary-input-port . g$13026$12l&&U)
        (make-bytevector . g$13025$12l&&U)
        (lookahead-u8 . g$13024$12l&&U)
        (lookahead-char . g$13023$12l&&U)
        (i/o-write-error? . g$6147$12l&&U)
        (i/o-read-error? . g$6134$12l&&U)
        (i/o-port-error? . g$6243$12l&&U)
        (i/o-invalid-position-error? . g$6161$12l&&U)
        (i/o-error-position . g$6162$12l&&U)
        (i/o-filename-error? . g$6176$12l&&U)
        (i/o-file-protection-error? . g$6190$12l&&U)
        (i/o-file-is-read-only-error? . g$6203$12l&&U)
        (i/o-file-does-not-exist-error? . g$6229$12l&&U)
        (i/o-file-already-exists-error? . g$6216$12l&&U)
        (i/o-error? . g$6121$12l&&U)
        (i/o-error-port . g$6244$12l&&U)
        (i/o-error-filename . g$6177$12l&&U)
        (i/o-encoding-error? . g$6271$12l&&U)
        (i/o-encoding-error-char . g$6272$12l&&U)
        (i/o-decoding-error? . g$6257$12l&&U)
        (get-u8 . g$13022$12l&&U)
        (get-string-n! . g$13021$12l&&U)
        (get-string-n . g$13020$12l&&U)
        (get-string-all . g$13019$12l&&U)
        (get-line . g$13018$12l&&U)
        (get-datum . g$8090$12l&&U)
        (get-char . g$13017$12l&&U)
        (get-bytevector-some . g$13016$12l&&U)
        (get-bytevector-n! . g$13015$12l&&U)
        (get-bytevector-n . g$13014$12l&&U)
        (get-bytevector-all . g$13013$12l&&U)
        (flush-output-port . g$13012$12l&&U)
        (close-port . g$13011$12l&&U)
        (call-with-string-output-port . g$8095$12l&&U)
        (call-with-port . g$8096$12l&&U)
        (call-with-bytevector-output-port . g$13010$12l&&U)
        (bytevector->string . g$13009$12l&&U)
        (buffer-mode? . g$13008$12l&&U)
        (binary-port? . g$13007$12l&&U)
        (exit . g$13006$12l&&U)
        (command-line . g$12634$12l&&U)
        (remove . g$5164$12l&&U)
        (remv . g$5165$12l&&U)
        (remp . g$5145$12l&&U)
        (remq . g$5166$12l&&U)
        (partition . g$5144$12l&&U)
        (memv . g$5152$12l&&U)
        (memq . g$5151$12l&&U)
        (memp . g$5154$12l&&U)
        (member . g$5153$12l&&U)
        (exists . g$5158$12l&&U)
        (for-all . g$5157$12l&&U)
        (fold-right . g$5163$12l&&U)
        (fold-left . g$5162$12l&&U)
        (find . g$5143$12l&&U)
        (filter . g$5146$12l&&U)
        (cons* . g$5161$12l&&U)
        (assv . g$5148$12l&&U)
        (assq . g$5147$12l&&U)
        (assp . g$5150$12l&&U)
        (assoc . g$5149$12l&&U)
        (with-exception-handler . g$13001$12l&&U)
        (raise-continuable . g$13000$12l&&U)
        (raise . g$12999$12l&&U)
        (make-enumeration . g$8181$12l&&U)
        (enum-set=? . g$8188$12l&&U)
        (enum-set-universe . g$8182$12l&&U)
        (enum-set-union . g$8189$12l&&U)
        (enum-set-subset? . g$8187$12l&&U)
        (enum-set-projection . g$8193$12l&&U)
        (enum-set-member? . g$8186$12l&&U)
        (enum-set-intersection . g$8190$12l&&U)
        (enum-set-indexer . g$8183$12l&&U)
        (enum-set-difference . g$8191$12l&&U)
        (enum-set-constructor . g$8184$12l&&U)
        (enum-set-complement . g$8192$12l&&U)
        (enum-set->list . g$8185$12l&&U)
        (who-condition? . g$6038$12l&&U)
        (warning? . g$5957$12l&&U)
        (violation? . g$5996$12l&&U)
        (undefined-violation? . g$6108$12l&&U)
        (syntax-violation? . g$6093$12l&&U)
        (syntax-violation-subform . g$6095$12l&&U)
        (syntax-violation-form . g$6094$12l&&U)
        (syntax-violation . g$9615$12l&&U)
        (simple-conditions . g$12998$12l&&U)
        (serious-condition? . g$5970$12l&&U)
        (non-continuable-violation? . g$6052$12l&&U)
        (message-condition? . g$5943$12l&&U)
        (make-who-condition . g$6036$12l&&U)
        (make-warning . g$5956$12l&&U)
        (make-violation . g$5995$12l&&U)
        (make-undefined-violation . g$6107$12l&&U)
        (make-syntax-violation . g$6090$12l&&U)
        (make-serious-condition . g$5969$12l&&U)
        (make-non-continuable-violation . g$6051$12l&&U)
        (make-message-condition . g$5941$12l&&U)
        (make-lexical-violation . g$6077$12l&&U)
        (make-irritants-condition . g$6021$12l&&U)
        (make-implementation-restriction-violation . g$6064$12l&&U)
        (make-error . g$5982$12l&&U)
        (make-assertion-violation . g$6008$12l&&U)
        (lexical-violation? . g$6078$12l&&U)
        (irritants-condition? . g$6023$12l&&U)
        (implementation-restriction-violation? . g$6065$12l&&U)
        (error? . g$5983$12l&&U)
        (condition-who . g$6039$12l&&U)
        (condition-predicate . g$12997$12l&&U)
        (condition-message . g$5944$12l&&U)
        (condition-irritants . g$6024$12l&&U)
        (condition-accessor . g$12996$12l&&U)
        (condition . g$12995$12l&&U)
        (assertion-violation? . g$6009$12l&&U)
        (condition? . g$12994$12l&&U)
        (utf32->string . g$12993$12l&&U)
        (utf16->string . g$12992$12l&&U)
        (utf8->string . g$12991$12l&&U)
        (uint-list->bytevector . g$12990$12l&&U)
        (u8-list->bytevector . g$12989$12l&&U)
        (string->utf8 . g$12988$12l&&U)
        (string->utf32 . g$12987$12l&&U)
        (string->utf16 . g$12986$12l&&U)
        (sint-list->bytevector . g$12985$12l&&U)
        (native-endianness . g$5780$12l&&U)
        (bytevector? . g$5469$12l&&U)
        (bytevector=? . g$12984$12l&&U)
        (bytevector-uint-set! . g$12983$12l&&U)
        (bytevector-uint-ref . g$12982$12l&&U)
        (bytevector-u8-set! . g$12981$12l&&U)
        (bytevector-u8-ref . g$12980$12l&&U)
        (bytevector-u64-set! . g$5801$12l&&U)
        (bytevector-u64-ref . g$5797$12l&&U)
        (bytevector-u64-native-set! . g$5803$12l&&U)
        (bytevector-u64-native-ref . g$5799$12l&&U)
        (bytevector-u32-set! . g$5793$12l&&U)
        (bytevector-u32-ref . g$5789$12l&&U)
        (bytevector-u32-native-set! . g$5795$12l&&U)
        (bytevector-u32-native-ref . g$5791$12l&&U)
        (bytevector-u16-set! . g$5785$12l&&U)
        (bytevector-u16-ref . g$5781$12l&&U)
        (bytevector-u16-native-set! . g$5787$12l&&U)
        (bytevector-u16-native-ref . g$5783$12l&&U)
        (bytevector-sint-set! . g$12979$12l&&U)
        (bytevector-sint-ref . g$12978$12l&&U)
        (bytevector-s8-set! . g$12977$12l&&U)
        (bytevector-s8-ref . g$12976$12l&&U)
        (bytevector-s64-set! . g$5802$12l&&U)
        (bytevector-s64-ref . g$5798$12l&&U)
        (bytevector-s64-native-set! . g$5804$12l&&U)
        (bytevector-s64-native-ref . g$5800$12l&&U)
        (bytevector-s32-set! . g$5794$12l&&U)
        (bytevector-s32-ref . g$5790$12l&&U)
        (bytevector-s32-native-set! . g$5796$12l&&U)
        (bytevector-s32-native-ref . g$5792$12l&&U)
        (bytevector-s16-set! . g$5786$12l&&U)
        (bytevector-s16-ref . g$5782$12l&&U)
        (bytevector-s16-native-set! . g$5788$12l&&U)
        (bytevector-s16-native-ref . g$5784$12l&&U)
        (bytevector-length . g$12975$12l&&U)
        (bytevector-ieee-single-set! . g$12974$12l&&U)
        (bytevector-ieee-single-ref . g$12973$12l&&U)
        (bytevector-ieee-single-native-set! . g$5807$12l&&U)
        (bytevector-ieee-single-native-ref . g$5805$12l&&U)
        (bytevector-ieee-double-set! . g$12972$12l&&U)
        (bytevector-ieee-double-ref . g$12971$12l&&U)
        (bytevector-ieee-double-native-set! . g$5808$12l&&U)
        (bytevector-ieee-double-native-ref . g$5806$12l&&U)
        (bytevector-fill! . g$12970$12l&&U)
        (bytevector-copy! . g$12969$12l&&U)
        (bytevector-copy . g$12968$12l&&U)
        (bytevector->uint-list . g$12967$12l&&U)
        (bytevector->u8-list . g$12966$12l&&U)
        (bytevector->sint-list . g$12965$12l&&U)
        (no-nans-violation? . g$6298$12l&&U)
        (no-infinities-violation? . g$6285$12l&&U)
        (make-no-nans-violation . g$6297$12l&&U)
        (make-no-infinities-violation . g$6284$12l&&U)
        (real->flonum . g$12964$12l&&U)
        (flzero? . g$7535$12l&&U)
        (fltruncate . g$7530$12l&&U)
        (fltan . g$7516$12l&&U)
        (flsqrt . g$7521$12l&&U)
        (flsin . g$7514$12l&&U)
        (flround . g$7531$12l&&U)
        (flpositive? . g$7533$12l&&U)
        (flonum? . g$5474$12l&&U)
        (flodd? . g$7537$12l&&U)
        (flnumerator . g$12963$12l&&U)
        (flnegative? . g$7534$12l&&U)
        (flnan? . g$7513$12l&&U)
        (flmod0 . g$7498$12l&&U)
        (flmod . g$7497$12l&&U)
        (flmin . g$7539$12l&&U)
        (flmax . g$7538$12l&&U)
        (fllog . g$7520$12l&&U)
        (flinteger? . g$7506$12l&&U)
        (flinfinite? . g$7512$12l&&U)
        (flfloor . g$7529$12l&&U)
        (flfinite? . g$7507$12l&&U)
        (flexpt . g$7523$12l&&U)
        (flexp . g$7522$12l&&U)
        (fleven? . g$7536$12l&&U)
        (fldiv0-and-mod0 . g$7505$12l&&U)
        (fldiv0 . g$7492$12l&&U)
        (fldiv-and-mod . g$7499$12l&&U)
        (fldiv . g$7504$12l&&U)
        (fldenominator . g$12962$12l&&U)
        (flcos . g$7515$12l&&U)
        (flceiling . g$7524$12l&&U)
        (flatan . g$7519$12l&&U)
        (flasin . g$7517$12l&&U)
        (flacos . g$7518$12l&&U)
        (flabs . g$7532$12l&&U)
        (fl>? . g$7486$12l&&U)
        (fl>=? . g$7487$12l&&U)
        (fl=? . g$7483$12l&&U)
        (fl<? . g$7484$12l&&U)
        (fl<=? . g$7485$12l&&U)
        (fl/ . g$7482$12l&&U)
        (fl- . g$7481$12l&&U)
        (fl+ . g$7479$12l&&U)
        (fl* . g$7480$12l&&U)
        (fixnum->flonum . g$12961$12l&&U)
        (fxzero? . g$6579$12l&&U)
        (fxxor . g$6542$12l&&U)
        (fxrotate-bit-field . g$6617$12l&&U)
        (fxreverse-bit-field . g$6618$12l&&U)
        (fxpositive? . g$6569$12l&&U)
        (fxodd? . g$6589$12l&&U)
        (fxnot . g$6523$12l&&U)
        (fxnegative? . g$6574$12l&&U)
        (fxmod0 . g$6553$12l&&U)
        (fxmod . g$6552$12l&&U)
        (fxmin . g$6591$12l&&U)
        (fxmax . g$6590$12l&&U)
        (fxlength . g$6520$12l&&U)
        (fxior . g$6541$12l&&U)
        (fxif . g$6599$12l&&U)
        (fxfirst-bit-set . g$6521$12l&&U)
        (fxeven? . g$6584$12l&&U)
        (fxdiv0-and-mod0 . g$6564$12l&&U)
        (fxdiv0 . g$6559$12l&&U)
        (fxdiv-and-mod . g$6554$12l&&U)
        (fxdiv . g$6547$12l&&U)
        (fxcopy-bit-field . g$6614$12l&&U)
        (fxcopy-bit . g$6604$12l&&U)
        (fxbit-set? . g$6522$12l&&U)
        (fxbit-field . g$6609$12l&&U)
        (fxbit-count . g$6515$12l&&U)
        (fxarithmetic-shift-right . g$6616$12l&&U)
        (fxarithmetic-shift-left . g$6615$12l&&U)
        (fxarithmetic-shift . g$6510$12l&&U)
        (fxand . g$6540$12l&&U)
        (fx>? . g$6532$12l&&U)
        (fx>=? . g$6533$12l&&U)
        (fx=? . g$6529$12l&&U)
        (fx<? . g$6530$12l&&U)
        (fx<=? . g$6531$12l&&U)
        (fx-/carry . g$6593$12l&&U)
        (fx- . g$6504$12l&&U)
        (fx+/carry . g$6594$12l&&U)
        (fx+ . g$6502$12l&&U)
        (fx*/carry . g$6592$12l&&U)
        (fx* . g$6503$12l&&U)
        (greatest-fixnum . g$6473$12l&&U)
        (least-fixnum . g$6474$12l&&U)
        (fixnum-width . g$5475$12l&&U)
        (fixnum? . g$5473$12l&&U)
        (bitwise-rotate-bit-field . g$6447$12l&&U)
        (bitwise-reverse-bit-field . g$12960$12l&&U)
        (bitwise-length . g$12959$12l&&U)
        (bitwise-if . g$6441$12l&&U)
        (bitwise-first-bit-set . g$12958$12l&&U)
        (bitwise-copy-bit-field . g$6444$12l&&U)
        (bitwise-copy-bit . g$6442$12l&&U)
        (bitwise-bit-set? . g$12957$12l&&U)
        (bitwise-bit-field . g$6443$12l&&U)
        (bitwise-bit-count . g$12956$12l&&U)
        (bitwise-xor . g$12955$12l&&U)
        (bitwise-ior . g$12954$12l&&U)
        (bitwise-and . g$12953$12l&&U)
        (bitwise-not . g$12952$12l&&U)
        (bitwise-arithmetic-shift-right . g$6446$12l&&U)
        (bitwise-arithmetic-shift-left . g$6445$12l&&U)
        (bitwise-arithmetic-shift . g$12951$12l&&U)
        (zero? . g$5517$12l&&U)
        (vector? . g$5468$12l&&U)
        (vector-set! . g$5483$12l&&U)
        (vector-ref . g$5482$12l&&U)
        (vector-map . g$5549$12l&&U)
        (vector-length . g$12950$12l&&U)
        (vector-for-each . g$5550$12l&&U)
        (vector-fill! . g$5484$12l&&U)
        (vector->list . g$12949$12l&&U)
        (vector . g$12948$12l&&U)
        (values . g$12947$12l&&U)
        (truncate . g$12946$12l&&U)
        (tan . g$12945$12l&&U)
        (symbol? . g$5470$12l&&U)
        (symbol=? . g$5534$12l&&U)
        (symbol->string . g$12944$12l&&U)
        (substring . g$12943$12l&&U)
        (string? . g$12942$12l&&U)
        (string>? . g$5531$12l&&U)
        (string>=? . g$5533$12l&&U)
        (string=? . g$5529$12l&&U)
        (string<? . g$5530$12l&&U)
        (string<=? . g$5532$12l&&U)
        (string-ref . g$12941$12l&&U)
        (string-length . g$12940$12l&&U)
        (string-for-each . g$5551$12l&&U)
        (string-copy . g$12939$12l&&U)
        (string-append . g$12938$12l&&U)
        (string->symbol . g$12937$12l&&U)
        (string->number . g$12936$12l&&U)
        (string->list . g$12935$12l&&U)
        (string . g$12934$12l&&U)
        (sqrt . g$12933$12l&&U)
        (sin . g$12932$12l&&U)
        (round . g$12931$12l&&U)
        (reverse . g$5486$12l&&U)
        (real? . g$12930$12l&&U)
        (real-valued? . g$12929$12l&&U)
        (real-part . g$12928$12l&&U)
        (rationalize . g$5546$12l&&U)
        (rational? . g$12927$12l&&U)
        (rational-valued? . g$12926$12l&&U)
        (procedure? . g$5472$12l&&U)
        (positive? . g$5515$12l&&U)
        (pair? . g$12925$12l&&U)
        (odd? . g$5519$12l&&U)
        (numerator . g$12924$12l&&U)
        (number? . g$12923$12l&&U)
        (number->string . g$12922$12l&&U)
        (null? . g$12921$12l&&U)
        (not . g$12920$12l&&U)
        (negative? . g$5516$12l&&U)
        (nan? . g$12919$12l&&U)
        (min . g$5521$12l&&U)
        (max . g$5520$12l&&U)
        (map . g$5159$12l&&U)
        (make-vector . g$12918$12l&&U)
        (make-string . g$12917$12l&&U)
        (make-rectangular . g$12916$12l&&U)
        (make-polar . g$12915$12l&&U)
        (magnitude . g$12914$12l&&U)
        (log . g$12913$12l&&U)
        (list? . g$12912$12l&&U)
        (list-tail . g$5139$12l&&U)
        (list-ref . g$5140$12l&&U)
        (list->vector . g$5480$12l&&U)
        (list->string . g$5481$12l&&U)
        (list . g$12911$12l&&U)
        (length . g$12910$12l&&U)
        (lcm . g$5523$12l&&U)
        (integer? . g$12909$12l&&U)
        (integer-valued? . g$12908$12l&&U)
        (integer->char . g$12907$12l&&U)
        (infinite? . g$12906$12l&&U)
        (inexact? . g$12905$12l&&U)
        (inexact . g$12904$12l&&U)
        (imag-part . g$12903$12l&&U)
        (gcd . g$5522$12l&&U)
        (for-each . g$5160$12l&&U)
        (floor . g$12902$12l&&U)
        (finite? . g$12901$12l&&U)
        (expt . g$12900$12l&&U)
        (exp . g$12899$12l&&U)
        (exact? . g$12898$12l&&U)
        (exact-integer-sqrt . g$12897$12l&&U)
        (exact . g$12896$12l&&U)
        (even? . g$5518$12l&&U)
        (error . g$12895$12l&&U)
        (eqv? . g$12894$12l&&U)
        (equal? . g$12893$12l&&U)
        (eq? . g$12892$12l&&U)
        (dynamic-wind . g$12891$12l&&U)
        (div0-and-mod0 . g$5479$12l&&U)
        (mod0 . g$5477$12l&&U)
        (div0 . g$12890$12l&&U)
        (div-and-mod . g$5478$12l&&U)
        (mod . g$5476$12l&&U)
        (div . g$12889$12l&&U)
        (denominator . g$12888$12l&&U)
        (cos . g$12887$12l&&U)
        (cons . g$12886$12l&&U)
        (complex? . g$12885$12l&&U)
        (char? . g$5467$12l&&U)
        (char>? . g$5543$12l&&U)
        (char>=? . g$5545$12l&&U)
        (char=? . g$5541$12l&&U)
        (char<? . g$5542$12l&&U)
        (char<=? . g$5544$12l&&U)
        (char->integer . g$12884$12l&&U)
        (ceiling . g$12883$12l&&U)
        (call-with-values . g$12882$12l&&U)
        (call/cc . g$12881$12l&&U)
        (call-with-current-continuation . g$12880$12l&&U)
        (cddddr . g$5514$12l&&U)
        (cdddar . g$5513$12l&&U)
        (cddadr . g$5512$12l&&U)
        (cddaar . g$5511$12l&&U)
        (cdaddr . g$5510$12l&&U)
        (cdadar . g$5509$12l&&U)
        (cdaadr . g$5508$12l&&U)
        (cdaaar . g$5507$12l&&U)
        (cadddr . g$5506$12l&&U)
        (caddar . g$5505$12l&&U)
        (cadadr . g$5504$12l&&U)
        (cadaar . g$5503$12l&&U)
        (caaddr . g$5502$12l&&U)
        (caadar . g$5501$12l&&U)
        (caaadr . g$5500$12l&&U)
        (caaaar . g$5499$12l&&U)
        (cdddr . g$5498$12l&&U)
        (cddar . g$5497$12l&&U)
        (cdadr . g$5496$12l&&U)
        (cdaar . g$5495$12l&&U)
        (caddr . g$5494$12l&&U)
        (cadar . g$5493$12l&&U)
        (caadr . g$5492$12l&&U)
        (caaar . g$5491$12l&&U)
        (cddr . g$5490$12l&&U)
        (cdar . g$5489$12l&&U)
        (cadr . g$5488$12l&&U)
        (caar . g$5487$12l&&U)
        (cdr . g$12879$12l&&U)
        (car . g$12878$12l&&U)
        (boolean? . g$5471$12l&&U)
        (boolean=? . g$5535$12l&&U)
        (atan . g$12877$12l&&U)
        (assertion-violation . g$12876$12l&&U)
        (asin . g$12875$12l&&U)
        (apply . g$12874$12l&&U)
        (append . g$12873$12l&&U)
        (angle . g$12872$12l&&U)
        (acos . g$12871$12l&&U)
        (abs . g$12870$12l&&U)
        (/ . g$12869$12l&&U)
        (* . g$12868$12l&&U)
        (- . g$12867$12l&&U)
        (+ . g$12866$12l&&U)
        (>= . g$12865$12l&&U)
        (> . g$12864$12l&&U)
        (= . g$12863$12l&&U)
        (<= . g$12862$12l&&U)
        (< . g$12861$12l&&U)
        (&no-nans . g$12795$12l&&U)
        (&no-infinities . g$12794$12l&&U)
        (&i/o-encoding . g$12793$12l&&U)
        (&i/o-decoding . g$12792$12l&&U)
        (&i/o-port . g$12791$12l&&U)
        (&i/o-file-does-not-exist . g$12790$12l&&U)
        (&i/o-file-already-exists . g$12789$12l&&U)
        (&i/o-file-is-read-only . g$12788$12l&&U)
        (&i/o-file-protection . g$12787$12l&&U)
        (&i/o-filename . g$12786$12l&&U)
        (&i/o-invalid-position . g$12785$12l&&U)
        (&i/o-write . g$12784$12l&&U)
        (&i/o-read . g$12783$12l&&U)
        (&i/o . g$12782$12l&&U)
        (&non-continuable . g$12781$12l&&U)
        (&undefined . g$12780$12l&&U)
        (&syntax . g$12779$12l&&U)
        (&lexical . g$12778$12l&&U)
        (&implementation-restriction . g$12777$12l&&U)
        (&who . g$12776$12l&&U)
        (&irritants . g$12775$12l&&U)
        (&assertion . g$12774$12l&&U)
        (&violation . g$12773$12l&&U)
        (&error . g$12772$12l&&U)
        (&serious . g$12771$12l&&U)
        (&warning . g$12770$12l&&U)
        (&message . g$12769$12l&&U)
        (&condition . g$12768$12l&&U)
        (define-condition-type . g$12767$12l&&U)
        (define-enumeration . g$12766$12l&&U)
        (define-record-type . g$12765$12l&&U)
        (parent-rtd . g$12764$12l&&U)
        (nongenerative . g$12763$12l&&U)
        (opaque . g$12762$12l&&U)
        (sealed . g$12761$12l&&U)
        (protocol . g$12760$12l&&U)
        (parent . g$12759$12l&&U)
        (immutable . g$12758$12l&&U)
        (mutable . g$12757$12l&&U)
        (fields . g$12756$12l&&U)
        (error-handling-mode . g$12755$12l&&U)
        (file-options . g$12754$12l&&U)
        (buffer-mode . g$12753$12l&&U)
        (eol-style . g$12752$12l&&U)
        (guard . g$12751$12l&&U)
        (unsyntax-splicing . g$12745$12l&&U)
        (unsyntax . g$12744$12l&&U)
        (unquote-splicing . g$12743$12l&&U)
        (unquote . g$12742$12l&&U)
        (_ . g$12741$12l&&U)
        (else . g$12740$12l&&U)
        (=> . g$12739$12l&&U)
        (... . g$12738$12l&&U)
        (assert . g$12737$12l&&U)
        (endianness . g$12736$12l&&U)
        (or . g$12733$12l&&U)
        (and . g$12732$12l&&U)
        (do . g$12731$12l&&U)
        (cond . g$12730$12l&&U)
        (let* . g$12729$12l&&U)
        (let . g$12728$12l&&U)
        (identifier-syntax . g$12727$12l&&U)
        (with-syntax . g$12726$12l&&U)
        (quasisyntax . g$12725$12l&&U)
        (quasiquote . g$12724$12l&&U)
        (syntax-rules . g$12723$12l&&U)
        (let-values . g$12719$12l&&U)
        (let*-values . g$12718$12l&&U)
        (record-constructor-descriptor . g$12717$12l&&U)
        (record-type-descriptor . g$12716$12l&&U)
        (case . g$12714$12l&&U)
        (unless . g$12712$12l&&U)
        (when . g$12711$12l&&U)
        (if . g$12710$12l&&U)
        (letrec* . g$12709$12l&&U)
        (letrec . g$12708$12l&&U)
        (case-lambda . g$12706$12l&&U)
        (lambda . g$12705$12l&&U)
        (syntax . g$12704$12l&&U)
        (syntax-case . g$12703$12l&&U)
        (quote . g$12702$12l&&U)
        (letrec-syntax . g$12700$12l&&U)
        (let-syntax . g$12699$12l&&U)
        (set! . g$12698$12l&&U)
        (begin . g$12694$12l&&U)
        (define-syntax . g$12692$12l&&U)
        (define . g$12691$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13172$12l&&U
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((scheme-report-environment . g$9595$12l&&U)
        (quotient . g$6315$12l&&U)
        (null-environment . g$9594$12l&&U)
        (remainder . g$6316$12l&&U)
        (modulo . g$6317$12l&&U)
        (inexact->exact . g$6312$12l&&U)
        (force . g$6319$12l&&U)
        (exact->inexact . g$6313$12l&&U)
        (delay . g$12735$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13173$12l&&U
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$12731$12l&&U)
        (unless . g$12712$12l&&U)
        (when . g$12711$12l&&U)
        (case-lambda . g$12706$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13174$12l&&U
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$9597$12l&&U) (environment . g$9593$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13175$12l&&U
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$13003$12l&&U) (set-car! . g$13002$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13176$12l&&U
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$13005$12l&&U) (string-set! . g$13004$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13177$12l&&U
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$13006$12l&&U) (command-line . g$12634$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13178$12l&&U
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$9296$12l&&U)
        (identifier? . g$9616$12l&&U)
        (generate-temporaries . g$9605$12l&&U)
        (free-identifier=? . g$9606$12l&&U)
        (syntax->datum . g$9618$12l&&U)
        (datum->syntax . g$9617$12l&&U)
        (bound-identifier=? . g$9607$12l&&U)
        (syntax-violation . g$9615$12l&&U)
        (unsyntax-splicing . g$12745$12l&&U)
        (unsyntax . g$12744$12l&&U)
        (_ . g$12741$12l&&U)
        (... . g$12738$12l&&U)
        (with-syntax . g$12726$12l&&U)
        (quasisyntax . g$12725$12l&&U)
        (syntax . g$12704$12l&&U)
        (syntax-case . g$12703$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13179$12l&&U
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$5774$12l&&U)
        (file-exists? . g$5773$12l&&U)
        (make-i/o-write-error . g$6146$12l&&U)
        (make-i/o-read-error . g$6133$12l&&U)
        (make-i/o-port-error . g$6241$12l&&U)
        (make-i/o-invalid-position-error . g$6159$12l&&U)
        (make-i/o-filename-error . g$6174$12l&&U)
        (make-i/o-file-protection-error . g$6189$12l&&U)
        (make-i/o-file-is-read-only-error . g$6202$12l&&U)
        (make-i/o-file-does-not-exist-error . g$6228$12l&&U)
        (make-i/o-file-already-exists-error . g$6215$12l&&U)
        (make-i/o-error . g$6120$12l&&U)
        (i/o-write-error? . g$6147$12l&&U)
        (i/o-read-error? . g$6134$12l&&U)
        (i/o-port-error? . g$6243$12l&&U)
        (i/o-invalid-position-error? . g$6161$12l&&U)
        (i/o-error-position . g$6162$12l&&U)
        (i/o-filename-error? . g$6176$12l&&U)
        (i/o-file-protection-error? . g$6190$12l&&U)
        (i/o-file-is-read-only-error? . g$6203$12l&&U)
        (i/o-file-does-not-exist-error? . g$6229$12l&&U)
        (i/o-file-already-exists-error? . g$6216$12l&&U)
        (i/o-error? . g$6121$12l&&U)
        (i/o-error-port . g$6244$12l&&U)
        (i/o-error-filename . g$6177$12l&&U)
        (&i/o-port . g$12791$12l&&U)
        (&i/o-file-does-not-exist . g$12790$12l&&U)
        (&i/o-file-already-exists . g$12789$12l&&U)
        (&i/o-file-is-read-only . g$12788$12l&&U)
        (&i/o-file-protection . g$12787$12l&&U)
        (&i/o-filename . g$12786$12l&&U)
        (&i/o-invalid-position . g$12785$12l&&U)
        (&i/o-write . g$12784$12l&&U)
        (&i/o-read . g$12783$12l&&U)
        (&i/o . g$12782$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13180$12l&&U
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$13091$12l&&U)
        (vector-sort . g$13090$12l&&U)
        (list-sort . g$6336$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13181$12l&&U
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$5517$12l&&U)
        (vector? . g$5468$12l&&U)
        (vector-set! . g$5483$12l&&U)
        (vector-ref . g$5482$12l&&U)
        (vector-map . g$5549$12l&&U)
        (vector-length . g$12950$12l&&U)
        (vector-for-each . g$5550$12l&&U)
        (vector-fill! . g$5484$12l&&U)
        (vector->list . g$12949$12l&&U)
        (vector . g$12948$12l&&U)
        (values . g$12947$12l&&U)
        (truncate . g$12946$12l&&U)
        (tan . g$12945$12l&&U)
        (symbol? . g$5470$12l&&U)
        (symbol=? . g$5534$12l&&U)
        (symbol->string . g$12944$12l&&U)
        (substring . g$12943$12l&&U)
        (string? . g$12942$12l&&U)
        (string>? . g$5531$12l&&U)
        (string>=? . g$5533$12l&&U)
        (string=? . g$5529$12l&&U)
        (string<? . g$5530$12l&&U)
        (string<=? . g$5532$12l&&U)
        (string-ref . g$12941$12l&&U)
        (string-length . g$12940$12l&&U)
        (string-for-each . g$5551$12l&&U)
        (string-copy . g$12939$12l&&U)
        (string-append . g$12938$12l&&U)
        (string->symbol . g$12937$12l&&U)
        (string->number . g$12936$12l&&U)
        (string->list . g$12935$12l&&U)
        (string . g$12934$12l&&U)
        (sqrt . g$12933$12l&&U)
        (sin . g$12932$12l&&U)
        (round . g$12931$12l&&U)
        (reverse . g$5486$12l&&U)
        (real? . g$12930$12l&&U)
        (real-valued? . g$12929$12l&&U)
        (real-part . g$12928$12l&&U)
        (rationalize . g$5546$12l&&U)
        (rational? . g$12927$12l&&U)
        (rational-valued? . g$12926$12l&&U)
        (procedure? . g$5472$12l&&U)
        (positive? . g$5515$12l&&U)
        (pair? . g$12925$12l&&U)
        (odd? . g$5519$12l&&U)
        (numerator . g$12924$12l&&U)
        (number? . g$12923$12l&&U)
        (number->string . g$12922$12l&&U)
        (null? . g$12921$12l&&U)
        (not . g$12920$12l&&U)
        (negative? . g$5516$12l&&U)
        (nan? . g$12919$12l&&U)
        (min . g$5521$12l&&U)
        (max . g$5520$12l&&U)
        (map . g$5159$12l&&U)
        (make-vector . g$12918$12l&&U)
        (make-string . g$12917$12l&&U)
        (make-rectangular . g$12916$12l&&U)
        (make-polar . g$12915$12l&&U)
        (magnitude . g$12914$12l&&U)
        (log . g$12913$12l&&U)
        (list? . g$12912$12l&&U)
        (list-tail . g$5139$12l&&U)
        (list-ref . g$5140$12l&&U)
        (list->vector . g$5480$12l&&U)
        (list->string . g$5481$12l&&U)
        (list . g$12911$12l&&U)
        (length . g$12910$12l&&U)
        (lcm . g$5523$12l&&U)
        (integer? . g$12909$12l&&U)
        (integer-valued? . g$12908$12l&&U)
        (integer->char . g$12907$12l&&U)
        (infinite? . g$12906$12l&&U)
        (inexact? . g$12905$12l&&U)
        (inexact . g$12904$12l&&U)
        (imag-part . g$12903$12l&&U)
        (gcd . g$5522$12l&&U)
        (for-each . g$5160$12l&&U)
        (floor . g$12902$12l&&U)
        (finite? . g$12901$12l&&U)
        (expt . g$12900$12l&&U)
        (exp . g$12899$12l&&U)
        (exact? . g$12898$12l&&U)
        (exact-integer-sqrt . g$12897$12l&&U)
        (exact . g$12896$12l&&U)
        (even? . g$5518$12l&&U)
        (error . g$12895$12l&&U)
        (eqv? . g$12894$12l&&U)
        (equal? . g$12893$12l&&U)
        (eq? . g$12892$12l&&U)
        (dynamic-wind . g$12891$12l&&U)
        (div0-and-mod0 . g$5479$12l&&U)
        (mod0 . g$5477$12l&&U)
        (div0 . g$12890$12l&&U)
        (div-and-mod . g$5478$12l&&U)
        (mod . g$5476$12l&&U)
        (div . g$12889$12l&&U)
        (denominator . g$12888$12l&&U)
        (cos . g$12887$12l&&U)
        (cons . g$12886$12l&&U)
        (complex? . g$12885$12l&&U)
        (char? . g$5467$12l&&U)
        (char>? . g$5543$12l&&U)
        (char>=? . g$5545$12l&&U)
        (char=? . g$5541$12l&&U)
        (char<? . g$5542$12l&&U)
        (char<=? . g$5544$12l&&U)
        (char->integer . g$12884$12l&&U)
        (ceiling . g$12883$12l&&U)
        (call-with-values . g$12882$12l&&U)
        (call/cc . g$12881$12l&&U)
        (call-with-current-continuation . g$12880$12l&&U)
        (cddddr . g$5514$12l&&U)
        (cdddar . g$5513$12l&&U)
        (cddadr . g$5512$12l&&U)
        (cddaar . g$5511$12l&&U)
        (cdaddr . g$5510$12l&&U)
        (cdadar . g$5509$12l&&U)
        (cdaadr . g$5508$12l&&U)
        (cdaaar . g$5507$12l&&U)
        (cadddr . g$5506$12l&&U)
        (caddar . g$5505$12l&&U)
        (cadadr . g$5504$12l&&U)
        (cadaar . g$5503$12l&&U)
        (caaddr . g$5502$12l&&U)
        (caadar . g$5501$12l&&U)
        (caaadr . g$5500$12l&&U)
        (caaaar . g$5499$12l&&U)
        (cdddr . g$5498$12l&&U)
        (cddar . g$5497$12l&&U)
        (cdadr . g$5496$12l&&U)
        (cdaar . g$5495$12l&&U)
        (caddr . g$5494$12l&&U)
        (cadar . g$5493$12l&&U)
        (caadr . g$5492$12l&&U)
        (caaar . g$5491$12l&&U)
        (cddr . g$5490$12l&&U)
        (cdar . g$5489$12l&&U)
        (cadr . g$5488$12l&&U)
        (caar . g$5487$12l&&U)
        (cdr . g$12879$12l&&U)
        (car . g$12878$12l&&U)
        (boolean? . g$5471$12l&&U)
        (boolean=? . g$5535$12l&&U)
        (atan . g$12877$12l&&U)
        (assertion-violation . g$12876$12l&&U)
        (asin . g$12875$12l&&U)
        (apply . g$12874$12l&&U)
        (append . g$12873$12l&&U)
        (angle . g$12872$12l&&U)
        (acos . g$12871$12l&&U)
        (abs . g$12870$12l&&U)
        (/ . g$12869$12l&&U)
        (* . g$12868$12l&&U)
        (- . g$12867$12l&&U)
        (+ . g$12866$12l&&U)
        (>= . g$12865$12l&&U)
        (> . g$12864$12l&&U)
        (= . g$12863$12l&&U)
        (<= . g$12862$12l&&U)
        (< . g$12861$12l&&U)
        (unquote-splicing . g$12743$12l&&U)
        (unquote . g$12742$12l&&U)
        (_ . g$12741$12l&&U)
        (else . g$12740$12l&&U)
        (=> . g$12739$12l&&U)
        (... . g$12738$12l&&U)
        (assert . g$12737$12l&&U)
        (or . g$12733$12l&&U)
        (and . g$12732$12l&&U)
        (cond . g$12730$12l&&U)
        (let* . g$12729$12l&&U)
        (let . g$12728$12l&&U)
        (identifier-syntax . g$12727$12l&&U)
        (quasiquote . g$12724$12l&&U)
        (syntax-rules . g$12723$12l&&U)
        (let-values . g$12719$12l&&U)
        (let*-values . g$12718$12l&&U)
        (case . g$12714$12l&&U)
        (if . g$12710$12l&&U)
        (letrec* . g$12709$12l&&U)
        (letrec . g$12708$12l&&U)
        (lambda . g$12705$12l&&U)
        (quote . g$12702$12l&&U)
        (letrec-syntax . g$12700$12l&&U)
        (let-syntax . g$12699$12l&&U)
        (set! . g$12698$12l&&U)
        (begin . g$12694$12l&&U)
        (define-syntax . g$12692$12l&&U)
        (define . g$12691$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13182$12l&&U
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5164$12l&&U)
        (remv . g$5165$12l&&U)
        (remp . g$5145$12l&&U)
        (remq . g$5166$12l&&U)
        (partition . g$5144$12l&&U)
        (memv . g$5152$12l&&U)
        (memq . g$5151$12l&&U)
        (memp . g$5154$12l&&U)
        (member . g$5153$12l&&U)
        (exists . g$5158$12l&&U)
        (for-all . g$5157$12l&&U)
        (fold-right . g$5163$12l&&U)
        (fold-left . g$5162$12l&&U)
        (find . g$5143$12l&&U)
        (filter . g$5146$12l&&U)
        (cons* . g$5161$12l&&U)
        (assv . g$5148$12l&&U)
        (assq . g$5147$12l&&U)
        (assp . g$5150$12l&&U)
        (assoc . g$5149$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13183$12l&&U
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$8120$12l&&U)
        (call-with-input-file . g$8119$12l&&U)
        (write-char . g$8111$12l&&U)
        (write . g$13077$12l&&U)
        (with-output-to-file . g$8118$12l&&U)
        (with-input-from-file . g$8117$12l&&U)
        (read-char . g$8110$12l&&U)
        (read . g$13076$12l&&U)
        (peek-char . g$8109$12l&&U)
        (open-output-file . g$13075$12l&&U)
        (open-input-file . g$13074$12l&&U)
        (newline . g$8121$12l&&U)
        (display . g$13073$12l&&U)
        (close-output-port . g$13072$12l&&U)
        (close-input-port . g$13071$12l&&U)
        (eof-object? . g$13070$12l&&U)
        (eof-object . g$13069$12l&&U)
        (current-error-port . g$13068$12l&&U)
        (current-output-port . g$13067$12l&&U)
        (current-input-port . g$13066$12l&&U)
        (output-port? . g$13065$12l&&U)
        (input-port? . g$13064$12l&&U)
        (make-i/o-write-error . g$6146$12l&&U)
        (make-i/o-read-error . g$6133$12l&&U)
        (make-i/o-port-error . g$6241$12l&&U)
        (make-i/o-invalid-position-error . g$6159$12l&&U)
        (make-i/o-filename-error . g$6174$12l&&U)
        (make-i/o-file-protection-error . g$6189$12l&&U)
        (make-i/o-file-is-read-only-error . g$6202$12l&&U)
        (make-i/o-file-does-not-exist-error . g$6228$12l&&U)
        (make-i/o-file-already-exists-error . g$6215$12l&&U)
        (make-i/o-error . g$6120$12l&&U)
        (i/o-write-error? . g$6147$12l&&U)
        (i/o-read-error? . g$6134$12l&&U)
        (i/o-port-error? . g$6243$12l&&U)
        (i/o-invalid-position-error? . g$6161$12l&&U)
        (i/o-error-position . g$6162$12l&&U)
        (i/o-filename-error? . g$6176$12l&&U)
        (i/o-file-protection-error? . g$6190$12l&&U)
        (i/o-file-is-read-only-error? . g$6203$12l&&U)
        (i/o-file-does-not-exist-error? . g$6229$12l&&U)
        (i/o-file-already-exists-error? . g$6216$12l&&U)
        (i/o-error? . g$6121$12l&&U)
        (i/o-error-port . g$6244$12l&&U)
        (i/o-error-filename . g$6177$12l&&U)
        (&i/o-port . g$12791$12l&&U)
        (&i/o-file-does-not-exist . g$12790$12l&&U)
        (&i/o-file-already-exists . g$12789$12l&&U)
        (&i/o-file-is-read-only . g$12788$12l&&U)
        (&i/o-file-protection . g$12787$12l&&U)
        (&i/o-filename . g$12786$12l&&U)
        (&i/o-invalid-position . g$12785$12l&&U)
        (&i/o-write . g$12784$12l&&U)
        (&i/o-read . g$12783$12l&&U)
        (&i/o . g$12782$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13184$12l&&U
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$13025$12l&&U)
        (utf32->string . g$12993$12l&&U)
        (utf16->string . g$12992$12l&&U)
        (utf8->string . g$12991$12l&&U)
        (uint-list->bytevector . g$12990$12l&&U)
        (u8-list->bytevector . g$12989$12l&&U)
        (string->utf8 . g$12988$12l&&U)
        (string->utf32 . g$12987$12l&&U)
        (string->utf16 . g$12986$12l&&U)
        (sint-list->bytevector . g$12985$12l&&U)
        (native-endianness . g$5780$12l&&U)
        (bytevector? . g$5469$12l&&U)
        (bytevector=? . g$12984$12l&&U)
        (bytevector-uint-set! . g$12983$12l&&U)
        (bytevector-uint-ref . g$12982$12l&&U)
        (bytevector-u8-set! . g$12981$12l&&U)
        (bytevector-u8-ref . g$12980$12l&&U)
        (bytevector-u64-set! . g$5801$12l&&U)
        (bytevector-u64-ref . g$5797$12l&&U)
        (bytevector-u64-native-set! . g$5803$12l&&U)
        (bytevector-u64-native-ref . g$5799$12l&&U)
        (bytevector-u32-set! . g$5793$12l&&U)
        (bytevector-u32-ref . g$5789$12l&&U)
        (bytevector-u32-native-set! . g$5795$12l&&U)
        (bytevector-u32-native-ref . g$5791$12l&&U)
        (bytevector-u16-set! . g$5785$12l&&U)
        (bytevector-u16-ref . g$5781$12l&&U)
        (bytevector-u16-native-set! . g$5787$12l&&U)
        (bytevector-u16-native-ref . g$5783$12l&&U)
        (bytevector-sint-set! . g$12979$12l&&U)
        (bytevector-sint-ref . g$12978$12l&&U)
        (bytevector-s8-set! . g$12977$12l&&U)
        (bytevector-s8-ref . g$12976$12l&&U)
        (bytevector-s64-set! . g$5802$12l&&U)
        (bytevector-s64-ref . g$5798$12l&&U)
        (bytevector-s64-native-set! . g$5804$12l&&U)
        (bytevector-s64-native-ref . g$5800$12l&&U)
        (bytevector-s32-set! . g$5794$12l&&U)
        (bytevector-s32-ref . g$5790$12l&&U)
        (bytevector-s32-native-set! . g$5796$12l&&U)
        (bytevector-s32-native-ref . g$5792$12l&&U)
        (bytevector-s16-set! . g$5786$12l&&U)
        (bytevector-s16-ref . g$5782$12l&&U)
        (bytevector-s16-native-set! . g$5788$12l&&U)
        (bytevector-s16-native-ref . g$5784$12l&&U)
        (bytevector-length . g$12975$12l&&U)
        (bytevector-ieee-single-set! . g$12974$12l&&U)
        (bytevector-ieee-single-ref . g$12973$12l&&U)
        (bytevector-ieee-single-native-set! . g$5807$12l&&U)
        (bytevector-ieee-single-native-ref . g$5805$12l&&U)
        (bytevector-ieee-double-set! . g$12972$12l&&U)
        (bytevector-ieee-double-ref . g$12971$12l&&U)
        (bytevector-ieee-double-native-set! . g$5808$12l&&U)
        (bytevector-ieee-double-native-ref . g$5806$12l&&U)
        (bytevector-fill! . g$12970$12l&&U)
        (bytevector-copy! . g$12969$12l&&U)
        (bytevector-copy . g$12968$12l&&U)
        (bytevector->uint-list . g$12967$12l&&U)
        (bytevector->u8-list . g$12966$12l&&U)
        (bytevector->sint-list . g$12965$12l&&U)
        (endianness . g$12736$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13185$12l&&U
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$13123$12l&&U)
        (string-titlecase . g$13122$12l&&U)
        (string-normalize-nfkd . g$6383$12l&&U)
        (string-normalize-nfkc . g$6382$12l&&U)
        (string-normalize-nfd . g$6381$12l&&U)
        (string-normalize-nfc . g$6380$12l&&U)
        (string-foldcase . g$13121$12l&&U)
        (string-downcase . g$13120$12l&&U)
        (string-ci>? . g$6367$12l&&U)
        (string-ci>=? . g$6369$12l&&U)
        (string-ci=? . g$6365$12l&&U)
        (string-ci<? . g$6366$12l&&U)
        (string-ci<=? . g$6368$12l&&U)
        (char-whitespace? . g$13119$12l&&U)
        (char-upper-case? . g$13118$12l&&U)
        (char-title-case? . g$13117$12l&&U)
        (char-numeric? . g$13116$12l&&U)
        (char-lower-case? . g$13115$12l&&U)
        (char-general-category . g$13114$12l&&U)
        (char-upcase . g$13113$12l&&U)
        (char-titlecase . g$13112$12l&&U)
        (char-foldcase . g$13111$12l&&U)
        (char-downcase . g$13110$12l&&U)
        (char-ci>? . g$6377$12l&&U)
        (char-ci>=? . g$6379$12l&&U)
        (char-ci=? . g$6375$12l&&U)
        (char-ci<? . g$6376$12l&&U)
        (char-ci<=? . g$6378$12l&&U)
        (char-alphabetic? . g$13109$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13186$12l&&U
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$13001$12l&&U)
        (raise-continuable . g$13000$12l&&U)
        (raise . g$12999$12l&&U)
        (guard . g$12751$12l&&U)
        (else . g$12740$12l&&U)
        (=> . g$12739$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13187$12l&&U
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$6447$12l&&U)
        (bitwise-reverse-bit-field . g$12960$12l&&U)
        (bitwise-length . g$12959$12l&&U)
        (bitwise-if . g$6441$12l&&U)
        (bitwise-first-bit-set . g$12958$12l&&U)
        (bitwise-copy-bit-field . g$6444$12l&&U)
        (bitwise-copy-bit . g$6442$12l&&U)
        (bitwise-bit-set? . g$12957$12l&&U)
        (bitwise-bit-field . g$6443$12l&&U)
        (bitwise-bit-count . g$12956$12l&&U)
        (bitwise-xor . g$12955$12l&&U)
        (bitwise-ior . g$12954$12l&&U)
        (bitwise-and . g$12953$12l&&U)
        (bitwise-not . g$12952$12l&&U)
        (bitwise-arithmetic-shift-right . g$6446$12l&&U)
        (bitwise-arithmetic-shift-left . g$6445$12l&&U)
        (bitwise-arithmetic-shift . g$12951$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13188$12l&&U
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$6579$12l&&U)
        (fxxor . g$6542$12l&&U)
        (fxrotate-bit-field . g$6617$12l&&U)
        (fxreverse-bit-field . g$6618$12l&&U)
        (fxpositive? . g$6569$12l&&U)
        (fxodd? . g$6589$12l&&U)
        (fxnot . g$6523$12l&&U)
        (fxnegative? . g$6574$12l&&U)
        (fxmod0 . g$6553$12l&&U)
        (fxmod . g$6552$12l&&U)
        (fxmin . g$6591$12l&&U)
        (fxmax . g$6590$12l&&U)
        (fxlength . g$6520$12l&&U)
        (fxior . g$6541$12l&&U)
        (fxif . g$6599$12l&&U)
        (fxfirst-bit-set . g$6521$12l&&U)
        (fxeven? . g$6584$12l&&U)
        (fxdiv0-and-mod0 . g$6564$12l&&U)
        (fxdiv0 . g$6559$12l&&U)
        (fxdiv-and-mod . g$6554$12l&&U)
        (fxdiv . g$6547$12l&&U)
        (fxcopy-bit-field . g$6614$12l&&U)
        (fxcopy-bit . g$6604$12l&&U)
        (fxbit-set? . g$6522$12l&&U)
        (fxbit-field . g$6609$12l&&U)
        (fxbit-count . g$6515$12l&&U)
        (fxarithmetic-shift-right . g$6616$12l&&U)
        (fxarithmetic-shift-left . g$6615$12l&&U)
        (fxarithmetic-shift . g$6510$12l&&U)
        (fxand . g$6540$12l&&U)
        (fx>? . g$6532$12l&&U)
        (fx>=? . g$6533$12l&&U)
        (fx=? . g$6529$12l&&U)
        (fx<? . g$6530$12l&&U)
        (fx<=? . g$6531$12l&&U)
        (fx-/carry . g$6593$12l&&U)
        (fx- . g$6504$12l&&U)
        (fx+/carry . g$6594$12l&&U)
        (fx+ . g$6502$12l&&U)
        (fx*/carry . g$6592$12l&&U)
        (fx* . g$6503$12l&&U)
        (greatest-fixnum . g$6473$12l&&U)
        (least-fixnum . g$6474$12l&&U)
        (fixnum-width . g$5475$12l&&U)
        (fixnum? . g$5473$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13189$12l&&U
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$6298$12l&&U)
        (no-infinities-violation? . g$6285$12l&&U)
        (make-no-nans-violation . g$6297$12l&&U)
        (make-no-infinities-violation . g$6284$12l&&U)
        (real->flonum . g$12964$12l&&U)
        (flzero? . g$7535$12l&&U)
        (fltruncate . g$7530$12l&&U)
        (fltan . g$7516$12l&&U)
        (flsqrt . g$7521$12l&&U)
        (flsin . g$7514$12l&&U)
        (flround . g$7531$12l&&U)
        (flpositive? . g$7533$12l&&U)
        (flonum? . g$5474$12l&&U)
        (flodd? . g$7537$12l&&U)
        (flnumerator . g$12963$12l&&U)
        (flnegative? . g$7534$12l&&U)
        (flnan? . g$7513$12l&&U)
        (flmod0 . g$7498$12l&&U)
        (flmod . g$7497$12l&&U)
        (flmin . g$7539$12l&&U)
        (flmax . g$7538$12l&&U)
        (fllog . g$7520$12l&&U)
        (flinteger? . g$7506$12l&&U)
        (flinfinite? . g$7512$12l&&U)
        (flfloor . g$7529$12l&&U)
        (flfinite? . g$7507$12l&&U)
        (flexpt . g$7523$12l&&U)
        (flexp . g$7522$12l&&U)
        (fleven? . g$7536$12l&&U)
        (fldiv0-and-mod0 . g$7505$12l&&U)
        (fldiv0 . g$7492$12l&&U)
        (fldiv-and-mod . g$7499$12l&&U)
        (fldiv . g$7504$12l&&U)
        (fldenominator . g$12962$12l&&U)
        (flcos . g$7515$12l&&U)
        (flceiling . g$7524$12l&&U)
        (flatan . g$7519$12l&&U)
        (flasin . g$7517$12l&&U)
        (flacos . g$7518$12l&&U)
        (flabs . g$7532$12l&&U)
        (fl>? . g$7486$12l&&U)
        (fl>=? . g$7487$12l&&U)
        (fl=? . g$7483$12l&&U)
        (fl<? . g$7484$12l&&U)
        (fl<=? . g$7485$12l&&U)
        (fl/ . g$7482$12l&&U)
        (fl- . g$7481$12l&&U)
        (fl+ . g$7479$12l&&U)
        (fl* . g$7480$12l&&U)
        (fixnum->flonum . g$12961$12l&&U)
        (&no-nans . g$12795$12l&&U)
        (&no-infinities . g$12794$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13190$12l&&U
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$13089$12l&&U)
        (string-ci-hash . g$13088$12l&&U)
        (string-hash . g$13087$12l&&U)
        (equal-hash . g$13086$12l&&U)
        (hashtable-equivalence-function . g$13085$12l&&U)
        (make-hashtable . g$13084$12l&&U)
        (hashtable-hash-function . g$13083$12l&&U)
        (make-eqv-hashtable . g$5741$12l&&U)
        (make-eq-hashtable . g$5740$12l&&U)
        (hashtable? . g$13082$12l&&U)
        (hashtable-update! . g$5747$12l&&U)
        (hashtable-size . g$5742$12l&&U)
        (hashtable-set! . g$5744$12l&&U)
        (hashtable-ref . g$5743$12l&&U)
        (hashtable-mutable? . g$13081$12l&&U)
        (hashtable-keys . g$13080$12l&&U)
        (hashtable-entries . g$13079$12l&&U)
        (hashtable-delete! . g$5745$12l&&U)
        (hashtable-copy . g$13078$12l&&U)
        (hashtable-contains? . g$5746$12l&&U)
        (hashtable-clear! . g$5748$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13191$12l&&U
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$13070$12l&&U)
        (eof-object . g$13069$12l&&U)
        (current-error-port . g$13068$12l&&U)
        (current-output-port . g$13067$12l&&U)
        (current-input-port . g$13066$12l&&U)
        (output-port? . g$13065$12l&&U)
        (input-port? . g$13064$12l&&U)
        (utf-8-codec . g$13063$12l&&U)
        (utf-16-codec . g$13062$12l&&U)
        (transcoder-error-handling-mode . g$13061$12l&&U)
        (transcoder-eol-style . g$13060$12l&&U)
        (transcoder-codec . g$13059$12l&&U)
        (transcoded-port . g$13058$12l&&U)
        (textual-port? . g$13057$12l&&U)
        (string->bytevector . g$13056$12l&&U)
        (standard-output-port . g$13055$12l&&U)
        (standard-input-port . g$13054$12l&&U)
        (standard-error-port . g$13053$12l&&U)
        (set-port-position! . g$13052$12l&&U)
        (put-u8 . g$13051$12l&&U)
        (put-string . g$13050$12l&&U)
        (put-datum . g$8089$12l&&U)
        (put-char . g$13049$12l&&U)
        (put-bytevector . g$13048$12l&&U)
        (port? . g$8094$12l&&U)
        (port-transcoder . g$13047$12l&&U)
        (port-position . g$13046$12l&&U)
        (port-has-set-port-position!? . g$13045$12l&&U)
        (port-has-port-position? . g$13044$12l&&U)
        (port-eof? . g$13043$12l&&U)
        (output-port-buffer-mode . g$13042$12l&&U)
        (open-string-output-port . g$8093$12l&&U)
        (open-string-input-port . g$13041$12l&&U)
        (open-file-output-port . g$13040$12l&&U)
        (open-file-input/output-port . g$13039$12l&&U)
        (open-file-input-port . g$13038$12l&&U)
        (open-bytevector-output-port . g$13037$12l&&U)
        (open-bytevector-input-port . g$13036$12l&&U)
        (native-transcoder . g$13035$12l&&U)
        (native-eol-style . g$13034$12l&&U)
        (make-transcoder . g$13033$12l&&U)
        (latin-1-codec . g$13032$12l&&U)
        (make-i/o-write-error . g$6146$12l&&U)
        (make-i/o-read-error . g$6133$12l&&U)
        (make-i/o-port-error . g$6241$12l&&U)
        (make-i/o-invalid-position-error . g$6159$12l&&U)
        (make-i/o-filename-error . g$6174$12l&&U)
        (make-i/o-file-protection-error . g$6189$12l&&U)
        (make-i/o-file-is-read-only-error . g$6202$12l&&U)
        (make-i/o-file-does-not-exist-error . g$6228$12l&&U)
        (make-i/o-file-already-exists-error . g$6215$12l&&U)
        (make-i/o-error . g$6120$12l&&U)
        (make-i/o-encoding-error . g$6269$12l&&U)
        (make-i/o-decoding-error . g$6256$12l&&U)
        (make-custom-textual-output-port . g$13031$12l&&U)
        (make-custom-textual-input/output-port . g$13030$12l&&U)
        (make-custom-textual-input-port . g$13029$12l&&U)
        (make-custom-binary-output-port . g$13028$12l&&U)
        (make-custom-binary-input/output-port . g$13027$12l&&U)
        (make-custom-binary-input-port . g$13026$12l&&U)
        (lookahead-u8 . g$13024$12l&&U)
        (lookahead-char . g$13023$12l&&U)
        (i/o-write-error? . g$6147$12l&&U)
        (i/o-read-error? . g$6134$12l&&U)
        (i/o-port-error? . g$6243$12l&&U)
        (i/o-invalid-position-error? . g$6161$12l&&U)
        (i/o-error-position . g$6162$12l&&U)
        (i/o-filename-error? . g$6176$12l&&U)
        (i/o-file-protection-error? . g$6190$12l&&U)
        (i/o-file-is-read-only-error? . g$6203$12l&&U)
        (i/o-file-does-not-exist-error? . g$6229$12l&&U)
        (i/o-file-already-exists-error? . g$6216$12l&&U)
        (i/o-error? . g$6121$12l&&U)
        (i/o-error-port . g$6244$12l&&U)
        (i/o-error-filename . g$6177$12l&&U)
        (i/o-encoding-error? . g$6271$12l&&U)
        (i/o-encoding-error-char . g$6272$12l&&U)
        (i/o-decoding-error? . g$6257$12l&&U)
        (get-u8 . g$13022$12l&&U)
        (get-string-n! . g$13021$12l&&U)
        (get-string-n . g$13020$12l&&U)
        (get-string-all . g$13019$12l&&U)
        (get-line . g$13018$12l&&U)
        (get-datum . g$8090$12l&&U)
        (get-char . g$13017$12l&&U)
        (get-bytevector-some . g$13016$12l&&U)
        (get-bytevector-n! . g$13015$12l&&U)
        (get-bytevector-n . g$13014$12l&&U)
        (get-bytevector-all . g$13013$12l&&U)
        (flush-output-port . g$13012$12l&&U)
        (close-port . g$13011$12l&&U)
        (call-with-string-output-port . g$8095$12l&&U)
        (call-with-port . g$8096$12l&&U)
        (call-with-bytevector-output-port . g$13010$12l&&U)
        (bytevector->string . g$13009$12l&&U)
        (buffer-mode? . g$13008$12l&&U)
        (binary-port? . g$13007$12l&&U)
        (&i/o-encoding . g$12793$12l&&U)
        (&i/o-decoding . g$12792$12l&&U)
        (&i/o-port . g$12791$12l&&U)
        (&i/o-file-does-not-exist . g$12790$12l&&U)
        (&i/o-file-already-exists . g$12789$12l&&U)
        (&i/o-file-is-read-only . g$12788$12l&&U)
        (&i/o-file-protection . g$12787$12l&&U)
        (&i/o-filename . g$12786$12l&&U)
        (&i/o-invalid-position . g$12785$12l&&U)
        (&i/o-write . g$12784$12l&&U)
        (&i/o-read . g$12783$12l&&U)
        (&i/o . g$12782$12l&&U)
        (error-handling-mode . g$12755$12l&&U)
        (file-options . g$12754$12l&&U)
        (buffer-mode . g$12753$12l&&U)
        (eol-style . g$12752$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13192$12l&&U
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$8181$12l&&U)
        (enum-set=? . g$8188$12l&&U)
        (enum-set-universe . g$8182$12l&&U)
        (enum-set-union . g$8189$12l&&U)
        (enum-set-subset? . g$8187$12l&&U)
        (enum-set-projection . g$8193$12l&&U)
        (enum-set-member? . g$8186$12l&&U)
        (enum-set-intersection . g$8190$12l&&U)
        (enum-set-indexer . g$8183$12l&&U)
        (enum-set-difference . g$8191$12l&&U)
        (enum-set-constructor . g$8184$12l&&U)
        (enum-set-complement . g$8192$12l&&U)
        (enum-set->list . g$8185$12l&&U)
        (define-enumeration . g$12766$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13193$12l&&U
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6038$12l&&U)
        (warning? . g$5957$12l&&U)
        (violation? . g$5996$12l&&U)
        (undefined-violation? . g$6108$12l&&U)
        (syntax-violation? . g$6093$12l&&U)
        (syntax-violation-subform . g$6095$12l&&U)
        (syntax-violation-form . g$6094$12l&&U)
        (simple-conditions . g$12998$12l&&U)
        (serious-condition? . g$5970$12l&&U)
        (non-continuable-violation? . g$6052$12l&&U)
        (message-condition? . g$5943$12l&&U)
        (make-who-condition . g$6036$12l&&U)
        (make-warning . g$5956$12l&&U)
        (make-violation . g$5995$12l&&U)
        (make-undefined-violation . g$6107$12l&&U)
        (make-syntax-violation . g$6090$12l&&U)
        (make-serious-condition . g$5969$12l&&U)
        (make-non-continuable-violation . g$6051$12l&&U)
        (make-message-condition . g$5941$12l&&U)
        (make-lexical-violation . g$6077$12l&&U)
        (make-irritants-condition . g$6021$12l&&U)
        (make-implementation-restriction-violation . g$6064$12l&&U)
        (make-error . g$5982$12l&&U)
        (make-assertion-violation . g$6008$12l&&U)
        (lexical-violation? . g$6078$12l&&U)
        (irritants-condition? . g$6023$12l&&U)
        (implementation-restriction-violation? . g$6065$12l&&U)
        (error? . g$5983$12l&&U)
        (condition-who . g$6039$12l&&U)
        (condition-predicate . g$12997$12l&&U)
        (condition-message . g$5944$12l&&U)
        (condition-irritants . g$6024$12l&&U)
        (condition-accessor . g$12996$12l&&U)
        (condition . g$12995$12l&&U)
        (assertion-violation? . g$6009$12l&&U)
        (condition? . g$12994$12l&&U)
        (&non-continuable . g$12781$12l&&U)
        (&undefined . g$12780$12l&&U)
        (&syntax . g$12779$12l&&U)
        (&lexical . g$12778$12l&&U)
        (&implementation-restriction . g$12777$12l&&U)
        (&who . g$12776$12l&&U)
        (&irritants . g$12775$12l&&U)
        (&assertion . g$12774$12l&&U)
        (&violation . g$12773$12l&&U)
        (&error . g$12772$12l&&U)
        (&serious . g$12771$12l&&U)
        (&warning . g$12770$12l&&U)
        (&message . g$12769$12l&&U)
        (&condition . g$12768$12l&&U)
        (define-condition-type . g$12767$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13194$12l&&U
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$13101$12l&&U)
        (record-type-uid . g$13100$12l&&U)
        (record-type-sealed? . g$13099$12l&&U)
        (record-type-parent . g$13098$12l&&U)
        (record-type-opaque? . g$13097$12l&&U)
        (record-type-name . g$13096$12l&&U)
        (record-type-generative? . g$13095$12l&&U)
        (record-type-field-names . g$13094$12l&&U)
        (record-rtd . g$13093$12l&&U)
        (record-field-mutable? . g$13092$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13195$12l&&U
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$13108$12l&&U)
        (record-predicate . g$13107$12l&&U)
        (record-mutator . g$13106$12l&&U)
        (record-constructor . g$13105$12l&&U)
        (record-accessor . g$13104$12l&&U)
        (make-record-type-descriptor . g$13103$12l&&U)
        (make-record-constructor-descriptor . g$13102$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13196$12l&&U
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$12765$12l&&U)
        (parent-rtd . g$12764$12l&&U)
        (nongenerative . g$12763$12l&&U)
        (opaque . g$12762$12l&&U)
        (sealed . g$12761$12l&&U)
        (protocol . g$12760$12l&&U)
        (parent . g$12759$12l&&U)
        (immutable . g$12758$12l&&U)
        (mutable . g$12757$12l&&U)
        (fields . g$12756$12l&&U)
        (record-constructor-descriptor . g$12717$12l&&U)
        (record-type-descriptor . g$12716$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$18895$12l&&U
      'g$13197$12l&&U
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$9492$12l&&U)
        (&no-nans-rcd . g$6300$12l&&U)
        (&no-nans-rtd . g$6299$12l&&U)
        (&no-infinities-rcd . g$6287$12l&&U)
        (&no-infinities-rtd . g$6286$12l&&U)
        (&i/o-encoding-rcd . g$6274$12l&&U)
        (&i/o-encoding-rtd . g$6273$12l&&U)
        (&i/o-decoding-rcd . g$6259$12l&&U)
        (&i/o-decoding-rtd . g$6258$12l&&U)
        (&i/o-port-rcd . g$6246$12l&&U)
        (&i/o-port-rtd . g$6245$12l&&U)
        (&i/o-file-does-not-exist-rcd . g$6231$12l&&U)
        (&i/o-file-does-not-exist-rtd . g$6230$12l&&U)
        (&i/o-file-already-exists-rcd . g$6218$12l&&U)
        (&i/o-file-already-exists-rtd . g$6217$12l&&U)
        (&i/o-file-is-read-only-rcd . g$6205$12l&&U)
        (&i/o-file-is-read-only-rtd . g$6204$12l&&U)
        (&i/o-file-protection-rcd . g$6192$12l&&U)
        (&i/o-file-protection-rtd . g$6191$12l&&U)
        (&i/o-filename-rcd . g$6179$12l&&U)
        (&i/o-filename-rtd . g$6178$12l&&U)
        (&i/o-invalid-position-rcd . g$6164$12l&&U)
        (&i/o-invalid-position-rtd . g$6163$12l&&U)
        (&i/o-write-rcd . g$6149$12l&&U)
        (&i/o-write-rtd . g$6148$12l&&U)
        (&i/o-read-rcd . g$6136$12l&&U)
        (&i/o-read-rtd . g$6135$12l&&U)
        (&i/o-rcd . g$6123$12l&&U)
        (&i/o-rtd . g$6122$12l&&U)
        (&undefined-rcd . g$6110$12l&&U)
        (&undefined-rtd . g$6109$12l&&U)
        (&syntax-rcd . g$6097$12l&&U)
        (&syntax-rtd . g$6096$12l&&U)
        (&lexical-rcd . g$6080$12l&&U)
        (&lexical-rtd . g$6079$12l&&U)
        (&implementation-restriction-rcd . g$6067$12l&&U)
        (&implementation-restriction-rtd . g$6066$12l&&U)
        (&non-continuable-rcd . g$6054$12l&&U)
        (&non-continuable-rtd . g$6053$12l&&U)
        (&who-rcd . g$6041$12l&&U)
        (&who-rtd . g$6040$12l&&U)
        (&irritants-rcd . g$6026$12l&&U)
        (&irritants-rtd . g$6025$12l&&U)
        (&assertion-rcd . g$6011$12l&&U)
        (&assertion-rtd . g$6010$12l&&U)
        (&violation-rcd . g$5998$12l&&U)
        (&violation-rtd . g$5997$12l&&U)
        (&error-rcd . g$5985$12l&&U)
        (&error-rtd . g$5984$12l&&U)
        (&serious-rcd . g$5972$12l&&U)
        (&serious-rtd . g$5971$12l&&U)
        (&warning-rcd . g$5959$12l&&U)
        (&warning-rtd . g$5958$12l&&U)
        (&message-rcd . g$5946$12l&&U)
        (&message-rtd . g$5945$12l&&U)
        (&condition-rcd . g$5906$12l&&U)
        (&condition-rtd . g$5905$12l&&U)
        (library-letrec* . g$13160$12l&&U)
        (annotation-stripped . g$13159$12l&&U)
        (annotation-source . g$13158$12l&&U)
        (annotation-expression . g$13157$12l&&U)
        (annotation? . g$13156$12l&&U)
        (read-annotated . g$13155$12l&&U)
        (tanh . g$13154$12l&&U)
        (cosh . g$13153$12l&&U)
        (sinh . g$13152$12l&&U)
        (make-guid . g$13151$12l&&U)
        (unspecified? . g$13150$12l&&U)
        (make-list . g$5142$12l&&U)
        (last-pair . g$5141$12l&&U)
        (load-r5rs . g$13149$12l&&U)
        (license . g$13148$12l&&U)
        (stacktrace . g$13147$12l&&U)
        (ironscheme-build . g$12639$12l&&U)
        (define-clr-class-internal . g$13146$12l&&U)
        (clr-field-set!-internal . g$13145$12l&&U)
        (clr-field-get-internal . g$13144$12l&&U)
        (clr-cast-internal . g$13143$12l&&U)
        (clr-call-internal . g$13142$12l&&U)
        (clr-new-internal . g$13141$12l&&U)
        (clr-new-array-internal . g$13140$12l&&U)
        (clr-is-internal . g$13139$12l&&U)
        (clr-reference-internal . g$13138$12l&&U)
        (clr-using-internal . g$13137$12l&&U)
        (syntax-error . g$9612$12l&&U)
        (syntax-dispatch . g$9487$12l&&U)
        (compile-core . g$13136$12l&&U)
        (eval-core . g$13135$12l&&U)
        (remove-location . g$13134$12l&&U)
        (set-symbol-value! . g$13133$12l&&U)
        (symbol-value . g$13132$12l&&U)
        (symbol-bound? . g$13131$12l&&U)
        (ungensym . g$13130$12l&&U)
        (gensym . g$13129$12l&&U)
        (void . g$13128$12l&&U)
        (load-serialized-library . g$13127$12l&&U)
        (serialize-library . g$13126$12l&&U)
        (compile-system-libraries . g$12643$12l&&U)
        (compile->closure . g$12645$12l&&U)
        (compile . g$12644$12l&&U)
        (load . g$12638$12l&&U)
        (string-normalize . g$13125$12l&&U)
        (interaction-environment . g$9622$12l&&U)
        (char-ready? . g$13124$12l&&U)
        (string-upcase . g$13123$12l&&U)
        (string-titlecase . g$13122$12l&&U)
        (string-normalize-nfkd . g$6383$12l&&U)
        (string-normalize-nfkc . g$6382$12l&&U)
        (string-normalize-nfd . g$6381$12l&&U)
        (string-normalize-nfc . g$6380$12l&&U)
        (string-foldcase . g$13121$12l&&U)
        (string-downcase . g$13120$12l&&U)
        (string-ci>? . g$6367$12l&&U)
        (string-ci>=? . g$6369$12l&&U)
        (string-ci=? . g$6365$12l&&U)
        (string-ci<? . g$6366$12l&&U)
        (string-ci<=? . g$6368$12l&&U)
        (char-whitespace? . g$13119$12l&&U)
        (char-upper-case? . g$13118$12l&&U)
        (char-title-case? . g$13117$12l&&U)
        (char-numeric? . g$13116$12l&&U)
        (char-lower-case? . g$13115$12l&&U)
        (char-general-category . g$13114$12l&&U)
        (char-upcase . g$13113$12l&&U)
        (char-titlecase . g$13112$12l&&U)
        (char-foldcase . g$13111$12l&&U)
        (char-downcase . g$13110$12l&&U)
        (char-ci>? . g$6377$12l&&U)
        (char-ci>=? . g$6379$12l&&U)
        (char-ci=? . g$6375$12l&&U)
        (char-ci<? . g$6376$12l&&U)
        (char-ci<=? . g$6378$12l&&U)
        (char-alphabetic? . g$13109$12l&&U)
        (variable-transformer-procedure . g$9299$12l&&U)
        (variable-transformer? . g$9298$12l&&U)
        (make-variable-transformer . g$9296$12l&&U)
        (identifier? . g$9616$12l&&U)
        (generate-temporaries . g$9605$12l&&U)
        (free-identifier=? . g$9606$12l&&U)
        (syntax->datum . g$9618$12l&&U)
        (datum->syntax . g$9617$12l&&U)
        (bound-identifier=? . g$9607$12l&&U)
        (record-type-descriptor? . g$13108$12l&&U)
        (record-predicate . g$13107$12l&&U)
        (record-mutator . g$13106$12l&&U)
        (record-constructor . g$13105$12l&&U)
        (record-accessor . g$13104$12l&&U)
        (make-record-type-descriptor . g$13103$12l&&U)
        (make-record-constructor-descriptor . g$13102$12l&&U)
        (record? . g$13101$12l&&U)
        (record-type-uid . g$13100$12l&&U)
        (record-type-sealed? . g$13099$12l&&U)
        (record-type-parent . g$13098$12l&&U)
        (record-type-opaque? . g$13097$12l&&U)
        (record-type-name . g$13096$12l&&U)
        (record-type-generative? . g$13095$12l&&U)
        (record-type-field-names . g$13094$12l&&U)
        (record-rtd . g$13093$12l&&U)
        (record-field-mutable? . g$13092$12l&&U)
        (delete-file . g$5774$12l&&U)
        (file-exists? . g$5773$12l&&U)
        (vector-sort! . g$13091$12l&&U)
        (vector-sort . g$13090$12l&&U)
        (list-sort . g$6336$12l&&U)
        (symbol-hash . g$13089$12l&&U)
        (string-ci-hash . g$13088$12l&&U)
        (string-hash . g$13087$12l&&U)
        (equal-hash . g$13086$12l&&U)
        (hashtable-equivalence-function . g$13085$12l&&U)
        (make-hashtable . g$13084$12l&&U)
        (hashtable-hash-function . g$13083$12l&&U)
        (make-eqv-hashtable . g$5741$12l&&U)
        (make-eq-hashtable . g$5740$12l&&U)
        (hashtable? . g$13082$12l&&U)
        (hashtable-update! . g$5747$12l&&U)
        (hashtable-size . g$5742$12l&&U)
        (hashtable-set! . g$5744$12l&&U)
        (hashtable-ref . g$5743$12l&&U)
        (hashtable-mutable? . g$13081$12l&&U)
        (hashtable-keys . g$13080$12l&&U)
        (hashtable-entries . g$13079$12l&&U)
        (hashtable-delete! . g$5745$12l&&U)
        (hashtable-copy . g$13078$12l&&U)
        (hashtable-contains? . g$5746$12l&&U)
        (hashtable-clear! . g$5748$12l&&U)
        (call-with-output-file . g$8120$12l&&U)
        (call-with-input-file . g$8119$12l&&U)
        (write-char . g$8111$12l&&U)
        (write . g$13077$12l&&U)
        (with-output-to-file . g$8118$12l&&U)
        (with-input-from-file . g$8117$12l&&U)
        (read-char . g$8110$12l&&U)
        (read . g$13076$12l&&U)
        (peek-char . g$8109$12l&&U)
        (open-output-file . g$13075$12l&&U)
        (open-input-file . g$13074$12l&&U)
        (newline . g$8121$12l&&U)
        (display . g$13073$12l&&U)
        (close-output-port . g$13072$12l&&U)
        (close-input-port . g$13071$12l&&U)
        (eof-object? . g$13070$12l&&U)
        (eof-object . g$13069$12l&&U)
        (current-error-port . g$13068$12l&&U)
        (current-output-port . g$13067$12l&&U)
        (current-input-port . g$13066$12l&&U)
        (output-port? . g$13065$12l&&U)
        (input-port? . g$13064$12l&&U)
        (utf-8-codec . g$13063$12l&&U)
        (utf-16-codec . g$13062$12l&&U)
        (transcoder-error-handling-mode . g$13061$12l&&U)
        (transcoder-eol-style . g$13060$12l&&U)
        (transcoder-codec . g$13059$12l&&U)
        (transcoded-port . g$13058$12l&&U)
        (textual-port? . g$13057$12l&&U)
        (string->bytevector . g$13056$12l&&U)
        (standard-output-port . g$13055$12l&&U)
        (standard-input-port . g$13054$12l&&U)
        (standard-error-port . g$13053$12l&&U)
        (set-port-position! . g$13052$12l&&U)
        (put-u8 . g$13051$12l&&U)
        (put-string . g$13050$12l&&U)
        (put-datum . g$8089$12l&&U)
        (put-char . g$13049$12l&&U)
        (put-bytevector . g$13048$12l&&U)
        (port? . g$8094$12l&&U)
        (port-transcoder . g$13047$12l&&U)
        (port-position . g$13046$12l&&U)
        (port-has-set-port-position!? . g$13045$12l&&U)
        (port-has-port-position? . g$13044$12l&&U)
        (port-eof? . g$13043$12l&&U)
        (output-port-buffer-mode . g$13042$12l&&U)
        (open-string-output-port . g$8093$12l&&U)
        (open-string-input-port . g$13041$12l&&U)
        (open-file-output-port . g$13040$12l&&U)
        (open-file-input/output-port . g$13039$12l&&U)
        (open-file-input-port . g$13038$12l&&U)
        (open-bytevector-output-port . g$13037$12l&&U)
        (open-bytevector-input-port . g$13036$12l&&U)
        (native-transcoder . g$13035$12l&&U)
        (native-eol-style . g$13034$12l&&U)
        (make-transcoder . g$13033$12l&&U)
        (latin-1-codec . g$13032$12l&&U)
        (make-i/o-write-error . g$6146$12l&&U)
        (make-i/o-read-error . g$6133$12l&&U)
        (make-i/o-port-error . g$6241$12l&&U)
        (make-i/o-invalid-position-error . g$6159$12l&&U)
        (make-i/o-filename-error . g$6174$12l&&U)
        (make-i/o-file-protection-error . g$6189$12l&&U)
        (make-i/o-file-is-read-only-error . g$6202$12l&&U)
        (make-i/o-file-does-not-exist-error . g$6228$12l&&U)
        (make-i/o-file-already-exists-error . g$6215$12l&&U)
        (make-i/o-error . g$6120$12l&&U)
        (make-i/o-encoding-error . g$6269$12l&&U)
        (make-i/o-decoding-error . g$6256$12l&&U)
        (make-custom-textual-output-port . g$13031$12l&&U)
        (make-custom-textual-input/output-port . g$13030$12l&&U)
        (make-custom-textual-input-port . g$13029$12l&&U)
        (make-custom-binary-output-port . g$13028$12l&&U)
        (make-custom-binary-input/output-port . g$13027$12l&&U)
        (make-custom-binary-input-port . g$13026$12l&&U)
        (make-bytevector . g$13025$12l&&U)
        (lookahead-u8 . g$13024$12l&&U)
        (lookahead-char . g$13023$12l&&U)
        (i/o-write-error? . g$6147$12l&&U)
        (i/o-read-error? . g$6134$12l&&U)
        (i/o-port-error? . g$6243$12l&&U)
        (i/o-invalid-position-error? . g$6161$12l&&U)
        (i/o-error-position . g$6162$12l&&U)
        (i/o-filename-error? . g$6176$12l&&U)
        (i/o-file-protection-error? . g$6190$12l&&U)
        (i/o-file-is-read-only-error? . g$6203$12l&&U)
        (i/o-file-does-not-exist-error? . g$6229$12l&&U)
        (i/o-file-already-exists-error? . g$6216$12l&&U)
        (i/o-error? . g$6121$12l&&U)
        (i/o-error-port . g$6244$12l&&U)
        (i/o-error-filename . g$6177$12l&&U)
        (i/o-encoding-error? . g$6271$12l&&U)
        (i/o-encoding-error-char . g$6272$12l&&U)
        (i/o-decoding-error? . g$6257$12l&&U)
        (get-u8 . g$13022$12l&&U)
        (get-string-n! . g$13021$12l&&U)
        (get-string-n . g$13020$12l&&U)
        (get-string-all . g$13019$12l&&U)
        (get-line . g$13018$12l&&U)
        (get-datum . g$8090$12l&&U)
        (get-char . g$13017$12l&&U)
        (get-bytevector-some . g$13016$12l&&U)
        (get-bytevector-n! . g$13015$12l&&U)
        (get-bytevector-n . g$13014$12l&&U)
        (get-bytevector-all . g$13013$12l&&U)
        (flush-output-port . g$13012$12l&&U)
        (close-port . g$13011$12l&&U)
        (call-with-string-output-port . g$8095$12l&&U)
        (call-with-port . g$8096$12l&&U)
        (call-with-bytevector-output-port . g$13010$12l&&U)
        (bytevector->string . g$13009$12l&&U)
        (buffer-mode? . g$13008$12l&&U)
        (binary-port? . g$13007$12l&&U)
        (scheme-report-environment . g$9595$12l&&U)
        (quotient . g$6315$12l&&U)
        (null-environment . g$9594$12l&&U)
        (remainder . g$6316$12l&&U)
        (modulo . g$6317$12l&&U)
        (inexact->exact . g$6312$12l&&U)
        (force . g$6319$12l&&U)
        (exact->inexact . g$6313$12l&&U)
        (exit . g$13006$12l&&U)
        (command-line . g$12634$12l&&U)
        (string-fill! . g$13005$12l&&U)
        (string-set! . g$13004$12l&&U)
        (set-cdr! . g$13003$12l&&U)
        (set-car! . g$13002$12l&&U)
        (remove . g$5164$12l&&U)
        (remv . g$5165$12l&&U)
        (remp . g$5145$12l&&U)
        (remq . g$5166$12l&&U)
        (partition . g$5144$12l&&U)
        (memv . g$5152$12l&&U)
        (memq . g$5151$12l&&U)
        (memp . g$5154$12l&&U)
        (member . g$5153$12l&&U)
        (exists . g$5158$12l&&U)
        (for-all . g$5157$12l&&U)
        (fold-right . g$5163$12l&&U)
        (fold-left . g$5162$12l&&U)
        (find . g$5143$12l&&U)
        (filter . g$5146$12l&&U)
        (cons* . g$5161$12l&&U)
        (assv . g$5148$12l&&U)
        (assq . g$5147$12l&&U)
        (assp . g$5150$12l&&U)
        (assoc . g$5149$12l&&U)
        (with-exception-handler . g$13001$12l&&U)
        (raise-continuable . g$13000$12l&&U)
        (raise . g$12999$12l&&U)
        (eval . g$9597$12l&&U)
        (environment . g$9593$12l&&U)
        (make-enumeration . g$8181$12l&&U)
        (enum-set=? . g$8188$12l&&U)
        (enum-set-universe . g$8182$12l&&U)
        (enum-set-union . g$8189$12l&&U)
        (enum-set-subset? . g$8187$12l&&U)
        (enum-set-projection . g$8193$12l&&U)
        (enum-set-member? . g$8186$12l&&U)
        (enum-set-intersection . g$8190$12l&&U)
        (enum-set-indexer . g$8183$12l&&U)
        (enum-set-difference . g$8191$12l&&U)
        (enum-set-constructor . g$8184$12l&&U)
        (enum-set-complement . g$8192$12l&&U)
        (enum-set->list . g$8185$12l&&U)
        (who-condition? . g$6038$12l&&U)
        (warning? . g$5957$12l&&U)
        (violation? . g$5996$12l&&U)
        (undefined-violation? . g$6108$12l&&U)
        (syntax-violation? . g$6093$12l&&U)
        (syntax-violation-subform . g$6095$12l&&U)
        (syntax-violation-form . g$6094$12l&&U)
        (syntax-violation . g$9615$12l&&U)
        (simple-conditions . g$12998$12l&&U)
        (serious-condition? . g$5970$12l&&U)
        (non-continuable-violation? . g$6052$12l&&U)
        (message-condition? . g$5943$12l&&U)
        (make-who-condition . g$6036$12l&&U)
        (make-warning . g$5956$12l&&U)
        (make-violation . g$5995$12l&&U)
        (make-undefined-violation . g$6107$12l&&U)
        (make-syntax-violation . g$6090$12l&&U)
        (make-serious-condition . g$5969$12l&&U)
        (make-non-continuable-violation . g$6051$12l&&U)
        (make-message-condition . g$5941$12l&&U)
        (make-lexical-violation . g$6077$12l&&U)
        (make-irritants-condition . g$6021$12l&&U)
        (make-implementation-restriction-violation . g$6064$12l&&U)
        (make-error . g$5982$12l&&U)
        (make-assertion-violation . g$6008$12l&&U)
        (lexical-violation? . g$6078$12l&&U)
        (irritants-condition? . g$6023$12l&&U)
        (implementation-restriction-violation? . g$6065$12l&&U)
        (error? . g$5983$12l&&U)
        (condition-who . g$6039$12l&&U)
        (condition-predicate . g$12997$12l&&U)
        (condition-message . g$5944$12l&&U)
        (condition-irritants . g$6024$12l&&U)
        (condition-accessor . g$12996$12l&&U)
        (condition . g$12995$12l&&U)
        (assertion-violation? . g$6009$12l&&U)
        (condition? . g$12994$12l&&U)
        (utf32->string . g$12993$12l&&U)
        (utf16->string . g$12992$12l&&U)
        (utf8->string . g$12991$12l&&U)
        (uint-list->bytevector . g$12990$12l&&U)
        (u8-list->bytevector . g$12989$12l&&U)
        (string->utf8 . g$12988$12l&&U)
        (string->utf32 . g$12987$12l&&U)
        (string->utf16 . g$12986$12l&&U)
        (sint-list->bytevector . g$12985$12l&&U)
        (native-endianness . g$5780$12l&&U)
        (bytevector? . g$5469$12l&&U)
        (bytevector=? . g$12984$12l&&U)
        (bytevector-uint-set! . g$12983$12l&&U)
        (bytevector-uint-ref . g$12982$12l&&U)
        (bytevector-u8-set! . g$12981$12l&&U)
        (bytevector-u8-ref . g$12980$12l&&U)
        (bytevector-u64-set! . g$5801$12l&&U)
        (bytevector-u64-ref . g$5797$12l&&U)
        (bytevector-u64-native-set! . g$5803$12l&&U)
        (bytevector-u64-native-ref . g$5799$12l&&U)
        (bytevector-u32-set! . g$5793$12l&&U)
        (bytevector-u32-ref . g$5789$12l&&U)
        (bytevector-u32-native-set! . g$5795$12l&&U)
        (bytevector-u32-native-ref . g$5791$12l&&U)
        (bytevector-u16-set! . g$5785$12l&&U)
        (bytevector-u16-ref . g$5781$12l&&U)
        (bytevector-u16-native-set! . g$5787$12l&&U)
        (bytevector-u16-native-ref . g$5783$12l&&U)
        (bytevector-sint-set! . g$12979$12l&&U)
        (bytevector-sint-ref . g$12978$12l&&U)
        (bytevector-s8-set! . g$12977$12l&&U)
        (bytevector-s8-ref . g$12976$12l&&U)
        (bytevector-s64-set! . g$5802$12l&&U)
        (bytevector-s64-ref . g$5798$12l&&U)
        (bytevector-s64-native-set! . g$5804$12l&&U)
        (bytevector-s64-native-ref . g$5800$12l&&U)
        (bytevector-s32-set! . g$5794$12l&&U)
        (bytevector-s32-ref . g$5790$12l&&U)
        (bytevector-s32-native-set! . g$5796$12l&&U)
        (bytevector-s32-native-ref . g$5792$12l&&U)
        (bytevector-s16-set! . g$5786$12l&&U)
        (bytevector-s16-ref . g$5782$12l&&U)
        (bytevector-s16-native-set! . g$5788$12l&&U)
        (bytevector-s16-native-ref . g$5784$12l&&U)
        (bytevector-length . g$12975$12l&&U)
        (bytevector-ieee-single-set! . g$12974$12l&&U)
        (bytevector-ieee-single-ref . g$12973$12l&&U)
        (bytevector-ieee-single-native-set! . g$5807$12l&&U)
        (bytevector-ieee-single-native-ref . g$5805$12l&&U)
        (bytevector-ieee-double-set! . g$12972$12l&&U)
        (bytevector-ieee-double-ref . g$12971$12l&&U)
        (bytevector-ieee-double-native-set! . g$5808$12l&&U)
        (bytevector-ieee-double-native-ref . g$5806$12l&&U)
        (bytevector-fill! . g$12970$12l&&U)
        (bytevector-copy! . g$12969$12l&&U)
        (bytevector-copy . g$12968$12l&&U)
        (bytevector->uint-list . g$12967$12l&&U)
        (bytevector->u8-list . g$12966$12l&&U)
        (bytevector->sint-list . g$12965$12l&&U)
        (no-nans-violation? . g$6298$12l&&U)
        (no-infinities-violation? . g$6285$12l&&U)
        (make-no-nans-violation . g$6297$12l&&U)
        (make-no-infinities-violation . g$6284$12l&&U)
        (real->flonum . g$12964$12l&&U)
        (flzero? . g$7535$12l&&U)
        (fltruncate . g$7530$12l&&U)
        (fltan . g$7516$12l&&U)
        (flsqrt . g$7521$12l&&U)
        (flsin . g$7514$12l&&U)
        (flround . g$7531$12l&&U)
        (flpositive? . g$7533$12l&&U)
        (flonum? . g$5474$12l&&U)
        (flodd? . g$7537$12l&&U)
        (flnumerator . g$12963$12l&&U)
        (flnegative? . g$7534$12l&&U)
        (flnan? . g$7513$12l&&U)
        (flmod0 . g$7498$12l&&U)
        (flmod . g$7497$12l&&U)
        (flmin . g$7539$12l&&U)
        (flmax . g$7538$12l&&U)
        (fllog . g$7520$12l&&U)
        (flinteger? . g$7506$12l&&U)
        (flinfinite? . g$7512$12l&&U)
        (flfloor . g$7529$12l&&U)
        (flfinite? . g$7507$12l&&U)
        (flexpt . g$7523$12l&&U)
        (flexp . g$7522$12l&&U)
        (fleven? . g$7536$12l&&U)
        (fldiv0-and-mod0 . g$7505$12l&&U)
        (fldiv0 . g$7492$12l&&U)
        (fldiv-and-mod . g$7499$12l&&U)
        (fldiv . g$7504$12l&&U)
        (fldenominator . g$12962$12l&&U)
        (flcos . g$7515$12l&&U)
        (flceiling . g$7524$12l&&U)
        (flatan . g$7519$12l&&U)
        (flasin . g$7517$12l&&U)
        (flacos . g$7518$12l&&U)
        (flabs . g$7532$12l&&U)
        (fl>? . g$7486$12l&&U)
        (fl>=? . g$7487$12l&&U)
        (fl=? . g$7483$12l&&U)
        (fl<? . g$7484$12l&&U)
        (fl<=? . g$7485$12l&&U)
        (fl/ . g$7482$12l&&U)
        (fl- . g$7481$12l&&U)
        (fl+ . g$7479$12l&&U)
        (fl* . g$7480$12l&&U)
        (fixnum->flonum . g$12961$12l&&U)
        (fxzero? . g$6579$12l&&U)
        (fxxor . g$6542$12l&&U)
        (fxrotate-bit-field . g$6617$12l&&U)
        (fxreverse-bit-field . g$6618$12l&&U)
        (fxpositive? . g$6569$12l&&U)
        (fxodd? . g$6589$12l&&U)
        (fxnot . g$6523$12l&&U)
        (fxnegative? . g$6574$12l&&U)
        (fxmod0 . g$6553$12l&&U)
        (fxmod . g$6552$12l&&U)
        (fxmin . g$6591$12l&&U)
        (fxmax . g$6590$12l&&U)
        (fxlength . g$6520$12l&&U)
        (fxior . g$6541$12l&&U)
        (fxif . g$6599$12l&&U)
        (fxfirst-bit-set . g$6521$12l&&U)
        (fxeven? . g$6584$12l&&U)
        (fxdiv0-and-mod0 . g$6564$12l&&U)
        (fxdiv0 . g$6559$12l&&U)
        (fxdiv-and-mod . g$6554$12l&&U)
        (fxdiv . g$6547$12l&&U)
        (fxcopy-bit-field . g$6614$12l&&U)
        (fxcopy-bit . g$6604$12l&&U)
        (fxbit-set? . g$6522$12l&&U)
        (fxbit-field . g$6609$12l&&U)
        (fxbit-count . g$6515$12l&&U)
        (fxarithmetic-shift-right . g$6616$12l&&U)
        (fxarithmetic-shift-left . g$6615$12l&&U)
        (fxarithmetic-shift . g$6510$12l&&U)
        (fxand . g$6540$12l&&U)
        (fx>? . g$6532$12l&&U)
        (fx>=? . g$6533$12l&&U)
        (fx=? . g$6529$12l&&U)
        (fx<? . g$6530$12l&&U)
        (fx<=? . g$6531$12l&&U)
        (fx-/carry . g$6593$12l&&U)
        (fx- . g$6504$12l&&U)
        (fx+/carry . g$6594$12l&&U)
        (fx+ . g$6502$12l&&U)
        (fx*/carry . g$6592$12l&&U)
        (fx* . g$6503$12l&&U)
        (greatest-fixnum . g$6473$12l&&U)
        (least-fixnum . g$6474$12l&&U)
        (fixnum-width . g$5475$12l&&U)
        (fixnum? . g$5473$12l&&U)
        (bitwise-rotate-bit-field . g$6447$12l&&U)
        (bitwise-reverse-bit-field . g$12960$12l&&U)
        (bitwise-length . g$12959$12l&&U)
        (bitwise-if . g$6441$12l&&U)
        (bitwise-first-bit-set . g$12958$12l&&U)
        (bitwise-copy-bit-field . g$6444$12l&&U)
        (bitwise-copy-bit . g$6442$12l&&U)
        (bitwise-bit-set? . g$12957$12l&&U)
        (bitwise-bit-field . g$6443$12l&&U)
        (bitwise-bit-count . g$12956$12l&&U)
        (bitwise-xor . g$12955$12l&&U)
        (bitwise-ior . g$12954$12l&&U)
        (bitwise-and . g$12953$12l&&U)
        (bitwise-not . g$12952$12l&&U)
        (bitwise-arithmetic-shift-right . g$6446$12l&&U)
        (bitwise-arithmetic-shift-left . g$6445$12l&&U)
        (bitwise-arithmetic-shift . g$12951$12l&&U)
        (zero? . g$5517$12l&&U)
        (vector? . g$5468$12l&&U)
        (vector-set! . g$5483$12l&&U)
        (vector-ref . g$5482$12l&&U)
        (vector-map . g$5549$12l&&U)
        (vector-length . g$12950$12l&&U)
        (vector-for-each . g$5550$12l&&U)
        (vector-fill! . g$5484$12l&&U)
        (vector->list . g$12949$12l&&U)
        (vector . g$12948$12l&&U)
        (values . g$12947$12l&&U)
        (truncate . g$12946$12l&&U)
        (tan . g$12945$12l&&U)
        (symbol? . g$5470$12l&&U)
        (symbol=? . g$5534$12l&&U)
        (symbol->string . g$12944$12l&&U)
        (substring . g$12943$12l&&U)
        (string? . g$12942$12l&&U)
        (string>? . g$5531$12l&&U)
        (string>=? . g$5533$12l&&U)
        (string=? . g$5529$12l&&U)
        (string<? . g$5530$12l&&U)
        (string<=? . g$5532$12l&&U)
        (string-ref . g$12941$12l&&U)
        (string-length . g$12940$12l&&U)
        (string-for-each . g$5551$12l&&U)
        (string-copy . g$12939$12l&&U)
        (string-append . g$12938$12l&&U)
        (string->symbol . g$12937$12l&&U)
        (string->number . g$12936$12l&&U)
        (string->list . g$12935$12l&&U)
        (string . g$12934$12l&&U)
        (sqrt . g$12933$12l&&U)
        (sin . g$12932$12l&&U)
        (round . g$12931$12l&&U)
        (reverse . g$5486$12l&&U)
        (real? . g$12930$12l&&U)
        (real-valued? . g$12929$12l&&U)
        (real-part . g$12928$12l&&U)
        (rationalize . g$5546$12l&&U)
        (rational? . g$12927$12l&&U)
        (rational-valued? . g$12926$12l&&U)
        (procedure? . g$5472$12l&&U)
        (positive? . g$5515$12l&&U)
        (pair? . g$12925$12l&&U)
        (odd? . g$5519$12l&&U)
        (numerator . g$12924$12l&&U)
        (number? . g$12923$12l&&U)
        (number->string . g$12922$12l&&U)
        (null? . g$12921$12l&&U)
        (not . g$12920$12l&&U)
        (negative? . g$5516$12l&&U)
        (nan? . g$12919$12l&&U)
        (min . g$5521$12l&&U)
        (max . g$5520$12l&&U)
        (map . g$5159$12l&&U)
        (make-vector . g$12918$12l&&U)
        (make-string . g$12917$12l&&U)
        (make-rectangular . g$12916$12l&&U)
        (make-polar . g$12915$12l&&U)
        (magnitude . g$12914$12l&&U)
        (log . g$12913$12l&&U)
        (list? . g$12912$12l&&U)
        (list-tail . g$5139$12l&&U)
        (list-ref . g$5140$12l&&U)
        (list->vector . g$5480$12l&&U)
        (list->string . g$5481$12l&&U)
        (list . g$12911$12l&&U)
        (length . g$12910$12l&&U)
        (lcm . g$5523$12l&&U)
        (integer? . g$12909$12l&&U)
        (integer-valued? . g$12908$12l&&U)
        (integer->char . g$12907$12l&&U)
        (infinite? . g$12906$12l&&U)
        (inexact? . g$12905$12l&&U)
        (inexact . g$12904$12l&&U)
        (imag-part . g$12903$12l&&U)
        (gcd . g$5522$12l&&U)
        (for-each . g$5160$12l&&U)
        (floor . g$12902$12l&&U)
        (finite? . g$12901$12l&&U)
        (expt . g$12900$12l&&U)
        (exp . g$12899$12l&&U)
        (exact? . g$12898$12l&&U)
        (exact-integer-sqrt . g$12897$12l&&U)
        (exact . g$12896$12l&&U)
        (even? . g$5518$12l&&U)
        (error . g$12895$12l&&U)
        (eqv? . g$12894$12l&&U)
        (equal? . g$12893$12l&&U)
        (eq? . g$12892$12l&&U)
        (dynamic-wind . g$12891$12l&&U)
        (div0-and-mod0 . g$5479$12l&&U)
        (mod0 . g$5477$12l&&U)
        (div0 . g$12890$12l&&U)
        (div-and-mod . g$5478$12l&&U)
        (mod . g$5476$12l&&U)
        (div . g$12889$12l&&U)
        (denominator . g$12888$12l&&U)
        (cos . g$12887$12l&&U)
        (cons . g$12886$12l&&U)
        (complex? . g$12885$12l&&U)
        (char? . g$5467$12l&&U)
        (char>? . g$5543$12l&&U)
        (char>=? . g$5545$12l&&U)
        (char=? . g$5541$12l&&U)
        (char<? . g$5542$12l&&U)
        (char<=? . g$5544$12l&&U)
        (char->integer . g$12884$12l&&U)
        (ceiling . g$12883$12l&&U)
        (call-with-values . g$12882$12l&&U)
        (call/cc . g$12881$12l&&U)
        (call-with-current-continuation . g$12880$12l&&U)
        (cddddr . g$5514$12l&&U)
        (cdddar . g$5513$12l&&U)
        (cddadr . g$5512$12l&&U)
        (cddaar . g$5511$12l&&U)
        (cdaddr . g$5510$12l&&U)
        (cdadar . g$5509$12l&&U)
        (cdaadr . g$5508$12l&&U)
        (cdaaar . g$5507$12l&&U)
        (cadddr . g$5506$12l&&U)
        (caddar . g$5505$12l&&U)
        (cadadr . g$5504$12l&&U)
        (cadaar . g$5503$12l&&U)
        (caaddr . g$5502$12l&&U)
        (caadar . g$5501$12l&&U)
        (caaadr . g$5500$12l&&U)
        (caaaar . g$5499$12l&&U)
        (cdddr . g$5498$12l&&U)
        (cddar . g$5497$12l&&U)
        (cdadr . g$5496$12l&&U)
        (cdaar . g$5495$12l&&U)
        (caddr . g$5494$12l&&U)
        (cadar . g$5493$12l&&U)
        (caadr . g$5492$12l&&U)
        (caaar . g$5491$12l&&U)
        (cddr . g$5490$12l&&U)
        (cdar . g$5489$12l&&U)
        (cadr . g$5488$12l&&U)
        (caar . g$5487$12l&&U)
        (cdr . g$12879$12l&&U)
        (car . g$12878$12l&&U)
        (boolean? . g$5471$12l&&U)
        (boolean=? . g$5535$12l&&U)
        (atan . g$12877$12l&&U)
        (assertion-violation . g$12876$12l&&U)
        (asin . g$12875$12l&&U)
        (apply . g$12874$12l&&U)
        (append . g$12873$12l&&U)
        (angle . g$12872$12l&&U)
        (acos . g$12871$12l&&U)
        (abs . g$12870$12l&&U)
        (/ . g$12869$12l&&U)
        (* . g$12868$12l&&U)
        (- . g$12867$12l&&U)
        (+ . g$12866$12l&&U)
        (>= . g$12865$12l&&U)
        (> . g$12864$12l&&U)
        (= . g$12863$12l&&U)
        (<= . g$12862$12l&&U)
        (< . g$12861$12l&&U)
        ($fl>=? . g$12860$12l&&U)
        ($fl>? . g$12859$12l&&U)
        ($fl<=? . g$12858$12l&&U)
        ($fl<? . g$12857$12l&&U)
        ($fl- . g$12856$12l&&U)
        ($fl/ . g$12855$12l&&U)
        ($fl* . g$12854$12l&&U)
        ($fl+ . g$12853$12l&&U)
        ($fl=? . g$12852$12l&&U)
        ($try . g$12851$12l&&U)
        ($fxarithmetic-shift-right . g$12850$12l&&U)
        ($fxarithmetic-shift-left . g$12849$12l&&U)
        ($$fx- . g$12848$12l&&U)
        ($$fx* . g$12847$12l&&U)
        ($$fx+ . g$12846$12l&&U)
        ($fxnot . g$12845$12l&&U)
        ($fxxor . g$12844$12l&&U)
        ($fxior . g$12843$12l&&U)
        ($fxand . g$12842$12l&&U)
        ($fx>=? . g$12841$12l&&U)
        ($fx>? . g$12840$12l&&U)
        ($fx<=? . g$12839$12l&&U)
        ($fx<? . g$12838$12l&&U)
        ($fx- . g$12837$12l&&U)
        ($fxmod0 . g$12836$12l&&U)
        ($fxdiv0 . g$12835$12l&&U)
        ($fx* . g$12834$12l&&U)
        ($fx+ . g$12833$12l&&U)
        ($fx=? . g$12832$12l&&U)
        ($vector-set! . g$12831$12l&&U)
        ($vector-ref . g$12830$12l&&U)
        ($cdr . g$12829$12l&&U)
        ($car . g$12828$12l&&U)
        (make-record-printer . g$12827$12l&&U)
        (eqv-hash . g$12826$12l&&U)
        (reverse! . g$12825$12l&&U)
        (deserialize-port . g$12824$12l&&U)
        (serialize-port . g$12823$12l&&U)
        (enum-set? . g$8158$12l&&U)
        (make-promise . g$6318$12l&&U)
        (load/unload . g$12637$12l&&U)
        (load/args . g$12636$12l&&U)
        (printf . g$8267$12l&&U)
        (fprintf . g$8268$12l&&U)
        (format . g$8269$12l&&U)
        (procedure-form . g$12822$12l&&U)
        (procedure-environment . g$12821$12l&&U)
        (procedure-name . g$12820$12l&&U)
        (procedure-arity . g$12819$12l&&U)
        (gc-collect . g$12818$12l&&U)
        (typeof . g$12817$12l&&U)
        (clr-type? . g$12816$12l&&U)
        (get-clr-type . g$12815$12l&&U)
        (get-command-line . g$12814$12l&&U)
        (vector-append . g$12813$12l&&U)
        (vector-filter . g$12812$12l&&U)
        (vector-reverse! . g$12811$12l&&U)
        (vector-contains? . g$12810$12l&&U)
        (vector-index-of . g$12809$12l&&U)
        (vector-copy . g$12808$12l&&U)
        (vector-binary-search . g$12807$12l&&U)
        (string-ci-compare . g$12806$12l&&U)
        (string-compare . g$12805$12l&&U)
        (string-format . g$12804$12l&&U)
        (trace-printer . g$12633$12l&&U)
        (make-traced-procedure . g$12803$12l&&U)
        (make-traced-macro . g$8289$12l&&U)
        (assertion-error . g$9611$12l&&U)
        (time-it . g$12802$12l&&U)
        (make-parameter . g$8296$12l&&U)
        (library-locator . g$12801$12l&&U)
        (get-library-paths . g$12800$12l&&U)
        (open-tcp-input/output-port . g$12799$12l&&U)
        (hashtable-for-each . g$12798$12l&&U)
        (hashtable-map . g$12797$12l&&U)
        (environment-bindings . g$9589$12l&&U)
        (environment-symbols . g$9592$12l&&U)
        (interaction-environment-symbols . g$9588$12l&&U)
        (optimization-level . g$12796$12l&&U)
        (library-path . g$8918$12l&&U)
        (make-compile-time-value . g$9297$12l&&U)
        (expand->core . g$9598$12l&&U)
        (expand . g$9596$12l&&U)
        (syntax-transpose . g$9535$12l&&U)
        (convert->cps . g$8615$12l&&U)
        (installed-libraries . g$8939$12l&&U)
        (uninstall-library . g$8930$12l&&U)
        (pretty-gensyms . g$8379$12l&&U)
        (pretty-width . g$8376$12l&&U)
        (pretty-print . g$8381$12l&&U)
        (&no-nans . g$12795$12l&&U)
        (&no-infinities . g$12794$12l&&U)
        (&i/o-encoding . g$12793$12l&&U)
        (&i/o-decoding . g$12792$12l&&U)
        (&i/o-port . g$12791$12l&&U)
        (&i/o-file-does-not-exist . g$12790$12l&&U)
        (&i/o-file-already-exists . g$12789$12l&&U)
        (&i/o-file-is-read-only . g$12788$12l&&U)
        (&i/o-file-protection . g$12787$12l&&U)
        (&i/o-filename . g$12786$12l&&U)
        (&i/o-invalid-position . g$12785$12l&&U)
        (&i/o-write . g$12784$12l&&U)
        (&i/o-read . g$12783$12l&&U)
        (&i/o . g$12782$12l&&U)
        (&non-continuable . g$12781$12l&&U)
        (&undefined . g$12780$12l&&U)
        (&syntax . g$12779$12l&&U)
        (&lexical . g$12778$12l&&U)
        (&implementation-restriction . g$12777$12l&&U)
        (&who . g$12776$12l&&U)
        (&irritants . g$12775$12l&&U)
        (&assertion . g$12774$12l&&U)
        (&violation . g$12773$12l&&U)
        (&error . g$12772$12l&&U)
        (&serious . g$12771$12l&&U)
        (&warning . g$12770$12l&&U)
        (&message . g$12769$12l&&U)
        (&condition . g$12768$12l&&U)
        (define-condition-type . g$12767$12l&&U)
        (define-enumeration . g$12766$12l&&U)
        (define-record-type . g$12765$12l&&U)
        (parent-rtd . g$12764$12l&&U)
        (nongenerative . g$12763$12l&&U)
        (opaque . g$12762$12l&&U)
        (sealed . g$12761$12l&&U)
        (protocol . g$12760$12l&&U)
        (parent . g$12759$12l&&U)
        (immutable . g$12758$12l&&U)
        (mutable . g$12757$12l&&U)
        (fields . g$12756$12l&&U)
        (error-handling-mode . g$12755$12l&&U)
        (file-options . g$12754$12l&&U)
        (buffer-mode . g$12753$12l&&U)
        (eol-style . g$12752$12l&&U)
        (guard . g$12751$12l&&U)
        (trace-letrec-syntax . g$12750$12l&&U)
        (trace-let-syntax . g$12749$12l&&U)
        (trace-define-syntax . g$12748$12l&&U)
        (trace-define . g$12747$12l&&U)
        (trace-lambda . g$12746$12l&&U)
        (unsyntax-splicing . g$12745$12l&&U)
        (unsyntax . g$12744$12l&&U)
        (unquote-splicing . g$12743$12l&&U)
        (unquote . g$12742$12l&&U)
        (_ . g$12741$12l&&U)
        (else . g$12740$12l&&U)
        (=> . g$12739$12l&&U)
        (... . g$12738$12l&&U)
        (assert . g$12737$12l&&U)
        (endianness . g$12736$12l&&U)
        (delay . g$12735$12l&&U)
        (time . g$12734$12l&&U)
        (or . g$12733$12l&&U)
        (and . g$12732$12l&&U)
        (do . g$12731$12l&&U)
        (cond . g$12730$12l&&U)
        (let* . g$12729$12l&&U)
        (let . g$12728$12l&&U)
        (identifier-syntax . g$12727$12l&&U)
        (with-syntax . g$12726$12l&&U)
        (quasisyntax . g$12725$12l&&U)
        (quasiquote . g$12724$12l&&U)
        (syntax-rules . g$12723$12l&&U)
        (include-into . g$12722$12l&&U)
        (include . g$12721$12l&&U)
        (define-struct . g$12720$12l&&U)
        (let-values . g$12719$12l&&U)
        (let*-values . g$12718$12l&&U)
        (record-constructor-descriptor . g$12717$12l&&U)
        (record-type-descriptor . g$12716$12l&&U)
        (fluid-let-syntax . g$12715$12l&&U)
        (case . g$12714$12l&&U)
        (parameterize . g$12713$12l&&U)
        (unless . g$12712$12l&&U)
        (when . g$12711$12l&&U)
        (if . g$12710$12l&&U)
        (letrec* . g$12709$12l&&U)
        (letrec . g$12708$12l&&U)
        (type-descriptor . g$12707$12l&&U)
        (case-lambda . g$12706$12l&&U)
        (lambda . g$12705$12l&&U)
        (syntax . g$12704$12l&&U)
        (syntax-case . g$12703$12l&&U)
        (quote . g$12702$12l&&U)
        (foreign-call . g$12701$12l&&U)
        (letrec-syntax . g$12700$12l&&U)
        (let-syntax . g$12699$12l&&U)
        (set! . g$12698$12l&&U)
        (export . g$12697$12l&&U)
        (import . g$12696$12l&&U)
        (library . g$12695$12l&&U)
        (begin . g$12694$12l&&U)
        (module . g$12693$12l&&U)
        (define-syntax . g$12692$12l&&U)
        (define . g$12691$12l&&U))
      '((g$9492$12l&&U core-prim . ellipsis-map)
        (g$6300$12l&&U core-prim . &no-nans-rcd)
        (g$6299$12l&&U core-prim . &no-nans-rtd)
        (g$6287$12l&&U core-prim . &no-infinities-rcd)
        (g$6286$12l&&U core-prim . &no-infinities-rtd)
        (g$6274$12l&&U core-prim . &i/o-encoding-rcd)
        (g$6273$12l&&U core-prim . &i/o-encoding-rtd)
        (g$6259$12l&&U core-prim . &i/o-decoding-rcd)
        (g$6258$12l&&U core-prim . &i/o-decoding-rtd)
        (g$6246$12l&&U core-prim . &i/o-port-rcd)
        (g$6245$12l&&U core-prim . &i/o-port-rtd)
        (g$6231$12l&&U core-prim . &i/o-file-does-not-exist-rcd)
        (g$6230$12l&&U core-prim . &i/o-file-does-not-exist-rtd)
        (g$6218$12l&&U core-prim . &i/o-file-already-exists-rcd)
        (g$6217$12l&&U core-prim . &i/o-file-already-exists-rtd)
        (g$6205$12l&&U core-prim . &i/o-file-is-read-only-rcd)
        (g$6204$12l&&U core-prim . &i/o-file-is-read-only-rtd)
        (g$6192$12l&&U core-prim . &i/o-file-protection-rcd)
        (g$6191$12l&&U core-prim . &i/o-file-protection-rtd)
        (g$6179$12l&&U core-prim . &i/o-filename-rcd)
        (g$6178$12l&&U core-prim . &i/o-filename-rtd)
        (g$6164$12l&&U core-prim . &i/o-invalid-position-rcd)
        (g$6163$12l&&U core-prim . &i/o-invalid-position-rtd)
        (g$6149$12l&&U core-prim . &i/o-write-rcd)
        (g$6148$12l&&U core-prim . &i/o-write-rtd)
        (g$6136$12l&&U core-prim . &i/o-read-rcd)
        (g$6135$12l&&U core-prim . &i/o-read-rtd)
        (g$6123$12l&&U core-prim . &i/o-rcd)
        (g$6122$12l&&U core-prim . &i/o-rtd)
        (g$6110$12l&&U core-prim . &undefined-rcd)
        (g$6109$12l&&U core-prim . &undefined-rtd)
        (g$6097$12l&&U core-prim . &syntax-rcd)
        (g$6096$12l&&U core-prim . &syntax-rtd)
        (g$6080$12l&&U core-prim . &lexical-rcd)
        (g$6079$12l&&U core-prim . &lexical-rtd)
        (g$6067$12l&&U core-prim . &implementation-restriction-rcd)
        (g$6066$12l&&U core-prim . &implementation-restriction-rtd)
        (g$6054$12l&&U core-prim . &non-continuable-rcd)
        (g$6053$12l&&U core-prim . &non-continuable-rtd)
        (g$6041$12l&&U core-prim . &who-rcd)
        (g$6040$12l&&U core-prim . &who-rtd)
        (g$6026$12l&&U core-prim . &irritants-rcd)
        (g$6025$12l&&U core-prim . &irritants-rtd)
        (g$6011$12l&&U core-prim . &assertion-rcd)
        (g$6010$12l&&U core-prim . &assertion-rtd)
        (g$5998$12l&&U core-prim . &violation-rcd)
        (g$5997$12l&&U core-prim . &violation-rtd)
        (g$5985$12l&&U core-prim . &error-rcd)
        (g$5984$12l&&U core-prim . &error-rtd)
        (g$5972$12l&&U core-prim . &serious-rcd)
        (g$5971$12l&&U core-prim . &serious-rtd)
        (g$5959$12l&&U core-prim . &warning-rcd)
        (g$5958$12l&&U core-prim . &warning-rtd)
        (g$5946$12l&&U core-prim . &message-rcd)
        (g$5945$12l&&U core-prim . &message-rtd)
        (g$5906$12l&&U core-prim . &condition-rcd)
        (g$5905$12l&&U core-prim . &condition-rtd)
        (g$13160$12l&&U core-prim . library-letrec*)
        (g$13159$12l&&U core-prim . annotation-stripped)
        (g$13158$12l&&U core-prim . annotation-source)
        (g$13157$12l&&U core-prim . annotation-expression)
        (g$13156$12l&&U core-prim . annotation?)
        (g$13155$12l&&U core-prim . read-annotated)
        (g$13154$12l&&U core-prim . tanh)
        (g$13153$12l&&U core-prim . cosh)
        (g$13152$12l&&U core-prim . sinh)
        (g$13151$12l&&U core-prim . make-guid)
        (g$13150$12l&&U core-prim . unspecified?)
        (g$5142$12l&&U core-prim . make-list)
        (g$5141$12l&&U core-prim . last-pair)
        (g$13149$12l&&U core-prim . load-r5rs)
        (g$13148$12l&&U core-prim . license)
        (g$13147$12l&&U core-prim . stacktrace)
        (g$12639$12l&&U core-prim . ironscheme-build)
        (g$13146$12l&&U core-prim . define-clr-class-internal)
        (g$13145$12l&&U core-prim . clr-field-set!-internal)
        (g$13144$12l&&U core-prim . clr-field-get-internal)
        (g$13143$12l&&U core-prim . clr-cast-internal)
        (g$13142$12l&&U core-prim . clr-call-internal)
        (g$13141$12l&&U core-prim . clr-new-internal)
        (g$13140$12l&&U core-prim . clr-new-array-internal)
        (g$13139$12l&&U core-prim . clr-is-internal)
        (g$13138$12l&&U core-prim . clr-reference-internal)
        (g$13137$12l&&U core-prim . clr-using-internal)
        (g$9612$12l&&U core-prim . syntax-error)
        (g$9487$12l&&U core-prim . syntax-dispatch)
        (g$13136$12l&&U core-prim . compile-core)
        (g$13135$12l&&U core-prim . eval-core)
        (g$13134$12l&&U core-prim . remove-location)
        (g$13133$12l&&U core-prim . set-symbol-value!)
        (g$13132$12l&&U core-prim . symbol-value)
        (g$13131$12l&&U core-prim . symbol-bound?)
        (g$13130$12l&&U core-prim . ungensym)
        (g$13129$12l&&U core-prim . gensym)
        (g$13128$12l&&U core-prim . void)
        (g$13127$12l&&U core-prim . load-serialized-library)
        (g$13126$12l&&U core-prim . serialize-library)
        (g$12643$12l&&U core-prim . compile-system-libraries)
        (g$12645$12l&&U core-prim . compile->closure)
        (g$12644$12l&&U core-prim . compile)
        (g$12638$12l&&U core-prim . load)
        (g$13125$12l&&U core-prim . string-normalize)
        (g$9622$12l&&U core-prim . interaction-environment)
        (g$13124$12l&&U core-prim . char-ready?)
        (g$13123$12l&&U core-prim . string-upcase)
        (g$13122$12l&&U core-prim . string-titlecase)
        (g$6383$12l&&U core-prim . string-normalize-nfkd)
        (g$6382$12l&&U core-prim . string-normalize-nfkc)
        (g$6381$12l&&U core-prim . string-normalize-nfd)
        (g$6380$12l&&U core-prim . string-normalize-nfc)
        (g$13121$12l&&U core-prim . string-foldcase)
        (g$13120$12l&&U core-prim . string-downcase)
        (g$6367$12l&&U core-prim . string-ci>?)
        (g$6369$12l&&U core-prim . string-ci>=?)
        (g$6365$12l&&U core-prim . string-ci=?)
        (g$6366$12l&&U core-prim . string-ci<?)
        (g$6368$12l&&U core-prim . string-ci<=?)
        (g$13119$12l&&U core-prim . char-whitespace?)
        (g$13118$12l&&U core-prim . char-upper-case?)
        (g$13117$12l&&U core-prim . char-title-case?)
        (g$13116$12l&&U core-prim . char-numeric?)
        (g$13115$12l&&U core-prim . char-lower-case?)
        (g$13114$12l&&U core-prim . char-general-category)
        (g$13113$12l&&U core-prim . char-upcase)
        (g$13112$12l&&U core-prim . char-titlecase)
        (g$13111$12l&&U core-prim . char-foldcase)
        (g$13110$12l&&U core-prim . char-downcase)
        (g$6377$12l&&U core-prim . char-ci>?)
        (g$6379$12l&&U core-prim . char-ci>=?)
        (g$6375$12l&&U core-prim . char-ci=?)
        (g$6376$12l&&U core-prim . char-ci<?)
        (g$6378$12l&&U core-prim . char-ci<=?)
        (g$13109$12l&&U core-prim . char-alphabetic?)
        (g$9299$12l&&U core-prim . variable-transformer-procedure)
        (g$9298$12l&&U core-prim . variable-transformer?)
        (g$9296$12l&&U core-prim . make-variable-transformer)
        (g$9616$12l&&U core-prim . identifier?)
        (g$9605$12l&&U core-prim . generate-temporaries)
        (g$9606$12l&&U core-prim . free-identifier=?)
        (g$9618$12l&&U core-prim . syntax->datum)
        (g$9617$12l&&U core-prim . datum->syntax)
        (g$9607$12l&&U core-prim . bound-identifier=?)
        (g$13108$12l&&U core-prim . record-type-descriptor?)
        (g$13107$12l&&U core-prim . record-predicate)
        (g$13106$12l&&U core-prim . record-mutator)
        (g$13105$12l&&U core-prim . record-constructor)
        (g$13104$12l&&U core-prim . record-accessor)
        (g$13103$12l&&U core-prim . make-record-type-descriptor)
        (g$13102$12l&&U core-prim . make-record-constructor-descriptor)
        (g$13101$12l&&U core-prim . record?)
        (g$13100$12l&&U core-prim . record-type-uid)
        (g$13099$12l&&U core-prim . record-type-sealed?)
        (g$13098$12l&&U core-prim . record-type-parent)
        (g$13097$12l&&U core-prim . record-type-opaque?)
        (g$13096$12l&&U core-prim . record-type-name)
        (g$13095$12l&&U core-prim . record-type-generative?)
        (g$13094$12l&&U core-prim . record-type-field-names)
        (g$13093$12l&&U core-prim . record-rtd)
        (g$13092$12l&&U core-prim . record-field-mutable?)
        (g$5774$12l&&U core-prim . delete-file)
        (g$5773$12l&&U core-prim . file-exists?)
        (g$13091$12l&&U core-prim . vector-sort!)
        (g$13090$12l&&U core-prim . vector-sort)
        (g$6336$12l&&U core-prim . list-sort)
        (g$13089$12l&&U core-prim . symbol-hash)
        (g$13088$12l&&U core-prim . string-ci-hash)
        (g$13087$12l&&U core-prim . string-hash)
        (g$13086$12l&&U core-prim . equal-hash)
        (g$13085$12l&&U core-prim . hashtable-equivalence-function)
        (g$13084$12l&&U core-prim . make-hashtable)
        (g$13083$12l&&U core-prim . hashtable-hash-function)
        (g$5741$12l&&U core-prim . make-eqv-hashtable)
        (g$5740$12l&&U core-prim . make-eq-hashtable)
        (g$13082$12l&&U core-prim . hashtable?)
        (g$5747$12l&&U core-prim . hashtable-update!)
        (g$5742$12l&&U core-prim . hashtable-size)
        (g$5744$12l&&U core-prim . hashtable-set!)
        (g$5743$12l&&U core-prim . hashtable-ref)
        (g$13081$12l&&U core-prim . hashtable-mutable?)
        (g$13080$12l&&U core-prim . hashtable-keys)
        (g$13079$12l&&U core-prim . hashtable-entries)
        (g$5745$12l&&U core-prim . hashtable-delete!)
        (g$13078$12l&&U core-prim . hashtable-copy)
        (g$5746$12l&&U core-prim . hashtable-contains?)
        (g$5748$12l&&U core-prim . hashtable-clear!)
        (g$8120$12l&&U core-prim . call-with-output-file)
        (g$8119$12l&&U core-prim . call-with-input-file)
        (g$8111$12l&&U core-prim . write-char)
        (g$13077$12l&&U core-prim . write)
        (g$8118$12l&&U core-prim . with-output-to-file)
        (g$8117$12l&&U core-prim . with-input-from-file)
        (g$8110$12l&&U core-prim . read-char)
        (g$13076$12l&&U core-prim . read)
        (g$8109$12l&&U core-prim . peek-char)
        (g$13075$12l&&U core-prim . open-output-file)
        (g$13074$12l&&U core-prim . open-input-file)
        (g$8121$12l&&U core-prim . newline)
        (g$13073$12l&&U core-prim . display)
        (g$13072$12l&&U core-prim . close-output-port)
        (g$13071$12l&&U core-prim . close-input-port)
        (g$13070$12l&&U core-prim . eof-object?)
        (g$13069$12l&&U core-prim . eof-object)
        (g$13068$12l&&U core-prim . current-error-port)
        (g$13067$12l&&U core-prim . current-output-port)
        (g$13066$12l&&U core-prim . current-input-port)
        (g$13065$12l&&U core-prim . output-port?)
        (g$13064$12l&&U core-prim . input-port?)
        (g$13063$12l&&U core-prim . utf-8-codec)
        (g$13062$12l&&U core-prim . utf-16-codec)
        (g$13061$12l&&U core-prim . transcoder-error-handling-mode)
        (g$13060$12l&&U core-prim . transcoder-eol-style)
        (g$13059$12l&&U core-prim . transcoder-codec)
        (g$13058$12l&&U core-prim . transcoded-port)
        (g$13057$12l&&U core-prim . textual-port?)
        (g$13056$12l&&U core-prim . string->bytevector)
        (g$13055$12l&&U core-prim . standard-output-port)
        (g$13054$12l&&U core-prim . standard-input-port)
        (g$13053$12l&&U core-prim . standard-error-port)
        (g$13052$12l&&U core-prim . set-port-position!)
        (g$13051$12l&&U core-prim . put-u8)
        (g$13050$12l&&U core-prim . put-string)
        (g$8089$12l&&U core-prim . put-datum)
        (g$13049$12l&&U core-prim . put-char)
        (g$13048$12l&&U core-prim . put-bytevector)
        (g$8094$12l&&U core-prim . port?)
        (g$13047$12l&&U core-prim . port-transcoder)
        (g$13046$12l&&U core-prim . port-position)
        (g$13045$12l&&U core-prim . port-has-set-port-position!?)
        (g$13044$12l&&U core-prim . port-has-port-position?)
        (g$13043$12l&&U core-prim . port-eof?)
        (g$13042$12l&&U core-prim . output-port-buffer-mode)
        (g$8093$12l&&U core-prim . open-string-output-port)
        (g$13041$12l&&U core-prim . open-string-input-port)
        (g$13040$12l&&U core-prim . open-file-output-port)
        (g$13039$12l&&U core-prim . open-file-input/output-port)
        (g$13038$12l&&U core-prim . open-file-input-port)
        (g$13037$12l&&U core-prim . open-bytevector-output-port)
        (g$13036$12l&&U core-prim . open-bytevector-input-port)
        (g$13035$12l&&U core-prim . native-transcoder)
        (g$13034$12l&&U core-prim . native-eol-style)
        (g$13033$12l&&U core-prim . make-transcoder)
        (g$13032$12l&&U core-prim . latin-1-codec)
        (g$6146$12l&&U core-prim . make-i/o-write-error)
        (g$6133$12l&&U core-prim . make-i/o-read-error)
        (g$6241$12l&&U core-prim . make-i/o-port-error)
        (g$6159$12l&&U core-prim . make-i/o-invalid-position-error)
        (g$6174$12l&&U core-prim . make-i/o-filename-error)
        (g$6189$12l&&U core-prim . make-i/o-file-protection-error)
        (g$6202$12l&&U core-prim . make-i/o-file-is-read-only-error)
        (g$6228$12l&&U core-prim . make-i/o-file-does-not-exist-error)
        (g$6215$12l&&U core-prim . make-i/o-file-already-exists-error)
        (g$6120$12l&&U core-prim . make-i/o-error)
        (g$6269$12l&&U core-prim . make-i/o-encoding-error)
        (g$6256$12l&&U core-prim . make-i/o-decoding-error)
        (g$13031$12l&&U core-prim . make-custom-textual-output-port)
        (g$13030$12l&&U
          core-prim
          .
          make-custom-textual-input/output-port)
        (g$13029$12l&&U core-prim . make-custom-textual-input-port)
        (g$13028$12l&&U core-prim . make-custom-binary-output-port)
        (g$13027$12l&&U
          core-prim
          .
          make-custom-binary-input/output-port)
        (g$13026$12l&&U core-prim . make-custom-binary-input-port)
        (g$13025$12l&&U core-prim . make-bytevector)
        (g$13024$12l&&U core-prim . lookahead-u8)
        (g$13023$12l&&U core-prim . lookahead-char)
        (g$6147$12l&&U core-prim . i/o-write-error?)
        (g$6134$12l&&U core-prim . i/o-read-error?)
        (g$6243$12l&&U core-prim . i/o-port-error?)
        (g$6161$12l&&U core-prim . i/o-invalid-position-error?)
        (g$6162$12l&&U core-prim . i/o-error-position)
        (g$6176$12l&&U core-prim . i/o-filename-error?)
        (g$6190$12l&&U core-prim . i/o-file-protection-error?)
        (g$6203$12l&&U core-prim . i/o-file-is-read-only-error?)
        (g$6229$12l&&U core-prim . i/o-file-does-not-exist-error?)
        (g$6216$12l&&U core-prim . i/o-file-already-exists-error?)
        (g$6121$12l&&U core-prim . i/o-error?)
        (g$6244$12l&&U core-prim . i/o-error-port)
        (g$6177$12l&&U core-prim . i/o-error-filename)
        (g$6271$12l&&U core-prim . i/o-encoding-error?)
        (g$6272$12l&&U core-prim . i/o-encoding-error-char)
        (g$6257$12l&&U core-prim . i/o-decoding-error?)
        (g$13022$12l&&U core-prim . get-u8)
        (g$13021$12l&&U core-prim . get-string-n!)
        (g$13020$12l&&U core-prim . get-string-n)
        (g$13019$12l&&U core-prim . get-string-all)
        (g$13018$12l&&U core-prim . get-line)
        (g$8090$12l&&U core-prim . get-datum)
        (g$13017$12l&&U core-prim . get-char)
        (g$13016$12l&&U core-prim . get-bytevector-some)
        (g$13015$12l&&U core-prim . get-bytevector-n!)
        (g$13014$12l&&U core-prim . get-bytevector-n)
        (g$13013$12l&&U core-prim . get-bytevector-all)
        (g$13012$12l&&U core-prim . flush-output-port)
        (g$13011$12l&&U core-prim . close-port)
        (g$8095$12l&&U core-prim . call-with-string-output-port)
        (g$8096$12l&&U core-prim . call-with-port)
        (g$13010$12l&&U core-prim . call-with-bytevector-output-port)
        (g$13009$12l&&U core-prim . bytevector->string)
        (g$13008$12l&&U core-prim . buffer-mode?)
        (g$13007$12l&&U core-prim . binary-port?)
        (g$9595$12l&&U core-prim . scheme-report-environment)
        (g$6315$12l&&U core-prim . quotient)
        (g$9594$12l&&U core-prim . null-environment)
        (g$6316$12l&&U core-prim . remainder)
        (g$6317$12l&&U core-prim . modulo)
        (g$6312$12l&&U core-prim . inexact->exact)
        (g$6319$12l&&U core-prim . force)
        (g$6313$12l&&U core-prim . exact->inexact)
        (g$13006$12l&&U core-prim . exit)
        (g$12634$12l&&U core-prim . command-line)
        (g$13005$12l&&U core-prim . string-fill!)
        (g$13004$12l&&U core-prim . string-set!)
        (g$13003$12l&&U core-prim . set-cdr!)
        (g$13002$12l&&U core-prim . set-car!)
        (g$5164$12l&&U core-prim . remove)
        (g$5165$12l&&U core-prim . remv)
        (g$5145$12l&&U core-prim . remp)
        (g$5166$12l&&U core-prim . remq)
        (g$5144$12l&&U core-prim . partition)
        (g$5152$12l&&U core-prim . memv)
        (g$5151$12l&&U core-prim . memq)
        (g$5154$12l&&U core-prim . memp)
        (g$5153$12l&&U core-prim . member)
        (g$5158$12l&&U core-prim . exists)
        (g$5157$12l&&U core-prim . for-all)
        (g$5163$12l&&U core-prim . fold-right)
        (g$5162$12l&&U core-prim . fold-left)
        (g$5143$12l&&U core-prim . find)
        (g$5146$12l&&U core-prim . filter)
        (g$5161$12l&&U core-prim . cons*)
        (g$5148$12l&&U core-prim . assv)
        (g$5147$12l&&U core-prim . assq)
        (g$5150$12l&&U core-prim . assp)
        (g$5149$12l&&U core-prim . assoc)
        (g$13001$12l&&U core-prim . with-exception-handler)
        (g$13000$12l&&U core-prim . raise-continuable)
        (g$12999$12l&&U core-prim . raise)
        (g$9597$12l&&U core-prim . eval)
        (g$9593$12l&&U core-prim . environment)
        (g$8181$12l&&U core-prim . make-enumeration)
        (g$8188$12l&&U core-prim . enum-set=?)
        (g$8182$12l&&U core-prim . enum-set-universe)
        (g$8189$12l&&U core-prim . enum-set-union)
        (g$8187$12l&&U core-prim . enum-set-subset?)
        (g$8193$12l&&U core-prim . enum-set-projection)
        (g$8186$12l&&U core-prim . enum-set-member?)
        (g$8190$12l&&U core-prim . enum-set-intersection)
        (g$8183$12l&&U core-prim . enum-set-indexer)
        (g$8191$12l&&U core-prim . enum-set-difference)
        (g$8184$12l&&U core-prim . enum-set-constructor)
        (g$8192$12l&&U core-prim . enum-set-complement)
        (g$8185$12l&&U core-prim . enum-set->list)
        (g$6038$12l&&U core-prim . who-condition?)
        (g$5957$12l&&U core-prim . warning?)
        (g$5996$12l&&U core-prim . violation?)
        (g$6108$12l&&U core-prim . undefined-violation?)
        (g$6093$12l&&U core-prim . syntax-violation?)
        (g$6095$12l&&U core-prim . syntax-violation-subform)
        (g$6094$12l&&U core-prim . syntax-violation-form)
        (g$9615$12l&&U core-prim . syntax-violation)
        (g$12998$12l&&U core-prim . simple-conditions)
        (g$5970$12l&&U core-prim . serious-condition?)
        (g$6052$12l&&U core-prim . non-continuable-violation?)
        (g$5943$12l&&U core-prim . message-condition?)
        (g$6036$12l&&U core-prim . make-who-condition)
        (g$5956$12l&&U core-prim . make-warning)
        (g$5995$12l&&U core-prim . make-violation)
        (g$6107$12l&&U core-prim . make-undefined-violation)
        (g$6090$12l&&U core-prim . make-syntax-violation)
        (g$5969$12l&&U core-prim . make-serious-condition)
        (g$6051$12l&&U core-prim . make-non-continuable-violation)
        (g$5941$12l&&U core-prim . make-message-condition)
        (g$6077$12l&&U core-prim . make-lexical-violation)
        (g$6021$12l&&U core-prim . make-irritants-condition)
        (g$6064$12l&&U
          core-prim
          .
          make-implementation-restriction-violation)
        (g$5982$12l&&U core-prim . make-error)
        (g$6008$12l&&U core-prim . make-assertion-violation)
        (g$6078$12l&&U core-prim . lexical-violation?)
        (g$6023$12l&&U core-prim . irritants-condition?)
        (g$6065$12l&&U
          core-prim
          .
          implementation-restriction-violation?)
        (g$5983$12l&&U core-prim . error?)
        (g$6039$12l&&U core-prim . condition-who)
        (g$12997$12l&&U core-prim . condition-predicate)
        (g$5944$12l&&U core-prim . condition-message)
        (g$6024$12l&&U core-prim . condition-irritants)
        (g$12996$12l&&U core-prim . condition-accessor)
        (g$12995$12l&&U core-prim . condition)
        (g$6009$12l&&U core-prim . assertion-violation?)
        (g$12994$12l&&U core-prim . condition?)
        (g$12993$12l&&U core-prim . utf32->string)
        (g$12992$12l&&U core-prim . utf16->string)
        (g$12991$12l&&U core-prim . utf8->string)
        (g$12990$12l&&U core-prim . uint-list->bytevector)
        (g$12989$12l&&U core-prim . u8-list->bytevector)
        (g$12988$12l&&U core-prim . string->utf8)
        (g$12987$12l&&U core-prim . string->utf32)
        (g$12986$12l&&U core-prim . string->utf16)
        (g$12985$12l&&U core-prim . sint-list->bytevector)
        (g$5780$12l&&U core-prim . native-endianness)
        (g$5469$12l&&U core-prim . bytevector?)
        (g$12984$12l&&U core-prim . bytevector=?)
        (g$12983$12l&&U core-prim . bytevector-uint-set!)
        (g$12982$12l&&U core-prim . bytevector-uint-ref)
        (g$12981$12l&&U core-prim . bytevector-u8-set!)
        (g$12980$12l&&U core-prim . bytevector-u8-ref)
        (g$5801$12l&&U core-prim . bytevector-u64-set!)
        (g$5797$12l&&U core-prim . bytevector-u64-ref)
        (g$5803$12l&&U core-prim . bytevector-u64-native-set!)
        (g$5799$12l&&U core-prim . bytevector-u64-native-ref)
        (g$5793$12l&&U core-prim . bytevector-u32-set!)
        (g$5789$12l&&U core-prim . bytevector-u32-ref)
        (g$5795$12l&&U core-prim . bytevector-u32-native-set!)
        (g$5791$12l&&U core-prim . bytevector-u32-native-ref)
        (g$5785$12l&&U core-prim . bytevector-u16-set!)
        (g$5781$12l&&U core-prim . bytevector-u16-ref)
        (g$5787$12l&&U core-prim . bytevector-u16-native-set!)
        (g$5783$12l&&U core-prim . bytevector-u16-native-ref)
        (g$12979$12l&&U core-prim . bytevector-sint-set!)
        (g$12978$12l&&U core-prim . bytevector-sint-ref)
        (g$12977$12l&&U core-prim . bytevector-s8-set!)
        (g$12976$12l&&U core-prim . bytevector-s8-ref)
        (g$5802$12l&&U core-prim . bytevector-s64-set!)
        (g$5798$12l&&U core-prim . bytevector-s64-ref)
        (g$5804$12l&&U core-prim . bytevector-s64-native-set!)
        (g$5800$12l&&U core-prim . bytevector-s64-native-ref)
        (g$5794$12l&&U core-prim . bytevector-s32-set!)
        (g$5790$12l&&U core-prim . bytevector-s32-ref)
        (g$5796$12l&&U core-prim . bytevector-s32-native-set!)
        (g$5792$12l&&U core-prim . bytevector-s32-native-ref)
        (g$5786$12l&&U core-prim . bytevector-s16-set!)
        (g$5782$12l&&U core-prim . bytevector-s16-ref)
        (g$5788$12l&&U core-prim . bytevector-s16-native-set!)
        (g$5784$12l&&U core-prim . bytevector-s16-native-ref)
        (g$12975$12l&&U core-prim . bytevector-length)
        (g$12974$12l&&U core-prim . bytevector-ieee-single-set!)
        (g$12973$12l&&U core-prim . bytevector-ieee-single-ref)
        (g$5807$12l&&U core-prim . bytevector-ieee-single-native-set!)
        (g$5805$12l&&U core-prim . bytevector-ieee-single-native-ref)
        (g$12972$12l&&U core-prim . bytevector-ieee-double-set!)
        (g$12971$12l&&U core-prim . bytevector-ieee-double-ref)
        (g$5808$12l&&U core-prim . bytevector-ieee-double-native-set!)
        (g$5806$12l&&U core-prim . bytevector-ieee-double-native-ref)
        (g$12970$12l&&U core-prim . bytevector-fill!)
        (g$12969$12l&&U core-prim . bytevector-copy!)
        (g$12968$12l&&U core-prim . bytevector-copy)
        (g$12967$12l&&U core-prim . bytevector->uint-list)
        (g$12966$12l&&U core-prim . bytevector->u8-list)
        (g$12965$12l&&U core-prim . bytevector->sint-list)
        (g$6298$12l&&U core-prim . no-nans-violation?)
        (g$6285$12l&&U core-prim . no-infinities-violation?)
        (g$6297$12l&&U core-prim . make-no-nans-violation)
        (g$6284$12l&&U core-prim . make-no-infinities-violation)
        (g$12964$12l&&U core-prim . real->flonum)
        (g$7535$12l&&U core-prim . flzero?)
        (g$7530$12l&&U core-prim . fltruncate)
        (g$7516$12l&&U core-prim . fltan)
        (g$7521$12l&&U core-prim . flsqrt)
        (g$7514$12l&&U core-prim . flsin)
        (g$7531$12l&&U core-prim . flround)
        (g$7533$12l&&U core-prim . flpositive?)
        (g$5474$12l&&U core-prim . flonum?)
        (g$7537$12l&&U core-prim . flodd?)
        (g$12963$12l&&U core-prim . flnumerator)
        (g$7534$12l&&U core-prim . flnegative?)
        (g$7513$12l&&U core-prim . flnan?)
        (g$7498$12l&&U core-prim . flmod0)
        (g$7497$12l&&U core-prim . flmod)
        (g$7539$12l&&U core-prim . flmin)
        (g$7538$12l&&U core-prim . flmax)
        (g$7520$12l&&U core-prim . fllog)
        (g$7506$12l&&U core-prim . flinteger?)
        (g$7512$12l&&U core-prim . flinfinite?)
        (g$7529$12l&&U core-prim . flfloor)
        (g$7507$12l&&U core-prim . flfinite?)
        (g$7523$12l&&U core-prim . flexpt)
        (g$7522$12l&&U core-prim . flexp)
        (g$7536$12l&&U core-prim . fleven?)
        (g$7505$12l&&U core-prim . fldiv0-and-mod0)
        (g$7492$12l&&U core-prim . fldiv0)
        (g$7499$12l&&U core-prim . fldiv-and-mod)
        (g$7504$12l&&U core-prim . fldiv)
        (g$12962$12l&&U core-prim . fldenominator)
        (g$7515$12l&&U core-prim . flcos)
        (g$7524$12l&&U core-prim . flceiling)
        (g$7519$12l&&U core-prim . flatan)
        (g$7517$12l&&U core-prim . flasin)
        (g$7518$12l&&U core-prim . flacos)
        (g$7532$12l&&U core-prim . flabs)
        (g$7486$12l&&U core-prim . fl>?)
        (g$7487$12l&&U core-prim . fl>=?)
        (g$7483$12l&&U core-prim . fl=?)
        (g$7484$12l&&U core-prim . fl<?)
        (g$7485$12l&&U core-prim . fl<=?)
        (g$7482$12l&&U core-prim . fl/)
        (g$7481$12l&&U core-prim . fl-)
        (g$7479$12l&&U core-prim . fl+)
        (g$7480$12l&&U core-prim . fl*)
        (g$12961$12l&&U core-prim . fixnum->flonum)
        (g$6579$12l&&U core-prim . fxzero?)
        (g$6542$12l&&U core-prim . fxxor)
        (g$6617$12l&&U core-prim . fxrotate-bit-field)
        (g$6618$12l&&U core-prim . fxreverse-bit-field)
        (g$6569$12l&&U core-prim . fxpositive?)
        (g$6589$12l&&U core-prim . fxodd?)
        (g$6523$12l&&U core-prim . fxnot)
        (g$6574$12l&&U core-prim . fxnegative?)
        (g$6553$12l&&U core-prim . fxmod0)
        (g$6552$12l&&U core-prim . fxmod)
        (g$6591$12l&&U core-prim . fxmin)
        (g$6590$12l&&U core-prim . fxmax)
        (g$6520$12l&&U core-prim . fxlength)
        (g$6541$12l&&U core-prim . fxior)
        (g$6599$12l&&U core-prim . fxif)
        (g$6521$12l&&U core-prim . fxfirst-bit-set)
        (g$6584$12l&&U core-prim . fxeven?)
        (g$6564$12l&&U core-prim . fxdiv0-and-mod0)
        (g$6559$12l&&U core-prim . fxdiv0)
        (g$6554$12l&&U core-prim . fxdiv-and-mod)
        (g$6547$12l&&U core-prim . fxdiv)
        (g$6614$12l&&U core-prim . fxcopy-bit-field)
        (g$6604$12l&&U core-prim . fxcopy-bit)
        (g$6522$12l&&U core-prim . fxbit-set?)
        (g$6609$12l&&U core-prim . fxbit-field)
        (g$6515$12l&&U core-prim . fxbit-count)
        (g$6616$12l&&U core-prim . fxarithmetic-shift-right)
        (g$6615$12l&&U core-prim . fxarithmetic-shift-left)
        (g$6510$12l&&U core-prim . fxarithmetic-shift)
        (g$6540$12l&&U core-prim . fxand)
        (g$6532$12l&&U core-prim . fx>?)
        (g$6533$12l&&U core-prim . fx>=?)
        (g$6529$12l&&U core-prim . fx=?)
        (g$6530$12l&&U core-prim . fx<?)
        (g$6531$12l&&U core-prim . fx<=?)
        (g$6593$12l&&U core-prim . fx-/carry)
        (g$6504$12l&&U core-prim . fx-)
        (g$6594$12l&&U core-prim . fx+/carry)
        (g$6502$12l&&U core-prim . fx+)
        (g$6592$12l&&U core-prim . fx*/carry)
        (g$6503$12l&&U core-prim . fx*)
        (g$6473$12l&&U core-prim . greatest-fixnum)
        (g$6474$12l&&U core-prim . least-fixnum)
        (g$5475$12l&&U core-prim . fixnum-width)
        (g$5473$12l&&U core-prim . fixnum?)
        (g$6447$12l&&U core-prim . bitwise-rotate-bit-field)
        (g$12960$12l&&U core-prim . bitwise-reverse-bit-field)
        (g$12959$12l&&U core-prim . bitwise-length)
        (g$6441$12l&&U core-prim . bitwise-if)
        (g$12958$12l&&U core-prim . bitwise-first-bit-set)
        (g$6444$12l&&U core-prim . bitwise-copy-bit-field)
        (g$6442$12l&&U core-prim . bitwise-copy-bit)
        (g$12957$12l&&U core-prim . bitwise-bit-set?)
        (g$6443$12l&&U core-prim . bitwise-bit-field)
        (g$12956$12l&&U core-prim . bitwise-bit-count)
        (g$12955$12l&&U core-prim . bitwise-xor)
        (g$12954$12l&&U core-prim . bitwise-ior)
        (g$12953$12l&&U core-prim . bitwise-and)
        (g$12952$12l&&U core-prim . bitwise-not)
        (g$6446$12l&&U core-prim . bitwise-arithmetic-shift-right)
        (g$6445$12l&&U core-prim . bitwise-arithmetic-shift-left)
        (g$12951$12l&&U core-prim . bitwise-arithmetic-shift)
        (g$5517$12l&&U core-prim . zero?)
        (g$5468$12l&&U core-prim . vector?)
        (g$5483$12l&&U core-prim . vector-set!)
        (g$5482$12l&&U core-prim . vector-ref)
        (g$5549$12l&&U core-prim . vector-map)
        (g$12950$12l&&U core-prim . vector-length)
        (g$5550$12l&&U core-prim . vector-for-each)
        (g$5484$12l&&U core-prim . vector-fill!)
        (g$12949$12l&&U core-prim . vector->list)
        (g$12948$12l&&U core-prim . vector)
        (g$12947$12l&&U core-prim . values)
        (g$12946$12l&&U core-prim . truncate)
        (g$12945$12l&&U core-prim . tan)
        (g$5470$12l&&U core-prim . symbol?)
        (g$5534$12l&&U core-prim . symbol=?)
        (g$12944$12l&&U core-prim . symbol->string)
        (g$12943$12l&&U core-prim . substring)
        (g$12942$12l&&U core-prim . string?)
        (g$5531$12l&&U core-prim . string>?)
        (g$5533$12l&&U core-prim . string>=?)
        (g$5529$12l&&U core-prim . string=?)
        (g$5530$12l&&U core-prim . string<?)
        (g$5532$12l&&U core-prim . string<=?)
        (g$12941$12l&&U core-prim . string-ref)
        (g$12940$12l&&U core-prim . string-length)
        (g$5551$12l&&U core-prim . string-for-each)
        (g$12939$12l&&U core-prim . string-copy)
        (g$12938$12l&&U core-prim . string-append)
        (g$12937$12l&&U core-prim . string->symbol)
        (g$12936$12l&&U core-prim . string->number)
        (g$12935$12l&&U core-prim . string->list)
        (g$12934$12l&&U core-prim . string)
        (g$12933$12l&&U core-prim . sqrt)
        (g$12932$12l&&U core-prim . sin)
        (g$12931$12l&&U core-prim . round)
        (g$5486$12l&&U core-prim . reverse)
        (g$12930$12l&&U core-prim . real?)
        (g$12929$12l&&U core-prim . real-valued?)
        (g$12928$12l&&U core-prim . real-part)
        (g$5546$12l&&U core-prim . rationalize)
        (g$12927$12l&&U core-prim . rational?)
        (g$12926$12l&&U core-prim . rational-valued?)
        (g$5472$12l&&U core-prim . procedure?)
        (g$5515$12l&&U core-prim . positive?)
        (g$12925$12l&&U core-prim . pair?)
        (g$5519$12l&&U core-prim . odd?)
        (g$12924$12l&&U core-prim . numerator)
        (g$12923$12l&&U core-prim . number?)
        (g$12922$12l&&U core-prim . number->string)
        (g$12921$12l&&U core-prim . null?)
        (g$12920$12l&&U core-prim . not)
        (g$5516$12l&&U core-prim . negative?)
        (g$12919$12l&&U core-prim . nan?)
        (g$5521$12l&&U core-prim . min)
        (g$5520$12l&&U core-prim . max)
        (g$5159$12l&&U core-prim . map)
        (g$12918$12l&&U core-prim . make-vector)
        (g$12917$12l&&U core-prim . make-string)
        (g$12916$12l&&U core-prim . make-rectangular)
        (g$12915$12l&&U core-prim . make-polar)
        (g$12914$12l&&U core-prim . magnitude)
        (g$12913$12l&&U core-prim . log)
        (g$12912$12l&&U core-prim . list?)
        (g$5139$12l&&U core-prim . list-tail)
        (g$5140$12l&&U core-prim . list-ref)
        (g$5480$12l&&U core-prim . list->vector)
        (g$5481$12l&&U core-prim . list->string)
        (g$12911$12l&&U core-prim . list)
        (g$12910$12l&&U core-prim . length)
        (g$5523$12l&&U core-prim . lcm)
        (g$12909$12l&&U core-prim . integer?)
        (g$12908$12l&&U core-prim . integer-valued?)
        (g$12907$12l&&U core-prim . integer->char)
        (g$12906$12l&&U core-prim . infinite?)
        (g$12905$12l&&U core-prim . inexact?)
        (g$12904$12l&&U core-prim . inexact)
        (g$12903$12l&&U core-prim . imag-part)
        (g$5522$12l&&U core-prim . gcd)
        (g$5160$12l&&U core-prim . for-each)
        (g$12902$12l&&U core-prim . floor)
        (g$12901$12l&&U core-prim . finite?)
        (g$12900$12l&&U core-prim . expt)
        (g$12899$12l&&U core-prim . exp)
        (g$12898$12l&&U core-prim . exact?)
        (g$12897$12l&&U core-prim . exact-integer-sqrt)
        (g$12896$12l&&U core-prim . exact)
        (g$5518$12l&&U core-prim . even?)
        (g$12895$12l&&U core-prim . error)
        (g$12894$12l&&U core-prim . eqv?)
        (g$12893$12l&&U core-prim . equal?)
        (g$12892$12l&&U core-prim . eq?)
        (g$12891$12l&&U core-prim . dynamic-wind)
        (g$5479$12l&&U core-prim . div0-and-mod0)
        (g$5477$12l&&U core-prim . mod0)
        (g$12890$12l&&U core-prim . div0)
        (g$5478$12l&&U core-prim . div-and-mod)
        (g$5476$12l&&U core-prim . mod)
        (g$12889$12l&&U core-prim . div)
        (g$12888$12l&&U core-prim . denominator)
        (g$12887$12l&&U core-prim . cos)
        (g$12886$12l&&U core-prim . cons)
        (g$12885$12l&&U core-prim . complex?)
        (g$5467$12l&&U core-prim . char?)
        (g$5543$12l&&U core-prim . char>?)
        (g$5545$12l&&U core-prim . char>=?)
        (g$5541$12l&&U core-prim . char=?)
        (g$5542$12l&&U core-prim . char<?)
        (g$5544$12l&&U core-prim . char<=?)
        (g$12884$12l&&U core-prim . char->integer)
        (g$12883$12l&&U core-prim . ceiling)
        (g$12882$12l&&U core-prim . call-with-values)
        (g$12881$12l&&U core-prim . call/cc)
        (g$12880$12l&&U core-prim . call-with-current-continuation)
        (g$5514$12l&&U core-prim . cddddr)
        (g$5513$12l&&U core-prim . cdddar)
        (g$5512$12l&&U core-prim . cddadr)
        (g$5511$12l&&U core-prim . cddaar)
        (g$5510$12l&&U core-prim . cdaddr)
        (g$5509$12l&&U core-prim . cdadar)
        (g$5508$12l&&U core-prim . cdaadr)
        (g$5507$12l&&U core-prim . cdaaar)
        (g$5506$12l&&U core-prim . cadddr)
        (g$5505$12l&&U core-prim . caddar)
        (g$5504$12l&&U core-prim . cadadr)
        (g$5503$12l&&U core-prim . cadaar)
        (g$5502$12l&&U core-prim . caaddr)
        (g$5501$12l&&U core-prim . caadar)
        (g$5500$12l&&U core-prim . caaadr)
        (g$5499$12l&&U core-prim . caaaar)
        (g$5498$12l&&U core-prim . cdddr)
        (g$5497$12l&&U core-prim . cddar)
        (g$5496$12l&&U core-prim . cdadr)
        (g$5495$12l&&U core-prim . cdaar)
        (g$5494$12l&&U core-prim . caddr)
        (g$5493$12l&&U core-prim . cadar)
        (g$5492$12l&&U core-prim . caadr)
        (g$5491$12l&&U core-prim . caaar)
        (g$5490$12l&&U core-prim . cddr)
        (g$5489$12l&&U core-prim . cdar)
        (g$5488$12l&&U core-prim . cadr)
        (g$5487$12l&&U core-prim . caar)
        (g$12879$12l&&U core-prim . cdr)
        (g$12878$12l&&U core-prim . car)
        (g$5471$12l&&U core-prim . boolean?)
        (g$5535$12l&&U core-prim . boolean=?)
        (g$12877$12l&&U core-prim . atan)
        (g$12876$12l&&U core-prim . assertion-violation)
        (g$12875$12l&&U core-prim . asin)
        (g$12874$12l&&U core-prim . apply)
        (g$12873$12l&&U core-prim . append)
        (g$12872$12l&&U core-prim . angle)
        (g$12871$12l&&U core-prim . acos)
        (g$12870$12l&&U core-prim . abs)
        (g$12869$12l&&U core-prim . /)
        (g$12868$12l&&U core-prim . *)
        (g$12867$12l&&U core-prim . -)
        (g$12866$12l&&U core-prim . +)
        (g$12865$12l&&U core-prim . >=)
        (g$12864$12l&&U core-prim . >)
        (g$12863$12l&&U core-prim . =)
        (g$12862$12l&&U core-prim . <=)
        (g$12861$12l&&U core-prim . <)
        (g$12860$12l&&U core-prim . $fl>=?)
        (g$12859$12l&&U core-prim . $fl>?)
        (g$12858$12l&&U core-prim . $fl<=?)
        (g$12857$12l&&U core-prim . $fl<?)
        (g$12856$12l&&U core-prim . $fl-)
        (g$12855$12l&&U core-prim . $fl/)
        (g$12854$12l&&U core-prim . $fl*)
        (g$12853$12l&&U core-prim . $fl+)
        (g$12852$12l&&U core-prim . $fl=?)
        (g$12851$12l&&U core-prim . $try)
        (g$12850$12l&&U core-prim . $fxarithmetic-shift-right)
        (g$12849$12l&&U core-prim . $fxarithmetic-shift-left)
        (g$12848$12l&&U core-prim . $$fx-)
        (g$12847$12l&&U core-prim . $$fx*)
        (g$12846$12l&&U core-prim . $$fx+)
        (g$12845$12l&&U core-prim . $fxnot)
        (g$12844$12l&&U core-prim . $fxxor)
        (g$12843$12l&&U core-prim . $fxior)
        (g$12842$12l&&U core-prim . $fxand)
        (g$12841$12l&&U core-prim . $fx>=?)
        (g$12840$12l&&U core-prim . $fx>?)
        (g$12839$12l&&U core-prim . $fx<=?)
        (g$12838$12l&&U core-prim . $fx<?)
        (g$12837$12l&&U core-prim . $fx-)
        (g$12836$12l&&U core-prim . $fxmod0)
        (g$12835$12l&&U core-prim . $fxdiv0)
        (g$12834$12l&&U core-prim . $fx*)
        (g$12833$12l&&U core-prim . $fx+)
        (g$12832$12l&&U core-prim . $fx=?)
        (g$12831$12l&&U core-prim . $vector-set!)
        (g$12830$12l&&U core-prim . $vector-ref)
        (g$12829$12l&&U core-prim . $cdr)
        (g$12828$12l&&U core-prim . $car)
        (g$12827$12l&&U core-prim . make-record-printer)
        (g$12826$12l&&U core-prim . eqv-hash)
        (g$12825$12l&&U core-prim . reverse!)
        (g$12824$12l&&U core-prim . deserialize-port)
        (g$12823$12l&&U core-prim . serialize-port)
        (g$8158$12l&&U core-prim . enum-set?)
        (g$6318$12l&&U core-prim . make-promise)
        (g$12637$12l&&U core-prim . load/unload)
        (g$12636$12l&&U core-prim . load/args)
        (g$8267$12l&&U core-prim . printf)
        (g$8268$12l&&U core-prim . fprintf)
        (g$8269$12l&&U core-prim . format)
        (g$12822$12l&&U core-prim . procedure-form)
        (g$12821$12l&&U core-prim . procedure-environment)
        (g$12820$12l&&U core-prim . procedure-name)
        (g$12819$12l&&U core-prim . procedure-arity)
        (g$12818$12l&&U core-prim . gc-collect)
        (g$12817$12l&&U core-prim . typeof)
        (g$12816$12l&&U core-prim . clr-type?)
        (g$12815$12l&&U core-prim . get-clr-type)
        (g$12814$12l&&U core-prim . get-command-line)
        (g$12813$12l&&U core-prim . vector-append)
        (g$12812$12l&&U core-prim . vector-filter)
        (g$12811$12l&&U core-prim . vector-reverse!)
        (g$12810$12l&&U core-prim . vector-contains?)
        (g$12809$12l&&U core-prim . vector-index-of)
        (g$12808$12l&&U core-prim . vector-copy)
        (g$12807$12l&&U core-prim . vector-binary-search)
        (g$12806$12l&&U core-prim . string-ci-compare)
        (g$12805$12l&&U core-prim . string-compare)
        (g$12804$12l&&U core-prim . string-format)
        (g$12633$12l&&U core-prim . trace-printer)
        (g$12803$12l&&U core-prim . make-traced-procedure)
        (g$8289$12l&&U core-prim . make-traced-macro)
        (g$9611$12l&&U core-prim . assertion-error)
        (g$12802$12l&&U core-prim . time-it)
        (g$8296$12l&&U core-prim . make-parameter)
        (g$12801$12l&&U core-prim . library-locator)
        (g$12800$12l&&U core-prim . get-library-paths)
        (g$12799$12l&&U core-prim . open-tcp-input/output-port)
        (g$12798$12l&&U core-prim . hashtable-for-each)
        (g$12797$12l&&U core-prim . hashtable-map)
        (g$9589$12l&&U core-prim . environment-bindings)
        (g$9592$12l&&U core-prim . environment-symbols)
        (g$9588$12l&&U core-prim . interaction-environment-symbols)
        (g$12796$12l&&U core-prim . optimization-level)
        (g$8918$12l&&U core-prim . library-path)
        (g$9297$12l&&U core-prim . make-compile-time-value)
        (g$9598$12l&&U core-prim . expand->core)
        (g$9596$12l&&U core-prim . expand)
        (g$9535$12l&&U core-prim . syntax-transpose)
        (g$8615$12l&&U core-prim . convert->cps)
        (g$8939$12l&&U core-prim . installed-libraries)
        (g$8930$12l&&U core-prim . uninstall-library)
        (g$8379$12l&&U core-prim . pretty-gensyms)
        (g$8376$12l&&U core-prim . pretty-width)
        (g$8381$12l&&U core-prim . pretty-print)
        (g$12795$12l&&U $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$12794$12l&&U $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$12793$12l&&U $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$12792$12l&&U $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$12791$12l&&U $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$12790$12l&&U
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$12789$12l&&U
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$12788$12l&&U
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$12787$12l&&U
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$12786$12l&&U $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$12785$12l&&U
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$12784$12l&&U $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$12783$12l&&U $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$12782$12l&&U $core-rtd &i/o-rtd &i/o-rcd)
        (g$12781$12l&&U
          $core-rtd
          &non-continuable-rtd
          &non-continuable-rcd)
        (g$12780$12l&&U $core-rtd &undefined-rtd &undefined-rcd)
        (g$12779$12l&&U $core-rtd &syntax-rtd &syntax-rcd)
        (g$12778$12l&&U $core-rtd &lexical-rtd &lexical-rcd)
        (g$12777$12l&&U
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$12776$12l&&U $core-rtd &who-rtd &who-rcd)
        (g$12775$12l&&U $core-rtd &irritants-rtd &irritants-rcd)
        (g$12774$12l&&U $core-rtd &assertion-rtd &assertion-rcd)
        (g$12773$12l&&U $core-rtd &violation-rtd &violation-rcd)
        (g$12772$12l&&U $core-rtd &error-rtd &error-rcd)
        (g$12771$12l&&U $core-rtd &serious-rtd &serious-rcd)
        (g$12770$12l&&U $core-rtd &warning-rtd &warning-rcd)
        (g$12769$12l&&U $core-rtd &message-rtd &message-rcd)
        (g$12768$12l&&U $core-rtd &condition-rtd &condition-rcd)
        (g$12767$12l&&U macro . define-condition-type)
        (g$12766$12l&&U macro . define-enumeration)
        (g$12765$12l&&U macro . define-record-type)
        (g$12764$12l&&U macro . parent-rtd)
        (g$12763$12l&&U macro . nongenerative)
        (g$12762$12l&&U macro . opaque)
        (g$12761$12l&&U macro . sealed)
        (g$12760$12l&&U macro . protocol)
        (g$12759$12l&&U macro . parent)
        (g$12758$12l&&U macro . immutable)
        (g$12757$12l&&U macro . mutable)
        (g$12756$12l&&U macro . fields)
        (g$12755$12l&&U macro . error-handling-mode)
        (g$12754$12l&&U macro . file-options)
        (g$12753$12l&&U macro . buffer-mode)
        (g$12752$12l&&U macro . eol-style)
        (g$12751$12l&&U macro . guard)
        (g$12750$12l&&U macro . trace-letrec-syntax)
        (g$12749$12l&&U macro . trace-let-syntax)
        (g$12748$12l&&U macro . trace-define-syntax)
        (g$12747$12l&&U macro . trace-define)
        (g$12746$12l&&U macro . trace-lambda)
        (g$12745$12l&&U macro . unsyntax-splicing)
        (g$12744$12l&&U macro . unsyntax)
        (g$12743$12l&&U macro . unquote-splicing)
        (g$12742$12l&&U macro . unquote)
        (g$12741$12l&&U macro . _)
        (g$12740$12l&&U macro . else)
        (g$12739$12l&&U macro . =>)
        (g$12738$12l&&U macro . ...)
        (g$12737$12l&&U macro . assert)
        (g$12736$12l&&U macro . endianness)
        (g$12735$12l&&U macro . delay)
        (g$12734$12l&&U macro . time)
        (g$12733$12l&&U macro . or)
        (g$12732$12l&&U macro . and)
        (g$12731$12l&&U macro . do)
        (g$12730$12l&&U macro . cond)
        (g$12729$12l&&U macro . let*)
        (g$12728$12l&&U macro . let)
        (g$12727$12l&&U macro . identifier-syntax)
        (g$12726$12l&&U macro . with-syntax)
        (g$12725$12l&&U macro . quasisyntax)
        (g$12724$12l&&U macro . quasiquote)
        (g$12723$12l&&U macro . syntax-rules)
        (g$12722$12l&&U macro . include-into)
        (g$12721$12l&&U macro . include)
        (g$12720$12l&&U macro . define-struct)
        (g$12719$12l&&U macro . let-values)
        (g$12718$12l&&U macro . let*-values)
        (g$12717$12l&&U core-macro . record-constructor-descriptor)
        (g$12716$12l&&U core-macro . record-type-descriptor)
        (g$12715$12l&&U core-macro . fluid-let-syntax)
        (g$12714$12l&&U macro . case)
        (g$12713$12l&&U macro . parameterize)
        (g$12712$12l&&U macro . unless)
        (g$12711$12l&&U macro . when)
        (g$12710$12l&&U core-macro . if)
        (g$12709$12l&&U core-macro . letrec*)
        (g$12708$12l&&U core-macro . letrec)
        (g$12707$12l&&U core-macro . type-descriptor)
        (g$12706$12l&&U core-macro . case-lambda)
        (g$12705$12l&&U core-macro . lambda)
        (g$12704$12l&&U core-macro . syntax)
        (g$12703$12l&&U core-macro . syntax-case)
        (g$12702$12l&&U core-macro . quote)
        (g$12701$12l&&U core-macro . foreign-call)
        (g$12700$12l&&U letrec-syntax)
        (g$12699$12l&&U let-syntax)
        (g$12698$12l&&U set!)
        (g$12697$12l&&U export)
        (g$12696$12l&&U import)
        (g$12695$12l&&U library)
        (g$12694$12l&&U begin)
        (g$12693$12l&&U module)
        (g$12692$12l&&U define-syntax)
        (g$12691$12l&&U define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$18895$12l&&U
      'g$13198$12l&&U
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$13136$12l&&U)
        (eval-core . g$13135$12l&&U)
        (set-symbol-value! . g$13133$12l&&U)
        (symbol-value . g$13132$12l&&U)
        (gensym . g$13129$12l&&U)
        (void . g$13128$12l&&U))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$23407$12l&&U
     g$trace-printer$23472$12l&&U
     (g$make-parameter$18052$12l&&U g$pretty-print$18262$12l&&U))
   (g$command-line$23408$12l&&U
     g$command-line$23473$12l&&U
     (g$make-parameter$18052$12l&&U (get-command-line)))
   (g$local-library-path$23409$12l&&U
     g$local-library-path$23474$12l&&U
     (case-lambda
       ((g$filename$23423$12l&&U)
        (cons
          (g$get-directory-name$12708$12l&&U g$filename$23423$12l&&U)
          (g$library-path$18879$12l&&U)))))
   (g$load/args$23410$12l&&U
     g$load/args$23475$12l&&U
     (case-lambda
       ((g$filename$23424$12l&&U . g$args$23425$12l&&U)
        (begin
          (apply
            g$load-r6rs-top-level$23420$12l&&U
            g$filename$23424$12l&&U
            'load
            g$args$23425$12l&&U)
          (void)))))
   (g$load/unload$23411$12l&&U
     g$load/unload$23476$12l&&U
     (case-lambda
       ((g$filename$23426$12l&&U)
        ((case-lambda
           ((g$libs$23427$12l&&U)
            (begin
              (g$load$23412$12l&&U g$filename$23426$12l&&U)
              (g$for-each$11836$12l&&U
                (case-lambda
                  ((g$lib$23428$12l&&U)
                   (if (not (g$memq$11827$12l&&U
                              g$lib$23428$12l&&U
                              g$libs$23427$12l&&U))
                     (g$uninstall-library$18891$12l&&U
                       g$lib$23428$12l&&U)
                     (void))))
                (g$installed-libraries$18900$12l&&U)))))
         (g$installed-libraries$18900$12l&&U)))))
   (g$load$23412$12l&&U
     g$load$23477$12l&&U
     (case-lambda
       ((g$filename$23429$12l&&U)
        (begin
          (apply
            g$load-r6rs-top-level$23420$12l&&U
            g$filename$23429$12l&&U
            'load
            (cdr (g$command-line$23408$12l&&U)))
          (void)))))
   (g$ironscheme-build$23413$12l&&U
     g$ironscheme-build$23478$12l&&U
     (case-lambda
       (() (g$ironscheme-build$23413$12l&&U '#f))
       ((g$cps?$23430$12l&&U)
        (begin
          (g$call-with-output-file$17668$12l&&U
            '"build-options.ss"
            (case-lambda
              ((g$p$23431$12l&&U)
               (begin
                 (write
                   (list 'define-option 'cps-mode g$cps?$23430$12l&&U)
                   g$p$23431$12l&&U)
                 (write
                   (list
                     'define-option
                     'if-wants-letrec*
                     (not g$cps?$23430$12l&&U))
                   g$p$23431$12l&&U)
                 (g$newline$17669$12l&&U g$p$23431$12l&&U)))))
          (g$load$23412$12l&&U '"ironscheme-buildscript.ss")))))
   (g$foreground-color$23414$12l&&U
     g$foreground-color$23479$12l&&U
     (case-lambda
       (() (clr-call-internal 'console 'get_foregroundcolor '()))
       ((g$color$23432$12l&&U)
        (clr-call-internal
          'console
          'set_foregroundcolor
          '()
          g$color$23432$12l&&U))))
   (g$system-exception?$23415$12l&&U
     g$system-exception?$23480$12l&&U
     (case-lambda
       ((g$e$23433$12l&&U)
        (clr-is-internal 'SystemException g$e$23433$12l&&U))))
   (g$eval-top-level$23416$12l&&U
     g$eval-top-level$23481$12l&&U
     (case-lambda
       ((g$x$23434$12l&&U)
        (call/cc
          (case-lambda
            ((g$k$23435$12l&&U)
             (with-exception-handler
               (case-lambda
                 ((g$e$23436$12l&&U)
                  ((case-lambda
                     ((g$serious?$23437$12l&&U)
                      (begin
                        ((case-lambda
                           ((g$foreground-color$23442$12l&&U
                              g$current-output-port$23443$12l&&U
                              g$foreground-color$23444$12l&&U
                              g$current-output-port$23445$12l&&U)
                            ((case-lambda
                               ((g$swap$23446$12l&&U)
                                (dynamic-wind
                                  g$swap$23446$12l&&U
                                  (case-lambda
                                    (()
                                     (begin
                                       (if g$serious?$23437$12l&&U
                                         (display
                                           '"Unhandled exception during evaluation:
")
                                         (void))
                                       (display g$e$23436$12l&&U)
                                       (g$newline$17669$12l&&U))))
                                  g$swap$23446$12l&&U)))
                             (case-lambda
                               (()
                                (begin
                                  ((case-lambda
                                     ((g$t$23447$12l&&U)
                                      (begin
                                        (g$foreground-color$23442$12l&&U
                                          g$foreground-color$23444$12l&&U)
                                        (set! g$foreground-color$23444$12l&&U
                                          g$t$23447$12l&&U))))
                                   (g$foreground-color$23442$12l&&U))
                                  ((case-lambda
                                     ((g$t$23448$12l&&U)
                                      (begin
                                        (g$current-output-port$23443$12l&&U
                                          g$current-output-port$23445$12l&&U)
                                        (set! g$current-output-port$23445$12l&&U
                                          g$t$23448$12l&&U))))
                                   (g$current-output-port$23443$12l&&U))))))))
                         g$foreground-color$23414$12l&&U
                         current-output-port
                         (if g$serious?$23437$12l&&U 'red 'yellow)
                         (current-error-port))
                        (if g$serious?$23437$12l&&U
                          (g$k$23435$12l&&U)
                          (void)))))
                   ((case-lambda
                      ((g$t$23449$12l&&U)
                       (if g$t$23449$12l&&U
                         g$t$23449$12l&&U
                         (begin
                           '#f
                           (g$system-exception?$23415$12l&&U
                             g$e$23436$12l&&U)))))
                    (g$serious-condition?$13281$12l&&U
                      g$e$23436$12l&&U)))))
               (case-lambda
                 (()
                  (g$eval$23380$12l&&U
                    g$x$23434$12l&&U
                    (g$interaction-environment$23405$12l&&U)))))))))))
   (g$compile-system-libraries$23417$12l&&U
     g$compile-system-libraries$23482$12l&&U
     (case-lambda
       (()
        (g$eval-top-level$23416$12l&&U
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$23418$12l&&U
     g$compile$23483$12l&&U
     (case-lambda
       ((g$filename$23450$12l&&U)
        (g$load-r6rs-top-level$23420$12l&&U
          g$filename$23450$12l&&U
          'compile))))
   (g$compile->closure$23419$12l&&U
     g$compile->closure$23484$12l&&U
     (case-lambda
       ((g$filename$23451$12l&&U)
        (g$load-r6rs-top-level$23420$12l&&U
          g$filename$23451$12l&&U
          'closure))))
   (g$load-r6rs-top-level$23420$12l&&U
     g$load-r6rs-top-level$23485$12l&&U
     (case-lambda
       ((g$filename$23452$12l&&U
          g$how$23453$12l&&U
          .
          g$args$23454$12l&&U)
        ((case-lambda
           ((g$library-path$23457$12l&&U g$library-path$23458$12l&&U)
            ((case-lambda
               ((g$swap$23459$12l&&U)
                (dynamic-wind
                  g$swap$23459$12l&&U
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$23460$12l&&U)
                         ((case-lambda
                            ((g$t$23461$12l&&U)
                             (if (eqv? g$t$23461$12l&&U 'closure)
                               (g$pre-compile-r6rs-top-level$23403$12l&&U
                                 g$x*$23460$12l&&U)
                               (if (eqv? g$t$23461$12l&&U 'load)
                                 ((case-lambda
                                    ((g$command-line$23464$12l&&U
                                       g$command-line$23465$12l&&U)
                                     ((case-lambda
                                        ((g$swap$23466$12l&&U)
                                         (dynamic-wind
                                           g$swap$23466$12l&&U
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$23402$12l&&U
                                                 g$x*$23460$12l&&U))))
                                           g$swap$23466$12l&&U)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$23467$12l&&U)
                                             (begin
                                               (g$command-line$23464$12l&&U
                                                 g$command-line$23465$12l&&U)
                                               (set! g$command-line$23465$12l&&U
                                                 g$t$23467$12l&&U))))
                                          (g$command-line$23464$12l&&U)))))))
                                  g$command-line$23408$12l&&U
                                  (cons
                                    g$filename$23452$12l&&U
                                    (g$map$11835$12l&&U
                                      (case-lambda
                                        ((g$x$23468$12l&&U)
                                         (g$format$17843$12l&&U
                                           '"~a"
                                           g$x$23468$12l&&U)))
                                      g$args$23454$12l&&U)))
                                 (if (eqv? g$t$23461$12l&&U 'compile)
                                   (begin
                                     (g$compile-r6rs-top-level$23402$12l&&U
                                       g$x*$23460$12l&&U)
                                     (g$serialize-all$18883$12l&&U
                                       serialize-library
                                       g$compile-core-expr$18630$12l&&U))
                                   (if '#f '#f (void)))))))
                          g$how$23453$12l&&U)))
                      (g$with-input-from-file$17665$12l&&U
                        g$filename$23452$12l&&U
                        (case-lambda
                          (()
                           ((letrec ((g$f$23469$12l&&U
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$23470$12l&&U)
                                              (if (eof-object?
                                                    g$x$23470$12l&&U)
                                                '()
                                                (cons
                                                  g$x$23470$12l&&U
                                                  (g$f$23469$12l&&U)))))
                                           (read-annotated))))))
                              g$f$23469$12l&&U))))))))
                  g$swap$23459$12l&&U)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$23471$12l&&U)
                    (begin
                      (g$library-path$23457$12l&&U
                        g$library-path$23458$12l&&U)
                      (set! g$library-path$23458$12l&&U
                        g$t$23471$12l&&U))))
                 (g$library-path$23457$12l&&U)))))))
         g$library-path$18879$12l&&U
         (g$local-library-path$23409$12l&&U g$filename$23452$12l&&U)))))
   (g$fo$23421$12l&&U
     g$fo$23486$12l&&U
     (g$make-enumeration$17805$12l&&U
       '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$18884$12l&&U
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$23422$12l&&U)
         (if (g$serious-condition?$13281$12l&&U g$ex$23422$12l&&U)
           (raise g$ex$23422$12l&&U)
           (begin
             (display g$ex$23422$12l&&U)
             (g$newline$17669$12l&&U))))))
    (set-symbol-value! 'load g$load$23412$12l&&U)
    (set-symbol-value! 'compile g$compile$23418$12l&&U)
    (set-symbol-value!
      'compile->closure
      g$compile->closure$23419$12l&&U)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$23416$12l&&U)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$23371$12l&&U)
    (set-symbol-value! 'expanded2core g$expanded->core$18629$12l&&U)
    (set-symbol-value! 'trace-printer g$trace-printer$23407$12l&&U)
    (set-symbol-value! 'convert->cps g$convert->cps$18580$12l&&U)
    (set-symbol-value! 'assertion-violation assertion-violation)
    (set-symbol-value! 'raise raise)
    (g$file-options-constructor$18053$12l&&U
      (g$enum-set-constructor$17808$12l&&U g$fo$23421$12l&&U))
    (g$library-path$18879$12l&&U (get-library-paths))
    (g$library-extensions$18880$12l&&U
      (cons '".ironscheme.sls" (g$library-extensions$18880$12l&&U)))))

