;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (psyntax config) () (void))

(library-letrec* (ironscheme lists)
  ((g$list-tail$19049$1LXXoO
     g$list-tail$19205$1LXXoO
     (case-lambda
       ((g$lst$19077$1LXXoO g$index$19078$1LXXoO)
        (if ((case-lambda
               ((g$t$19079$1LXXoO)
                (if g$t$19079$1LXXoO
                  g$t$19079$1LXXoO
                  (begin
                    '#f
                    (g$negative?$20713$1LXXoO g$index$19078$1LXXoO)))))
             (null? g$lst$19077$1LXXoO))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$19077$1LXXoO
            g$index$19078$1LXXoO)
          (if (g$zero?$20711$1LXXoO g$index$19078$1LXXoO)
            g$lst$19077$1LXXoO
            (begin
              '#f
              (g$list-tail$19049$1LXXoO
                (cdr g$lst$19077$1LXXoO)
                (- g$index$19078$1LXXoO '1))))))))
   (g$list-ref$19050$1LXXoO
     g$list-ref$19206$1LXXoO
     (case-lambda
       ((g$lst$19080$1LXXoO g$index$19081$1LXXoO)
        (car (g$list-tail$19049$1LXXoO
               g$lst$19080$1LXXoO
               g$index$19081$1LXXoO)))))
   (g$last-pair$19051$1LXXoO
     g$last-pair$19207$1LXXoO
     (case-lambda
       ((g$lst$19082$1LXXoO)
        (if (null? g$lst$19082$1LXXoO)
          g$lst$19082$1LXXoO
          (if (null? (cdr g$lst$19082$1LXXoO))
            g$lst$19082$1LXXoO
            (begin
              '#f
              (g$last-pair$19051$1LXXoO (cdr g$lst$19082$1LXXoO))))))))
   (g$make-list$19052$1LXXoO
     g$make-list$19208$1LXXoO
     (case-lambda
       ((g$n$19083$1LXXoO)
        (vector->list (make-vector g$n$19083$1LXXoO)))
       ((g$n$19084$1LXXoO g$fill$19085$1LXXoO)
        (vector->list
          (make-vector g$n$19084$1LXXoO g$fill$19085$1LXXoO)))))
   (g$find$19053$1LXXoO
     g$find$19209$1LXXoO
     (case-lambda
       ((g$proc$19086$1LXXoO g$l$19087$1LXXoO)
        (if (null? g$l$19087$1LXXoO)
          '#f
          ((case-lambda
             ((g$e$19088$1LXXoO g$r$19089$1LXXoO g$proc$19090$1LXXoO)
              (if (g$proc$19090$1LXXoO g$e$19088$1LXXoO)
                g$e$19088$1LXXoO
                (g$find$19053$1LXXoO
                  g$proc$19090$1LXXoO
                  g$r$19089$1LXXoO))))
           (car g$l$19087$1LXXoO)
           (cdr g$l$19087$1LXXoO)
           g$proc$19086$1LXXoO)))))
   (g$partition$19054$1LXXoO
     g$partition$19210$1LXXoO
     (case-lambda
       ((g$proc$19091$1LXXoO g$l$19092$1LXXoO)
        ((letrec ((g$f$19093$1LXXoO
                    (case-lambda
                      ((g$l$19094$1LXXoO
                         g$a$19095$1LXXoO
                         g$b$19096$1LXXoO)
                       (if (null? g$l$19094$1LXXoO)
                         (values
                           (reverse! g$a$19095$1LXXoO)
                           (reverse! g$b$19096$1LXXoO))
                         ((case-lambda
                            ((g$e$19097$1LXXoO)
                             (if (g$proc$19091$1LXXoO g$e$19097$1LXXoO)
                               (g$f$19093$1LXXoO
                                 (cdr g$l$19094$1LXXoO)
                                 (cons
                                   g$e$19097$1LXXoO
                                   g$a$19095$1LXXoO)
                                 g$b$19096$1LXXoO)
                               (g$f$19093$1LXXoO
                                 (cdr g$l$19094$1LXXoO)
                                 g$a$19095$1LXXoO
                                 (cons
                                   g$e$19097$1LXXoO
                                   g$b$19096$1LXXoO)))))
                          (car g$l$19094$1LXXoO)))))))
           g$f$19093$1LXXoO)
         g$l$19092$1LXXoO
         '()
         '()))))
   (g$remp$19055$1LXXoO
     g$remp$19211$1LXXoO
     (case-lambda
       ((g$proc$19098$1LXXoO g$l$19099$1LXXoO)
        ((letrec ((g$f$19100$1LXXoO
                    (case-lambda
                      ((g$l$19101$1LXXoO g$a$19102$1LXXoO)
                       (if (null? g$l$19101$1LXXoO)
                         (reverse! g$a$19102$1LXXoO)
                         ((case-lambda
                            ((g$e$19103$1LXXoO)
                             (if (g$proc$19098$1LXXoO g$e$19103$1LXXoO)
                               (g$f$19100$1LXXoO
                                 (cdr g$l$19101$1LXXoO)
                                 g$a$19102$1LXXoO)
                               (g$f$19100$1LXXoO
                                 (cdr g$l$19101$1LXXoO)
                                 (cons
                                   g$e$19103$1LXXoO
                                   g$a$19102$1LXXoO)))))
                          (car g$l$19101$1LXXoO)))))))
           g$f$19100$1LXXoO)
         g$l$19099$1LXXoO
         '()))))
   (g$filter$19056$1LXXoO
     g$filter$19212$1LXXoO
     (case-lambda
       ((g$proc$19104$1LXXoO g$l$19105$1LXXoO)
        ((letrec ((g$f$19106$1LXXoO
                    (case-lambda
                      ((g$l$19107$1LXXoO g$a$19108$1LXXoO)
                       (if (null? g$l$19107$1LXXoO)
                         (reverse! g$a$19108$1LXXoO)
                         ((case-lambda
                            ((g$e$19109$1LXXoO)
                             (if (g$proc$19104$1LXXoO g$e$19109$1LXXoO)
                               (g$f$19106$1LXXoO
                                 (cdr g$l$19107$1LXXoO)
                                 (cons
                                   g$e$19109$1LXXoO
                                   g$a$19108$1LXXoO))
                               (g$f$19106$1LXXoO
                                 (cdr g$l$19107$1LXXoO)
                                 g$a$19108$1LXXoO))))
                          (car g$l$19107$1LXXoO)))))))
           g$f$19106$1LXXoO)
         g$l$19105$1LXXoO
         '()))))
   (g$assq$19057$1LXXoO
     g$assq$19213$1LXXoO
     (case-lambda
       ((g$obj$19110$1LXXoO g$lst$19111$1LXXoO)
        (if (null? g$lst$19111$1LXXoO)
          '#f
          ((case-lambda
             ((g$obj$19112$1LXXoO g$t$19113$1LXXoO g$r$19114$1LXXoO)
              (if (eq? g$obj$19112$1LXXoO (car g$t$19113$1LXXoO))
                g$t$19113$1LXXoO
                (g$assq$19057$1LXXoO
                  g$obj$19112$1LXXoO
                  g$r$19114$1LXXoO))))
           g$obj$19110$1LXXoO
           (car g$lst$19111$1LXXoO)
           (cdr g$lst$19111$1LXXoO))))))
   (g$assv$19058$1LXXoO
     g$assv$19214$1LXXoO
     (case-lambda
       ((g$obj$19115$1LXXoO g$lst$19116$1LXXoO)
        (if (null? g$lst$19116$1LXXoO)
          '#f
          ((case-lambda
             ((g$obj$19117$1LXXoO g$t$19118$1LXXoO g$r$19119$1LXXoO)
              (if (eqv? g$obj$19117$1LXXoO (car g$t$19118$1LXXoO))
                g$t$19118$1LXXoO
                (g$assv$19058$1LXXoO
                  g$obj$19117$1LXXoO
                  g$r$19119$1LXXoO))))
           g$obj$19115$1LXXoO
           (car g$lst$19116$1LXXoO)
           (cdr g$lst$19116$1LXXoO))))))
   (g$assoc$19059$1LXXoO
     g$assoc$19215$1LXXoO
     (case-lambda
       ((g$obj$19120$1LXXoO g$lst$19121$1LXXoO)
        (if (null? g$lst$19121$1LXXoO)
          '#f
          ((case-lambda
             ((g$obj$19122$1LXXoO g$t$19123$1LXXoO g$r$19124$1LXXoO)
              (if (equal? g$obj$19122$1LXXoO (car g$t$19123$1LXXoO))
                g$t$19123$1LXXoO
                (g$assoc$19059$1LXXoO
                  g$obj$19122$1LXXoO
                  g$r$19124$1LXXoO))))
           g$obj$19120$1LXXoO
           (car g$lst$19121$1LXXoO)
           (cdr g$lst$19121$1LXXoO))))))
   (g$assp$19060$1LXXoO
     g$assp$19216$1LXXoO
     (case-lambda
       ((g$p?$19125$1LXXoO g$lst$19126$1LXXoO)
        (if (null? g$lst$19126$1LXXoO)
          '#f
          ((case-lambda
             ((g$p?$19127$1LXXoO g$t$19128$1LXXoO g$r$19129$1LXXoO)
              (if (g$p?$19127$1LXXoO (car g$t$19128$1LXXoO))
                g$t$19128$1LXXoO
                (g$assp$19060$1LXXoO
                  g$p?$19127$1LXXoO
                  g$r$19129$1LXXoO))))
           g$p?$19125$1LXXoO
           (car g$lst$19126$1LXXoO)
           (cdr g$lst$19126$1LXXoO))))))
   (g$memq$19061$1LXXoO
     g$memq$19217$1LXXoO
     (case-lambda
       ((g$obj$19130$1LXXoO g$lst$19131$1LXXoO)
        (if (null? g$lst$19131$1LXXoO)
          '#f
          (if (eq? g$obj$19130$1LXXoO (car g$lst$19131$1LXXoO))
            g$lst$19131$1LXXoO
            (g$memq$19061$1LXXoO
              g$obj$19130$1LXXoO
              (cdr g$lst$19131$1LXXoO)))))))
   (g$memv$19062$1LXXoO
     g$memv$19218$1LXXoO
     (case-lambda
       ((g$obj$19132$1LXXoO g$lst$19133$1LXXoO)
        (if (null? g$lst$19133$1LXXoO)
          '#f
          (if (eqv? g$obj$19132$1LXXoO (car g$lst$19133$1LXXoO))
            g$lst$19133$1LXXoO
            (g$memv$19062$1LXXoO
              g$obj$19132$1LXXoO
              (cdr g$lst$19133$1LXXoO)))))))
   (g$member$19063$1LXXoO
     g$member$19219$1LXXoO
     (case-lambda
       ((g$obj$19134$1LXXoO g$lst$19135$1LXXoO)
        (if (null? g$lst$19135$1LXXoO)
          '#f
          (if (equal? g$obj$19134$1LXXoO (car g$lst$19135$1LXXoO))
            g$lst$19135$1LXXoO
            (g$member$19063$1LXXoO
              g$obj$19134$1LXXoO
              (cdr g$lst$19135$1LXXoO)))))))
   (g$memp$19064$1LXXoO
     g$memp$19220$1LXXoO
     (case-lambda
       ((g$p?$19136$1LXXoO g$lst$19137$1LXXoO)
        (if (null? g$lst$19137$1LXXoO)
          '#f
          (if (g$p?$19136$1LXXoO (car g$lst$19137$1LXXoO))
            g$lst$19137$1LXXoO
            (g$memp$19064$1LXXoO
              g$p?$19136$1LXXoO
              (cdr g$lst$19137$1LXXoO)))))))
   (g$all-empty?$19065$1LXXoO
     g$all-empty?$19221$1LXXoO
     (case-lambda
       ((g$ls$19138$1LXXoO)
        ((case-lambda
           ((g$t$19139$1LXXoO)
            (if g$t$19139$1LXXoO
              g$t$19139$1LXXoO
              (begin
                '#f
                (if (null? (car g$ls$19138$1LXXoO))
                  (begin
                    '#f
                    (g$all-empty?$19065$1LXXoO (cdr g$ls$19138$1LXXoO)))
                  '#f)))))
         (null? g$ls$19138$1LXXoO)))))
   (g$split$19066$1LXXoO
     g$split$19222$1LXXoO
     (case-lambda
       ((g$ls$19140$1LXXoO)
        (if (null? g$ls$19140$1LXXoO)
          (values '() '())
          (begin
            '#f
            (call-with-values
              (case-lambda
                (() (g$split$19066$1LXXoO (cdr g$ls$19140$1LXXoO))))
              (case-lambda
                ((g$cars$19141$1LXXoO g$cdrs$19142$1LXXoO)
                 ((case-lambda
                    ((g$a$19143$1LXXoO)
                     (values
                       (cons (car g$a$19143$1LXXoO) g$cars$19141$1LXXoO)
                       (cons
                         (cdr g$a$19143$1LXXoO)
                         g$cdrs$19142$1LXXoO))))
                  (car g$ls$19140$1LXXoO))))))))))
   (g$for-all$19067$1LXXoO
     g$for-all$19223$1LXXoO
     (case-lambda
       ((g$f$19144$1LXXoO g$arg1$19145$1LXXoO)
        (if (null? g$arg1$19145$1LXXoO)
          '#t
          (if (null? (cdr g$arg1$19145$1LXXoO))
            (g$f$19144$1LXXoO (car g$arg1$19145$1LXXoO))
            (if (g$f$19144$1LXXoO (car g$arg1$19145$1LXXoO))
              (begin
                '#f
                (g$for-all$19067$1LXXoO
                  g$f$19144$1LXXoO
                  (cdr g$arg1$19145$1LXXoO)))
              '#f))))
       ((g$f$19146$1LXXoO g$arg1$19147$1LXXoO . g$args$19148$1LXXoO)
        ((case-lambda
           ((g$args$19149$1LXXoO)
            (if (g$all-empty?$19065$1LXXoO g$args$19149$1LXXoO)
              '#t
              (call-with-values
                (case-lambda
                  (() (g$split$19066$1LXXoO g$args$19149$1LXXoO)))
                (case-lambda
                  ((g$cars$19150$1LXXoO g$cdrs$19151$1LXXoO)
                   (if (g$all-empty?$19065$1LXXoO g$cdrs$19151$1LXXoO)
                     (apply g$f$19146$1LXXoO g$cars$19150$1LXXoO)
                     (if (apply g$f$19146$1LXXoO g$cars$19150$1LXXoO)
                       (begin
                         '#f
                         (apply
                           g$for-all$19067$1LXXoO
                           g$f$19146$1LXXoO
                           g$cdrs$19151$1LXXoO))
                       '#f))))))))
         (cons g$arg1$19147$1LXXoO g$args$19148$1LXXoO)))))
   (g$exists$19068$1LXXoO
     g$exists$19224$1LXXoO
     (case-lambda
       ((g$f$19152$1LXXoO g$arg1$19153$1LXXoO)
        (if (null? g$arg1$19153$1LXXoO)
          '#f
          ((case-lambda
             ((g$t$19154$1LXXoO)
              (if g$t$19154$1LXXoO
                g$t$19154$1LXXoO
                (begin
                  '#f
                  (g$exists$19068$1LXXoO
                    g$f$19152$1LXXoO
                    (cdr g$arg1$19153$1LXXoO))))))
           (g$f$19152$1LXXoO (car g$arg1$19153$1LXXoO)))))
       ((g$f$19155$1LXXoO g$arg1$19156$1LXXoO . g$args$19157$1LXXoO)
        ((case-lambda
           ((g$args$19158$1LXXoO)
            (if (g$all-empty?$19065$1LXXoO g$args$19158$1LXXoO)
              '#f
              (call-with-values
                (case-lambda
                  (() (g$split$19066$1LXXoO g$args$19158$1LXXoO)))
                (case-lambda
                  ((g$cars$19159$1LXXoO g$cdrs$19160$1LXXoO)
                   ((case-lambda
                      ((g$t$19161$1LXXoO)
                       (if g$t$19161$1LXXoO
                         g$t$19161$1LXXoO
                         (begin
                           '#f
                           (apply
                             g$exists$19068$1LXXoO
                             g$f$19155$1LXXoO
                             g$cdrs$19160$1LXXoO)))))
                    (apply g$f$19155$1LXXoO g$cars$19159$1LXXoO))))))))
         (cons g$arg1$19156$1LXXoO g$args$19157$1LXXoO)))))
   (g$map$19069$1LXXoO
     g$map$19225$1LXXoO
     (case-lambda
       ((g$proc$19162$1LXXoO g$list1$19163$1LXXoO)
        ((letrec ((g$f$19164$1LXXoO
                    (case-lambda
                      ((g$lst$19165$1LXXoO g$a$19166$1LXXoO)
                       (if (null? g$lst$19165$1LXXoO)
                         (reverse! g$a$19166$1LXXoO)
                         (g$f$19164$1LXXoO
                           (cdr g$lst$19165$1LXXoO)
                           (cons
                             (g$proc$19162$1LXXoO
                               (car g$lst$19165$1LXXoO))
                             g$a$19166$1LXXoO)))))))
           g$f$19164$1LXXoO)
         g$list1$19163$1LXXoO
         '()))
       ((g$proc$19167$1LXXoO
          g$list1$19168$1LXXoO
          .
          g$lists$19169$1LXXoO)
        ((letrec ((g$f$19170$1LXXoO
                    (case-lambda
                      ((g$lists$19171$1LXXoO g$a$19172$1LXXoO)
                       (if (g$all-empty?$19065$1LXXoO
                             g$lists$19171$1LXXoO)
                         (reverse! g$a$19172$1LXXoO)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$split$19066$1LXXoO
                                g$lists$19171$1LXXoO)))
                           (case-lambda
                             ((g$cars$19173$1LXXoO g$cdrs$19174$1LXXoO)
                              (g$f$19170$1LXXoO
                                g$cdrs$19174$1LXXoO
                                (cons
                                  (apply
                                    g$proc$19167$1LXXoO
                                    g$cars$19173$1LXXoO)
                                  g$a$19172$1LXXoO))))))))))
           g$f$19170$1LXXoO)
         (cons g$list1$19168$1LXXoO g$lists$19169$1LXXoO)
         '()))))
   (g$for-each$19070$1LXXoO
     g$for-each$19226$1LXXoO
     (case-lambda
       ((g$f$19175$1LXXoO g$arg1$19176$1LXXoO)
        (if (not (null? g$arg1$19176$1LXXoO))
          (begin
            (g$f$19175$1LXXoO (car g$arg1$19176$1LXXoO))
            (g$for-each$19070$1LXXoO
              g$f$19175$1LXXoO
              (cdr g$arg1$19176$1LXXoO)))
          (void)))
       ((g$f$19177$1LXXoO g$arg1$19178$1LXXoO . g$args$19179$1LXXoO)
        ((case-lambda
           ((g$args$19180$1LXXoO)
            (if (not (g$all-empty?$19065$1LXXoO g$args$19180$1LXXoO))
              (call-with-values
                (case-lambda
                  (() (g$split$19066$1LXXoO g$args$19180$1LXXoO)))
                (case-lambda
                  ((g$cars$19181$1LXXoO g$cdrs$19182$1LXXoO)
                   (begin
                     (apply g$f$19177$1LXXoO g$cars$19181$1LXXoO)
                     (apply
                       g$for-each$19070$1LXXoO
                       g$f$19177$1LXXoO
                       g$cdrs$19182$1LXXoO)))))
              (void))))
         (cons g$arg1$19178$1LXXoO g$args$19179$1LXXoO)))))
   (g$cons*$19071$1LXXoO
     g$cons*$19227$1LXXoO
     (case-lambda
       ((g$a$19183$1LXXoO . g$rest$19184$1LXXoO)
        ((letrec ((g$f$19185$1LXXoO
                    (case-lambda
                      ((g$a$19186$1LXXoO g$rest$19187$1LXXoO)
                       (if (null? g$rest$19187$1LXXoO)
                         g$a$19186$1LXXoO
                         (cons
                           g$a$19186$1LXXoO
                           (g$f$19185$1LXXoO
                             (car g$rest$19187$1LXXoO)
                             (cdr g$rest$19187$1LXXoO))))))))
           g$f$19185$1LXXoO)
         g$a$19183$1LXXoO
         g$rest$19184$1LXXoO))))
   (g$fold-left$19072$1LXXoO
     g$fold-left$19228$1LXXoO
     (case-lambda
       ((g$combine$19188$1LXXoO
          g$nil$19189$1LXXoO
          g$list1$19190$1LXXoO
          .
          g$lists$19191$1LXXoO)
        (if (null? g$list1$19190$1LXXoO)
          g$nil$19189$1LXXoO
          (if (null? g$lists$19191$1LXXoO)
            (g$fold-left$19072$1LXXoO
              g$combine$19188$1LXXoO
              (g$combine$19188$1LXXoO
                g$nil$19189$1LXXoO
                (car g$list1$19190$1LXXoO))
              (cdr g$list1$19190$1LXXoO))
            (begin
              '#f
              (apply
                g$fold-left$19072$1LXXoO
                (g$cons*$19071$1LXXoO
                  g$combine$19188$1LXXoO
                  (apply
                    g$combine$19188$1LXXoO
                    (g$cons*$19071$1LXXoO
                      g$nil$19189$1LXXoO
                      (car g$list1$19190$1LXXoO)
                      (g$map$19069$1LXXoO car g$lists$19191$1LXXoO)))
                  (cdr g$list1$19190$1LXXoO)
                  (g$map$19069$1LXXoO cdr g$lists$19191$1LXXoO)))))))))
   (g$fold-right$19073$1LXXoO
     g$fold-right$19229$1LXXoO
     (case-lambda
       ((g$combine$19192$1LXXoO
          g$nil$19193$1LXXoO
          g$list1$19194$1LXXoO
          .
          g$lists$19195$1LXXoO)
        (if (null? g$list1$19194$1LXXoO)
          g$nil$19193$1LXXoO
          (if (null? g$lists$19195$1LXXoO)
            (g$combine$19192$1LXXoO
              (car g$list1$19194$1LXXoO)
              (g$fold-right$19073$1LXXoO
                g$combine$19192$1LXXoO
                g$nil$19193$1LXXoO
                (cdr g$list1$19194$1LXXoO)))
            (begin
              '#f
              (apply
                g$combine$19192$1LXXoO
                (append
                  (list (car g$list1$19194$1LXXoO))
                  (g$map$19069$1LXXoO car g$lists$19195$1LXXoO)
                  (list
                    (apply
                      g$fold-right$19073$1LXXoO
                      (g$cons*$19071$1LXXoO
                        g$combine$19192$1LXXoO
                        g$nil$19193$1LXXoO
                        (cdr g$list1$19194$1LXXoO)
                        (g$map$19069$1LXXoO
                          cdr
                          g$lists$19195$1LXXoO))))))))))))
   (g$remove$19074$1LXXoO
     g$remove$19230$1LXXoO
     (case-lambda
       ((g$obj$19196$1LXXoO g$list$19197$1LXXoO)
        (g$remp$19055$1LXXoO
          (case-lambda
            ((g$x$19198$1LXXoO)
             (equal? g$obj$19196$1LXXoO g$x$19198$1LXXoO)))
          g$list$19197$1LXXoO))))
   (g$remv$19075$1LXXoO
     g$remv$19231$1LXXoO
     (case-lambda
       ((g$obj$19199$1LXXoO g$list$19200$1LXXoO)
        (g$remp$19055$1LXXoO
          (case-lambda
            ((g$x$19201$1LXXoO)
             (eqv? g$obj$19199$1LXXoO g$x$19201$1LXXoO)))
          g$list$19200$1LXXoO))))
   (g$remq$19076$1LXXoO
     g$remq$19232$1LXXoO
     (case-lambda
       ((g$obj$19202$1LXXoO g$list$19203$1LXXoO)
        (g$remp$19055$1LXXoO
          (case-lambda
            ((g$x$19204$1LXXoO)
             (eq? g$obj$19202$1LXXoO g$x$19204$1LXXoO)))
          g$list$19203$1LXXoO)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$char?$19717$1LXXoO
     g$char?$20054$1LXXoO
     (case-lambda
       ((g$obj$19870$1LXXoO)
        (clr-is-internal 'system.char g$obj$19870$1LXXoO))))
   (g$vector?$19718$1LXXoO
     g$vector?$20055$1LXXoO
     (case-lambda
       ((g$obj$19871$1LXXoO)
        (clr-is-internal 'system.object[] g$obj$19871$1LXXoO))))
   (g$bytevector?$19719$1LXXoO
     g$bytevector?$20056$1LXXoO
     (case-lambda
       ((g$obj$19872$1LXXoO)
        (clr-is-internal 'system.byte[] g$obj$19872$1LXXoO))))
   (g$symbol?$19720$1LXXoO
     g$symbol?$20057$1LXXoO
     (case-lambda
       ((g$obj$19873$1LXXoO)
        (clr-is-internal
          'microsoft.scripting.symbolid
          g$obj$19873$1LXXoO))))
   (g$boolean?$19721$1LXXoO
     g$boolean?$20058$1LXXoO
     (case-lambda
       ((g$obj$19874$1LXXoO)
        (clr-is-internal 'system.boolean g$obj$19874$1LXXoO))))
   (g$procedure?$19722$1LXXoO
     g$procedure?$20059$1LXXoO
     (case-lambda
       ((g$obj$19875$1LXXoO)
        (clr-is-internal
          'ironscheme.runtime.icallable
          g$obj$19875$1LXXoO))))
   (g$fixnum?$19723$1LXXoO
     g$fixnum?$20060$1LXXoO
     (case-lambda
       ((g$obj$19876$1LXXoO)
        (clr-is-internal 'system.int32 g$obj$19876$1LXXoO))))
   (g$flonum?$19724$1LXXoO
     g$flonum?$20061$1LXXoO
     (case-lambda
       ((g$obj$19877$1LXXoO)
        (clr-is-internal 'system.double g$obj$19877$1LXXoO))))
   (g$fixnum-width$19725$1LXXoO
     g$fixnum-width$20062$1LXXoO
     (case-lambda (() '32)))
   (g$div0$19726$1LXXoO
     g$div0$20063$1LXXoO
     (case-lambda
       ((g$x1$19878$1LXXoO g$x2$19879$1LXXoO)
        ((case-lambda
           ((g$d$19880$1LXXoO)
            ((case-lambda
               ((g$m$19881$1LXXoO)
                (if (g$<$20715$1LXXoO
                      g$m$19881$1LXXoO
                      (g$magnitude$20722$1LXXoO
                        (/ g$x2$19879$1LXXoO '2)))
                  g$d$19880$1LXXoO
                  (if (g$positive?$20712$1LXXoO g$x2$19879$1LXXoO)
                    (+ g$d$19880$1LXXoO '1)
                    (begin '#f (- g$d$19880$1LXXoO '1))))))
             (- g$x1$19878$1LXXoO
                (* g$d$19880$1LXXoO g$x2$19879$1LXXoO)))))
         (g$div$20739$1LXXoO g$x1$19878$1LXXoO g$x2$19879$1LXXoO)))))
   (g$mod$19727$1LXXoO
     g$mod$20064$1LXXoO
     (case-lambda
       ((g$x1$19882$1LXXoO g$x2$19883$1LXXoO)
        (- g$x1$19882$1LXXoO
           (* (g$div$20739$1LXXoO g$x1$19882$1LXXoO g$x2$19883$1LXXoO)
              g$x2$19883$1LXXoO)))))
   (g$mod0$19728$1LXXoO
     g$mod0$20065$1LXXoO
     (case-lambda
       ((g$x1$19884$1LXXoO g$x2$19885$1LXXoO)
        (- g$x1$19884$1LXXoO
           (* (g$div0$19726$1LXXoO g$x1$19884$1LXXoO g$x2$19885$1LXXoO)
              g$x2$19885$1LXXoO)))))
   (g$div-and-mod$19729$1LXXoO
     g$div-and-mod$20066$1LXXoO
     (case-lambda
       ((g$x1$19886$1LXXoO g$x2$19887$1LXXoO)
        ((case-lambda
           ((g$d$19888$1LXXoO)
            (values
              g$d$19888$1LXXoO
              (- g$x1$19886$1LXXoO
                 (* g$d$19888$1LXXoO g$x2$19887$1LXXoO)))))
         (g$div$20739$1LXXoO g$x1$19886$1LXXoO g$x2$19887$1LXXoO)))))
   (g$div0-and-mod0$19730$1LXXoO
     g$div0-and-mod0$20067$1LXXoO
     (case-lambda
       ((g$x1$19889$1LXXoO g$x2$19890$1LXXoO)
        ((case-lambda
           ((g$d$19891$1LXXoO)
            (values
              g$d$19891$1LXXoO
              (- g$x1$19889$1LXXoO
                 (* g$d$19891$1LXXoO g$x2$19890$1LXXoO)))))
         (g$div0$19726$1LXXoO g$x1$19889$1LXXoO g$x2$19890$1LXXoO)))))
   (g$list->vector$19731$1LXXoO
     g$list->vector$20068$1LXXoO
     (case-lambda
       ((g$lst$19892$1LXXoO) (apply vector g$lst$19892$1LXXoO))))
   (g$list->string$19732$1LXXoO
     g$list->string$20069$1LXXoO
     (case-lambda
       ((g$lst$19893$1LXXoO) (apply string g$lst$19893$1LXXoO))))
   (g$vector-ref$19733$1LXXoO
     g$vector-ref$20070$1LXXoO
     (case-lambda
       ((g$x$19894$1LXXoO g$n$19895$1LXXoO)
        (begin
          (if (not (g$vector?$19718$1LXXoO g$x$19894$1LXXoO))
            (assertion-violation
              'vector-ref
              '"not a vector"
              g$x$19894$1LXXoO)
            (void))
          (if (not (g$integer?$20707$1LXXoO g$n$19895$1LXXoO))
            (assertion-violation
              'vector-ref
              '"not an integer"
              g$n$19895$1LXXoO)
            (void))
          (if (g$negative?$20713$1LXXoO g$n$19895$1LXXoO)
            (assertion-violation
              'vector-ref
              '"negative index"
              g$n$19895$1LXXoO)
            (void))
          ($vector-ref g$x$19894$1LXXoO g$n$19895$1LXXoO)))))
   (g$vector-set!$19734$1LXXoO
     g$vector-set!$20071$1LXXoO
     (case-lambda
       ((g$x$19896$1LXXoO g$n$19897$1LXXoO g$value$19898$1LXXoO)
        (begin
          (if (not (g$vector?$19718$1LXXoO g$x$19896$1LXXoO))
            (assertion-violation
              'vector-set!
              '"not a vector"
              g$x$19896$1LXXoO)
            (void))
          (if (not (g$integer?$20707$1LXXoO g$n$19897$1LXXoO))
            (assertion-violation
              'vector-set!
              '"not an integer"
              g$n$19897$1LXXoO)
            (void))
          (if (g$negative?$20713$1LXXoO g$n$19897$1LXXoO)
            (assertion-violation
              'vector-set!
              '"negative index"
              g$n$19897$1LXXoO)
            (void))
          ($vector-set!
            g$x$19896$1LXXoO
            g$n$19897$1LXXoO
            g$value$19898$1LXXoO)
          (void)))))
   (g$vector-fill!$19735$1LXXoO
     g$vector-fill!$20072$1LXXoO
     (case-lambda
       ((g$vec$19899$1LXXoO g$val$19900$1LXXoO)
        ((case-lambda
           ((g$len$19901$1LXXoO)
            (letrec ((g$loop$19902$1LXXoO
                       (case-lambda
                         ((g$i$19903$1LXXoO)
                          (if (g$fx=?$23901$1LXXoO
                                g$i$19903$1LXXoO
                                g$len$19901$1LXXoO)
                            (if '#f '#f (void))
                            (begin
                              (g$vector-set!$19734$1LXXoO
                                g$vec$19899$1LXXoO
                                g$i$19903$1LXXoO
                                g$val$19900$1LXXoO)
                              (g$loop$19902$1LXXoO
                                (g$fx+$23888$1LXXoO
                                  g$i$19903$1LXXoO
                                  '1))))))))
              (g$loop$19902$1LXXoO '0))))
         (vector-length g$vec$19899$1LXXoO)))))
   (g$xcons$19736$1LXXoO
     g$xcons$20073$1LXXoO
     (case-lambda
       ((g$x$19904$1LXXoO g$y$19905$1LXXoO)
        (cons g$y$19905$1LXXoO g$x$19904$1LXXoO))))
   (g$reverse$19737$1LXXoO
     g$reverse$20074$1LXXoO
     (case-lambda
       ((g$lst$19906$1LXXoO)
        (g$fold-left$19228$1LXXoO
          g$xcons$19736$1LXXoO
          '()
          g$lst$19906$1LXXoO))))
   (g$caar$19738$1LXXoO
     g$caar$20075$1LXXoO
     (case-lambda ((g$x$19907$1LXXoO) (car (car g$x$19907$1LXXoO)))))
   (g$cadr$19739$1LXXoO
     g$cadr$20076$1LXXoO
     (case-lambda ((g$x$19908$1LXXoO) (car (cdr g$x$19908$1LXXoO)))))
   (g$cdar$19740$1LXXoO
     g$cdar$20077$1LXXoO
     (case-lambda ((g$x$19909$1LXXoO) (cdr (car g$x$19909$1LXXoO)))))
   (g$cddr$19741$1LXXoO
     g$cddr$20078$1LXXoO
     (case-lambda ((g$x$19910$1LXXoO) (cdr (cdr g$x$19910$1LXXoO)))))
   (g$caaar$19742$1LXXoO
     g$caaar$20079$1LXXoO
     (case-lambda
       ((g$x$19911$1LXXoO)
        (g$caar$19738$1LXXoO (car g$x$19911$1LXXoO)))))
   (g$caadr$19743$1LXXoO
     g$caadr$20080$1LXXoO
     (case-lambda
       ((g$x$19912$1LXXoO)
        (g$caar$19738$1LXXoO (cdr g$x$19912$1LXXoO)))))
   (g$cadar$19744$1LXXoO
     g$cadar$20081$1LXXoO
     (case-lambda
       ((g$x$19913$1LXXoO)
        (g$cadr$19739$1LXXoO (car g$x$19913$1LXXoO)))))
   (g$caddr$19745$1LXXoO
     g$caddr$20082$1LXXoO
     (case-lambda
       ((g$x$19914$1LXXoO)
        (g$cadr$19739$1LXXoO (cdr g$x$19914$1LXXoO)))))
   (g$cdaar$19746$1LXXoO
     g$cdaar$20083$1LXXoO
     (case-lambda
       ((g$x$19915$1LXXoO)
        (g$cdar$19740$1LXXoO (car g$x$19915$1LXXoO)))))
   (g$cdadr$19747$1LXXoO
     g$cdadr$20084$1LXXoO
     (case-lambda
       ((g$x$19916$1LXXoO)
        (g$cdar$19740$1LXXoO (cdr g$x$19916$1LXXoO)))))
   (g$cddar$19748$1LXXoO
     g$cddar$20085$1LXXoO
     (case-lambda
       ((g$x$19917$1LXXoO)
        (g$cddr$19741$1LXXoO (car g$x$19917$1LXXoO)))))
   (g$cdddr$19749$1LXXoO
     g$cdddr$20086$1LXXoO
     (case-lambda
       ((g$x$19918$1LXXoO)
        (g$cddr$19741$1LXXoO (cdr g$x$19918$1LXXoO)))))
   (g$caaaar$19750$1LXXoO
     g$caaaar$20087$1LXXoO
     (case-lambda
       ((g$x$19919$1LXXoO)
        (g$caaar$19742$1LXXoO (car g$x$19919$1LXXoO)))))
   (g$caaadr$19751$1LXXoO
     g$caaadr$20088$1LXXoO
     (case-lambda
       ((g$x$19920$1LXXoO)
        (g$caaar$19742$1LXXoO (cdr g$x$19920$1LXXoO)))))
   (g$caadar$19752$1LXXoO
     g$caadar$20089$1LXXoO
     (case-lambda
       ((g$x$19921$1LXXoO)
        (g$caadr$19743$1LXXoO (car g$x$19921$1LXXoO)))))
   (g$caaddr$19753$1LXXoO
     g$caaddr$20090$1LXXoO
     (case-lambda
       ((g$x$19922$1LXXoO)
        (g$caadr$19743$1LXXoO (cdr g$x$19922$1LXXoO)))))
   (g$cadaar$19754$1LXXoO
     g$cadaar$20091$1LXXoO
     (case-lambda
       ((g$x$19923$1LXXoO)
        (g$cadar$19744$1LXXoO (car g$x$19923$1LXXoO)))))
   (g$cadadr$19755$1LXXoO
     g$cadadr$20092$1LXXoO
     (case-lambda
       ((g$x$19924$1LXXoO)
        (g$cadar$19744$1LXXoO (cdr g$x$19924$1LXXoO)))))
   (g$caddar$19756$1LXXoO
     g$caddar$20093$1LXXoO
     (case-lambda
       ((g$x$19925$1LXXoO)
        (g$caddr$19745$1LXXoO (car g$x$19925$1LXXoO)))))
   (g$cadddr$19757$1LXXoO
     g$cadddr$20094$1LXXoO
     (case-lambda
       ((g$x$19926$1LXXoO)
        (g$caddr$19745$1LXXoO (cdr g$x$19926$1LXXoO)))))
   (g$cdaaar$19758$1LXXoO
     g$cdaaar$20095$1LXXoO
     (case-lambda
       ((g$x$19927$1LXXoO)
        (g$cdaar$19746$1LXXoO (car g$x$19927$1LXXoO)))))
   (g$cdaadr$19759$1LXXoO
     g$cdaadr$20096$1LXXoO
     (case-lambda
       ((g$x$19928$1LXXoO)
        (g$cdaar$19746$1LXXoO (cdr g$x$19928$1LXXoO)))))
   (g$cdadar$19760$1LXXoO
     g$cdadar$20097$1LXXoO
     (case-lambda
       ((g$x$19929$1LXXoO)
        (g$cdadr$19747$1LXXoO (car g$x$19929$1LXXoO)))))
   (g$cdaddr$19761$1LXXoO
     g$cdaddr$20098$1LXXoO
     (case-lambda
       ((g$x$19930$1LXXoO)
        (g$cdadr$19747$1LXXoO (cdr g$x$19930$1LXXoO)))))
   (g$cddaar$19762$1LXXoO
     g$cddaar$20099$1LXXoO
     (case-lambda
       ((g$x$19931$1LXXoO)
        (g$cddar$19748$1LXXoO (car g$x$19931$1LXXoO)))))
   (g$cddadr$19763$1LXXoO
     g$cddadr$20100$1LXXoO
     (case-lambda
       ((g$x$19932$1LXXoO)
        (g$cddar$19748$1LXXoO (cdr g$x$19932$1LXXoO)))))
   (g$cdddar$19764$1LXXoO
     g$cdddar$20101$1LXXoO
     (case-lambda
       ((g$x$19933$1LXXoO)
        (g$cdddr$19749$1LXXoO (car g$x$19933$1LXXoO)))))
   (g$cddddr$19765$1LXXoO
     g$cddddr$20102$1LXXoO
     (case-lambda
       ((g$x$19934$1LXXoO)
        (g$cdddr$19749$1LXXoO (cdr g$x$19934$1LXXoO)))))
   (g$even?$19766$1LXXoO
     g$even?$20103$1LXXoO
     (case-lambda
       ((g$n$19935$1LXXoO)
        (begin
          (if (not (g$integer-valued?$20710$1LXXoO g$n$19935$1LXXoO))
            (assertion-violation
              'even?
              '"not a integer"
              g$n$19935$1LXXoO)
            (void))
          (g$=$20714$1LXXoO
            '0
            (g$mod$19727$1LXXoO g$n$19935$1LXXoO '2))))))
   (g$odd?$19767$1LXXoO
     g$odd?$20104$1LXXoO
     (case-lambda
       ((g$n$19936$1LXXoO)
        (begin
          (if (not (g$integer-valued?$20710$1LXXoO g$n$19936$1LXXoO))
            (assertion-violation
              'odd?
              '"not a integer"
              g$n$19936$1LXXoO)
            (void))
          (g$=$20714$1LXXoO
            '1
            (g$mod$19727$1LXXoO g$n$19936$1LXXoO '2))))))
   (g$max$19768$1LXXoO
     g$max$20105$1LXXoO
     (case-lambda
       ((g$a$19937$1LXXoO . g$rest$19938$1LXXoO)
        (begin
          (if (not (g$real-valued?$20708$1LXXoO g$a$19937$1LXXoO))
            (assertion-violation 'max '"not a real" g$a$19937$1LXXoO)
            (void))
          (g$fold-left$19228$1LXXoO
            (case-lambda
              ((g$a$19939$1LXXoO g$b$19940$1LXXoO)
               ((case-lambda
                  ((g$r$19941$1LXXoO)
                   (if ((case-lambda
                          ((g$t$19942$1LXXoO)
                           (if g$t$19942$1LXXoO
                             g$t$19942$1LXXoO
                             (begin
                               '#f
                               (g$inexact?$20703$1LXXoO
                                 g$b$19940$1LXXoO)))))
                        (g$inexact?$20703$1LXXoO g$a$19939$1LXXoO))
                     (inexact g$r$19941$1LXXoO)
                     g$r$19941$1LXXoO)))
                (if (g$<$20715$1LXXoO g$a$19939$1LXXoO g$b$19940$1LXXoO)
                  g$b$19940$1LXXoO
                  g$a$19939$1LXXoO))))
            g$a$19937$1LXXoO
            g$rest$19938$1LXXoO)))))
   (g$min$19769$1LXXoO
     g$min$20106$1LXXoO
     (case-lambda
       ((g$a$19943$1LXXoO . g$rest$19944$1LXXoO)
        (begin
          (if (not (g$real-valued?$20708$1LXXoO g$a$19943$1LXXoO))
            (assertion-violation 'min '"not a real" g$a$19943$1LXXoO)
            (void))
          (g$fold-left$19228$1LXXoO
            (case-lambda
              ((g$a$19945$1LXXoO g$b$19946$1LXXoO)
               ((case-lambda
                  ((g$r$19947$1LXXoO)
                   (if ((case-lambda
                          ((g$t$19948$1LXXoO)
                           (if g$t$19948$1LXXoO
                             g$t$19948$1LXXoO
                             (begin
                               '#f
                               (g$inexact?$20703$1LXXoO
                                 g$b$19946$1LXXoO)))))
                        (g$inexact?$20703$1LXXoO g$a$19945$1LXXoO))
                     (inexact g$r$19947$1LXXoO)
                     g$r$19947$1LXXoO)))
                (if (g$>$20717$1LXXoO g$a$19945$1LXXoO g$b$19946$1LXXoO)
                  g$b$19946$1LXXoO
                  g$a$19945$1LXXoO))))
            g$a$19943$1LXXoO
            g$rest$19944$1LXXoO)))))
   (g$gcd$19770$1LXXoO
     g$gcd$20107$1LXXoO
     (case-lambda
       (g$nums$19949$1LXXoO
        ((case-lambda
           ((g$t$19950$1LXXoO)
            (if (eqv? g$t$19950$1LXXoO '0)
              '0
              (if (eqv? g$t$19950$1LXXoO '1)
                ((case-lambda
                   ((g$n$19951$1LXXoO)
                    (begin
                      (if (not (g$integer-valued?$20710$1LXXoO
                                 g$n$19951$1LXXoO))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$19951$1LXXoO)
                        (void))
                      (g$abs$20740$1LXXoO g$n$19951$1LXXoO))))
                 (car g$nums$19949$1LXXoO))
                (if (eqv? g$t$19950$1LXXoO '2)
                  ((case-lambda
                     ((g$a$19952$1LXXoO g$b$19953$1LXXoO)
                      (begin
                        (if (not (g$integer-valued?$20710$1LXXoO
                                   g$a$19952$1LXXoO))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$19952$1LXXoO)
                          (void))
                        (if (not (g$integer-valued?$20710$1LXXoO
                                   g$b$19953$1LXXoO))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$19953$1LXXoO)
                          (void))
                        (if (g$zero?$20711$1LXXoO g$b$19953$1LXXoO)
                          (g$abs$20740$1LXXoO g$a$19952$1LXXoO)
                          (g$abs$20740$1LXXoO
                            (g$gcd$19770$1LXXoO
                              g$b$19953$1LXXoO
                              (g$mod$19727$1LXXoO
                                g$a$19952$1LXXoO
                                g$b$19953$1LXXoO)))))))
                   (car g$nums$19949$1LXXoO)
                   (g$cadr$19739$1LXXoO g$nums$19949$1LXXoO))
                  (begin
                    '#f
                    (g$fold-left$19228$1LXXoO
                      g$gcd$19770$1LXXoO
                      (g$abs$20740$1LXXoO (car g$nums$19949$1LXXoO))
                      (cdr g$nums$19949$1LXXoO))))))))
         (length g$nums$19949$1LXXoO)))))
   (g$lcm$19771$1LXXoO
     g$lcm$20108$1LXXoO
     (case-lambda
       (g$nums$19954$1LXXoO
        ((case-lambda
           ((g$t$19955$1LXXoO)
            (if (eqv? g$t$19955$1LXXoO '0)
              '1
              (if (eqv? g$t$19955$1LXXoO '1)
                ((case-lambda
                   ((g$n$19956$1LXXoO)
                    (begin
                      (if (not (g$integer-valued?$20710$1LXXoO
                                 g$n$19956$1LXXoO))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$19956$1LXXoO)
                        (void))
                      (g$abs$20740$1LXXoO g$n$19956$1LXXoO))))
                 (car g$nums$19954$1LXXoO))
                (if (eqv? g$t$19955$1LXXoO '2)
                  ((case-lambda
                     ((g$a$19957$1LXXoO g$b$19958$1LXXoO)
                      (begin
                        (if (not (g$integer-valued?$20710$1LXXoO
                                   g$a$19957$1LXXoO))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$19957$1LXXoO)
                          (void))
                        (if (not (g$integer-valued?$20710$1LXXoO
                                   g$b$19958$1LXXoO))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$19958$1LXXoO)
                          (void))
                        (if ((case-lambda
                               ((g$t$19959$1LXXoO)
                                (if g$t$19959$1LXXoO
                                  g$t$19959$1LXXoO
                                  (begin
                                    '#f
                                    (g$zero?$20711$1LXXoO
                                      g$b$19958$1LXXoO)))))
                             (g$zero?$20711$1LXXoO g$a$19957$1LXXoO))
                          '0
                          (g$abs$20740$1LXXoO
                            (* (/ g$a$19957$1LXXoO
                                  (g$gcd$19770$1LXXoO
                                    g$a$19957$1LXXoO
                                    g$b$19958$1LXXoO))
                               g$b$19958$1LXXoO))))))
                   (car g$nums$19954$1LXXoO)
                   (g$cadr$19739$1LXXoO g$nums$19954$1LXXoO))
                  (begin
                    '#f
                    (g$fold-left$19228$1LXXoO
                      g$lcm$19771$1LXXoO
                      (g$abs$20740$1LXXoO (car g$nums$19954$1LXXoO))
                      (cdr g$nums$19954$1LXXoO))))))))
         (length g$nums$19954$1LXXoO)))))
   (g$string=?$19812$1LXXoO
     g$string=?$20109$1LXXoO
     (case-lambda
       ((g$a$19960$1LXXoO g$b$19961$1LXXoO . g$rest$19962$1LXXoO)
        (begin
          (if (not (string? g$a$19960$1LXXoO))
            (assertion-violation
              'string=?
              '"not a string"
              g$a$19960$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$19963$1LXXoO)
               (begin
                 (if (not (string? g$x$19963$1LXXoO))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$19963$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$19964$1LXXoO)
                     (begin
                       (set! g$a$19960$1LXXoO g$x$19963$1LXXoO)
                       g$r$19964$1LXXoO)))
                  (g$fx=?$23901$1LXXoO
                    (string-compare g$a$19960$1LXXoO g$x$19963$1LXXoO)
                    '0)))))
            (cons g$b$19961$1LXXoO g$rest$19962$1LXXoO))))))
   (g$string<?$19813$1LXXoO
     g$string<?$20110$1LXXoO
     (case-lambda
       ((g$a$19965$1LXXoO g$b$19966$1LXXoO . g$rest$19967$1LXXoO)
        (begin
          (if (not (string? g$a$19965$1LXXoO))
            (assertion-violation
              'string<?
              '"not a string"
              g$a$19965$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$19968$1LXXoO)
               (begin
                 (if (not (string? g$x$19968$1LXXoO))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$19968$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$19969$1LXXoO)
                     (begin
                       (set! g$a$19965$1LXXoO g$x$19968$1LXXoO)
                       g$r$19969$1LXXoO)))
                  (g$fx<?$23902$1LXXoO
                    (string-compare g$a$19965$1LXXoO g$x$19968$1LXXoO)
                    '0)))))
            (cons g$b$19966$1LXXoO g$rest$19967$1LXXoO))))))
   (g$string>?$19814$1LXXoO
     g$string>?$20111$1LXXoO
     (case-lambda
       ((g$a$19970$1LXXoO g$b$19971$1LXXoO . g$rest$19972$1LXXoO)
        (begin
          (if (not (string? g$a$19970$1LXXoO))
            (assertion-violation
              'string>?
              '"not a string"
              g$a$19970$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$19973$1LXXoO)
               (begin
                 (if (not (string? g$x$19973$1LXXoO))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$19973$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$19974$1LXXoO)
                     (begin
                       (set! g$a$19970$1LXXoO g$x$19973$1LXXoO)
                       g$r$19974$1LXXoO)))
                  (g$fx>?$23904$1LXXoO
                    (string-compare g$a$19970$1LXXoO g$x$19973$1LXXoO)
                    '0)))))
            (cons g$b$19971$1LXXoO g$rest$19972$1LXXoO))))))
   (g$string<=?$19815$1LXXoO
     g$string<=?$20112$1LXXoO
     (case-lambda
       ((g$a$19975$1LXXoO g$b$19976$1LXXoO . g$rest$19977$1LXXoO)
        (begin
          (if (not (string? g$a$19975$1LXXoO))
            (assertion-violation
              'string<=?
              '"not a string"
              g$a$19975$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$19978$1LXXoO)
               (begin
                 (if (not (string? g$x$19978$1LXXoO))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$19978$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$19979$1LXXoO)
                     (begin
                       (set! g$a$19975$1LXXoO g$x$19978$1LXXoO)
                       g$r$19979$1LXXoO)))
                  (g$fx<=?$23903$1LXXoO
                    (string-compare g$a$19975$1LXXoO g$x$19978$1LXXoO)
                    '0)))))
            (cons g$b$19976$1LXXoO g$rest$19977$1LXXoO))))))
   (g$string>=?$19816$1LXXoO
     g$string>=?$20113$1LXXoO
     (case-lambda
       ((g$a$19980$1LXXoO g$b$19981$1LXXoO . g$rest$19982$1LXXoO)
        (begin
          (if (not (string? g$a$19980$1LXXoO))
            (assertion-violation
              'string>=?
              '"not a string"
              g$a$19980$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$19983$1LXXoO)
               (begin
                 (if (not (string? g$x$19983$1LXXoO))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$19983$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$19984$1LXXoO)
                     (begin
                       (set! g$a$19980$1LXXoO g$x$19983$1LXXoO)
                       g$r$19984$1LXXoO)))
                  (g$fx>=?$23905$1LXXoO
                    (string-compare g$a$19980$1LXXoO g$x$19983$1LXXoO)
                    '0)))))
            (cons g$b$19981$1LXXoO g$rest$19982$1LXXoO))))))
   (g$symbol=?$19817$1LXXoO
     g$symbol=?$20114$1LXXoO
     (case-lambda
       ((g$a$19985$1LXXoO g$b$19986$1LXXoO . g$rest$19987$1LXXoO)
        (begin
          (if (not (g$symbol?$19720$1LXXoO g$a$19985$1LXXoO))
            (assertion-violation
              'symbol=?
              '"not a symbol"
              g$a$19985$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$19988$1LXXoO)
               (begin
                 (if (not (g$symbol?$19720$1LXXoO g$x$19988$1LXXoO))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$19988$1LXXoO)
                   (void))
                 (eq? g$a$19985$1LXXoO g$x$19988$1LXXoO))))
            (cons g$b$19986$1LXXoO g$rest$19987$1LXXoO))))))
   (g$boolean=?$19818$1LXXoO
     g$boolean=?$20115$1LXXoO
     (case-lambda
       ((g$a$19989$1LXXoO g$b$19990$1LXXoO . g$rest$19991$1LXXoO)
        (begin
          (if (not (g$boolean?$19721$1LXXoO g$a$19989$1LXXoO))
            (assertion-violation
              'boolean=?
              '"not a boolean"
              g$a$19989$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$19992$1LXXoO)
               (begin
                 (if (not (g$boolean?$19721$1LXXoO g$x$19992$1LXXoO))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$19992$1LXXoO)
                   (void))
                 (eq? g$a$19989$1LXXoO g$x$19992$1LXXoO))))
            (cons g$b$19990$1LXXoO g$rest$19991$1LXXoO))))))
   (g$char=?$19859$1LXXoO
     g$char=?$20116$1LXXoO
     (case-lambda
       ((g$a$19993$1LXXoO g$b$19994$1LXXoO . g$rest$19995$1LXXoO)
        (begin
          (if (not (g$char?$19717$1LXXoO g$a$19993$1LXXoO))
            (assertion-violation 'char=? '"not a char" g$a$19993$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$19996$1LXXoO)
               (begin
                 (if (not (g$char?$19717$1LXXoO g$x$19996$1LXXoO))
                   (assertion-violation
                     'char=?
                     '"not a char"
                     g$x$19996$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$19997$1LXXoO)
                     (begin
                       (set! g$a$19993$1LXXoO g$x$19996$1LXXoO)
                       g$r$19997$1LXXoO)))
                  (g$fx=?$23901$1LXXoO
                    (char->integer g$a$19993$1LXXoO)
                    (char->integer g$x$19996$1LXXoO))))))
            (cons g$b$19994$1LXXoO g$rest$19995$1LXXoO))))))
   (g$char<?$19860$1LXXoO
     g$char<?$20117$1LXXoO
     (case-lambda
       ((g$a$19998$1LXXoO g$b$19999$1LXXoO . g$rest$20000$1LXXoO)
        (begin
          (if (not (g$char?$19717$1LXXoO g$a$19998$1LXXoO))
            (assertion-violation 'char<? '"not a char" g$a$19998$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$20001$1LXXoO)
               (begin
                 (if (not (g$char?$19717$1LXXoO g$x$20001$1LXXoO))
                   (assertion-violation
                     'char<?
                     '"not a char"
                     g$x$20001$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$20002$1LXXoO)
                     (begin
                       (set! g$a$19998$1LXXoO g$x$20001$1LXXoO)
                       g$r$20002$1LXXoO)))
                  (g$fx<?$23902$1LXXoO
                    (char->integer g$a$19998$1LXXoO)
                    (char->integer g$x$20001$1LXXoO))))))
            (cons g$b$19999$1LXXoO g$rest$20000$1LXXoO))))))
   (g$char>?$19861$1LXXoO
     g$char>?$20118$1LXXoO
     (case-lambda
       ((g$a$20003$1LXXoO g$b$20004$1LXXoO . g$rest$20005$1LXXoO)
        (begin
          (if (not (g$char?$19717$1LXXoO g$a$20003$1LXXoO))
            (assertion-violation 'char>? '"not a char" g$a$20003$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$20006$1LXXoO)
               (begin
                 (if (not (g$char?$19717$1LXXoO g$x$20006$1LXXoO))
                   (assertion-violation
                     'char>?
                     '"not a char"
                     g$x$20006$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$20007$1LXXoO)
                     (begin
                       (set! g$a$20003$1LXXoO g$x$20006$1LXXoO)
                       g$r$20007$1LXXoO)))
                  (g$fx>?$23904$1LXXoO
                    (char->integer g$a$20003$1LXXoO)
                    (char->integer g$x$20006$1LXXoO))))))
            (cons g$b$20004$1LXXoO g$rest$20005$1LXXoO))))))
   (g$char<=?$19862$1LXXoO
     g$char<=?$20119$1LXXoO
     (case-lambda
       ((g$a$20008$1LXXoO g$b$20009$1LXXoO . g$rest$20010$1LXXoO)
        (begin
          (if (not (g$char?$19717$1LXXoO g$a$20008$1LXXoO))
            (assertion-violation
              'char<=?
              '"not a char"
              g$a$20008$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$20011$1LXXoO)
               (begin
                 (if (not (g$char?$19717$1LXXoO g$x$20011$1LXXoO))
                   (assertion-violation
                     'char<=?
                     '"not a char"
                     g$x$20011$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$20012$1LXXoO)
                     (begin
                       (set! g$a$20008$1LXXoO g$x$20011$1LXXoO)
                       g$r$20012$1LXXoO)))
                  (g$fx<=?$23903$1LXXoO
                    (char->integer g$a$20008$1LXXoO)
                    (char->integer g$x$20011$1LXXoO))))))
            (cons g$b$20009$1LXXoO g$rest$20010$1LXXoO))))))
   (g$char>=?$19863$1LXXoO
     g$char>=?$20120$1LXXoO
     (case-lambda
       ((g$a$20013$1LXXoO g$b$20014$1LXXoO . g$rest$20015$1LXXoO)
        (begin
          (if (not (g$char?$19717$1LXXoO g$a$20013$1LXXoO))
            (assertion-violation
              'char>=?
              '"not a char"
              g$a$20013$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$20016$1LXXoO)
               (begin
                 (if (not (g$char?$19717$1LXXoO g$x$20016$1LXXoO))
                   (assertion-violation
                     'char>=?
                     '"not a char"
                     g$x$20016$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$20017$1LXXoO)
                     (begin
                       (set! g$a$20013$1LXXoO g$x$20016$1LXXoO)
                       g$r$20017$1LXXoO)))
                  (g$fx>=?$23905$1LXXoO
                    (char->integer g$a$20013$1LXXoO)
                    (char->integer g$x$20016$1LXXoO))))))
            (cons g$b$20014$1LXXoO g$rest$20015$1LXXoO))))))
   (g$rationalize$19864$1LXXoO
     g$rationalize$20121$1LXXoO
     (case-lambda
       ((g$x$20018$1LXXoO g$e$20019$1LXXoO)
        (if (if (g$infinite?$20701$1LXXoO g$x$20018$1LXXoO)
              (begin '#f (g$infinite?$20701$1LXXoO g$e$20019$1LXXoO))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$20020$1LXXoO)
              (if (if (g$exact?$20702$1LXXoO g$x$20018$1LXXoO)
                    (begin '#f (g$exact?$20702$1LXXoO g$e$20019$1LXXoO))
                    '#f)
                g$r$20020$1LXXoO
                (inexact g$r$20020$1LXXoO))))
           (apply
             /
             (g$find-ratio$19865$1LXXoO
               g$x$20018$1LXXoO
               g$e$20019$1LXXoO)))))))
   (g$find-ratio$19865$1LXXoO
     g$find-ratio$20122$1LXXoO
     (case-lambda
       ((g$x$20021$1LXXoO g$e$20022$1LXXoO)
        (g$find-ratio-between$19866$1LXXoO
          (- g$x$20021$1LXXoO g$e$20022$1LXXoO)
          (+ g$x$20021$1LXXoO g$e$20022$1LXXoO)))))
   (g$find-ratio-between$19866$1LXXoO
     g$find-ratio-between$20123$1LXXoO
     (case-lambda
       ((g$x$20023$1LXXoO g$y$20024$1LXXoO)
        (letrec* ((g$sr$20025$1LXXoO
                    (case-lambda
                      ((g$x$20027$1LXXoO g$y$20028$1LXXoO)
                       ((case-lambda
                          ((g$fx$20029$1LXXoO g$fy$20030$1LXXoO)
                           (if (g$>=$20718$1LXXoO
                                 g$fx$20029$1LXXoO
                                 g$x$20027$1LXXoO)
                             (list g$fx$20029$1LXXoO '1)
                             (if (g$=$20714$1LXXoO
                                   g$fx$20029$1LXXoO
                                   g$fy$20030$1LXXoO)
                               ((case-lambda
                                  ((g$rat$20031$1LXXoO)
                                   (list
                                     (+ (g$cadr$19739$1LXXoO
                                          g$rat$20031$1LXXoO)
                                        (* g$fx$20029$1LXXoO
                                           (car g$rat$20031$1LXXoO)))
                                     (car g$rat$20031$1LXXoO))))
                                (g$sr$20025$1LXXoO
                                  (/ (- g$y$20028$1LXXoO
                                        g$fy$20030$1LXXoO))
                                  (/ (- g$x$20027$1LXXoO
                                        g$fx$20029$1LXXoO))))
                               (begin
                                 '#f
                                 (list (+ '1 g$fx$20029$1LXXoO) '1))))))
                        (exact (g$floor$20747$1LXXoO g$x$20027$1LXXoO))
                        (exact
                          (g$floor$20747$1LXXoO g$y$20028$1LXXoO)))))))
          (if (g$<$20715$1LXXoO g$y$20024$1LXXoO g$x$20023$1LXXoO)
            (g$find-ratio-between$19866$1LXXoO
              g$y$20024$1LXXoO
              g$x$20023$1LXXoO)
            (if (g$>=$20718$1LXXoO g$x$20023$1LXXoO g$y$20024$1LXXoO)
              (list g$x$20023$1LXXoO '1)
              (if (g$positive?$20712$1LXXoO g$x$20023$1LXXoO)
                (g$sr$20025$1LXXoO g$x$20023$1LXXoO g$y$20024$1LXXoO)
                (if (g$negative?$20713$1LXXoO g$y$20024$1LXXoO)
                  ((case-lambda
                     ((g$rat$20026$1LXXoO)
                      (list
                        (- (car g$rat$20026$1LXXoO))
                        (g$cadr$19739$1LXXoO g$rat$20026$1LXXoO))))
                   (g$sr$20025$1LXXoO
                     (- g$y$20024$1LXXoO)
                     (- g$x$20023$1LXXoO)))
                  (begin '#f '(0 1))))))))))
   (g$vector-map$19867$1LXXoO
     g$vector-map$20124$1LXXoO
     (case-lambda
       ((g$p$20032$1LXXoO g$vec1$20033$1LXXoO . g$vecs$20034$1LXXoO)
        ((case-lambda
           ((g$len$20035$1LXXoO)
            ((case-lambda
               ((g$res$20036$1LXXoO)
                (letrec ((g$loop$20037$1LXXoO
                           (case-lambda
                             ((g$i$20038$1LXXoO)
                              (if (g$fx=?$23901$1LXXoO
                                    g$i$20038$1LXXoO
                                    g$len$20035$1LXXoO)
                                (begin
                                  (if '#f '#f (void))
                                  g$res$20036$1LXXoO)
                                (begin
                                  (g$vector-set!$19734$1LXXoO
                                    g$res$20036$1LXXoO
                                    g$i$20038$1LXXoO
                                    (if (null? g$vecs$20034$1LXXoO)
                                      (g$p$20032$1LXXoO
                                        (g$vector-ref$19733$1LXXoO
                                          g$vec1$20033$1LXXoO
                                          g$i$20038$1LXXoO))
                                      (call-with-values
                                        (case-lambda
                                          (()
                                           (apply
                                             values
                                             (g$map$19225$1LXXoO
                                               (case-lambda
                                                 ((g$x$20039$1LXXoO)
                                                  (g$vector-ref$19733$1LXXoO
                                                    g$x$20039$1LXXoO
                                                    g$i$20038$1LXXoO)))
                                               (cons
                                                 g$vec1$20033$1LXXoO
                                                 g$vecs$20034$1LXXoO)))))
                                        g$p$20032$1LXXoO)))
                                  (g$loop$20037$1LXXoO
                                    (g$fx+$23888$1LXXoO
                                      g$i$20038$1LXXoO
                                      '1))))))))
                  (g$loop$20037$1LXXoO '0))))
             (make-vector g$len$20035$1LXXoO '()))))
         (vector-length g$vec1$20033$1LXXoO)))))
   (g$vector-for-each$19868$1LXXoO
     g$vector-for-each$20125$1LXXoO
     (case-lambda
       ((g$p$20040$1LXXoO g$vec1$20041$1LXXoO . g$vecs$20042$1LXXoO)
        ((case-lambda
           ((g$len$20043$1LXXoO)
            (letrec ((g$loop$20044$1LXXoO
                       (case-lambda
                         ((g$i$20045$1LXXoO)
                          (if (g$fx=?$23901$1LXXoO
                                g$i$20045$1LXXoO
                                g$len$20043$1LXXoO)
                            (if '#f '#f (void))
                            (begin
                              (if (null? g$vecs$20042$1LXXoO)
                                (g$p$20040$1LXXoO
                                  (g$vector-ref$19733$1LXXoO
                                    g$vec1$20041$1LXXoO
                                    g$i$20045$1LXXoO))
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (apply
                                       values
                                       (g$map$19225$1LXXoO
                                         (case-lambda
                                           ((g$x$20046$1LXXoO)
                                            (g$vector-ref$19733$1LXXoO
                                              g$x$20046$1LXXoO
                                              g$i$20045$1LXXoO)))
                                         (cons
                                           g$vec1$20041$1LXXoO
                                           g$vecs$20042$1LXXoO)))))
                                  g$p$20040$1LXXoO))
                              (g$loop$20044$1LXXoO
                                (g$fx+$23888$1LXXoO
                                  g$i$20045$1LXXoO
                                  '1))))))))
              (g$loop$20044$1LXXoO '0))))
         (vector-length g$vec1$20041$1LXXoO)))))
   (g$string-for-each$19869$1LXXoO
     g$string-for-each$20126$1LXXoO
     (case-lambda
       ((g$p$20047$1LXXoO g$str1$20048$1LXXoO . g$strs$20049$1LXXoO)
        ((case-lambda
           ((g$len$20050$1LXXoO)
            (letrec ((g$loop$20051$1LXXoO
                       (case-lambda
                         ((g$i$20052$1LXXoO)
                          (if (g$fx=?$23901$1LXXoO
                                g$i$20052$1LXXoO
                                g$len$20050$1LXXoO)
                            (if '#f '#f (void))
                            (begin
                              (if (null? g$strs$20049$1LXXoO)
                                (g$p$20047$1LXXoO
                                  (string-ref
                                    g$str1$20048$1LXXoO
                                    g$i$20052$1LXXoO))
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (apply
                                       values
                                       (g$map$19225$1LXXoO
                                         (case-lambda
                                           ((g$x$20053$1LXXoO)
                                            (string-ref
                                              g$x$20053$1LXXoO
                                              g$i$20052$1LXXoO)))
                                         (cons
                                           g$str1$20048$1LXXoO
                                           g$strs$20049$1LXXoO)))))
                                  g$p$20047$1LXXoO))
                              (g$loop$20051$1LXXoO
                                (g$fx+$23888$1LXXoO
                                  g$i$20052$1LXXoO
                                  '1))))))))
              (g$loop$20051$1LXXoO '0))))
         (string-length g$str1$20048$1LXXoO))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$20128$1LXXoO
     g$using$20162$1LXXoO
     (clr-using-internal 'system))
   (g$using$20130$1LXXoO
     g$using$20163$1LXXoO
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$20131$1LXXoO
     g$make-eq-hashtable$20164$1LXXoO
     (case-lambda
       (() (g$make-eq-hashtable$20131$1LXXoO '32))
       ((g$k$20140$1LXXoO)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$20140$1LXXoO)))))
   (g$make-eqv-hashtable$20132$1LXXoO
     g$make-eqv-hashtable$20165$1LXXoO
     (case-lambda
       (() (g$make-eqv-hashtable$20132$1LXXoO '32))
       ((g$k$20141$1LXXoO)
        (make-hashtable eqv-hash eqv? g$k$20141$1LXXoO))))
   (g$hashtable-size$20133$1LXXoO
     g$hashtable-size$20166$1LXXoO
     (case-lambda
       ((g$ht$20142$1LXXoO)
        (clr-call-internal 'hashtable 'get_count g$ht$20142$1LXXoO))))
   (g$hashtable-ref$20134$1LXXoO
     g$hashtable-ref$20167$1LXXoO
     (case-lambda
       ((g$ht$20143$1LXXoO g$key$20144$1LXXoO g$default$20145$1LXXoO)
        (letrec* ((g$r$20146$1LXXoO
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$20143$1LXXoO
                      g$key$20144$1LXXoO)))
          (if ((case-lambda
                 ((g$t$20147$1LXXoO)
                  (if g$t$20147$1LXXoO
                    g$t$20147$1LXXoO
                    (begin
                      '#f
                      (g$hashtable-contains?$20137$1LXXoO
                        g$ht$20143$1LXXoO
                        g$key$20144$1LXXoO)))))
               (not (null? g$r$20146$1LXXoO)))
            g$r$20146$1LXXoO
            g$default$20145$1LXXoO)))))
   (g$hashtable-set!$20135$1LXXoO
     g$hashtable-set!$20168$1LXXoO
     (case-lambda
       ((g$ht$20148$1LXXoO g$key$20149$1LXXoO g$obj$20150$1LXXoO)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$20148$1LXXoO
          g$key$20149$1LXXoO
          g$obj$20150$1LXXoO))))
   (g$hashtable-delete!$20136$1LXXoO
     g$hashtable-delete!$20169$1LXXoO
     (case-lambda
       ((g$ht$20151$1LXXoO g$key$20152$1LXXoO)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$20151$1LXXoO
          g$key$20152$1LXXoO))))
   (g$hashtable-contains?$20137$1LXXoO
     g$hashtable-contains?$20170$1LXXoO
     (case-lambda
       ((g$ht$20153$1LXXoO g$key$20154$1LXXoO)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$20153$1LXXoO
          g$key$20154$1LXXoO))))
   (g$hashtable-update!$20138$1LXXoO
     g$hashtable-update!$20171$1LXXoO
     (case-lambda
       ((g$ht$20155$1LXXoO
          g$key$20156$1LXXoO
          g$proc$20157$1LXXoO
          g$default$20158$1LXXoO)
        (g$hashtable-set!$20135$1LXXoO
          g$ht$20155$1LXXoO
          g$key$20156$1LXXoO
          (g$proc$20157$1LXXoO
            (g$hashtable-ref$20134$1LXXoO
              g$ht$20155$1LXXoO
              g$key$20156$1LXXoO
              g$default$20158$1LXXoO))))))
   (g$hashtable-clear!$20139$1LXXoO
     g$hashtable-clear!$20172$1LXXoO
     (case-lambda
       ((g$ht$20159$1LXXoO)
        (g$hashtable-clear!$20139$1LXXoO g$ht$20159$1LXXoO '32))
       ((g$ht$20160$1LXXoO g$k$20161$1LXXoO)
        (clr-call-internal 'hashtable 'clear g$ht$20160$1LXXoO)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$20174$1LXXoO
     g$using$20181$1LXXoO
     (clr-using-internal 'system.io))
   (g$file-exists?$20175$1LXXoO
     g$file-exists?$20182$1LXXoO
     (case-lambda
       ((g$fn$20178$1LXXoO)
        (clr-call-internal 'file 'exists '() g$fn$20178$1LXXoO))))
   (g$delete-file$20176$1LXXoO
     g$delete-file$20183$1LXXoO
     (case-lambda
       ((g$fn$20179$1LXXoO)
        (clr-call-internal 'file 'delete '() g$fn$20179$1LXXoO))))
   (g$get-directory-name$20177$1LXXoO
     g$get-directory-name$20184$1LXXoO
     (case-lambda
       ((g$path$20180$1LXXoO)
        (clr-call-internal
          'path
          'getdirectoryname
          '()
          g$path$20180$1LXXoO)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$20185$1LXXoO
     g$native-endianness$20296$1LXXoO
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$20186$1LXXoO
     g$bytevector-u16-ref$20297$1LXXoO
     (case-lambda
       ((g$bytevector$20214$1LXXoO
          g$k$20215$1LXXoO
          g$endianness$20216$1LXXoO)
        (bytevector-uint-ref
          g$bytevector$20214$1LXXoO
          g$k$20215$1LXXoO
          g$endianness$20216$1LXXoO
          '2))))
   (g$bytevector-s16-ref$20187$1LXXoO
     g$bytevector-s16-ref$20298$1LXXoO
     (case-lambda
       ((g$bytevector$20217$1LXXoO
          g$k$20218$1LXXoO
          g$endianness$20219$1LXXoO)
        (bytevector-sint-ref
          g$bytevector$20217$1LXXoO
          g$k$20218$1LXXoO
          g$endianness$20219$1LXXoO
          '2))))
   (g$bytevector-u16-native-ref$20188$1LXXoO
     g$bytevector-u16-native-ref$20299$1LXXoO
     (case-lambda
       ((g$bytevector$20220$1LXXoO g$k$20221$1LXXoO)
        (bytevector-uint-ref
          g$bytevector$20220$1LXXoO
          g$k$20221$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '2))))
   (g$bytevector-s16-native-ref$20189$1LXXoO
     g$bytevector-s16-native-ref$20300$1LXXoO
     (case-lambda
       ((g$bytevector$20222$1LXXoO g$k$20223$1LXXoO)
        (bytevector-sint-ref
          g$bytevector$20222$1LXXoO
          g$k$20223$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '2))))
   (g$bytevector-u16-set!$20190$1LXXoO
     g$bytevector-u16-set!$20301$1LXXoO
     (case-lambda
       ((g$bytevector$20224$1LXXoO
          g$k$20225$1LXXoO
          g$n$20226$1LXXoO
          g$endianness$20227$1LXXoO)
        (bytevector-uint-set!
          g$bytevector$20224$1LXXoO
          g$k$20225$1LXXoO
          g$n$20226$1LXXoO
          g$endianness$20227$1LXXoO
          '2))))
   (g$bytevector-s16-set!$20191$1LXXoO
     g$bytevector-s16-set!$20302$1LXXoO
     (case-lambda
       ((g$bytevector$20228$1LXXoO
          g$k$20229$1LXXoO
          g$n$20230$1LXXoO
          g$endianness$20231$1LXXoO)
        (bytevector-sint-set!
          g$bytevector$20228$1LXXoO
          g$k$20229$1LXXoO
          g$n$20230$1LXXoO
          g$endianness$20231$1LXXoO
          '2))))
   (g$bytevector-u16-native-set!$20192$1LXXoO
     g$bytevector-u16-native-set!$20303$1LXXoO
     (case-lambda
       ((g$bytevector$20232$1LXXoO g$k$20233$1LXXoO g$n$20234$1LXXoO)
        (bytevector-uint-set!
          g$bytevector$20232$1LXXoO
          g$k$20233$1LXXoO
          g$n$20234$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '2))))
   (g$bytevector-s16-native-set!$20193$1LXXoO
     g$bytevector-s16-native-set!$20304$1LXXoO
     (case-lambda
       ((g$bytevector$20235$1LXXoO g$k$20236$1LXXoO g$n$20237$1LXXoO)
        (bytevector-sint-set!
          g$bytevector$20235$1LXXoO
          g$k$20236$1LXXoO
          g$n$20237$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '2))))
   (g$bytevector-u32-ref$20194$1LXXoO
     g$bytevector-u32-ref$20305$1LXXoO
     (case-lambda
       ((g$bytevector$20238$1LXXoO
          g$k$20239$1LXXoO
          g$endianness$20240$1LXXoO)
        (bytevector-uint-ref
          g$bytevector$20238$1LXXoO
          g$k$20239$1LXXoO
          g$endianness$20240$1LXXoO
          '4))))
   (g$bytevector-s32-ref$20195$1LXXoO
     g$bytevector-s32-ref$20306$1LXXoO
     (case-lambda
       ((g$bytevector$20241$1LXXoO
          g$k$20242$1LXXoO
          g$endianness$20243$1LXXoO)
        (bytevector-sint-ref
          g$bytevector$20241$1LXXoO
          g$k$20242$1LXXoO
          g$endianness$20243$1LXXoO
          '4))))
   (g$bytevector-u32-native-ref$20196$1LXXoO
     g$bytevector-u32-native-ref$20307$1LXXoO
     (case-lambda
       ((g$bytevector$20244$1LXXoO g$k$20245$1LXXoO)
        (bytevector-uint-ref
          g$bytevector$20244$1LXXoO
          g$k$20245$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '4))))
   (g$bytevector-s32-native-ref$20197$1LXXoO
     g$bytevector-s32-native-ref$20308$1LXXoO
     (case-lambda
       ((g$bytevector$20246$1LXXoO g$k$20247$1LXXoO)
        (bytevector-sint-ref
          g$bytevector$20246$1LXXoO
          g$k$20247$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '4))))
   (g$bytevector-u32-set!$20198$1LXXoO
     g$bytevector-u32-set!$20309$1LXXoO
     (case-lambda
       ((g$bytevector$20248$1LXXoO
          g$k$20249$1LXXoO
          g$n$20250$1LXXoO
          g$endianness$20251$1LXXoO)
        (bytevector-uint-set!
          g$bytevector$20248$1LXXoO
          g$k$20249$1LXXoO
          g$n$20250$1LXXoO
          g$endianness$20251$1LXXoO
          '4))))
   (g$bytevector-s32-set!$20199$1LXXoO
     g$bytevector-s32-set!$20310$1LXXoO
     (case-lambda
       ((g$bytevector$20252$1LXXoO
          g$k$20253$1LXXoO
          g$n$20254$1LXXoO
          g$endianness$20255$1LXXoO)
        (bytevector-sint-set!
          g$bytevector$20252$1LXXoO
          g$k$20253$1LXXoO
          g$n$20254$1LXXoO
          g$endianness$20255$1LXXoO
          '4))))
   (g$bytevector-u32-native-set!$20200$1LXXoO
     g$bytevector-u32-native-set!$20311$1LXXoO
     (case-lambda
       ((g$bytevector$20256$1LXXoO g$k$20257$1LXXoO g$n$20258$1LXXoO)
        (bytevector-uint-set!
          g$bytevector$20256$1LXXoO
          g$k$20257$1LXXoO
          g$n$20258$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '4))))
   (g$bytevector-s32-native-set!$20201$1LXXoO
     g$bytevector-s32-native-set!$20312$1LXXoO
     (case-lambda
       ((g$bytevector$20259$1LXXoO g$k$20260$1LXXoO g$n$20261$1LXXoO)
        (bytevector-sint-set!
          g$bytevector$20259$1LXXoO
          g$k$20260$1LXXoO
          g$n$20261$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '4))))
   (g$bytevector-u64-ref$20202$1LXXoO
     g$bytevector-u64-ref$20313$1LXXoO
     (case-lambda
       ((g$bytevector$20262$1LXXoO
          g$k$20263$1LXXoO
          g$endianness$20264$1LXXoO)
        (bytevector-uint-ref
          g$bytevector$20262$1LXXoO
          g$k$20263$1LXXoO
          g$endianness$20264$1LXXoO
          '8))))
   (g$bytevector-s64-ref$20203$1LXXoO
     g$bytevector-s64-ref$20314$1LXXoO
     (case-lambda
       ((g$bytevector$20265$1LXXoO
          g$k$20266$1LXXoO
          g$endianness$20267$1LXXoO)
        (bytevector-sint-ref
          g$bytevector$20265$1LXXoO
          g$k$20266$1LXXoO
          g$endianness$20267$1LXXoO
          '8))))
   (g$bytevector-u64-native-ref$20204$1LXXoO
     g$bytevector-u64-native-ref$20315$1LXXoO
     (case-lambda
       ((g$bytevector$20268$1LXXoO g$k$20269$1LXXoO)
        (bytevector-uint-ref
          g$bytevector$20268$1LXXoO
          g$k$20269$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '8))))
   (g$bytevector-s64-native-ref$20205$1LXXoO
     g$bytevector-s64-native-ref$20316$1LXXoO
     (case-lambda
       ((g$bytevector$20270$1LXXoO g$k$20271$1LXXoO)
        (bytevector-sint-ref
          g$bytevector$20270$1LXXoO
          g$k$20271$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '8))))
   (g$bytevector-u64-set!$20206$1LXXoO
     g$bytevector-u64-set!$20317$1LXXoO
     (case-lambda
       ((g$bytevector$20272$1LXXoO
          g$k$20273$1LXXoO
          g$n$20274$1LXXoO
          g$endianness$20275$1LXXoO)
        (bytevector-uint-set!
          g$bytevector$20272$1LXXoO
          g$k$20273$1LXXoO
          g$n$20274$1LXXoO
          g$endianness$20275$1LXXoO
          '8))))
   (g$bytevector-s64-set!$20207$1LXXoO
     g$bytevector-s64-set!$20318$1LXXoO
     (case-lambda
       ((g$bytevector$20276$1LXXoO
          g$k$20277$1LXXoO
          g$n$20278$1LXXoO
          g$endianness$20279$1LXXoO)
        (bytevector-sint-set!
          g$bytevector$20276$1LXXoO
          g$k$20277$1LXXoO
          g$n$20278$1LXXoO
          g$endianness$20279$1LXXoO
          '8))))
   (g$bytevector-u64-native-set!$20208$1LXXoO
     g$bytevector-u64-native-set!$20319$1LXXoO
     (case-lambda
       ((g$bytevector$20280$1LXXoO g$k$20281$1LXXoO g$n$20282$1LXXoO)
        (bytevector-uint-set!
          g$bytevector$20280$1LXXoO
          g$k$20281$1LXXoO
          g$n$20282$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '8))))
   (g$bytevector-s64-native-set!$20209$1LXXoO
     g$bytevector-s64-native-set!$20320$1LXXoO
     (case-lambda
       ((g$bytevector$20283$1LXXoO g$k$20284$1LXXoO g$n$20285$1LXXoO)
        (bytevector-sint-set!
          g$bytevector$20283$1LXXoO
          g$k$20284$1LXXoO
          g$n$20285$1LXXoO
          (g$native-endianness$20185$1LXXoO)
          '8))))
   (g$bytevector-ieee-single-native-ref$20210$1LXXoO
     g$bytevector-ieee-single-native-ref$20321$1LXXoO
     (case-lambda
       ((g$bytevector$20286$1LXXoO g$k$20287$1LXXoO)
        (if (not (g$zero?$20711$1LXXoO
                   (g$mod$20064$1LXXoO g$k$20287$1LXXoO '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$20287$1LXXoO)
          (bytevector-ieee-single-ref
            g$bytevector$20286$1LXXoO
            g$k$20287$1LXXoO
            (g$native-endianness$20185$1LXXoO))))))
   (g$bytevector-ieee-double-native-ref$20211$1LXXoO
     g$bytevector-ieee-double-native-ref$20322$1LXXoO
     (case-lambda
       ((g$bytevector$20288$1LXXoO g$k$20289$1LXXoO)
        (if (not (g$zero?$20711$1LXXoO
                   (g$mod$20064$1LXXoO g$k$20289$1LXXoO '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$20289$1LXXoO)
          (bytevector-ieee-double-ref
            g$bytevector$20288$1LXXoO
            g$k$20289$1LXXoO
            (g$native-endianness$20185$1LXXoO))))))
   (g$bytevector-ieee-single-native-set!$20212$1LXXoO
     g$bytevector-ieee-single-native-set!$20323$1LXXoO
     (case-lambda
       ((g$bytevector$20290$1LXXoO g$k$20291$1LXXoO g$x$20292$1LXXoO)
        (if (not (g$zero?$20711$1LXXoO
                   (g$mod$20064$1LXXoO g$k$20291$1LXXoO '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$20291$1LXXoO)
          (bytevector-ieee-single-set!
            g$bytevector$20290$1LXXoO
            g$k$20291$1LXXoO
            g$x$20292$1LXXoO
            (g$native-endianness$20185$1LXXoO))))))
   (g$bytevector-ieee-double-native-set!$20213$1LXXoO
     g$bytevector-ieee-double-native-set!$20324$1LXXoO
     (case-lambda
       ((g$bytevector$20293$1LXXoO g$k$20294$1LXXoO g$x$20295$1LXXoO)
        (if (not (g$zero?$20711$1LXXoO
                   (g$mod$20064$1LXXoO g$k$20294$1LXXoO '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$20294$1LXXoO)
          (bytevector-ieee-double-set!
            g$bytevector$20293$1LXXoO
            g$k$20294$1LXXoO
            g$x$20295$1LXXoO
            (g$native-endianness$20185$1LXXoO)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme numbers)
  ((g$bignum?$20325$1LXXoO
     g$bignum?$20690$1LXXoO
     (case-lambda
       ((g$obj$20514$1LXXoO)
        (clr-is-internal
          'Microsoft.Scripting.Math.BigInteger
          g$obj$20514$1LXXoO))))
   (g$ratnum?$20326$1LXXoO
     g$ratnum?$20691$1LXXoO
     (case-lambda
       ((g$obj$20515$1LXXoO)
        (clr-is-internal
          'IronScheme.Runtime.Fraction
          g$obj$20515$1LXXoO))))
   (g$ratnum-denominator$20327$1LXXoO
     g$ratnum-denominator$20692$1LXXoO
     (case-lambda
       ((g$rat$20516$1LXXoO)
        (clr-call-internal
          'IronScheme.Runtime.Fraction
          'get_Denominator
          g$rat$20516$1LXXoO))))
   (g$ratnum-numerator$20328$1LXXoO
     g$ratnum-numerator$20693$1LXXoO
     (case-lambda
       ((g$rat$20517$1LXXoO)
        (clr-call-internal
          'IronScheme.Runtime.Fraction
          'get_Numerator
          g$rat$20517$1LXXoO))))
   (g$complexnum?$20329$1LXXoO
     g$complexnum?$20694$1LXXoO
     (case-lambda
       ((g$obj$20518$1LXXoO)
        (clr-is-internal
          'Microsoft.Scripting.Math.Complex64
          g$obj$20518$1LXXoO))))
   (g$make-complexnum$20330$1LXXoO
     g$make-complexnum$20695$1LXXoO
     (case-lambda
       ((g$r1$20519$1LXXoO g$r2$20520$1LXXoO)
        (clr-call-internal
          'Microsoft.Scripting.Math.Complex64
          'Make
          '()
          g$r1$20519$1LXXoO
          g$r2$20520$1LXXoO))))
   (g$complexnum-imag-part$20331$1LXXoO
     g$complexnum-imag-part$20696$1LXXoO
     (case-lambda
       ((g$c$20521$1LXXoO)
        (clr-call-internal
          'Microsoft.Scripting.Math.Complex64
          'get_Imag
          g$c$20521$1LXXoO))))
   (g$complexnum-real-part$20332$1LXXoO
     g$complexnum-real-part$20697$1LXXoO
     (case-lambda
       ((g$c$20522$1LXXoO)
        (clr-call-internal
          'Microsoft.Scripting.Math.Complex64
          'get_Real
          g$c$20522$1LXXoO))))
   (g$number?$20333$1LXXoO
     g$number?$20698$1LXXoO
     (case-lambda
       ((g$obj$20523$1LXXoO)
        ((case-lambda
           ((g$t$20524$1LXXoO)
            (if g$t$20524$1LXXoO
              g$t$20524$1LXXoO
              ((case-lambda
                 ((g$t$20525$1LXXoO)
                  (if g$t$20525$1LXXoO
                    g$t$20525$1LXXoO
                    ((case-lambda
                       ((g$t$20526$1LXXoO)
                        (if g$t$20526$1LXXoO
                          g$t$20526$1LXXoO
                          ((case-lambda
                             ((g$t$20527$1LXXoO)
                              (if g$t$20527$1LXXoO
                                g$t$20527$1LXXoO
                                (begin
                                  '#f
                                  (g$complexnum?$20329$1LXXoO
                                    g$obj$20523$1LXXoO)))))
                           (g$ratnum?$20326$1LXXoO
                             g$obj$20523$1LXXoO)))))
                     (g$bignum?$20325$1LXXoO g$obj$20523$1LXXoO)))))
               (g$flonum?$20061$1LXXoO g$obj$20523$1LXXoO)))))
         (g$fixnum?$20060$1LXXoO g$obj$20523$1LXXoO)))))
   (g$nan?$20334$1LXXoO
     g$nan?$20699$1LXXoO
     (case-lambda
       ((g$num$20528$1LXXoO)
        (if ((case-lambda
               ((g$t$20529$1LXXoO)
                (if g$t$20529$1LXXoO
                  g$t$20529$1LXXoO
                  ((case-lambda
                     ((g$t$20530$1LXXoO)
                      (if g$t$20530$1LXXoO
                        g$t$20530$1LXXoO
                        (begin
                          '#f
                          (g$ratnum?$20326$1LXXoO
                            g$num$20528$1LXXoO)))))
                   (g$bignum?$20325$1LXXoO g$num$20528$1LXXoO)))))
             (g$fixnum?$20060$1LXXoO g$num$20528$1LXXoO))
          '#f
          (if (g$flonum?$20061$1LXXoO g$num$20528$1LXXoO)
            (g$flnan?$25455$1LXXoO g$num$20528$1LXXoO)
            (if (g$complexnum?$20329$1LXXoO g$num$20528$1LXXoO)
              ((case-lambda
                 ((g$t$20531$1LXXoO)
                  (if g$t$20531$1LXXoO
                    g$t$20531$1LXXoO
                    (begin
                      '#f
                      (g$flnan?$25455$1LXXoO
                        (g$complexnum-imag-part$20331$1LXXoO
                          g$num$20528$1LXXoO))))))
               (g$flnan?$25455$1LXXoO
                 (g$complexnum-real-part$20332$1LXXoO
                   g$num$20528$1LXXoO)))
              (begin
                '#f
                (assertion-violation
                  'nan?
                  '"not a number"
                  g$num$20528$1LXXoO))))))))
   (g$finite?$20335$1LXXoO
     g$finite?$20700$1LXXoO
     (case-lambda
       ((g$num$20532$1LXXoO)
        (if ((case-lambda
               ((g$t$20533$1LXXoO)
                (if g$t$20533$1LXXoO
                  g$t$20533$1LXXoO
                  ((case-lambda
                     ((g$t$20534$1LXXoO)
                      (if g$t$20534$1LXXoO
                        g$t$20534$1LXXoO
                        (begin
                          '#f
                          (g$ratnum?$20326$1LXXoO
                            g$num$20532$1LXXoO)))))
                   (g$bignum?$20325$1LXXoO g$num$20532$1LXXoO)))))
             (g$fixnum?$20060$1LXXoO g$num$20532$1LXXoO))
          '#t
          (if (g$flonum?$20061$1LXXoO g$num$20532$1LXXoO)
            (g$flfinite?$25452$1LXXoO g$num$20532$1LXXoO)
            (if (g$complexnum?$20329$1LXXoO g$num$20532$1LXXoO)
              (if (g$flfinite?$25452$1LXXoO
                    (g$complexnum-real-part$20332$1LXXoO
                      g$num$20532$1LXXoO))
                (begin
                  '#f
                  (g$flfinite?$25452$1LXXoO
                    (g$complexnum-imag-part$20331$1LXXoO
                      g$num$20532$1LXXoO)))
                '#f)
              (begin
                '#f
                (assertion-violation
                  'finite?
                  '"not a number"
                  g$num$20532$1LXXoO))))))))
   (g$infinite?$20336$1LXXoO
     g$infinite?$20701$1LXXoO
     (case-lambda
       ((g$num$20535$1LXXoO)
        (if ((case-lambda
               ((g$t$20536$1LXXoO)
                (if g$t$20536$1LXXoO
                  g$t$20536$1LXXoO
                  ((case-lambda
                     ((g$t$20537$1LXXoO)
                      (if g$t$20537$1LXXoO
                        g$t$20537$1LXXoO
                        (begin
                          '#f
                          (g$ratnum?$20326$1LXXoO
                            g$num$20535$1LXXoO)))))
                   (g$bignum?$20325$1LXXoO g$num$20535$1LXXoO)))))
             (g$fixnum?$20060$1LXXoO g$num$20535$1LXXoO))
          '#f
          (if (g$flonum?$20061$1LXXoO g$num$20535$1LXXoO)
            (g$flinfinite?$25454$1LXXoO g$num$20535$1LXXoO)
            (if (g$complexnum?$20329$1LXXoO g$num$20535$1LXXoO)
              ((case-lambda
                 ((g$t$20538$1LXXoO)
                  (if g$t$20538$1LXXoO
                    g$t$20538$1LXXoO
                    (begin
                      '#f
                      (g$flinfinite?$25454$1LXXoO
                        (g$complexnum-imag-part$20331$1LXXoO
                          g$num$20535$1LXXoO))))))
               (g$flinfinite?$25454$1LXXoO
                 (g$complexnum-real-part$20332$1LXXoO
                   g$num$20535$1LXXoO)))
              (begin
                '#f
                (assertion-violation
                  'infinite?
                  '"not a number"
                  g$num$20535$1LXXoO))))))))
   (g$exact?$20337$1LXXoO
     g$exact?$20702$1LXXoO
     (case-lambda
       ((g$obj$20539$1LXXoO)
        (if ((case-lambda
               ((g$t$20540$1LXXoO)
                (if g$t$20540$1LXXoO
                  g$t$20540$1LXXoO
                  ((case-lambda
                     ((g$t$20541$1LXXoO)
                      (if g$t$20541$1LXXoO
                        g$t$20541$1LXXoO
                        (begin
                          '#f
                          (g$ratnum?$20326$1LXXoO
                            g$obj$20539$1LXXoO)))))
                   (g$bignum?$20325$1LXXoO g$obj$20539$1LXXoO)))))
             (g$fixnum?$20060$1LXXoO g$obj$20539$1LXXoO))
          '#t
          (if ((case-lambda
                 ((g$t$20542$1LXXoO)
                  (if g$t$20542$1LXXoO
                    g$t$20542$1LXXoO
                    (begin
                      '#f
                      (g$complexnum?$20329$1LXXoO
                        g$obj$20539$1LXXoO)))))
               (g$flonum?$20061$1LXXoO g$obj$20539$1LXXoO))
            '#f
            (begin
              '#f
              (assertion-violation
                'exact
                '"not a number"
                g$obj$20539$1LXXoO)))))))
   (g$inexact?$20338$1LXXoO
     g$inexact?$20703$1LXXoO
     (case-lambda
       ((g$obj$20543$1LXXoO)
        (if ((case-lambda
               ((g$t$20544$1LXXoO)
                (if g$t$20544$1LXXoO
                  g$t$20544$1LXXoO
                  ((case-lambda
                     ((g$t$20545$1LXXoO)
                      (if g$t$20545$1LXXoO
                        g$t$20545$1LXXoO
                        (begin
                          '#f
                          (g$ratnum?$20326$1LXXoO
                            g$obj$20543$1LXXoO)))))
                   (g$bignum?$20325$1LXXoO g$obj$20543$1LXXoO)))))
             (g$fixnum?$20060$1LXXoO g$obj$20543$1LXXoO))
          '#f
          (if ((case-lambda
                 ((g$t$20546$1LXXoO)
                  (if g$t$20546$1LXXoO
                    g$t$20546$1LXXoO
                    (begin
                      '#f
                      (g$complexnum?$20329$1LXXoO
                        g$obj$20543$1LXXoO)))))
               (g$flonum?$20061$1LXXoO g$obj$20543$1LXXoO))
            '#t
            (begin
              '#f
              (assertion-violation
                'inexact
                '"not a number"
                g$obj$20543$1LXXoO)))))))
   (g$complex?$20339$1LXXoO
     g$complex?$20704$1LXXoO
     (case-lambda
       ((g$obj$20547$1LXXoO)
        (g$number?$20333$1LXXoO g$obj$20547$1LXXoO))))
   (g$real?$20340$1LXXoO
     g$real?$20705$1LXXoO
     (case-lambda
       ((g$obj$20548$1LXXoO)
        (if ((case-lambda
               ((g$t$20549$1LXXoO)
                (if g$t$20549$1LXXoO
                  g$t$20549$1LXXoO
                  ((case-lambda
                     ((g$t$20550$1LXXoO)
                      (if g$t$20550$1LXXoO
                        g$t$20550$1LXXoO
                        ((case-lambda
                           ((g$t$20551$1LXXoO)
                            (if g$t$20551$1LXXoO
                              g$t$20551$1LXXoO
                              (begin
                                '#f
                                (g$flonum?$20061$1LXXoO
                                  g$obj$20548$1LXXoO)))))
                         (g$ratnum?$20326$1LXXoO g$obj$20548$1LXXoO)))))
                   (g$bignum?$20325$1LXXoO g$obj$20548$1LXXoO)))))
             (g$fixnum?$20060$1LXXoO g$obj$20548$1LXXoO))
          '#t
          (if (g$complexnum?$20329$1LXXoO g$obj$20548$1LXXoO)
            ((case-lambda
               ((g$i$20552$1LXXoO)
                (if (g$zero?$20346$1LXXoO g$i$20552$1LXXoO)
                  (begin '#f (g$exact?$20337$1LXXoO g$i$20552$1LXXoO))
                  '#f)))
             (g$imag-part$20460$1LXXoO g$obj$20548$1LXXoO))
            (begin '#f '#f))))))
   (g$rational?$20341$1LXXoO
     g$rational?$20706$1LXXoO
     (case-lambda
       ((g$obj$20553$1LXXoO)
        (if ((case-lambda
               ((g$t$20554$1LXXoO)
                (if g$t$20554$1LXXoO
                  g$t$20554$1LXXoO
                  ((case-lambda
                     ((g$t$20555$1LXXoO)
                      (if g$t$20555$1LXXoO
                        g$t$20555$1LXXoO
                        (begin
                          '#f
                          (g$ratnum?$20326$1LXXoO
                            g$obj$20553$1LXXoO)))))
                   (g$bignum?$20325$1LXXoO g$obj$20553$1LXXoO)))))
             (g$fixnum?$20060$1LXXoO g$obj$20553$1LXXoO))
          '#t
          (if (if ((case-lambda
                     ((g$t$20556$1LXXoO)
                      (if g$t$20556$1LXXoO
                        g$t$20556$1LXXoO
                        (begin
                          '#f
                          (g$flonum?$20061$1LXXoO
                            g$obj$20553$1LXXoO)))))
                   (g$complexnum?$20329$1LXXoO g$obj$20553$1LXXoO))
                (if (g$finite?$20335$1LXXoO g$obj$20553$1LXXoO)
                  (begin
                    '#f
                    (not (g$nan?$20334$1LXXoO g$obj$20553$1LXXoO)))
                  '#f)
                '#f)
            ((case-lambda
               ((g$i$20557$1LXXoO)
                (if (g$exact?$20337$1LXXoO g$i$20557$1LXXoO)
                  (begin '#f (g$zero?$20346$1LXXoO g$i$20557$1LXXoO))
                  '#f)))
             (g$imag-part$20460$1LXXoO g$obj$20553$1LXXoO))
            (begin '#f '#f))))))
   (g$integer?$20342$1LXXoO
     g$integer?$20707$1LXXoO
     (case-lambda
       ((g$obj$20558$1LXXoO)
        (if ((case-lambda
               ((g$t$20559$1LXXoO)
                (if g$t$20559$1LXXoO
                  g$t$20559$1LXXoO
                  (begin
                    '#f
                    (g$bignum?$20325$1LXXoO g$obj$20558$1LXXoO)))))
             (g$fixnum?$20060$1LXXoO g$obj$20558$1LXXoO))
          '#t
          (if (if ((case-lambda
                     ((g$t$20560$1LXXoO)
                      (if g$t$20560$1LXXoO
                        g$t$20560$1LXXoO
                        ((case-lambda
                           ((g$t$20561$1LXXoO)
                            (if g$t$20561$1LXXoO
                              g$t$20561$1LXXoO
                              (begin
                                '#f
                                (g$flonum?$20061$1LXXoO
                                  g$obj$20558$1LXXoO)))))
                         (g$complexnum?$20329$1LXXoO
                           g$obj$20558$1LXXoO)))))
                   (g$ratnum?$20326$1LXXoO g$obj$20558$1LXXoO))
                (if (g$finite?$20335$1LXXoO g$obj$20558$1LXXoO)
                  (begin
                    '#f
                    (not (g$nan?$20334$1LXXoO g$obj$20558$1LXXoO)))
                  '#f)
                '#f)
            ((case-lambda
               ((g$i$20562$1LXXoO)
                (if (g$exact?$20337$1LXXoO g$i$20562$1LXXoO)
                  (if (g$zero?$20346$1LXXoO g$i$20562$1LXXoO)
                    (begin
                      '#f
                      (g$=$20447$1LXXoO
                        (g$denominator$20458$1LXXoO
                          (g$real-part$20459$1LXXoO g$obj$20558$1LXXoO))
                        '1))
                    '#f)
                  '#f)))
             (g$imag-part$20460$1LXXoO g$obj$20558$1LXXoO))
            (begin '#f '#f))))))
   (g$real-valued?$20343$1LXXoO
     g$real-valued?$20708$1LXXoO
     (case-lambda
       ((g$obj$20563$1LXXoO)
        (if ((case-lambda
               ((g$t$20564$1LXXoO)
                (if g$t$20564$1LXXoO
                  g$t$20564$1LXXoO
                  ((case-lambda
                     ((g$t$20565$1LXXoO)
                      (if g$t$20565$1LXXoO
                        g$t$20565$1LXXoO
                        ((case-lambda
                           ((g$t$20566$1LXXoO)
                            (if g$t$20566$1LXXoO
                              g$t$20566$1LXXoO
                              (begin
                                '#f
                                (g$flonum?$20061$1LXXoO
                                  g$obj$20563$1LXXoO)))))
                         (g$ratnum?$20326$1LXXoO g$obj$20563$1LXXoO)))))
                   (g$bignum?$20325$1LXXoO g$obj$20563$1LXXoO)))))
             (g$fixnum?$20060$1LXXoO g$obj$20563$1LXXoO))
          '#t
          (if (g$complexnum?$20329$1LXXoO g$obj$20563$1LXXoO)
            ((case-lambda
               ((g$i$20567$1LXXoO)
                (g$zero?$20346$1LXXoO g$i$20567$1LXXoO)))
             (g$imag-part$20460$1LXXoO g$obj$20563$1LXXoO))
            (begin '#f '#f))))))
   (g$rational-valued?$20344$1LXXoO
     g$rational-valued?$20709$1LXXoO
     (case-lambda
       ((g$obj$20568$1LXXoO)
        (if ((case-lambda
               ((g$t$20569$1LXXoO)
                (if g$t$20569$1LXXoO
                  g$t$20569$1LXXoO
                  ((case-lambda
                     ((g$t$20570$1LXXoO)
                      (if g$t$20570$1LXXoO
                        g$t$20570$1LXXoO
                        (begin
                          '#f
                          (g$ratnum?$20326$1LXXoO
                            g$obj$20568$1LXXoO)))))
                   (g$bignum?$20325$1LXXoO g$obj$20568$1LXXoO)))))
             (g$fixnum?$20060$1LXXoO g$obj$20568$1LXXoO))
          '#t
          (if (if ((case-lambda
                     ((g$t$20571$1LXXoO)
                      (if g$t$20571$1LXXoO
                        g$t$20571$1LXXoO
                        (begin
                          '#f
                          (g$flonum?$20061$1LXXoO
                            g$obj$20568$1LXXoO)))))
                   (g$complexnum?$20329$1LXXoO g$obj$20568$1LXXoO))
                (if (g$finite?$20335$1LXXoO g$obj$20568$1LXXoO)
                  (begin
                    '#f
                    (not (g$nan?$20334$1LXXoO g$obj$20568$1LXXoO)))
                  '#f)
                '#f)
            ((case-lambda
               ((g$i$20572$1LXXoO)
                (g$zero?$20346$1LXXoO g$i$20572$1LXXoO)))
             (g$imag-part$20460$1LXXoO g$obj$20568$1LXXoO))
            (begin '#f '#f))))))
   (g$integer-valued?$20345$1LXXoO
     g$integer-valued?$20710$1LXXoO
     (case-lambda
       ((g$obj$20573$1LXXoO)
        (if ((case-lambda
               ((g$t$20574$1LXXoO)
                (if g$t$20574$1LXXoO
                  g$t$20574$1LXXoO
                  (begin
                    '#f
                    (g$bignum?$20325$1LXXoO g$obj$20573$1LXXoO)))))
             (g$fixnum?$20060$1LXXoO g$obj$20573$1LXXoO))
          '#t
          (if (if ((case-lambda
                     ((g$t$20575$1LXXoO)
                      (if g$t$20575$1LXXoO
                        g$t$20575$1LXXoO
                        ((case-lambda
                           ((g$t$20576$1LXXoO)
                            (if g$t$20576$1LXXoO
                              g$t$20576$1LXXoO
                              (begin
                                '#f
                                (g$flonum?$20061$1LXXoO
                                  g$obj$20573$1LXXoO)))))
                         (g$complexnum?$20329$1LXXoO
                           g$obj$20573$1LXXoO)))))
                   (g$ratnum?$20326$1LXXoO g$obj$20573$1LXXoO))
                (if (g$finite?$20335$1LXXoO g$obj$20573$1LXXoO)
                  (begin
                    '#f
                    (not (g$nan?$20334$1LXXoO g$obj$20573$1LXXoO)))
                  '#f)
                '#f)
            ((case-lambda
               ((g$i$20577$1LXXoO)
                (if (g$zero?$20346$1LXXoO g$i$20577$1LXXoO)
                  (begin
                    '#f
                    (g$=$20447$1LXXoO
                      (g$denominator$20458$1LXXoO
                        (g$real-part$20459$1LXXoO g$obj$20573$1LXXoO))
                      '1))
                  '#f)))
             (g$imag-part$20460$1LXXoO g$obj$20573$1LXXoO))
            (begin '#f '#f))))))
   (g$zero?$20346$1LXXoO
     g$zero?$20711$1LXXoO
     (case-lambda
       ((g$num$20578$1LXXoO) (g$=$20447$1LXXoO g$num$20578$1LXXoO '0))))
   (g$positive?$20347$1LXXoO
     g$positive?$20712$1LXXoO
     (case-lambda
       ((g$num$20579$1LXXoO) (g$>$20450$1LXXoO g$num$20579$1LXXoO '0))))
   (g$negative?$20348$1LXXoO
     g$negative?$20713$1LXXoO
     (case-lambda
       ((g$num$20580$1LXXoO) (g$<$20448$1LXXoO g$num$20580$1LXXoO '0))))
   (g$=$20447$1LXXoO
     g$=$20714$1LXXoO
     (case-lambda
       ((g$a$20581$1LXXoO g$b$20582$1LXXoO)
        (if (if (g$real?$20340$1LXXoO g$a$20581$1LXXoO)
              (if (g$real?$20340$1LXXoO g$b$20582$1LXXoO)
                (if (g$finite?$20335$1LXXoO g$a$20581$1LXXoO)
                  (if (g$finite?$20335$1LXXoO g$b$20582$1LXXoO)
                    (if (not (g$nan?$20334$1LXXoO g$a$20581$1LXXoO))
                      (begin
                        '#f
                        (not (g$nan?$20334$1LXXoO g$b$20582$1LXXoO)))
                      '#f)
                    '#f)
                  '#f)
                '#f)
              '#f)
          ($fx=?
            (exact-compare
              (exact g$a$20581$1LXXoO)
              (exact g$b$20582$1LXXoO))
            '0)
          (if ((case-lambda
                 ((g$t$20583$1LXXoO)
                  (if g$t$20583$1LXXoO
                    g$t$20583$1LXXoO
                    (begin
                      '#f
                      (g$nan?$20334$1LXXoO g$b$20582$1LXXoO)))))
               (g$nan?$20334$1LXXoO g$a$20581$1LXXoO))
            '#f
            (if (if (g$number?$20333$1LXXoO g$a$20581$1LXXoO)
                  (begin '#f (g$number?$20333$1LXXoO g$b$20582$1LXXoO))
                  '#f)
              (inexact=?
                (inexact g$a$20581$1LXXoO)
                (inexact g$b$20582$1LXXoO))
              (begin
                '#f
                (assertion-violation
                  '=
                  '"not number arguments"
                  g$a$20581$1LXXoO
                  g$b$20582$1LXXoO))))))
       ((g$x1$20584$1LXXoO g$x2$20585$1LXXoO . g$rest$20586$1LXXoO)
        ((letrec ((g$f$20587$1LXXoO
                    (case-lambda
                      ((g$a$20588$1LXXoO g$b$20589$1LXXoO)
                       (if (null? g$b$20589$1LXXoO)
                         '#t
                         (if (g$=$20447$1LXXoO
                               g$a$20588$1LXXoO
                               ($car g$b$20589$1LXXoO))
                           (g$f$20587$1LXXoO
                             ($car g$b$20589$1LXXoO)
                             ($cdr g$b$20589$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$20587$1LXXoO)
         g$x1$20584$1LXXoO
         (cons g$x2$20585$1LXXoO g$rest$20586$1LXXoO)))))
   (g$<$20448$1LXXoO
     g$<$20715$1LXXoO
     (case-lambda
       ((g$a$20590$1LXXoO g$b$20591$1LXXoO)
        (if (if (g$real?$20340$1LXXoO g$a$20590$1LXXoO)
              (if (g$real?$20340$1LXXoO g$b$20591$1LXXoO)
                (if (g$finite?$20335$1LXXoO g$a$20590$1LXXoO)
                  (if (g$finite?$20335$1LXXoO g$b$20591$1LXXoO)
                    (if (not (g$nan?$20334$1LXXoO g$a$20590$1LXXoO))
                      (begin
                        '#f
                        (not (g$nan?$20334$1LXXoO g$b$20591$1LXXoO)))
                      '#f)
                    '#f)
                  '#f)
                '#f)
              '#f)
          ($fx<?
            (exact-compare
              (exact g$a$20590$1LXXoO)
              (exact g$b$20591$1LXXoO))
            '0)
          (if ((case-lambda
                 ((g$t$20592$1LXXoO)
                  (if g$t$20592$1LXXoO
                    g$t$20592$1LXXoO
                    (begin
                      '#f
                      (g$nan?$20334$1LXXoO g$b$20591$1LXXoO)))))
               (g$nan?$20334$1LXXoO g$a$20590$1LXXoO))
            '#f
            (if (if (g$real?$20340$1LXXoO g$a$20590$1LXXoO)
                  (begin '#f (g$real?$20340$1LXXoO g$b$20591$1LXXoO))
                  '#f)
              ($fx<?
                (inexact-compare
                  (inexact g$a$20590$1LXXoO)
                  (inexact g$b$20591$1LXXoO))
                '0)
              (begin
                '#f
                (assertion-violation
                  '<
                  '"not real arguments"
                  g$a$20590$1LXXoO
                  g$b$20591$1LXXoO))))))
       ((g$x1$20593$1LXXoO g$x2$20594$1LXXoO . g$rest$20595$1LXXoO)
        ((letrec ((g$f$20596$1LXXoO
                    (case-lambda
                      ((g$a$20597$1LXXoO g$b$20598$1LXXoO)
                       (if (null? g$b$20598$1LXXoO)
                         '#t
                         (if (g$<$20448$1LXXoO
                               g$a$20597$1LXXoO
                               ($car g$b$20598$1LXXoO))
                           (g$f$20596$1LXXoO
                             ($car g$b$20598$1LXXoO)
                             ($cdr g$b$20598$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$20596$1LXXoO)
         g$x1$20593$1LXXoO
         (cons g$x2$20594$1LXXoO g$rest$20595$1LXXoO)))))
   (g$<=$20449$1LXXoO
     g$<=$20716$1LXXoO
     (case-lambda
       ((g$a$20599$1LXXoO g$b$20600$1LXXoO)
        (if (if (g$real?$20340$1LXXoO g$a$20599$1LXXoO)
              (if (g$real?$20340$1LXXoO g$b$20600$1LXXoO)
                (if (g$finite?$20335$1LXXoO g$a$20599$1LXXoO)
                  (if (g$finite?$20335$1LXXoO g$b$20600$1LXXoO)
                    (if (not (g$nan?$20334$1LXXoO g$a$20599$1LXXoO))
                      (begin
                        '#f
                        (not (g$nan?$20334$1LXXoO g$b$20600$1LXXoO)))
                      '#f)
                    '#f)
                  '#f)
                '#f)
              '#f)
          ($fx<=?
            (exact-compare
              (exact g$a$20599$1LXXoO)
              (exact g$b$20600$1LXXoO))
            '0)
          (if ((case-lambda
                 ((g$t$20601$1LXXoO)
                  (if g$t$20601$1LXXoO
                    g$t$20601$1LXXoO
                    (begin
                      '#f
                      (g$nan?$20334$1LXXoO g$b$20600$1LXXoO)))))
               (g$nan?$20334$1LXXoO g$a$20599$1LXXoO))
            '#f
            (if (if (g$real?$20340$1LXXoO g$a$20599$1LXXoO)
                  (begin '#f (g$real?$20340$1LXXoO g$b$20600$1LXXoO))
                  '#f)
              ($fx<=?
                (inexact-compare
                  (inexact g$a$20599$1LXXoO)
                  (inexact g$b$20600$1LXXoO))
                '0)
              (begin
                '#f
                (assertion-violation
                  '<=
                  '"not real arguments"
                  g$a$20599$1LXXoO
                  g$b$20600$1LXXoO))))))
       ((g$x1$20602$1LXXoO g$x2$20603$1LXXoO . g$rest$20604$1LXXoO)
        ((letrec ((g$f$20605$1LXXoO
                    (case-lambda
                      ((g$a$20606$1LXXoO g$b$20607$1LXXoO)
                       (if (null? g$b$20607$1LXXoO)
                         '#t
                         (if (g$<=$20449$1LXXoO
                               g$a$20606$1LXXoO
                               ($car g$b$20607$1LXXoO))
                           (g$f$20605$1LXXoO
                             ($car g$b$20607$1LXXoO)
                             ($cdr g$b$20607$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$20605$1LXXoO)
         g$x1$20602$1LXXoO
         (cons g$x2$20603$1LXXoO g$rest$20604$1LXXoO)))))
   (g$>$20450$1LXXoO
     g$>$20717$1LXXoO
     (case-lambda
       ((g$a$20608$1LXXoO g$b$20609$1LXXoO)
        (if (if (g$real?$20340$1LXXoO g$a$20608$1LXXoO)
              (if (g$real?$20340$1LXXoO g$b$20609$1LXXoO)
                (if (g$finite?$20335$1LXXoO g$a$20608$1LXXoO)
                  (if (g$finite?$20335$1LXXoO g$b$20609$1LXXoO)
                    (if (not (g$nan?$20334$1LXXoO g$a$20608$1LXXoO))
                      (begin
                        '#f
                        (not (g$nan?$20334$1LXXoO g$b$20609$1LXXoO)))
                      '#f)
                    '#f)
                  '#f)
                '#f)
              '#f)
          ($fx>?
            (exact-compare
              (exact g$a$20608$1LXXoO)
              (exact g$b$20609$1LXXoO))
            '0)
          (if ((case-lambda
                 ((g$t$20610$1LXXoO)
                  (if g$t$20610$1LXXoO
                    g$t$20610$1LXXoO
                    (begin
                      '#f
                      (g$nan?$20334$1LXXoO g$b$20609$1LXXoO)))))
               (g$nan?$20334$1LXXoO g$a$20608$1LXXoO))
            '#f
            (if (if (g$real?$20340$1LXXoO g$a$20608$1LXXoO)
                  (begin '#f (g$real?$20340$1LXXoO g$b$20609$1LXXoO))
                  '#f)
              ($fx>?
                (inexact-compare
                  (inexact g$a$20608$1LXXoO)
                  (inexact g$b$20609$1LXXoO))
                '0)
              (begin
                '#f
                (assertion-violation
                  '>
                  '"not real arguments"
                  g$a$20608$1LXXoO
                  g$b$20609$1LXXoO))))))
       ((g$x1$20611$1LXXoO g$x2$20612$1LXXoO . g$rest$20613$1LXXoO)
        ((letrec ((g$f$20614$1LXXoO
                    (case-lambda
                      ((g$a$20615$1LXXoO g$b$20616$1LXXoO)
                       (if (null? g$b$20616$1LXXoO)
                         '#t
                         (if (g$>$20450$1LXXoO
                               g$a$20615$1LXXoO
                               ($car g$b$20616$1LXXoO))
                           (g$f$20614$1LXXoO
                             ($car g$b$20616$1LXXoO)
                             ($cdr g$b$20616$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$20614$1LXXoO)
         g$x1$20611$1LXXoO
         (cons g$x2$20612$1LXXoO g$rest$20613$1LXXoO)))))
   (g$>=$20451$1LXXoO
     g$>=$20718$1LXXoO
     (case-lambda
       ((g$a$20617$1LXXoO g$b$20618$1LXXoO)
        (if (if (g$real?$20340$1LXXoO g$a$20617$1LXXoO)
              (if (g$real?$20340$1LXXoO g$b$20618$1LXXoO)
                (if (g$finite?$20335$1LXXoO g$a$20617$1LXXoO)
                  (if (g$finite?$20335$1LXXoO g$b$20618$1LXXoO)
                    (if (not (g$nan?$20334$1LXXoO g$a$20617$1LXXoO))
                      (begin
                        '#f
                        (not (g$nan?$20334$1LXXoO g$b$20618$1LXXoO)))
                      '#f)
                    '#f)
                  '#f)
                '#f)
              '#f)
          ($fx>=?
            (exact-compare
              (exact g$a$20617$1LXXoO)
              (exact g$b$20618$1LXXoO))
            '0)
          (if ((case-lambda
                 ((g$t$20619$1LXXoO)
                  (if g$t$20619$1LXXoO
                    g$t$20619$1LXXoO
                    (begin
                      '#f
                      (g$nan?$20334$1LXXoO g$b$20618$1LXXoO)))))
               (g$nan?$20334$1LXXoO g$a$20617$1LXXoO))
            '#f
            (if (if (g$real?$20340$1LXXoO g$a$20617$1LXXoO)
                  (begin '#f (g$real?$20340$1LXXoO g$b$20618$1LXXoO))
                  '#f)
              ($fx>=?
                (inexact-compare
                  (inexact g$a$20617$1LXXoO)
                  (inexact g$b$20618$1LXXoO))
                '0)
              (begin
                '#f
                (assertion-violation
                  '>=
                  '"not real arguments"
                  g$a$20617$1LXXoO
                  g$b$20618$1LXXoO))))))
       ((g$x1$20620$1LXXoO g$x2$20621$1LXXoO . g$rest$20622$1LXXoO)
        ((letrec ((g$f$20623$1LXXoO
                    (case-lambda
                      ((g$a$20624$1LXXoO g$b$20625$1LXXoO)
                       (if (null? g$b$20625$1LXXoO)
                         '#t
                         (if (g$>=$20451$1LXXoO
                               g$a$20624$1LXXoO
                               ($car g$b$20625$1LXXoO))
                           (g$f$20623$1LXXoO
                             ($car g$b$20625$1LXXoO)
                             ($cdr g$b$20625$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$20623$1LXXoO)
         g$x1$20620$1LXXoO
         (cons g$x2$20621$1LXXoO g$rest$20622$1LXXoO)))))
   (g$make-rectangular$20452$1LXXoO
     g$make-rectangular$20719$1LXXoO
     (case-lambda
       ((g$r1$20626$1LXXoO g$r2$20627$1LXXoO)
        (begin
          (if (not (g$real?$20340$1LXXoO g$r1$20626$1LXXoO))
            (assertion-violation
              'make-rectangular
              '"not a real"
              g$r1$20626$1LXXoO)
            (void))
          (if (not (g$real?$20340$1LXXoO g$r2$20627$1LXXoO))
            (assertion-violation
              'make-rectangular
              '"not a real"
              g$r2$20627$1LXXoO)
            (void))
          (if (if (g$exact?$20337$1LXXoO g$r2$20627$1LXXoO)
                (begin '#f (g$zero?$20346$1LXXoO g$r2$20627$1LXXoO))
                '#f)
            g$r1$20626$1LXXoO
            (g$make-complexnum$20330$1LXXoO
              (inexact g$r1$20626$1LXXoO)
              (inexact g$r2$20627$1LXXoO)))))))
   (g$make-polar$20453$1LXXoO
     g$make-polar$20720$1LXXoO
     (case-lambda
       ((g$r1$20628$1LXXoO g$r2$20629$1LXXoO)
        (begin
          (if (not (g$real?$20340$1LXXoO g$r1$20628$1LXXoO))
            (assertion-violation
              'make-polar
              '"not a real"
              g$r1$20628$1LXXoO)
            (void))
          (if (not (g$real?$20340$1LXXoO g$r2$20629$1LXXoO))
            (assertion-violation
              'make-polar
              '"not a real"
              g$r2$20629$1LXXoO)
            (void))
          (if (if (g$exact?$20337$1LXXoO g$r2$20629$1LXXoO)
                (begin '#f (g$zero?$20346$1LXXoO g$r2$20629$1LXXoO))
                '#f)
            g$r1$20628$1LXXoO
            (* g$r1$20628$1LXXoO
               (g$make-rectangular$20452$1LXXoO
                 (g$cos$20495$1LXXoO g$r2$20629$1LXXoO)
                 (g$sin$20492$1LXXoO g$r2$20629$1LXXoO))))))))
   (g$angle$20454$1LXXoO
     g$angle$20721$1LXXoO
     (case-lambda
       ((g$num$20630$1LXXoO)
        (begin
          (if (not (g$number?$20333$1LXXoO g$num$20630$1LXXoO))
            (assertion-violation
              'angle
              '"not a number"
              g$num$20630$1LXXoO)
            (void))
          (g$atan$20500$1LXXoO
            (g$imag-part$20460$1LXXoO g$num$20630$1LXXoO)
            (g$real-part$20459$1LXXoO g$num$20630$1LXXoO))))))
   (g$magnitude$20455$1LXXoO
     g$magnitude$20722$1LXXoO
     (case-lambda
       ((g$num$20631$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20631$1LXXoO)
          ((case-lambda
             ((g$i$20632$1LXXoO g$r$20633$1LXXoO)
              (sqrt
                (+ (* g$i$20632$1LXXoO g$i$20632$1LXXoO)
                   (* g$r$20633$1LXXoO g$r$20633$1LXXoO)))))
           (g$imag-part$20460$1LXXoO g$num$20631$1LXXoO)
           (g$real-part$20459$1LXXoO g$num$20631$1LXXoO))
          (if (g$real?$20340$1LXXoO g$num$20631$1LXXoO)
            (g$abs$20503$1LXXoO g$num$20631$1LXXoO)
            (begin
              '#f
              (assertion-violation
                'magnitude
                '"not a number"
                g$num$20631$1LXXoO)))))))
   (g$exact-integer?$20456$1LXXoO
     g$exact-integer?$20723$1LXXoO
     (case-lambda
       ((g$obj$20634$1LXXoO)
        ((case-lambda
           ((g$t$20635$1LXXoO)
            (if g$t$20635$1LXXoO
              g$t$20635$1LXXoO
              (begin '#f (g$bignum?$20325$1LXXoO g$obj$20634$1LXXoO)))))
         (g$fixnum?$20060$1LXXoO g$obj$20634$1LXXoO)))))
   (g$numerator$20457$1LXXoO
     g$numerator$20724$1LXXoO
     (case-lambda
       ((g$num$20636$1LXXoO)
        (if (g$exact-integer?$20456$1LXXoO g$num$20636$1LXXoO)
          g$num$20636$1LXXoO
          (if (g$ratnum?$20326$1LXXoO g$num$20636$1LXXoO)
            (exact (g$ratnum-numerator$20328$1LXXoO g$num$20636$1LXXoO))
            (if (if (g$real?$20340$1LXXoO g$num$20636$1LXXoO)
                  (if (g$finite?$20335$1LXXoO g$num$20636$1LXXoO)
                    (begin
                      '#f
                      (not (g$nan?$20334$1LXXoO g$num$20636$1LXXoO)))
                    '#f)
                  '#f)
              (inexact
                (g$numerator$20457$1LXXoO (exact g$num$20636$1LXXoO)))
              (begin
                '#f
                (assertion-violation
                  'numerator
                  '"not a real"
                  g$num$20636$1LXXoO))))))))
   (g$denominator$20458$1LXXoO
     g$denominator$20725$1LXXoO
     (case-lambda
       ((g$num$20637$1LXXoO)
        (if (g$exact-integer?$20456$1LXXoO g$num$20637$1LXXoO)
          '1
          (if (g$ratnum?$20326$1LXXoO g$num$20637$1LXXoO)
            (exact
              (g$ratnum-denominator$20327$1LXXoO g$num$20637$1LXXoO))
            (if (if (g$real?$20340$1LXXoO g$num$20637$1LXXoO)
                  (if (g$finite?$20335$1LXXoO g$num$20637$1LXXoO)
                    (begin
                      '#f
                      (not (g$nan?$20334$1LXXoO g$num$20637$1LXXoO)))
                    '#f)
                  '#f)
              (inexact
                (g$denominator$20458$1LXXoO (exact g$num$20637$1LXXoO)))
              (begin
                '#f
                (assertion-violation
                  'denominator
                  '"not a real"
                  g$num$20637$1LXXoO))))))))
   (g$real-part$20459$1LXXoO
     g$real-part$20726$1LXXoO
     (case-lambda
       ((g$num$20638$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20638$1LXXoO)
          (g$complexnum-real-part$20332$1LXXoO g$num$20638$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20638$1LXXoO)
            g$num$20638$1LXXoO
            (begin
              '#f
              (assertion-violation
                'real-part
                '"not a number"
                g$num$20638$1LXXoO)))))))
   (g$imag-part$20460$1LXXoO
     g$imag-part$20727$1LXXoO
     (case-lambda
       ((g$num$20639$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20639$1LXXoO)
          (g$complexnum-imag-part$20331$1LXXoO g$num$20639$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20639$1LXXoO)
            '0
            (begin
              '#f
              (assertion-violation
                'imag-part
                '"not a number"
                g$num$20639$1LXXoO)))))))
   (g$exp$20491$1LXXoO
     g$exp$20728$1LXXoO
     (case-lambda
       ((g$num$20640$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20640$1LXXoO)
          (clr-call-internal
            'Microsoft.Scripting.Math.Complex64
            'exp
            '()
            g$num$20640$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20640$1LXXoO)
            (clr-call-internal
              'System.Math
              'exp
              '()
              (inexact g$num$20640$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'exp
                '"not a number"
                g$num$20640$1LXXoO)))))))
   (g$sin$20492$1LXXoO
     g$sin$20729$1LXXoO
     (case-lambda
       ((g$num$20641$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20641$1LXXoO)
          (clr-call-internal
            'Microsoft.Scripting.Math.Complex64
            'sin
            '()
            g$num$20641$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20641$1LXXoO)
            (clr-call-internal
              'System.Math
              'sin
              '()
              (inexact g$num$20641$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'sin
                '"not a number"
                g$num$20641$1LXXoO)))))))
   (g$asin$20493$1LXXoO
     g$asin$20730$1LXXoO
     (case-lambda
       ((g$num$20642$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20642$1LXXoO)
          (clr-call-internal
            'Microsoft.Scripting.Math.Complex64
            'asin
            '()
            g$num$20642$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20642$1LXXoO)
            (clr-call-internal
              'System.Math
              'asin
              '()
              (inexact g$num$20642$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'asin
                '"not a number"
                g$num$20642$1LXXoO)))))))
   (g$sinh$20494$1LXXoO
     g$sinh$20731$1LXXoO
     (case-lambda
       ((g$num$20643$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20643$1LXXoO)
          (clr-call-internal
            'Microsoft.Scripting.Math.Complex64
            'sinh
            '()
            g$num$20643$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20643$1LXXoO)
            (clr-call-internal
              'System.Math
              'sinh
              '()
              (inexact g$num$20643$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'sinh
                '"not a number"
                g$num$20643$1LXXoO)))))))
   (g$cos$20495$1LXXoO
     g$cos$20732$1LXXoO
     (case-lambda
       ((g$num$20644$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20644$1LXXoO)
          (clr-call-internal
            'Microsoft.Scripting.Math.Complex64
            'cos
            '()
            g$num$20644$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20644$1LXXoO)
            (clr-call-internal
              'System.Math
              'cos
              '()
              (inexact g$num$20644$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'cos
                '"not a number"
                g$num$20644$1LXXoO)))))))
   (g$acos$20496$1LXXoO
     g$acos$20733$1LXXoO
     (case-lambda
       ((g$num$20645$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20645$1LXXoO)
          (clr-call-internal
            'Microsoft.Scripting.Math.Complex64
            'acos
            '()
            g$num$20645$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20645$1LXXoO)
            (clr-call-internal
              'System.Math
              'acos
              '()
              (inexact g$num$20645$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'acos
                '"not a number"
                g$num$20645$1LXXoO)))))))
   (g$cosh$20497$1LXXoO
     g$cosh$20734$1LXXoO
     (case-lambda
       ((g$num$20646$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20646$1LXXoO)
          (clr-call-internal
            'Microsoft.Scripting.Math.Complex64
            'cosh
            '()
            g$num$20646$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20646$1LXXoO)
            (clr-call-internal
              'System.Math
              'cosh
              '()
              (inexact g$num$20646$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'cosh
                '"not a number"
                g$num$20646$1LXXoO)))))))
   (g$tan$20498$1LXXoO
     g$tan$20735$1LXXoO
     (case-lambda
       ((g$num$20647$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20647$1LXXoO)
          (clr-call-internal
            'Microsoft.Scripting.Math.Complex64
            'tan
            '()
            g$num$20647$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20647$1LXXoO)
            (clr-call-internal
              'System.Math
              'tan
              '()
              (inexact g$num$20647$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'tan
                '"not a number"
                g$num$20647$1LXXoO)))))))
   (g$tanh$20499$1LXXoO
     g$tanh$20736$1LXXoO
     (case-lambda
       ((g$num$20648$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20648$1LXXoO)
          (clr-call-internal
            'Microsoft.Scripting.Math.Complex64
            'tanh
            '()
            g$num$20648$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20648$1LXXoO)
            (clr-call-internal
              'System.Math
              'tanh
              '()
              (inexact g$num$20648$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'tanh
                '"not a number"
                g$num$20648$1LXXoO)))))))
   (g$atan$20500$1LXXoO
     g$atan$20737$1LXXoO
     (case-lambda
       ((g$num$20649$1LXXoO)
        (if (g$complexnum?$20329$1LXXoO g$num$20649$1LXXoO)
          (clr-call-internal
            'Microsoft.Scripting.Math.Complex64
            'Atan
            '()
            g$num$20649$1LXXoO)
          (if (g$real?$20340$1LXXoO g$num$20649$1LXXoO)
            (clr-call-internal
              'System.Math
              'Atan
              '()
              (inexact g$num$20649$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'atan
                '"not a number"
                g$num$20649$1LXXoO)))))
       ((g$num1$20650$1LXXoO g$num2$20651$1LXXoO)
        (begin
          (if (not (g$real?$20340$1LXXoO g$num1$20650$1LXXoO))
            (assertion-violation
              'atan
              '"not a real"
              g$num1$20650$1LXXoO)
            (void))
          (if (not (g$real?$20340$1LXXoO g$num2$20651$1LXXoO))
            (assertion-violation
              'atan
              '"not a real"
              g$num2$20651$1LXXoO)
            (void))
          (clr-call-internal
            'System.Math
            'Atan2
            '()
            (inexact g$num1$20650$1LXXoO)
            (inexact g$num2$20651$1LXXoO))))))
   (g$log$20501$1LXXoO
     g$log$20738$1LXXoO
     (case-lambda
       ((g$num$20652$1LXXoO)
        (begin
          (if (not (g$number?$20333$1LXXoO g$num$20652$1LXXoO))
            (assertion-violation
              'atan
              '"not a number"
              g$num$20652$1LXXoO)
            (void))
          (if (g$complexnum?$20329$1LXXoO g$num$20652$1LXXoO)
            (clr-call-internal
              'Microsoft.Scripting.Math.Complex64
              'Log
              '()
              g$num$20652$1LXXoO)
            (if (g$negative?$20348$1LXXoO g$num$20652$1LXXoO)
              (clr-call-internal
                'Microsoft.Scripting.Math.Complex64
                'Log
                '()
                (g$make-complexnum$20330$1LXXoO
                  (inexact g$num$20652$1LXXoO)
                  '0.0))
              (if (g$zero?$20346$1LXXoO g$num$20652$1LXXoO)
                (if (g$exact?$20337$1LXXoO g$num$20652$1LXXoO)
                  (assertion-violation
                    'log
                    '"not possible"
                    g$num$20652$1LXXoO)
                  '-inf.0)
                (if (g$infinite?$20336$1LXXoO g$num$20652$1LXXoO)
                  (if (g$negative?$20348$1LXXoO g$num$20652$1LXXoO)
                    (g$make-complexnum$20330$1LXXoO
                      (inexact (g$abs$20503$1LXXoO g$num$20652$1LXXoO))
                      '0)
                    g$num$20652$1LXXoO)
                  (begin
                    '#f
                    (clr-call-internal
                      'System.Math
                      'Log
                      '()
                      (inexact g$num$20652$1LXXoO)))))))))
       ((g$num1$20653$1LXXoO g$num2$20654$1LXXoO)
        (/ (g$log$20501$1LXXoO g$num1$20653$1LXXoO)
           (g$log$20501$1LXXoO g$num2$20654$1LXXoO)))))
   (g$div$20502$1LXXoO
     g$div$20739$1LXXoO
     (case-lambda
       ((g$x1$20655$1LXXoO g$x2$20656$1LXXoO)
        (begin
          (if (not (g$real?$20340$1LXXoO g$x1$20655$1LXXoO))
            (assertion-violation 'div '"not a real" g$x1$20655$1LXXoO)
            (void))
          (if (not (g$real?$20340$1LXXoO g$x2$20656$1LXXoO))
            (assertion-violation 'div '"not a real" g$x2$20656$1LXXoO)
            (void))
          (if (g$zero?$20346$1LXXoO g$x2$20656$1LXXoO)
            (assertion-violation
              'div
              '"divide by zero"
              g$x1$20655$1LXXoO
              g$x2$20656$1LXXoO)
            (void))
          (if ((case-lambda
                 ((g$t$20657$1LXXoO)
                  (if g$t$20657$1LXXoO
                    g$t$20657$1LXXoO
                    (begin
                      '#f
                      (g$infinite?$20336$1LXXoO g$x1$20655$1LXXoO)))))
               (g$nan?$20334$1LXXoO g$x1$20655$1LXXoO))
            (assertion-violation
              'div
              '"cannot be nan or infinite"
              g$x1$20655$1LXXoO
              g$x2$20656$1LXXoO)
            (void))
          (call-with-values
            (case-lambda
              (()
               (if (if (g$exact?$20337$1LXXoO g$x1$20655$1LXXoO)
                     (begin
                       '#f
                       (g$exact?$20337$1LXXoO g$x2$20656$1LXXoO))
                     '#f)
                 ((case-lambda
                    ((g$scale$20661$1LXXoO)
                     (values
                       (* g$x1$20655$1LXXoO g$scale$20661$1LXXoO)
                       (* g$x2$20656$1LXXoO g$scale$20661$1LXXoO)
                       '#t)))
                  (* (g$denominator$20458$1LXXoO g$x1$20655$1LXXoO)
                     (g$denominator$20458$1LXXoO g$x2$20656$1LXXoO)))
                 (values g$x1$20655$1LXXoO g$x2$20656$1LXXoO '#f))))
            (case-lambda
              ((g$x1$20662$1LXXoO
                 g$x2$20663$1LXXoO
                 g$exact-args?$20664$1LXXoO)
               ((case-lambda
                  ((g$exact-args?$20665$1LXXoO
                     g$x2$20666$1LXXoO
                     g$x1$20667$1LXXoO)
                   ((case-lambda
                      ((g$d$20668$1LXXoO)
                       (if (if g$exact-args?$20665$1LXXoO
                             (begin
                               '#f
                               (g$rational-valued?$20344$1LXXoO
                                 g$d$20668$1LXXoO))
                             '#f)
                         (exact g$d$20668$1LXXoO)
                         g$d$20668$1LXXoO)))
                    (if (g$positive?$20347$1LXXoO g$x2$20666$1LXXoO)
                      (g$floor$20510$1LXXoO
                        (/ g$x1$20667$1LXXoO g$x2$20666$1LXXoO))
                      (- (g$floor$20510$1LXXoO
                           (/ g$x1$20667$1LXXoO
                              (- g$x2$20666$1LXXoO))))))))
                g$exact-args?$20664$1LXXoO
                g$x2$20663$1LXXoO
                g$x1$20662$1LXXoO))))))))
   (g$abs$20503$1LXXoO
     g$abs$20740$1LXXoO
     (case-lambda
       ((g$x1$20669$1LXXoO)
        (begin
          (if (not (g$real?$20340$1LXXoO g$x1$20669$1LXXoO))
            (assertion-violation 'abs '"not a real" g$x1$20669$1LXXoO)
            (void))
          (if (g$negative?$20348$1LXXoO g$x1$20669$1LXXoO)
            (- g$x1$20669$1LXXoO)
            g$x1$20669$1LXXoO)))))
   (g$bignum/$20504$1LXXoO
     g$bignum/$20741$1LXXoO
     (case-lambda
       ((g$a$20670$1LXXoO g$b$20671$1LXXoO)
        (clr-call-internal
          'Microsoft.Scripting.Math.BigInteger
          'op_Division
          '()
          g$a$20670$1LXXoO
          g$b$20671$1LXXoO))))
   (g$bignum%$20505$1LXXoO
     g$bignum%$20742$1LXXoO
     (case-lambda
       ((g$a$20672$1LXXoO g$b$20673$1LXXoO)
        (clr-call-internal
          'Microsoft.Scripting.Math.BigInteger
          'op_Modulus
          '()
          g$a$20672$1LXXoO
          g$b$20673$1LXXoO))))
   (g$bignum->fixnum$20506$1LXXoO
     g$bignum->fixnum$20743$1LXXoO
     (case-lambda
       ((g$b$20674$1LXXoO)
        (clr-call-internal
          'Microsoft.Scripting.Math.BigInteger
          'ToInt32
          g$b$20674$1LXXoO))))
   (g$flonum->ratnum$20507$1LXXoO
     g$flonum->ratnum$20744$1LXXoO
     (case-lambda
       ((g$f$20675$1LXXoO)
        (clr-call-internal
          'IronScheme.Runtime.Fraction
          '"op_Implicit(System.Double)"
          '()
          g$f$20675$1LXXoO))))
   (g$ratnum->flonum$20508$1LXXoO
     g$ratnum->flonum$20745$1LXXoO
     (case-lambda
       ((g$r$20676$1LXXoO)
        (clr-call-internal
          'IronScheme.Runtime.Fraction
          'ToDouble
          g$r$20676$1LXXoO
          '()))))
   (g$fixnum->bignum$20509$1LXXoO
     g$fixnum->bignum$20746$1LXXoO
     (case-lambda
       ((g$f$20677$1LXXoO)
        (clr-call-internal
          'Microsoft.Scripting.Math.BigInteger
          '"Create(System.Int32)"
          '()
          g$f$20677$1LXXoO))))
   (g$floor$20510$1LXXoO
     g$floor$20747$1LXXoO
     (case-lambda
       ((g$x$20678$1LXXoO)
        (begin
          (if (not (g$real?$20340$1LXXoO g$x$20678$1LXXoO))
            (assertion-violation 'floor '"not a real" g$x$20678$1LXXoO)
            (void))
          (if (g$exact-integer?$20456$1LXXoO g$x$20678$1LXXoO)
            g$x$20678$1LXXoO
            (if (g$ratnum?$20326$1LXXoO g$x$20678$1LXXoO)
              ((case-lambda
                 ((g$r$20679$1LXXoO)
                  (exact
                    (if (g$negative?$20348$1LXXoO g$x$20678$1LXXoO)
                      (- g$r$20679$1LXXoO '1)
                      g$r$20679$1LXXoO))))
               (g$bignum/$20504$1LXXoO
                 (g$ratnum-numerator$20328$1LXXoO g$x$20678$1LXXoO)
                 (g$ratnum-denominator$20327$1LXXoO g$x$20678$1LXXoO)))
              (begin
                '#f
                (clr-call-internal
                  'System.Math
                  '"Floor(System.Double)"
                  '()
                  (inexact g$x$20678$1LXXoO)))))))))
   (g$ceiling$20511$1LXXoO
     g$ceiling$20748$1LXXoO
     (case-lambda
       ((g$x$20680$1LXXoO)
        (begin
          (if (not (g$real?$20340$1LXXoO g$x$20680$1LXXoO))
            (assertion-violation
              'ceiling
              '"not a real"
              g$x$20680$1LXXoO)
            (void))
          (if (g$exact-integer?$20456$1LXXoO g$x$20680$1LXXoO)
            g$x$20680$1LXXoO
            (if (g$ratnum?$20326$1LXXoO g$x$20680$1LXXoO)
              ((case-lambda
                 ((g$r$20681$1LXXoO)
                  (exact
                    (if (g$positive?$20347$1LXXoO g$r$20681$1LXXoO)
                      (+ g$r$20681$1LXXoO '1)
                      g$r$20681$1LXXoO))))
               (g$bignum/$20504$1LXXoO
                 (g$ratnum-numerator$20328$1LXXoO g$x$20680$1LXXoO)
                 (g$ratnum-denominator$20327$1LXXoO g$x$20680$1LXXoO)))
              (begin
                '#f
                (clr-call-internal
                  'System.Math
                  '"Ceiling(System.Double)"
                  '()
                  (inexact g$x$20680$1LXXoO)))))))))
   (g$truncate$20512$1LXXoO
     g$truncate$20749$1LXXoO
     (case-lambda
       ((g$x$20682$1LXXoO)
        (begin
          (if (not (g$real?$20340$1LXXoO g$x$20682$1LXXoO))
            (assertion-violation
              'truncate
              '"not a real"
              g$x$20682$1LXXoO)
            (void))
          (if (g$exact-integer?$20456$1LXXoO g$x$20682$1LXXoO)
            g$x$20682$1LXXoO
            (begin
              '#f
              ((case-lambda
                 ((g$r$20683$1LXXoO)
                  (if (g$exact?$20337$1LXXoO g$x$20682$1LXXoO)
                    (exact g$r$20683$1LXXoO)
                    g$r$20683$1LXXoO)))
               (clr-call-internal
                 'System.Math
                 '"Truncate(System.Double)"
                 '()
                 (inexact g$x$20682$1LXXoO)))))))))
   (g$round$20513$1LXXoO
     g$round$20750$1LXXoO
     (case-lambda
       ((g$x$20684$1LXXoO)
        (begin
          (if (not (g$real?$20340$1LXXoO g$x$20684$1LXXoO))
            (assertion-violation 'round '"not a real" g$x$20684$1LXXoO)
            (void))
          (if (g$exact-integer?$20456$1LXXoO g$x$20684$1LXXoO)
            g$x$20684$1LXXoO
            (if (g$ratnum?$20326$1LXXoO g$x$20684$1LXXoO)
              ((case-lambda
                 ((g$num$20685$1LXXoO)
                  ((case-lambda
                     ((g$den$20686$1LXXoO)
                      ((case-lambda
                         ((g$d$20687$1LXXoO)
                          ((case-lambda
                             ((g$r$20688$1LXXoO)
                              ((case-lambda
                                 ((g$hd$20689$1LXXoO)
                                  (if (g$negative?$20348$1LXXoO
                                        g$r$20688$1LXXoO)
                                    (exact
                                      (if (g$>$20450$1LXXoO
                                            (- g$r$20688$1LXXoO)
                                            g$hd$20689$1LXXoO)
                                        (- g$d$20687$1LXXoO '1)
                                        (if (g$<$20448$1LXXoO
                                              (- g$r$20688$1LXXoO)
                                              g$hd$20689$1LXXoO)
                                          g$d$20687$1LXXoO
                                          (if (g$even?$20103$1LXXoO
                                                g$d$20687$1LXXoO)
                                            g$d$20687$1LXXoO
                                            (begin
                                              '#f
                                              (+ g$d$20687$1LXXoO
                                                 '1))))))
                                    (if (g$positive?$20347$1LXXoO
                                          g$r$20688$1LXXoO)
                                      (exact
                                        (if (g$>$20450$1LXXoO
                                              g$r$20688$1LXXoO
                                              g$hd$20689$1LXXoO)
                                          (+ g$d$20687$1LXXoO '1)
                                          (if (g$<$20448$1LXXoO
                                                g$r$20688$1LXXoO
                                                g$hd$20689$1LXXoO)
                                            g$d$20687$1LXXoO
                                            (if (g$even?$20103$1LXXoO
                                                  g$d$20687$1LXXoO)
                                              g$d$20687$1LXXoO
                                              (begin
                                                '#f
                                                (+ g$d$20687$1LXXoO
                                                   '1))))))
                                      (begin '#f g$d$20687$1LXXoO)))))
                               (g$div$20502$1LXXoO
                                 g$d$20687$1LXXoO
                                 '2))))
                           (g$bignum%$20505$1LXXoO
                             g$num$20685$1LXXoO
                             g$den$20686$1LXXoO))))
                       (g$bignum/$20504$1LXXoO
                         g$num$20685$1LXXoO
                         g$den$20686$1LXXoO))))
                   (g$ratnum-denominator$20327$1LXXoO
                     g$x$20684$1LXXoO))))
               (g$ratnum-numerator$20328$1LXXoO g$x$20684$1LXXoO))
              (begin
                '#f
                (clr-call-internal
                  'System.Math
                  '"Round(System.Double)"
                  '()
                  (inexact g$x$20684$1LXXoO))))))))))
  (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6183$20751$1LXXoO
     g$6183$21153$1LXXoO
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6186$1LXXoO
       '#f
       '#f
       '#()))
   (g$6185$20752$1LXXoO g$6185$21154$1LXXoO '#f)
   (g$6184$20753$1LXXoO
     g$6184$21155$1LXXoO
     (make-record-constructor-descriptor
       g$6183$20751$1LXXoO
       '#f
       g$6185$20752$1LXXoO))
   (g$&condition?$20756$1LXXoO
     g$&condition?$21156$1LXXoO
     (record-predicate g$6183$20751$1LXXoO))
   (g$make-&condition$20757$1LXXoO
     g$make-&condition$21157$1LXXoO
     (record-constructor g$6184$20753$1LXXoO))
   (g$&condition-rtd$20758$1LXXoO
     g$&condition-rtd$21158$1LXXoO
     g$6183$20751$1LXXoO)
   (g$&condition-rcd$20759$1LXXoO
     g$&condition-rcd$21159$1LXXoO
     g$6184$20753$1LXXoO)
   (g$6220$20857$1LXXoO
     g$6220$21160$1LXXoO
     (make-record-type-descriptor
       '&message
       g$6183$20751$1LXXoO
       'g$6223$1LXXoO
       '#f
       '#f
       '#((immutable message))))
   (g$6222$20858$1LXXoO g$6222$21161$1LXXoO '#f)
   (g$6221$20859$1LXXoO
     g$6221$21162$1LXXoO
     (make-record-constructor-descriptor
       g$6220$20857$1LXXoO
       g$6184$20753$1LXXoO
       g$6222$20858$1LXXoO))
   (g$p?$20862$1LXXoO
     g$p?$21163$1LXXoO
     (record-predicate g$6220$20857$1LXXoO))
   (g$make-message-condition$20863$1LXXoO
     g$make-message-condition$21164$1LXXoO
     (record-constructor g$6221$20859$1LXXoO))
   (g$condition-message$20864$1LXXoO
     g$condition-message$21165$1LXXoO
     (record-accessor g$6220$20857$1LXXoO '0))
   (g$message-condition?$20865$1LXXoO
     g$message-condition?$21166$1LXXoO
     (condition-predicate g$6220$20857$1LXXoO))
   (g$condition-message$20866$1LXXoO
     g$condition-message$21167$1LXXoO
     (condition-accessor
       g$6220$20857$1LXXoO
       g$condition-message$20864$1LXXoO))
   (g$&message-rtd$20867$1LXXoO
     g$&message-rtd$21168$1LXXoO
     g$6220$20857$1LXXoO)
   (g$&message-rcd$20868$1LXXoO
     g$&message-rcd$21169$1LXXoO
     g$6221$20859$1LXXoO)
   (g$6235$20869$1LXXoO
     g$6235$21170$1LXXoO
     (make-record-type-descriptor
       '&warning
       g$6183$20751$1LXXoO
       'g$6238$1LXXoO
       '#f
       '#f
       '#()))
   (g$6237$20870$1LXXoO g$6237$21171$1LXXoO '#f)
   (g$6236$20871$1LXXoO
     g$6236$21172$1LXXoO
     (make-record-constructor-descriptor
       g$6235$20869$1LXXoO
       g$6184$20753$1LXXoO
       g$6237$20870$1LXXoO))
   (g$p?$20874$1LXXoO
     g$p?$21173$1LXXoO
     (record-predicate g$6235$20869$1LXXoO))
   (g$make-warning$20875$1LXXoO
     g$make-warning$21174$1LXXoO
     (record-constructor g$6236$20871$1LXXoO))
   (g$warning?$20876$1LXXoO
     g$warning?$21175$1LXXoO
     (condition-predicate g$6235$20869$1LXXoO))
   (g$&warning-rtd$20877$1LXXoO
     g$&warning-rtd$21176$1LXXoO
     g$6235$20869$1LXXoO)
   (g$&warning-rcd$20878$1LXXoO
     g$&warning-rcd$21177$1LXXoO
     g$6236$20871$1LXXoO)
   (g$6248$20879$1LXXoO
     g$6248$21178$1LXXoO
     (make-record-type-descriptor
       '&serious
       g$6183$20751$1LXXoO
       'g$6251$1LXXoO
       '#f
       '#f
       '#()))
   (g$6250$20880$1LXXoO g$6250$21179$1LXXoO '#f)
   (g$6249$20881$1LXXoO
     g$6249$21180$1LXXoO
     (make-record-constructor-descriptor
       g$6248$20879$1LXXoO
       g$6184$20753$1LXXoO
       g$6250$20880$1LXXoO))
   (g$p?$20884$1LXXoO
     g$p?$21181$1LXXoO
     (record-predicate g$6248$20879$1LXXoO))
   (g$make-serious-condition$20885$1LXXoO
     g$make-serious-condition$21182$1LXXoO
     (record-constructor g$6249$20881$1LXXoO))
   (g$serious-condition?$20886$1LXXoO
     g$serious-condition?$21183$1LXXoO
     (condition-predicate g$6248$20879$1LXXoO))
   (g$&serious-rtd$20887$1LXXoO
     g$&serious-rtd$21184$1LXXoO
     g$6248$20879$1LXXoO)
   (g$&serious-rcd$20888$1LXXoO
     g$&serious-rcd$21185$1LXXoO
     g$6249$20881$1LXXoO)
   (g$6261$20889$1LXXoO
     g$6261$21186$1LXXoO
     (make-record-type-descriptor
       '&error
       g$6248$20879$1LXXoO
       'g$6264$1LXXoO
       '#f
       '#f
       '#()))
   (g$6263$20890$1LXXoO g$6263$21187$1LXXoO '#f)
   (g$6262$20891$1LXXoO
     g$6262$21188$1LXXoO
     (make-record-constructor-descriptor
       g$6261$20889$1LXXoO
       g$6249$20881$1LXXoO
       g$6263$20890$1LXXoO))
   (g$p?$20894$1LXXoO
     g$p?$21189$1LXXoO
     (record-predicate g$6261$20889$1LXXoO))
   (g$make-error$20895$1LXXoO
     g$make-error$21190$1LXXoO
     (record-constructor g$6262$20891$1LXXoO))
   (g$error?$20896$1LXXoO
     g$error?$21191$1LXXoO
     (condition-predicate g$6261$20889$1LXXoO))
   (g$&error-rtd$20897$1LXXoO
     g$&error-rtd$21192$1LXXoO
     g$6261$20889$1LXXoO)
   (g$&error-rcd$20898$1LXXoO
     g$&error-rcd$21193$1LXXoO
     g$6262$20891$1LXXoO)
   (g$6274$20899$1LXXoO
     g$6274$21194$1LXXoO
     (make-record-type-descriptor
       '&violation
       g$6248$20879$1LXXoO
       'g$6277$1LXXoO
       '#f
       '#f
       '#()))
   (g$6276$20900$1LXXoO g$6276$21195$1LXXoO '#f)
   (g$6275$20901$1LXXoO
     g$6275$21196$1LXXoO
     (make-record-constructor-descriptor
       g$6274$20899$1LXXoO
       g$6249$20881$1LXXoO
       g$6276$20900$1LXXoO))
   (g$p?$20904$1LXXoO
     g$p?$21197$1LXXoO
     (record-predicate g$6274$20899$1LXXoO))
   (g$make-violation$20905$1LXXoO
     g$make-violation$21198$1LXXoO
     (record-constructor g$6275$20901$1LXXoO))
   (g$violation?$20906$1LXXoO
     g$violation?$21199$1LXXoO
     (condition-predicate g$6274$20899$1LXXoO))
   (g$&violation-rtd$20907$1LXXoO
     g$&violation-rtd$21200$1LXXoO
     g$6274$20899$1LXXoO)
   (g$&violation-rcd$20908$1LXXoO
     g$&violation-rcd$21201$1LXXoO
     g$6275$20901$1LXXoO)
   (g$6287$20909$1LXXoO
     g$6287$21202$1LXXoO
     (make-record-type-descriptor
       '&assertion
       g$6274$20899$1LXXoO
       'g$6290$1LXXoO
       '#f
       '#f
       '#()))
   (g$6289$20910$1LXXoO g$6289$21203$1LXXoO '#f)
   (g$6288$20911$1LXXoO
     g$6288$21204$1LXXoO
     (make-record-constructor-descriptor
       g$6287$20909$1LXXoO
       g$6275$20901$1LXXoO
       g$6289$20910$1LXXoO))
   (g$p?$20914$1LXXoO
     g$p?$21205$1LXXoO
     (record-predicate g$6287$20909$1LXXoO))
   (g$make-assertion-violation$20915$1LXXoO
     g$make-assertion-violation$21206$1LXXoO
     (record-constructor g$6288$20911$1LXXoO))
   (g$assertion-violation?$20916$1LXXoO
     g$assertion-violation?$21207$1LXXoO
     (condition-predicate g$6287$20909$1LXXoO))
   (g$&assertion-rtd$20917$1LXXoO
     g$&assertion-rtd$21208$1LXXoO
     g$6287$20909$1LXXoO)
   (g$&assertion-rcd$20918$1LXXoO
     g$&assertion-rcd$21209$1LXXoO
     g$6288$20911$1LXXoO)
   (g$6300$20920$1LXXoO
     g$6300$21210$1LXXoO
     (make-record-type-descriptor
       '&irritants
       g$6183$20751$1LXXoO
       'g$6303$1LXXoO
       '#f
       '#f
       '#((immutable irritants))))
   (g$6302$20921$1LXXoO g$6302$21211$1LXXoO '#f)
   (g$6301$20922$1LXXoO
     g$6301$21212$1LXXoO
     (make-record-constructor-descriptor
       g$6300$20920$1LXXoO
       g$6184$20753$1LXXoO
       g$6302$20921$1LXXoO))
   (g$p?$20925$1LXXoO
     g$p?$21213$1LXXoO
     (record-predicate g$6300$20920$1LXXoO))
   (g$make-irritants-condition$20926$1LXXoO
     g$make-irritants-condition$21214$1LXXoO
     (record-constructor g$6301$20922$1LXXoO))
   (g$condition-irritants$20927$1LXXoO
     g$condition-irritants$21215$1LXXoO
     (record-accessor g$6300$20920$1LXXoO '0))
   (g$irritants-condition?$20928$1LXXoO
     g$irritants-condition?$21216$1LXXoO
     (condition-predicate g$6300$20920$1LXXoO))
   (g$condition-irritants$20929$1LXXoO
     g$condition-irritants$21217$1LXXoO
     (condition-accessor
       g$6300$20920$1LXXoO
       g$condition-irritants$20927$1LXXoO))
   (g$&irritants-rtd$20930$1LXXoO
     g$&irritants-rtd$21218$1LXXoO
     g$6300$20920$1LXXoO)
   (g$&irritants-rcd$20931$1LXXoO
     g$&irritants-rcd$21219$1LXXoO
     g$6301$20922$1LXXoO)
   (g$6315$20933$1LXXoO
     g$6315$21220$1LXXoO
     (make-record-type-descriptor
       '&who
       g$6183$20751$1LXXoO
       'g$6318$1LXXoO
       '#f
       '#f
       '#((immutable who))))
   (g$6317$20934$1LXXoO g$6317$21221$1LXXoO '#f)
   (g$6316$20935$1LXXoO
     g$6316$21222$1LXXoO
     (make-record-constructor-descriptor
       g$6315$20933$1LXXoO
       g$6184$20753$1LXXoO
       g$6317$20934$1LXXoO))
   (g$p?$20938$1LXXoO
     g$p?$21223$1LXXoO
     (record-predicate g$6315$20933$1LXXoO))
   (g$make-who-condition$20939$1LXXoO
     g$make-who-condition$21224$1LXXoO
     (record-constructor g$6316$20935$1LXXoO))
   (g$condition-who$20940$1LXXoO
     g$condition-who$21225$1LXXoO
     (record-accessor g$6315$20933$1LXXoO '0))
   (g$who-condition?$20941$1LXXoO
     g$who-condition?$21226$1LXXoO
     (condition-predicate g$6315$20933$1LXXoO))
   (g$condition-who$20942$1LXXoO
     g$condition-who$21227$1LXXoO
     (condition-accessor
       g$6315$20933$1LXXoO
       g$condition-who$20940$1LXXoO))
   (g$&who-rtd$20943$1LXXoO g$&who-rtd$21228$1LXXoO g$6315$20933$1LXXoO)
   (g$&who-rcd$20944$1LXXoO g$&who-rcd$21229$1LXXoO g$6316$20935$1LXXoO)
   (g$6330$20945$1LXXoO
     g$6330$21230$1LXXoO
     (make-record-type-descriptor
       '&non-continuable
       g$6274$20899$1LXXoO
       'g$6333$1LXXoO
       '#f
       '#f
       '#()))
   (g$6332$20946$1LXXoO g$6332$21231$1LXXoO '#f)
   (g$6331$20947$1LXXoO
     g$6331$21232$1LXXoO
     (make-record-constructor-descriptor
       g$6330$20945$1LXXoO
       g$6275$20901$1LXXoO
       g$6332$20946$1LXXoO))
   (g$p?$20950$1LXXoO
     g$p?$21233$1LXXoO
     (record-predicate g$6330$20945$1LXXoO))
   (g$make-non-continuable-violation$20951$1LXXoO
     g$make-non-continuable-violation$21234$1LXXoO
     (record-constructor g$6331$20947$1LXXoO))
   (g$non-continuable-violation?$20952$1LXXoO
     g$non-continuable-violation?$21235$1LXXoO
     (condition-predicate g$6330$20945$1LXXoO))
   (g$&non-continuable-rtd$20953$1LXXoO
     g$&non-continuable-rtd$21236$1LXXoO
     g$6330$20945$1LXXoO)
   (g$&non-continuable-rcd$20954$1LXXoO
     g$&non-continuable-rcd$21237$1LXXoO
     g$6331$20947$1LXXoO)
   (g$6343$20955$1LXXoO
     g$6343$21238$1LXXoO
     (make-record-type-descriptor
       '&implementation-restriction
       g$6274$20899$1LXXoO
       'g$6346$1LXXoO
       '#f
       '#f
       '#()))
   (g$6345$20956$1LXXoO g$6345$21239$1LXXoO '#f)
   (g$6344$20957$1LXXoO
     g$6344$21240$1LXXoO
     (make-record-constructor-descriptor
       g$6343$20955$1LXXoO
       g$6275$20901$1LXXoO
       g$6345$20956$1LXXoO))
   (g$p?$20960$1LXXoO
     g$p?$21241$1LXXoO
     (record-predicate g$6343$20955$1LXXoO))
   (g$make-implementation-restriction-violation$20961$1LXXoO
     g$make-implementation-restriction-violation$21242$1LXXoO
     (record-constructor g$6344$20957$1LXXoO))
   (g$implementation-restriction-violation?$20962$1LXXoO
     g$implementation-restriction-violation?$21243$1LXXoO
     (condition-predicate g$6343$20955$1LXXoO))
   (g$&implementation-restriction-rtd$20963$1LXXoO
     g$&implementation-restriction-rtd$21244$1LXXoO
     g$6343$20955$1LXXoO)
   (g$&implementation-restriction-rcd$20964$1LXXoO
     g$&implementation-restriction-rcd$21245$1LXXoO
     g$6344$20957$1LXXoO)
   (g$6356$20965$1LXXoO
     g$6356$21246$1LXXoO
     (make-record-type-descriptor
       '&lexical
       g$6274$20899$1LXXoO
       'g$6359$1LXXoO
       '#f
       '#f
       '#()))
   (g$6358$20966$1LXXoO g$6358$21247$1LXXoO '#f)
   (g$6357$20967$1LXXoO
     g$6357$21248$1LXXoO
     (make-record-constructor-descriptor
       g$6356$20965$1LXXoO
       g$6275$20901$1LXXoO
       g$6358$20966$1LXXoO))
   (g$p?$20970$1LXXoO
     g$p?$21249$1LXXoO
     (record-predicate g$6356$20965$1LXXoO))
   (g$make-lexical-violation$20971$1LXXoO
     g$make-lexical-violation$21250$1LXXoO
     (record-constructor g$6357$20967$1LXXoO))
   (g$lexical-violation?$20972$1LXXoO
     g$lexical-violation?$21251$1LXXoO
     (condition-predicate g$6356$20965$1LXXoO))
   (g$&lexical-rtd$20973$1LXXoO
     g$&lexical-rtd$21252$1LXXoO
     g$6356$20965$1LXXoO)
   (g$&lexical-rcd$20974$1LXXoO
     g$&lexical-rcd$21253$1LXXoO
     g$6357$20967$1LXXoO)
   (g$6369$20977$1LXXoO
     g$6369$21254$1LXXoO
     (make-record-type-descriptor
       '&syntax
       g$6274$20899$1LXXoO
       'g$6372$1LXXoO
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6371$20978$1LXXoO g$6371$21255$1LXXoO '#f)
   (g$6370$20979$1LXXoO
     g$6370$21256$1LXXoO
     (make-record-constructor-descriptor
       g$6369$20977$1LXXoO
       g$6275$20901$1LXXoO
       g$6371$20978$1LXXoO))
   (g$p?$20982$1LXXoO
     g$p?$21257$1LXXoO
     (record-predicate g$6369$20977$1LXXoO))
   (g$make-syntax-violation$20983$1LXXoO
     g$make-syntax-violation$21258$1LXXoO
     (record-constructor g$6370$20979$1LXXoO))
   (g$syntax-violation-form$20984$1LXXoO
     g$syntax-violation-form$21259$1LXXoO
     (record-accessor g$6369$20977$1LXXoO '0))
   (g$syntax-violation-subform$20985$1LXXoO
     g$syntax-violation-subform$21260$1LXXoO
     (record-accessor g$6369$20977$1LXXoO '1))
   (g$syntax-violation?$20986$1LXXoO
     g$syntax-violation?$21261$1LXXoO
     (condition-predicate g$6369$20977$1LXXoO))
   (g$syntax-violation-form$20987$1LXXoO
     g$syntax-violation-form$21262$1LXXoO
     (condition-accessor
       g$6369$20977$1LXXoO
       g$syntax-violation-form$20984$1LXXoO))
   (g$syntax-violation-subform$20988$1LXXoO
     g$syntax-violation-subform$21263$1LXXoO
     (condition-accessor
       g$6369$20977$1LXXoO
       g$syntax-violation-subform$20985$1LXXoO))
   (g$&syntax-rtd$20989$1LXXoO
     g$&syntax-rtd$21264$1LXXoO
     g$6369$20977$1LXXoO)
   (g$&syntax-rcd$20990$1LXXoO
     g$&syntax-rcd$21265$1LXXoO
     g$6370$20979$1LXXoO)
   (g$6386$20991$1LXXoO
     g$6386$21266$1LXXoO
     (make-record-type-descriptor
       '&undefined
       g$6274$20899$1LXXoO
       'g$6389$1LXXoO
       '#f
       '#f
       '#()))
   (g$6388$20992$1LXXoO g$6388$21267$1LXXoO '#f)
   (g$6387$20993$1LXXoO
     g$6387$21268$1LXXoO
     (make-record-constructor-descriptor
       g$6386$20991$1LXXoO
       g$6275$20901$1LXXoO
       g$6388$20992$1LXXoO))
   (g$p?$20996$1LXXoO
     g$p?$21269$1LXXoO
     (record-predicate g$6386$20991$1LXXoO))
   (g$make-undefined-violation$20997$1LXXoO
     g$make-undefined-violation$21270$1LXXoO
     (record-constructor g$6387$20993$1LXXoO))
   (g$undefined-violation?$20998$1LXXoO
     g$undefined-violation?$21271$1LXXoO
     (condition-predicate g$6386$20991$1LXXoO))
   (g$&undefined-rtd$20999$1LXXoO
     g$&undefined-rtd$21272$1LXXoO
     g$6386$20991$1LXXoO)
   (g$&undefined-rcd$21000$1LXXoO
     g$&undefined-rcd$21273$1LXXoO
     g$6387$20993$1LXXoO)
   (g$6399$21001$1LXXoO
     g$6399$21274$1LXXoO
     (make-record-type-descriptor
       '&i/o
       g$6261$20889$1LXXoO
       'g$6402$1LXXoO
       '#f
       '#f
       '#()))
   (g$6401$21002$1LXXoO g$6401$21275$1LXXoO '#f)
   (g$6400$21003$1LXXoO
     g$6400$21276$1LXXoO
     (make-record-constructor-descriptor
       g$6399$21001$1LXXoO
       g$6262$20891$1LXXoO
       g$6401$21002$1LXXoO))
   (g$p?$21006$1LXXoO
     g$p?$21277$1LXXoO
     (record-predicate g$6399$21001$1LXXoO))
   (g$make-i/o-error$21007$1LXXoO
     g$make-i/o-error$21278$1LXXoO
     (record-constructor g$6400$21003$1LXXoO))
   (g$i/o-error?$21008$1LXXoO
     g$i/o-error?$21279$1LXXoO
     (condition-predicate g$6399$21001$1LXXoO))
   (g$&i/o-rtd$21009$1LXXoO g$&i/o-rtd$21280$1LXXoO g$6399$21001$1LXXoO)
   (g$&i/o-rcd$21010$1LXXoO g$&i/o-rcd$21281$1LXXoO g$6400$21003$1LXXoO)
   (g$6412$21011$1LXXoO
     g$6412$21282$1LXXoO
     (make-record-type-descriptor
       '&i/o-read
       g$6399$21001$1LXXoO
       'g$6415$1LXXoO
       '#f
       '#f
       '#()))
   (g$6414$21012$1LXXoO g$6414$21283$1LXXoO '#f)
   (g$6413$21013$1LXXoO
     g$6413$21284$1LXXoO
     (make-record-constructor-descriptor
       g$6412$21011$1LXXoO
       g$6400$21003$1LXXoO
       g$6414$21012$1LXXoO))
   (g$p?$21016$1LXXoO
     g$p?$21285$1LXXoO
     (record-predicate g$6412$21011$1LXXoO))
   (g$make-i/o-read-error$21017$1LXXoO
     g$make-i/o-read-error$21286$1LXXoO
     (record-constructor g$6413$21013$1LXXoO))
   (g$i/o-read-error?$21018$1LXXoO
     g$i/o-read-error?$21287$1LXXoO
     (condition-predicate g$6412$21011$1LXXoO))
   (g$&i/o-read-rtd$21019$1LXXoO
     g$&i/o-read-rtd$21288$1LXXoO
     g$6412$21011$1LXXoO)
   (g$&i/o-read-rcd$21020$1LXXoO
     g$&i/o-read-rcd$21289$1LXXoO
     g$6413$21013$1LXXoO)
   (g$6425$21021$1LXXoO
     g$6425$21290$1LXXoO
     (make-record-type-descriptor
       '&i/o-write
       g$6399$21001$1LXXoO
       'g$6428$1LXXoO
       '#f
       '#f
       '#()))
   (g$6427$21022$1LXXoO g$6427$21291$1LXXoO '#f)
   (g$6426$21023$1LXXoO
     g$6426$21292$1LXXoO
     (make-record-constructor-descriptor
       g$6425$21021$1LXXoO
       g$6400$21003$1LXXoO
       g$6427$21022$1LXXoO))
   (g$p?$21026$1LXXoO
     g$p?$21293$1LXXoO
     (record-predicate g$6425$21021$1LXXoO))
   (g$make-i/o-write-error$21027$1LXXoO
     g$make-i/o-write-error$21294$1LXXoO
     (record-constructor g$6426$21023$1LXXoO))
   (g$i/o-write-error?$21028$1LXXoO
     g$i/o-write-error?$21295$1LXXoO
     (condition-predicate g$6425$21021$1LXXoO))
   (g$&i/o-write-rtd$21029$1LXXoO
     g$&i/o-write-rtd$21296$1LXXoO
     g$6425$21021$1LXXoO)
   (g$&i/o-write-rcd$21030$1LXXoO
     g$&i/o-write-rcd$21297$1LXXoO
     g$6426$21023$1LXXoO)
   (g$6438$21032$1LXXoO
     g$6438$21298$1LXXoO
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$6399$21001$1LXXoO
       'g$6441$1LXXoO
       '#f
       '#f
       '#((immutable position))))
   (g$6440$21033$1LXXoO g$6440$21299$1LXXoO '#f)
   (g$6439$21034$1LXXoO
     g$6439$21300$1LXXoO
     (make-record-constructor-descriptor
       g$6438$21032$1LXXoO
       g$6400$21003$1LXXoO
       g$6440$21033$1LXXoO))
   (g$p?$21037$1LXXoO
     g$p?$21301$1LXXoO
     (record-predicate g$6438$21032$1LXXoO))
   (g$make-i/o-invalid-position-error$21038$1LXXoO
     g$make-i/o-invalid-position-error$21302$1LXXoO
     (record-constructor g$6439$21034$1LXXoO))
   (g$i/o-error-position$21039$1LXXoO
     g$i/o-error-position$21303$1LXXoO
     (record-accessor g$6438$21032$1LXXoO '0))
   (g$i/o-invalid-position-error?$21040$1LXXoO
     g$i/o-invalid-position-error?$21304$1LXXoO
     (condition-predicate g$6438$21032$1LXXoO))
   (g$i/o-error-position$21041$1LXXoO
     g$i/o-error-position$21305$1LXXoO
     (condition-accessor
       g$6438$21032$1LXXoO
       g$i/o-error-position$21039$1LXXoO))
   (g$&i/o-invalid-position-rtd$21042$1LXXoO
     g$&i/o-invalid-position-rtd$21306$1LXXoO
     g$6438$21032$1LXXoO)
   (g$&i/o-invalid-position-rcd$21043$1LXXoO
     g$&i/o-invalid-position-rcd$21307$1LXXoO
     g$6439$21034$1LXXoO)
   (g$6453$21045$1LXXoO
     g$6453$21308$1LXXoO
     (make-record-type-descriptor
       '&i/o-filename
       g$6399$21001$1LXXoO
       'g$6456$1LXXoO
       '#f
       '#f
       '#((immutable filename))))
   (g$6455$21046$1LXXoO g$6455$21309$1LXXoO '#f)
   (g$6454$21047$1LXXoO
     g$6454$21310$1LXXoO
     (make-record-constructor-descriptor
       g$6453$21045$1LXXoO
       g$6400$21003$1LXXoO
       g$6455$21046$1LXXoO))
   (g$p?$21050$1LXXoO
     g$p?$21311$1LXXoO
     (record-predicate g$6453$21045$1LXXoO))
   (g$make-i/o-filename-error$21051$1LXXoO
     g$make-i/o-filename-error$21312$1LXXoO
     (record-constructor g$6454$21047$1LXXoO))
   (g$i/o-error-filename$21052$1LXXoO
     g$i/o-error-filename$21313$1LXXoO
     (record-accessor g$6453$21045$1LXXoO '0))
   (g$i/o-filename-error?$21053$1LXXoO
     g$i/o-filename-error?$21314$1LXXoO
     (condition-predicate g$6453$21045$1LXXoO))
   (g$i/o-error-filename$21054$1LXXoO
     g$i/o-error-filename$21315$1LXXoO
     (condition-accessor
       g$6453$21045$1LXXoO
       g$i/o-error-filename$21052$1LXXoO))
   (g$&i/o-filename-rtd$21055$1LXXoO
     g$&i/o-filename-rtd$21316$1LXXoO
     g$6453$21045$1LXXoO)
   (g$&i/o-filename-rcd$21056$1LXXoO
     g$&i/o-filename-rcd$21317$1LXXoO
     g$6454$21047$1LXXoO)
   (g$6468$21057$1LXXoO
     g$6468$21318$1LXXoO
     (make-record-type-descriptor
       '&i/o-file-protection
       g$6453$21045$1LXXoO
       'g$6471$1LXXoO
       '#f
       '#f
       '#()))
   (g$6470$21058$1LXXoO g$6470$21319$1LXXoO '#f)
   (g$6469$21059$1LXXoO
     g$6469$21320$1LXXoO
     (make-record-constructor-descriptor
       g$6468$21057$1LXXoO
       g$6454$21047$1LXXoO
       g$6470$21058$1LXXoO))
   (g$p?$21062$1LXXoO
     g$p?$21321$1LXXoO
     (record-predicate g$6468$21057$1LXXoO))
   (g$make-i/o-file-protection-error$21063$1LXXoO
     g$make-i/o-file-protection-error$21322$1LXXoO
     (record-constructor g$6469$21059$1LXXoO))
   (g$i/o-file-protection-error?$21064$1LXXoO
     g$i/o-file-protection-error?$21323$1LXXoO
     (condition-predicate g$6468$21057$1LXXoO))
   (g$&i/o-file-protection-rtd$21065$1LXXoO
     g$&i/o-file-protection-rtd$21324$1LXXoO
     g$6468$21057$1LXXoO)
   (g$&i/o-file-protection-rcd$21066$1LXXoO
     g$&i/o-file-protection-rcd$21325$1LXXoO
     g$6469$21059$1LXXoO)
   (g$6481$21067$1LXXoO
     g$6481$21326$1LXXoO
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$6468$21057$1LXXoO
       'g$6484$1LXXoO
       '#f
       '#f
       '#()))
   (g$6483$21068$1LXXoO g$6483$21327$1LXXoO '#f)
   (g$6482$21069$1LXXoO
     g$6482$21328$1LXXoO
     (make-record-constructor-descriptor
       g$6481$21067$1LXXoO
       g$6469$21059$1LXXoO
       g$6483$21068$1LXXoO))
   (g$p?$21072$1LXXoO
     g$p?$21329$1LXXoO
     (record-predicate g$6481$21067$1LXXoO))
   (g$make-i/o-file-is-read-only-error$21073$1LXXoO
     g$make-i/o-file-is-read-only-error$21330$1LXXoO
     (record-constructor g$6482$21069$1LXXoO))
   (g$i/o-file-is-read-only-error?$21074$1LXXoO
     g$i/o-file-is-read-only-error?$21331$1LXXoO
     (condition-predicate g$6481$21067$1LXXoO))
   (g$&i/o-file-is-read-only-rtd$21075$1LXXoO
     g$&i/o-file-is-read-only-rtd$21332$1LXXoO
     g$6481$21067$1LXXoO)
   (g$&i/o-file-is-read-only-rcd$21076$1LXXoO
     g$&i/o-file-is-read-only-rcd$21333$1LXXoO
     g$6482$21069$1LXXoO)
   (g$6494$21077$1LXXoO
     g$6494$21334$1LXXoO
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$6453$21045$1LXXoO
       'g$6497$1LXXoO
       '#f
       '#f
       '#()))
   (g$6496$21078$1LXXoO g$6496$21335$1LXXoO '#f)
   (g$6495$21079$1LXXoO
     g$6495$21336$1LXXoO
     (make-record-constructor-descriptor
       g$6494$21077$1LXXoO
       g$6454$21047$1LXXoO
       g$6496$21078$1LXXoO))
   (g$p?$21082$1LXXoO
     g$p?$21337$1LXXoO
     (record-predicate g$6494$21077$1LXXoO))
   (g$make-i/o-file-already-exists-error$21083$1LXXoO
     g$make-i/o-file-already-exists-error$21338$1LXXoO
     (record-constructor g$6495$21079$1LXXoO))
   (g$i/o-file-already-exists-error?$21084$1LXXoO
     g$i/o-file-already-exists-error?$21339$1LXXoO
     (condition-predicate g$6494$21077$1LXXoO))
   (g$&i/o-file-already-exists-rtd$21085$1LXXoO
     g$&i/o-file-already-exists-rtd$21340$1LXXoO
     g$6494$21077$1LXXoO)
   (g$&i/o-file-already-exists-rcd$21086$1LXXoO
     g$&i/o-file-already-exists-rcd$21341$1LXXoO
     g$6495$21079$1LXXoO)
   (g$6507$21087$1LXXoO
     g$6507$21342$1LXXoO
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$6453$21045$1LXXoO
       'g$6510$1LXXoO
       '#f
       '#f
       '#()))
   (g$6509$21088$1LXXoO g$6509$21343$1LXXoO '#f)
   (g$6508$21089$1LXXoO
     g$6508$21344$1LXXoO
     (make-record-constructor-descriptor
       g$6507$21087$1LXXoO
       g$6454$21047$1LXXoO
       g$6509$21088$1LXXoO))
   (g$p?$21092$1LXXoO
     g$p?$21345$1LXXoO
     (record-predicate g$6507$21087$1LXXoO))
   (g$make-i/o-file-does-not-exist-error$21093$1LXXoO
     g$make-i/o-file-does-not-exist-error$21346$1LXXoO
     (record-constructor g$6508$21089$1LXXoO))
   (g$i/o-file-does-not-exist-error?$21094$1LXXoO
     g$i/o-file-does-not-exist-error?$21347$1LXXoO
     (condition-predicate g$6507$21087$1LXXoO))
   (g$&i/o-file-does-not-exist-rtd$21095$1LXXoO
     g$&i/o-file-does-not-exist-rtd$21348$1LXXoO
     g$6507$21087$1LXXoO)
   (g$&i/o-file-does-not-exist-rcd$21096$1LXXoO
     g$&i/o-file-does-not-exist-rcd$21349$1LXXoO
     g$6508$21089$1LXXoO)
   (g$6520$21098$1LXXoO
     g$6520$21350$1LXXoO
     (make-record-type-descriptor
       '&i/o-port
       g$6399$21001$1LXXoO
       'g$6523$1LXXoO
       '#f
       '#f
       '#((immutable port))))
   (g$6522$21099$1LXXoO g$6522$21351$1LXXoO '#f)
   (g$6521$21100$1LXXoO
     g$6521$21352$1LXXoO
     (make-record-constructor-descriptor
       g$6520$21098$1LXXoO
       g$6400$21003$1LXXoO
       g$6522$21099$1LXXoO))
   (g$p?$21103$1LXXoO
     g$p?$21353$1LXXoO
     (record-predicate g$6520$21098$1LXXoO))
   (g$make-i/o-port-error$21104$1LXXoO
     g$make-i/o-port-error$21354$1LXXoO
     (record-constructor g$6521$21100$1LXXoO))
   (g$i/o-error-port$21105$1LXXoO
     g$i/o-error-port$21355$1LXXoO
     (record-accessor g$6520$21098$1LXXoO '0))
   (g$i/o-port-error?$21106$1LXXoO
     g$i/o-port-error?$21356$1LXXoO
     (condition-predicate g$6520$21098$1LXXoO))
   (g$i/o-error-port$21107$1LXXoO
     g$i/o-error-port$21357$1LXXoO
     (condition-accessor
       g$6520$21098$1LXXoO
       g$i/o-error-port$21105$1LXXoO))
   (g$&i/o-port-rtd$21108$1LXXoO
     g$&i/o-port-rtd$21358$1LXXoO
     g$6520$21098$1LXXoO)
   (g$&i/o-port-rcd$21109$1LXXoO
     g$&i/o-port-rcd$21359$1LXXoO
     g$6521$21100$1LXXoO)
   (g$6535$21110$1LXXoO
     g$6535$21360$1LXXoO
     (make-record-type-descriptor
       '&i/o-decoding
       g$6520$21098$1LXXoO
       'g$6538$1LXXoO
       '#f
       '#f
       '#()))
   (g$6537$21111$1LXXoO g$6537$21361$1LXXoO '#f)
   (g$6536$21112$1LXXoO
     g$6536$21362$1LXXoO
     (make-record-constructor-descriptor
       g$6535$21110$1LXXoO
       g$6521$21100$1LXXoO
       g$6537$21111$1LXXoO))
   (g$p?$21115$1LXXoO
     g$p?$21363$1LXXoO
     (record-predicate g$6535$21110$1LXXoO))
   (g$make-i/o-decoding-error$21116$1LXXoO
     g$make-i/o-decoding-error$21364$1LXXoO
     (record-constructor g$6536$21112$1LXXoO))
   (g$i/o-decoding-error?$21117$1LXXoO
     g$i/o-decoding-error?$21365$1LXXoO
     (condition-predicate g$6535$21110$1LXXoO))
   (g$&i/o-decoding-rtd$21118$1LXXoO
     g$&i/o-decoding-rtd$21366$1LXXoO
     g$6535$21110$1LXXoO)
   (g$&i/o-decoding-rcd$21119$1LXXoO
     g$&i/o-decoding-rcd$21367$1LXXoO
     g$6536$21112$1LXXoO)
   (g$6548$21121$1LXXoO
     g$6548$21368$1LXXoO
     (make-record-type-descriptor
       '&i/o-encoding
       g$6520$21098$1LXXoO
       'g$6551$1LXXoO
       '#f
       '#f
       '#((immutable char))))
   (g$6550$21122$1LXXoO g$6550$21369$1LXXoO '#f)
   (g$6549$21123$1LXXoO
     g$6549$21370$1LXXoO
     (make-record-constructor-descriptor
       g$6548$21121$1LXXoO
       g$6521$21100$1LXXoO
       g$6550$21122$1LXXoO))
   (g$p?$21126$1LXXoO
     g$p?$21371$1LXXoO
     (record-predicate g$6548$21121$1LXXoO))
   (g$make-i/o-encoding-error$21127$1LXXoO
     g$make-i/o-encoding-error$21372$1LXXoO
     (record-constructor g$6549$21123$1LXXoO))
   (g$i/o-encoding-error-char$21128$1LXXoO
     g$i/o-encoding-error-char$21373$1LXXoO
     (record-accessor g$6548$21121$1LXXoO '0))
   (g$i/o-encoding-error?$21129$1LXXoO
     g$i/o-encoding-error?$21374$1LXXoO
     (condition-predicate g$6548$21121$1LXXoO))
   (g$i/o-encoding-error-char$21130$1LXXoO
     g$i/o-encoding-error-char$21375$1LXXoO
     (condition-accessor
       g$6548$21121$1LXXoO
       g$i/o-encoding-error-char$21128$1LXXoO))
   (g$&i/o-encoding-rtd$21131$1LXXoO
     g$&i/o-encoding-rtd$21376$1LXXoO
     g$6548$21121$1LXXoO)
   (g$&i/o-encoding-rcd$21132$1LXXoO
     g$&i/o-encoding-rcd$21377$1LXXoO
     g$6549$21123$1LXXoO)
   (g$6563$21133$1LXXoO
     g$6563$21378$1LXXoO
     (make-record-type-descriptor
       '&no-infinities
       g$6343$20955$1LXXoO
       'g$6566$1LXXoO
       '#f
       '#f
       '#()))
   (g$6565$21134$1LXXoO g$6565$21379$1LXXoO '#f)
   (g$6564$21135$1LXXoO
     g$6564$21380$1LXXoO
     (make-record-constructor-descriptor
       g$6563$21133$1LXXoO
       g$6344$20957$1LXXoO
       g$6565$21134$1LXXoO))
   (g$p?$21138$1LXXoO
     g$p?$21381$1LXXoO
     (record-predicate g$6563$21133$1LXXoO))
   (g$make-no-infinities-violation$21139$1LXXoO
     g$make-no-infinities-violation$21382$1LXXoO
     (record-constructor g$6564$21135$1LXXoO))
   (g$no-infinities-violation?$21140$1LXXoO
     g$no-infinities-violation?$21383$1LXXoO
     (condition-predicate g$6563$21133$1LXXoO))
   (g$&no-infinities-rtd$21141$1LXXoO
     g$&no-infinities-rtd$21384$1LXXoO
     g$6563$21133$1LXXoO)
   (g$&no-infinities-rcd$21142$1LXXoO
     g$&no-infinities-rcd$21385$1LXXoO
     g$6564$21135$1LXXoO)
   (g$6576$21143$1LXXoO
     g$6576$21386$1LXXoO
     (make-record-type-descriptor
       '&no-nans
       g$6343$20955$1LXXoO
       'g$6579$1LXXoO
       '#f
       '#f
       '#()))
   (g$6578$21144$1LXXoO g$6578$21387$1LXXoO '#f)
   (g$6577$21145$1LXXoO
     g$6577$21388$1LXXoO
     (make-record-constructor-descriptor
       g$6576$21143$1LXXoO
       g$6344$20957$1LXXoO
       g$6578$21144$1LXXoO))
   (g$p?$21148$1LXXoO
     g$p?$21389$1LXXoO
     (record-predicate g$6576$21143$1LXXoO))
   (g$make-no-nans-violation$21149$1LXXoO
     g$make-no-nans-violation$21390$1LXXoO
     (record-constructor g$6577$21145$1LXXoO))
   (g$no-nans-violation?$21150$1LXXoO
     g$no-nans-violation?$21391$1LXXoO
     (condition-predicate g$6576$21143$1LXXoO))
   (g$&no-nans-rtd$21151$1LXXoO
     g$&no-nans-rtd$21392$1LXXoO
     g$6576$21143$1LXXoO)
   (g$&no-nans-rcd$21152$1LXXoO
     g$&no-nans-rcd$21393$1LXXoO
     g$6577$21145$1LXXoO))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$21394$1LXXoO
     g$append!$21400$1LXXoO
     (case-lambda
       ((g$a$21395$1LXXoO . g$b$21396$1LXXoO)
        (if (null? g$a$21395$1LXXoO)
          g$b$21396$1LXXoO
          (if (null? g$b$21396$1LXXoO)
            g$a$21395$1LXXoO
            (begin
              '#f
              ((letrec ((g$f$21397$1LXXoO
                          (case-lambda
                            ((g$a$21398$1LXXoO)
                             ((case-lambda
                                ((g$n$21399$1LXXoO)
                                 (if (null? g$n$21399$1LXXoO)
                                   (set-cdr!
                                     g$a$21398$1LXXoO
                                     g$b$21396$1LXXoO)
                                   (g$f$21397$1LXXoO
                                     g$n$21399$1LXXoO))))
                              (cdr g$a$21398$1LXXoO))))))
                 g$f$21397$1LXXoO)
               g$a$21395$1LXXoO)
              g$a$21395$1LXXoO)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$21401$1LXXoO g$inexact->exact$21421$1LXXoO exact)
   (g$exact->inexact$21402$1LXXoO g$exact->inexact$21422$1LXXoO inexact)
   (g$sign$21403$1LXXoO
     g$sign$21423$1LXXoO
     (case-lambda
       ((g$n$21409$1LXXoO)
        (if (g$>$20717$1LXXoO g$n$21409$1LXXoO '0)
          '1
          (if (g$<$20715$1LXXoO g$n$21409$1LXXoO '0)
            '-1
            (begin '#f '0))))))
   (g$quotient$21404$1LXXoO
     g$quotient$21424$1LXXoO
     (case-lambda
       ((g$n1$21410$1LXXoO g$n2$21411$1LXXoO)
        (begin
          (if (not (g$integer-valued?$20710$1LXXoO g$n1$21410$1LXXoO))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n1$21410$1LXXoO)
            (void))
          (if (not (g$integer-valued?$20710$1LXXoO g$n2$21411$1LXXoO))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n2$21411$1LXXoO)
            (void))
          (* (g$sign$21403$1LXXoO g$n1$21410$1LXXoO)
             (g$sign$21403$1LXXoO g$n2$21411$1LXXoO)
             (g$div$20739$1LXXoO
               (g$abs$20740$1LXXoO g$n1$21410$1LXXoO)
               (g$abs$20740$1LXXoO g$n2$21411$1LXXoO)))))))
   (g$remainder$21405$1LXXoO
     g$remainder$21425$1LXXoO
     (case-lambda
       ((g$n1$21412$1LXXoO g$n2$21413$1LXXoO)
        (begin
          (if (not (g$integer-valued?$20710$1LXXoO g$n1$21412$1LXXoO))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n1$21412$1LXXoO)
            (void))
          (if (not (g$integer-valued?$20710$1LXXoO g$n2$21413$1LXXoO))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n2$21413$1LXXoO)
            (void))
          (* (g$sign$21403$1LXXoO g$n1$21412$1LXXoO)
             (g$mod$20064$1LXXoO
               (g$abs$20740$1LXXoO g$n1$21412$1LXXoO)
               (g$abs$20740$1LXXoO g$n2$21413$1LXXoO)))))))
   (g$modulo$21406$1LXXoO
     g$modulo$21426$1LXXoO
     (case-lambda
       ((g$n1$21414$1LXXoO g$n2$21415$1LXXoO)
        (begin
          (if (not (g$integer-valued?$20710$1LXXoO g$n1$21414$1LXXoO))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n1$21414$1LXXoO)
            (void))
          (if (not (g$integer-valued?$20710$1LXXoO g$n2$21415$1LXXoO))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n2$21415$1LXXoO)
            (void))
          (* (g$sign$21403$1LXXoO g$n2$21415$1LXXoO)
             (g$mod$20064$1LXXoO
               (* (g$sign$21403$1LXXoO g$n2$21415$1LXXoO)
                  g$n1$21414$1LXXoO)
               (g$abs$20740$1LXXoO g$n2$21415$1LXXoO)))))))
   (g$make-promise$21407$1LXXoO
     g$make-promise$21427$1LXXoO
     (case-lambda
       ((g$proc$21416$1LXXoO)
        ((case-lambda
           ((g$result-ready?$21417$1LXXoO g$result$21418$1LXXoO)
            (case-lambda
              (()
               (if g$result-ready?$21417$1LXXoO
                 g$result$21418$1LXXoO
                 ((case-lambda
                    ((g$x$21419$1LXXoO)
                     (if g$result-ready?$21417$1LXXoO
                       g$result$21418$1LXXoO
                       (begin
                         (set! g$result-ready?$21417$1LXXoO '#t)
                         (set! g$result$21418$1LXXoO g$x$21419$1LXXoO)
                         g$result$21418$1LXXoO))))
                  (g$proc$21416$1LXXoO)))))))
         '#f
         '#f))))
   (g$force$21408$1LXXoO
     g$force$21428$1LXXoO
     (case-lambda ((g$object$21420$1LXXoO) (g$object$21420$1LXXoO)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$21429$1LXXoO
     g$split$21454$1LXXoO
     (case-lambda
       ((g$ls$21433$1LXXoO)
        ((letrec ((g$loop$21434$1LXXoO
                    (case-lambda
                      ((g$rest$21435$1LXXoO
                         g$left$21436$1LXXoO
                         g$right$21437$1LXXoO)
                       (if (null? g$rest$21435$1LXXoO)
                         (cons g$left$21436$1LXXoO g$right$21437$1LXXoO)
                         (if (null? (cdr g$rest$21435$1LXXoO))
                           (cons
                             (cons
                               (car g$rest$21435$1LXXoO)
                               g$left$21436$1LXXoO)
                             g$right$21437$1LXXoO)
                           (begin
                             '#f
                             (g$loop$21434$1LXXoO
                               (g$cddr$20078$1LXXoO g$rest$21435$1LXXoO)
                               (cons
                                 (car g$rest$21435$1LXXoO)
                                 g$left$21436$1LXXoO)
                               (cons
                                 (g$cadr$20076$1LXXoO
                                   g$rest$21435$1LXXoO)
                                 g$right$21437$1LXXoO)))))))))
           g$loop$21434$1LXXoO)
         g$ls$21433$1LXXoO
         '()
         '()))))
   (g$reverse-it$21430$1LXXoO
     g$reverse-it$21455$1LXXoO
     (case-lambda
       ((g$head$21438$1LXXoO g$tail$21439$1LXXoO)
        (if (null? g$head$21438$1LXXoO)
          g$tail$21439$1LXXoO
          (g$reverse-it$21430$1LXXoO
            (cdr g$head$21438$1LXXoO)
            (cons (car g$head$21438$1LXXoO) g$tail$21439$1LXXoO))))))
   (g$merge$21431$1LXXoO
     g$merge$21456$1LXXoO
     (case-lambda
       ((g$list-1$21440$1LXXoO
          g$list-2$21441$1LXXoO
          g$precedes?$21442$1LXXoO)
        ((letrec ((g$loop$21443$1LXXoO
                    (case-lambda
                      ((g$source-1$21444$1LXXoO
                         g$source-2$21445$1LXXoO
                         g$so-far$21446$1LXXoO)
                       (if (null? g$source-1$21444$1LXXoO)
                         (g$reverse-it$21430$1LXXoO
                           g$so-far$21446$1LXXoO
                           g$source-2$21445$1LXXoO)
                         (if (null? g$source-2$21445$1LXXoO)
                           (g$reverse-it$21430$1LXXoO
                             g$so-far$21446$1LXXoO
                             g$source-1$21444$1LXXoO)
                           (begin
                             '#f
                             ((case-lambda
                                ((g$car-1$21447$1LXXoO
                                   g$car-2$21448$1LXXoO)
                                 (if (g$precedes?$21442$1LXXoO
                                       g$car-2$21448$1LXXoO
                                       g$car-1$21447$1LXXoO)
                                   (g$loop$21443$1LXXoO
                                     g$source-1$21444$1LXXoO
                                     (cdr g$source-2$21445$1LXXoO)
                                     (cons
                                       g$car-2$21448$1LXXoO
                                       g$so-far$21446$1LXXoO))
                                   (g$loop$21443$1LXXoO
                                     g$source-2$21445$1LXXoO
                                     (cdr g$source-1$21444$1LXXoO)
                                     (cons
                                       g$car-1$21447$1LXXoO
                                       g$so-far$21446$1LXXoO)))))
                              (car g$source-1$21444$1LXXoO)
                              (car g$source-2$21445$1LXXoO)))))))))
           g$loop$21443$1LXXoO)
         g$list-1$21440$1LXXoO
         g$list-2$21441$1LXXoO
         '()))))
   (g$list-sort$21432$1LXXoO
     g$list-sort$21457$1LXXoO
     (case-lambda
       ((g$precedes?$21449$1LXXoO g$ls$21450$1LXXoO)
        (if (null? g$ls$21450$1LXXoO)
          '()
          ((letrec ((g$helper$21451$1LXXoO
                      (case-lambda
                        ((g$piece$21452$1LXXoO)
                         (if (null? (cdr g$piece$21452$1LXXoO))
                           g$piece$21452$1LXXoO
                           ((case-lambda
                              ((g$parts$21453$1LXXoO)
                               (g$merge$21431$1LXXoO
                                 (g$helper$21451$1LXXoO
                                   (car g$parts$21453$1LXXoO))
                                 (g$helper$21451$1LXXoO
                                   (cdr g$parts$21453$1LXXoO))
                                 g$precedes?$21449$1LXXoO)))
                            (g$split$21429$1LXXoO
                              g$piece$21452$1LXXoO)))))))
             g$helper$21451$1LXXoO)
           g$ls$21450$1LXXoO))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$21496$1LXXoO
     g$string-ci=?$21602$1LXXoO
     (case-lambda
       ((g$a$21548$1LXXoO g$b$21549$1LXXoO . g$rest$21550$1LXXoO)
        (begin
          (if (not (string? g$a$21548$1LXXoO))
            (assertion-violation
              'string-ci=?
              '"not a string"
              g$a$21548$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$21551$1LXXoO)
               (begin
                 (if (not (string? g$x$21551$1LXXoO))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$21551$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$21552$1LXXoO)
                     (begin
                       (set! g$a$21548$1LXXoO g$x$21551$1LXXoO)
                       g$r$21552$1LXXoO)))
                  (g$=$20714$1LXXoO
                    (string-ci-compare
                      g$a$21548$1LXXoO
                      g$x$21551$1LXXoO)
                    '0)))))
            (cons g$b$21549$1LXXoO g$rest$21550$1LXXoO))))))
   (g$string-ci<?$21497$1LXXoO
     g$string-ci<?$21603$1LXXoO
     (case-lambda
       ((g$a$21553$1LXXoO g$b$21554$1LXXoO . g$rest$21555$1LXXoO)
        (begin
          (if (not (string? g$a$21553$1LXXoO))
            (assertion-violation
              'string-ci<?
              '"not a string"
              g$a$21553$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$21556$1LXXoO)
               (begin
                 (if (not (string? g$x$21556$1LXXoO))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$21556$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$21557$1LXXoO)
                     (begin
                       (set! g$a$21553$1LXXoO g$x$21556$1LXXoO)
                       g$r$21557$1LXXoO)))
                  (g$<$20715$1LXXoO
                    (string-ci-compare
                      g$a$21553$1LXXoO
                      g$x$21556$1LXXoO)
                    '0)))))
            (cons g$b$21554$1LXXoO g$rest$21555$1LXXoO))))))
   (g$string-ci>?$21498$1LXXoO
     g$string-ci>?$21604$1LXXoO
     (case-lambda
       ((g$a$21558$1LXXoO g$b$21559$1LXXoO . g$rest$21560$1LXXoO)
        (begin
          (if (not (string? g$a$21558$1LXXoO))
            (assertion-violation
              'string-ci>?
              '"not a string"
              g$a$21558$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$21561$1LXXoO)
               (begin
                 (if (not (string? g$x$21561$1LXXoO))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$21561$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$21562$1LXXoO)
                     (begin
                       (set! g$a$21558$1LXXoO g$x$21561$1LXXoO)
                       g$r$21562$1LXXoO)))
                  (g$>$20717$1LXXoO
                    (string-ci-compare
                      g$a$21558$1LXXoO
                      g$x$21561$1LXXoO)
                    '0)))))
            (cons g$b$21559$1LXXoO g$rest$21560$1LXXoO))))))
   (g$string-ci<=?$21499$1LXXoO
     g$string-ci<=?$21605$1LXXoO
     (case-lambda
       ((g$a$21563$1LXXoO g$b$21564$1LXXoO . g$rest$21565$1LXXoO)
        (begin
          (if (not (string? g$a$21563$1LXXoO))
            (assertion-violation
              'string-ci<=?
              '"not a string"
              g$a$21563$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$21566$1LXXoO)
               (begin
                 (if (not (string? g$x$21566$1LXXoO))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$21566$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$21567$1LXXoO)
                     (begin
                       (set! g$a$21563$1LXXoO g$x$21566$1LXXoO)
                       g$r$21567$1LXXoO)))
                  (g$<=$20716$1LXXoO
                    (string-ci-compare
                      g$a$21563$1LXXoO
                      g$x$21566$1LXXoO)
                    '0)))))
            (cons g$b$21564$1LXXoO g$rest$21565$1LXXoO))))))
   (g$string-ci>=?$21500$1LXXoO
     g$string-ci>=?$21606$1LXXoO
     (case-lambda
       ((g$a$21568$1LXXoO g$b$21569$1LXXoO . g$rest$21570$1LXXoO)
        (begin
          (if (not (string? g$a$21568$1LXXoO))
            (assertion-violation
              'string-ci>=?
              '"not a string"
              g$a$21568$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$21571$1LXXoO)
               (begin
                 (if (not (string? g$x$21571$1LXXoO))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$21571$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$21572$1LXXoO)
                     (begin
                       (set! g$a$21568$1LXXoO g$x$21571$1LXXoO)
                       g$r$21572$1LXXoO)))
                  (g$>=$20718$1LXXoO
                    (string-ci-compare
                      g$a$21568$1LXXoO
                      g$x$21571$1LXXoO)
                    '0)))))
            (cons g$b$21569$1LXXoO g$rest$21570$1LXXoO))))))
   (g$char-ci=?$21539$1LXXoO
     g$char-ci=?$21607$1LXXoO
     (case-lambda
       ((g$a$21573$1LXXoO g$b$21574$1LXXoO . g$rest$21575$1LXXoO)
        (begin
          (if (not (g$char?$20054$1LXXoO g$a$21573$1LXXoO))
            (assertion-violation
              'char-ci=?
              '"not a char"
              g$a$21573$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$21576$1LXXoO)
               (begin
                 (if (not (g$char?$20054$1LXXoO g$x$21576$1LXXoO))
                   (assertion-violation
                     'char-ci=?
                     '"not a char"
                     g$x$21576$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$21577$1LXXoO)
                     (begin
                       (set! g$a$21573$1LXXoO g$x$21576$1LXXoO)
                       g$r$21577$1LXXoO)))
                  (g$=$20714$1LXXoO
                    (char->integer (char-upcase g$a$21573$1LXXoO))
                    (char->integer (char-upcase g$x$21576$1LXXoO)))))))
            (cons g$b$21574$1LXXoO g$rest$21575$1LXXoO))))))
   (g$char-ci<?$21540$1LXXoO
     g$char-ci<?$21608$1LXXoO
     (case-lambda
       ((g$a$21578$1LXXoO g$b$21579$1LXXoO . g$rest$21580$1LXXoO)
        (begin
          (if (not (g$char?$20054$1LXXoO g$a$21578$1LXXoO))
            (assertion-violation
              'char-ci<?
              '"not a char"
              g$a$21578$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$21581$1LXXoO)
               (begin
                 (if (not (g$char?$20054$1LXXoO g$x$21581$1LXXoO))
                   (assertion-violation
                     'char-ci<?
                     '"not a char"
                     g$x$21581$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$21582$1LXXoO)
                     (begin
                       (set! g$a$21578$1LXXoO g$x$21581$1LXXoO)
                       g$r$21582$1LXXoO)))
                  (g$<$20715$1LXXoO
                    (char->integer (char-upcase g$a$21578$1LXXoO))
                    (char->integer (char-upcase g$x$21581$1LXXoO)))))))
            (cons g$b$21579$1LXXoO g$rest$21580$1LXXoO))))))
   (g$char-ci>?$21541$1LXXoO
     g$char-ci>?$21609$1LXXoO
     (case-lambda
       ((g$a$21583$1LXXoO g$b$21584$1LXXoO . g$rest$21585$1LXXoO)
        (begin
          (if (not (g$char?$20054$1LXXoO g$a$21583$1LXXoO))
            (assertion-violation
              'char-ci>?
              '"not a char"
              g$a$21583$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$21586$1LXXoO)
               (begin
                 (if (not (g$char?$20054$1LXXoO g$x$21586$1LXXoO))
                   (assertion-violation
                     'char-ci>?
                     '"not a char"
                     g$x$21586$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$21587$1LXXoO)
                     (begin
                       (set! g$a$21583$1LXXoO g$x$21586$1LXXoO)
                       g$r$21587$1LXXoO)))
                  (g$>$20717$1LXXoO
                    (char->integer (char-upcase g$a$21583$1LXXoO))
                    (char->integer (char-upcase g$x$21586$1LXXoO)))))))
            (cons g$b$21584$1LXXoO g$rest$21585$1LXXoO))))))
   (g$char-ci<=?$21542$1LXXoO
     g$char-ci<=?$21610$1LXXoO
     (case-lambda
       ((g$a$21588$1LXXoO g$b$21589$1LXXoO . g$rest$21590$1LXXoO)
        (begin
          (if (not (g$char?$20054$1LXXoO g$a$21588$1LXXoO))
            (assertion-violation
              'char-ci<=?
              '"not a char"
              g$a$21588$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$21591$1LXXoO)
               (begin
                 (if (not (g$char?$20054$1LXXoO g$x$21591$1LXXoO))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$21591$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$21592$1LXXoO)
                     (begin
                       (set! g$a$21588$1LXXoO g$x$21591$1LXXoO)
                       g$r$21592$1LXXoO)))
                  (g$<=$20716$1LXXoO
                    (char->integer (char-upcase g$a$21588$1LXXoO))
                    (char->integer (char-upcase g$x$21591$1LXXoO)))))))
            (cons g$b$21589$1LXXoO g$rest$21590$1LXXoO))))))
   (g$char-ci>=?$21543$1LXXoO
     g$char-ci>=?$21611$1LXXoO
     (case-lambda
       ((g$a$21593$1LXXoO g$b$21594$1LXXoO . g$rest$21595$1LXXoO)
        (begin
          (if (not (g$char?$20054$1LXXoO g$a$21593$1LXXoO))
            (assertion-violation
              'char-ci>=?
              '"not a char"
              g$a$21593$1LXXoO)
            (void))
          (g$for-all$19223$1LXXoO
            (case-lambda
              ((g$x$21596$1LXXoO)
               (begin
                 (if (not (g$char?$20054$1LXXoO g$x$21596$1LXXoO))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$21596$1LXXoO)
                   (void))
                 ((case-lambda
                    ((g$r$21597$1LXXoO)
                     (begin
                       (set! g$a$21593$1LXXoO g$x$21596$1LXXoO)
                       g$r$21597$1LXXoO)))
                  (g$>=$20718$1LXXoO
                    (char->integer (char-upcase g$a$21593$1LXXoO))
                    (char->integer (char-upcase g$x$21596$1LXXoO)))))))
            (cons g$b$21594$1LXXoO g$rest$21595$1LXXoO))))))
   (g$string-normalize-nfc$21544$1LXXoO
     g$string-normalize-nfc$21612$1LXXoO
     (case-lambda
       ((g$s$21598$1LXXoO) (string-normalize g$s$21598$1LXXoO 'formc))))
   (g$string-normalize-nfd$21545$1LXXoO
     g$string-normalize-nfd$21613$1LXXoO
     (case-lambda
       ((g$s$21599$1LXXoO) (string-normalize g$s$21599$1LXXoO 'formd))))
   (g$string-normalize-nfkc$21546$1LXXoO
     g$string-normalize-nfkc$21614$1LXXoO
     (case-lambda
       ((g$s$21600$1LXXoO)
        (string-normalize g$s$21600$1LXXoO 'formkc))))
   (g$string-normalize-nfkd$21547$1LXXoO
     g$string-normalize-nfkd$21615$1LXXoO
     (case-lambda
       ((g$s$21601$1LXXoO)
        (string-normalize g$s$21601$1LXXoO 'formkd)))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$21616$1LXXoO
     g$bitwise-if$21647$1LXXoO
     (case-lambda
       ((g$ei1$21623$1LXXoO g$ei2$21624$1LXXoO g$ei3$21625$1LXXoO)
        (bitwise-ior
          (bitwise-and g$ei1$21623$1LXXoO g$ei2$21624$1LXXoO)
          (bitwise-and
            (bitwise-not g$ei1$21623$1LXXoO)
            g$ei3$21625$1LXXoO)))))
   (g$bitwise-copy-bit$21617$1LXXoO
     g$bitwise-copy-bit$21648$1LXXoO
     (case-lambda
       ((g$ei1$21626$1LXXoO g$ei2$21627$1LXXoO g$ei3$21628$1LXXoO)
        (g$bitwise-if$21616$1LXXoO
          (g$bitwise-arithmetic-shift-left$21620$1LXXoO
            '1
            g$ei2$21627$1LXXoO)
          (g$bitwise-arithmetic-shift-left$21620$1LXXoO
            g$ei3$21628$1LXXoO
            g$ei2$21627$1LXXoO)
          g$ei1$21626$1LXXoO))))
   (g$bitwise-bit-field$21618$1LXXoO
     g$bitwise-bit-field$21649$1LXXoO
     (case-lambda
       ((g$ei1$21629$1LXXoO g$ei2$21630$1LXXoO g$ei3$21631$1LXXoO)
        (g$bitwise-arithmetic-shift-right$21621$1LXXoO
          (bitwise-and
            g$ei1$21629$1LXXoO
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$21620$1LXXoO
                '-1
                g$ei3$21631$1LXXoO)))
          g$ei2$21630$1LXXoO))))
   (g$bitwise-copy-bit-field$21619$1LXXoO
     g$bitwise-copy-bit-field$21650$1LXXoO
     (case-lambda
       ((g$to$21632$1LXXoO
          g$start$21633$1LXXoO
          g$end$21634$1LXXoO
          g$from$21635$1LXXoO)
        (g$bitwise-if$21616$1LXXoO
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$21620$1LXXoO
              '-1
              g$start$21633$1LXXoO)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$21620$1LXXoO
                '-1
                g$end$21634$1LXXoO)))
          (g$bitwise-arithmetic-shift-left$21620$1LXXoO
            g$from$21635$1LXXoO
            g$start$21633$1LXXoO)
          g$to$21632$1LXXoO))))
   (g$bitwise-arithmetic-shift-left$21620$1LXXoO
     g$bitwise-arithmetic-shift-left$21651$1LXXoO
     (case-lambda
       ((g$ei1$21636$1LXXoO g$ei2$21637$1LXXoO)
        (bitwise-arithmetic-shift
          g$ei1$21636$1LXXoO
          g$ei2$21637$1LXXoO))))
   (g$bitwise-arithmetic-shift-right$21621$1LXXoO
     g$bitwise-arithmetic-shift-right$21652$1LXXoO
     (case-lambda
       ((g$ei1$21638$1LXXoO g$ei2$21639$1LXXoO)
        (bitwise-arithmetic-shift
          g$ei1$21638$1LXXoO
          (- g$ei2$21639$1LXXoO)))))
   (g$bitwise-rotate-bit-field$21622$1LXXoO
     g$bitwise-rotate-bit-field$21653$1LXXoO
     (case-lambda
       ((g$n$21640$1LXXoO
          g$start$21641$1LXXoO
          g$end$21642$1LXXoO
          g$count$21643$1LXXoO)
        ((case-lambda
           ((g$width$21644$1LXXoO)
            (if (g$positive?$20712$1LXXoO g$width$21644$1LXXoO)
              ((case-lambda
                 ((g$count$21645$1LXXoO g$field$21646$1LXXoO)
                  (g$bitwise-copy-bit-field$21619$1LXXoO
                    g$n$21640$1LXXoO
                    g$start$21641$1LXXoO
                    g$end$21642$1LXXoO
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$21620$1LXXoO
                        g$field$21646$1LXXoO
                        g$count$21645$1LXXoO)
                      (g$bitwise-arithmetic-shift-right$21621$1LXXoO
                        g$field$21646$1LXXoO
                        (- g$width$21644$1LXXoO
                           g$count$21645$1LXXoO))))))
               (g$mod$20064$1LXXoO
                 g$count$21643$1LXXoO
                 g$width$21644$1LXXoO)
               (g$bitwise-bit-field$21618$1LXXoO
                 g$n$21640$1LXXoO
                 g$start$21641$1LXXoO
                 g$end$21642$1LXXoO))
              g$n$21640$1LXXoO)))
         (- g$end$21642$1LXXoO g$start$21641$1LXXoO))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$greatest-fixnum$21654$1LXXoO
     g$greatest-fixnum$23886$1LXXoO
     (case-lambda (() '2147483647)))
   (g$least-fixnum$21655$1LXXoO
     g$least-fixnum$23887$1LXXoO
     (case-lambda (() '-2147483648)))
   (g$fx+$21761$1LXXoO
     g$fx+$23888$1LXXoO
     (case-lambda
       ((g$x1$22156$1LXXoO g$x2$22157$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22156$1LXXoO))
            (assertion-violation 'fx+ '"not a fixnum" g$x1$22156$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22157$1LXXoO))
            (assertion-violation 'fx+ '"not a fixnum" g$x2$22157$1LXXoO)
            (void))
          ((case-lambda
             (()
              ($try
                ($fx+ g$x1$22156$1LXXoO g$x2$22157$1LXXoO)
                (g$overflow-error$21764$1LXXoO '#f)))))))))
   (g$fx*$21762$1LXXoO
     g$fx*$23889$1LXXoO
     (case-lambda
       ((g$x1$22158$1LXXoO g$x2$22159$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22158$1LXXoO))
            (assertion-violation 'fx* '"not a fixnum" g$x1$22158$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22159$1LXXoO))
            (assertion-violation 'fx* '"not a fixnum" g$x2$22159$1LXXoO)
            (void))
          ((case-lambda
             (()
              ($try
                ($fx* g$x1$22158$1LXXoO g$x2$22159$1LXXoO)
                (g$overflow-error$21764$1LXXoO '#f)))))))))
   (g$fx-$21763$1LXXoO
     g$fx-$23890$1LXXoO
     (case-lambda
       ((g$x1$22160$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22160$1LXXoO))
            (assertion-violation 'fx- '"not a fixnum" g$x1$22160$1LXXoO)
            (void))
          (if ($fx=? (g$least-fixnum$21655$1LXXoO) g$x1$22160$1LXXoO)
            (g$overflow-error$21764$1LXXoO 'fx- g$x1$22160$1LXXoO)
            (void))
          ($$fx- g$x1$22160$1LXXoO)))
       ((g$x1$22161$1LXXoO g$x2$22162$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22161$1LXXoO))
            (assertion-violation 'fx- '"not a fixnum" g$x1$22161$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22162$1LXXoO))
            (assertion-violation 'fx- '"not a fixnum" g$x2$22162$1LXXoO)
            (void))
          ($try
            ($fx- g$x1$22161$1LXXoO g$x2$22162$1LXXoO)
            (g$overflow-error$21764$1LXXoO '#f))))))
   (g$overflow-error$21764$1LXXoO
     g$overflow-error$23891$1LXXoO
     (case-lambda
       ((g$name$22163$1LXXoO . g$irritants$22164$1LXXoO)
        (raise
          (condition
            (g$make-implementation-restriction-violation$21242$1LXXoO)
            (g$make-who-condition$21224$1LXXoO g$name$22163$1LXXoO)
            (g$make-message-condition$21164$1LXXoO
              '"arithmetic overflow")
            (g$make-irritants-condition$21214$1LXXoO
              g$irritants$22164$1LXXoO))))))
   (g$residual-fxarithmetic-shift*$21780$1LXXoO
     g$residual-fxarithmetic-shift*$23892$1LXXoO
     (case-lambda
       ((g$x$22185$1LXXoO g$k$22186$1LXXoO)
        (if ($fx=? g$k$22186$1LXXoO '0)
          g$x$22185$1LXXoO
          (if ($fx<? g$k$22186$1LXXoO '0)
            ($fxarithmetic-shift-right
              g$x$22185$1LXXoO
              ($$fx- g$k$22186$1LXXoO))
            (begin
              '#f
              ((case-lambda
                 ((g$i$22187$1LXXoO)
                  (begin
                    (if ($fx>?
                          (clr-call-internal
                            'System.Math
                            '"abs(int32)"
                            '()
                            g$x$22185$1LXXoO)
                          (clr-call-internal
                            'System.Math
                            '"abs(int32)"
                            '()
                            g$i$22187$1LXXoO))
                      (g$overflow-error$21764$1LXXoO
                        'fxarithmetic-shift
                        g$x$22185$1LXXoO
                        g$k$22186$1LXXoO)
                      (void))
                    g$i$22187$1LXXoO)))
               ($fxarithmetic-shift-left
                 g$x$22185$1LXXoO
                 g$k$22186$1LXXoO))))))))
   (g$fxarithmetic-shift$21781$1LXXoO
     g$fxarithmetic-shift$23893$1LXXoO
     (case-lambda
       ((g$x$22188$1LXXoO g$k$22189$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x$22188$1LXXoO))
            (assertion-violation
              'fxarithmetic-shift
              '"not a fixnum"
              g$x$22188$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$k$22189$1LXXoO))
            (assertion-violation
              'fxarithmetic-shift
              '"not a fixnum"
              g$k$22189$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x$22210$1LXXoO g$k$22211$1LXXoO)
                  (if ($fx=? g$k$22211$1LXXoO '0)
                    g$x$22210$1LXXoO
                    (if ($fx<? g$k$22211$1LXXoO '0)
                      ($fxarithmetic-shift-right
                        g$x$22210$1LXXoO
                        ($$fx- g$k$22211$1LXXoO))
                      (begin
                        '#f
                        ((case-lambda
                           ((g$i$22212$1LXXoO)
                            (begin
                              (if ($fx>?
                                    (clr-call-internal
                                      'System.Math
                                      '"abs(int32)"
                                      '()
                                      g$x$22210$1LXXoO)
                                    (clr-call-internal
                                      'System.Math
                                      '"abs(int32)"
                                      '()
                                      g$i$22212$1LXXoO))
                                (g$overflow-error$21764$1LXXoO
                                  'fxarithmetic-shift
                                  g$x$22210$1LXXoO
                                  g$k$22211$1LXXoO)
                                (void))
                              g$i$22212$1LXXoO)))
                         ($fxarithmetic-shift-left
                           g$x$22210$1LXXoO
                           g$k$22211$1LXXoO)))))))
               g$x$22188$1LXXoO
               g$k$22189$1LXXoO))))))))
   (g$residual-fxbit-count*$21797$1LXXoO
     g$residual-fxbit-count*$23894$1LXXoO
     (case-lambda
       ((g$x$22233$1LXXoO)
        (if ($fx<=? g$x$22233$1LXXoO '0)
          ($fxnot
            (g$residual-fxbit-count*$21797$1LXXoO
              ($fxnot g$x$22233$1LXXoO)))
          ((letrec ((g$f$22234$1LXXoO
                      (case-lambda
                        ((g$count$22235$1LXXoO g$x$22236$1LXXoO)
                         (if ($fx<? '0 g$x$22236$1LXXoO)
                           (g$f$22234$1LXXoO
                             ($$fx+
                               g$count$22235$1LXXoO
                               ($fxand g$x$22236$1LXXoO '1))
                             ($fxarithmetic-shift-right
                               g$x$22236$1LXXoO
                               '1))
                           g$count$22235$1LXXoO)))))
             g$f$22234$1LXXoO)
           '0
           g$x$22233$1LXXoO)))))
   (g$fxbit-count$21798$1LXXoO
     g$fxbit-count$23895$1LXXoO
     (case-lambda
       ((g$x$22237$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x$22237$1LXXoO))
            (assertion-violation
              'fxbit-count
              '"not a fixnum"
              g$x$22237$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x$22258$1LXXoO)
                  (if ($fx<=? g$x$22258$1LXXoO '0)
                    ($fxnot
                      (g$residual-fxbit-count*$21797$1LXXoO
                        ($fxnot g$x$22258$1LXXoO)))
                    ((letrec ((g$f$22259$1LXXoO
                                (case-lambda
                                  ((g$count$22260$1LXXoO
                                     g$x$22261$1LXXoO)
                                   (if ($fx<? '0 g$x$22261$1LXXoO)
                                     (g$f$22259$1LXXoO
                                       ($$fx+
                                         g$count$22260$1LXXoO
                                         ($fxand g$x$22261$1LXXoO '1))
                                       ($fxarithmetic-shift-right
                                         g$x$22261$1LXXoO
                                         '1))
                                     g$count$22260$1LXXoO)))))
                       g$f$22259$1LXXoO)
                     '0
                     g$x$22258$1LXXoO))))
               g$x$22237$1LXXoO))))))))
   (g$residual-fxlength*$21814$1LXXoO
     g$residual-fxlength*$23896$1LXXoO
     (case-lambda
       ((g$x$22282$1LXXoO)
        (if ($fx<? g$x$22282$1LXXoO '0)
          (g$residual-fxlength*$21814$1LXXoO ($fxnot g$x$22282$1LXXoO))
          ((letrec ((g$f$22283$1LXXoO
                      (case-lambda
                        ((g$count$22284$1LXXoO g$x$22285$1LXXoO)
                         (if ($fx<? '0 g$x$22285$1LXXoO)
                           (g$f$22283$1LXXoO
                             ($$fx+ g$count$22284$1LXXoO '1)
                             ($fxarithmetic-shift-right
                               g$x$22285$1LXXoO
                               '1))
                           g$count$22284$1LXXoO)))))
             g$f$22283$1LXXoO)
           '0
           g$x$22282$1LXXoO)))))
   (g$fxlength$21815$1LXXoO
     g$fxlength$23897$1LXXoO
     (case-lambda
       ((g$x$22286$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x$22286$1LXXoO))
            (assertion-violation
              'fxlength
              '"not a fixnum"
              g$x$22286$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x$22307$1LXXoO)
                  (if ($fx<? g$x$22307$1LXXoO '0)
                    (g$residual-fxlength*$21814$1LXXoO
                      ($fxnot g$x$22307$1LXXoO))
                    ((letrec ((g$f$22308$1LXXoO
                                (case-lambda
                                  ((g$count$22309$1LXXoO
                                     g$x$22310$1LXXoO)
                                   (if ($fx<? '0 g$x$22310$1LXXoO)
                                     (g$f$22308$1LXXoO
                                       ($$fx+ g$count$22309$1LXXoO '1)
                                       ($fxarithmetic-shift-right
                                         g$x$22310$1LXXoO
                                         '1))
                                     g$count$22309$1LXXoO)))))
                       g$f$22308$1LXXoO)
                     '0
                     g$x$22307$1LXXoO))))
               g$x$22286$1LXXoO))))))))
   (g$fxfirst-bit-set$21816$1LXXoO
     g$fxfirst-bit-set$23898$1LXXoO
     (case-lambda
       ((g$x$22311$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x$22311$1LXXoO))
            (assertion-violation
              'fxfirst-bit-set
              '"not a fixnum"
              g$x$22311$1LXXoO)
            (void))
          ((case-lambda
             (()
              (if ($fx=? g$x$22311$1LXXoO '0)
                '-1
                ((letrec ((g$f$22312$1LXXoO
                            (case-lambda
                              ((g$count$22313$1LXXoO g$x$22314$1LXXoO)
                               (if (not ($fx=? '0 g$x$22314$1LXXoO))
                                 (if ($fx=?
                                       '1
                                       ($fxand '1 g$x$22314$1LXXoO))
                                   g$count$22313$1LXXoO
                                   (g$f$22312$1LXXoO
                                     ($$fx+ g$count$22313$1LXXoO '1)
                                     ($fxarithmetic-shift-right
                                       g$x$22314$1LXXoO
                                       '1)))
                                 g$count$22313$1LXXoO)))))
                   g$f$22312$1LXXoO)
                 '0
                 g$x$22311$1LXXoO)))))))))
   (g$fxbit-set?$21817$1LXXoO
     g$fxbit-set?$23899$1LXXoO
     (case-lambda
       ((g$x$22315$1LXXoO g$k$22316$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x$22315$1LXXoO))
            (assertion-violation
              'fxbit-set?
              '"not a fixnum"
              g$x$22315$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$k$22316$1LXXoO))
            (assertion-violation
              'fxbit-set?
              '"not a fixnum"
              g$k$22316$1LXXoO)
            (void))
          ((case-lambda
             (()
              (begin
                (if ($fx<? g$k$22316$1LXXoO '0)
                  (assertion-violation
                    'fxbit-set?
                    '"cannot be negative"
                    g$k$22316$1LXXoO)
                  (void))
                (if ($fx>=? g$k$22316$1LXXoO '32)
                  (assertion-violation
                    'fxbit-set?
                    '"cannot be larger than 31"
                    g$k$22316$1LXXoO)
                  (void))
                (if ($fx=? '0 g$x$22315$1LXXoO)
                  '#f
                  ((letrec ((g$f$22317$1LXXoO
                              (case-lambda
                                ((g$count$22318$1LXXoO g$x$22319$1LXXoO)
                                 (if (not ($fx=? '0 g$x$22319$1LXXoO))
                                   (if (if ($fx=?
                                             g$count$22318$1LXXoO
                                             g$k$22316$1LXXoO)
                                         (begin
                                           '#f
                                           ($fx=?
                                             '1
                                             ($fxand
                                               '1
                                               g$x$22319$1LXXoO)))
                                         '#f)
                                     '#t
                                     (g$f$22317$1LXXoO
                                       ($$fx+ g$count$22318$1LXXoO '1)
                                       ($fxarithmetic-shift-right
                                         g$x$22319$1LXXoO
                                         '1)))
                                   '#f)))))
                     g$f$22317$1LXXoO)
                   '0
                   g$x$22315$1LXXoO))))))))))
   (g$fxnot$21818$1LXXoO
     g$fxnot$23900$1LXXoO
     (case-lambda
       ((g$x1$22320$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22320$1LXXoO))
            (assertion-violation
              'fxnot
              '"not a fixnum"
              g$x1$22320$1LXXoO)
            (void))
          ((case-lambda (() ($fxnot g$x1$22320$1LXXoO))))))))
   (g$fx=?$21869$1LXXoO
     g$fx=?$23901$1LXXoO
     (case-lambda
       ((g$x1$22321$1LXXoO g$x2$22322$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22321$1LXXoO))
            (assertion-violation
              'fx=?
              '"not a fixnum"
              g$x1$22321$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22322$1LXXoO))
            (assertion-violation
              'fx=?
              '"not a fixnum"
              g$x2$22322$1LXXoO)
            (void))
          ($fx=? g$x1$22321$1LXXoO g$x2$22322$1LXXoO)))
       ((g$x1$22323$1LXXoO g$x2$22324$1LXXoO . g$rest$22325$1LXXoO)
        ((letrec ((g$f$22326$1LXXoO
                    (case-lambda
                      ((g$a$22327$1LXXoO g$b$22328$1LXXoO)
                       (if (null? g$b$22328$1LXXoO)
                         '#t
                         (if (g$fx=?$21869$1LXXoO
                               g$a$22327$1LXXoO
                               ($car g$b$22328$1LXXoO))
                           (g$f$22326$1LXXoO
                             ($car g$b$22328$1LXXoO)
                             ($cdr g$b$22328$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$22326$1LXXoO)
         g$x1$22323$1LXXoO
         (cons g$x2$22324$1LXXoO g$rest$22325$1LXXoO)))))
   (g$fx<?$21870$1LXXoO
     g$fx<?$23902$1LXXoO
     (case-lambda
       ((g$x1$22329$1LXXoO g$x2$22330$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22329$1LXXoO))
            (assertion-violation
              'fx<?
              '"not a fixnum"
              g$x1$22329$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22330$1LXXoO))
            (assertion-violation
              'fx<?
              '"not a fixnum"
              g$x2$22330$1LXXoO)
            (void))
          ($fx<? g$x1$22329$1LXXoO g$x2$22330$1LXXoO)))
       ((g$x1$22331$1LXXoO g$x2$22332$1LXXoO . g$rest$22333$1LXXoO)
        ((letrec ((g$f$22334$1LXXoO
                    (case-lambda
                      ((g$a$22335$1LXXoO g$b$22336$1LXXoO)
                       (if (null? g$b$22336$1LXXoO)
                         '#t
                         (if (g$fx<?$21870$1LXXoO
                               g$a$22335$1LXXoO
                               ($car g$b$22336$1LXXoO))
                           (g$f$22334$1LXXoO
                             ($car g$b$22336$1LXXoO)
                             ($cdr g$b$22336$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$22334$1LXXoO)
         g$x1$22331$1LXXoO
         (cons g$x2$22332$1LXXoO g$rest$22333$1LXXoO)))))
   (g$fx<=?$21871$1LXXoO
     g$fx<=?$23903$1LXXoO
     (case-lambda
       ((g$x1$22337$1LXXoO g$x2$22338$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22337$1LXXoO))
            (assertion-violation
              'fx<=?
              '"not a fixnum"
              g$x1$22337$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22338$1LXXoO))
            (assertion-violation
              'fx<=?
              '"not a fixnum"
              g$x2$22338$1LXXoO)
            (void))
          ($fx<=? g$x1$22337$1LXXoO g$x2$22338$1LXXoO)))
       ((g$x1$22339$1LXXoO g$x2$22340$1LXXoO . g$rest$22341$1LXXoO)
        ((letrec ((g$f$22342$1LXXoO
                    (case-lambda
                      ((g$a$22343$1LXXoO g$b$22344$1LXXoO)
                       (if (null? g$b$22344$1LXXoO)
                         '#t
                         (if (g$fx<=?$21871$1LXXoO
                               g$a$22343$1LXXoO
                               ($car g$b$22344$1LXXoO))
                           (g$f$22342$1LXXoO
                             ($car g$b$22344$1LXXoO)
                             ($cdr g$b$22344$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$22342$1LXXoO)
         g$x1$22339$1LXXoO
         (cons g$x2$22340$1LXXoO g$rest$22341$1LXXoO)))))
   (g$fx>?$21872$1LXXoO
     g$fx>?$23904$1LXXoO
     (case-lambda
       ((g$x1$22345$1LXXoO g$x2$22346$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22345$1LXXoO))
            (assertion-violation
              'fx>?
              '"not a fixnum"
              g$x1$22345$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22346$1LXXoO))
            (assertion-violation
              'fx>?
              '"not a fixnum"
              g$x2$22346$1LXXoO)
            (void))
          ($fx>? g$x1$22345$1LXXoO g$x2$22346$1LXXoO)))
       ((g$x1$22347$1LXXoO g$x2$22348$1LXXoO . g$rest$22349$1LXXoO)
        ((letrec ((g$f$22350$1LXXoO
                    (case-lambda
                      ((g$a$22351$1LXXoO g$b$22352$1LXXoO)
                       (if (null? g$b$22352$1LXXoO)
                         '#t
                         (if (g$fx>?$21872$1LXXoO
                               g$a$22351$1LXXoO
                               ($car g$b$22352$1LXXoO))
                           (g$f$22350$1LXXoO
                             ($car g$b$22352$1LXXoO)
                             ($cdr g$b$22352$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$22350$1LXXoO)
         g$x1$22347$1LXXoO
         (cons g$x2$22348$1LXXoO g$rest$22349$1LXXoO)))))
   (g$fx>=?$21873$1LXXoO
     g$fx>=?$23905$1LXXoO
     (case-lambda
       ((g$x1$22353$1LXXoO g$x2$22354$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22353$1LXXoO))
            (assertion-violation
              'fx>=?
              '"not a fixnum"
              g$x1$22353$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22354$1LXXoO))
            (assertion-violation
              'fx>=?
              '"not a fixnum"
              g$x2$22354$1LXXoO)
            (void))
          ($fx>=? g$x1$22353$1LXXoO g$x2$22354$1LXXoO)))
       ((g$x1$22355$1LXXoO g$x2$22356$1LXXoO . g$rest$22357$1LXXoO)
        ((letrec ((g$f$22358$1LXXoO
                    (case-lambda
                      ((g$a$22359$1LXXoO g$b$22360$1LXXoO)
                       (if (null? g$b$22360$1LXXoO)
                         '#t
                         (if (g$fx>=?$21873$1LXXoO
                               g$a$22359$1LXXoO
                               ($car g$b$22360$1LXXoO))
                           (g$f$22358$1LXXoO
                             ($car g$b$22360$1LXXoO)
                             ($cdr g$b$22360$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$22358$1LXXoO)
         g$x1$22355$1LXXoO
         (cons g$x2$22356$1LXXoO g$rest$22357$1LXXoO)))))
   (g$fxand$21921$1LXXoO
     g$fxand$23906$1LXXoO
     (case-lambda
       (() '-1)
       ((g$x1$22361$1LXXoO g$x2$22362$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22361$1LXXoO))
            (assertion-violation
              'fxand
              '"not a fixnum"
              g$x1$22361$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22362$1LXXoO))
            (assertion-violation
              'fxand
              '"not a fixnum"
              g$x2$22362$1LXXoO)
            (void))
          ($fxand g$x1$22361$1LXXoO g$x2$22362$1LXXoO)))
       (g$args$22363$1LXXoO
        (g$fold-left$19228$1LXXoO
          g$fxand$21921$1LXXoO
          (g$fxand$21921$1LXXoO)
          g$args$22363$1LXXoO))))
   (g$fxior$21922$1LXXoO
     g$fxior$23907$1LXXoO
     (case-lambda
       (() '0)
       ((g$x1$22364$1LXXoO g$x2$22365$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22364$1LXXoO))
            (assertion-violation
              'fxior
              '"not a fixnum"
              g$x1$22364$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22365$1LXXoO))
            (assertion-violation
              'fxior
              '"not a fixnum"
              g$x2$22365$1LXXoO)
            (void))
          ($fxior g$x1$22364$1LXXoO g$x2$22365$1LXXoO)))
       (g$args$22366$1LXXoO
        (g$fold-left$19228$1LXXoO
          g$fxior$21922$1LXXoO
          (g$fxior$21922$1LXXoO)
          g$args$22366$1LXXoO))))
   (g$fxxor$21923$1LXXoO
     g$fxxor$23908$1LXXoO
     (case-lambda
       (() '0)
       ((g$x1$22367$1LXXoO g$x2$22368$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22367$1LXXoO))
            (assertion-violation
              'fxxor
              '"not a fixnum"
              g$x1$22367$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22368$1LXXoO))
            (assertion-violation
              'fxxor
              '"not a fixnum"
              g$x2$22368$1LXXoO)
            (void))
          ($fxxor g$x1$22367$1LXXoO g$x2$22368$1LXXoO)))
       (g$args$22369$1LXXoO
        (g$fold-left$19228$1LXXoO
          g$fxxor$21923$1LXXoO
          (g$fxxor$21923$1LXXoO)
          g$args$22369$1LXXoO))))
   (g$residual-fxdiv*$21939$1LXXoO
     g$residual-fxdiv*$23909$1LXXoO
     (case-lambda
       ((g$x1$22390$1LXXoO g$x2$22391$1LXXoO)
        (begin
          (if ($fx=? '0 g$x2$22391$1LXXoO)
            (assertion-violation
              'fxdiv
              '"divide by zero"
              g$x1$22390$1LXXoO
              g$x2$22391$1LXXoO)
            (void))
          (if (if ($fx=? '-1 g$x2$22391$1LXXoO)
                (begin
                  '#f
                  ($fx=?
                    (g$least-fixnum$21655$1LXXoO)
                    g$x1$22390$1LXXoO))
                '#f)
            (g$overflow-error$21764$1LXXoO
              'fxdiv
              g$x1$22390$1LXXoO
              g$x2$22391$1LXXoO)
            (void))
          (if ($fx=? '0 g$x1$22390$1LXXoO)
            '0
            (if ($fx<? '0 g$x1$22390$1LXXoO)
              ((case-lambda
                 ((g$x1$22412$1LXXoO g$x2$22413$1LXXoO)
                  ($fxdiv0 g$x1$22412$1LXXoO g$x2$22413$1LXXoO)))
               g$x1$22390$1LXXoO
               g$x2$22391$1LXXoO)
              (if ($fx<? '0 g$x2$22391$1LXXoO)
                ((case-lambda
                   ((g$x1$22434$1LXXoO g$x2$22435$1LXXoO)
                    ($fxdiv0 g$x1$22434$1LXXoO g$x2$22435$1LXXoO)))
                 ($$fx- g$x1$22390$1LXXoO ($$fx- g$x2$22391$1LXXoO '1))
                 g$x2$22391$1LXXoO)
                (begin
                  '#f
                  ((case-lambda
                     ((g$x1$22456$1LXXoO g$x2$22457$1LXXoO)
                      ($fxdiv0 g$x1$22456$1LXXoO g$x2$22457$1LXXoO)))
                   ($$fx+
                     g$x1$22390$1LXXoO
                     ($$fx+ g$x2$22391$1LXXoO '1))
                   g$x2$22391$1LXXoO)))))))))
   (g$fxdiv$21940$1LXXoO
     g$fxdiv$23910$1LXXoO
     (case-lambda
       ((g$x1$22458$1LXXoO g$x2$22459$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22458$1LXXoO))
            (assertion-violation
              'fxdiv
              '"not a fixnum"
              g$x1$22458$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22459$1LXXoO))
            (assertion-violation
              'fxdiv
              '"not a fixnum"
              g$x2$22459$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$22480$1LXXoO g$x2$22481$1LXXoO)
                  (begin
                    (if ($fx=? '0 g$x2$22481$1LXXoO)
                      (assertion-violation
                        'fxdiv
                        '"divide by zero"
                        g$x1$22480$1LXXoO
                        g$x2$22481$1LXXoO)
                      (void))
                    (if (if ($fx=? '-1 g$x2$22481$1LXXoO)
                          (begin
                            '#f
                            ($fx=?
                              (g$least-fixnum$21655$1LXXoO)
                              g$x1$22480$1LXXoO))
                          '#f)
                      (g$overflow-error$21764$1LXXoO
                        'fxdiv
                        g$x1$22480$1LXXoO
                        g$x2$22481$1LXXoO)
                      (void))
                    (if ($fx=? '0 g$x1$22480$1LXXoO)
                      '0
                      (if ($fx<? '0 g$x1$22480$1LXXoO)
                        ((case-lambda
                           ((g$x1$22502$1LXXoO g$x2$22503$1LXXoO)
                            ($fxdiv0
                              g$x1$22502$1LXXoO
                              g$x2$22503$1LXXoO)))
                         g$x1$22480$1LXXoO
                         g$x2$22481$1LXXoO)
                        (if ($fx<? '0 g$x2$22481$1LXXoO)
                          ((case-lambda
                             ((g$x1$22524$1LXXoO g$x2$22525$1LXXoO)
                              ($fxdiv0
                                g$x1$22524$1LXXoO
                                g$x2$22525$1LXXoO)))
                           ($$fx-
                             g$x1$22480$1LXXoO
                             ($$fx- g$x2$22481$1LXXoO '1))
                           g$x2$22481$1LXXoO)
                          (begin
                            '#f
                            ((case-lambda
                               ((g$x1$22546$1LXXoO g$x2$22547$1LXXoO)
                                ($fxdiv0
                                  g$x1$22546$1LXXoO
                                  g$x2$22547$1LXXoO)))
                             ($$fx+
                               g$x1$22480$1LXXoO
                               ($$fx+ g$x2$22481$1LXXoO '1))
                             g$x2$22481$1LXXoO))))))))
               g$x1$22458$1LXXoO
               g$x2$22459$1LXXoO))))))))
   (g$residual-fxmod*$21956$1LXXoO
     g$residual-fxmod*$23911$1LXXoO
     (case-lambda
       ((g$x1$22568$1LXXoO g$x2$22569$1LXXoO)
        ($$fx-
          g$x1$22568$1LXXoO
          ($$fx*
            ((case-lambda
               ((g$x1$22590$1LXXoO g$x2$22591$1LXXoO)
                (begin
                  (if ($fx=? '0 g$x2$22591$1LXXoO)
                    (assertion-violation
                      'fxdiv
                      '"divide by zero"
                      g$x1$22590$1LXXoO
                      g$x2$22591$1LXXoO)
                    (void))
                  (if (if ($fx=? '-1 g$x2$22591$1LXXoO)
                        (begin
                          '#f
                          ($fx=?
                            (g$least-fixnum$21655$1LXXoO)
                            g$x1$22590$1LXXoO))
                        '#f)
                    (g$overflow-error$21764$1LXXoO
                      'fxdiv
                      g$x1$22590$1LXXoO
                      g$x2$22591$1LXXoO)
                    (void))
                  (if ($fx=? '0 g$x1$22590$1LXXoO)
                    '0
                    (if ($fx<? '0 g$x1$22590$1LXXoO)
                      ((case-lambda
                         ((g$x1$22612$1LXXoO g$x2$22613$1LXXoO)
                          ($fxdiv0
                            g$x1$22612$1LXXoO
                            g$x2$22613$1LXXoO)))
                       g$x1$22590$1LXXoO
                       g$x2$22591$1LXXoO)
                      (if ($fx<? '0 g$x2$22591$1LXXoO)
                        ((case-lambda
                           ((g$x1$22634$1LXXoO g$x2$22635$1LXXoO)
                            ($fxdiv0
                              g$x1$22634$1LXXoO
                              g$x2$22635$1LXXoO)))
                         ($$fx-
                           g$x1$22590$1LXXoO
                           ($$fx- g$x2$22591$1LXXoO '1))
                         g$x2$22591$1LXXoO)
                        (begin
                          '#f
                          ((case-lambda
                             ((g$x1$22656$1LXXoO g$x2$22657$1LXXoO)
                              ($fxdiv0
                                g$x1$22656$1LXXoO
                                g$x2$22657$1LXXoO)))
                           ($$fx+
                             g$x1$22590$1LXXoO
                             ($$fx+ g$x2$22591$1LXXoO '1))
                           g$x2$22591$1LXXoO))))))))
             g$x1$22568$1LXXoO
             g$x2$22569$1LXXoO)
            g$x2$22569$1LXXoO)))))
   (g$fxmod$21957$1LXXoO
     g$fxmod$23912$1LXXoO
     (case-lambda
       ((g$x1$22658$1LXXoO g$x2$22659$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22658$1LXXoO))
            (assertion-violation
              'fxmod
              '"not a fixnum"
              g$x1$22658$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22659$1LXXoO))
            (assertion-violation
              'fxmod
              '"not a fixnum"
              g$x2$22659$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$22680$1LXXoO g$x2$22681$1LXXoO)
                  ($$fx-
                    g$x1$22680$1LXXoO
                    ($$fx*
                      ((case-lambda
                         ((g$x1$22702$1LXXoO g$x2$22703$1LXXoO)
                          (begin
                            (if ($fx=? '0 g$x2$22703$1LXXoO)
                              (assertion-violation
                                'fxdiv
                                '"divide by zero"
                                g$x1$22702$1LXXoO
                                g$x2$22703$1LXXoO)
                              (void))
                            (if (if ($fx=? '-1 g$x2$22703$1LXXoO)
                                  (begin
                                    '#f
                                    ($fx=?
                                      (g$least-fixnum$21655$1LXXoO)
                                      g$x1$22702$1LXXoO))
                                  '#f)
                              (g$overflow-error$21764$1LXXoO
                                'fxdiv
                                g$x1$22702$1LXXoO
                                g$x2$22703$1LXXoO)
                              (void))
                            (if ($fx=? '0 g$x1$22702$1LXXoO)
                              '0
                              (if ($fx<? '0 g$x1$22702$1LXXoO)
                                ((case-lambda
                                   ((g$x1$22724$1LXXoO
                                      g$x2$22725$1LXXoO)
                                    ($fxdiv0
                                      g$x1$22724$1LXXoO
                                      g$x2$22725$1LXXoO)))
                                 g$x1$22702$1LXXoO
                                 g$x2$22703$1LXXoO)
                                (if ($fx<? '0 g$x2$22703$1LXXoO)
                                  ((case-lambda
                                     ((g$x1$22746$1LXXoO
                                        g$x2$22747$1LXXoO)
                                      ($fxdiv0
                                        g$x1$22746$1LXXoO
                                        g$x2$22747$1LXXoO)))
                                   ($$fx-
                                     g$x1$22702$1LXXoO
                                     ($$fx- g$x2$22703$1LXXoO '1))
                                   g$x2$22703$1LXXoO)
                                  (begin
                                    '#f
                                    ((case-lambda
                                       ((g$x1$22768$1LXXoO
                                          g$x2$22769$1LXXoO)
                                        ($fxdiv0
                                          g$x1$22768$1LXXoO
                                          g$x2$22769$1LXXoO)))
                                     ($$fx+
                                       g$x1$22702$1LXXoO
                                       ($$fx+ g$x2$22703$1LXXoO '1))
                                     g$x2$22703$1LXXoO))))))))
                       g$x1$22680$1LXXoO
                       g$x2$22681$1LXXoO)
                      g$x2$22681$1LXXoO))))
               g$x1$22658$1LXXoO
               g$x2$22659$1LXXoO))))))))
   (g$fxmod0$21958$1LXXoO
     g$fxmod0$23913$1LXXoO
     (case-lambda
       ((g$x1$22770$1LXXoO g$x2$22771$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22770$1LXXoO))
            (assertion-violation
              'fxmod0
              '"not a fixnum"
              g$x1$22770$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22771$1LXXoO))
            (assertion-violation
              'fxmod0
              '"not a fixnum"
              g$x2$22771$1LXXoO)
            (void))
          ((case-lambda
             (()
              (begin
                (if ($fx=? '0 g$x2$22771$1LXXoO)
                  (assertion-violation
                    'fxmod0
                    '"divide by zero"
                    g$x1$22770$1LXXoO
                    g$x2$22771$1LXXoO)
                  (void))
                (if (if ($fx=? '-1 g$x2$22771$1LXXoO)
                      (begin
                        '#f
                        ($fx=?
                          (g$least-fixnum$21655$1LXXoO)
                          g$x1$22770$1LXXoO))
                      '#f)
                  (g$overflow-error$21764$1LXXoO
                    'fxmod0
                    g$x1$22770$1LXXoO
                    g$x2$22771$1LXXoO)
                  (void))
                ($fxmod0 g$x1$22770$1LXXoO g$x2$22771$1LXXoO)))))))))
   (g$fxdiv-and-mod$21959$1LXXoO
     g$fxdiv-and-mod$23914$1LXXoO
     (case-lambda
       ((g$x1$22772$1LXXoO g$x2$22773$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22772$1LXXoO))
            (assertion-violation
              'fxdiv-and-mod
              '"not a fixnum"
              g$x1$22772$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22773$1LXXoO))
            (assertion-violation
              'fxdiv-and-mod
              '"not a fixnum"
              g$x2$22773$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$d$22774$1LXXoO)
                  (values
                    g$d$22774$1LXXoO
                    ($$fx-
                      g$x1$22772$1LXXoO
                      ($$fx* g$d$22774$1LXXoO g$x2$22773$1LXXoO)))))
               ((case-lambda
                  ((g$x1$22795$1LXXoO g$x2$22796$1LXXoO)
                   (begin
                     (if ($fx=? '0 g$x2$22796$1LXXoO)
                       (assertion-violation
                         'fxdiv
                         '"divide by zero"
                         g$x1$22795$1LXXoO
                         g$x2$22796$1LXXoO)
                       (void))
                     (if (if ($fx=? '-1 g$x2$22796$1LXXoO)
                           (begin
                             '#f
                             ($fx=?
                               (g$least-fixnum$21655$1LXXoO)
                               g$x1$22795$1LXXoO))
                           '#f)
                       (g$overflow-error$21764$1LXXoO
                         'fxdiv
                         g$x1$22795$1LXXoO
                         g$x2$22796$1LXXoO)
                       (void))
                     (if ($fx=? '0 g$x1$22795$1LXXoO)
                       '0
                       (if ($fx<? '0 g$x1$22795$1LXXoO)
                         ((case-lambda
                            ((g$x1$22817$1LXXoO g$x2$22818$1LXXoO)
                             ($fxdiv0
                               g$x1$22817$1LXXoO
                               g$x2$22818$1LXXoO)))
                          g$x1$22795$1LXXoO
                          g$x2$22796$1LXXoO)
                         (if ($fx<? '0 g$x2$22796$1LXXoO)
                           ((case-lambda
                              ((g$x1$22839$1LXXoO g$x2$22840$1LXXoO)
                               ($fxdiv0
                                 g$x1$22839$1LXXoO
                                 g$x2$22840$1LXXoO)))
                            ($$fx-
                              g$x1$22795$1LXXoO
                              ($$fx- g$x2$22796$1LXXoO '1))
                            g$x2$22796$1LXXoO)
                           (begin
                             '#f
                             ((case-lambda
                                ((g$x1$22861$1LXXoO g$x2$22862$1LXXoO)
                                 ($fxdiv0
                                   g$x1$22861$1LXXoO
                                   g$x2$22862$1LXXoO)))
                              ($$fx+
                                g$x1$22795$1LXXoO
                                ($$fx+ g$x2$22796$1LXXoO '1))
                              g$x2$22796$1LXXoO))))))))
                g$x1$22772$1LXXoO
                g$x2$22773$1LXXoO)))))))))
   (g$residual-fxdiv0*$21975$1LXXoO
     g$residual-fxdiv0*$23915$1LXXoO
     (case-lambda
       ((g$x1$22883$1LXXoO g$x2$22884$1LXXoO)
        (begin
          (if ($fx=? '0 g$x2$22884$1LXXoO)
            (assertion-violation
              'fxdiv0
              '"divide by zero"
              g$x1$22883$1LXXoO
              g$x2$22884$1LXXoO)
            (void))
          (if (if ($fx=? '-1 g$x2$22884$1LXXoO)
                (begin
                  '#f
                  ($fx=?
                    (g$least-fixnum$21655$1LXXoO)
                    g$x1$22883$1LXXoO))
                '#f)
            (g$overflow-error$21764$1LXXoO
              'fxdiv0
              g$x1$22883$1LXXoO
              g$x2$22884$1LXXoO)
            (void))
          ((case-lambda
             ((g$x1$22905$1LXXoO g$x2$22906$1LXXoO)
              ($fxdiv0 g$x1$22905$1LXXoO g$x2$22906$1LXXoO)))
           g$x1$22883$1LXXoO
           g$x2$22884$1LXXoO)))))
   (g$fxdiv0$21976$1LXXoO
     g$fxdiv0$23916$1LXXoO
     (case-lambda
       ((g$x1$22907$1LXXoO g$x2$22908$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22907$1LXXoO))
            (assertion-violation
              'fxdiv0
              '"not a fixnum"
              g$x1$22907$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22908$1LXXoO))
            (assertion-violation
              'fxdiv0
              '"not a fixnum"
              g$x2$22908$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$22929$1LXXoO g$x2$22930$1LXXoO)
                  (begin
                    (if ($fx=? '0 g$x2$22930$1LXXoO)
                      (assertion-violation
                        'fxdiv0
                        '"divide by zero"
                        g$x1$22929$1LXXoO
                        g$x2$22930$1LXXoO)
                      (void))
                    (if (if ($fx=? '-1 g$x2$22930$1LXXoO)
                          (begin
                            '#f
                            ($fx=?
                              (g$least-fixnum$21655$1LXXoO)
                              g$x1$22929$1LXXoO))
                          '#f)
                      (g$overflow-error$21764$1LXXoO
                        'fxdiv0
                        g$x1$22929$1LXXoO
                        g$x2$22930$1LXXoO)
                      (void))
                    ((case-lambda
                       ((g$x1$22951$1LXXoO g$x2$22952$1LXXoO)
                        ($fxdiv0 g$x1$22951$1LXXoO g$x2$22952$1LXXoO)))
                     g$x1$22929$1LXXoO
                     g$x2$22930$1LXXoO))))
               g$x1$22907$1LXXoO
               g$x2$22908$1LXXoO))))))))
   (g$residual-%%fxdiv0$21992$1LXXoO
     g$residual-%%fxdiv0$23917$1LXXoO
     (case-lambda
       ((g$x1$22973$1LXXoO g$x2$22974$1LXXoO)
        ($fxdiv0 g$x1$22973$1LXXoO g$x2$22974$1LXXoO))))
   (g$fxdiv0-and-mod0$21993$1LXXoO
     g$fxdiv0-and-mod0$23918$1LXXoO
     (case-lambda
       ((g$x1$22975$1LXXoO g$x2$22976$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$22975$1LXXoO))
            (assertion-violation
              'fxdiv0-and-mod0
              '"not a fixnum"
              g$x1$22975$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$x2$22976$1LXXoO))
            (assertion-violation
              'fxdiv0-and-mod0
              '"not a fixnum"
              g$x2$22976$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$d$22977$1LXXoO)
                  (values
                    g$d$22977$1LXXoO
                    ($$fx-
                      g$x1$22975$1LXXoO
                      ($$fx* g$d$22977$1LXXoO g$x2$22976$1LXXoO)))))
               ((case-lambda
                  ((g$x1$22998$1LXXoO g$x2$22999$1LXXoO)
                   (begin
                     (if ($fx=? '0 g$x2$22999$1LXXoO)
                       (assertion-violation
                         'fxdiv0
                         '"divide by zero"
                         g$x1$22998$1LXXoO
                         g$x2$22999$1LXXoO)
                       (void))
                     (if (if ($fx=? '-1 g$x2$22999$1LXXoO)
                           (begin
                             '#f
                             ($fx=?
                               (g$least-fixnum$21655$1LXXoO)
                               g$x1$22998$1LXXoO))
                           '#f)
                       (g$overflow-error$21764$1LXXoO
                         'fxdiv0
                         g$x1$22998$1LXXoO
                         g$x2$22999$1LXXoO)
                       (void))
                     ((case-lambda
                        ((g$x1$23020$1LXXoO g$x2$23021$1LXXoO)
                         ($fxdiv0 g$x1$23020$1LXXoO g$x2$23021$1LXXoO)))
                      g$x1$22998$1LXXoO
                      g$x2$22999$1LXXoO))))
                g$x1$22975$1LXXoO
                g$x2$22976$1LXXoO)))))))))
   (g$residual-fxpositive?*$22009$1LXXoO
     g$residual-fxpositive?*$23919$1LXXoO
     (case-lambda ((g$r$23042$1LXXoO) ($fx<? '0 g$r$23042$1LXXoO))))
   (g$fxpositive?$22010$1LXXoO
     g$fxpositive?$23920$1LXXoO
     (case-lambda
       ((g$r$23043$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$r$23043$1LXXoO))
            (assertion-violation
              'fxpositive?
              '"not a fixnum"
              g$r$23043$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$r$23064$1LXXoO) ($fx<? '0 g$r$23064$1LXXoO)))
               g$r$23043$1LXXoO))))))))
   (g$residual-fxnegative?*$22026$1LXXoO
     g$residual-fxnegative?*$23921$1LXXoO
     (case-lambda ((g$r$23085$1LXXoO) ($fx>? '0 g$r$23085$1LXXoO))))
   (g$fxnegative?$22027$1LXXoO
     g$fxnegative?$23922$1LXXoO
     (case-lambda
       ((g$r$23086$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$r$23086$1LXXoO))
            (assertion-violation
              'fxnegative?
              '"not a fixnum"
              g$r$23086$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$r$23107$1LXXoO) ($fx>? '0 g$r$23107$1LXXoO)))
               g$r$23086$1LXXoO))))))))
   (g$residual-fxzero?*$22043$1LXXoO
     g$residual-fxzero?*$23923$1LXXoO
     (case-lambda ((g$r$23128$1LXXoO) ($fx=? '0 g$r$23128$1LXXoO))))
   (g$fxzero?$22044$1LXXoO
     g$fxzero?$23924$1LXXoO
     (case-lambda
       ((g$r$23129$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$r$23129$1LXXoO))
            (assertion-violation
              'fxzero?
              '"not a fixnum"
              g$r$23129$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$r$23150$1LXXoO) ($fx=? '0 g$r$23150$1LXXoO)))
               g$r$23129$1LXXoO))))))))
   (g$residual-fxeven?*$22060$1LXXoO
     g$residual-fxeven?*$23925$1LXXoO
     (case-lambda
       ((g$n$23171$1LXXoO) ($fx=? '0 ($fxand g$n$23171$1LXXoO '1)))))
   (g$fxeven?$22061$1LXXoO
     g$fxeven?$23926$1LXXoO
     (case-lambda
       ((g$n$23172$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$n$23172$1LXXoO))
            (assertion-violation
              'fxeven?
              '"not a fixnum"
              g$n$23172$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$n$23193$1LXXoO)
                  ($fx=? '0 ($fxand g$n$23193$1LXXoO '1))))
               g$n$23172$1LXXoO))))))))
   (g$residual-fxodd?*$22077$1LXXoO
     g$residual-fxodd?*$23927$1LXXoO
     (case-lambda
       ((g$n$23214$1LXXoO) ($fx=? '1 ($fxand g$n$23214$1LXXoO '1)))))
   (g$fxodd?$22078$1LXXoO
     g$fxodd?$23928$1LXXoO
     (case-lambda
       ((g$n$23215$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$n$23215$1LXXoO))
            (assertion-violation
              'fxodd?
              '"not a fixnum"
              g$n$23215$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$n$23236$1LXXoO)
                  ($fx=? '1 ($fxand g$n$23236$1LXXoO '1))))
               g$n$23215$1LXXoO))))))))
   (g$fxmax$22079$1LXXoO
     g$fxmax$23929$1LXXoO
     (case-lambda
       ((g$a$23237$1LXXoO . g$rest$23238$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$a$23237$1LXXoO))
            (assertion-violation
              'fxmax
              '"not a fixnum"
              g$a$23237$1LXXoO)
            (void))
          (g$fold-left$19228$1LXXoO
            (case-lambda
              ((g$a$23239$1LXXoO g$b$23240$1LXXoO)
               (if (g$fx<?$21870$1LXXoO
                     g$a$23239$1LXXoO
                     g$b$23240$1LXXoO)
                 g$b$23240$1LXXoO
                 g$a$23239$1LXXoO)))
            g$a$23237$1LXXoO
            g$rest$23238$1LXXoO)))))
   (g$fxmin$22080$1LXXoO
     g$fxmin$23930$1LXXoO
     (case-lambda
       ((g$a$23241$1LXXoO . g$rest$23242$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$a$23241$1LXXoO))
            (assertion-violation
              'fxmin
              '"not a fixnum"
              g$a$23241$1LXXoO)
            (void))
          (g$fold-left$19228$1LXXoO
            (case-lambda
              ((g$a$23243$1LXXoO g$b$23244$1LXXoO)
               (if (g$fx>?$21872$1LXXoO
                     g$a$23243$1LXXoO
                     g$b$23244$1LXXoO)
                 g$b$23244$1LXXoO
                 g$a$23243$1LXXoO)))
            g$a$23241$1LXXoO
            g$rest$23242$1LXXoO)))))
   (g$fx*/carry$22081$1LXXoO
     g$fx*/carry$23931$1LXXoO
     (case-lambda
       ((g$fx1$23245$1LXXoO g$fx2$23246$1LXXoO g$fx3$23247$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$fx1$23245$1LXXoO))
            (assertion-violation
              'fx*/carry
              '"not a fixnum"
              g$fx1$23245$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx2$23246$1LXXoO))
            (assertion-violation
              'fx*/carry
              '"not a fixnum"
              g$fx2$23246$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx3$23247$1LXXoO))
            (assertion-violation
              'fx*/carry
              '"not a fixnum"
              g$fx3$23247$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$s$23248$1LXXoO g$e$23249$1LXXoO)
                  (values
                    (g$mod0$20065$1LXXoO
                      g$s$23248$1LXXoO
                      g$e$23249$1LXXoO)
                    (g$div0$20063$1LXXoO
                      g$s$23248$1LXXoO
                      g$e$23249$1LXXoO))))
               (+ (* g$fx1$23245$1LXXoO g$fx2$23246$1LXXoO)
                  g$fx3$23247$1LXXoO)
               (expt '2 (g$fixnum-width$20062$1LXXoO))))))))))
   (g$fx-/carry$22082$1LXXoO
     g$fx-/carry$23932$1LXXoO
     (case-lambda
       ((g$fx1$23250$1LXXoO g$fx2$23251$1LXXoO g$fx3$23252$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$fx1$23250$1LXXoO))
            (assertion-violation
              'fx-/carry
              '"not a fixnum"
              g$fx1$23250$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx2$23251$1LXXoO))
            (assertion-violation
              'fx-/carry
              '"not a fixnum"
              g$fx2$23251$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx3$23252$1LXXoO))
            (assertion-violation
              'fx-/carry
              '"not a fixnum"
              g$fx3$23252$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$s$23253$1LXXoO g$e$23254$1LXXoO)
                  (values
                    (g$mod0$20065$1LXXoO
                      g$s$23253$1LXXoO
                      g$e$23254$1LXXoO)
                    (g$div0$20063$1LXXoO
                      g$s$23253$1LXXoO
                      g$e$23254$1LXXoO))))
               (- g$fx1$23250$1LXXoO
                  g$fx2$23251$1LXXoO
                  g$fx3$23252$1LXXoO)
               (expt '2 (g$fixnum-width$20062$1LXXoO))))))))))
   (g$fx+/carry$22083$1LXXoO
     g$fx+/carry$23933$1LXXoO
     (case-lambda
       ((g$fx1$23255$1LXXoO g$fx2$23256$1LXXoO g$fx3$23257$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$fx1$23255$1LXXoO))
            (assertion-violation
              'fx+/carry
              '"not a fixnum"
              g$fx1$23255$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx2$23256$1LXXoO))
            (assertion-violation
              'fx+/carry
              '"not a fixnum"
              g$fx2$23256$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx3$23257$1LXXoO))
            (assertion-violation
              'fx+/carry
              '"not a fixnum"
              g$fx3$23257$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$s$23258$1LXXoO g$e$23259$1LXXoO)
                  (values
                    (g$mod0$20065$1LXXoO
                      g$s$23258$1LXXoO
                      g$e$23259$1LXXoO)
                    (g$div0$20063$1LXXoO
                      g$s$23258$1LXXoO
                      g$e$23259$1LXXoO))))
               (+ g$fx1$23255$1LXXoO
                  g$fx2$23256$1LXXoO
                  g$fx3$23257$1LXXoO)
               (expt '2 (g$fixnum-width$20062$1LXXoO))))))))))
   (g$residual-fxif*$22099$1LXXoO
     g$residual-fxif*$23934$1LXXoO
     (case-lambda
       ((g$fx1$23280$1LXXoO g$fx2$23281$1LXXoO g$fx3$23282$1LXXoO)
        ($fxior
          ($fxand g$fx1$23280$1LXXoO g$fx2$23281$1LXXoO)
          ($fxand ($fxnot g$fx1$23280$1LXXoO) g$fx3$23282$1LXXoO)))))
   (g$fxif$22100$1LXXoO
     g$fxif$23935$1LXXoO
     (case-lambda
       ((g$fx1$23283$1LXXoO g$fx2$23284$1LXXoO g$fx3$23285$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$fx1$23283$1LXXoO))
            (assertion-violation
              'fxif
              '"not a fixnum"
              g$fx1$23283$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx2$23284$1LXXoO))
            (assertion-violation
              'fxif
              '"not a fixnum"
              g$fx2$23284$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx3$23285$1LXXoO))
            (assertion-violation
              'fxif
              '"not a fixnum"
              g$fx3$23285$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$fx1$23306$1LXXoO
                    g$fx2$23307$1LXXoO
                    g$fx3$23308$1LXXoO)
                  ($fxior
                    ($fxand g$fx1$23306$1LXXoO g$fx2$23307$1LXXoO)
                    ($fxand
                      ($fxnot g$fx1$23306$1LXXoO)
                      g$fx3$23308$1LXXoO))))
               g$fx1$23283$1LXXoO
               g$fx2$23284$1LXXoO
               g$fx3$23285$1LXXoO))))))))
   (g$residual-fxcopy-bit*$22116$1LXXoO
     g$residual-fxcopy-bit*$23936$1LXXoO
     (case-lambda
       ((g$fx1$23329$1LXXoO g$fx2$23330$1LXXoO g$fx3$23331$1LXXoO)
        ((case-lambda
           ((g$fx1$23352$1LXXoO g$fx2$23353$1LXXoO g$fx3$23354$1LXXoO)
            ($fxior
              ($fxand g$fx1$23352$1LXXoO g$fx2$23353$1LXXoO)
              ($fxand ($fxnot g$fx1$23352$1LXXoO) g$fx3$23354$1LXXoO))))
         ($fxarithmetic-shift-left '1 g$fx2$23330$1LXXoO)
         ($fxarithmetic-shift-left
           g$fx3$23331$1LXXoO
           g$fx2$23330$1LXXoO)
         g$fx1$23329$1LXXoO))))
   (g$fxcopy-bit$22117$1LXXoO
     g$fxcopy-bit$23937$1LXXoO
     (case-lambda
       ((g$fx1$23355$1LXXoO g$fx2$23356$1LXXoO g$fx3$23357$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$fx1$23355$1LXXoO))
            (assertion-violation
              'fxcopy-bit
              '"not a fixnum"
              g$fx1$23355$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx2$23356$1LXXoO))
            (assertion-violation
              'fxcopy-bit
              '"not a fixnum"
              g$fx2$23356$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx3$23357$1LXXoO))
            (assertion-violation
              'fxcopy-bit
              '"not a fixnum"
              g$fx3$23357$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$fx1$23378$1LXXoO
                    g$fx2$23379$1LXXoO
                    g$fx3$23380$1LXXoO)
                  ((case-lambda
                     ((g$fx1$23401$1LXXoO
                        g$fx2$23402$1LXXoO
                        g$fx3$23403$1LXXoO)
                      ($fxior
                        ($fxand g$fx1$23401$1LXXoO g$fx2$23402$1LXXoO)
                        ($fxand
                          ($fxnot g$fx1$23401$1LXXoO)
                          g$fx3$23403$1LXXoO))))
                   ($fxarithmetic-shift-left '1 g$fx2$23379$1LXXoO)
                   ($fxarithmetic-shift-left
                     g$fx3$23380$1LXXoO
                     g$fx2$23379$1LXXoO)
                   g$fx1$23378$1LXXoO)))
               g$fx1$23355$1LXXoO
               g$fx2$23356$1LXXoO
               g$fx3$23357$1LXXoO))))))))
   (g$residual-fxbit-field*$22133$1LXXoO
     g$residual-fxbit-field*$23938$1LXXoO
     (case-lambda
       ((g$fx1$23424$1LXXoO g$fx2$23425$1LXXoO g$fx3$23426$1LXXoO)
        ($fxarithmetic-shift-right
          ($fxand
            g$fx1$23424$1LXXoO
            ($fxnot ($fxarithmetic-shift-left '-1 g$fx3$23426$1LXXoO)))
          g$fx2$23425$1LXXoO))))
   (g$fxbit-field$22134$1LXXoO
     g$fxbit-field$23939$1LXXoO
     (case-lambda
       ((g$fx1$23427$1LXXoO g$fx2$23428$1LXXoO g$fx3$23429$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$fx1$23427$1LXXoO))
            (assertion-violation
              'fxbit-field
              '"not a fixnum"
              g$fx1$23427$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx2$23428$1LXXoO))
            (assertion-violation
              'fxbit-field
              '"not a fixnum"
              g$fx2$23428$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx3$23429$1LXXoO))
            (assertion-violation
              'fxbit-field
              '"not a fixnum"
              g$fx3$23429$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$fx1$23450$1LXXoO
                    g$fx2$23451$1LXXoO
                    g$fx3$23452$1LXXoO)
                  ($fxarithmetic-shift-right
                    ($fxand
                      g$fx1$23450$1LXXoO
                      ($fxnot
                        ($fxarithmetic-shift-left
                          '-1
                          g$fx3$23452$1LXXoO)))
                    g$fx2$23451$1LXXoO)))
               g$fx1$23427$1LXXoO
               g$fx2$23428$1LXXoO
               g$fx3$23429$1LXXoO))))))))
   (g$residual-fxcopy-bit-field*$22150$1LXXoO
     g$residual-fxcopy-bit-field*$23940$1LXXoO
     (case-lambda
       ((g$to$23473$1LXXoO
          g$start$23474$1LXXoO
          g$end$23475$1LXXoO
          g$from$23476$1LXXoO)
        ((case-lambda
           ((g$fx1$23497$1LXXoO g$fx2$23498$1LXXoO g$fx3$23499$1LXXoO)
            ($fxior
              ($fxand g$fx1$23497$1LXXoO g$fx2$23498$1LXXoO)
              ($fxand ($fxnot g$fx1$23497$1LXXoO) g$fx3$23499$1LXXoO))))
         ($fxand
           ($fxarithmetic-shift-left '-1 g$start$23474$1LXXoO)
           ($fxnot ($fxarithmetic-shift-left '-1 g$end$23475$1LXXoO)))
         ($fxarithmetic-shift-left
           g$from$23476$1LXXoO
           g$start$23474$1LXXoO)
         g$to$23473$1LXXoO))))
   (g$fxcopy-bit-field$22151$1LXXoO
     g$fxcopy-bit-field$23941$1LXXoO
     (case-lambda
       ((g$to$23500$1LXXoO
          g$start$23501$1LXXoO
          g$end$23502$1LXXoO
          g$from$23503$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$to$23500$1LXXoO))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$to$23500$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$start$23501$1LXXoO))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$start$23501$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$end$23502$1LXXoO))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$end$23502$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$from$23503$1LXXoO))
            (assertion-violation
              'fxcopy-bit-field
              '"not a fixnum"
              g$from$23503$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$to$23524$1LXXoO
                    g$start$23525$1LXXoO
                    g$end$23526$1LXXoO
                    g$from$23527$1LXXoO)
                  ((case-lambda
                     ((g$fx1$23548$1LXXoO
                        g$fx2$23549$1LXXoO
                        g$fx3$23550$1LXXoO)
                      ($fxior
                        ($fxand g$fx1$23548$1LXXoO g$fx2$23549$1LXXoO)
                        ($fxand
                          ($fxnot g$fx1$23548$1LXXoO)
                          g$fx3$23550$1LXXoO))))
                   ($fxand
                     ($fxarithmetic-shift-left '-1 g$start$23525$1LXXoO)
                     ($fxnot
                       ($fxarithmetic-shift-left
                         '-1
                         g$end$23526$1LXXoO)))
                   ($fxarithmetic-shift-left
                     g$from$23527$1LXXoO
                     g$start$23525$1LXXoO)
                   g$to$23524$1LXXoO)))
               g$to$23500$1LXXoO
               g$start$23501$1LXXoO
               g$end$23502$1LXXoO
               g$from$23503$1LXXoO))))))))
   (g$fxarithmetic-shift-left$22152$1LXXoO
     g$fxarithmetic-shift-left$23942$1LXXoO
     (case-lambda
       ((g$fx1$23551$1LXXoO g$fx2$23552$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$fx1$23551$1LXXoO))
            (assertion-violation
              'fxarithmetic-shift-left
              '"not a fixnum"
              g$fx1$23551$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx2$23552$1LXXoO))
            (assertion-violation
              'fxarithmetic-shift-left
              '"not a fixnum"
              g$fx2$23552$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x$23573$1LXXoO g$k$23574$1LXXoO)
                  (if ($fx=? g$k$23574$1LXXoO '0)
                    g$x$23573$1LXXoO
                    (if ($fx<? g$k$23574$1LXXoO '0)
                      ($fxarithmetic-shift-right
                        g$x$23573$1LXXoO
                        ($$fx- g$k$23574$1LXXoO))
                      (begin
                        '#f
                        ((case-lambda
                           ((g$i$23575$1LXXoO)
                            (begin
                              (if ($fx>?
                                    (clr-call-internal
                                      'System.Math
                                      '"abs(int32)"
                                      '()
                                      g$x$23573$1LXXoO)
                                    (clr-call-internal
                                      'System.Math
                                      '"abs(int32)"
                                      '()
                                      g$i$23575$1LXXoO))
                                (g$overflow-error$21764$1LXXoO
                                  'fxarithmetic-shift
                                  g$x$23573$1LXXoO
                                  g$k$23574$1LXXoO)
                                (void))
                              g$i$23575$1LXXoO)))
                         ($fxarithmetic-shift-left
                           g$x$23573$1LXXoO
                           g$k$23574$1LXXoO)))))))
               g$fx1$23551$1LXXoO
               g$fx2$23552$1LXXoO))))))))
   (g$fxarithmetic-shift-right$22153$1LXXoO
     g$fxarithmetic-shift-right$23943$1LXXoO
     (case-lambda
       ((g$fx1$23576$1LXXoO g$fx2$23577$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$fx1$23576$1LXXoO))
            (assertion-violation
              'fxarithmetic-shift-right
              '"not a fixnum"
              g$fx1$23576$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$fx2$23577$1LXXoO))
            (assertion-violation
              'fxarithmetic-shift-right
              '"not a fixnum"
              g$fx2$23577$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x$23598$1LXXoO g$k$23599$1LXXoO)
                  (if ($fx=? g$k$23599$1LXXoO '0)
                    g$x$23598$1LXXoO
                    (if ($fx<? g$k$23599$1LXXoO '0)
                      ($fxarithmetic-shift-right
                        g$x$23598$1LXXoO
                        ($$fx- g$k$23599$1LXXoO))
                      (begin
                        '#f
                        ((case-lambda
                           ((g$i$23600$1LXXoO)
                            (begin
                              (if ($fx>?
                                    (clr-call-internal
                                      'System.Math
                                      '"abs(int32)"
                                      '()
                                      g$x$23598$1LXXoO)
                                    (clr-call-internal
                                      'System.Math
                                      '"abs(int32)"
                                      '()
                                      g$i$23600$1LXXoO))
                                (g$overflow-error$21764$1LXXoO
                                  'fxarithmetic-shift
                                  g$x$23598$1LXXoO
                                  g$k$23599$1LXXoO)
                                (void))
                              g$i$23600$1LXXoO)))
                         ($fxarithmetic-shift-left
                           g$x$23598$1LXXoO
                           g$k$23599$1LXXoO)))))))
               g$fx1$23576$1LXXoO
               ($$fx- g$fx2$23577$1LXXoO)))))))))
   (g$fxrotate-bit-field$22154$1LXXoO
     g$fxrotate-bit-field$23944$1LXXoO
     (case-lambda
       ((g$n$23601$1LXXoO
          g$start$23602$1LXXoO
          g$end$23603$1LXXoO
          g$count$23604$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$n$23601$1LXXoO))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$n$23601$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$start$23602$1LXXoO))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$start$23602$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$end$23603$1LXXoO))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$end$23603$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$count$23604$1LXXoO))
            (assertion-violation
              'fxrotate-bit-field
              '"not a fixnum"
              g$count$23604$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$width$23605$1LXXoO)
                  (if ((case-lambda
                         ((g$r$23626$1LXXoO)
                          ($fx<? '0 g$r$23626$1LXXoO)))
                       g$width$23605$1LXXoO)
                    ((case-lambda
                       ((g$count$23627$1LXXoO g$field$23628$1LXXoO)
                        ((case-lambda
                           ((g$to$23649$1LXXoO
                              g$start$23650$1LXXoO
                              g$end$23651$1LXXoO
                              g$from$23652$1LXXoO)
                            ((case-lambda
                               ((g$fx1$23673$1LXXoO
                                  g$fx2$23674$1LXXoO
                                  g$fx3$23675$1LXXoO)
                                ($fxior
                                  ($fxand
                                    g$fx1$23673$1LXXoO
                                    g$fx2$23674$1LXXoO)
                                  ($fxand
                                    ($fxnot g$fx1$23673$1LXXoO)
                                    g$fx3$23675$1LXXoO))))
                             ($fxand
                               ($fxarithmetic-shift-left
                                 '-1
                                 g$start$23650$1LXXoO)
                               ($fxnot
                                 ($fxarithmetic-shift-left
                                   '-1
                                   g$end$23651$1LXXoO)))
                             ($fxarithmetic-shift-left
                               g$from$23652$1LXXoO
                               g$start$23650$1LXXoO)
                             g$to$23649$1LXXoO)))
                         g$n$23601$1LXXoO
                         g$start$23602$1LXXoO
                         g$end$23603$1LXXoO
                         ($fxior
                           ($fxarithmetic-shift-left
                             g$field$23628$1LXXoO
                             g$count$23627$1LXXoO)
                           ($fxarithmetic-shift-right
                             g$field$23628$1LXXoO
                             ($$fx-
                               g$width$23605$1LXXoO
                               g$count$23627$1LXXoO))))))
                     ((case-lambda
                        ((g$x1$23696$1LXXoO g$x2$23697$1LXXoO)
                         ($$fx-
                           g$x1$23696$1LXXoO
                           ($$fx*
                             ((case-lambda
                                ((g$x1$23718$1LXXoO g$x2$23719$1LXXoO)
                                 (begin
                                   (if ($fx=? '0 g$x2$23719$1LXXoO)
                                     (assertion-violation
                                       'fxdiv
                                       '"divide by zero"
                                       g$x1$23718$1LXXoO
                                       g$x2$23719$1LXXoO)
                                     (void))
                                   (if (if ($fx=? '-1 g$x2$23719$1LXXoO)
                                         (begin
                                           '#f
                                           ($fx=?
                                             (g$least-fixnum$21655$1LXXoO)
                                             g$x1$23718$1LXXoO))
                                         '#f)
                                     (g$overflow-error$21764$1LXXoO
                                       'fxdiv
                                       g$x1$23718$1LXXoO
                                       g$x2$23719$1LXXoO)
                                     (void))
                                   (if ($fx=? '0 g$x1$23718$1LXXoO)
                                     '0
                                     (if ($fx<? '0 g$x1$23718$1LXXoO)
                                       ((case-lambda
                                          ((g$x1$23740$1LXXoO
                                             g$x2$23741$1LXXoO)
                                           ($fxdiv0
                                             g$x1$23740$1LXXoO
                                             g$x2$23741$1LXXoO)))
                                        g$x1$23718$1LXXoO
                                        g$x2$23719$1LXXoO)
                                       (if ($fx<? '0 g$x2$23719$1LXXoO)
                                         ((case-lambda
                                            ((g$x1$23762$1LXXoO
                                               g$x2$23763$1LXXoO)
                                             ($fxdiv0
                                               g$x1$23762$1LXXoO
                                               g$x2$23763$1LXXoO)))
                                          ($$fx-
                                            g$x1$23718$1LXXoO
                                            ($$fx-
                                              g$x2$23719$1LXXoO
                                              '1))
                                          g$x2$23719$1LXXoO)
                                         (begin
                                           '#f
                                           ((case-lambda
                                              ((g$x1$23784$1LXXoO
                                                 g$x2$23785$1LXXoO)
                                               ($fxdiv0
                                                 g$x1$23784$1LXXoO
                                                 g$x2$23785$1LXXoO)))
                                            ($$fx+
                                              g$x1$23718$1LXXoO
                                              ($$fx+
                                                g$x2$23719$1LXXoO
                                                '1))
                                            g$x2$23719$1LXXoO))))))))
                              g$x1$23696$1LXXoO
                              g$x2$23697$1LXXoO)
                             g$x2$23697$1LXXoO))))
                      g$count$23604$1LXXoO
                      g$width$23605$1LXXoO)
                     ((case-lambda
                        ((g$fx1$23806$1LXXoO
                           g$fx2$23807$1LXXoO
                           g$fx3$23808$1LXXoO)
                         ($fxarithmetic-shift-right
                           ($fxand
                             g$fx1$23806$1LXXoO
                             ($fxnot
                               ($fxarithmetic-shift-left
                                 '-1
                                 g$fx3$23808$1LXXoO)))
                           g$fx2$23807$1LXXoO)))
                      g$n$23601$1LXXoO
                      g$start$23602$1LXXoO
                      g$end$23603$1LXXoO))
                    g$n$23601$1LXXoO)))
               ($$fx- g$end$23603$1LXXoO g$start$23602$1LXXoO)))))))))
   (g$fxreverse-bit-field$22155$1LXXoO
     g$fxreverse-bit-field$23945$1LXXoO
     (case-lambda
       ((g$x1$23809$1LXXoO g$start$23810$1LXXoO g$end$23811$1LXXoO)
        (begin
          (if (not (g$fixnum?$20060$1LXXoO g$x1$23809$1LXXoO))
            (assertion-violation
              'fxreverse-bit-field
              '"not a fixnum"
              g$x1$23809$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$start$23810$1LXXoO))
            (assertion-violation
              'fxreverse-bit-field
              '"not a fixnum"
              g$start$23810$1LXXoO)
            (void))
          (if (not (g$fixnum?$20060$1LXXoO g$end$23811$1LXXoO))
            (assertion-violation
              'fxreverse-bit-field
              '"not a fixnum"
              g$end$23811$1LXXoO)
            (void))
          ((case-lambda
             (()
              (begin
                (if (not ($fx<=?
                           g$start$23810$1LXXoO
                           g$end$23811$1LXXoO))
                  (assertion-violation
                    'fxreverse-bit-field
                    '"start must be less than end"
                    g$start$23810$1LXXoO
                    g$end$23811$1LXXoO)
                  (void))
                (letrec ((g$loop$23812$1LXXoO
                           (case-lambda
                             ((g$width$23836$1LXXoO
                                g$bits$23837$1LXXoO
                                g$rbits$23838$1LXXoO)
                              (if ($fx=? g$width$23836$1LXXoO '0)
                                (begin
                                  (if '#f '#f (void))
                                  ((case-lambda
                                     ((g$to$23859$1LXXoO
                                        g$start$23860$1LXXoO
                                        g$end$23861$1LXXoO
                                        g$from$23862$1LXXoO)
                                      ((case-lambda
                                         ((g$fx1$23883$1LXXoO
                                            g$fx2$23884$1LXXoO
                                            g$fx3$23885$1LXXoO)
                                          ($fxior
                                            ($fxand
                                              g$fx1$23883$1LXXoO
                                              g$fx2$23884$1LXXoO)
                                            ($fxand
                                              ($fxnot
                                                g$fx1$23883$1LXXoO)
                                              g$fx3$23885$1LXXoO))))
                                       ($fxand
                                         ($fxarithmetic-shift-left
                                           '-1
                                           g$start$23860$1LXXoO)
                                         ($fxnot
                                           ($fxarithmetic-shift-left
                                             '-1
                                             g$end$23861$1LXXoO)))
                                       ($fxarithmetic-shift-left
                                         g$from$23862$1LXXoO
                                         g$start$23860$1LXXoO)
                                       g$to$23859$1LXXoO)))
                                   g$x1$23809$1LXXoO
                                   g$start$23810$1LXXoO
                                   g$end$23811$1LXXoO
                                   g$rbits$23838$1LXXoO))
                                (g$loop$23812$1LXXoO
                                  ($$fx- g$width$23836$1LXXoO '1)
                                  ($fxarithmetic-shift-right
                                    g$bits$23837$1LXXoO
                                    '1)
                                  ($fxior
                                    ($fxarithmetic-shift-left
                                      g$rbits$23838$1LXXoO
                                      '1)
                                    ($fxand
                                      g$bits$23837$1LXXoO
                                      '1))))))))
                  (g$loop$23812$1LXXoO
                    ($$fx- g$end$23811$1LXXoO g$start$23810$1LXXoO)
                    ((case-lambda
                       ((g$fx1$23833$1LXXoO
                          g$fx2$23834$1LXXoO
                          g$fx3$23835$1LXXoO)
                        ($fxarithmetic-shift-right
                          ($fxand
                            g$fx1$23833$1LXXoO
                            ($fxnot
                              ($fxarithmetic-shift-left
                                '-1
                                g$fx3$23835$1LXXoO)))
                          g$fx2$23834$1LXXoO)))
                     g$x1$23809$1LXXoO
                     g$start$23810$1LXXoO
                     g$end$23811$1LXXoO)
                    '0)))))))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$fl+$24124$1LXXoO
     g$fl+$25433$1LXXoO
     (case-lambda
       (() '0.0)
       ((g$x1$24245$1LXXoO g$x2$24246$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24245$1LXXoO))
            (assertion-violation 'fl+ '"not a flonum" g$x1$24245$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24246$1LXXoO))
            (assertion-violation 'fl+ '"not a flonum" g$x2$24246$1LXXoO)
            (void))
          ($fl+ g$x1$24245$1LXXoO g$x2$24246$1LXXoO)))
       (g$args$24247$1LXXoO
        (g$fold-left$19228$1LXXoO
          g$fl+$24124$1LXXoO
          (g$fl+$24124$1LXXoO)
          g$args$24247$1LXXoO))))
   (g$fl*$24125$1LXXoO
     g$fl*$25434$1LXXoO
     (case-lambda
       (() '1.0)
       ((g$x1$24248$1LXXoO g$x2$24249$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24248$1LXXoO))
            (assertion-violation 'fl* '"not a flonum" g$x1$24248$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24249$1LXXoO))
            (assertion-violation 'fl* '"not a flonum" g$x2$24249$1LXXoO)
            (void))
          ($fl* g$x1$24248$1LXXoO g$x2$24249$1LXXoO)))
       (g$args$24250$1LXXoO
        (g$fold-left$19228$1LXXoO
          g$fl*$24125$1LXXoO
          (g$fl*$24125$1LXXoO)
          g$args$24250$1LXXoO))))
   (g$fl-$24126$1LXXoO
     g$fl-$25435$1LXXoO
     (case-lambda
       ((g$x1$24251$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24251$1LXXoO))
            (assertion-violation 'fl- '"not a flonum" g$x1$24251$1LXXoO)
            (void))
          ($fl- g$x1$24251$1LXXoO)))
       ((g$x1$24252$1LXXoO g$x2$24253$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24252$1LXXoO))
            (assertion-violation 'fl- '"not a flonum" g$x1$24252$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24253$1LXXoO))
            (assertion-violation 'fl- '"not a flonum" g$x2$24253$1LXXoO)
            (void))
          ($fl- g$x1$24252$1LXXoO g$x2$24253$1LXXoO)))
       ((g$x1$24254$1LXXoO g$x2$24255$1LXXoO . g$rest$24256$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24254$1LXXoO))
            (assertion-violation 'fl- '"not a flonum" g$x1$24254$1LXXoO)
            (void))
          (g$fold-left$19228$1LXXoO
            g$fl-$24126$1LXXoO
            g$x1$24254$1LXXoO
            (cons g$x2$24255$1LXXoO g$rest$24256$1LXXoO))))))
   (g$fl/$24127$1LXXoO
     g$fl/$25436$1LXXoO
     (case-lambda
       ((g$x1$24257$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24257$1LXXoO))
            (assertion-violation 'fl/ '"not a flonum" g$x1$24257$1LXXoO)
            (void))
          ($fl/ '1.0 g$x1$24257$1LXXoO)))
       ((g$x1$24258$1LXXoO g$x2$24259$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24258$1LXXoO))
            (assertion-violation 'fl/ '"not a flonum" g$x1$24258$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24259$1LXXoO))
            (assertion-violation 'fl/ '"not a flonum" g$x2$24259$1LXXoO)
            (void))
          ($fl/ g$x1$24258$1LXXoO g$x2$24259$1LXXoO)))
       ((g$x1$24260$1LXXoO g$x2$24261$1LXXoO . g$rest$24262$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24260$1LXXoO))
            (assertion-violation 'fl/ '"not a flonum" g$x1$24260$1LXXoO)
            (void))
          (g$fold-left$19228$1LXXoO
            g$fl/$24127$1LXXoO
            g$x1$24260$1LXXoO
            (cons g$x2$24261$1LXXoO g$rest$24262$1LXXoO))))))
   (g$fl=?$24128$1LXXoO
     g$fl=?$25437$1LXXoO
     (case-lambda
       ((g$x1$24263$1LXXoO g$x2$24264$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24263$1LXXoO))
            (assertion-violation
              'fl=?
              '"not a flonum"
              g$x1$24263$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24264$1LXXoO))
            (assertion-violation
              'fl=?
              '"not a flonum"
              g$x2$24264$1LXXoO)
            (void))
          ($fl=? g$x1$24263$1LXXoO g$x2$24264$1LXXoO)))
       ((g$x1$24265$1LXXoO g$x2$24266$1LXXoO . g$rest$24267$1LXXoO)
        ((letrec ((g$f$24268$1LXXoO
                    (case-lambda
                      ((g$a$24269$1LXXoO g$b$24270$1LXXoO)
                       (if (null? g$b$24270$1LXXoO)
                         '#t
                         (if (g$fl=?$24128$1LXXoO
                               g$a$24269$1LXXoO
                               ($car g$b$24270$1LXXoO))
                           (g$f$24268$1LXXoO
                             ($car g$b$24270$1LXXoO)
                             ($cdr g$b$24270$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$24268$1LXXoO)
         g$x1$24265$1LXXoO
         (cons g$x2$24266$1LXXoO g$rest$24267$1LXXoO)))))
   (g$fl<?$24129$1LXXoO
     g$fl<?$25438$1LXXoO
     (case-lambda
       ((g$x1$24271$1LXXoO g$x2$24272$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24271$1LXXoO))
            (assertion-violation
              'fl<?
              '"not a flonum"
              g$x1$24271$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24272$1LXXoO))
            (assertion-violation
              'fl<?
              '"not a flonum"
              g$x2$24272$1LXXoO)
            (void))
          ($fl<? g$x1$24271$1LXXoO g$x2$24272$1LXXoO)))
       ((g$x1$24273$1LXXoO g$x2$24274$1LXXoO . g$rest$24275$1LXXoO)
        ((letrec ((g$f$24276$1LXXoO
                    (case-lambda
                      ((g$a$24277$1LXXoO g$b$24278$1LXXoO)
                       (if (null? g$b$24278$1LXXoO)
                         '#t
                         (if (g$fl<?$24129$1LXXoO
                               g$a$24277$1LXXoO
                               ($car g$b$24278$1LXXoO))
                           (g$f$24276$1LXXoO
                             ($car g$b$24278$1LXXoO)
                             ($cdr g$b$24278$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$24276$1LXXoO)
         g$x1$24273$1LXXoO
         (cons g$x2$24274$1LXXoO g$rest$24275$1LXXoO)))))
   (g$fl<=?$24130$1LXXoO
     g$fl<=?$25439$1LXXoO
     (case-lambda
       ((g$x1$24279$1LXXoO g$x2$24280$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24279$1LXXoO))
            (assertion-violation
              'fl<=?
              '"not a flonum"
              g$x1$24279$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24280$1LXXoO))
            (assertion-violation
              'fl<=?
              '"not a flonum"
              g$x2$24280$1LXXoO)
            (void))
          ($fl<=? g$x1$24279$1LXXoO g$x2$24280$1LXXoO)))
       ((g$x1$24281$1LXXoO g$x2$24282$1LXXoO . g$rest$24283$1LXXoO)
        ((letrec ((g$f$24284$1LXXoO
                    (case-lambda
                      ((g$a$24285$1LXXoO g$b$24286$1LXXoO)
                       (if (null? g$b$24286$1LXXoO)
                         '#t
                         (if (g$fl<=?$24130$1LXXoO
                               g$a$24285$1LXXoO
                               ($car g$b$24286$1LXXoO))
                           (g$f$24284$1LXXoO
                             ($car g$b$24286$1LXXoO)
                             ($cdr g$b$24286$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$24284$1LXXoO)
         g$x1$24281$1LXXoO
         (cons g$x2$24282$1LXXoO g$rest$24283$1LXXoO)))))
   (g$fl>?$24131$1LXXoO
     g$fl>?$25440$1LXXoO
     (case-lambda
       ((g$x1$24287$1LXXoO g$x2$24288$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24287$1LXXoO))
            (assertion-violation
              'fl>?
              '"not a flonum"
              g$x1$24287$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24288$1LXXoO))
            (assertion-violation
              'fl>?
              '"not a flonum"
              g$x2$24288$1LXXoO)
            (void))
          ($fl>? g$x1$24287$1LXXoO g$x2$24288$1LXXoO)))
       ((g$x1$24289$1LXXoO g$x2$24290$1LXXoO . g$rest$24291$1LXXoO)
        ((letrec ((g$f$24292$1LXXoO
                    (case-lambda
                      ((g$a$24293$1LXXoO g$b$24294$1LXXoO)
                       (if (null? g$b$24294$1LXXoO)
                         '#t
                         (if (g$fl>?$24131$1LXXoO
                               g$a$24293$1LXXoO
                               ($car g$b$24294$1LXXoO))
                           (g$f$24292$1LXXoO
                             ($car g$b$24294$1LXXoO)
                             ($cdr g$b$24294$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$24292$1LXXoO)
         g$x1$24289$1LXXoO
         (cons g$x2$24290$1LXXoO g$rest$24291$1LXXoO)))))
   (g$fl>=?$24132$1LXXoO
     g$fl>=?$25441$1LXXoO
     (case-lambda
       ((g$x1$24295$1LXXoO g$x2$24296$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24295$1LXXoO))
            (assertion-violation
              'fl>=?
              '"not a flonum"
              g$x1$24295$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24296$1LXXoO))
            (assertion-violation
              'fl>=?
              '"not a flonum"
              g$x2$24296$1LXXoO)
            (void))
          ($fl>=? g$x1$24295$1LXXoO g$x2$24296$1LXXoO)))
       ((g$x1$24297$1LXXoO g$x2$24298$1LXXoO . g$rest$24299$1LXXoO)
        ((letrec ((g$f$24300$1LXXoO
                    (case-lambda
                      ((g$a$24301$1LXXoO g$b$24302$1LXXoO)
                       (if (null? g$b$24302$1LXXoO)
                         '#t
                         (if (g$fl>=?$24132$1LXXoO
                               g$a$24301$1LXXoO
                               ($car g$b$24302$1LXXoO))
                           (g$f$24300$1LXXoO
                             ($car g$b$24302$1LXXoO)
                             ($cdr g$b$24302$1LXXoO))
                           (begin '#f '#f)))))))
           g$f$24300$1LXXoO)
         g$x1$24297$1LXXoO
         (cons g$x2$24298$1LXXoO g$rest$24299$1LXXoO)))))
   (g$residual-fldiv0*$24148$1LXXoO
     g$residual-fldiv0*$25442$1LXXoO
     (case-lambda
       ((g$x1$24323$1LXXoO g$x2$24324$1LXXoO)
        ((case-lambda
           ((g$d$24325$1LXXoO)
            ((case-lambda
               ((g$m$24326$1LXXoO)
                (if ($fl<?
                      g$m$24326$1LXXoO
                      (g$magnitude$20722$1LXXoO
                        ($fl/ g$x2$24324$1LXXoO '2.0)))
                  g$d$24325$1LXXoO
                  (if ($fl<? '0.0 g$x2$24324$1LXXoO)
                    ($fl+ g$d$24325$1LXXoO '1.0)
                    (begin '#f ($fl- g$d$24325$1LXXoO '1.0))))))
             ($fl-
               g$x1$24323$1LXXoO
               ($fl* g$d$24325$1LXXoO g$x2$24324$1LXXoO)))))
         ((case-lambda
            ((g$x1$24347$1LXXoO g$x2$24348$1LXXoO)
             (if ($fl<? '0.0 g$x2$24348$1LXXoO)
               ((case-lambda
                  ((g$fl$24369$1LXXoO)
                   (clr-call-internal
                     'system.math
                     '"floor(double)"
                     '()
                     g$fl$24369$1LXXoO)))
                ($fl/ g$x1$24347$1LXXoO g$x2$24348$1LXXoO))
               ($fl-
                 ((case-lambda
                    ((g$fl$24390$1LXXoO)
                     (clr-call-internal
                       'system.math
                       '"floor(double)"
                       '()
                       g$fl$24390$1LXXoO)))
                  ($fl/ g$x1$24347$1LXXoO ($fl- g$x2$24348$1LXXoO)))))))
          g$x1$24323$1LXXoO
          g$x2$24324$1LXXoO)))))
   (g$fldiv0$24149$1LXXoO
     g$fldiv0$25443$1LXXoO
     (case-lambda
       ((g$x1$24391$1LXXoO g$x2$24392$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24391$1LXXoO))
            (assertion-violation
              'fldiv0
              '"not a flonum"
              g$x1$24391$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24392$1LXXoO))
            (assertion-violation
              'fldiv0
              '"not a flonum"
              g$x2$24392$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$24413$1LXXoO g$x2$24414$1LXXoO)
                  ((case-lambda
                     ((g$d$24415$1LXXoO)
                      ((case-lambda
                         ((g$m$24416$1LXXoO)
                          (if ($fl<?
                                g$m$24416$1LXXoO
                                (g$magnitude$20722$1LXXoO
                                  ($fl/ g$x2$24414$1LXXoO '2.0)))
                            g$d$24415$1LXXoO
                            (if ($fl<? '0.0 g$x2$24414$1LXXoO)
                              ($fl+ g$d$24415$1LXXoO '1.0)
                              (begin
                                '#f
                                ($fl- g$d$24415$1LXXoO '1.0))))))
                       ($fl-
                         g$x1$24413$1LXXoO
                         ($fl* g$d$24415$1LXXoO g$x2$24414$1LXXoO)))))
                   ((case-lambda
                      ((g$x1$24437$1LXXoO g$x2$24438$1LXXoO)
                       (if ($fl<? '0.0 g$x2$24438$1LXXoO)
                         ((case-lambda
                            ((g$fl$24459$1LXXoO)
                             (clr-call-internal
                               'system.math
                               '"floor(double)"
                               '()
                               g$fl$24459$1LXXoO)))
                          ($fl/ g$x1$24437$1LXXoO g$x2$24438$1LXXoO))
                         ($fl-
                           ((case-lambda
                              ((g$fl$24480$1LXXoO)
                               (clr-call-internal
                                 'system.math
                                 '"floor(double)"
                                 '()
                                 g$fl$24480$1LXXoO)))
                            ($fl/
                              g$x1$24437$1LXXoO
                              ($fl- g$x2$24438$1LXXoO)))))))
                    g$x1$24413$1LXXoO
                    g$x2$24414$1LXXoO))))
               g$x1$24391$1LXXoO
               g$x2$24392$1LXXoO))))))))
   (g$residual-flmod*$24165$1LXXoO
     g$residual-flmod*$25444$1LXXoO
     (case-lambda
       ((g$x1$24501$1LXXoO g$x2$24502$1LXXoO)
        ($fl-
          g$x1$24501$1LXXoO
          ($fl*
            ((case-lambda
               ((g$x1$24523$1LXXoO g$x2$24524$1LXXoO)
                (if ($fl<? '0.0 g$x2$24524$1LXXoO)
                  ((case-lambda
                     ((g$fl$24545$1LXXoO)
                      (clr-call-internal
                        'system.math
                        '"floor(double)"
                        '()
                        g$fl$24545$1LXXoO)))
                   ($fl/ g$x1$24523$1LXXoO g$x2$24524$1LXXoO))
                  ($fl-
                    ((case-lambda
                       ((g$fl$24566$1LXXoO)
                        (clr-call-internal
                          'system.math
                          '"floor(double)"
                          '()
                          g$fl$24566$1LXXoO)))
                     ($fl/
                       g$x1$24523$1LXXoO
                       ($fl- g$x2$24524$1LXXoO)))))))
             g$x1$24501$1LXXoO
             g$x2$24502$1LXXoO)
            g$x2$24502$1LXXoO)))))
   (g$flmod$24166$1LXXoO
     g$flmod$25445$1LXXoO
     (case-lambda
       ((g$x1$24567$1LXXoO g$x2$24568$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24567$1LXXoO))
            (assertion-violation
              'flmod
              '"not a flonum"
              g$x1$24567$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24568$1LXXoO))
            (assertion-violation
              'flmod
              '"not a flonum"
              g$x2$24568$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$24589$1LXXoO g$x2$24590$1LXXoO)
                  ($fl-
                    g$x1$24589$1LXXoO
                    ($fl*
                      ((case-lambda
                         ((g$x1$24611$1LXXoO g$x2$24612$1LXXoO)
                          (if ($fl<? '0.0 g$x2$24612$1LXXoO)
                            ((case-lambda
                               ((g$fl$24633$1LXXoO)
                                (clr-call-internal
                                  'system.math
                                  '"floor(double)"
                                  '()
                                  g$fl$24633$1LXXoO)))
                             ($fl/ g$x1$24611$1LXXoO g$x2$24612$1LXXoO))
                            ($fl-
                              ((case-lambda
                                 ((g$fl$24654$1LXXoO)
                                  (clr-call-internal
                                    'system.math
                                    '"floor(double)"
                                    '()
                                    g$fl$24654$1LXXoO)))
                               ($fl/
                                 g$x1$24611$1LXXoO
                                 ($fl- g$x2$24612$1LXXoO)))))))
                       g$x1$24589$1LXXoO
                       g$x2$24590$1LXXoO)
                      g$x2$24590$1LXXoO))))
               g$x1$24567$1LXXoO
               g$x2$24568$1LXXoO))))))))
   (g$flmod0$24167$1LXXoO
     g$flmod0$25446$1LXXoO
     (case-lambda
       ((g$x1$24655$1LXXoO g$x2$24656$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24655$1LXXoO))
            (assertion-violation
              'flmod0
              '"not a flonum"
              g$x1$24655$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24656$1LXXoO))
            (assertion-violation
              'flmod0
              '"not a flonum"
              g$x2$24656$1LXXoO)
            (void))
          ((case-lambda
             (()
              ($fl-
                g$x1$24655$1LXXoO
                ($fl*
                  ((case-lambda
                     ((g$x1$24677$1LXXoO g$x2$24678$1LXXoO)
                      ((case-lambda
                         ((g$d$24679$1LXXoO)
                          ((case-lambda
                             ((g$m$24680$1LXXoO)
                              (if ($fl<?
                                    g$m$24680$1LXXoO
                                    (g$magnitude$20722$1LXXoO
                                      ($fl/ g$x2$24678$1LXXoO '2.0)))
                                g$d$24679$1LXXoO
                                (if ($fl<? '0.0 g$x2$24678$1LXXoO)
                                  ($fl+ g$d$24679$1LXXoO '1.0)
                                  (begin
                                    '#f
                                    ($fl- g$d$24679$1LXXoO '1.0))))))
                           ($fl-
                             g$x1$24677$1LXXoO
                             ($fl*
                               g$d$24679$1LXXoO
                               g$x2$24678$1LXXoO)))))
                       ((case-lambda
                          ((g$x1$24701$1LXXoO g$x2$24702$1LXXoO)
                           (if ($fl<? '0.0 g$x2$24702$1LXXoO)
                             ((case-lambda
                                ((g$fl$24723$1LXXoO)
                                 (clr-call-internal
                                   'system.math
                                   '"floor(double)"
                                   '()
                                   g$fl$24723$1LXXoO)))
                              ($fl/
                                g$x1$24701$1LXXoO
                                g$x2$24702$1LXXoO))
                             ($fl-
                               ((case-lambda
                                  ((g$fl$24744$1LXXoO)
                                   (clr-call-internal
                                     'system.math
                                     '"floor(double)"
                                     '()
                                     g$fl$24744$1LXXoO)))
                                ($fl/
                                  g$x1$24701$1LXXoO
                                  ($fl- g$x2$24702$1LXXoO)))))))
                        g$x1$24677$1LXXoO
                        g$x2$24678$1LXXoO))))
                   g$x1$24655$1LXXoO
                   g$x2$24656$1LXXoO)
                  g$x2$24656$1LXXoO)))))))))
   (g$fldiv-and-mod$24168$1LXXoO
     g$fldiv-and-mod$25447$1LXXoO
     (case-lambda
       ((g$x1$24745$1LXXoO g$x2$24746$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24745$1LXXoO))
            (assertion-violation
              'fldiv-and-mod
              '"not a flonum"
              g$x1$24745$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24746$1LXXoO))
            (assertion-violation
              'fldiv-and-mod
              '"not a flonum"
              g$x2$24746$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$d$24747$1LXXoO)
                  (values
                    g$d$24747$1LXXoO
                    ($fl-
                      g$x1$24745$1LXXoO
                      ($fl* g$d$24747$1LXXoO g$x2$24746$1LXXoO)))))
               ((case-lambda
                  ((g$x1$24768$1LXXoO g$x2$24769$1LXXoO)
                   (if ($fl<? '0.0 g$x2$24769$1LXXoO)
                     ((case-lambda
                        ((g$fl$24790$1LXXoO)
                         (clr-call-internal
                           'system.math
                           '"floor(double)"
                           '()
                           g$fl$24790$1LXXoO)))
                      ($fl/ g$x1$24768$1LXXoO g$x2$24769$1LXXoO))
                     ($fl-
                       ((case-lambda
                          ((g$fl$24811$1LXXoO)
                           (clr-call-internal
                             'system.math
                             '"floor(double)"
                             '()
                             g$fl$24811$1LXXoO)))
                        ($fl/
                          g$x1$24768$1LXXoO
                          ($fl- g$x2$24769$1LXXoO)))))))
                g$x1$24745$1LXXoO
                g$x2$24746$1LXXoO)))))))))
   (g$residual-fldiv*$24184$1LXXoO
     g$residual-fldiv*$25448$1LXXoO
     (case-lambda
       ((g$x1$24832$1LXXoO g$x2$24833$1LXXoO)
        (if ($fl<? '0.0 g$x2$24833$1LXXoO)
          ((case-lambda
             ((g$fl$24854$1LXXoO)
              (clr-call-internal
                'system.math
                '"floor(double)"
                '()
                g$fl$24854$1LXXoO)))
           ($fl/ g$x1$24832$1LXXoO g$x2$24833$1LXXoO))
          ($fl-
            ((case-lambda
               ((g$fl$24875$1LXXoO)
                (clr-call-internal
                  'system.math
                  '"floor(double)"
                  '()
                  g$fl$24875$1LXXoO)))
             ($fl/ g$x1$24832$1LXXoO ($fl- g$x2$24833$1LXXoO))))))))
   (g$fldiv$24185$1LXXoO
     g$fldiv$25449$1LXXoO
     (case-lambda
       ((g$x1$24876$1LXXoO g$x2$24877$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24876$1LXXoO))
            (assertion-violation
              'fldiv
              '"not a flonum"
              g$x1$24876$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24877$1LXXoO))
            (assertion-violation
              'fldiv
              '"not a flonum"
              g$x2$24877$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$x1$24898$1LXXoO g$x2$24899$1LXXoO)
                  (if ($fl<? '0.0 g$x2$24899$1LXXoO)
                    ((case-lambda
                       ((g$fl$24920$1LXXoO)
                        (clr-call-internal
                          'system.math
                          '"floor(double)"
                          '()
                          g$fl$24920$1LXXoO)))
                     ($fl/ g$x1$24898$1LXXoO g$x2$24899$1LXXoO))
                    ($fl-
                      ((case-lambda
                         ((g$fl$24941$1LXXoO)
                          (clr-call-internal
                            'system.math
                            '"floor(double)"
                            '()
                            g$fl$24941$1LXXoO)))
                       ($fl/
                         g$x1$24898$1LXXoO
                         ($fl- g$x2$24899$1LXXoO)))))))
               g$x1$24876$1LXXoO
               g$x2$24877$1LXXoO))))))))
   (g$fldiv0-and-mod0$24186$1LXXoO
     g$fldiv0-and-mod0$25450$1LXXoO
     (case-lambda
       ((g$x1$24942$1LXXoO g$x2$24943$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$x1$24942$1LXXoO))
            (assertion-violation
              'fldiv0-and-mod0
              '"not a flonum"
              g$x1$24942$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$x2$24943$1LXXoO))
            (assertion-violation
              'fldiv0-and-mod0
              '"not a flonum"
              g$x2$24943$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$d$24944$1LXXoO)
                  (values
                    g$d$24944$1LXXoO
                    ($fl-
                      g$x1$24942$1LXXoO
                      ($fl* g$d$24944$1LXXoO g$x2$24943$1LXXoO)))))
               ((case-lambda
                  ((g$x1$24965$1LXXoO g$x2$24966$1LXXoO)
                   ((case-lambda
                      ((g$d$24967$1LXXoO)
                       ((case-lambda
                          ((g$m$24968$1LXXoO)
                           (if ($fl<?
                                 g$m$24968$1LXXoO
                                 (g$magnitude$20722$1LXXoO
                                   ($fl/ g$x2$24966$1LXXoO '2.0)))
                             g$d$24967$1LXXoO
                             (if ($fl<? '0.0 g$x2$24966$1LXXoO)
                               ($fl+ g$d$24967$1LXXoO '1.0)
                               (begin
                                 '#f
                                 ($fl- g$d$24967$1LXXoO '1.0))))))
                        ($fl-
                          g$x1$24965$1LXXoO
                          ($fl* g$d$24967$1LXXoO g$x2$24966$1LXXoO)))))
                    ((case-lambda
                       ((g$x1$24989$1LXXoO g$x2$24990$1LXXoO)
                        (if ($fl<? '0.0 g$x2$24990$1LXXoO)
                          ((case-lambda
                             ((g$fl$25011$1LXXoO)
                              (clr-call-internal
                                'system.math
                                '"floor(double)"
                                '()
                                g$fl$25011$1LXXoO)))
                           ($fl/ g$x1$24989$1LXXoO g$x2$24990$1LXXoO))
                          ($fl-
                            ((case-lambda
                               ((g$fl$25032$1LXXoO)
                                (clr-call-internal
                                  'system.math
                                  '"floor(double)"
                                  '()
                                  g$fl$25032$1LXXoO)))
                             ($fl/
                               g$x1$24989$1LXXoO
                               ($fl- g$x2$24990$1LXXoO)))))))
                     g$x1$24965$1LXXoO
                     g$x2$24966$1LXXoO))))
                g$x1$24942$1LXXoO
                g$x2$24943$1LXXoO)))))))))
   (g$flinteger?$24187$1LXXoO
     g$flinteger?$25451$1LXXoO
     (case-lambda
       ((g$fl$25033$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25033$1LXXoO))
            (assertion-violation
              'flinteger?
              '"not a flonum"
              g$fl$25033$1LXXoO)
            (void))
          ((case-lambda
             (()
              ($fl=?
                '0.0
                ((case-lambda
                   ((g$x1$25054$1LXXoO g$x2$25055$1LXXoO)
                    ($fl-
                      g$x1$25054$1LXXoO
                      ($fl*
                        ((case-lambda
                           ((g$x1$25076$1LXXoO g$x2$25077$1LXXoO)
                            (if ($fl<? '0.0 g$x2$25077$1LXXoO)
                              ((case-lambda
                                 ((g$fl$25098$1LXXoO)
                                  (clr-call-internal
                                    'system.math
                                    '"floor(double)"
                                    '()
                                    g$fl$25098$1LXXoO)))
                               ($fl/
                                 g$x1$25076$1LXXoO
                                 g$x2$25077$1LXXoO))
                              ($fl-
                                ((case-lambda
                                   ((g$fl$25119$1LXXoO)
                                    (clr-call-internal
                                      'system.math
                                      '"floor(double)"
                                      '()
                                      g$fl$25119$1LXXoO)))
                                 ($fl/
                                   g$x1$25076$1LXXoO
                                   ($fl- g$x2$25077$1LXXoO)))))))
                         g$x1$25054$1LXXoO
                         g$x2$25055$1LXXoO)
                        g$x2$25055$1LXXoO))))
                 g$fl$25033$1LXXoO
                 '1.0)))))))))
   (g$flfinite?$24188$1LXXoO
     g$flfinite?$25452$1LXXoO
     (case-lambda
       ((g$fl$25120$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25120$1LXXoO))
            (assertion-violation
              'flfinite?
              '"not a flonum"
              g$fl$25120$1LXXoO)
            (void))
          ((case-lambda
             (()
              (not ((case-lambda
                      ((g$fl$25141$1LXXoO)
                       (clr-call-internal
                         'system.double
                         'isinfinity
                         '()
                         g$fl$25141$1LXXoO)))
                    g$fl$25120$1LXXoO)))))))))
   (g$residual-flinfinite?*$24204$1LXXoO
     g$residual-flinfinite?*$25453$1LXXoO
     (case-lambda
       ((g$fl$25162$1LXXoO)
        (clr-call-internal
          'system.double
          'isinfinity
          '()
          g$fl$25162$1LXXoO))))
   (g$flinfinite?$24205$1LXXoO
     g$flinfinite?$25454$1LXXoO
     (case-lambda
       ((g$fl$25163$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25163$1LXXoO))
            (assertion-violation
              'flinfinite?
              '"not a flonum"
              g$fl$25163$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$fl$25184$1LXXoO)
                  (clr-call-internal
                    'system.double
                    'isinfinity
                    '()
                    g$fl$25184$1LXXoO)))
               g$fl$25163$1LXXoO))))))))
   (g$flnan?$24206$1LXXoO
     g$flnan?$25455$1LXXoO
     (case-lambda
       ((g$fl$25185$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25185$1LXXoO))
            (assertion-violation
              'flnan?
              '"not a flonum"
              g$fl$25185$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.double
                'isnan
                '()
                g$fl$25185$1LXXoO))))))))
   (g$flsin$24207$1LXXoO
     g$flsin$25456$1LXXoO
     (case-lambda
       ((g$fl$25186$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25186$1LXXoO))
            (assertion-violation
              'flsin
              '"not a flonum"
              g$fl$25186$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'sin
                '()
                g$fl$25186$1LXXoO))))))))
   (g$flcos$24208$1LXXoO
     g$flcos$25457$1LXXoO
     (case-lambda
       ((g$fl$25187$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25187$1LXXoO))
            (assertion-violation
              'flcos
              '"not a flonum"
              g$fl$25187$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'cos
                '()
                g$fl$25187$1LXXoO))))))))
   (g$fltan$24209$1LXXoO
     g$fltan$25458$1LXXoO
     (case-lambda
       ((g$fl$25188$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25188$1LXXoO))
            (assertion-violation
              'fltan
              '"not a flonum"
              g$fl$25188$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'tan
                '()
                g$fl$25188$1LXXoO))))))))
   (g$flasin$24210$1LXXoO
     g$flasin$25459$1LXXoO
     (case-lambda
       ((g$fl$25189$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25189$1LXXoO))
            (assertion-violation
              'flasin
              '"not a flonum"
              g$fl$25189$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'asin
                '()
                g$fl$25189$1LXXoO))))))))
   (g$flacos$24211$1LXXoO
     g$flacos$25460$1LXXoO
     (case-lambda
       ((g$fl$25190$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25190$1LXXoO))
            (assertion-violation
              'flacos
              '"not a flonum"
              g$fl$25190$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'acos
                '()
                g$fl$25190$1LXXoO))))))))
   (g$flatan$24212$1LXXoO
     g$flatan$25461$1LXXoO
     (case-lambda
       ((g$fl$25191$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25191$1LXXoO))
            (assertion-violation
              'flatan
              '"not a flonum"
              g$fl$25191$1LXXoO)
            (void))
          (clr-call-internal 'system.math 'atan '() g$fl$25191$1LXXoO)))
       ((g$fl1$25192$1LXXoO g$fl2$25193$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl1$25192$1LXXoO))
            (assertion-violation
              'flatan
              '"not a flonum"
              g$fl1$25192$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$fl2$25193$1LXXoO))
            (assertion-violation
              'flatan
              '"not a flonum"
              g$fl2$25193$1LXXoO)
            (void))
          (clr-call-internal
            'system.math
            'atan2
            '()
            g$fl1$25192$1LXXoO
            g$fl2$25193$1LXXoO)))))
   (g$fllog$24213$1LXXoO
     g$fllog$25462$1LXXoO
     (case-lambda
       ((g$fl$25194$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25194$1LXXoO))
            (assertion-violation
              'fllog
              '"not a flonum"
              g$fl$25194$1LXXoO)
            (void))
          (clr-call-internal 'system.math 'log '() g$fl$25194$1LXXoO)))
       ((g$fl1$25195$1LXXoO g$fl2$25196$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl1$25195$1LXXoO))
            (assertion-violation
              'fllog
              '"not a flonum"
              g$fl1$25195$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$fl2$25196$1LXXoO))
            (assertion-violation
              'fllog
              '"not a flonum"
              g$fl2$25196$1LXXoO)
            (void))
          (clr-call-internal
            'system.math
            'log
            '()
            g$fl1$25195$1LXXoO
            g$fl2$25196$1LXXoO)))))
   (g$flsqrt$24214$1LXXoO
     g$flsqrt$25463$1LXXoO
     (case-lambda
       ((g$fl$25197$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25197$1LXXoO))
            (assertion-violation
              'flsqrt
              '"not a flonum"
              g$fl$25197$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'sqrt
                '()
                g$fl$25197$1LXXoO))))))))
   (g$flexp$24215$1LXXoO
     g$flexp$25464$1LXXoO
     (case-lambda
       ((g$fl$25198$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25198$1LXXoO))
            (assertion-violation
              'flexp
              '"not a flonum"
              g$fl$25198$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'exp
                '()
                g$fl$25198$1LXXoO))))))))
   (g$flexpt$24216$1LXXoO
     g$flexpt$25465$1LXXoO
     (case-lambda
       ((g$fl$25199$1LXXoO g$n$25200$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25199$1LXXoO))
            (assertion-violation
              'flexpt
              '"not a flonum"
              g$fl$25199$1LXXoO)
            (void))
          (if (not (g$flonum?$20061$1LXXoO g$n$25200$1LXXoO))
            (assertion-violation
              'flexpt
              '"not a flonum"
              g$n$25200$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                'pow
                '()
                g$fl$25199$1LXXoO
                g$n$25200$1LXXoO))))))))
   (g$flceiling$24217$1LXXoO
     g$flceiling$25466$1LXXoO
     (case-lambda
       ((g$fl$25201$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25201$1LXXoO))
            (assertion-violation
              'flceiling
              '"not a flonum"
              g$fl$25201$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                '"ceiling(double)"
                '()
                g$fl$25201$1LXXoO))))))))
   (g$residual-flfloor*$24233$1LXXoO
     g$residual-flfloor*$25467$1LXXoO
     (case-lambda
       ((g$fl$25222$1LXXoO)
        (clr-call-internal
          'system.math
          '"floor(double)"
          '()
          g$fl$25222$1LXXoO))))
   (g$flfloor$24234$1LXXoO
     g$flfloor$25468$1LXXoO
     (case-lambda
       ((g$fl$25223$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25223$1LXXoO))
            (assertion-violation
              'flfloor
              '"not a flonum"
              g$fl$25223$1LXXoO)
            (void))
          ((case-lambda
             (()
              ((case-lambda
                 ((g$fl$25244$1LXXoO)
                  (clr-call-internal
                    'system.math
                    '"floor(double)"
                    '()
                    g$fl$25244$1LXXoO)))
               g$fl$25223$1LXXoO))))))))
   (g$fltruncate$24235$1LXXoO
     g$fltruncate$25469$1LXXoO
     (case-lambda
       ((g$fl$25245$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25245$1LXXoO))
            (assertion-violation
              'fltruncate
              '"not a flonum"
              g$fl$25245$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                '"truncate(double)"
                '()
                g$fl$25245$1LXXoO))))))))
   (g$flround$24236$1LXXoO
     g$flround$25470$1LXXoO
     (case-lambda
       ((g$fl$25246$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25246$1LXXoO))
            (assertion-violation
              'flround
              '"not a flonum"
              g$fl$25246$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                '"round(double)"
                '()
                g$fl$25246$1LXXoO))))))))
   (g$flabs$24237$1LXXoO
     g$flabs$25471$1LXXoO
     (case-lambda
       ((g$fl$25247$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$fl$25247$1LXXoO))
            (assertion-violation
              'flabs
              '"not a flonum"
              g$fl$25247$1LXXoO)
            (void))
          ((case-lambda
             (()
              (clr-call-internal
                'system.math
                '"abs(double)"
                '()
                g$fl$25247$1LXXoO))))))))
   (g$flpositive?$24238$1LXXoO
     g$flpositive?$25472$1LXXoO
     (case-lambda
       ((g$r$25248$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$r$25248$1LXXoO))
            (assertion-violation
              'flpositive?
              '"not a flonum"
              g$r$25248$1LXXoO)
            (void))
          ((case-lambda (() ($fl<? '0.0 g$r$25248$1LXXoO))))))))
   (g$flnegative?$24239$1LXXoO
     g$flnegative?$25473$1LXXoO
     (case-lambda
       ((g$r$25249$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$r$25249$1LXXoO))
            (assertion-violation
              'flnegative?
              '"not a flonum"
              g$r$25249$1LXXoO)
            (void))
          ((case-lambda (() ($fl>? '0.0 g$r$25249$1LXXoO))))))))
   (g$flzero?$24240$1LXXoO
     g$flzero?$25474$1LXXoO
     (case-lambda
       ((g$r$25250$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$r$25250$1LXXoO))
            (assertion-violation
              'flzero?
              '"not a flonum"
              g$r$25250$1LXXoO)
            (void))
          ((case-lambda (() ($fl=? '0.0 g$r$25250$1LXXoO))))))))
   (g$fleven?$24241$1LXXoO
     g$fleven?$25475$1LXXoO
     (case-lambda
       ((g$n$25251$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$n$25251$1LXXoO))
            (assertion-violation
              'fleven?
              '"not a flonum"
              g$n$25251$1LXXoO)
            (void))
          ((case-lambda
             (()
              (begin
                (if (not (g$integer-valued?$20710$1LXXoO
                           g$n$25251$1LXXoO))
                  (assertion-violation
                    'fleven?
                    '"not integer valued"
                    g$n$25251$1LXXoO)
                  (void))
                ($fl=?
                  '0.0
                  ((case-lambda
                     ((g$x1$25272$1LXXoO g$x2$25273$1LXXoO)
                      ($fl-
                        g$x1$25272$1LXXoO
                        ($fl*
                          ((case-lambda
                             ((g$x1$25294$1LXXoO g$x2$25295$1LXXoO)
                              (if ($fl<? '0.0 g$x2$25295$1LXXoO)
                                ((case-lambda
                                   ((g$fl$25316$1LXXoO)
                                    (clr-call-internal
                                      'system.math
                                      '"floor(double)"
                                      '()
                                      g$fl$25316$1LXXoO)))
                                 ($fl/
                                   g$x1$25294$1LXXoO
                                   g$x2$25295$1LXXoO))
                                ($fl-
                                  ((case-lambda
                                     ((g$fl$25337$1LXXoO)
                                      (clr-call-internal
                                        'system.math
                                        '"floor(double)"
                                        '()
                                        g$fl$25337$1LXXoO)))
                                   ($fl/
                                     g$x1$25294$1LXXoO
                                     ($fl- g$x2$25295$1LXXoO)))))))
                           g$x1$25272$1LXXoO
                           g$x2$25273$1LXXoO)
                          g$x2$25273$1LXXoO))))
                   g$n$25251$1LXXoO
                   '2.0))))))))))
   (g$flodd?$24242$1LXXoO
     g$flodd?$25476$1LXXoO
     (case-lambda
       ((g$n$25338$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$n$25338$1LXXoO))
            (assertion-violation
              'flodd?
              '"not a flonum"
              g$n$25338$1LXXoO)
            (void))
          ((case-lambda
             (()
              (begin
                (if (not (g$integer-valued?$20710$1LXXoO
                           g$n$25338$1LXXoO))
                  (assertion-violation
                    'flodd?
                    '"not integer valued"
                    g$n$25338$1LXXoO)
                  (void))
                ($fl=?
                  '1.0
                  ((case-lambda
                     ((g$x1$25359$1LXXoO g$x2$25360$1LXXoO)
                      ($fl-
                        g$x1$25359$1LXXoO
                        ($fl*
                          ((case-lambda
                             ((g$x1$25381$1LXXoO g$x2$25382$1LXXoO)
                              (if ($fl<? '0.0 g$x2$25382$1LXXoO)
                                ((case-lambda
                                   ((g$fl$25403$1LXXoO)
                                    (clr-call-internal
                                      'system.math
                                      '"floor(double)"
                                      '()
                                      g$fl$25403$1LXXoO)))
                                 ($fl/
                                   g$x1$25381$1LXXoO
                                   g$x2$25382$1LXXoO))
                                ($fl-
                                  ((case-lambda
                                     ((g$fl$25424$1LXXoO)
                                      (clr-call-internal
                                        'system.math
                                        '"floor(double)"
                                        '()
                                        g$fl$25424$1LXXoO)))
                                   ($fl/
                                     g$x1$25381$1LXXoO
                                     ($fl- g$x2$25382$1LXXoO)))))))
                           g$x1$25359$1LXXoO
                           g$x2$25360$1LXXoO)
                          g$x2$25360$1LXXoO))))
                   g$n$25338$1LXXoO
                   '2.0))))))))))
   (g$flmax$24243$1LXXoO
     g$flmax$25477$1LXXoO
     (case-lambda
       ((g$a$25425$1LXXoO . g$rest$25426$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$a$25425$1LXXoO))
            (assertion-violation
              'flmax
              '"not a flonum"
              g$a$25425$1LXXoO)
            (void))
          (g$fold-left$19228$1LXXoO
            (case-lambda
              ((g$a$25427$1LXXoO g$b$25428$1LXXoO)
               (if (g$fl<?$24129$1LXXoO
                     g$a$25427$1LXXoO
                     g$b$25428$1LXXoO)
                 g$b$25428$1LXXoO
                 g$a$25427$1LXXoO)))
            g$a$25425$1LXXoO
            g$rest$25426$1LXXoO)))))
   (g$flmin$24244$1LXXoO
     g$flmin$25478$1LXXoO
     (case-lambda
       ((g$a$25429$1LXXoO . g$rest$25430$1LXXoO)
        (begin
          (if (not (g$flonum?$20061$1LXXoO g$a$25429$1LXXoO))
            (assertion-violation
              'flmin
              '"not a flonum"
              g$a$25429$1LXXoO)
            (void))
          (g$fold-left$19228$1LXXoO
            (case-lambda
              ((g$a$25431$1LXXoO g$b$25432$1LXXoO)
               (if (g$fl>?$24131$1LXXoO
                     g$a$25431$1LXXoO
                     g$b$25432$1LXXoO)
                 g$b$25432$1LXXoO
                 g$a$25431$1LXXoO)))
            g$a$25429$1LXXoO
            g$rest$25430$1LXXoO))))))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$25480$1LXXoO
     g$using$25500$1LXXoO
     (clr-using-internal 'ironscheme.runtime))
   (g$put-datum$25481$1LXXoO
     g$put-datum$25501$1LXXoO
     (case-lambda
       ((g$p$25489$1LXXoO g$datum$25490$1LXXoO)
        (write g$datum$25490$1LXXoO g$p$25489$1LXXoO))))
   (g$get-datum$25482$1LXXoO g$get-datum$25502$1LXXoO read)
   (g$get-output-string$25483$1LXXoO
     g$get-output-string$25503$1LXXoO
     (case-lambda
       ((g$port$25491$1LXXoO)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$25491$1LXXoO))))
   (g$open-output-string$25484$1LXXoO
     g$open-output-string$25504$1LXXoO
     (case-lambda
       (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$25485$1LXXoO
     g$open-string-output-port$25505$1LXXoO
     (case-lambda
       (()
        ((case-lambda
           ((g$p$25492$1LXXoO)
            (values
              g$p$25492$1LXXoO
              (case-lambda
                (()
                 (g$get-output-string$25483$1LXXoO
                   g$p$25492$1LXXoO))))))
         (g$open-output-string$25484$1LXXoO)))))
   (g$port?$25486$1LXXoO
     g$port?$25506$1LXXoO
     (case-lambda
       ((g$obj$25493$1LXXoO)
        ((case-lambda
           ((g$t$25494$1LXXoO)
            (if g$t$25494$1LXXoO
              g$t$25494$1LXXoO
              (begin '#f (binary-port? g$obj$25493$1LXXoO)))))
         (textual-port? g$obj$25493$1LXXoO)))))
   (g$call-with-string-output-port$25487$1LXXoO
     g$call-with-string-output-port$25507$1LXXoO
     (case-lambda
       ((g$proc$25495$1LXXoO)
        ((case-lambda
           ((g$p$25496$1LXXoO)
            (begin
              (g$call-with-port$25488$1LXXoO
                g$p$25496$1LXXoO
                g$proc$25495$1LXXoO)
              (g$get-output-string$25483$1LXXoO g$p$25496$1LXXoO))))
         (g$open-output-string$25484$1LXXoO)))))
   (g$call-with-port$25488$1LXXoO
     g$call-with-port$25508$1LXXoO
     (case-lambda
       ((g$port$25497$1LXXoO g$proc$25498$1LXXoO)
        ((case-lambda
           ((g$r$25499$1LXXoO)
            (begin (close-port g$port$25497$1LXXoO) g$r$25499$1LXXoO)))
         (g$proc$25498$1LXXoO g$port$25497$1LXXoO))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$25509$1LXXoO
     g$peek-char$25564$1LXXoO
     (case-lambda
       (() (g$peek-char$25509$1LXXoO (current-input-port)))
       ((g$port$25536$1LXXoO) (lookahead-char g$port$25536$1LXXoO))))
   (g$read-char$25510$1LXXoO
     g$read-char$25565$1LXXoO
     (case-lambda
       (() (g$read-char$25510$1LXXoO (current-input-port)))
       ((g$port$25537$1LXXoO) (get-char g$port$25537$1LXXoO))))
   (g$write-char$25511$1LXXoO
     g$write-char$25566$1LXXoO
     (case-lambda
       ((g$chr$25538$1LXXoO)
        (g$write-char$25511$1LXXoO
          g$chr$25538$1LXXoO
          (current-output-port)))
       ((g$chr$25539$1LXXoO g$port$25540$1LXXoO)
        (put-char g$port$25540$1LXXoO g$chr$25539$1LXXoO))))
   (g$with-input-from-file$25531$1LXXoO
     g$with-input-from-file$25567$1LXXoO
     (case-lambda
       ((g$filename$25541$1LXXoO g$thunk$25542$1LXXoO)
        ((case-lambda
           ((g$current-input-port$25545$1LXXoO g$t$25546$1LXXoO)
            ((case-lambda
               ((g$swap$25547$1LXXoO)
                (dynamic-wind
                  g$swap$25547$1LXXoO
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$25542$1LXXoO)))
                       (case-lambda
                         (()
                          (close-input-port (current-input-port)))))))
                  g$swap$25547$1LXXoO)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$25548$1LXXoO)
                    (begin
                      (g$current-input-port$25545$1LXXoO
                        g$t$25546$1LXXoO)
                      (set! g$t$25546$1LXXoO g$t$25548$1LXXoO))))
                 (g$current-input-port$25545$1LXXoO)))))))
         current-input-port
         (open-input-file g$filename$25541$1LXXoO)))))
   (g$with-output-to-file$25532$1LXXoO
     g$with-output-to-file$25568$1LXXoO
     (case-lambda
       ((g$filename$25549$1LXXoO g$thunk$25550$1LXXoO)
        ((case-lambda
           ((g$current-output-port$25553$1LXXoO g$t$25554$1LXXoO)
            ((case-lambda
               ((g$swap$25555$1LXXoO)
                (dynamic-wind
                  g$swap$25555$1LXXoO
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$25550$1LXXoO)))
                       (case-lambda
                         (()
                          (close-output-port (current-output-port)))))))
                  g$swap$25555$1LXXoO)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$25556$1LXXoO)
                    (begin
                      (g$current-output-port$25553$1LXXoO
                        g$t$25554$1LXXoO)
                      (set! g$t$25554$1LXXoO g$t$25556$1LXXoO))))
                 (g$current-output-port$25553$1LXXoO)))))))
         current-output-port
         (open-output-file g$filename$25549$1LXXoO)))))
   (g$call-with-input-file$25533$1LXXoO
     g$call-with-input-file$25569$1LXXoO
     (case-lambda
       ((g$filename$25557$1LXXoO g$proc$25558$1LXXoO)
        ((case-lambda
           ((g$p$25559$1LXXoO)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$25558$1LXXoO g$p$25559$1LXXoO)))
              (case-lambda (() (close-input-port g$p$25559$1LXXoO))))))
         (open-input-file g$filename$25557$1LXXoO)))))
   (g$call-with-output-file$25534$1LXXoO
     g$call-with-output-file$25570$1LXXoO
     (case-lambda
       ((g$filename$25560$1LXXoO g$proc$25561$1LXXoO)
        ((case-lambda
           ((g$p$25562$1LXXoO)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$25561$1LXXoO g$p$25562$1LXXoO)))
              (case-lambda (() (close-output-port g$p$25562$1LXXoO))))))
         (open-output-file g$filename$25560$1LXXoO)))))
   (g$newline$25535$1LXXoO
     g$newline$25571$1LXXoO
     (case-lambda
       (() (g$newline$25535$1LXXoO (current-output-port)))
       ((g$port$25563$1LXXoO) (display '"
" g$port$25563$1LXXoO)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$8439$25572$1LXXoO
     g$8439$25685$1LXXoO
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$8441$25573$1LXXoO g$8441$25686$1LXXoO '#f)
   (g$8440$25574$1LXXoO
     g$8440$25687$1LXXoO
     (make-record-constructor-descriptor
       g$8439$25572$1LXXoO
       '#f
       g$8441$25573$1LXXoO))
   (g$enum?$25577$1LXXoO
     g$enum?$25688$1LXXoO
     (record-predicate g$8439$25572$1LXXoO))
   (g$make-enum$25578$1LXXoO
     g$make-enum$25689$1LXXoO
     (record-constructor g$8440$25574$1LXXoO))
   (g$enum-value$25579$1LXXoO
     g$enum-value$25690$1LXXoO
     (record-accessor g$8439$25572$1LXXoO '0))
   (g$enum-info$25580$1LXXoO
     g$enum-info$25691$1LXXoO
     (record-accessor g$8439$25572$1LXXoO '1))
   (g$8450$25581$1LXXoO
     g$8450$25692$1LXXoO
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$8452$25582$1LXXoO g$8452$25693$1LXXoO '#f)
   (g$8451$25583$1LXXoO
     g$8451$25694$1LXXoO
     (make-record-constructor-descriptor
       g$8450$25581$1LXXoO
       '#f
       g$8452$25582$1LXXoO))
   (g$enum-universe?$25586$1LXXoO
     g$enum-universe?$25695$1LXXoO
     (record-predicate g$8450$25581$1LXXoO))
   (g$make-enum-universe$25587$1LXXoO
     g$make-enum-universe$25696$1LXXoO
     (record-constructor g$8451$25583$1LXXoO))
   (g$enum-universe-id$25588$1LXXoO
     g$enum-universe-id$25697$1LXXoO
     (record-accessor g$8450$25581$1LXXoO '0))
   (g$enum-universe-symbols$25589$1LXXoO
     g$enum-universe-symbols$25698$1LXXoO
     (record-accessor g$8450$25581$1LXXoO '1))
   (g$enum-universe-mapping$25590$1LXXoO
     g$enum-universe-mapping$25699$1LXXoO
     (record-accessor g$8450$25581$1LXXoO '2))
   (g$enum-universe-value$25591$1LXXoO
     g$enum-universe-value$25700$1LXXoO
     (record-accessor g$8450$25581$1LXXoO '3))
   (g$enum-type=?$25592$1LXXoO
     g$enum-type=?$25701$1LXXoO
     (case-lambda
       ((g$enumset1$25614$1LXXoO g$enumset2$25615$1LXXoO)
        (eq? (g$enum-universe-id$25588$1LXXoO
               (g$enum-info$25580$1LXXoO g$enumset1$25614$1LXXoO))
             (g$enum-universe-id$25588$1LXXoO
               (g$enum-info$25580$1LXXoO g$enumset2$25615$1LXXoO))))))
   (g$get-symbols$25593$1LXXoO
     g$get-symbols$25702$1LXXoO
     (case-lambda
       ((g$enumset$25616$1LXXoO)
        (g$enum-universe-symbols$25589$1LXXoO
          (g$enum-info$25580$1LXXoO g$enumset$25616$1LXXoO)))))
   (g$get-value$25594$1LXXoO
     g$get-value$25703$1LXXoO
     (case-lambda
       ((g$enumset$25617$1LXXoO g$s$25618$1LXXoO)
        (g$hashtable-ref$20167$1LXXoO
          (g$enum-universe-mapping$25590$1LXXoO
            (g$enum-info$25580$1LXXoO g$enumset$25617$1LXXoO))
          g$s$25618$1LXXoO
          '#f))))
   (g$assert-enum$25595$1LXXoO
     g$assert-enum$25704$1LXXoO
     (case-lambda
       ((g$who$25619$1LXXoO g$enumset$25620$1LXXoO)
        (if (not (g$enum?$25577$1LXXoO g$enumset$25620$1LXXoO))
          (assertion-violation
            g$who$25619$1LXXoO
            '"not an enumeration"
            g$enumset$25620$1LXXoO)
          (void)))))
   (g$make-info$25596$1LXXoO
     g$make-info$25705$1LXXoO
     (case-lambda
       ((g$symbols$25621$1LXXoO)
        ((case-lambda
           ((g$ht$25622$1LXXoO)
            ((letrec ((g$f$25623$1LXXoO
                        (case-lambda
                          ((g$s$25624$1LXXoO
                             g$a$25625$1LXXoO
                             g$mask$25626$1LXXoO)
                           (if (null? g$s$25624$1LXXoO)
                             (values
                               (reverse! g$a$25625$1LXXoO)
                               g$ht$25622$1LXXoO
                               (- g$mask$25626$1LXXoO '1))
                             ((case-lambda
                                ((g$n$25627$1LXXoO)
                                 (if (g$symbol?$20057$1LXXoO
                                       g$n$25627$1LXXoO)
                                   (if (g$hashtable-contains?$20170$1LXXoO
                                         g$ht$25622$1LXXoO
                                         g$n$25627$1LXXoO)
                                     (g$f$25623$1LXXoO
                                       (cdr g$s$25624$1LXXoO)
                                       g$a$25625$1LXXoO
                                       g$mask$25626$1LXXoO)
                                     (begin
                                       (g$hashtable-set!$20168$1LXXoO
                                         g$ht$25622$1LXXoO
                                         g$n$25627$1LXXoO
                                         g$mask$25626$1LXXoO)
                                       (g$f$25623$1LXXoO
                                         (cdr g$s$25624$1LXXoO)
                                         (cons
                                           g$n$25627$1LXXoO
                                           g$a$25625$1LXXoO)
                                         (g$bitwise-arithmetic-shift-left$21651$1LXXoO
                                           g$mask$25626$1LXXoO
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$25627$1LXXoO))))
                              (car g$s$25624$1LXXoO)))))))
               g$f$25623$1LXXoO)
             g$symbols$25621$1LXXoO
             '()
             '1)))
         (g$make-eq-hashtable$20164$1LXXoO)))))
   (g$make-name$25597$1LXXoO
     g$make-name$25706$1LXXoO
     (case-lambda
       ((g$symbols$25628$1LXXoO)
        (string->symbol
          (g$format$25745$1LXXoO '"~a" g$symbols$25628$1LXXoO)))))
   (g$make-enumeration$25598$1LXXoO
     g$make-enumeration$25707$1LXXoO
     (case-lambda
       ((g$symbols$25629$1LXXoO)
        (call-with-values
          (case-lambda
            (() (g$make-info$25596$1LXXoO g$symbols$25629$1LXXoO)))
          (case-lambda
            ((g$s$25633$1LXXoO
               g$mapping$25634$1LXXoO
               g$mask$25635$1LXXoO)
             ((case-lambda
                ((g$mask$25636$1LXXoO
                   g$mapping$25637$1LXXoO
                   g$s$25638$1LXXoO)
                 (g$make-enum$25578$1LXXoO
                   g$mask$25636$1LXXoO
                   (g$make-enum-universe$25587$1LXXoO
                     (g$make-name$25597$1LXXoO g$s$25638$1LXXoO)
                     g$s$25638$1LXXoO
                     g$mapping$25637$1LXXoO
                     g$mask$25636$1LXXoO))))
              g$mask$25635$1LXXoO
              g$mapping$25634$1LXXoO
              g$s$25633$1LXXoO)))))))
   (g$enum-set-universe$25599$1LXXoO
     g$enum-set-universe$25708$1LXXoO
     (case-lambda
       ((g$enumset$25639$1LXXoO)
        (begin
          (g$assert-enum$25595$1LXXoO
            'enum-set-universe
            g$enumset$25639$1LXXoO)
          ((case-lambda
             ((g$ei$25640$1LXXoO)
              (g$make-enum$25578$1LXXoO
                (g$enum-universe-value$25591$1LXXoO g$ei$25640$1LXXoO)
                g$ei$25640$1LXXoO)))
           (g$enum-info$25580$1LXXoO g$enumset$25639$1LXXoO))))))
   (g$enum-set-indexer$25600$1LXXoO
     g$enum-set-indexer$25709$1LXXoO
     (case-lambda
       ((g$enumset$25641$1LXXoO)
        (begin
          (g$assert-enum$25595$1LXXoO
            'enum-set-indexer
            g$enumset$25641$1LXXoO)
          (case-lambda
            ((g$symbol$25642$1LXXoO)
             (begin
               (if (not (g$symbol?$20057$1LXXoO g$symbol$25642$1LXXoO))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$25642$1LXXoO)
                 (void))
               ((case-lambda
                  ((g$v$25643$1LXXoO)
                   (if g$v$25643$1LXXoO
                     (- (bitwise-length g$v$25643$1LXXoO) '1)
                     '#f)))
                (g$get-value$25594$1LXXoO
                  g$enumset$25641$1LXXoO
                  g$symbol$25642$1LXXoO)))))))))
   (g$enum-set-constructor$25601$1LXXoO
     g$enum-set-constructor$25710$1LXXoO
     (case-lambda
       ((g$enumset$25644$1LXXoO)
        (begin
          (g$assert-enum$25595$1LXXoO
            'enum-set-constructor
            g$enumset$25644$1LXXoO)
          (case-lambda
            ((g$symbols$25645$1LXXoO)
             ((letrec ((g$f$25646$1LXXoO
                         (case-lambda
                           ((g$v$25647$1LXXoO g$s$25648$1LXXoO)
                            (if (null? g$s$25648$1LXXoO)
                              (g$make-enum$25578$1LXXoO
                                g$v$25647$1LXXoO
                                (g$enum-info$25580$1LXXoO
                                  g$enumset$25644$1LXXoO))
                              ((case-lambda
                                 ((g$n$25649$1LXXoO)
                                  (if (g$symbol?$20057$1LXXoO
                                        g$n$25649$1LXXoO)
                                    ((case-lambda
                                       ((g$v*$25650$1LXXoO)
                                        (if g$v*$25650$1LXXoO
                                          (g$f$25646$1LXXoO
                                            (bitwise-ior
                                              g$v$25647$1LXXoO
                                              g$v*$25650$1LXXoO)
                                            (cdr g$s$25648$1LXXoO))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$25649$1LXXoO))))
                                     (g$get-value$25594$1LXXoO
                                       g$enumset$25644$1LXXoO
                                       g$n$25649$1LXXoO))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$25649$1LXXoO))))
                               (car g$s$25648$1LXXoO)))))))
                g$f$25646$1LXXoO)
              '0
              g$symbols$25645$1LXXoO)))))))
   (g$enum-set->list$25602$1LXXoO
     g$enum-set->list$25711$1LXXoO
     (case-lambda
       ((g$enumset$25651$1LXXoO)
        (begin
          (g$assert-enum$25595$1LXXoO
            'enum-set->list
            g$enumset$25651$1LXXoO)
          ((case-lambda
             ((g$value$25652$1LXXoO)
              ((letrec ((g$f$25653$1LXXoO
                          (case-lambda
                            ((g$s$25654$1LXXoO g$l$25655$1LXXoO)
                             (if (null? g$s$25654$1LXXoO)
                               (reverse! g$l$25655$1LXXoO)
                               (if (g$zero?$20711$1LXXoO
                                     (bitwise-and
                                       (g$get-value$25594$1LXXoO
                                         g$enumset$25651$1LXXoO
                                         (car g$s$25654$1LXXoO))
                                       g$value$25652$1LXXoO))
                                 (g$f$25653$1LXXoO
                                   (cdr g$s$25654$1LXXoO)
                                   g$l$25655$1LXXoO)
                                 (g$f$25653$1LXXoO
                                   (cdr g$s$25654$1LXXoO)
                                   (cons
                                     (car g$s$25654$1LXXoO)
                                     g$l$25655$1LXXoO))))))))
                 g$f$25653$1LXXoO)
               (g$get-symbols$25593$1LXXoO g$enumset$25651$1LXXoO)
               '())))
           (g$enum-value$25579$1LXXoO g$enumset$25651$1LXXoO))))))
   (g$enum-set-member?$25603$1LXXoO
     g$enum-set-member?$25712$1LXXoO
     (case-lambda
       ((g$symbol$25656$1LXXoO g$enumset$25657$1LXXoO)
        (begin
          (if (not (g$symbol?$20057$1LXXoO g$symbol$25656$1LXXoO))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$25656$1LXXoO)
            (void))
          (g$assert-enum$25595$1LXXoO
            'enum-set-member?
            g$enumset$25657$1LXXoO)
          ((case-lambda
             ((g$v$25658$1LXXoO)
              (if g$v$25658$1LXXoO
                (not (g$zero?$20711$1LXXoO
                       (bitwise-and
                         g$v$25658$1LXXoO
                         (g$enum-value$25579$1LXXoO
                           g$enumset$25657$1LXXoO))))
                '#f)))
           (g$get-value$25594$1LXXoO
             g$enumset$25657$1LXXoO
             g$symbol$25656$1LXXoO))))))
   (g$enum-set-subset?$25604$1LXXoO
     g$enum-set-subset?$25713$1LXXoO
     (case-lambda
       ((g$enumset1$25659$1LXXoO g$enumset2$25660$1LXXoO)
        (begin
          (g$assert-enum$25595$1LXXoO
            'enum-set-subset?
            g$enumset1$25659$1LXXoO)
          (g$assert-enum$25595$1LXXoO
            'enum-set-subset?
            g$enumset2$25660$1LXXoO)
          ((case-lambda
             ((g$v1$25661$1LXXoO g$v2$25662$1LXXoO)
              (if (g$enum-type=?$25592$1LXXoO
                    g$enumset1$25659$1LXXoO
                    g$enumset2$25660$1LXXoO)
                (g$=$20714$1LXXoO
                  (bitwise-and g$v1$25661$1LXXoO g$v2$25662$1LXXoO)
                  g$v1$25661$1LXXoO)
                ((letrec ((g$f$25663$1LXXoO
                            (case-lambda
                              ((g$s$25664$1LXXoO)
                               (if (null? g$s$25664$1LXXoO)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$25665$1LXXoO
                                       g$v2*$25666$1LXXoO)
                                     (if g$v2*$25666$1LXXoO
                                       ((case-lambda
                                          ((g$has1$25667$1LXXoO
                                             g$has2$25668$1LXXoO)
                                           (if (if g$has1$25667$1LXXoO
                                                 (begin
                                                   '#f
                                                   (not g$has2$25668$1LXXoO))
                                                 '#f)
                                             '#f
                                             (g$f$25663$1LXXoO
                                               (cdr g$s$25664$1LXXoO)))))
                                        (not (g$zero?$20711$1LXXoO
                                               (bitwise-and
                                                 g$v1$25661$1LXXoO
                                                 g$v1*$25665$1LXXoO)))
                                        (not (g$zero?$20711$1LXXoO
                                               (bitwise-and
                                                 g$v2$25662$1LXXoO
                                                 g$v2*$25666$1LXXoO))))
                                       '#f)))
                                  (g$get-value$25594$1LXXoO
                                    g$enumset1$25659$1LXXoO
                                    (car g$s$25664$1LXXoO))
                                  (g$get-value$25594$1LXXoO
                                    g$enumset2$25660$1LXXoO
                                    (car g$s$25664$1LXXoO))))))))
                   g$f$25663$1LXXoO)
                 (g$get-symbols$25593$1LXXoO
                   g$enumset1$25659$1LXXoO)))))
           (g$enum-value$25579$1LXXoO g$enumset1$25659$1LXXoO)
           (g$enum-value$25579$1LXXoO g$enumset2$25660$1LXXoO))))))
   (g$enum-set=?$25605$1LXXoO
     g$enum-set=?$25714$1LXXoO
     (case-lambda
       ((g$enumset1$25669$1LXXoO g$enumset2$25670$1LXXoO)
        (begin
          (g$assert-enum$25595$1LXXoO
            'enum-set=?
            g$enumset1$25669$1LXXoO)
          (g$assert-enum$25595$1LXXoO
            'enum-set=?
            g$enumset2$25670$1LXXoO)
          (if (g$enum-set-subset?$25604$1LXXoO
                g$enumset1$25669$1LXXoO
                g$enumset2$25670$1LXXoO)
            (begin
              '#f
              (g$enum-set-subset?$25604$1LXXoO
                g$enumset2$25670$1LXXoO
                g$enumset1$25669$1LXXoO))
            '#f)))))
   (g$enum-set-union$25606$1LXXoO
     g$enum-set-union$25715$1LXXoO
     (case-lambda
       ((g$enumset1$25671$1LXXoO g$enumset2$25672$1LXXoO)
        (begin
          (g$assert-enum$25595$1LXXoO
            'enum-set-union
            g$enumset1$25671$1LXXoO)
          (g$assert-enum$25595$1LXXoO
            'enum-set-union
            g$enumset2$25672$1LXXoO)
          (if (g$enum-type=?$25592$1LXXoO
                g$enumset1$25671$1LXXoO
                g$enumset2$25672$1LXXoO)
            (g$make-enum$25578$1LXXoO
              (bitwise-ior
                (g$enum-value$25579$1LXXoO g$enumset1$25671$1LXXoO)
                (g$enum-value$25579$1LXXoO g$enumset2$25672$1LXXoO))
              (g$enum-info$25580$1LXXoO g$enumset1$25671$1LXXoO))
            '#f)))))
   (g$enum-set-intersection$25607$1LXXoO
     g$enum-set-intersection$25716$1LXXoO
     (case-lambda
       ((g$enumset1$25673$1LXXoO g$enumset2$25674$1LXXoO)
        (begin
          (g$assert-enum$25595$1LXXoO
            'enum-set-intersection
            g$enumset1$25673$1LXXoO)
          (g$assert-enum$25595$1LXXoO
            'enum-set-intersection
            g$enumset2$25674$1LXXoO)
          (if (g$enum-type=?$25592$1LXXoO
                g$enumset1$25673$1LXXoO
                g$enumset2$25674$1LXXoO)
            (g$make-enum$25578$1LXXoO
              (bitwise-and
                (g$enum-value$25579$1LXXoO g$enumset1$25673$1LXXoO)
                (g$enum-value$25579$1LXXoO g$enumset2$25674$1LXXoO))
              (g$enum-info$25580$1LXXoO g$enumset1$25673$1LXXoO))
            '#f)))))
   (g$enum-set-difference$25608$1LXXoO
     g$enum-set-difference$25717$1LXXoO
     (case-lambda
       ((g$enumset1$25675$1LXXoO g$enumset2$25676$1LXXoO)
        (begin
          (g$assert-enum$25595$1LXXoO
            'enum-set-difference
            g$enumset1$25675$1LXXoO)
          (g$assert-enum$25595$1LXXoO
            'enum-set-difference
            g$enumset2$25676$1LXXoO)
          (if (g$enum-type=?$25592$1LXXoO
                g$enumset1$25675$1LXXoO
                g$enumset2$25676$1LXXoO)
            (g$make-enum$25578$1LXXoO
              (bitwise-and
                (g$enum-value$25579$1LXXoO g$enumset1$25675$1LXXoO)
                (bitwise-not
                  (g$enum-value$25579$1LXXoO g$enumset2$25676$1LXXoO)))
              (g$enum-info$25580$1LXXoO g$enumset1$25675$1LXXoO))
            '#f)))))
   (g$enum-set-complement$25609$1LXXoO
     g$enum-set-complement$25718$1LXXoO
     (case-lambda
       ((g$enumset$25677$1LXXoO)
        (begin
          (g$assert-enum$25595$1LXXoO
            'enum-set-complement
            g$enumset$25677$1LXXoO)
          (g$make-enum$25578$1LXXoO
            (bitwise-not
              (g$enum-value$25579$1LXXoO g$enumset$25677$1LXXoO))
            (g$enum-info$25580$1LXXoO g$enumset$25677$1LXXoO))))))
   (g$enum-set-projection$25610$1LXXoO
     g$enum-set-projection$25719$1LXXoO
     (case-lambda
       ((g$enumset1$25678$1LXXoO g$enumset2$25679$1LXXoO)
        (begin
          (g$assert-enum$25595$1LXXoO
            'enum-set-projection
            g$enumset1$25678$1LXXoO)
          (g$assert-enum$25595$1LXXoO
            'enum-set-projection
            g$enumset2$25679$1LXXoO)
          ((case-lambda
             ((g$v1$25680$1LXXoO)
              ((letrec ((g$f$25681$1LXXoO
                          (case-lambda
                            ((g$s$25682$1LXXoO g$v$25683$1LXXoO)
                             (if (null? g$s$25682$1LXXoO)
                               (g$make-enum$25578$1LXXoO
                                 g$v$25683$1LXXoO
                                 (g$enum-info$25580$1LXXoO
                                   g$enumset2$25679$1LXXoO))
                               (if (g$zero?$20711$1LXXoO
                                     (bitwise-and
                                       g$v1$25680$1LXXoO
                                       (g$get-value$25594$1LXXoO
                                         g$enumset1$25678$1LXXoO
                                         (car g$s$25682$1LXXoO))))
                                 (g$f$25681$1LXXoO
                                   (cdr g$s$25682$1LXXoO)
                                   g$v$25683$1LXXoO)
                                 ((case-lambda
                                    ((g$v2$25684$1LXXoO)
                                     (if g$v2$25684$1LXXoO
                                       (g$f$25681$1LXXoO
                                         (cdr g$s$25682$1LXXoO)
                                         (bitwise-ior
                                           g$v$25683$1LXXoO
                                           g$v2$25684$1LXXoO))
                                       (g$f$25681$1LXXoO
                                         (cdr g$s$25682$1LXXoO)
                                         g$v$25683$1LXXoO))))
                                  (g$get-value$25594$1LXXoO
                                    g$enumset2$25679$1LXXoO
                                    (car g$s$25682$1LXXoO)))))))))
                 g$f$25681$1LXXoO)
               (g$get-symbols$25593$1LXXoO g$enumset1$25678$1LXXoO)
               '0)))
           (g$enum-value$25579$1LXXoO g$enumset1$25678$1LXXoO)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$25611$1LXXoO g$p$25612$1LXXoO g$wr$25613$1LXXoO)
       (g$fprintf$25744$1LXXoO
         g$p$25612$1LXXoO
         '"#[enum-set ~a]"
         (g$enum-set->list$25602$1LXXoO g$x$25611$1LXXoO))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$25720$1LXXoO
     g$dofmt$25742$1LXXoO
     (case-lambda
       ((g$p$25724$1LXXoO g$cntl$25725$1LXXoO g$args$25726$1LXXoO)
        ((case-lambda
           ((g$nmax$25727$1LXXoO)
            ((letrec ((g$loop$25728$1LXXoO
                        (case-lambda
                          ((g$n$25729$1LXXoO g$a$25730$1LXXoO)
                           (if (g$fx<=?$23903$1LXXoO
                                 g$n$25729$1LXXoO
                                 g$nmax$25727$1LXXoO)
                             ((case-lambda
                                ((g$c$25731$1LXXoO)
                                 (if (if (g$char=?$20116$1LXXoO
                                           g$c$25731$1LXXoO
                                           '#\~)
                                       (begin
                                         '#f
                                         (g$fx<?$23902$1LXXoO
                                           g$n$25729$1LXXoO
                                           g$nmax$25727$1LXXoO))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$25732$1LXXoO)
                                       (if (eqv? g$t$25732$1LXXoO '#\a)
                                         (begin
                                           (display
                                             (car g$a$25730$1LXXoO)
                                             g$p$25724$1LXXoO)
                                           (g$loop$25728$1LXXoO
                                             (g$fx+$23888$1LXXoO
                                               g$n$25729$1LXXoO
                                               '2)
                                             (cdr g$a$25730$1LXXoO)))
                                         (if (eqv?
                                               g$t$25732$1LXXoO
                                               '#\s)
                                           (begin
                                             (write
                                               (car g$a$25730$1LXXoO)
                                               g$p$25724$1LXXoO)
                                             (g$loop$25728$1LXXoO
                                               (g$fx+$23888$1LXXoO
                                                 g$n$25729$1LXXoO
                                                 '2)
                                               (cdr g$a$25730$1LXXoO)))
                                           (if (eqv?
                                                 g$t$25732$1LXXoO
                                                 '#\b)
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$25730$1LXXoO)
                                                   '2)
                                                 g$p$25724$1LXXoO)
                                               (g$loop$25728$1LXXoO
                                                 (g$fx+$23888$1LXXoO
                                                   g$n$25729$1LXXoO
                                                   '2)
                                                 (cdr g$a$25730$1LXXoO)))
                                             (if (eqv?
                                                   g$t$25732$1LXXoO
                                                   '#\o)
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$25730$1LXXoO)
                                                     '8)
                                                   g$p$25724$1LXXoO)
                                                 (g$loop$25728$1LXXoO
                                                   (g$fx+$23888$1LXXoO
                                                     g$n$25729$1LXXoO
                                                     '2)
                                                   (cdr g$a$25730$1LXXoO)))
                                               (if (eqv?
                                                     g$t$25732$1LXXoO
                                                     '#\x)
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$25730$1LXXoO)
                                                       '16)
                                                     g$p$25724$1LXXoO)
                                                   (g$loop$25728$1LXXoO
                                                     (g$fx+$23888$1LXXoO
                                                       g$n$25729$1LXXoO
                                                       '2)
                                                     (cdr g$a$25730$1LXXoO)))
                                                 (if (eqv?
                                                       g$t$25732$1LXXoO
                                                       '#\d)
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$25730$1LXXoO)
                                                         '10)
                                                       g$p$25724$1LXXoO)
                                                     (g$loop$25728$1LXXoO
                                                       (g$fx+$23888$1LXXoO
                                                         g$n$25729$1LXXoO
                                                         '2)
                                                       (cdr g$a$25730$1LXXoO)))
                                                   (if (eqv?
                                                         g$t$25732$1LXXoO
                                                         '#\~)
                                                     (begin
                                                       (g$write-char$25566$1LXXoO
                                                         '#\~
                                                         g$p$25724$1LXXoO)
                                                       (g$loop$25728$1LXXoO
                                                         (g$fx+$23888$1LXXoO
                                                           g$n$25729$1LXXoO
                                                           '2)
                                                         g$a$25730$1LXXoO))
                                                     (begin
                                                       '#f
                                                       (g$write-char$25566$1LXXoO
                                                         g$c$25731$1LXXoO
                                                         g$p$25724$1LXXoO)
                                                       (g$loop$25728$1LXXoO
                                                         (g$fx+$23888$1LXXoO
                                                           g$n$25729$1LXXoO
                                                           '1)
                                                         g$a$25730$1LXXoO)))))))))))
                                    (string-ref
                                      g$cntl$25725$1LXXoO
                                      (g$fx+$23888$1LXXoO
                                        g$n$25729$1LXXoO
                                        '1)))
                                   (begin
                                     (g$write-char$25566$1LXXoO
                                       g$c$25731$1LXXoO
                                       g$p$25724$1LXXoO)
                                     (g$loop$25728$1LXXoO
                                       (g$fx+$23888$1LXXoO
                                         g$n$25729$1LXXoO
                                         '1)
                                       g$a$25730$1LXXoO)))))
                              (string-ref
                                g$cntl$25725$1LXXoO
                                g$n$25729$1LXXoO))
                             (void))))))
               g$loop$25728$1LXXoO)
             '0
             g$args$25726$1LXXoO)))
         (g$fx-$23890$1LXXoO (string-length g$cntl$25725$1LXXoO) '1)))))
   (g$printf$25721$1LXXoO
     g$printf$25743$1LXXoO
     (case-lambda
       ((g$control$25733$1LXXoO . g$args$25734$1LXXoO)
        (g$dofmt$25720$1LXXoO
          (current-output-port)
          g$control$25733$1LXXoO
          g$args$25734$1LXXoO))))
   (g$fprintf$25722$1LXXoO
     g$fprintf$25744$1LXXoO
     (case-lambda
       ((g$p$25735$1LXXoO g$control$25736$1LXXoO . g$args$25737$1LXXoO)
        (g$dofmt$25720$1LXXoO
          g$p$25735$1LXXoO
          g$control$25736$1LXXoO
          g$args$25737$1LXXoO))))
   (g$format$25723$1LXXoO
     g$format$25745$1LXXoO
     (case-lambda
       ((g$control$25738$1LXXoO . g$args$25739$1LXXoO)
        (call-with-values
          g$open-string-output-port$25505$1LXXoO
          (case-lambda
            ((g$p$25740$1LXXoO g$c$25741$1LXXoO)
             (begin
               (g$dofmt$25720$1LXXoO
                 g$p$25740$1LXXoO
                 g$control$25738$1LXXoO
                 g$args$25739$1LXXoO)
               (g$c$25741$1LXXoO)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$25746$1LXXoO
     g$make-traced-macro$25749$1LXXoO
     (case-lambda
       ((g$name$25747$1LXXoO g$x$25748$1LXXoO)
        (if (g$procedure?$20059$1LXXoO g$x$25748$1LXXoO)
          (make-traced-procedure
            g$name$25747$1LXXoO
            g$x$25748$1LXXoO
            g$syntax->datum$31303$1LXXoO)
          (if (g$variable-transformer?$31124$1LXXoO g$x$25748$1LXXoO)
            (g$make-variable-transformer$31122$1LXXoO
              (make-traced-procedure
                g$name$25747$1LXXoO
                (g$variable-transformer-procedure$31125$1LXXoO
                  g$x$25748$1LXXoO)
                g$syntax->datum$31303$1LXXoO))
            (begin '#f g$x$25748$1LXXoO)))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$25750$1LXXoO
     g$library-version-mismatch-warning$25951$1LXXoO
     (case-lambda
       ((g$name$25923$1LXXoO
          g$depname$25924$1LXXoO
          g$filename$25925$1LXXoO)
        (g$fprintf$25744$1LXXoO
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$25923$1LXXoO
          g$depname$25924$1LXXoO
          g$filename$25925$1LXXoO))))
   (g$file-locator-resolution-error$25751$1LXXoO
     g$file-locator-resolution-error$25952$1LXXoO
     (case-lambda
       ((g$libname$25926$1LXXoO g$failed-list$25927$1LXXoO)
        (letrec* ((g$8628$25928$1LXXoO
                    (make-record-type-descriptor
                      '&library-resolution
                      g$&condition-rtd$21158$1LXXoO
                      'g$8631$1LXXoO
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$8630$25929$1LXXoO '#f)
                  (g$8629$25930$1LXXoO
                    (make-record-constructor-descriptor
                      g$8628$25928$1LXXoO
                      g$&condition-rcd$21159$1LXXoO
                      g$8630$25929$1LXXoO))
                  (g$8627$25933$1LXXoO
                    (record-predicate g$8628$25928$1LXXoO))
                  (g$make-library-resolution-condition$25934$1LXXoO
                    (record-constructor g$8629$25930$1LXXoO))
                  (g$8625$25935$1LXXoO
                    (record-accessor g$8628$25928$1LXXoO '0))
                  (g$8626$25936$1LXXoO
                    (record-accessor g$8628$25928$1LXXoO '1))
                  (g$library-resolution-condition?$25937$1LXXoO
                    (condition-predicate g$8628$25928$1LXXoO))
                  (g$condition-library$25938$1LXXoO
                    (condition-accessor
                      g$8628$25928$1LXXoO
                      g$8625$25935$1LXXoO))
                  (g$condition-files$25939$1LXXoO
                    (condition-accessor
                      g$8628$25928$1LXXoO
                      g$8626$25936$1LXXoO)))
          (raise
            (condition
              (g$make-error$21190$1LXXoO)
              (g$make-who-condition$21224$1LXXoO 'expander)
              (g$make-message-condition$21164$1LXXoO
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$25934$1LXXoO
                g$libname$25926$1LXXoO
                g$failed-list$25927$1LXXoO)))))))
   (g$read-library-source-file$25752$1LXXoO
     g$read-library-source-file$25953$1LXXoO
     (case-lambda
       ((g$file-name$25940$1LXXoO)
        (g$with-input-from-file$25567$1LXXoO
          g$file-name$25940$1LXXoO
          read-annotated))))
   (g$make-parameter$25753$1LXXoO
     g$make-parameter$25954$1LXXoO
     (case-lambda
       ((g$x$25941$1LXXoO)
        (g$make-parameter$25753$1LXXoO
          g$x$25941$1LXXoO
          (case-lambda ((g$x$25942$1LXXoO) g$x$25942$1LXXoO))))
       ((g$x$25943$1LXXoO g$fender$25944$1LXXoO)
        (begin
          (if (not (g$procedure?$20059$1LXXoO g$fender$25944$1LXXoO))
            (g$assertion-error$31296$1LXXoO
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(90,8) - (90,36)"))
            (void))
          ((case-lambda
             ((g$x$25945$1LXXoO)
              (case-lambda
                (() g$x$25945$1LXXoO)
                ((g$v$25946$1LXXoO)
                 (set! g$x$25945$1LXXoO
                   (g$fender$25944$1LXXoO g$v$25946$1LXXoO))))))
           (g$fender$25944$1LXXoO g$x$25943$1LXXoO))))))
   (g$file-options-constructor$25919$1LXXoO
     g$file-options-constructor$25955$1LXXoO
     (g$make-parameter$25753$1LXXoO '#f))
   (g$file-options-spec$25920$1LXXoO
     g$file-options-spec$25956$1LXXoO
     (case-lambda
       ((g$x$25947$1LXXoO)
        ((g$file-options-constructor$25919$1LXXoO) g$x$25947$1LXXoO))))
   (g$set-label-binding!$25921$1LXXoO
     g$set-label-binding!$25957$1LXXoO
     (case-lambda
       ((g$label$25948$1LXXoO g$binding$25949$1LXXoO)
        (set-symbol-value!
          g$label$25948$1LXXoO
          g$binding$25949$1LXXoO))))
   (g$label-binding$25922$1LXXoO
     g$label-binding$25958$1LXXoO
     (case-lambda
       ((g$label$25950$1LXXoO)
        (if (symbol-bound? g$label$25950$1LXXoO)
          (begin '#f (symbol-value g$label$25950$1LXXoO))
          '#f)))))
  (void))

(library-letrec* (ironscheme pretty-print)
  ((g$genwrite:newline-str$25959$1LXXoO
     g$genwrite:newline-str$26152$1LXXoO
     (make-string '1 '#\newline))
   (g$symbol->string$25960$1LXXoO
     g$symbol->string$26153$1LXXoO
     (case-lambda
       ((g$s$25972$1LXXoO)
        (symbol->string
          (if (g$pretty-gensyms$25969$1LXXoO)
            (ungensym g$s$25972$1LXXoO)
            g$s$25972$1LXXoO)))))
   (g$read-macro-body$25961$1LXXoO
     g$read-macro-body$26154$1LXXoO
     (case-lambda
       ((g$l$25973$1LXXoO) (g$cadr$20076$1LXXoO g$l$25973$1LXXoO))))
   (g$read-macro-prefix$25962$1LXXoO
     g$read-macro-prefix$26155$1LXXoO
     (case-lambda
       ((g$l$25974$1LXXoO)
        ((case-lambda
           ((g$head$25975$1LXXoO g$tail$25976$1LXXoO)
            ((case-lambda
               ((g$t$25977$1LXXoO)
                (if (eqv? g$t$25977$1LXXoO 'syntax)
                  '"#'"
                  (if (eqv? g$t$25977$1LXXoO 'quasisyntax)
                    '"#`"
                    (if (eqv? g$t$25977$1LXXoO 'unsyntax)
                      '"#,"
                      (if (eqv? g$t$25977$1LXXoO 'unsyntax-splicing)
                        '"#,@"
                        (if (eqv? g$t$25977$1LXXoO 'quote)
                          '"'"
                          (if (eqv? g$t$25977$1LXXoO 'quasiquote)
                            '"`"
                            (if (eqv? g$t$25977$1LXXoO 'unquote)
                              '","
                              (if (eqv?
                                    g$t$25977$1LXXoO
                                    'unquote-splicing)
                                '",@"
                                (if '#f '#f (void))))))))))))
             g$head$25975$1LXXoO)))
         (car g$l$25974$1LXXoO)
         (cdr g$l$25974$1LXXoO)))))
   (g$length1?$25963$1LXXoO
     g$length1?$26156$1LXXoO
     (case-lambda
       ((g$l$25978$1LXXoO)
        (if (pair? g$l$25978$1LXXoO)
          (begin '#f (null? (cdr g$l$25978$1LXXoO)))
          '#f))))
   (g$read-macro?$25964$1LXXoO
     g$read-macro?$26157$1LXXoO
     (case-lambda
       ((g$l$25979$1LXXoO)
        ((case-lambda
           ((g$head$25980$1LXXoO g$tail$25981$1LXXoO)
            ((case-lambda
               ((g$t$25982$1LXXoO)
                (if (g$memv$19218$1LXXoO
                      g$t$25982$1LXXoO
                      '(quote
                         quasiquote
                         unquote
                         unquote-splicing
                         syntax
                         quasisyntax
                         unsyntax
                         unsyntax-splicing))
                  (g$length1?$25963$1LXXoO g$tail$25981$1LXXoO)
                  (begin '#f '#f))))
             g$head$25980$1LXXoO)))
         (car g$l$25979$1LXXoO)
         (cdr g$l$25979$1LXXoO)))))
   (g$generic-write$25965$1LXXoO
     g$generic-write$26158$1LXXoO
     (case-lambda
       ((g$obj$25983$1LXXoO
          g$display?$25984$1LXXoO
          g$width$25985$1LXXoO
          g$output$25986$1LXXoO)
        (letrec* ((g$out$25987$1LXXoO
                    (case-lambda
                      ((g$str$26136$1LXXoO g$col$26137$1LXXoO)
                       (if g$col$26137$1LXXoO
                         (if (g$output$25986$1LXXoO g$str$26136$1LXXoO)
                           (begin
                             '#f
                             (g$fx+$23888$1LXXoO
                               g$col$26137$1LXXoO
                               (string-length g$str$26136$1LXXoO)))
                           '#f)
                         '#f))))
                  (g$wr$25988$1LXXoO
                    (case-lambda
                      ((g$obj$26119$1LXXoO g$col$26120$1LXXoO)
                       (letrec* ((g$wr-expr$26121$1LXXoO
                                   (case-lambda
                                     ((g$expr$26134$1LXXoO
                                        g$col$26135$1LXXoO)
                                      (if (g$read-macro?$25964$1LXXoO
                                            g$expr$26134$1LXXoO)
                                        (g$wr$25988$1LXXoO
                                          (g$read-macro-body$25961$1LXXoO
                                            g$expr$26134$1LXXoO)
                                          (g$out$25987$1LXXoO
                                            (g$read-macro-prefix$25962$1LXXoO
                                              g$expr$26134$1LXXoO)
                                            g$col$26135$1LXXoO))
                                        (g$wr-lst$26122$1LXXoO
                                          g$expr$26134$1LXXoO
                                          g$col$26135$1LXXoO)))))
                                 (g$wr-lst$26122$1LXXoO
                                   (case-lambda
                                     ((g$l$26129$1LXXoO
                                        g$col$26130$1LXXoO)
                                      (if (pair? g$l$26129$1LXXoO)
                                        ((letrec ((g$loop$26131$1LXXoO
                                                    (case-lambda
                                                      ((g$l$26132$1LXXoO
                                                         g$col$26133$1LXXoO)
                                                       (if (not g$col$26133$1LXXoO)
                                                         g$col$26133$1LXXoO
                                                         (if (pair?
                                                               g$l$26132$1LXXoO)
                                                           (g$loop$26131$1LXXoO
                                                             (cdr g$l$26132$1LXXoO)
                                                             (g$wr$25988$1LXXoO
                                                               (car g$l$26132$1LXXoO)
                                                               (g$out$25987$1LXXoO
                                                                 '" "
                                                                 g$col$26133$1LXXoO)))
                                                           (if (null?
                                                                 g$l$26132$1LXXoO)
                                                             (g$out$25987$1LXXoO
                                                               '")"
                                                               g$col$26133$1LXXoO)
                                                             (begin
                                                               '#f
                                                               (g$out$25987$1LXXoO
                                                                 '")"
                                                                 (g$wr$25988$1LXXoO
                                                                   g$l$26132$1LXXoO
                                                                   (g$out$25987$1LXXoO
                                                                     '" . "
                                                                     g$col$26133$1LXXoO)))))))))))
                                           g$loop$26131$1LXXoO)
                                         (cdr g$l$26129$1LXXoO)
                                         (if g$col$26130$1LXXoO
                                           (begin
                                             '#f
                                             (g$wr$25988$1LXXoO
                                               (car g$l$26129$1LXXoO)
                                               (g$out$25987$1LXXoO
                                                 '"("
                                                 g$col$26130$1LXXoO)))
                                           '#f))
                                        (g$out$25987$1LXXoO
                                          '"()"
                                          g$col$26130$1LXXoO))))))
                         (if (pair? g$obj$26119$1LXXoO)
                           (g$wr-expr$26121$1LXXoO
                             g$obj$26119$1LXXoO
                             g$col$26120$1LXXoO)
                           (if (null? g$obj$26119$1LXXoO)
                             (g$wr-lst$26122$1LXXoO
                               g$obj$26119$1LXXoO
                               g$col$26120$1LXXoO)
                             (if (g$vector?$20055$1LXXoO
                                   g$obj$26119$1LXXoO)
                               (g$wr-lst$26122$1LXXoO
                                 (vector->list g$obj$26119$1LXXoO)
                                 (g$out$25987$1LXXoO
                                   '"#"
                                   g$col$26120$1LXXoO))
                               (if (g$boolean?$20058$1LXXoO
                                     g$obj$26119$1LXXoO)
                                 (g$out$25987$1LXXoO
                                   (if g$obj$26119$1LXXoO '"#t" '"#f")
                                   g$col$26120$1LXXoO)
                                 (if (g$number?$20698$1LXXoO
                                       g$obj$26119$1LXXoO)
                                   (g$out$25987$1LXXoO
                                     (number->string g$obj$26119$1LXXoO)
                                     g$col$26120$1LXXoO)
                                   (if (g$symbol?$20057$1LXXoO
                                         g$obj$26119$1LXXoO)
                                     (g$out$25987$1LXXoO
                                       (g$symbol->string$25960$1LXXoO
                                         g$obj$26119$1LXXoO)
                                       g$col$26120$1LXXoO)
                                     (if (string? g$obj$26119$1LXXoO)
                                       (if g$display?$25984$1LXXoO
                                         (g$out$25987$1LXXoO
                                           g$obj$26119$1LXXoO
                                           g$col$26120$1LXXoO)
                                         ((letrec ((g$loop$26123$1LXXoO
                                                     (case-lambda
                                                       ((g$i$26124$1LXXoO
                                                          g$j$26125$1LXXoO
                                                          g$col$26126$1LXXoO)
                                                        (if (if g$col$26126$1LXXoO
                                                              (begin
                                                                '#f
                                                                (g$fx<?$23902$1LXXoO
                                                                  g$j$26125$1LXXoO
                                                                  (string-length
                                                                    g$obj$26119$1LXXoO)))
                                                              '#f)
                                                          ((case-lambda
                                                             ((g$c$26127$1LXXoO)
                                                              (if ((case-lambda
                                                                     ((g$t$26128$1LXXoO)
                                                                      (if g$t$26128$1LXXoO
                                                                        g$t$26128$1LXXoO
                                                                        (begin
                                                                          '#f
                                                                          (g$char=?$20116$1LXXoO
                                                                            g$c$26127$1LXXoO
                                                                            '#\")))))
                                                                   (g$char=?$20116$1LXXoO
                                                                     g$c$26127$1LXXoO
                                                                     '#\\))
                                                                (g$loop$26123$1LXXoO
                                                                  g$j$26125$1LXXoO
                                                                  (g$fx+$23888$1LXXoO
                                                                    g$j$26125$1LXXoO
                                                                    '1)
                                                                  (g$out$25987$1LXXoO
                                                                    '"\\"
                                                                    (g$out$25987$1LXXoO
                                                                      (substring
                                                                        g$obj$26119$1LXXoO
                                                                        g$i$26124$1LXXoO
                                                                        g$j$26125$1LXXoO)
                                                                      g$col$26126$1LXXoO)))
                                                                (g$loop$26123$1LXXoO
                                                                  g$i$26124$1LXXoO
                                                                  (g$fx+$23888$1LXXoO
                                                                    g$j$26125$1LXXoO
                                                                    '1)
                                                                  g$col$26126$1LXXoO))))
                                                           (string-ref
                                                             g$obj$26119$1LXXoO
                                                             g$j$26125$1LXXoO))
                                                          (g$out$25987$1LXXoO
                                                            '"\""
                                                            (g$out$25987$1LXXoO
                                                              (substring
                                                                g$obj$26119$1LXXoO
                                                                g$i$26124$1LXXoO
                                                                g$j$26125$1LXXoO)
                                                              g$col$26126$1LXXoO)))))))
                                            g$loop$26123$1LXXoO)
                                          '0
                                          '0
                                          (g$out$25987$1LXXoO
                                            '"\""
                                            g$col$26120$1LXXoO)))
                                       (begin
                                         '#f
                                         (g$out$25987$1LXXoO
                                           (g$format$25745$1LXXoO
                                             (if g$display?$25984$1LXXoO
                                               '"~a"
                                               '"~s")
                                             g$obj$26119$1LXXoO)
                                           g$col$26120$1LXXoO)))))))))))))
                  (g$pp$25989$1LXXoO
                    (case-lambda
                      ((g$obj$25990$1LXXoO g$col$25991$1LXXoO)
                       (letrec* ((g$spaces$25992$1LXXoO
                                   (case-lambda
                                     ((g$n$26117$1LXXoO
                                        g$col$26118$1LXXoO)
                                      (if (g$fx>?$23904$1LXXoO
                                            g$n$26117$1LXXoO
                                            '0)
                                        (if (g$fx>?$23904$1LXXoO
                                              g$n$26117$1LXXoO
                                              '7)
                                          (g$spaces$25992$1LXXoO
                                            (g$fx-$23890$1LXXoO
                                              g$n$26117$1LXXoO
                                              '8)
                                            (g$out$25987$1LXXoO
                                              '"        "
                                              g$col$26118$1LXXoO))
                                          (g$out$25987$1LXXoO
                                            (substring
                                              '"        "
                                              '0
                                              g$n$26117$1LXXoO)
                                            g$col$26118$1LXXoO))
                                        g$col$26118$1LXXoO))))
                                 (g$indent$25993$1LXXoO
                                   (case-lambda
                                     ((g$to$26115$1LXXoO
                                        g$col$26116$1LXXoO)
                                      (if g$col$26116$1LXXoO
                                        (begin
                                          '#f
                                          (if (g$fx<?$23902$1LXXoO
                                                g$to$26115$1LXXoO
                                                g$col$26116$1LXXoO)
                                            (if (g$out$25987$1LXXoO
                                                  g$genwrite:newline-str$25959$1LXXoO
                                                  g$col$26116$1LXXoO)
                                              (begin
                                                '#f
                                                (g$spaces$25992$1LXXoO
                                                  g$to$26115$1LXXoO
                                                  '0))
                                              '#f)
                                            (g$spaces$25992$1LXXoO
                                              (g$fx-$23890$1LXXoO
                                                g$to$26115$1LXXoO
                                                g$col$26116$1LXXoO)
                                              g$col$26116$1LXXoO)))
                                        '#f))))
                                 (g$pr$25994$1LXXoO
                                   (case-lambda
                                     ((g$obj$26107$1LXXoO
                                        g$col$26108$1LXXoO
                                        g$extra$26109$1LXXoO
                                        g$pp-pair$26110$1LXXoO)
                                      (if ((case-lambda
                                             ((g$t$26111$1LXXoO)
                                              (if g$t$26111$1LXXoO
                                                g$t$26111$1LXXoO
                                                (begin
                                                  '#f
                                                  (g$vector?$20055$1LXXoO
                                                    g$obj$26107$1LXXoO)))))
                                           (pair? g$obj$26107$1LXXoO))
                                        ((case-lambda
                                           ((g$result$26112$1LXXoO
                                              g$left$26113$1LXXoO)
                                            (begin
                                              (g$generic-write$25965$1LXXoO
                                                g$obj$26107$1LXXoO
                                                g$display?$25984$1LXXoO
                                                '#f
                                                (case-lambda
                                                  ((g$str$26114$1LXXoO)
                                                   (begin
                                                     (set! g$result$26112$1LXXoO
                                                       (cons
                                                         g$str$26114$1LXXoO
                                                         g$result$26112$1LXXoO))
                                                     (set! g$left$26113$1LXXoO
                                                       (g$fx-$23890$1LXXoO
                                                         g$left$26113$1LXXoO
                                                         (string-length
                                                           g$str$26114$1LXXoO)))
                                                     (g$fx>?$23904$1LXXoO
                                                       g$left$26113$1LXXoO
                                                       '0)))))
                                              (if (g$fx>?$23904$1LXXoO
                                                    g$left$26113$1LXXoO
                                                    '0)
                                                (g$out$25987$1LXXoO
                                                  (g$reverse-string-append$25970$1LXXoO
                                                    g$result$26112$1LXXoO)
                                                  g$col$26108$1LXXoO)
                                                (if (pair?
                                                      g$obj$26107$1LXXoO)
                                                  (g$pp-pair$26110$1LXXoO
                                                    g$obj$26107$1LXXoO
                                                    g$col$26108$1LXXoO
                                                    g$extra$26109$1LXXoO)
                                                  (g$pp-list$25997$1LXXoO
                                                    (vector->list
                                                      g$obj$26107$1LXXoO)
                                                    (g$out$25987$1LXXoO
                                                      '"#"
                                                      g$col$26108$1LXXoO)
                                                    g$extra$26109$1LXXoO
                                                    g$pp-expr$25995$1LXXoO))))))
                                         '()
                                         (g$min$20106$1LXXoO
                                           (g$fx+$23888$1LXXoO
                                             (g$fx-$23890$1LXXoO
                                               (g$fx-$23890$1LXXoO
                                                 g$width$25985$1LXXoO
                                                 g$col$26108$1LXXoO)
                                               g$extra$26109$1LXXoO)
                                             '1)
                                           (g$pretty-width$25966$1LXXoO)))
                                        (g$wr$25988$1LXXoO
                                          g$obj$26107$1LXXoO
                                          g$col$26108$1LXXoO)))))
                                 (g$pp-expr$25995$1LXXoO
                                   (case-lambda
                                     ((g$expr$26102$1LXXoO
                                        g$col$26103$1LXXoO
                                        g$extra$26104$1LXXoO)
                                      (if (g$read-macro?$25964$1LXXoO
                                            g$expr$26102$1LXXoO)
                                        (g$pr$25994$1LXXoO
                                          (g$read-macro-body$25961$1LXXoO
                                            g$expr$26102$1LXXoO)
                                          (g$out$25987$1LXXoO
                                            (g$read-macro-prefix$25962$1LXXoO
                                              g$expr$26102$1LXXoO)
                                            g$col$26103$1LXXoO)
                                          g$extra$26104$1LXXoO
                                          g$pp-expr$25995$1LXXoO)
                                        ((case-lambda
                                           ((g$head$26105$1LXXoO)
                                            (if (g$symbol?$20057$1LXXoO
                                                  g$head$26105$1LXXoO)
                                              ((case-lambda
                                                 ((g$proc$26106$1LXXoO)
                                                  (if g$proc$26106$1LXXoO
                                                    (g$proc$26106$1LXXoO
                                                      g$expr$26102$1LXXoO
                                                      g$col$26103$1LXXoO
                                                      g$extra$26104$1LXXoO)
                                                    (if (g$fx>?$23904$1LXXoO
                                                          (string-length
                                                            (g$symbol->string$25960$1LXXoO
                                                              g$head$26105$1LXXoO))
                                                          (g$max-call-head-width$25968$1LXXoO))
                                                      (g$pp-general$25999$1LXXoO
                                                        g$expr$26102$1LXXoO
                                                        g$col$26103$1LXXoO
                                                        g$extra$26104$1LXXoO
                                                        '#f
                                                        '#f
                                                        '#f
                                                        g$pp-expr$25995$1LXXoO)
                                                      (g$pp-call$25996$1LXXoO
                                                        g$expr$26102$1LXXoO
                                                        g$col$26103$1LXXoO
                                                        g$extra$26104$1LXXoO
                                                        g$pp-expr$25995$1LXXoO)))))
                                               (g$style$26011$1LXXoO
                                                 g$head$26105$1LXXoO))
                                              (g$pp-list$25997$1LXXoO
                                                g$expr$26102$1LXXoO
                                                g$col$26103$1LXXoO
                                                g$extra$26104$1LXXoO
                                                g$pp-expr$25995$1LXXoO))))
                                         (car g$expr$26102$1LXXoO))))))
                                 (g$pp-call$25996$1LXXoO
                                   (case-lambda
                                     ((g$expr$26097$1LXXoO
                                        g$col$26098$1LXXoO
                                        g$extra$26099$1LXXoO
                                        g$pp-item$26100$1LXXoO)
                                      ((case-lambda
                                         ((g$col*$26101$1LXXoO)
                                          (if g$col$26098$1LXXoO
                                            (begin
                                              '#f
                                              (g$pp-down$25998$1LXXoO
                                                (cdr g$expr$26097$1LXXoO)
                                                g$col*$26101$1LXXoO
                                                (g$fx+$23888$1LXXoO
                                                  g$col*$26101$1LXXoO
                                                  '1)
                                                g$extra$26099$1LXXoO
                                                g$pp-item$26100$1LXXoO))
                                            '#f)))
                                       (g$wr$25988$1LXXoO
                                         (car g$expr$26097$1LXXoO)
                                         (g$out$25987$1LXXoO
                                           '"("
                                           g$col$26098$1LXXoO))))))
                                 (g$pp-list$25997$1LXXoO
                                   (case-lambda
                                     ((g$l$26092$1LXXoO
                                        g$col$26093$1LXXoO
                                        g$extra$26094$1LXXoO
                                        g$pp-item$26095$1LXXoO)
                                      ((case-lambda
                                         ((g$col$26096$1LXXoO)
                                          (g$pp-down$25998$1LXXoO
                                            g$l$26092$1LXXoO
                                            g$col$26096$1LXXoO
                                            g$col$26096$1LXXoO
                                            g$extra$26094$1LXXoO
                                            g$pp-item$26095$1LXXoO)))
                                       (g$out$25987$1LXXoO
                                         '"("
                                         g$col$26093$1LXXoO)))))
                                 (g$pp-down$25998$1LXXoO
                                   (case-lambda
                                     ((g$l$26082$1LXXoO
                                        g$col1$26083$1LXXoO
                                        g$col2$26084$1LXXoO
                                        g$extra$26085$1LXXoO
                                        g$pp-item$26086$1LXXoO)
                                      ((letrec ((g$loop$26087$1LXXoO
                                                  (case-lambda
                                                    ((g$l$26088$1LXXoO
                                                       g$col$26089$1LXXoO)
                                                     (if g$col$26089$1LXXoO
                                                       (begin
                                                         '#f
                                                         (if (pair?
                                                               g$l$26088$1LXXoO)
                                                           ((case-lambda
                                                              ((g$rest$26090$1LXXoO)
                                                               ((case-lambda
                                                                  ((g$extra$26091$1LXXoO)
                                                                   (g$loop$26087$1LXXoO
                                                                     g$rest$26090$1LXXoO
                                                                     (g$pr$25994$1LXXoO
                                                                       (car g$l$26088$1LXXoO)
                                                                       (g$indent$25993$1LXXoO
                                                                         g$col2$26084$1LXXoO
                                                                         g$col$26089$1LXXoO)
                                                                       g$extra$26091$1LXXoO
                                                                       g$pp-item$26086$1LXXoO))))
                                                                (if (null?
                                                                      g$rest$26090$1LXXoO)
                                                                  (g$fx+$23888$1LXXoO
                                                                    g$extra$26085$1LXXoO
                                                                    '1)
                                                                  '0))))
                                                            (cdr g$l$26088$1LXXoO))
                                                           (if (null?
                                                                 g$l$26088$1LXXoO)
                                                             (g$out$25987$1LXXoO
                                                               '")"
                                                               g$col$26089$1LXXoO)
                                                             (begin
                                                               '#f
                                                               (g$out$25987$1LXXoO
                                                                 '")"
                                                                 (g$pr$25994$1LXXoO
                                                                   g$l$26088$1LXXoO
                                                                   (g$indent$25993$1LXXoO
                                                                     g$col2$26084$1LXXoO
                                                                     (g$out$25987$1LXXoO
                                                                       '"."
                                                                       (g$indent$25993$1LXXoO
                                                                         g$col2$26084$1LXXoO
                                                                         g$col$26089$1LXXoO)))
                                                                   (g$fx+$23888$1LXXoO
                                                                     g$extra$26085$1LXXoO
                                                                     '1)
                                                                   g$pp-item$26086$1LXXoO))))))
                                                       '#f)))))
                                         g$loop$26087$1LXXoO)
                                       g$l$26082$1LXXoO
                                       g$col1$26083$1LXXoO))))
                                 (g$pp-general$25999$1LXXoO
                                   (case-lambda
                                     ((g$expr$26049$1LXXoO
                                        g$col$26050$1LXXoO
                                        g$extra$26051$1LXXoO
                                        g$named?$26052$1LXXoO
                                        g$pp-1$26053$1LXXoO
                                        g$pp-2$26054$1LXXoO
                                        g$pp-3$26055$1LXXoO)
                                      (letrec* ((g$tail1$26056$1LXXoO
                                                  (case-lambda
                                                    ((g$rest$26075$1LXXoO
                                                       g$col1$26076$1LXXoO
                                                       g$col2$26077$1LXXoO
                                                       g$col3$26078$1LXXoO)
                                                     (if (if g$pp-1$26053$1LXXoO
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$26075$1LXXoO))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$26079$1LXXoO)
                                                           ((case-lambda
                                                              ((g$rest$26080$1LXXoO)
                                                               ((case-lambda
                                                                  ((g$extra$26081$1LXXoO)
                                                                   (g$tail2$26057$1LXXoO
                                                                     g$rest$26080$1LXXoO
                                                                     g$col1$26076$1LXXoO
                                                                     (g$pr$25994$1LXXoO
                                                                       g$val1$26079$1LXXoO
                                                                       (g$indent$25993$1LXXoO
                                                                         g$col3$26078$1LXXoO
                                                                         g$col2$26077$1LXXoO)
                                                                       g$extra$26081$1LXXoO
                                                                       g$pp-1$26053$1LXXoO)
                                                                     g$col3$26078$1LXXoO)))
                                                                (if (null?
                                                                      g$rest$26080$1LXXoO)
                                                                  (g$fx+$23888$1LXXoO
                                                                    g$extra$26051$1LXXoO
                                                                    '1)
                                                                  '0))))
                                                            (cdr g$rest$26075$1LXXoO))))
                                                        (car g$rest$26075$1LXXoO))
                                                       (g$tail2$26057$1LXXoO
                                                         g$rest$26075$1LXXoO
                                                         g$col1$26076$1LXXoO
                                                         g$col2$26077$1LXXoO
                                                         g$col3$26078$1LXXoO)))))
                                                (g$tail2$26057$1LXXoO
                                                  (case-lambda
                                                    ((g$rest$26068$1LXXoO
                                                       g$col1$26069$1LXXoO
                                                       g$col2$26070$1LXXoO
                                                       g$col3$26071$1LXXoO)
                                                     (if (if g$pp-2$26054$1LXXoO
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$26068$1LXXoO))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$26072$1LXXoO)
                                                           ((case-lambda
                                                              ((g$rest$26073$1LXXoO)
                                                               ((case-lambda
                                                                  ((g$extra$26074$1LXXoO)
                                                                   (g$tail3$26058$1LXXoO
                                                                     g$rest$26073$1LXXoO
                                                                     g$col1$26069$1LXXoO
                                                                     (g$pr$25994$1LXXoO
                                                                       g$val1$26072$1LXXoO
                                                                       (g$indent$25993$1LXXoO
                                                                         g$col3$26071$1LXXoO
                                                                         g$col2$26070$1LXXoO)
                                                                       g$extra$26074$1LXXoO
                                                                       g$pp-2$26054$1LXXoO))))
                                                                (if (null?
                                                                      g$rest$26073$1LXXoO)
                                                                  (g$fx+$23888$1LXXoO
                                                                    g$extra$26051$1LXXoO
                                                                    '1)
                                                                  '0))))
                                                            (cdr g$rest$26068$1LXXoO))))
                                                        (car g$rest$26068$1LXXoO))
                                                       (g$tail3$26058$1LXXoO
                                                         g$rest$26068$1LXXoO
                                                         g$col1$26069$1LXXoO
                                                         g$col2$26070$1LXXoO)))))
                                                (g$tail3$26058$1LXXoO
                                                  (case-lambda
                                                    ((g$rest$26065$1LXXoO
                                                       g$col1$26066$1LXXoO
                                                       g$col2$26067$1LXXoO)
                                                     (g$pp-down$25998$1LXXoO
                                                       g$rest$26065$1LXXoO
                                                       g$col2$26067$1LXXoO
                                                       g$col1$26066$1LXXoO
                                                       g$extra$26051$1LXXoO
                                                       g$pp-3$26055$1LXXoO)))))
                                        ((case-lambda
                                           ((g$head$26059$1LXXoO)
                                            ((case-lambda
                                               ((g$rest$26060$1LXXoO)
                                                ((case-lambda
                                                   ((g$col*$26061$1LXXoO)
                                                    (if (if g$named?$26052$1LXXoO
                                                          (begin
                                                            '#f
                                                            (pair?
                                                              g$rest$26060$1LXXoO))
                                                          '#f)
                                                      ((case-lambda
                                                         ((g$name$26062$1LXXoO)
                                                          ((case-lambda
                                                             ((g$rest$26063$1LXXoO)
                                                              ((case-lambda
                                                                 ((g$col**$26064$1LXXoO)
                                                                  (g$tail1$26056$1LXXoO
                                                                    g$rest$26063$1LXXoO
                                                                    (g$fx+$23888$1LXXoO
                                                                      g$col$26050$1LXXoO
                                                                      (g$indent-general$25967$1LXXoO))
                                                                    g$col**$26064$1LXXoO
                                                                    (g$fx+$23888$1LXXoO
                                                                      g$col**$26064$1LXXoO
                                                                      '1))))
                                                               (g$wr$25988$1LXXoO
                                                                 g$name$26062$1LXXoO
                                                                 (g$out$25987$1LXXoO
                                                                   '" "
                                                                   g$col*$26061$1LXXoO)))))
                                                           (cdr g$rest$26060$1LXXoO))))
                                                       (car g$rest$26060$1LXXoO))
                                                      (g$tail1$26056$1LXXoO
                                                        g$rest$26060$1LXXoO
                                                        (g$fx+$23888$1LXXoO
                                                          g$col$26050$1LXXoO
                                                          (g$indent-general$25967$1LXXoO))
                                                        g$col*$26061$1LXXoO
                                                        (g$fx+$23888$1LXXoO
                                                          g$col*$26061$1LXXoO
                                                          '1)))))
                                                 (g$wr$25988$1LXXoO
                                                   g$head$26059$1LXXoO
                                                   (g$out$25987$1LXXoO
                                                     '"("
                                                     g$col$26050$1LXXoO)))))
                                             (cdr g$expr$26049$1LXXoO))))
                                         (car g$expr$26049$1LXXoO))))))
                                 (g$pp-expr-list$26000$1LXXoO
                                   (case-lambda
                                     ((g$l$26046$1LXXoO
                                        g$col$26047$1LXXoO
                                        g$extra$26048$1LXXoO)
                                      (g$pp-list$25997$1LXXoO
                                        g$l$26046$1LXXoO
                                        g$col$26047$1LXXoO
                                        g$extra$26048$1LXXoO
                                        g$pp-expr$25995$1LXXoO))))
                                 (g$pp-SYNTAX-CASE$26001$1LXXoO
                                   (case-lambda
                                     ((g$expr$26043$1LXXoO
                                        g$col$26044$1LXXoO
                                        g$extra$26045$1LXXoO)
                                      (g$pp-general$25999$1LXXoO
                                        g$expr$26043$1LXXoO
                                        g$col$26044$1LXXoO
                                        g$extra$26045$1LXXoO
                                        '#t
                                        g$pp-expr-list$26000$1LXXoO
                                        '#f
                                        g$pp-expr$25995$1LXXoO))))
                                 (g$pp-LAMBDA$26002$1LXXoO
                                   (case-lambda
                                     ((g$expr$26040$1LXXoO
                                        g$col$26041$1LXXoO
                                        g$extra$26042$1LXXoO)
                                      (g$pp-general$25999$1LXXoO
                                        g$expr$26040$1LXXoO
                                        g$col$26041$1LXXoO
                                        g$extra$26042$1LXXoO
                                        '#f
                                        g$pp-expr-list$26000$1LXXoO
                                        '#f
                                        g$pp-expr$25995$1LXXoO))))
                                 (g$pp-IF$26003$1LXXoO
                                   (case-lambda
                                     ((g$expr$26037$1LXXoO
                                        g$col$26038$1LXXoO
                                        g$extra$26039$1LXXoO)
                                      (g$pp-general$25999$1LXXoO
                                        g$expr$26037$1LXXoO
                                        g$col$26038$1LXXoO
                                        g$extra$26039$1LXXoO
                                        '#f
                                        g$pp-expr$25995$1LXXoO
                                        '#f
                                        g$pp-expr$25995$1LXXoO))))
                                 (g$pp-COND$26004$1LXXoO
                                   (case-lambda
                                     ((g$expr$26034$1LXXoO
                                        g$col$26035$1LXXoO
                                        g$extra$26036$1LXXoO)
                                      (g$pp-call$25996$1LXXoO
                                        g$expr$26034$1LXXoO
                                        g$col$26035$1LXXoO
                                        g$extra$26036$1LXXoO
                                        g$pp-expr-list$26000$1LXXoO))))
                                 (g$pp-CASE$26005$1LXXoO
                                   (case-lambda
                                     ((g$expr$26031$1LXXoO
                                        g$col$26032$1LXXoO
                                        g$extra$26033$1LXXoO)
                                      (g$pp-general$25999$1LXXoO
                                        g$expr$26031$1LXXoO
                                        g$col$26032$1LXXoO
                                        g$extra$26033$1LXXoO
                                        '#f
                                        g$pp-expr$25995$1LXXoO
                                        '#f
                                        g$pp-expr-list$26000$1LXXoO))))
                                 (g$pp-CASE-LAMBDA$26006$1LXXoO
                                   (case-lambda
                                     ((g$expr$26028$1LXXoO
                                        g$col$26029$1LXXoO
                                        g$extra$26030$1LXXoO)
                                      (g$pp-general$25999$1LXXoO
                                        g$expr$26028$1LXXoO
                                        g$col$26029$1LXXoO
                                        g$extra$26030$1LXXoO
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr-list$26000$1LXXoO))))
                                 (g$pp-AND$26007$1LXXoO
                                   (case-lambda
                                     ((g$expr$26025$1LXXoO
                                        g$col$26026$1LXXoO
                                        g$extra$26027$1LXXoO)
                                      (g$pp-call$25996$1LXXoO
                                        g$expr$26025$1LXXoO
                                        g$col$26026$1LXXoO
                                        g$extra$26027$1LXXoO
                                        g$pp-expr$25995$1LXXoO))))
                                 (g$pp-LET$26008$1LXXoO
                                   (case-lambda
                                     ((g$expr$26020$1LXXoO
                                        g$col$26021$1LXXoO
                                        g$extra$26022$1LXXoO)
                                      ((case-lambda
                                         ((g$rest$26023$1LXXoO)
                                          ((case-lambda
                                             ((g$named?$26024$1LXXoO)
                                              (g$pp-general$25999$1LXXoO
                                                g$expr$26020$1LXXoO
                                                g$col$26021$1LXXoO
                                                g$extra$26022$1LXXoO
                                                g$named?$26024$1LXXoO
                                                g$pp-expr-list$26000$1LXXoO
                                                '#f
                                                g$pp-expr$25995$1LXXoO)))
                                           (if (pair?
                                                 g$rest$26023$1LXXoO)
                                             (begin
                                               '#f
                                               (g$symbol?$20057$1LXXoO
                                                 (car g$rest$26023$1LXXoO)))
                                             '#f))))
                                       (cdr g$expr$26020$1LXXoO)))))
                                 (g$pp-BEGIN$26009$1LXXoO
                                   (case-lambda
                                     ((g$expr$26017$1LXXoO
                                        g$col$26018$1LXXoO
                                        g$extra$26019$1LXXoO)
                                      (g$pp-general$25999$1LXXoO
                                        g$expr$26017$1LXXoO
                                        g$col$26018$1LXXoO
                                        g$extra$26019$1LXXoO
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr$25995$1LXXoO))))
                                 (g$pp-DO$26010$1LXXoO
                                   (case-lambda
                                     ((g$expr$26014$1LXXoO
                                        g$col$26015$1LXXoO
                                        g$extra$26016$1LXXoO)
                                      (g$pp-general$25999$1LXXoO
                                        g$expr$26014$1LXXoO
                                        g$col$26015$1LXXoO
                                        g$extra$26016$1LXXoO
                                        '#f
                                        g$pp-expr-list$26000$1LXXoO
                                        g$pp-expr-list$26000$1LXXoO
                                        g$pp-expr$25995$1LXXoO))))
                                 (g$style$26011$1LXXoO
                                   (case-lambda
                                     ((g$head$26012$1LXXoO)
                                      ((case-lambda
                                         ((g$t$26013$1LXXoO)
                                          (if (g$memv$19218$1LXXoO
                                                g$t$26013$1LXXoO
                                                '(lambda let*
                                                   letrec
                                                   letrec*
                                                   define
                                                   define-syntax
                                                   syntax-rules
                                                   let-syntax
                                                   letrec-syntax
                                                   with-syntax
                                                   library
                                                   library-letrec*))
                                            g$pp-LAMBDA$26002$1LXXoO
                                            (if (eqv?
                                                  g$t$26013$1LXXoO
                                                  'syntax-case)
                                              g$pp-SYNTAX-CASE$26001$1LXXoO
                                              (if (g$memv$19218$1LXXoO
                                                    g$t$26013$1LXXoO
                                                    '(if set!
                                                       when
                                                       unless))
                                                g$pp-IF$26003$1LXXoO
                                                (if (eqv?
                                                      g$t$26013$1LXXoO
                                                      'cond)
                                                  g$pp-COND$26004$1LXXoO
                                                  (if (eqv?
                                                        g$t$26013$1LXXoO
                                                        'case-lambda)
                                                    g$pp-CASE-LAMBDA$26006$1LXXoO
                                                    (if (eqv?
                                                          g$t$26013$1LXXoO
                                                          'case)
                                                      g$pp-CASE$26005$1LXXoO
                                                      (if (g$memv$19218$1LXXoO
                                                            g$t$26013$1LXXoO
                                                            '(and or
                                                                  import
                                                                  export))
                                                        g$pp-AND$26007$1LXXoO
                                                        (if (eqv?
                                                              g$t$26013$1LXXoO
                                                              'let)
                                                          g$pp-LET$26008$1LXXoO
                                                          (if (eqv?
                                                                g$t$26013$1LXXoO
                                                                'begin)
                                                            g$pp-BEGIN$26009$1LXXoO
                                                            (if (eqv?
                                                                  g$t$26013$1LXXoO
                                                                  'do)
                                                              g$pp-DO$26010$1LXXoO
                                                              (begin
                                                                '#f
                                                                '#f)))))))))))))
                                       g$head$26012$1LXXoO)))))
                         (g$pr$25994$1LXXoO
                           g$obj$25990$1LXXoO
                           g$col$25991$1LXXoO
                           '0
                           g$pp-expr$25995$1LXXoO))))))
          (if g$width$25985$1LXXoO
            (g$out$25987$1LXXoO
              g$genwrite:newline-str$25959$1LXXoO
              (g$pp$25989$1LXXoO g$obj$25983$1LXXoO '0))
            (g$wr$25988$1LXXoO g$obj$25983$1LXXoO '0))))))
   (g$pretty-width$25966$1LXXoO
     g$pretty-width$26159$1LXXoO
     (g$make-parameter$25954$1LXXoO '72))
   (g$indent-general$25967$1LXXoO
     g$indent-general$26160$1LXXoO
     (g$make-parameter$25954$1LXXoO '2))
   (g$max-call-head-width$25968$1LXXoO
     g$max-call-head-width$26161$1LXXoO
     (g$make-parameter$25954$1LXXoO '3))
   (g$pretty-gensyms$25969$1LXXoO
     g$pretty-gensyms$26162$1LXXoO
     (g$make-parameter$25954$1LXXoO '#f))
   (g$reverse-string-append$25970$1LXXoO
     g$reverse-string-append$26163$1LXXoO
     (case-lambda
       ((g$l$26138$1LXXoO)
        (letrec* ((g$rev-string-append$26139$1LXXoO
                    (case-lambda
                      ((g$l$26140$1LXXoO g$i$26141$1LXXoO)
                       (if (pair? g$l$26140$1LXXoO)
                         ((case-lambda
                            ((g$str$26142$1LXXoO)
                             ((case-lambda
                                ((g$len$26143$1LXXoO)
                                 ((case-lambda
                                    ((g$result$26144$1LXXoO)
                                     ((letrec ((g$loop$26145$1LXXoO
                                                 (case-lambda
                                                   ((g$j$26146$1LXXoO
                                                      g$k$26147$1LXXoO)
                                                    (if (g$fx<?$23902$1LXXoO
                                                          g$j$26146$1LXXoO
                                                          g$len$26143$1LXXoO)
                                                      (begin
                                                        (string-set!
                                                          g$result$26144$1LXXoO
                                                          g$k$26147$1LXXoO
                                                          (string-ref
                                                            g$str$26142$1LXXoO
                                                            g$j$26146$1LXXoO))
                                                        (g$loop$26145$1LXXoO
                                                          (g$fx+$23888$1LXXoO
                                                            g$j$26146$1LXXoO
                                                            '1)
                                                          (g$fx+$23888$1LXXoO
                                                            g$k$26147$1LXXoO
                                                            '1)))
                                                      g$result$26144$1LXXoO)))))
                                        g$loop$26145$1LXXoO)
                                      '0
                                      (g$fx-$23890$1LXXoO
                                        (g$fx-$23890$1LXXoO
                                          (string-length
                                            g$result$26144$1LXXoO)
                                          g$i$26141$1LXXoO)
                                        g$len$26143$1LXXoO))))
                                  (g$rev-string-append$26139$1LXXoO
                                    (cdr g$l$26140$1LXXoO)
                                    (g$fx+$23888$1LXXoO
                                      g$i$26141$1LXXoO
                                      g$len$26143$1LXXoO)))))
                              (string-length g$str$26142$1LXXoO))))
                          (car g$l$26140$1LXXoO))
                         (make-string g$i$26141$1LXXoO))))))
          (g$rev-string-append$26139$1LXXoO g$l$26138$1LXXoO '0)))))
   (g$pretty-print$25971$1LXXoO
     g$pretty-print$26164$1LXXoO
     (case-lambda
       ((g$obj$26148$1LXXoO . g$opt$26149$1LXXoO)
        ((case-lambda
           ((g$port$26150$1LXXoO)
            (g$generic-write$25965$1LXXoO
              g$obj$26148$1LXXoO
              '#f
              (g$pretty-width$25966$1LXXoO)
              (case-lambda
                ((g$s$26151$1LXXoO)
                 (begin
                   (display g$s$26151$1LXXoO g$port$26150$1LXXoO)
                   '#t))))))
         (if (pair? g$opt$26149$1LXXoO)
           (car g$opt$26149$1LXXoO)
           (current-output-port)))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$26165$1LXXoO
     g$cps/generate-reference$26430$1LXXoO
     (case-lambda
       ((g$variable$26218$1LXXoO)
        (g$cps/generate-operand$26169$1LXXoO
          (g$make-reference$26195$1LXXoO g$variable$26218$1LXXoO)))))
   (g$cps/generate-literal$26166$1LXXoO
     g$cps/generate-literal$26431$1LXXoO
     (case-lambda
       ((g$datum$26219$1LXXoO)
        (g$cps/generate-operand$26169$1LXXoO
          (g$make-literal$26194$1LXXoO g$datum$26219$1LXXoO)))))
   (g$cps/generate-abstraction$26167$1LXXoO
     g$cps/generate-abstraction$26432$1LXXoO
     (case-lambda
       ((g$bvl$26220$1LXXoO g$body-generator$26221$1LXXoO)
        (g$cps/generate-operand$26169$1LXXoO
          (g$make-user-abstraction$26196$1LXXoO
            g$bvl$26220$1LXXoO
            (case-lambda
              ((g$continuation-variable$26222$1LXXoO)
               (g$body-generator$26221$1LXXoO
                 (g$variable-continuator$26182$1LXXoO
                   g$continuation-variable$26222$1LXXoO)))))))))
   (g$cps/generate-abstractions$26168$1LXXoO
     g$cps/generate-abstractions$26433$1LXXoO
     (case-lambda
       ((g$bvls$26223$1LXXoO g$body-generators$26224$1LXXoO)
        (g$cps/generate-operand$26169$1LXXoO
          (g$make-user-abstractions$26197$1LXXoO
            g$bvls$26223$1LXXoO
            (g$map$19225$1LXXoO
              (case-lambda
                ((g$body-generator$26225$1LXXoO)
                 (case-lambda
                   ((g$continuation-variable$26226$1LXXoO)
                    (g$body-generator$26225$1LXXoO
                      (g$variable-continuator$26182$1LXXoO
                        g$continuation-variable$26226$1LXXoO))))))
              g$body-generators$26224$1LXXoO))))))
   (g$cps/generate-operand$26169$1LXXoO
     g$cps/generate-operand$26434$1LXXoO
     (case-lambda
       ((g$operand$26227$1LXXoO)
        (case-lambda
          ((g$continuator$26228$1LXXoO)
           (g$continue-with-operand$26185$1LXXoO
             g$continuator$26228$1LXXoO
             g$operand$26227$1LXXoO))))))
   (g$cps/generate-conditional$26170$1LXXoO
     g$cps/generate-conditional$26435$1LXXoO
     (case-lambda
       ((g$condition-generator$26229$1LXXoO
          g$consequent-generator$26230$1LXXoO
          g$alternative-generator$26231$1LXXoO)
        (case-lambda
          ((g$continuator$26232$1LXXoO)
           (letrec* ((g$if-variable$26233$1LXXoO
                       (case-lambda
                         ((g$continuation-variable$26235$1LXXoO)
                          ((case-lambda
                             ((g$continuator*$26236$1LXXoO)
                              (g$condition-generator$26229$1LXXoO
                                (g$conditional-continuator$26181$1LXXoO
                                  (case-lambda
                                    ((g$condition$26237$1LXXoO)
                                     (g$make-conditional$26204$1LXXoO
                                       g$condition$26237$1LXXoO
                                       (g$consequent-generator$26230$1LXXoO
                                         g$continuator*$26236$1LXXoO)
                                       (g$alternative-generator$26231$1LXXoO
                                         g$continuator*$26236$1LXXoO))))))))
                           (g$variable-continuator$26182$1LXXoO
                             g$continuation-variable$26235$1LXXoO))))))
             (g$reify-continuation*$26187$1LXXoO
               g$continuator$26232$1LXXoO
               g$if-variable$26233$1LXXoO
               (case-lambda
                 ((g$continuation-abstraction$26234$1LXXoO)
                  (g$make-conditional-join$26205$1LXXoO
                    g$continuation-abstraction$26234$1LXXoO
                    g$if-variable$26233$1LXXoO))))))))))
   (g$cps/generate-recursive-bind$26171$1LXXoO
     g$cps/generate-recursive-bind$26436$1LXXoO
     (case-lambda
       ((g$variables$26238$1LXXoO
          g$generators$26239$1LXXoO
          g$body-generator$26240$1LXXoO)
        (case-lambda
          ((g$continuator$26241$1LXXoO)
           (g$make-recursive-bind$26199$1LXXoO
             g$variables$26238$1LXXoO
             (g$map$19225$1LXXoO
               (case-lambda
                 ((g$generator$26242$1LXXoO)
                  (case-lambda
                    ((g$continuation-variable$26243$1LXXoO)
                     (g$generator$26242$1LXXoO
                       (g$variable-continuator$26182$1LXXoO
                         g$continuation-variable$26243$1LXXoO))))))
               g$generators$26239$1LXXoO)
             (g$body-generator$26240$1LXXoO
               (g$reified-continuator$26184$1LXXoO
                 g$continuator$26241$1LXXoO))))))))
   (g$cps/generate-recursive*-bind$26172$1LXXoO
     g$cps/generate-recursive*-bind$26437$1LXXoO
     (case-lambda
       ((g$variables$26244$1LXXoO
          g$generators$26245$1LXXoO
          g$body-generator$26246$1LXXoO)
        (case-lambda
          ((g$continuator$26247$1LXXoO)
           (g$make-recursive*-bind$26200$1LXXoO
             g$variables$26244$1LXXoO
             (g$map$19225$1LXXoO
               (case-lambda
                 ((g$generator$26248$1LXXoO)
                  (case-lambda
                    ((g$continuation-variable$26249$1LXXoO)
                     (g$generator$26248$1LXXoO
                       (g$variable-continuator$26182$1LXXoO
                         g$continuation-variable$26249$1LXXoO))))))
               g$generators$26245$1LXXoO)
             (g$body-generator$26246$1LXXoO
               (g$reified-continuator$26184$1LXXoO
                 g$continuator$26247$1LXXoO))))))))
   (g$cps/generate-recursive*-library-bind$26173$1LXXoO
     g$cps/generate-recursive*-library-bind$26438$1LXXoO
     (case-lambda
       ((g$name$26250$1LXXoO
          g$variables$26251$1LXXoO
          g$variables*$26252$1LXXoO
          g$generators$26253$1LXXoO
          g$body-generator$26254$1LXXoO)
        (case-lambda
          ((g$continuator$26255$1LXXoO)
           (g$make-recursive*-library-bind$26201$1LXXoO
             g$name$26250$1LXXoO
             g$variables$26251$1LXXoO
             g$variables*$26252$1LXXoO
             (g$map$19225$1LXXoO
               (case-lambda
                 ((g$generator$26256$1LXXoO)
                  (case-lambda
                    ((g$continuation-variable$26257$1LXXoO)
                     (g$generator$26256$1LXXoO
                       (g$variable-continuator$26182$1LXXoO
                         g$continuation-variable$26257$1LXXoO))))))
               g$generators$26253$1LXXoO)
             (g$body-generator$26254$1LXXoO
               (g$reified-continuator$26184$1LXXoO
                 g$continuator$26255$1LXXoO))))))))
   (g$cps/generate-sequence$26174$1LXXoO
     g$cps/generate-sequence$26439$1LXXoO
     (case-lambda
       ((g$generators$26258$1LXXoO)
        (case-lambda
          ((g$continuator$26259$1LXXoO)
           ((letrec ((g$recur$26260$1LXXoO
                       (case-lambda
                         ((g$generators$26261$1LXXoO)
                          ((car g$generators$26261$1LXXoO)
                           ((case-lambda
                              ((g$generators$26262$1LXXoO)
                               (if (pair? g$generators$26262$1LXXoO)
                                 (g$effect-continuator$26180$1LXXoO
                                   (case-lambda
                                     (()
                                      (g$recur$26260$1LXXoO
                                        g$generators$26262$1LXXoO))))
                                 g$continuator$26259$1LXXoO)))
                            (cdr g$generators$26261$1LXXoO)))))))
              g$recur$26260$1LXXoO)
            g$generators$26258$1LXXoO))))))
   (g$cps/generate-assignment$26175$1LXXoO
     g$cps/generate-assignment$26440$1LXXoO
     (case-lambda
       ((g$location$26263$1LXXoO g$expression-generator$26264$1LXXoO)
        (case-lambda
          ((g$continuator$26265$1LXXoO)
           (g$expression-generator$26264$1LXXoO
             (g$operand-continuator$26179$1LXXoO
               (case-lambda
                 ((g$operand$26266$1LXXoO)
                  (g$make-assignment$26207$1LXXoO
                    g$location$26263$1LXXoO
                    g$operand$26266$1LXXoO
                    (g$continue-with-operand$26185$1LXXoO
                      g$continuator$26265$1LXXoO
                      '(cps-void))))))))))))
   (g$cps/generate-declaration$26176$1LXXoO
     g$cps/generate-declaration$26441$1LXXoO
     (case-lambda
       ((g$location$26267$1LXXoO g$expression-generator$26268$1LXXoO)
        (case-lambda
          ((g$continuator$26269$1LXXoO)
           (g$expression-generator$26268$1LXXoO
             (g$operand-continuator$26179$1LXXoO
               (case-lambda
                 ((g$operand$26270$1LXXoO)
                  (g$make-declaration$26208$1LXXoO
                    g$location$26267$1LXXoO
                    g$operand$26270$1LXXoO
                    (g$continue-with-operand$26185$1LXXoO
                      g$continuator$26269$1LXXoO
                      '(cps-void))))))))))))
   (g$cps/generate-combination$26177$1LXXoO
     g$cps/generate-combination$26442$1LXXoO
     (case-lambda
       ((g$operator-generator$26271$1LXXoO
          g$operand-generators$26272$1LXXoO)
        (g$cps/generate-subproblems$26178$1LXXoO
          (g$reverse$20074$1LXXoO
            (cons
              g$operator-generator$26271$1LXXoO
              g$operand-generators$26272$1LXXoO))
          (case-lambda
            ((g$operands$26273$1LXXoO g$continuator$26274$1LXXoO)
             (g$make-combination$26202$1LXXoO
               (car g$operands$26273$1LXXoO)
               (g$reify-continuation$26186$1LXXoO
                 g$continuator$26274$1LXXoO)
               (cdr g$operands$26273$1LXXoO))))))))
   (g$cps/generate-subproblems$26178$1LXXoO
     g$cps/generate-subproblems$26443$1LXXoO
     (case-lambda
       ((g$generators$26275$1LXXoO g$combiner$26276$1LXXoO)
        (case-lambda
          ((g$continuator$26277$1LXXoO)
           ((letrec ((g$recur$26278$1LXXoO
                       (case-lambda
                         ((g$generators$26279$1LXXoO
                            g$operands$26280$1LXXoO)
                          (if (pair? g$generators$26279$1LXXoO)
                            ((car g$generators$26279$1LXXoO)
                             ((case-lambda
                                ((g$generators$26281$1LXXoO)
                                 (g$operand-continuator$26179$1LXXoO
                                   (case-lambda
                                     ((g$operand$26282$1LXXoO)
                                      (g$recur$26278$1LXXoO
                                        g$generators$26281$1LXXoO
                                        (cons
                                          g$operand$26282$1LXXoO
                                          g$operands$26280$1LXXoO)))))))
                              (cdr g$generators$26279$1LXXoO)))
                            (g$combiner$26276$1LXXoO
                              g$operands$26280$1LXXoO
                              g$continuator$26277$1LXXoO))))))
              g$recur$26278$1LXXoO)
            g$generators$26275$1LXXoO
            '()))))))
   (g$operand-continuator$26179$1LXXoO
     g$operand-continuator$26444$1LXXoO
     (case-lambda
       ((g$generator$26283$1LXXoO)
        (case-lambda
          ((g$if-operand$26284$1LXXoO
             g$if-effect$26285$1LXXoO
             g$if-conditional$26286$1LXXoO
             g$if-variable$26287$1LXXoO
             g$if-inline$26288$1LXXoO)
           (begin
             g$if-effect$26285$1LXXoO
             g$if-conditional$26286$1LXXoO
             g$if-variable$26287$1LXXoO
             g$if-inline$26288$1LXXoO
             (g$if-operand$26284$1LXXoO g$generator$26283$1LXXoO)))))))
   (g$effect-continuator$26180$1LXXoO
     g$effect-continuator$26445$1LXXoO
     (case-lambda
       ((g$generator$26289$1LXXoO)
        (case-lambda
          ((g$if-operand$26290$1LXXoO
             g$if-effect$26291$1LXXoO
             g$if-conditional$26292$1LXXoO
             g$if-variable$26293$1LXXoO
             g$if-inline$26294$1LXXoO)
           (begin
             g$if-operand$26290$1LXXoO
             g$if-conditional$26292$1LXXoO
             g$if-variable$26293$1LXXoO
             g$if-inline$26294$1LXXoO
             (g$if-effect$26291$1LXXoO g$generator$26289$1LXXoO)))))))
   (g$conditional-continuator$26181$1LXXoO
     g$conditional-continuator$26446$1LXXoO
     (case-lambda
       ((g$generator$26295$1LXXoO)
        (case-lambda
          ((g$if-operand$26296$1LXXoO
             g$if-effect$26297$1LXXoO
             g$if-conditional$26298$1LXXoO
             g$if-variable$26299$1LXXoO
             g$if-inline$26300$1LXXoO)
           (begin
             g$if-operand$26296$1LXXoO
             g$if-effect$26297$1LXXoO
             g$if-variable$26299$1LXXoO
             g$if-inline$26300$1LXXoO
             (g$if-conditional$26298$1LXXoO
               g$generator$26295$1LXXoO)))))))
   (g$variable-continuator$26182$1LXXoO
     g$variable-continuator$26447$1LXXoO
     (case-lambda
       ((g$variable$26301$1LXXoO)
        (case-lambda
          ((g$if-operand$26302$1LXXoO
             g$if-effect$26303$1LXXoO
             g$if-conditional$26304$1LXXoO
             g$if-variable$26305$1LXXoO
             g$if-inline$26306$1LXXoO)
           (begin
             g$if-operand$26302$1LXXoO
             g$if-effect$26303$1LXXoO
             g$if-variable$26305$1LXXoO
             g$if-inline$26306$1LXXoO
             (g$if-variable$26305$1LXXoO g$variable$26301$1LXXoO)))))))
   (g$inline-continuator$26183$1LXXoO
     g$inline-continuator$26448$1LXXoO
     (case-lambda
       ((g$continuation$26307$1LXXoO)
        (case-lambda
          ((g$if-operand$26308$1LXXoO
             g$if-effect$26309$1LXXoO
             g$if-conditional$26310$1LXXoO
             g$if-variable$26311$1LXXoO
             g$if-inline$26312$1LXXoO)
           (begin
             g$if-operand$26308$1LXXoO
             g$if-effect$26309$1LXXoO
             g$if-conditional$26310$1LXXoO
             g$if-variable$26311$1LXXoO
             (g$if-inline$26312$1LXXoO
               g$continuation$26307$1LXXoO)))))))
   (g$reified-continuator$26184$1LXXoO
     g$reified-continuator$26449$1LXXoO
     (case-lambda
       ((g$continuator$26313$1LXXoO)
        (case-lambda
          ((g$if-operand$26314$1LXXoO
             g$if-effect$26315$1LXXoO
             g$if-conditional$26316$1LXXoO
             g$if-variable$26317$1LXXoO
             g$if-inline$26318$1LXXoO)
           (begin
             g$if-operand$26314$1LXXoO
             g$if-effect$26315$1LXXoO
             g$if-conditional$26316$1LXXoO
             (g$reify-continuation*$26187$1LXXoO
               g$continuator$26313$1LXXoO
               g$if-variable$26317$1LXXoO
               g$if-inline$26318$1LXXoO)))))))
   (g$continue-with-operand$26185$1LXXoO
     g$continue-with-operand$26450$1LXXoO
     (case-lambda
       ((g$continuator$26319$1LXXoO g$operand$26320$1LXXoO)
        (g$continuator$26319$1LXXoO
          (case-lambda
            ((g$generator$26321$1LXXoO)
             (g$generator$26321$1LXXoO g$operand$26320$1LXXoO)))
          (case-lambda
            ((g$generator$26322$1LXXoO) (g$generator$26322$1LXXoO)))
          (case-lambda
            ((g$generator$26323$1LXXoO)
             (g$generator$26323$1LXXoO
               (g$make-truth-test$26209$1LXXoO
                 g$operand$26320$1LXXoO))))
          (case-lambda
            ((g$continuation-variable$26324$1LXXoO)
             (g$make-return$26203$1LXXoO
               (g$make-reference$26195$1LXXoO
                 g$continuation-variable$26324$1LXXoO)
               (list g$operand$26320$1LXXoO))))
          (case-lambda
            ((g$continuation-abstraction$26325$1LXXoO)
             (g$make-return$26203$1LXXoO
               g$continuation-abstraction$26325$1LXXoO
               (list g$operand$26320$1LXXoO))))))))
   (g$reify-continuation$26186$1LXXoO
     g$reify-continuation$26451$1LXXoO
     (case-lambda
       ((g$continuator$26326$1LXXoO)
        (g$continuator$26326$1LXXoO
          g$operand-continuation-reifier$26189$1LXXoO
          g$effect-continuation-reifier$26191$1LXXoO
          g$conditional-continuation-reifier$26193$1LXXoO
          (case-lambda
            ((g$variable$26327$1LXXoO)
             (g$make-reference$26195$1LXXoO g$variable$26327$1LXXoO)))
          (case-lambda
            ((g$continuation$26328$1LXXoO)
             g$continuation$26328$1LXXoO))))))
   (g$reify-continuation*$26187$1LXXoO
     g$reify-continuation*$26452$1LXXoO
     (case-lambda
       ((g$continuator$26329$1LXXoO
          g$if-variable$26330$1LXXoO
          g$if-inline$26331$1LXXoO)
        (g$continuator$26329$1LXXoO
          (g$operand-continuation-reifier*$26188$1LXXoO
            g$if-inline$26331$1LXXoO)
          (g$effect-continuation-reifier*$26190$1LXXoO
            g$if-inline$26331$1LXXoO)
          (g$conditional-continuation-reifier*$26192$1LXXoO
            g$if-inline$26331$1LXXoO)
          g$if-variable$26330$1LXXoO
          g$if-inline$26331$1LXXoO))))
   (g$operand-continuation-reifier*$26188$1LXXoO
     g$operand-continuation-reifier*$26453$1LXXoO
     (case-lambda
       ((g$receiver$26332$1LXXoO)
        (case-lambda
          ((g$generator$26333$1LXXoO)
           (g$receiver$26332$1LXXoO
             ((case-lambda
                ((g$variable$26334$1LXXoO)
                 (g$make-continuation-abstraction$26198$1LXXoO
                   (list g$variable$26334$1LXXoO)
                   (g$generator$26333$1LXXoO
                     (g$make-reference$26195$1LXXoO
                       g$variable$26334$1LXXoO)))))
              (g$generate-variable$26210$1LXXoO 'V))))))))
   (g$operand-continuation-reifier$26189$1LXXoO
     g$operand-continuation-reifier$26454$1LXXoO
     (g$operand-continuation-reifier*$26188$1LXXoO values))
   (g$effect-continuation-reifier*$26190$1LXXoO
     g$effect-continuation-reifier*$26455$1LXXoO
     (case-lambda
       ((g$receiver$26335$1LXXoO)
        (case-lambda
          ((g$generator$26336$1LXXoO)
           (g$receiver$26335$1LXXoO
             ((case-lambda
                ((g$variable$26337$1LXXoO)
                 (g$make-continuation-abstraction$26198$1LXXoO
                   g$variable$26337$1LXXoO
                   (g$generator$26336$1LXXoO))))
              (g$generate-variable$26210$1LXXoO 'IGNORE))))))))
   (g$effect-continuation-reifier$26191$1LXXoO
     g$effect-continuation-reifier$26456$1LXXoO
     (g$effect-continuation-reifier*$26190$1LXXoO values))
   (g$conditional-continuation-reifier*$26192$1LXXoO
     g$conditional-continuation-reifier*$26457$1LXXoO
     (case-lambda
       ((g$receiver$26338$1LXXoO)
        (case-lambda
          ((g$generator$26339$1LXXoO)
           (g$receiver$26338$1LXXoO
             ((case-lambda
                ((g$variable$26340$1LXXoO)
                 (g$make-continuation-abstraction$26198$1LXXoO
                   (list g$variable$26340$1LXXoO)
                   (g$generator$26339$1LXXoO
                     (g$make-truth-test$26209$1LXXoO
                       (g$make-reference$26195$1LXXoO
                         g$variable$26340$1LXXoO))))))
              (g$generate-variable$26210$1LXXoO 'T))))))))
   (g$conditional-continuation-reifier$26193$1LXXoO
     g$conditional-continuation-reifier$26458$1LXXoO
     (g$conditional-continuation-reifier*$26192$1LXXoO values))
   (g$make-literal$26194$1LXXoO
     g$make-literal$26459$1LXXoO
     (case-lambda
       ((g$datum$26341$1LXXoO) (list 'quote g$datum$26341$1LXXoO))))
   (g$make-reference$26195$1LXXoO
     g$make-reference$26460$1LXXoO
     (case-lambda ((g$variable$26342$1LXXoO) g$variable$26342$1LXXoO)))
   (g$make-user-abstraction$26196$1LXXoO
     g$make-user-abstraction$26461$1LXXoO
     (case-lambda
       ((g$bvl$26343$1LXXoO g$body-constructor$26344$1LXXoO)
        ((case-lambda
           ((g$continuation$26345$1LXXoO)
            (list
              'case-lambda
              (list
                (cons g$continuation$26345$1LXXoO g$bvl$26343$1LXXoO)
                (g$body-constructor$26344$1LXXoO
                  g$continuation$26345$1LXXoO)))))
         (g$generate-variable$26210$1LXXoO 'C)))))
   (g$make-user-abstractions$26197$1LXXoO
     g$make-user-abstractions$26462$1LXXoO
     (case-lambda
       ((g$bvls$26346$1LXXoO g$body-constructors$26347$1LXXoO)
        ((case-lambda
           ((g$continuation$26348$1LXXoO)
            (cons
              'case-lambda
              (g$map$19225$1LXXoO
                (case-lambda
                  ((g$bvl$26349$1LXXoO g$body-constructor$26350$1LXXoO)
                   (list
                     (cons
                       g$continuation$26348$1LXXoO
                       g$bvl$26349$1LXXoO)
                     (g$body-constructor$26350$1LXXoO
                       g$continuation$26348$1LXXoO))))
                g$bvls$26346$1LXXoO
                g$body-constructors$26347$1LXXoO))))
         (g$generate-variable$26210$1LXXoO 'C)))))
   (g$make-continuation-abstraction$26198$1LXXoO
     g$make-continuation-abstraction$26463$1LXXoO
     (case-lambda
       ((g$bvl$26351$1LXXoO g$body$26352$1LXXoO)
        (list
          'case-lambda
          (list g$bvl$26351$1LXXoO g$body$26352$1LXXoO)))))
   (g$make-recursive-bind$26199$1LXXoO
     g$make-recursive-bind$26464$1LXXoO
     (case-lambda
       ((g$variables$26353$1LXXoO
          g$constructors$26354$1LXXoO
          g$body$26355$1LXXoO)
        (list
          'letrec
          (g$map$19225$1LXXoO
            (case-lambda
              ((g$variable$26356$1LXXoO g$constructor$26357$1LXXoO)
               (list
                 g$variable$26356$1LXXoO
                 (list
                   (g$make-user-abstraction$26196$1LXXoO
                     '()
                     g$constructor$26357$1LXXoO)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$26356$1LXXoO))))))
            g$variables$26353$1LXXoO
            g$constructors$26354$1LXXoO)
          g$body$26355$1LXXoO))))
   (g$make-recursive*-bind$26200$1LXXoO
     g$make-recursive*-bind$26465$1LXXoO
     (case-lambda
       ((g$variables$26358$1LXXoO
          g$constructors$26359$1LXXoO
          g$body$26360$1LXXoO)
        (list
          'letrec*
          (g$map$19225$1LXXoO
            (case-lambda
              ((g$variable$26361$1LXXoO g$constructor$26362$1LXXoO)
               (list
                 g$variable$26361$1LXXoO
                 (list
                   (g$make-user-abstraction$26196$1LXXoO
                     '()
                     g$constructor$26362$1LXXoO)
                   (list
                     'letrec*-identity
                     (list 'quote g$variable$26361$1LXXoO))))))
            g$variables$26358$1LXXoO
            g$constructors$26359$1LXXoO)
          g$body$26360$1LXXoO))))
   (g$make-recursive*-library-bind$26201$1LXXoO
     g$make-recursive*-library-bind$26466$1LXXoO
     (case-lambda
       ((g$name$26363$1LXXoO
          g$variables$26364$1LXXoO
          g$variables*$26365$1LXXoO
          g$constructors$26366$1LXXoO
          g$body$26367$1LXXoO)
        (list
          'library-letrec*
          g$name$26363$1LXXoO
          (g$map$19225$1LXXoO
            (case-lambda
              ((g$variable$26368$1LXXoO
                 g$variable*$26369$1LXXoO
                 g$constructor$26370$1LXXoO)
               (list
                 g$variable$26368$1LXXoO
                 g$variable*$26369$1LXXoO
                 (list
                   (g$make-user-abstraction$26196$1LXXoO
                     '()
                     g$constructor$26370$1LXXoO)
                   (list
                     'library-letrec*-identity
                     (list 'quote g$variable$26368$1LXXoO))))))
            g$variables$26364$1LXXoO
            g$variables*$26365$1LXXoO
            g$constructors$26366$1LXXoO)
          g$body$26367$1LXXoO))))
   (g$make-combination$26202$1LXXoO
     g$make-combination$26467$1LXXoO
     (case-lambda
       ((g$operator$26371$1LXXoO
          g$continuation$26372$1LXXoO
          g$operands$26373$1LXXoO)
        (cons
          g$operator$26371$1LXXoO
          (cons g$continuation$26372$1LXXoO g$operands$26373$1LXXoO)))))
   (g$make-return$26203$1LXXoO
     g$make-return$26468$1LXXoO
     (case-lambda
       ((g$continuation$26374$1LXXoO g$operands$26375$1LXXoO)
        (cons g$continuation$26374$1LXXoO g$operands$26375$1LXXoO))))
   (g$make-conditional$26204$1LXXoO
     g$make-conditional$26469$1LXXoO
     (case-lambda
       ((g$condition$26376$1LXXoO
          g$consequent$26377$1LXXoO
          g$alternative$26378$1LXXoO)
        (list
          'if
          g$condition$26376$1LXXoO
          g$consequent$26377$1LXXoO
          g$alternative$26378$1LXXoO))))
   (g$make-conditional-join$26205$1LXXoO
     g$make-conditional-join$26470$1LXXoO
     (case-lambda
       ((g$continuation$26379$1LXXoO g$constructor$26380$1LXXoO)
        ((case-lambda
           ((g$variable$26381$1LXXoO)
            (g$make-let$26206$1LXXoO
              (list g$variable$26381$1LXXoO)
              (list g$continuation$26379$1LXXoO)
              (g$constructor$26380$1LXXoO g$variable$26381$1LXXoO))))
         (g$generate-variable$26210$1LXXoO 'J)))))
   (g$make-let$26206$1LXXoO
     g$make-let$26471$1LXXoO
     (case-lambda
       ((g$variables$26382$1LXXoO
          g$expressions$26383$1LXXoO
          g$body$26384$1LXXoO)
        (cons
          (list
            'case-lambda
            (list g$variables$26382$1LXXoO g$body$26384$1LXXoO))
          g$expressions$26383$1LXXoO))))
   (g$make-assignment$26207$1LXXoO
     g$make-assignment$26472$1LXXoO
     (case-lambda
       ((g$location$26385$1LXXoO
          g$operand$26386$1LXXoO
          g$expression$26387$1LXXoO)
        (list
          'begin
          (list 'set! g$location$26385$1LXXoO g$operand$26386$1LXXoO)
          g$expression$26387$1LXXoO))))
   (g$make-declaration$26208$1LXXoO
     g$make-declaration$26473$1LXXoO
     (case-lambda
       ((g$location$26388$1LXXoO
          g$operand$26389$1LXXoO
          g$expression$26390$1LXXoO)
        (list
          'begin
          (list 'define g$location$26388$1LXXoO g$operand$26389$1LXXoO)
          g$expression$26390$1LXXoO))))
   (g$make-truth-test$26209$1LXXoO
     g$make-truth-test$26474$1LXXoO
     (case-lambda ((g$operand$26391$1LXXoO) g$operand$26391$1LXXoO)))
   (g$generate-variable$26210$1LXXoO
     g$generate-variable$26475$1LXXoO
     (case-lambda ((g$name$26392$1LXXoO) (gensym g$name$26392$1LXXoO))))
   (g$parse$26211$1LXXoO
     g$parse$26476$1LXXoO
     (case-lambda
       ((g$x$26393$1LXXoO)
        (if (pair? g$x$26393$1LXXoO)
          ((case-lambda
             ((g$t$26394$1LXXoO)
              (if (eqv? g$t$26394$1LXXoO 'quote)
                (g$cps/generate-literal$26166$1LXXoO
                  (g$cadr$20076$1LXXoO g$x$26393$1LXXoO))
                (if (eqv? g$t$26394$1LXXoO 'if)
                  (g$cps/generate-conditional$26170$1LXXoO
                    (g$parse$26211$1LXXoO
                      (g$cadr$20076$1LXXoO g$x$26393$1LXXoO))
                    (g$parse$26211$1LXXoO
                      (g$caddr$20082$1LXXoO g$x$26393$1LXXoO))
                    (g$parse$26211$1LXXoO
                      (g$cadddr$20094$1LXXoO g$x$26393$1LXXoO)))
                  (if (eqv? g$t$26394$1LXXoO 'case-lambda)
                    ((case-lambda
                       ((g$d$26395$1LXXoO)
                        (g$cps/generate-abstractions$26168$1LXXoO
                          (g$map$19225$1LXXoO car g$d$26395$1LXXoO)
                          (g$map$19225$1LXXoO
                            (case-lambda
                              ((g$e$26396$1LXXoO)
                               (g$cps/generate-sequence$26174$1LXXoO
                                 (g$map$19225$1LXXoO
                                   g$parse$26211$1LXXoO
                                   (cdr g$e$26396$1LXXoO)))))
                            g$d$26395$1LXXoO))))
                     (cdr g$x$26393$1LXXoO))
                    (if (eqv? g$t$26394$1LXXoO 'letrec)
                      ((case-lambda
                         ((g$bindings$26397$1LXXoO g$body*$26398$1LXXoO)
                          ((case-lambda
                             ((g$lhs*$26399$1LXXoO g$rhs*$26400$1LXXoO)
                              ((case-lambda
                                 ((g$t*$26401$1LXXoO
                                    g$tmps$26402$1LXXoO)
                                  ((case-lambda
                                     ((g$s*$26403$1LXXoO)
                                      (g$parse$26211$1LXXoO
                                        (cons
                                          (list
                                            'case-lambda
                                            (list
                                              g$lhs*$26399$1LXXoO
                                              (cons
                                                (list
                                                  'case-lambda
                                                  (cons
                                                    g$t*$26401$1LXXoO
                                                    (append
                                                      g$s*$26403$1LXXoO
                                                      g$body*$26398$1LXXoO)))
                                                g$rhs*$26400$1LXXoO)))
                                          g$tmps$26402$1LXXoO))))
                                   (g$map$19225$1LXXoO
                                     (case-lambda
                                       ((g$i$26404$1LXXoO
                                          g$t$26405$1LXXoO)
                                        (list
                                          'set!
                                          g$i$26404$1LXXoO
                                          g$t$26405$1LXXoO)))
                                     g$lhs*$26399$1LXXoO
                                     g$t*$26401$1LXXoO))))
                               (g$map$19225$1LXXoO
                                 gensym
                                 g$lhs*$26399$1LXXoO)
                               (g$map$19225$1LXXoO
                                 (case-lambda
                                   ((g$x$26406$1LXXoO) 'uninitialized))
                                 g$lhs*$26399$1LXXoO))))
                           (g$map$19225$1LXXoO
                             car
                             g$bindings$26397$1LXXoO)
                           (g$map$19225$1LXXoO
                             g$cadr$20076$1LXXoO
                             g$bindings$26397$1LXXoO))))
                       (g$cadr$20076$1LXXoO g$x$26393$1LXXoO)
                       (g$cddr$20078$1LXXoO g$x$26393$1LXXoO))
                      (if (eqv? g$t$26394$1LXXoO 'letrec*)
                        ((case-lambda
                           ((g$bindings$26407$1LXXoO
                              g$body*$26408$1LXXoO)
                            ((case-lambda
                               ((g$lhs*$26409$1LXXoO
                                  g$rhs*$26410$1LXXoO)
                                (g$cps/generate-recursive*-bind$26172$1LXXoO
                                  g$lhs*$26409$1LXXoO
                                  (g$map$19225$1LXXoO
                                    g$parse$26211$1LXXoO
                                    g$rhs*$26410$1LXXoO)
                                  (g$parse$26211$1LXXoO
                                    (cons
                                      'begin
                                      g$body*$26408$1LXXoO)))))
                             (g$map$19225$1LXXoO
                               car
                               g$bindings$26407$1LXXoO)
                             (g$map$19225$1LXXoO
                               g$cadr$20076$1LXXoO
                               g$bindings$26407$1LXXoO))))
                         (g$cadr$20076$1LXXoO g$x$26393$1LXXoO)
                         (g$cddr$20078$1LXXoO g$x$26393$1LXXoO))
                        (if (eqv? g$t$26394$1LXXoO 'library-letrec*)
                          ((case-lambda
                             ((g$name$26411$1LXXoO g$x$26412$1LXXoO)
                              ((case-lambda
                                 ((g$bindings$26413$1LXXoO
                                    g$body*$26414$1LXXoO)
                                  ((case-lambda
                                     ((g$lhs*$26415$1LXXoO
                                        g$lhs**$26416$1LXXoO
                                        g$rhs*$26417$1LXXoO)
                                      (g$cps/generate-recursive*-library-bind$26173$1LXXoO
                                        g$name$26411$1LXXoO
                                        g$lhs*$26415$1LXXoO
                                        g$lhs**$26416$1LXXoO
                                        (g$map$19225$1LXXoO
                                          g$parse$26211$1LXXoO
                                          g$rhs*$26417$1LXXoO)
                                        (g$parse$26211$1LXXoO
                                          (cons
                                            'begin
                                            g$body*$26414$1LXXoO)))))
                                   (g$map$19225$1LXXoO
                                     car
                                     g$bindings$26413$1LXXoO)
                                   (g$map$19225$1LXXoO
                                     g$cadr$20076$1LXXoO
                                     g$bindings$26413$1LXXoO)
                                   (g$map$19225$1LXXoO
                                     g$caddr$20082$1LXXoO
                                     g$bindings$26413$1LXXoO))))
                               (g$cadr$20076$1LXXoO g$x$26412$1LXXoO)
                               (g$cddr$20078$1LXXoO g$x$26412$1LXXoO))))
                           (g$cadr$20076$1LXXoO g$x$26393$1LXXoO)
                           (cdr g$x$26393$1LXXoO))
                          (if (eqv? g$t$26394$1LXXoO 'begin)
                            (g$cps/generate-sequence$26174$1LXXoO
                              (g$map$19225$1LXXoO
                                g$parse$26211$1LXXoO
                                (cdr g$x$26393$1LXXoO)))
                            (if (eqv? g$t$26394$1LXXoO 'set!)
                              (g$cps/generate-assignment$26175$1LXXoO
                                (g$cadr$20076$1LXXoO g$x$26393$1LXXoO)
                                (g$parse$26211$1LXXoO
                                  (g$caddr$20082$1LXXoO
                                    g$x$26393$1LXXoO)))
                              (if (eqv? g$t$26394$1LXXoO 'define)
                                (g$cps/generate-declaration$26176$1LXXoO
                                  (g$cadr$20076$1LXXoO g$x$26393$1LXXoO)
                                  (g$parse$26211$1LXXoO
                                    (g$caddr$20082$1LXXoO
                                      g$x$26393$1LXXoO)))
                                (begin
                                  '#f
                                  (if (list? g$x$26393$1LXXoO)
                                    (g$cps/generate-combination$26177$1LXXoO
                                      (g$parse$26211$1LXXoO
                                        (car g$x$26393$1LXXoO))
                                      (g$map$19225$1LXXoO
                                        g$parse$26211$1LXXoO
                                        (cdr g$x$26393$1LXXoO)))
                                    (error
                                      'rewrite
                                      '"invalid form ~s ~s"
                                      g$x$26393$1LXXoO
                                      (list?
                                        g$x$26393$1LXXoO)))))))))))))))
           (car g$x$26393$1LXXoO))
          (if (g$symbol?$20057$1LXXoO g$x$26393$1LXXoO)
            (g$cps/generate-reference$26165$1LXXoO g$x$26393$1LXXoO)
            (begin
              '#f
              (g$cps/generate-literal$26166$1LXXoO
                g$x$26393$1LXXoO)))))))
   (g$starts-with?$26212$1LXXoO
     g$starts-with?$26477$1LXXoO
     (case-lambda
       ((g$str$26418$1LXXoO g$sub$26419$1LXXoO)
        (clr-call-internal
          'system.string
          'startswith
          g$str$26418$1LXXoO
          g$sub$26419$1LXXoO))))
   (g$ends-with?$26213$1LXXoO
     g$ends-with?$26478$1LXXoO
     (case-lambda
       ((g$str$26420$1LXXoO g$sub$26421$1LXXoO)
        (clr-call-internal
          'system.string
          'endswith
          g$str$26420$1LXXoO
          g$sub$26421$1LXXoO))))
   (g$clr-generator?$26214$1LXXoO
     g$clr-generator?$26479$1LXXoO
     (case-lambda
       ((g$o$26422$1LXXoO)
        (if (g$symbol?$20057$1LXXoO g$o$26422$1LXXoO)
          (begin
            '#f
            ((case-lambda
               ((g$o$26423$1LXXoO)
                (if (g$starts-with?$26212$1LXXoO
                      g$o$26423$1LXXoO
                      '"clr-")
                  (begin
                    '#f
                    (g$ends-with?$26213$1LXXoO
                      g$o$26423$1LXXoO
                      '"-internal"))
                  '#f)))
             (symbol->string g$o$26422$1LXXoO)))
          '#f))))
   (g$fix-primitives$26215$1LXXoO
     g$fix-primitives$26480$1LXXoO
     (case-lambda
       ((g$e$26424$1LXXoO)
        (if (if (pair? g$e$26424$1LXXoO)
              (begin '#f (list? g$e$26424$1LXXoO))
              '#f)
          ((case-lambda
             ((g$o$26425$1LXXoO)
              (if (eq? g$o$26425$1LXXoO 'quote)
                g$e$26424$1LXXoO
                (if (begin
                      '#f
                      (g$clr-generator?$26214$1LXXoO g$o$26425$1LXXoO))
                  (if (pair? (cdr g$e$26424$1LXXoO))
                    (list
                      (g$fix-primitives$26215$1LXXoO
                        (g$cadr$20076$1LXXoO g$e$26424$1LXXoO))
                      (cons
                        g$o$26425$1LXXoO
                        (g$map$19225$1LXXoO
                          g$fix-primitives$26215$1LXXoO
                          (g$cddr$20078$1LXXoO g$e$26424$1LXXoO))))
                    g$e$26424$1LXXoO)
                  (begin
                    '#f
                    (cons
                      (g$fix-primitives$26215$1LXXoO g$o$26425$1LXXoO)
                      (g$map$19225$1LXXoO
                        g$fix-primitives$26215$1LXXoO
                        (cdr g$e$26424$1LXXoO))))))))
           (car g$e$26424$1LXXoO))
          g$e$26424$1LXXoO))))
   (g$parse->cps$26216$1LXXoO
     g$parse->cps$26481$1LXXoO
     (case-lambda
       ((g$e$26426$1LXXoO g$var$26427$1LXXoO)
        ((g$parse$26211$1LXXoO g$e$26426$1LXXoO)
         (g$variable-continuator$26182$1LXXoO g$var$26427$1LXXoO)))))
   (g$convert->cps$26217$1LXXoO
     g$convert->cps$26482$1LXXoO
     (case-lambda
       ((g$e$26428$1LXXoO g$var$26429$1LXXoO)
        (g$fix-primitives$26215$1LXXoO
          (g$parse->cps$26216$1LXXoO
            g$e$26428$1LXXoO
            g$var$26429$1LXXoO))))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$26483$1LXXoO
     g$current-primitive-locations$26528$1LXXoO
     (g$make-parameter$25954$1LXXoO
       (case-lambda ((g$x$26489$1LXXoO) '#f))
       (case-lambda
         ((g$p$26490$1LXXoO)
          (begin
            (if (not (g$procedure?$20059$1LXXoO g$p$26490$1LXXoO))
              (g$assertion-error$31296$1LXXoO
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$26490$1LXXoO)))))
   (g$mutable?$26484$1LXXoO
     g$mutable?$26529$1LXXoO
     (case-lambda
       ((g$x$26491$1LXXoO)
        (letrec* ((g$simple?$26492$1LXXoO
                    (case-lambda
                      ((g$x$26493$1LXXoO)
                       ((case-lambda
                          ((g$t$26494$1LXXoO)
                           (if g$t$26494$1LXXoO
                             g$t$26494$1LXXoO
                             ((case-lambda
                                ((g$t$26495$1LXXoO)
                                 (if g$t$26495$1LXXoO
                                   g$t$26495$1LXXoO
                                   ((case-lambda
                                      ((g$t$26496$1LXXoO)
                                       (if g$t$26496$1LXXoO
                                         g$t$26496$1LXXoO
                                         ((case-lambda
                                            ((g$t$26497$1LXXoO)
                                             (if g$t$26497$1LXXoO
                                               g$t$26497$1LXXoO
                                               ((case-lambda
                                                  ((g$t$26498$1LXXoO)
                                                   (if g$t$26498$1LXXoO
                                                     g$t$26498$1LXXoO
                                                     ((case-lambda
                                                        ((g$t$26499$1LXXoO)
                                                         (if g$t$26499$1LXXoO
                                                           g$t$26499$1LXXoO
                                                           (begin
                                                             '#f
                                                             (g$number?$20698$1LXXoO
                                                               g$x$26493$1LXXoO)))))
                                                      (g$bytevector?$20056$1LXXoO
                                                        g$x$26493$1LXXoO)))))
                                                (string?
                                                  g$x$26493$1LXXoO)))))
                                          (g$boolean?$20058$1LXXoO
                                            g$x$26493$1LXXoO)))))
                                    (g$symbol?$20057$1LXXoO
                                      g$x$26493$1LXXoO)))))
                              (g$char?$20054$1LXXoO
                                g$x$26493$1LXXoO)))))
                        (null? g$x$26493$1LXXoO))))))
          (not (g$simple?$26492$1LXXoO g$x$26491$1LXXoO))))))
   (g$rewriter$26485$1LXXoO
     g$rewriter$26530$1LXXoO
     (case-lambda
       ((g$quote-hack?$26500$1LXXoO)
        (letrec* ((g$f$26501$1LXXoO
                    (case-lambda
                      ((g$x$26502$1LXXoO)
                       (if (pair? g$x$26502$1LXXoO)
                         ((case-lambda
                            ((g$t$26503$1LXXoO)
                             (if (eqv? g$t$26503$1LXXoO 'quote)
                               (if (if g$quote-hack?$26500$1LXXoO
                                     (begin
                                       '#f
                                       (g$mutable?$26484$1LXXoO
                                         (g$cadr$20076$1LXXoO
                                           g$x$26502$1LXXoO)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$26504$1LXXoO)
                                     (begin
                                       (set-symbol-value!
                                         g$g$26504$1LXXoO
                                         (g$cadr$20076$1LXXoO
                                           g$x$26502$1LXXoO))
                                       g$g$26504$1LXXoO)))
                                  (gensym 'weak-temp))
                                 (begin '#f g$x$26502$1LXXoO))
                               (if (eqv? g$t$26503$1LXXoO 'case-lambda)
                                 (cons
                                   'case-lambda
                                   (g$map$19225$1LXXoO
                                     (case-lambda
                                       ((g$x$26505$1LXXoO)
                                        (cons
                                          (car g$x$26505$1LXXoO)
                                          (g$map$19225$1LXXoO
                                            g$f$26501$1LXXoO
                                            (cdr g$x$26505$1LXXoO)))))
                                     (cdr g$x$26502$1LXXoO)))
                                 (if (eqv? g$t$26503$1LXXoO 'lambda)
                                   (g$cons*$19227$1LXXoO
                                     'lambda
                                     (g$cadr$20076$1LXXoO
                                       g$x$26502$1LXXoO)
                                     (g$map$19225$1LXXoO
                                       g$f$26501$1LXXoO
                                       (g$cddr$20078$1LXXoO
                                         g$x$26502$1LXXoO)))
                                   (if (eqv? g$t$26503$1LXXoO 'letrec)
                                     ((case-lambda
                                        ((g$bindings$26506$1LXXoO
                                           g$body*$26507$1LXXoO)
                                         ((case-lambda
                                            ((g$lhs*$26508$1LXXoO
                                               g$rhs*$26509$1LXXoO)
                                             (g$cons*$19227$1LXXoO
                                               'letrec
                                               (g$map$19225$1LXXoO
                                                 list
                                                 g$lhs*$26508$1LXXoO
                                                 (g$map$19225$1LXXoO
                                                   g$f$26501$1LXXoO
                                                   g$rhs*$26509$1LXXoO))
                                               (g$map$19225$1LXXoO
                                                 g$f$26501$1LXXoO
                                                 g$body*$26507$1LXXoO))))
                                          (g$map$19225$1LXXoO
                                            car
                                            g$bindings$26506$1LXXoO)
                                          (g$map$19225$1LXXoO
                                            g$cadr$20076$1LXXoO
                                            g$bindings$26506$1LXXoO))))
                                      (g$cadr$20076$1LXXoO
                                        g$x$26502$1LXXoO)
                                      (g$cddr$20078$1LXXoO
                                        g$x$26502$1LXXoO))
                                     (if (eqv?
                                           g$t$26503$1LXXoO
                                           'letrec*)
                                       ((case-lambda
                                          ((g$bindings$26510$1LXXoO
                                             g$body*$26511$1LXXoO)
                                           ((case-lambda
                                              ((g$lhs*$26512$1LXXoO
                                                 g$rhs*$26513$1LXXoO)
                                               (g$cons*$19227$1LXXoO
                                                 'letrec*
                                                 (g$map$19225$1LXXoO
                                                   list
                                                   g$lhs*$26512$1LXXoO
                                                   (g$map$19225$1LXXoO
                                                     g$f$26501$1LXXoO
                                                     g$rhs*$26513$1LXXoO))
                                                 (g$map$19225$1LXXoO
                                                   g$f$26501$1LXXoO
                                                   g$body*$26511$1LXXoO))))
                                            (g$map$19225$1LXXoO
                                              car
                                              g$bindings$26510$1LXXoO)
                                            (g$map$19225$1LXXoO
                                              g$cadr$20076$1LXXoO
                                              g$bindings$26510$1LXXoO))))
                                        (g$cadr$20076$1LXXoO
                                          g$x$26502$1LXXoO)
                                        (g$cddr$20078$1LXXoO
                                          g$x$26502$1LXXoO))
                                       (if (eqv?
                                             g$t$26503$1LXXoO
                                             'library-letrec*)
                                         ((case-lambda
                                            ((g$name$26514$1LXXoO
                                               g$x$26515$1LXXoO)
                                             ((case-lambda
                                                ((g$bindings$26516$1LXXoO
                                                   g$body*$26517$1LXXoO)
                                                 ((case-lambda
                                                    ((g$lhs*$26518$1LXXoO
                                                       g$lhs**$26519$1LXXoO
                                                       g$rhs*$26520$1LXXoO)
                                                     (g$cons*$19227$1LXXoO
                                                       'library-letrec*
                                                       g$name$26514$1LXXoO
                                                       (g$map$19225$1LXXoO
                                                         list
                                                         g$lhs*$26518$1LXXoO
                                                         g$lhs**$26519$1LXXoO
                                                         (g$map$19225$1LXXoO
                                                           g$f$26501$1LXXoO
                                                           g$rhs*$26520$1LXXoO))
                                                       (g$map$19225$1LXXoO
                                                         g$f$26501$1LXXoO
                                                         g$body*$26517$1LXXoO))))
                                                  (g$map$19225$1LXXoO
                                                    car
                                                    g$bindings$26516$1LXXoO)
                                                  (g$map$19225$1LXXoO
                                                    g$cadr$20076$1LXXoO
                                                    g$bindings$26516$1LXXoO)
                                                  (g$map$19225$1LXXoO
                                                    g$caddr$20082$1LXXoO
                                                    g$bindings$26516$1LXXoO))))
                                              (g$cadr$20076$1LXXoO
                                                g$x$26515$1LXXoO)
                                              (g$cddr$20078$1LXXoO
                                                g$x$26515$1LXXoO))))
                                          (g$cadr$20076$1LXXoO
                                            g$x$26502$1LXXoO)
                                          (cdr g$x$26502$1LXXoO))
                                         (if (eqv?
                                               g$t$26503$1LXXoO
                                               'begin)
                                           (cons
                                             'begin
                                             (g$map$19225$1LXXoO
                                               g$f$26501$1LXXoO
                                               (cdr g$x$26502$1LXXoO)))
                                           (if (eqv?
                                                 g$t$26503$1LXXoO
                                                 'set!)
                                             (list
                                               'set!
                                               (g$cadr$20076$1LXXoO
                                                 g$x$26502$1LXXoO)
                                               (g$f$26501$1LXXoO
                                                 (g$caddr$20082$1LXXoO
                                                   g$x$26502$1LXXoO)))
                                             (if (eqv?
                                                   g$t$26503$1LXXoO
                                                   'primitive)
                                               ((case-lambda
                                                  ((g$op$26521$1LXXoO)
                                                   ((case-lambda
                                                      ((g$t$26522$1LXXoO)
                                                       (if g$t$26522$1LXXoO
                                                         ((case-lambda
                                                            ((g$loc$26523$1LXXoO)
                                                             g$loc$26523$1LXXoO))
                                                          g$t$26522$1LXXoO)
                                                         (begin
                                                           '#f
                                                           g$op$26521$1LXXoO))))
                                                    ((g$current-primitive-locations$26483$1LXXoO)
                                                     g$op$26521$1LXXoO))))
                                                (g$cadr$20076$1LXXoO
                                                  g$x$26502$1LXXoO))
                                               (if (eqv?
                                                     g$t$26503$1LXXoO
                                                     'define)
                                                 g$x$26502$1LXXoO
                                                 (begin
                                                   '#f
                                                   (if (list?
                                                         g$x$26502$1LXXoO)
                                                     (g$map$19225$1LXXoO
                                                       g$f$26501$1LXXoO
                                                       g$x$26502$1LXXoO)
                                                     (error
                                                       'rewrite
                                                       '"invalid form ~s ~s"
                                                       g$x$26502$1LXXoO
                                                       (list?
                                                         g$x$26502$1LXXoO))))))))))))))))
                          (car g$x$26502$1LXXoO))
                         (begin '#f g$x$26502$1LXXoO))))))
          g$f$26501$1LXXoO))))
   (g$expanded->core$26486$1LXXoO
     g$expanded->core$26531$1LXXoO
     (case-lambda
       ((g$x$26524$1LXXoO)
        ((g$rewriter$26485$1LXXoO '#t) g$x$26524$1LXXoO))))
   (g$compile-core-expr$26487$1LXXoO
     g$compile-core-expr$26532$1LXXoO
     (case-lambda
       ((g$x$26525$1LXXoO)
        ((g$rewriter$26485$1LXXoO '#f) g$x$26525$1LXXoO))))
   (g$compile-core-expr-to-port$26488$1LXXoO
     g$compile-core-expr-to-port$26533$1LXXoO
     (case-lambda
       ((g$x$26526$1LXXoO g$p$26527$1LXXoO)
        (g$pretty-print$26164$1LXXoO
          ((g$rewriter$26485$1LXXoO '#f) g$x$26526$1LXXoO)
          g$p$26527$1LXXoO)))))
  (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$26534$1LXXoO
     g$make-collection$26743$1LXXoO
     (case-lambda
       (()
        ((case-lambda
           ((g$set$26597$1LXXoO)
            (letrec* ((g$set-cons$26598$1LXXoO
                        (case-lambda
                          ((g$x$26602$1LXXoO g$ls$26603$1LXXoO)
                           (if (g$memq$19217$1LXXoO
                                 g$x$26602$1LXXoO
                                 g$ls$26603$1LXXoO)
                             g$ls$26603$1LXXoO
                             (begin
                               '#f
                               (cons
                                 g$x$26602$1LXXoO
                                 g$ls$26603$1LXXoO)))))))
              (case-lambda
                (() g$set$26597$1LXXoO)
                ((g$x$26599$1LXXoO)
                 (set! g$set$26597$1LXXoO
                   (g$set-cons$26598$1LXXoO
                     g$x$26599$1LXXoO
                     g$set$26597$1LXXoO)))
                ((g$x$26600$1LXXoO g$del?$26601$1LXXoO)
                 (if g$del?$26601$1LXXoO
                   (set! g$set$26597$1LXXoO
                     (g$remq$19232$1LXXoO
                       g$x$26600$1LXXoO
                       g$set$26597$1LXXoO))
                   (set! g$set$26597$1LXXoO
                     (g$set-cons$26598$1LXXoO
                       g$x$26600$1LXXoO
                       g$set$26597$1LXXoO))))))))
         '()))))
   (g$current-library-collection$26535$1LXXoO
     g$current-library-collection$26744$1LXXoO
     (g$make-parameter$25954$1LXXoO
       (g$make-collection$26534$1LXXoO)
       (case-lambda
         ((g$x$26604$1LXXoO)
          (begin
            (if (not (g$procedure?$20059$1LXXoO g$x$26604$1LXXoO))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$26604$1LXXoO)
              (void))
            g$x$26604$1LXXoO)))))
   (g$9165$26536$1LXXoO
     g$9165$26745$1LXXoO
     (make-record-type-descriptor
       'library
       '#f
       'g$9168$1LXXoO
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$9167$26537$1LXXoO g$9167$26746$1LXXoO '#f)
   (g$9166$26538$1LXXoO
     g$9166$26747$1LXXoO
     (make-record-constructor-descriptor
       g$9165$26536$1LXXoO
       '#f
       g$9167$26537$1LXXoO))
   (g$library?$26541$1LXXoO
     g$library?$26748$1LXXoO
     (record-predicate g$9165$26536$1LXXoO))
   (g$make-library$26542$1LXXoO
     g$make-library$26749$1LXXoO
     (record-constructor g$9166$26538$1LXXoO))
   (g$library-id$26543$1LXXoO
     g$library-id$26750$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '0))
   (g$library-name$26544$1LXXoO
     g$library-name$26751$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '1))
   (g$library-version$26545$1LXXoO
     g$library-version$26752$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '2))
   (g$library-imp*$26546$1LXXoO
     g$library-imp*$26753$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '3))
   (g$library-vis*$26547$1LXXoO
     g$library-vis*$26754$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '4))
   (g$library-inv*$26548$1LXXoO
     g$library-inv*$26755$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '5))
   (g$library-subst$26549$1LXXoO
     g$library-subst$26756$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '6))
   (g$library-env$26550$1LXXoO
     g$library-env$26757$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '7))
   (g$library-visit-state$26551$1LXXoO
     g$library-visit-state$26758$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '8))
   (g$library-invoke-state$26552$1LXXoO
     g$library-invoke-state$26759$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '9))
   (g$library-visit-code$26553$1LXXoO
     g$library-visit-code$26760$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '10))
   (g$library-invoke-code$26554$1LXXoO
     g$library-invoke-code$26761$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '11))
   (g$library-visible?$26555$1LXXoO
     g$library-visible?$26762$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '12))
   (g$library-source-file-name$26556$1LXXoO
     g$library-source-file-name$26763$1LXXoO
     (record-accessor g$9165$26536$1LXXoO '13))
   (g$set-library-id!$26557$1LXXoO
     g$set-library-id!$26764$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '0))
   (g$set-library-name!$26558$1LXXoO
     g$set-library-name!$26765$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '1))
   (g$set-library-version!$26559$1LXXoO
     g$set-library-version!$26766$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '2))
   (g$set-library-imp*!$26560$1LXXoO
     g$set-library-imp*!$26767$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '3))
   (g$set-library-vis*!$26561$1LXXoO
     g$set-library-vis*!$26768$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '4))
   (g$set-library-inv*!$26562$1LXXoO
     g$set-library-inv*!$26769$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '5))
   (g$set-library-subst!$26563$1LXXoO
     g$set-library-subst!$26770$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '6))
   (g$set-library-env!$26564$1LXXoO
     g$set-library-env!$26771$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '7))
   (g$set-library-visit-state!$26565$1LXXoO
     g$set-library-visit-state!$26772$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '8))
   (g$set-library-invoke-state!$26566$1LXXoO
     g$set-library-invoke-state!$26773$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '9))
   (g$set-library-visit-code!$26567$1LXXoO
     g$set-library-visit-code!$26774$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '10))
   (g$set-library-invoke-code!$26568$1LXXoO
     g$set-library-invoke-code!$26775$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '11))
   (g$set-library-visible?!$26569$1LXXoO
     g$set-library-visible?!$26776$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '12))
   (g$set-library-source-file-name!$26570$1LXXoO
     g$set-library-source-file-name!$26777$1LXXoO
     (record-mutator g$9165$26536$1LXXoO '13))
   (g$rp$26571$1LXXoO
     g$rp$26778$1LXXoO
     (make-record-printer
       'library
       (case-lambda
         ((g$x$26605$1LXXoO g$p$26606$1LXXoO g$wr$26607$1LXXoO)
          (begin
            (if (not (g$library?$26541$1LXXoO g$x$26605$1LXXoO))
              (assertion-violation
                'record-type-printer
                '"not a library")
              (void))
            (display
              (g$format$25745$1LXXoO
                '"#<library ~s>"
                (if (null?
                      (g$library-version$26545$1LXXoO g$x$26605$1LXXoO))
                  (g$library-name$26544$1LXXoO g$x$26605$1LXXoO)
                  (append
                    (g$library-name$26544$1LXXoO g$x$26605$1LXXoO)
                    (list
                      (g$library-version$26545$1LXXoO
                        g$x$26605$1LXXoO)))))
              g$p$26606$1LXXoO))))))
   (g$find-dependencies$26572$1LXXoO
     g$find-dependencies$26779$1LXXoO
     (case-lambda
       ((g$ls$26608$1LXXoO)
        (if (null? g$ls$26608$1LXXoO)
          '()
          (begin
            '#f
            (assertion-violation
              'find-dependencies
              '"cannot handle deps yet"))))))
   (g$find-library-by$26573$1LXXoO
     g$find-library-by$26780$1LXXoO
     (case-lambda
       ((g$pred$26609$1LXXoO)
        ((letrec ((g$f$26610$1LXXoO
                    (case-lambda
                      ((g$ls$26611$1LXXoO)
                       (if (null? g$ls$26611$1LXXoO)
                         '#f
                         (if (g$pred$26609$1LXXoO
                               (car g$ls$26611$1LXXoO))
                           (car g$ls$26611$1LXXoO)
                           (begin
                             '#f
                             (g$f$26610$1LXXoO
                               (cdr g$ls$26611$1LXXoO)))))))))
           g$f$26610$1LXXoO)
         ((g$current-library-collection$26535$1LXXoO))))))
   (g$library-path$26574$1LXXoO
     g$library-path$26781$1LXXoO
     (g$make-parameter$25954$1LXXoO
       '(".")
       (case-lambda
         ((g$x$26612$1LXXoO)
          (if (if (list? g$x$26612$1LXXoO)
                (begin
                  '#f
                  (g$for-all$19223$1LXXoO string? g$x$26612$1LXXoO))
                '#f)
            (g$map$19225$1LXXoO
              (case-lambda ((g$x$26613$1LXXoO) g$x$26613$1LXXoO))
              g$x$26612$1LXXoO)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$26612$1LXXoO))))))
   (g$library-extensions$26575$1LXXoO
     g$library-extensions$26782$1LXXoO
     (g$make-parameter$25954$1LXXoO
       '(".sls" ".ss")
       (case-lambda
         ((g$x$26614$1LXXoO)
          (if (if (list? g$x$26614$1LXXoO)
                (begin
                  '#f
                  (g$for-all$19223$1LXXoO string? g$x$26614$1LXXoO))
                '#f)
            (g$map$19225$1LXXoO
              (case-lambda ((g$x$26615$1LXXoO) g$x$26615$1LXXoO))
              g$x$26614$1LXXoO)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$26614$1LXXoO))))))
   (g$library-name->file-name$26576$1LXXoO
     g$library-name->file-name$26783$1LXXoO
     (case-lambda
       ((g$x$26616$1LXXoO)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$25505$1LXXoO)))
          (case-lambda
            ((g$p$26619$1LXXoO g$extract$26620$1LXXoO)
             ((case-lambda
                ((g$extract$26621$1LXXoO g$p$26622$1LXXoO)
                 (letrec* ((g$display-hex$26623$1LXXoO
                             (case-lambda
                               ((g$n$26631$1LXXoO)
                                (if (g$<=$20716$1LXXoO
                                      '0
                                      g$n$26631$1LXXoO
                                      '9)
                                  (display
                                    g$n$26631$1LXXoO
                                    g$p$26622$1LXXoO)
                                  (begin
                                    '#f
                                    (display
                                      (integer->char
                                        (+ (char->integer '#\A)
                                           (- g$n$26631$1LXXoO '10)))
                                      g$p$26622$1LXXoO)))))))
                   (begin
                     ((letrec ((g$f$26624$1LXXoO
                                 (case-lambda
                                   ((g$ls$26625$1LXXoO)
                                    (if (not (null? g$ls$26625$1LXXoO))
                                      (begin
                                        (display '"/" g$p$26622$1LXXoO)
                                        (g$for-each$19226$1LXXoO
                                          (case-lambda
                                            ((g$c$26626$1LXXoO)
                                             (if ((case-lambda
                                                    ((g$t$26627$1LXXoO)
                                                     (if g$t$26627$1LXXoO
                                                       g$t$26627$1LXXoO
                                                       ((case-lambda
                                                          ((g$t$26628$1LXXoO)
                                                           (if g$t$26628$1LXXoO
                                                             g$t$26628$1LXXoO
                                                             ((case-lambda
                                                                ((g$t$26629$1LXXoO)
                                                                 (if g$t$26629$1LXXoO
                                                                   g$t$26629$1LXXoO
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$19218$1LXXoO
                                                                       g$c$26626$1LXXoO
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$20119$1LXXoO
                                                                '#\0
                                                                g$c$26626$1LXXoO
                                                                '#\9)))))
                                                        (g$char<=?$20119$1LXXoO
                                                          '#\A
                                                          g$c$26626$1LXXoO
                                                          '#\Z)))))
                                                  (g$char<=?$20119$1LXXoO
                                                    '#\a
                                                    g$c$26626$1LXXoO
                                                    '#\z))
                                               (display
                                                 g$c$26626$1LXXoO
                                                 g$p$26622$1LXXoO)
                                               (begin
                                                 '#f
                                                 (display
                                                   '"%"
                                                   g$p$26622$1LXXoO)
                                                 ((case-lambda
                                                    ((g$n$26630$1LXXoO)
                                                     (begin
                                                       (g$display-hex$26623$1LXXoO
                                                         (g$quotient$21424$1LXXoO
                                                           g$n$26630$1LXXoO
                                                           '16))
                                                       (g$display-hex$26623$1LXXoO
                                                         (g$remainder$21425$1LXXoO
                                                           g$n$26630$1LXXoO
                                                           '16)))))
                                                  (char->integer
                                                    g$c$26626$1LXXoO))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$26625$1LXXoO))))
                                        (g$f$26624$1LXXoO
                                          (cdr g$ls$26625$1LXXoO)))
                                      (void))))))
                        g$f$26624$1LXXoO)
                      g$x$26616$1LXXoO)
                     (g$extract$26621$1LXXoO)))))
              g$extract$26620$1LXXoO
              g$p$26619$1LXXoO)))))))
   (g$file-locator$26577$1LXXoO
     g$file-locator$26784$1LXXoO
     (g$make-parameter$25954$1LXXoO
       (case-lambda
         ((g$x$26632$1LXXoO)
          ((case-lambda
             ((g$str$26633$1LXXoO)
              ((letrec ((g$f$26634$1LXXoO
                          (case-lambda
                            ((g$ls$26635$1LXXoO
                               g$exts$26636$1LXXoO
                               g$failed-list$26637$1LXXoO)
                             (if (null? g$ls$26635$1LXXoO)
                               (g$file-locator-resolution-error$25952$1LXXoO
                                 g$x$26632$1LXXoO
                                 (g$reverse$20074$1LXXoO
                                   g$failed-list$26637$1LXXoO)
                                 ((case-lambda
                                    ((g$ls$26638$1LXXoO)
                                     (if (null? g$ls$26638$1LXXoO)
                                       (error 'library-manager '"BUG")
                                       (cdr g$ls$26638$1LXXoO))))
                                  (g$external-pending-libraries$26583$1LXXoO)))
                               (if (null? g$exts$26636$1LXXoO)
                                 (g$f$26634$1LXXoO
                                   (cdr g$ls$26635$1LXXoO)
                                   (g$library-extensions$26575$1LXXoO)
                                   g$failed-list$26637$1LXXoO)
                                 (begin
                                   '#f
                                   ((case-lambda
                                      ((g$name$26639$1LXXoO)
                                       (if (g$file-exists?$20182$1LXXoO
                                             g$name$26639$1LXXoO)
                                         g$name$26639$1LXXoO
                                         (g$f$26634$1LXXoO
                                           g$ls$26635$1LXXoO
                                           (cdr g$exts$26636$1LXXoO)
                                           (cons
                                             g$name$26639$1LXXoO
                                             g$failed-list$26637$1LXXoO)))))
                                    (string-append
                                      (car g$ls$26635$1LXXoO)
                                      g$str$26633$1LXXoO
                                      (car g$exts$26636$1LXXoO))))))))))
                 g$f$26634$1LXXoO)
               (g$library-path$26574$1LXXoO)
               (g$library-extensions$26575$1LXXoO)
               '())))
           (g$library-name->file-name$26576$1LXXoO g$x$26632$1LXXoO))))
       (case-lambda
         ((g$f$26640$1LXXoO)
          (if (g$procedure?$20059$1LXXoO g$f$26640$1LXXoO)
            g$f$26640$1LXXoO
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$26640$1LXXoO))))))
   (g$serialize-all$26578$1LXXoO
     g$serialize-all$26785$1LXXoO
     (case-lambda
       ((g$serialize$26641$1LXXoO g$compile$26642$1LXXoO)
        (letrec* ((g$library-desc$26643$1LXXoO
                    (case-lambda
                      ((g$x$26645$1LXXoO)
                       (list
                         (g$library-id$26543$1LXXoO g$x$26645$1LXXoO)
                         (g$library-name$26544$1LXXoO
                           g$x$26645$1LXXoO))))))
          (g$for-each$19226$1LXXoO
            (case-lambda
              ((g$x$26644$1LXXoO)
               (if (g$library-source-file-name$26556$1LXXoO
                     g$x$26644$1LXXoO)
                 (g$serialize$26641$1LXXoO
                   (g$library-source-file-name$26556$1LXXoO
                     g$x$26644$1LXXoO)
                   (list
                     (g$library-id$26543$1LXXoO g$x$26644$1LXXoO)
                     (g$library-name$26544$1LXXoO g$x$26644$1LXXoO)
                     (g$library-version$26545$1LXXoO g$x$26644$1LXXoO)
                     (g$map$19225$1LXXoO
                       g$library-desc$26643$1LXXoO
                       (g$library-imp*$26546$1LXXoO g$x$26644$1LXXoO))
                     (g$map$19225$1LXXoO
                       g$library-desc$26643$1LXXoO
                       (g$library-vis*$26547$1LXXoO g$x$26644$1LXXoO))
                     (g$map$19225$1LXXoO
                       g$library-desc$26643$1LXXoO
                       (g$library-inv*$26548$1LXXoO g$x$26644$1LXXoO))
                     (g$library-subst$26549$1LXXoO g$x$26644$1LXXoO)
                     (g$library-env$26550$1LXXoO g$x$26644$1LXXoO)
                     (g$compile$26642$1LXXoO
                       (g$library-visit-code$26553$1LXXoO
                         g$x$26644$1LXXoO))
                     (g$compile$26642$1LXXoO
                       (g$library-invoke-code$26554$1LXXoO
                         g$x$26644$1LXXoO))
                     (g$library-visible?$26555$1LXXoO
                       g$x$26644$1LXXoO)))
                 (void))))
            ((g$current-library-collection$26535$1LXXoO)))))))
   (g$current-precompiled-library-loader$26579$1LXXoO
     g$current-precompiled-library-loader$26786$1LXXoO
     (g$make-parameter$25954$1LXXoO
       (case-lambda ((g$filename$26646$1LXXoO g$sk$26647$1LXXoO) '#f))))
   (g$try-load-from-file$26580$1LXXoO
     g$try-load-from-file$26787$1LXXoO
     (case-lambda
       ((g$filename$26648$1LXXoO)
        ((g$current-precompiled-library-loader$26579$1LXXoO)
         g$filename$26648$1LXXoO
         (case-lambda
           ((g$id$26649$1LXXoO
              g$name$26650$1LXXoO
              g$ver$26651$1LXXoO
              g$imp*$26652$1LXXoO
              g$vis*$26653$1LXXoO
              g$inv*$26654$1LXXoO
              g$exp-subst$26655$1LXXoO
              g$exp-env$26656$1LXXoO
              g$visit-proc$26657$1LXXoO
              g$invoke-proc$26658$1LXXoO
              g$visible?$26659$1LXXoO)
            ((letrec ((g$f$26660$1LXXoO
                        (case-lambda
                          ((g$deps$26661$1LXXoO)
                           (if (null? g$deps$26661$1LXXoO)
                             (begin
                               (g$install-library$26590$1LXXoO
                                 g$id$26649$1LXXoO
                                 g$name$26650$1LXXoO
                                 g$ver$26651$1LXXoO
                                 g$imp*$26652$1LXXoO
                                 g$vis*$26653$1LXXoO
                                 g$inv*$26654$1LXXoO
                                 g$exp-subst$26655$1LXXoO
                                 g$exp-env$26656$1LXXoO
                                 g$visit-proc$26657$1LXXoO
                                 g$invoke-proc$26658$1LXXoO
                                 '#f
                                 '#f
                                 g$visible?$26659$1LXXoO
                                 '#f)
                               '#t)
                             (begin
                               '#f
                               ((case-lambda
                                  ((g$d$26662$1LXXoO)
                                   ((case-lambda
                                      ((g$label$26663$1LXXoO
                                         g$dname$26664$1LXXoO)
                                       ((case-lambda
                                          ((g$l$26665$1LXXoO)
                                           (if (if (g$library?$26541$1LXXoO
                                                     g$l$26665$1LXXoO)
                                                 (begin
                                                   '#f
                                                   (eq? g$label$26663$1LXXoO
                                                        (g$library-id$26543$1LXXoO
                                                          g$l$26665$1LXXoO)))
                                                 '#f)
                                             (g$f$26660$1LXXoO
                                               (cdr g$deps$26661$1LXXoO))
                                             (begin
                                               '#f
                                               (g$library-version-mismatch-warning$25951$1LXXoO
                                                 g$name$26650$1LXXoO
                                                 g$dname$26664$1LXXoO
                                                 g$filename$26648$1LXXoO)
                                               '#f))))
                                        (g$find-library-by-name$26585$1LXXoO
                                          g$dname$26664$1LXXoO))))
                                    (car g$d$26662$1LXXoO)
                                    (g$cadr$20076$1LXXoO
                                      g$d$26662$1LXXoO))))
                                (car g$deps$26661$1LXXoO))))))))
               g$f$26660$1LXXoO)
             (append
               g$imp*$26652$1LXXoO
               g$vis*$26653$1LXXoO
               g$inv*$26654$1LXXoO)))
           (g$others$26666$1LXXoO '#f))))))
   (g$library-loader$26581$1LXXoO
     g$library-loader$26788$1LXXoO
     (g$make-parameter$25954$1LXXoO
       (case-lambda
         ((g$x$26667$1LXXoO)
          ((case-lambda
             ((g$file-name$26668$1LXXoO)
              (if (not g$file-name$26668$1LXXoO)
                (assertion-violation
                  '#f
                  '"cannot find library"
                  g$x$26667$1LXXoO)
                ((case-lambda
                   ((g$t$26669$1LXXoO)
                    (if g$t$26669$1LXXoO
                      g$t$26669$1LXXoO
                      (begin
                        '#f
                        (begin
                          '#f
                          ((g$current-library-expander$26582$1LXXoO)
                           (g$read-library-source-file$25953$1LXXoO
                             g$file-name$26668$1LXXoO)
                           g$file-name$26668$1LXXoO
                           (case-lambda
                             ((g$name$26670$1LXXoO)
                              (if (not (equal?
                                         g$name$26670$1LXXoO
                                         g$x$26667$1LXXoO))
                                (assertion-violation
                                  'import
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$open-string-output-port$25505$1LXXoO)))
                                    (case-lambda
                                      ((g$p$26673$1LXXoO
                                         g$e$26674$1LXXoO)
                                       ((case-lambda
                                          ((g$e$26675$1LXXoO
                                             g$p$26676$1LXXoO)
                                           (begin
                                             (display
                                               '"expected to find library "
                                               g$p$26676$1LXXoO)
                                             (write
                                               g$x$26667$1LXXoO
                                               g$p$26676$1LXXoO)
                                             (display
                                               '" in file "
                                               g$p$26676$1LXXoO)
                                             (display
                                               g$file-name$26668$1LXXoO
                                               g$p$26676$1LXXoO)
                                             (display
                                               '", found "
                                               g$p$26676$1LXXoO)
                                             (write
                                               g$name$26670$1LXXoO
                                               g$p$26676$1LXXoO)
                                             (display
                                               '" instead"
                                               g$p$26676$1LXXoO)
                                             (g$e$26675$1LXXoO))))
                                        g$e$26674$1LXXoO
                                        g$p$26673$1LXXoO)))))
                                (void))))))))))
                 (g$try-load-from-file$26580$1LXXoO
                   g$file-name$26668$1LXXoO)))))
           ((g$file-locator$26577$1LXXoO) g$x$26667$1LXXoO))))
       (case-lambda
         ((g$f$26677$1LXXoO)
          (if (g$procedure?$20059$1LXXoO g$f$26677$1LXXoO)
            g$f$26677$1LXXoO
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$26677$1LXXoO))))))
   (g$current-library-expander$26582$1LXXoO
     g$current-library-expander$26789$1LXXoO
     (g$make-parameter$25954$1LXXoO
       (case-lambda
         ((g$x$26678$1LXXoO)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$26679$1LXXoO)
          (if (g$procedure?$20059$1LXXoO g$f$26679$1LXXoO)
            g$f$26679$1LXXoO
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$26679$1LXXoO))))))
   (g$external-pending-libraries$26583$1LXXoO
     g$external-pending-libraries$26790$1LXXoO
     (g$make-parameter$25954$1LXXoO '()))
   (g$find-external-library$26584$1LXXoO
     g$find-external-library$26791$1LXXoO
     (case-lambda
       ((g$name$26680$1LXXoO)
        (begin
          (if (g$member$19219$1LXXoO
                g$name$26680$1LXXoO
                (g$external-pending-libraries$26583$1LXXoO))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$26680$1LXXoO)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$26683$1LXXoO
                g$external-pending-libraries$26684$1LXXoO)
              ((case-lambda
                 ((g$swap$26685$1LXXoO)
                  (dynamic-wind
                    g$swap$26685$1LXXoO
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$26581$1LXXoO)
                          g$name$26680$1LXXoO)
                         ((case-lambda
                            ((g$t$26686$1LXXoO)
                             (if g$t$26686$1LXXoO
                               g$t$26686$1LXXoO
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$26680$1LXXoO)))))
                          (g$find-library-by$26573$1LXXoO
                            (case-lambda
                              ((g$x$26687$1LXXoO)
                               (equal?
                                 (g$library-name$26544$1LXXoO
                                   g$x$26687$1LXXoO)
                                 g$name$26680$1LXXoO))))))))
                    g$swap$26685$1LXXoO)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$26688$1LXXoO)
                      (begin
                        (g$external-pending-libraries$26683$1LXXoO
                          g$external-pending-libraries$26684$1LXXoO)
                        (set! g$external-pending-libraries$26684$1LXXoO
                          g$t$26688$1LXXoO))))
                   (g$external-pending-libraries$26683$1LXXoO)))))))
           g$external-pending-libraries$26583$1LXXoO
           (cons
             g$name$26680$1LXXoO
             (g$external-pending-libraries$26583$1LXXoO)))))))
   (g$find-library-by-name$26585$1LXXoO
     g$find-library-by-name$26792$1LXXoO
     (case-lambda
       ((g$name$26689$1LXXoO)
        ((case-lambda
           ((g$t$26690$1LXXoO)
            (if g$t$26690$1LXXoO
              g$t$26690$1LXXoO
              (begin
                '#f
                (g$find-external-library$26584$1LXXoO
                  g$name$26689$1LXXoO)))))
         (g$find-library-by$26573$1LXXoO
           (case-lambda
             ((g$x$26691$1LXXoO)
              (equal?
                (g$library-name$26544$1LXXoO g$x$26691$1LXXoO)
                g$name$26689$1LXXoO))))))))
   (g$uninstall-library$26586$1LXXoO
     g$uninstall-library$26793$1LXXoO
     (case-lambda
       ((g$name$26692$1LXXoO g$err?$26693$1LXXoO)
        (letrec* ((g$who$26694$1LXXoO 'uninstall-library))
          ((case-lambda
             ((g$lib$26695$1LXXoO)
              (begin
                (if (if g$err?$26693$1LXXoO
                      (begin '#f (not g$lib$26695$1LXXoO))
                      '#f)
                  (assertion-violation
                    g$who$26694$1LXXoO
                    '"library not installed"
                    g$name$26692$1LXXoO)
                  (void))
                ((g$current-library-collection$26535$1LXXoO)
                 g$lib$26695$1LXXoO
                 '#t)
                (g$for-each$19226$1LXXoO
                  (case-lambda
                    ((g$x$26696$1LXXoO)
                     ((case-lambda
                        ((g$label$26697$1LXXoO g$binding$26698$1LXXoO)
                         (begin
                           (remove-location g$label$26697$1LXXoO)
                           (if (g$memq$19217$1LXXoO
                                 (car g$binding$26698$1LXXoO)
                                 '(global
                                    global-macro
                                    global-macro!
                                    global-ctv))
                             (remove-location
                               (cdr g$binding$26698$1LXXoO))
                             (void)))))
                      (car g$x$26696$1LXXoO)
                      (cdr g$x$26696$1LXXoO))))
                  (g$library-env$26550$1LXXoO g$lib$26695$1LXXoO)))))
           (g$find-library-by$26573$1LXXoO
             (case-lambda
               ((g$x$26699$1LXXoO)
                (equal?
                  (g$library-name$26544$1LXXoO g$x$26699$1LXXoO)
                  g$name$26692$1LXXoO)))))))
       ((g$name$26700$1LXXoO)
        (g$uninstall-library$26586$1LXXoO g$name$26700$1LXXoO '#t))))
   (g$library-exists?$26587$1LXXoO
     g$library-exists?$26794$1LXXoO
     (case-lambda
       ((g$name$26701$1LXXoO)
        (if (g$find-library-by$26573$1LXXoO
              (case-lambda
                ((g$x$26702$1LXXoO)
                 (equal?
                   (g$library-name$26544$1LXXoO g$x$26702$1LXXoO)
                   g$name$26701$1LXXoO))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$26588$1LXXoO
     g$find-library-by-spec/die$26795$1LXXoO
     (case-lambda
       ((g$spec$26703$1LXXoO)
        ((case-lambda
           ((g$id$26704$1LXXoO)
            ((case-lambda
               ((g$t$26705$1LXXoO)
                (if g$t$26705$1LXXoO
                  g$t$26705$1LXXoO
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$26703$1LXXoO)))))
             (g$find-library-by$26573$1LXXoO
               (case-lambda
                 ((g$x$26706$1LXXoO)
                  (eq? g$id$26704$1LXXoO
                       (g$library-id$26543$1LXXoO
                         g$x$26706$1LXXoO))))))))
         (car g$spec$26703$1LXXoO)))))
   (g$install-library-record$26589$1LXXoO
     g$install-library-record$26796$1LXXoO
     (case-lambda
       ((g$lib$26707$1LXXoO)
        (begin
          ((case-lambda
             ((g$exp-env$26708$1LXXoO)
              (g$for-each$19226$1LXXoO
                (case-lambda
                  ((g$x$26709$1LXXoO)
                   ((case-lambda
                      ((g$label$26710$1LXXoO g$binding$26711$1LXXoO)
                       ((case-lambda
                          ((g$binding$26712$1LXXoO)
                           (g$set-label-binding!$25957$1LXXoO
                             g$label$26710$1LXXoO
                             g$binding$26712$1LXXoO)))
                        ((case-lambda
                           ((g$t$26713$1LXXoO)
                            (if (eqv? g$t$26713$1LXXoO 'global)
                              (cons
                                'global
                                (cons
                                  g$lib$26707$1LXXoO
                                  (cdr g$binding$26711$1LXXoO)))
                              (if (eqv? g$t$26713$1LXXoO 'global-macro)
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$26707$1LXXoO
                                    (cdr g$binding$26711$1LXXoO)))
                                (if (eqv?
                                      g$t$26713$1LXXoO
                                      'global-macro!)
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$26707$1LXXoO
                                      (cdr g$binding$26711$1LXXoO)))
                                  (if (eqv?
                                        g$t$26713$1LXXoO
                                        'global-ctv)
                                    (cons
                                      'global-ctv
                                      (cons
                                        g$lib$26707$1LXXoO
                                        (cdr g$binding$26711$1LXXoO)))
                                    (begin
                                      '#f
                                      g$binding$26711$1LXXoO)))))))
                         (car g$binding$26711$1LXXoO)))))
                    (car g$x$26709$1LXXoO)
                    (cdr g$x$26709$1LXXoO))))
                g$exp-env$26708$1LXXoO)))
           (g$library-env$26550$1LXXoO g$lib$26707$1LXXoO))
          ((g$current-library-collection$26535$1LXXoO)
           g$lib$26707$1LXXoO)))))
   (g$install-library$26590$1LXXoO
     g$install-library$26797$1LXXoO
     (case-lambda
       ((g$id$26714$1LXXoO
          g$name$26715$1LXXoO
          g$ver$26716$1LXXoO
          g$imp*$26717$1LXXoO
          g$vis*$26718$1LXXoO
          g$inv*$26719$1LXXoO
          g$exp-subst$26720$1LXXoO
          g$exp-env$26721$1LXXoO
          g$visit-proc$26722$1LXXoO
          g$invoke-proc$26723$1LXXoO
          g$visit-code$26724$1LXXoO
          g$invoke-code$26725$1LXXoO
          g$visible?$26726$1LXXoO
          g$source-file-name$26727$1LXXoO)
        ((case-lambda
           ((g$imp-lib*$26728$1LXXoO
              g$vis-lib*$26729$1LXXoO
              g$inv-lib*$26730$1LXXoO)
            (begin
              (if (not (if (g$symbol?$20057$1LXXoO g$id$26714$1LXXoO)
                         (if (list? g$name$26715$1LXXoO)
                           (begin '#f (list? g$ver$26716$1LXXoO))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$26714$1LXXoO
                  g$name$26715$1LXXoO
                  g$ver$26716$1LXXoO)
                (void))
              (if (g$library-exists?$26587$1LXXoO g$name$26715$1LXXoO)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$26715$1LXXoO)
                (void))
              ((case-lambda
                 ((g$lib$26731$1LXXoO)
                  (g$install-library-record$26589$1LXXoO
                    g$lib$26731$1LXXoO)))
               (g$make-library$26542$1LXXoO
                 g$id$26714$1LXXoO
                 g$name$26715$1LXXoO
                 g$ver$26716$1LXXoO
                 g$imp-lib*$26728$1LXXoO
                 g$vis-lib*$26729$1LXXoO
                 g$inv-lib*$26730$1LXXoO
                 g$exp-subst$26720$1LXXoO
                 g$exp-env$26721$1LXXoO
                 g$visit-proc$26722$1LXXoO
                 g$invoke-proc$26723$1LXXoO
                 g$visit-code$26724$1LXXoO
                 g$invoke-code$26725$1LXXoO
                 g$visible?$26726$1LXXoO
                 g$source-file-name$26727$1LXXoO)))))
         (g$map$19225$1LXXoO
           g$find-library-by-spec/die$26588$1LXXoO
           g$imp*$26717$1LXXoO)
         (g$map$19225$1LXXoO
           g$find-library-by-spec/die$26588$1LXXoO
           g$vis*$26718$1LXXoO)
         (g$map$19225$1LXXoO
           g$find-library-by-spec/die$26588$1LXXoO
           g$inv*$26719$1LXXoO)))))
   (g$imported-label->binding$26591$1LXXoO
     g$imported-label->binding$26798$1LXXoO
     (case-lambda
       ((g$lab$26732$1LXXoO)
        (g$label-binding$25958$1LXXoO g$lab$26732$1LXXoO))))
   (g$invoke-library$26592$1LXXoO
     g$invoke-library$26799$1LXXoO
     (case-lambda
       ((g$lib$26733$1LXXoO)
        ((case-lambda
           ((g$invoke$26734$1LXXoO)
            (if (g$procedure?$20059$1LXXoO g$invoke$26734$1LXXoO)
              (begin
                (g$set-library-invoke-state!$26566$1LXXoO
                  g$lib$26733$1LXXoO
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$26733$1LXXoO))))
                (g$for-each$19226$1LXXoO
                  g$invoke-library$26592$1LXXoO
                  (g$library-inv*$26548$1LXXoO g$lib$26733$1LXXoO))
                (g$set-library-invoke-state!$26566$1LXXoO
                  g$lib$26733$1LXXoO
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$26733$1LXXoO))))
                (g$invoke$26734$1LXXoO)
                (g$set-library-invoke-state!$26566$1LXXoO
                  g$lib$26733$1LXXoO
                  '#t))
              (void))))
         (g$library-invoke-state$26552$1LXXoO g$lib$26733$1LXXoO)))))
   (g$visit-library$26593$1LXXoO
     g$visit-library$26800$1LXXoO
     (case-lambda
       ((g$lib$26735$1LXXoO)
        ((case-lambda
           ((g$visit$26736$1LXXoO)
            (if (g$procedure?$20059$1LXXoO g$visit$26736$1LXXoO)
              (begin
                (g$set-library-visit-state!$26565$1LXXoO
                  g$lib$26735$1LXXoO
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$26735$1LXXoO))))
                (g$for-each$19226$1LXXoO
                  g$invoke-library$26592$1LXXoO
                  (g$library-vis*$26547$1LXXoO g$lib$26735$1LXXoO))
                (g$set-library-visit-state!$26565$1LXXoO
                  g$lib$26735$1LXXoO
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$26735$1LXXoO))))
                (g$visit$26736$1LXXoO)
                (g$set-library-visit-state!$26565$1LXXoO
                  g$lib$26735$1LXXoO
                  '#t))
              (void))))
         (g$library-visit-state$26551$1LXXoO g$lib$26735$1LXXoO)))))
   (g$invoke-library-by-spec$26594$1LXXoO
     g$invoke-library-by-spec$26801$1LXXoO
     (case-lambda
       ((g$spec$26737$1LXXoO)
        (g$invoke-library$26592$1LXXoO
          (g$find-library-by-spec/die$26588$1LXXoO
            g$spec$26737$1LXXoO)))))
   (g$installed-libraries$26595$1LXXoO
     g$installed-libraries$26802$1LXXoO
     (case-lambda
       ((g$all?$26738$1LXXoO)
        ((letrec ((g$f$26739$1LXXoO
                    (case-lambda
                      ((g$ls$26740$1LXXoO)
                       (if (null? g$ls$26740$1LXXoO)
                         '()
                         (if ((case-lambda
                                ((g$t$26741$1LXXoO)
                                 (if g$t$26741$1LXXoO
                                   g$t$26741$1LXXoO
                                   (begin
                                     '#f
                                     (g$library-visible?$26555$1LXXoO
                                       (car g$ls$26740$1LXXoO))))))
                              g$all?$26738$1LXXoO)
                           (cons
                             (g$library-name$26544$1LXXoO
                               (car g$ls$26740$1LXXoO))
                             (g$f$26739$1LXXoO (cdr g$ls$26740$1LXXoO)))
                           (begin
                             '#f
                             (g$f$26739$1LXXoO
                               (cdr g$ls$26740$1LXXoO)))))))))
           g$f$26739$1LXXoO)
         ((g$current-library-collection$26535$1LXXoO))))
       (() (g$installed-libraries$26595$1LXXoO '#f))))
   (g$library-spec$26596$1LXXoO
     g$library-spec$26803$1LXXoO
     (case-lambda
       ((g$x$26742$1LXXoO)
        (begin
          (if (not (g$library?$26541$1LXXoO g$x$26742$1LXXoO))
            (assertion-violation
              'library-spec
              '"not a library"
              g$x$26742$1LXXoO)
            (void))
          (list
            (g$library-id$26543$1LXXoO g$x$26742$1LXXoO)
            (g$library-name$26544$1LXXoO g$x$26742$1LXXoO)
            (g$library-version$26545$1LXXoO g$x$26742$1LXXoO)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$26804$1LXXoO
     g$build-global-define$27014$1LXXoO
     (case-lambda ((g$x$26985$1LXXoO) (g$build-void$26981$1LXXoO))))
   (g$build-lambda$26915$1LXXoO
     g$build-lambda$27015$1LXXoO
     (case-lambda
       ((g$ae$26986$1LXXoO g$vars$26987$1LXXoO g$exp$26988$1LXXoO)
        (list
          'case-lambda
          (list g$vars$26987$1LXXoO g$exp$26988$1LXXoO)))))
   (g$build-case-lambda$26916$1LXXoO
     g$build-case-lambda$27016$1LXXoO
     (case-lambda
       ((g$ae$26989$1LXXoO g$vars*$26990$1LXXoO g$exp*$26991$1LXXoO)
        (cons
          'case-lambda
          (g$map$19225$1LXXoO
            list
            g$vars*$26990$1LXXoO
            g$exp*$26991$1LXXoO)))))
   (g$build-let$26917$1LXXoO
     g$build-let$27017$1LXXoO
     (case-lambda
       ((g$ae$26992$1LXXoO
          g$lhs*$26993$1LXXoO
          g$rhs*$26994$1LXXoO
          g$body$26995$1LXXoO)
        (cons
          (g$build-lambda$26915$1LXXoO
            g$ae$26992$1LXXoO
            g$lhs*$26993$1LXXoO
            g$body$26995$1LXXoO)
          g$rhs*$26994$1LXXoO))))
   (g$build-sequence$26980$1LXXoO
     g$build-sequence$27018$1LXXoO
     (case-lambda
       ((g$ae$26996$1LXXoO g$exps$26997$1LXXoO)
        ((letrec ((g$loop$26998$1LXXoO
                    (case-lambda
                      ((g$exps$26999$1LXXoO)
                       (if (null? (cdr g$exps$26999$1LXXoO))
                         (car g$exps$26999$1LXXoO)
                         (if (equal?
                               (car g$exps$26999$1LXXoO)
                               (g$build-void$26981$1LXXoO))
                           (g$loop$26998$1LXXoO
                             (cdr g$exps$26999$1LXXoO))
                           (cons 'begin g$exps$26999$1LXXoO)))))))
           g$loop$26998$1LXXoO)
         g$exps$26997$1LXXoO))))
   (g$build-void$26981$1LXXoO
     g$build-void$27019$1LXXoO
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$26982$1LXXoO
     g$build-letrec$27020$1LXXoO
     (case-lambda
       ((g$ae$27000$1LXXoO
          g$vars$27001$1LXXoO
          g$val-exps$27002$1LXXoO
          g$body-exp$27003$1LXXoO)
        (if (null? g$vars$27001$1LXXoO)
          g$body-exp$27003$1LXXoO
          (list
            'letrec
            (g$map$19225$1LXXoO
              list
              g$vars$27001$1LXXoO
              g$val-exps$27002$1LXXoO)
            g$body-exp$27003$1LXXoO)))))
   (g$build-letrec*$26983$1LXXoO
     g$build-letrec*$27021$1LXXoO
     (case-lambda
       ((g$ae$27004$1LXXoO
          g$vars$27005$1LXXoO
          g$val-exps$27006$1LXXoO
          g$body-exp$27007$1LXXoO)
        (if (null? g$vars$27005$1LXXoO)
          g$body-exp$27007$1LXXoO
          (begin
            '#f
            (list
              'letrec*
              (g$map$19225$1LXXoO
                list
                g$vars$27005$1LXXoO
                g$val-exps$27006$1LXXoO)
              g$body-exp$27007$1LXXoO))))))
   (g$build-library-letrec*$26984$1LXXoO
     g$build-library-letrec*$27022$1LXXoO
     (case-lambda
       ((g$ae$27008$1LXXoO
          g$name$27009$1LXXoO
          g$vars$27010$1LXXoO
          g$locs$27011$1LXXoO
          g$val-exps$27012$1LXXoO
          g$body-exp$27013$1LXXoO)
        (list
          'library-letrec*
          g$name$27009$1LXXoO
          (g$map$19225$1LXXoO
            list
            g$vars$27010$1LXXoO
            g$locs$27011$1LXXoO
            g$val-exps$27012$1LXXoO)
          g$body-exp$27013$1LXXoO)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$27023$1LXXoO
     g$set-cons$31035$1LXXoO
     (case-lambda
       ((g$x$27719$1LXXoO g$ls$27720$1LXXoO)
        (if (g$memq$19217$1LXXoO g$x$27719$1LXXoO g$ls$27720$1LXXoO)
          g$ls$27720$1LXXoO
          (begin '#f (cons g$x$27719$1LXXoO g$ls$27720$1LXXoO))))))
   (g$set-union$27024$1LXXoO
     g$set-union$31036$1LXXoO
     (case-lambda
       ((g$ls1$27721$1LXXoO g$ls2$27722$1LXXoO)
        (if (null? g$ls1$27721$1LXXoO)
          g$ls2$27722$1LXXoO
          (if (g$memq$19217$1LXXoO
                (car g$ls1$27721$1LXXoO)
                g$ls2$27722$1LXXoO)
            (g$set-union$27024$1LXXoO
              (cdr g$ls1$27721$1LXXoO)
              g$ls2$27722$1LXXoO)
            (begin
              '#f
              (cons
                (car g$ls1$27721$1LXXoO)
                (g$set-union$27024$1LXXoO
                  (cdr g$ls1$27721$1LXXoO)
                  g$ls2$27722$1LXXoO))))))))
   (g$top-mark*$27026$1LXXoO g$top-mark*$31037$1LXXoO '(top))
   (g$top-marked?$27027$1LXXoO
     g$top-marked?$31038$1LXXoO
     (case-lambda
       ((g$m*$27723$1LXXoO)
        (g$memq$19217$1LXXoO 'top g$m*$27723$1LXXoO))))
   (g$gen-lexical$27028$1LXXoO
     g$gen-lexical$31039$1LXXoO
     (case-lambda
       ((g$sym$27724$1LXXoO)
        (if (g$symbol?$20057$1LXXoO g$sym$27724$1LXXoO)
          (gensym g$sym$27724$1LXXoO)
          (if (g$stx?$27065$1LXXoO g$sym$27724$1LXXoO)
            (g$gen-lexical$27028$1LXXoO
              (g$id->sym$27094$1LXXoO g$sym$27724$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'gen-lexical
                '"BUG: invalid arg"
                g$sym$27724$1LXXoO)))))))
   (g$gen-global$27029$1LXXoO
     g$gen-global$31040$1LXXoO
     (case-lambda
       ((g$x$27725$1LXXoO)
        (g$gen-lexical$27028$1LXXoO g$x$27725$1LXXoO))))
   (g$gen-label$27030$1LXXoO
     g$gen-label$31041$1LXXoO
     (case-lambda ((g$_$27726$1LXXoO) (gensym))))
   (g$gen-top-level-label$27031$1LXXoO
     g$gen-top-level-label$31042$1LXXoO
     (case-lambda
       ((g$id$27727$1LXXoO g$rib$27728$1LXXoO)
        (letrec* ((g$find$27729$1LXXoO
                    (case-lambda
                      ((g$sym$27735$1LXXoO
                         g$mark*$27736$1LXXoO
                         g$sym*$27737$1LXXoO
                         g$mark**$27738$1LXXoO
                         g$label*$27739$1LXXoO)
                       (if (pair? g$sym*$27737$1LXXoO)
                         (begin
                           '#f
                           (if (if (eq? g$sym$27735$1LXXoO
                                        (car g$sym*$27737$1LXXoO))
                                 (begin
                                   '#f
                                   (g$same-marks?$27095$1LXXoO
                                     g$mark*$27736$1LXXoO
                                     (car g$mark**$27738$1LXXoO)))
                                 '#f)
                             (car g$label*$27739$1LXXoO)
                             (g$find$27729$1LXXoO
                               g$sym$27735$1LXXoO
                               g$mark*$27736$1LXXoO
                               (cdr g$sym*$27737$1LXXoO)
                               (cdr g$mark**$27738$1LXXoO)
                               (cdr g$label*$27739$1LXXoO))))
                         '#f)))))
          ((case-lambda
             ((g$sym$27730$1LXXoO g$mark*$27731$1LXXoO)
              ((case-lambda
                 ((g$sym*$27732$1LXXoO)
                  ((case-lambda
                     ((g$t$27733$1LXXoO)
                      (if g$t$27733$1LXXoO
                        ((case-lambda
                           ((g$label$27734$1LXXoO)
                            (if (g$imported-label->binding$26798$1LXXoO
                                  g$label$27734$1LXXoO)
                              (gensym)
                              (begin '#f g$label$27734$1LXXoO))))
                         g$t$27733$1LXXoO)
                        (begin '#f (gensym)))))
                   (if (g$memq$19217$1LXXoO
                         g$sym$27730$1LXXoO
                         (g$rib-sym*$27041$1LXXoO g$rib$27728$1LXXoO))
                     (begin
                       '#f
                       (g$find$27729$1LXXoO
                         g$sym$27730$1LXXoO
                         g$mark*$27731$1LXXoO
                         g$sym*$27732$1LXXoO
                         (g$rib-mark**$27042$1LXXoO g$rib$27728$1LXXoO)
                         (g$rib-label*$27043$1LXXoO
                           g$rib$27728$1LXXoO)))
                     '#f))))
               (g$rib-sym*$27041$1LXXoO g$rib$27728$1LXXoO))))
           (g$id->sym$27094$1LXXoO g$id$27727$1LXXoO)
           (g$stx-mark*$27068$1LXXoO g$id$27727$1LXXoO))))))
   (g$gen-define-label+loc$27032$1LXXoO
     g$gen-define-label+loc$31043$1LXXoO
     (case-lambda
       ((g$id$27740$1LXXoO g$rib$27741$1LXXoO g$sd?$27742$1LXXoO)
        (if g$sd?$27742$1LXXoO
          (values
            (gensym)
            (g$gen-lexical$27028$1LXXoO g$id$27740$1LXXoO))
          ((case-lambda
             ((g$env$27743$1LXXoO)
              ((case-lambda
                 ((g$label$27744$1LXXoO g$locs$27745$1LXXoO)
                  (values
                    g$label$27744$1LXXoO
                    ((case-lambda
                       ((g$t$27746$1LXXoO)
                        (if g$t$27746$1LXXoO
                          (cdr g$t$27746$1LXXoO)
                          (begin
                            '#f
                            ((case-lambda
                               ((g$loc$27747$1LXXoO)
                                (begin
                                  (g$set-interaction-env-locs!$27681$1LXXoO
                                    g$env$27743$1LXXoO
                                    (cons
                                      (cons
                                        g$label$27744$1LXXoO
                                        g$loc$27747$1LXXoO)
                                      g$locs$27745$1LXXoO))
                                  g$loc$27747$1LXXoO)))
                             (g$gen-lexical$27028$1LXXoO
                               g$id$27740$1LXXoO))))))
                     (g$assq$19213$1LXXoO
                       g$label$27744$1LXXoO
                       g$locs$27745$1LXXoO)))))
               (g$gen-top-level-label$27031$1LXXoO
                 g$id$27740$1LXXoO
                 g$rib$27741$1LXXoO)
               (g$interaction-env-locs$27678$1LXXoO
                 g$env$27743$1LXXoO))))
           (g$top-level-context$27718$1LXXoO))))))
   (g$gen-define-label$27033$1LXXoO
     g$gen-define-label$31044$1LXXoO
     (case-lambda
       ((g$id$27748$1LXXoO g$rib$27749$1LXXoO g$sd?$27750$1LXXoO)
        (if g$sd?$27750$1LXXoO
          (gensym)
          (g$gen-top-level-label$27031$1LXXoO
            g$id$27748$1LXXoO
            g$rib$27749$1LXXoO)))))
   (g$9492$27034$1LXXoO
     g$9492$31045$1LXXoO
     (make-record-type-descriptor
       'rib
       '#f
       'g$9495$1LXXoO
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$9494$27035$1LXXoO g$9494$31046$1LXXoO '#f)
   (g$9493$27036$1LXXoO
     g$9493$31047$1LXXoO
     (make-record-constructor-descriptor
       g$9492$27034$1LXXoO
       '#f
       g$9494$27035$1LXXoO))
   (g$rib?$27039$1LXXoO
     g$rib?$31048$1LXXoO
     (record-predicate g$9492$27034$1LXXoO))
   (g$make-rib$27040$1LXXoO
     g$make-rib$31049$1LXXoO
     (record-constructor g$9493$27036$1LXXoO))
   (g$rib-sym*$27041$1LXXoO
     g$rib-sym*$31050$1LXXoO
     (record-accessor g$9492$27034$1LXXoO '0))
   (g$rib-mark**$27042$1LXXoO
     g$rib-mark**$31051$1LXXoO
     (record-accessor g$9492$27034$1LXXoO '1))
   (g$rib-label*$27043$1LXXoO
     g$rib-label*$31052$1LXXoO
     (record-accessor g$9492$27034$1LXXoO '2))
   (g$rib-sealed/freq$27044$1LXXoO
     g$rib-sealed/freq$31053$1LXXoO
     (record-accessor g$9492$27034$1LXXoO '3))
   (g$rib-cache$27045$1LXXoO
     g$rib-cache$31054$1LXXoO
     (record-accessor g$9492$27034$1LXXoO '4))
   (g$set-rib-sym*!$27046$1LXXoO
     g$set-rib-sym*!$31055$1LXXoO
     (record-mutator g$9492$27034$1LXXoO '0))
   (g$set-rib-mark**!$27047$1LXXoO
     g$set-rib-mark**!$31056$1LXXoO
     (record-mutator g$9492$27034$1LXXoO '1))
   (g$set-rib-label*!$27048$1LXXoO
     g$set-rib-label*!$31057$1LXXoO
     (record-mutator g$9492$27034$1LXXoO '2))
   (g$set-rib-sealed/freq!$27049$1LXXoO
     g$set-rib-sealed/freq!$31058$1LXXoO
     (record-mutator g$9492$27034$1LXXoO '3))
   (g$set-rib-cache!$27050$1LXXoO
     g$set-rib-cache!$31059$1LXXoO
     (record-mutator g$9492$27034$1LXXoO '4))
   (g$make-empty-rib$27051$1LXXoO
     g$make-empty-rib$31060$1LXXoO
     (case-lambda (() (g$make-rib$27040$1LXXoO '() '() '() '#f '#f))))
   (g$make-cache-rib$27052$1LXXoO
     g$make-cache-rib$31061$1LXXoO
     (case-lambda
       (()
        (g$make-rib$27040$1LXXoO
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$20164$1LXXoO)))))
   (g$find-label$27053$1LXXoO
     g$find-label$31062$1LXXoO
     (case-lambda
       ((g$rib$27751$1LXXoO g$sym$27752$1LXXoO g$mark*$27753$1LXXoO)
        ((case-lambda
           ((g$ht$27754$1LXXoO)
            (if g$ht$27754$1LXXoO
              (begin
                '#f
                ((case-lambda
                   ((g$cv$27755$1LXXoO)
                    ((case-lambda
                       ((g$t$27756$1LXXoO)
                        (if g$t$27756$1LXXoO
                          (cdr g$t$27756$1LXXoO)
                          (begin '#f '#f))))
                     (if g$cv$27755$1LXXoO
                       (begin
                         '#f
                         (g$assp$19216$1LXXoO
                           (case-lambda
                             ((g$m$27757$1LXXoO)
                              (g$same-marks?$27095$1LXXoO
                                g$mark*$27753$1LXXoO
                                g$m$27757$1LXXoO)))
                           g$cv$27755$1LXXoO))
                       '#f))))
                 (g$hashtable-ref$20167$1LXXoO
                   g$ht$27754$1LXXoO
                   g$sym$27752$1LXXoO
                   '#f)))
              '#f)))
         (g$rib-cache$27045$1LXXoO g$rib$27751$1LXXoO)))))
   (g$extend-rib!$27054$1LXXoO
     g$extend-rib!$31063$1LXXoO
     (case-lambda
       ((g$rib$27758$1LXXoO
          g$id$27759$1LXXoO
          g$label$27760$1LXXoO
          g$sd?$27761$1LXXoO)
        (letrec* ((g$find$27762$1LXXoO
                    (case-lambda
                      ((g$sym$27771$1LXXoO
                         g$mark*$27772$1LXXoO
                         g$sym*$27773$1LXXoO
                         g$mark**$27774$1LXXoO
                         g$label*$27775$1LXXoO)
                       (if (pair? g$sym*$27773$1LXXoO)
                         (begin
                           '#f
                           (if (if (eq? g$sym$27771$1LXXoO
                                        (car g$sym*$27773$1LXXoO))
                                 (begin
                                   '#f
                                   (g$same-marks?$27095$1LXXoO
                                     g$mark*$27772$1LXXoO
                                     (car g$mark**$27774$1LXXoO)))
                                 '#f)
                             g$label*$27775$1LXXoO
                             (g$find$27762$1LXXoO
                               g$sym$27771$1LXXoO
                               g$mark*$27772$1LXXoO
                               (cdr g$sym*$27773$1LXXoO)
                               (cdr g$mark**$27774$1LXXoO)
                               (cdr g$label*$27775$1LXXoO))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$27044$1LXXoO g$rib$27758$1LXXoO)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$27758$1LXXoO)
              (void))
            ((case-lambda
               ((g$sym$27763$1LXXoO g$mark*$27764$1LXXoO)
                ((case-lambda
                   ((g$sym*$27765$1LXXoO)
                    ((case-lambda
                       ((g$t$27766$1LXXoO)
                        (if g$t$27766$1LXXoO
                          ((case-lambda
                             ((g$p$27767$1LXXoO)
                              (if (not (eq? g$label$27760$1LXXoO
                                            g$p$27767$1LXXoO))
                                (g$syntax-violation$27710$1LXXoO
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$27759$1LXXoO)
                                (void))))
                           g$t$27766$1LXXoO)
                          ((case-lambda
                             ((g$t$27768$1LXXoO)
                              (if g$t$27768$1LXXoO
                                ((case-lambda
                                   ((g$p$27769$1LXXoO)
                                    (if (not (eq? g$label$27760$1LXXoO
                                                  (car g$p$27769$1LXXoO)))
                                      (if (not g$sd?$27761$1LXXoO)
                                        (set-car!
                                          g$p$27769$1LXXoO
                                          g$label$27760$1LXXoO)
                                        (begin
                                          '#f
                                          (g$syntax-violation$27710$1LXXoO
                                            '#f
                                            '"multiple definitions of identifier"
                                            g$id$27759$1LXXoO)))
                                      (void))))
                                 g$t$27768$1LXXoO)
                                (begin
                                  '#f
                                  (if (g$rib-cache$27045$1LXXoO
                                        g$rib$27758$1LXXoO)
                                    (g$hashtable-update!$20171$1LXXoO
                                      (g$rib-cache$27045$1LXXoO
                                        g$rib$27758$1LXXoO)
                                      g$sym$27763$1LXXoO
                                      (case-lambda
                                        ((g$e$27770$1LXXoO)
                                         (cons
                                           (cons
                                             g$mark*$27764$1LXXoO
                                             g$label$27760$1LXXoO)
                                           g$e$27770$1LXXoO)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$27046$1LXXoO
                                    g$rib$27758$1LXXoO
                                    (cons
                                      g$sym$27763$1LXXoO
                                      g$sym*$27765$1LXXoO))
                                  (g$set-rib-mark**!$27047$1LXXoO
                                    g$rib$27758$1LXXoO
                                    (cons
                                      g$mark*$27764$1LXXoO
                                      (g$rib-mark**$27042$1LXXoO
                                        g$rib$27758$1LXXoO)))
                                  (g$set-rib-label*!$27048$1LXXoO
                                    g$rib$27758$1LXXoO
                                    (cons
                                      g$label$27760$1LXXoO
                                      (g$rib-label*$27043$1LXXoO
                                        g$rib$27758$1LXXoO)))))))
                           (if (g$memq$19217$1LXXoO
                                 g$sym$27763$1LXXoO
                                 (g$rib-sym*$27041$1LXXoO
                                   g$rib$27758$1LXXoO))
                             (begin
                               '#f
                               (g$find$27762$1LXXoO
                                 g$sym$27763$1LXXoO
                                 g$mark*$27764$1LXXoO
                                 g$sym*$27765$1LXXoO
                                 (g$rib-mark**$27042$1LXXoO
                                   g$rib$27758$1LXXoO)
                                 (g$rib-label*$27043$1LXXoO
                                   g$rib$27758$1LXXoO)))
                             '#f)))))
                     (g$find-label$27053$1LXXoO
                       g$rib$27758$1LXXoO
                       g$sym$27763$1LXXoO
                       g$mark*$27764$1LXXoO))))
                 (g$rib-sym*$27041$1LXXoO g$rib$27758$1LXXoO))))
             (g$id->sym$27094$1LXXoO g$id$27759$1LXXoO)
             (g$stx-mark*$27068$1LXXoO g$id$27759$1LXXoO)))))))
   (g$extend-rib/nc!$27055$1LXXoO
     g$extend-rib/nc!$31064$1LXXoO
     (case-lambda
       ((g$rib$27776$1LXXoO g$id$27777$1LXXoO g$label$27778$1LXXoO)
        ((case-lambda
           ((g$sym$27779$1LXXoO g$mark*$27780$1LXXoO)
            ((case-lambda
               ((g$sym*$27781$1LXXoO)
                (begin
                  (if (g$rib-cache$27045$1LXXoO g$rib$27776$1LXXoO)
                    (g$hashtable-update!$20171$1LXXoO
                      (g$rib-cache$27045$1LXXoO g$rib$27776$1LXXoO)
                      g$sym$27779$1LXXoO
                      (case-lambda
                        ((g$e$27782$1LXXoO)
                         (cons
                           (cons
                             g$mark*$27780$1LXXoO
                             g$label$27778$1LXXoO)
                           g$e$27782$1LXXoO)))
                      '())
                    (void))
                  (g$set-rib-sym*!$27046$1LXXoO
                    g$rib$27776$1LXXoO
                    (cons g$sym$27779$1LXXoO g$sym*$27781$1LXXoO))
                  (g$set-rib-mark**!$27047$1LXXoO
                    g$rib$27776$1LXXoO
                    (cons
                      g$mark*$27780$1LXXoO
                      (g$rib-mark**$27042$1LXXoO g$rib$27776$1LXXoO)))
                  (g$set-rib-label*!$27048$1LXXoO
                    g$rib$27776$1LXXoO
                    (cons
                      g$label$27778$1LXXoO
                      (g$rib-label*$27043$1LXXoO
                        g$rib$27776$1LXXoO))))))
             (g$rib-sym*$27041$1LXXoO g$rib$27776$1LXXoO))))
         (g$id->sym$27094$1LXXoO g$id$27777$1LXXoO)
         (g$stx-mark*$27068$1LXXoO g$id$27777$1LXXoO)))))
   (g$make-rib-map$27056$1LXXoO
     g$make-rib-map$31065$1LXXoO
     (case-lambda
       ((g$sym*$27783$1LXXoO)
        ((case-lambda
           ((g$ht$27784$1LXXoO)
            ((letrec ((g$f$27785$1LXXoO
                        (case-lambda
                          ((g$i$27786$1LXXoO g$sym*$27787$1LXXoO)
                           (if (null? g$sym*$27787$1LXXoO)
                             g$ht$27784$1LXXoO
                             (begin
                               (g$hashtable-update!$20171$1LXXoO
                                 g$ht$27784$1LXXoO
                                 (car g$sym*$27787$1LXXoO)
                                 (case-lambda
                                   ((g$x$27788$1LXXoO)
                                    (cons
                                      g$i$27786$1LXXoO
                                      g$x$27788$1LXXoO)))
                                 '())
                               (g$f$27785$1LXXoO
                                 (+ g$i$27786$1LXXoO '1)
                                 (cdr g$sym*$27787$1LXXoO))))))))
               g$f$27785$1LXXoO)
             '0
             g$sym*$27783$1LXXoO)))
         (g$make-eq-hashtable$20164$1LXXoO)))))
   (g$seal-rib!$27057$1LXXoO
     g$seal-rib!$31066$1LXXoO
     (case-lambda
       ((g$rib$27789$1LXXoO)
        ((case-lambda
           ((g$sym*$27790$1LXXoO)
            (if (not (null? g$sym*$27790$1LXXoO))
              (begin
                (g$set-rib-sym*!$27046$1LXXoO
                  g$rib$27789$1LXXoO
                  (g$list->vector$20068$1LXXoO g$sym*$27790$1LXXoO))
                (g$set-rib-mark**!$27047$1LXXoO
                  g$rib$27789$1LXXoO
                  (g$list->vector$20068$1LXXoO
                    (g$rib-mark**$27042$1LXXoO g$rib$27789$1LXXoO)))
                (g$set-rib-label*!$27048$1LXXoO
                  g$rib$27789$1LXXoO
                  (g$list->vector$20068$1LXXoO
                    (g$rib-label*$27043$1LXXoO g$rib$27789$1LXXoO)))
                (g$set-rib-sealed/freq!$27049$1LXXoO
                  g$rib$27789$1LXXoO
                  (g$make-rib-map$27056$1LXXoO g$sym*$27790$1LXXoO)))
              (void))))
         (g$rib-sym*$27041$1LXXoO g$rib$27789$1LXXoO)))))
   (g$unseal-rib!$27058$1LXXoO
     g$unseal-rib!$31067$1LXXoO
     (case-lambda
       ((g$rib$27791$1LXXoO)
        (if (g$rib-sealed/freq$27044$1LXXoO g$rib$27791$1LXXoO)
          (begin
            (g$set-rib-sealed/freq!$27049$1LXXoO g$rib$27791$1LXXoO '#f)
            (g$set-rib-sym*!$27046$1LXXoO
              g$rib$27791$1LXXoO
              (vector->list
                (g$rib-sym*$27041$1LXXoO g$rib$27791$1LXXoO)))
            (g$set-rib-mark**!$27047$1LXXoO
              g$rib$27791$1LXXoO
              (vector->list
                (g$rib-mark**$27042$1LXXoO g$rib$27791$1LXXoO)))
            (g$set-rib-label*!$27048$1LXXoO
              g$rib$27791$1LXXoO
              (vector->list
                (g$rib-label*$27043$1LXXoO g$rib$27791$1LXXoO))))
          (void)))))
   (g$make-full-rib$27059$1LXXoO
     g$make-full-rib$31068$1LXXoO
     (case-lambda
       ((g$id*$27792$1LXXoO g$label*$27793$1LXXoO)
        ((case-lambda
           ((g$r$27794$1LXXoO)
            (begin
              (g$seal-rib!$27057$1LXXoO g$r$27794$1LXXoO)
              g$r$27794$1LXXoO)))
         (g$make-rib$27040$1LXXoO
           (g$map$19225$1LXXoO
             g$id->sym$27094$1LXXoO
             g$id*$27792$1LXXoO)
           (g$map$19225$1LXXoO
             g$stx-mark*$27068$1LXXoO
             g$id*$27792$1LXXoO)
           g$label*$27793$1LXXoO
           '#f
           '#f)))))
   (g$9521$27060$1LXXoO
     g$9521$31069$1LXXoO
     (make-record-type-descriptor
       'stx
       '#f
       'g$9524$1LXXoO
       '#t
       '#t
       '#((mutable expr)
          (mutable mark*)
          (mutable subst*)
          (mutable ae*))))
   (g$9523$27061$1LXXoO g$9523$31070$1LXXoO '#f)
   (g$9522$27062$1LXXoO
     g$9522$31071$1LXXoO
     (make-record-constructor-descriptor
       g$9521$27060$1LXXoO
       '#f
       g$9523$27061$1LXXoO))
   (g$stx?$27065$1LXXoO
     g$stx?$31072$1LXXoO
     (record-predicate g$9521$27060$1LXXoO))
   (g$make-stx$27066$1LXXoO
     g$make-stx$31073$1LXXoO
     (record-constructor g$9522$27062$1LXXoO))
   (g$stx-expr$27067$1LXXoO
     g$stx-expr$31074$1LXXoO
     (record-accessor g$9521$27060$1LXXoO '0))
   (g$stx-mark*$27068$1LXXoO
     g$stx-mark*$31075$1LXXoO
     (record-accessor g$9521$27060$1LXXoO '1))
   (g$stx-subst*$27069$1LXXoO
     g$stx-subst*$31076$1LXXoO
     (record-accessor g$9521$27060$1LXXoO '2))
   (g$stx-ae*$27070$1LXXoO
     g$stx-ae*$31077$1LXXoO
     (record-accessor g$9521$27060$1LXXoO '3))
   (g$set-stx-expr!$27071$1LXXoO
     g$set-stx-expr!$31078$1LXXoO
     (record-mutator g$9521$27060$1LXXoO '0))
   (g$set-stx-mark*!$27072$1LXXoO
     g$set-stx-mark*!$31079$1LXXoO
     (record-mutator g$9521$27060$1LXXoO '1))
   (g$set-stx-subst*!$27073$1LXXoO
     g$set-stx-subst*!$31080$1LXXoO
     (record-mutator g$9521$27060$1LXXoO '2))
   (g$set-stx-ae*!$27074$1LXXoO
     g$set-stx-ae*!$31081$1LXXoO
     (record-mutator g$9521$27060$1LXXoO '3))
   (g$rp$27075$1LXXoO
     g$rp$31082$1LXXoO
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$27795$1LXXoO g$p$27796$1LXXoO g$wr$27797$1LXXoO)
          (begin
            (display '"#<syntax " g$p$27796$1LXXoO)
            (write
              (g$stx->datum$27104$1LXXoO g$x$27795$1LXXoO)
              g$p$27796$1LXXoO)
            ((case-lambda
               ((g$expr$27798$1LXXoO)
                (if (annotation? g$expr$27798$1LXXoO)
                  ((case-lambda
                     ((g$src$27799$1LXXoO)
                      (if (pair? g$src$27799$1LXXoO)
                        (begin
                          (display '" (" g$p$27796$1LXXoO)
                          (display
                            (cdr g$src$27799$1LXXoO)
                            g$p$27796$1LXXoO)
                          (display '" of " g$p$27796$1LXXoO)
                          (display
                            (car g$src$27799$1LXXoO)
                            g$p$27796$1LXXoO)
                          (display '")" g$p$27796$1LXXoO))
                        (void))))
                   (annotation-source g$expr$27798$1LXXoO))
                  (void))))
             (g$stx-expr$27067$1LXXoO g$x$27795$1LXXoO))
            (display '">" g$p$27796$1LXXoO))))))
   (g$datum->stx$27076$1LXXoO
     g$datum->stx$31083$1LXXoO
     (case-lambda
       ((g$id$27800$1LXXoO g$datum$27801$1LXXoO)
        (g$make-stx$27066$1LXXoO
          g$datum$27801$1LXXoO
          (g$stx-mark*$27068$1LXXoO g$id$27800$1LXXoO)
          (g$stx-subst*$27069$1LXXoO g$id$27800$1LXXoO)
          (g$stx-ae*$27070$1LXXoO g$id$27800$1LXXoO)))))
   (g$gen-mark$27077$1LXXoO
     g$gen-mark$31084$1LXXoO
     (case-lambda (() (string '#\m))))
   (g$anti-mark$27078$1LXXoO g$anti-mark$31085$1LXXoO '#f)
   (g$anti-mark?$27079$1LXXoO g$anti-mark?$31086$1LXXoO not)
   (g$join-wraps$27080$1LXXoO
     g$join-wraps$31087$1LXXoO
     (case-lambda
       ((g$m1*$27802$1LXXoO
          g$s1*$27803$1LXXoO
          g$ae1*$27804$1LXXoO
          g$e$27805$1LXXoO)
        (letrec* ((g$cancel$27806$1LXXoO
                    (case-lambda
                      ((g$ls1$27810$1LXXoO g$ls2$27811$1LXXoO)
                       ((letrec ((g$f$27812$1LXXoO
                                   (case-lambda
                                     ((g$x$27813$1LXXoO
                                        g$ls1$27814$1LXXoO)
                                      (if (null? g$ls1$27814$1LXXoO)
                                        (cdr g$ls2$27811$1LXXoO)
                                        (cons
                                          g$x$27813$1LXXoO
                                          (g$f$27812$1LXXoO
                                            (car g$ls1$27814$1LXXoO)
                                            (cdr g$ls1$27814$1LXXoO))))))))
                          g$f$27812$1LXXoO)
                        (car g$ls1$27810$1LXXoO)
                        (cdr g$ls1$27810$1LXXoO))))))
          ((case-lambda
             ((g$m2*$27807$1LXXoO
                g$s2*$27808$1LXXoO
                g$ae2*$27809$1LXXoO)
              (if (if (not (null? g$m1*$27802$1LXXoO))
                    (if (not (null? g$m2*$27807$1LXXoO))
                      (begin
                        '#f
                        (g$anti-mark?$27079$1LXXoO
                          (car g$m2*$27807$1LXXoO)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$27806$1LXXoO
                    g$m1*$27802$1LXXoO
                    g$m2*$27807$1LXXoO)
                  (g$cancel$27806$1LXXoO
                    g$s1*$27803$1LXXoO
                    g$s2*$27808$1LXXoO)
                  (g$cancel$27806$1LXXoO
                    g$ae1*$27804$1LXXoO
                    g$ae2*$27809$1LXXoO))
                (values
                  (append g$m1*$27802$1LXXoO g$m2*$27807$1LXXoO)
                  (append g$s1*$27803$1LXXoO g$s2*$27808$1LXXoO)
                  (append g$ae1*$27804$1LXXoO g$ae2*$27809$1LXXoO)))))
           (g$stx-mark*$27068$1LXXoO g$e$27805$1LXXoO)
           (g$stx-subst*$27069$1LXXoO g$e$27805$1LXXoO)
           (g$stx-ae*$27070$1LXXoO g$e$27805$1LXXoO))))))
   (g$mkstx$27081$1LXXoO
     g$mkstx$31088$1LXXoO
     (case-lambda
       ((g$e$27815$1LXXoO
          g$m*$27816$1LXXoO
          g$s*$27817$1LXXoO
          g$ae*$27818$1LXXoO)
        (if (if (g$stx?$27065$1LXXoO g$e$27815$1LXXoO)
              (begin
                '#f
                (not (g$top-marked?$27027$1LXXoO g$m*$27816$1LXXoO)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$27080$1LXXoO
                 g$m*$27816$1LXXoO
                 g$s*$27817$1LXXoO
                 g$ae*$27818$1LXXoO
                 g$e$27815$1LXXoO)))
            (case-lambda
              ((g$m*$27822$1LXXoO g$s*$27823$1LXXoO g$ae*$27824$1LXXoO)
               ((case-lambda
                  ((g$ae*$27825$1LXXoO
                     g$s*$27826$1LXXoO
                     g$m*$27827$1LXXoO)
                   (g$make-stx$27066$1LXXoO
                     (g$stx-expr$27067$1LXXoO g$e$27815$1LXXoO)
                     g$m*$27827$1LXXoO
                     g$s*$27826$1LXXoO
                     g$ae*$27825$1LXXoO)))
                g$ae*$27824$1LXXoO
                g$s*$27823$1LXXoO
                g$m*$27822$1LXXoO))))
          (g$make-stx$27066$1LXXoO
            g$e$27815$1LXXoO
            g$m*$27816$1LXXoO
            g$s*$27817$1LXXoO
            g$ae*$27818$1LXXoO)))))
   (g$add-mark$27082$1LXXoO
     g$add-mark$31089$1LXXoO
     (case-lambda
       ((g$m$27828$1LXXoO g$e$27829$1LXXoO g$ae$27830$1LXXoO)
        (g$mkstx$27081$1LXXoO
          g$e$27829$1LXXoO
          (list g$m$27828$1LXXoO)
          '(shift)
          (list g$ae$27830$1LXXoO)))))
   (g$add-subst$27083$1LXXoO
     g$add-subst$31090$1LXXoO
     (case-lambda
       ((g$subst$27831$1LXXoO g$e$27832$1LXXoO)
        (g$mkstx$27081$1LXXoO
          g$e$27832$1LXXoO
          '()
          (list g$subst$27831$1LXXoO)
          '()))))
   (g$syntax-kind?$27084$1LXXoO
     g$syntax-kind?$31091$1LXXoO
     (case-lambda
       ((g$x$27833$1LXXoO g$p?$27834$1LXXoO)
        (if (g$stx?$27065$1LXXoO g$x$27833$1LXXoO)
          (g$syntax-kind?$27084$1LXXoO
            (g$stx-expr$27067$1LXXoO g$x$27833$1LXXoO)
            g$p?$27834$1LXXoO)
          (if (annotation? g$x$27833$1LXXoO)
            (g$syntax-kind?$27084$1LXXoO
              (annotation-expression g$x$27833$1LXXoO)
              g$p?$27834$1LXXoO)
            (begin '#f (g$p?$27834$1LXXoO g$x$27833$1LXXoO)))))))
   (g$syntax-vector->list$27085$1LXXoO
     g$syntax-vector->list$31092$1LXXoO
     (case-lambda
       ((g$x$27835$1LXXoO)
        (if (g$stx?$27065$1LXXoO g$x$27835$1LXXoO)
          ((case-lambda
             ((g$ls$27836$1LXXoO
                g$m*$27837$1LXXoO
                g$s*$27838$1LXXoO
                g$ae*$27839$1LXXoO)
              (g$map$19225$1LXXoO
                (case-lambda
                  ((g$x$27840$1LXXoO)
                   (g$mkstx$27081$1LXXoO
                     g$x$27840$1LXXoO
                     g$m*$27837$1LXXoO
                     g$s*$27838$1LXXoO
                     g$ae*$27839$1LXXoO)))
                g$ls$27836$1LXXoO)))
           (g$syntax-vector->list$27085$1LXXoO
             (g$stx-expr$27067$1LXXoO g$x$27835$1LXXoO))
           (g$stx-mark*$27068$1LXXoO g$x$27835$1LXXoO)
           (g$stx-subst*$27069$1LXXoO g$x$27835$1LXXoO)
           (g$stx-ae*$27070$1LXXoO g$x$27835$1LXXoO))
          (if (annotation? g$x$27835$1LXXoO)
            (g$syntax-vector->list$27085$1LXXoO
              (annotation-expression g$x$27835$1LXXoO))
            (if (g$vector?$20055$1LXXoO g$x$27835$1LXXoO)
              (vector->list g$x$27835$1LXXoO)
              (begin
                '#f
                (assertion-violation
                  'syntax-vector->list
                  '"BUG: not a syntax vector"
                  g$x$27835$1LXXoO))))))))
   (g$syntax-pair?$27086$1LXXoO
     g$syntax-pair?$31093$1LXXoO
     (case-lambda
       ((g$x$27841$1LXXoO)
        (g$syntax-kind?$27084$1LXXoO g$x$27841$1LXXoO pair?))))
   (g$syntax-vector?$27087$1LXXoO
     g$syntax-vector?$31094$1LXXoO
     (case-lambda
       ((g$x$27842$1LXXoO)
        (g$syntax-kind?$27084$1LXXoO
          g$x$27842$1LXXoO
          g$vector?$20055$1LXXoO))))
   (g$syntax-null?$27088$1LXXoO
     g$syntax-null?$31095$1LXXoO
     (case-lambda
       ((g$x$27843$1LXXoO)
        (g$syntax-kind?$27084$1LXXoO g$x$27843$1LXXoO null?))))
   (g$syntax-list?$27089$1LXXoO
     g$syntax-list?$31096$1LXXoO
     (case-lambda
       ((g$x$27844$1LXXoO)
        ((case-lambda
           ((g$t$27845$1LXXoO)
            (if g$t$27845$1LXXoO
              g$t$27845$1LXXoO
              (begin
                '#f
                (if (g$syntax-pair?$27086$1LXXoO g$x$27844$1LXXoO)
                  (begin
                    '#f
                    (g$syntax-list?$27089$1LXXoO
                      (g$syntax-cdr$27091$1LXXoO g$x$27844$1LXXoO)))
                  '#f)))))
         (g$syntax-null?$27088$1LXXoO g$x$27844$1LXXoO)))))
   (g$syntax-car$27090$1LXXoO
     g$syntax-car$31097$1LXXoO
     (case-lambda
       ((g$x$27846$1LXXoO)
        (if (g$stx?$27065$1LXXoO g$x$27846$1LXXoO)
          (g$mkstx$27081$1LXXoO
            (g$syntax-car$27090$1LXXoO
              (g$stx-expr$27067$1LXXoO g$x$27846$1LXXoO))
            (g$stx-mark*$27068$1LXXoO g$x$27846$1LXXoO)
            (g$stx-subst*$27069$1LXXoO g$x$27846$1LXXoO)
            (g$stx-ae*$27070$1LXXoO g$x$27846$1LXXoO))
          (if (annotation? g$x$27846$1LXXoO)
            (g$syntax-car$27090$1LXXoO
              (annotation-expression g$x$27846$1LXXoO))
            (if (pair? g$x$27846$1LXXoO)
              (car g$x$27846$1LXXoO)
              (begin
                '#f
                (assertion-violation
                  'syntax-car
                  '"BUG: not a pair"
                  g$x$27846$1LXXoO))))))))
   (g$syntax-cdr$27091$1LXXoO
     g$syntax-cdr$31098$1LXXoO
     (case-lambda
       ((g$x$27847$1LXXoO)
        (if (g$stx?$27065$1LXXoO g$x$27847$1LXXoO)
          (g$mkstx$27081$1LXXoO
            (g$syntax-cdr$27091$1LXXoO
              (g$stx-expr$27067$1LXXoO g$x$27847$1LXXoO))
            (g$stx-mark*$27068$1LXXoO g$x$27847$1LXXoO)
            (g$stx-subst*$27069$1LXXoO g$x$27847$1LXXoO)
            (g$stx-ae*$27070$1LXXoO g$x$27847$1LXXoO))
          (if (annotation? g$x$27847$1LXXoO)
            (g$syntax-cdr$27091$1LXXoO
              (annotation-expression g$x$27847$1LXXoO))
            (if (pair? g$x$27847$1LXXoO)
              (cdr g$x$27847$1LXXoO)
              (begin
                '#f
                (assertion-violation
                  'syntax-cdr
                  '"BUG: not a pair"
                  g$x$27847$1LXXoO))))))))
   (g$syntax->list$27092$1LXXoO
     g$syntax->list$31099$1LXXoO
     (case-lambda
       ((g$x$27848$1LXXoO)
        (if (g$syntax-pair?$27086$1LXXoO g$x$27848$1LXXoO)
          (cons
            (g$syntax-car$27090$1LXXoO g$x$27848$1LXXoO)
            (g$syntax->list$27092$1LXXoO
              (g$syntax-cdr$27091$1LXXoO g$x$27848$1LXXoO)))
          (if (g$syntax-null?$27088$1LXXoO g$x$27848$1LXXoO)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$27848$1LXXoO))))))
   (g$id?$27093$1LXXoO
     g$id?$31100$1LXXoO
     (case-lambda
       ((g$x$27849$1LXXoO)
        (if (g$stx?$27065$1LXXoO g$x$27849$1LXXoO)
          (begin
            '#f
            ((case-lambda
               ((g$expr$27850$1LXXoO)
                (g$symbol?$20057$1LXXoO
                  (if (annotation? g$expr$27850$1LXXoO)
                    (annotation-stripped g$expr$27850$1LXXoO)
                    g$expr$27850$1LXXoO))))
             (g$stx-expr$27067$1LXXoO g$x$27849$1LXXoO)))
          '#f))))
   (g$id->sym$27094$1LXXoO
     g$id->sym$31101$1LXXoO
     (case-lambda
       ((g$x$27851$1LXXoO)
        (begin
          (if (not (g$stx?$27065$1LXXoO g$x$27851$1LXXoO))
            (error
              'id->sym
              '"BUG in ikarus: not an id"
              g$x$27851$1LXXoO)
            (void))
          ((case-lambda
             ((g$expr$27852$1LXXoO)
              ((case-lambda
                 ((g$sym$27853$1LXXoO)
                  (if (g$symbol?$20057$1LXXoO g$sym$27853$1LXXoO)
                    g$sym$27853$1LXXoO
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$27851$1LXXoO))))
               (if (annotation? g$expr$27852$1LXXoO)
                 (annotation-stripped g$expr$27852$1LXXoO)
                 g$expr$27852$1LXXoO))))
           (g$stx-expr$27067$1LXXoO g$x$27851$1LXXoO))))))
   (g$same-marks?$27095$1LXXoO
     g$same-marks?$31102$1LXXoO
     (case-lambda
       ((g$x$27854$1LXXoO g$y$27855$1LXXoO)
        ((case-lambda
           ((g$t$27856$1LXXoO)
            (if g$t$27856$1LXXoO
              g$t$27856$1LXXoO
              (begin
                '#f
                (if (pair? g$x$27854$1LXXoO)
                  (if (pair? g$y$27855$1LXXoO)
                    (if (eq? (car g$x$27854$1LXXoO)
                             (car g$y$27855$1LXXoO))
                      (begin
                        '#f
                        (g$same-marks?$27095$1LXXoO
                          (cdr g$x$27854$1LXXoO)
                          (cdr g$y$27855$1LXXoO)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$27854$1LXXoO)
           (begin '#f (null? g$y$27855$1LXXoO))
           '#f)))))
   (g$bound-id=?$27096$1LXXoO
     g$bound-id=?$31103$1LXXoO
     (case-lambda
       ((g$x$27857$1LXXoO g$y$27858$1LXXoO)
        (if (eq? (g$id->sym$27094$1LXXoO g$x$27857$1LXXoO)
                 (g$id->sym$27094$1LXXoO g$y$27858$1LXXoO))
          (begin
            '#f
            (g$same-marks?$27095$1LXXoO
              (g$stx-mark*$27068$1LXXoO g$x$27857$1LXXoO)
              (g$stx-mark*$27068$1LXXoO g$y$27858$1LXXoO)))
          '#f))))
   (g$free-id=?$27097$1LXXoO
     g$free-id=?$31104$1LXXoO
     (case-lambda
       ((g$i$27859$1LXXoO g$j$27860$1LXXoO)
        ((case-lambda
           ((g$t0$27861$1LXXoO g$t1$27862$1LXXoO)
            (if ((case-lambda
                   ((g$t$27863$1LXXoO)
                    (if g$t$27863$1LXXoO
                      g$t$27863$1LXXoO
                      (begin '#f g$t1$27862$1LXXoO))))
                 g$t0$27861$1LXXoO)
              (eq? g$t0$27861$1LXXoO g$t1$27862$1LXXoO)
              (eq? (g$id->sym$27094$1LXXoO g$i$27859$1LXXoO)
                   (g$id->sym$27094$1LXXoO g$j$27860$1LXXoO)))))
         (g$id->real-label$27107$1LXXoO g$i$27859$1LXXoO)
         (g$id->real-label$27107$1LXXoO g$j$27860$1LXXoO)))))
   (g$valid-bound-ids?$27098$1LXXoO
     g$valid-bound-ids?$31105$1LXXoO
     (case-lambda
       ((g$id*$27864$1LXXoO)
        (if (g$for-all$19223$1LXXoO
              g$id?$27093$1LXXoO
              g$id*$27864$1LXXoO)
          (begin
            '#f
            (g$distinct-bound-ids?$27099$1LXXoO g$id*$27864$1LXXoO))
          '#f))))
   (g$distinct-bound-ids?$27099$1LXXoO
     g$distinct-bound-ids?$31106$1LXXoO
     (case-lambda
       ((g$id*$27865$1LXXoO)
        ((case-lambda
           ((g$t$27866$1LXXoO)
            (if g$t$27866$1LXXoO
              g$t$27866$1LXXoO
              (begin
                '#f
                (if (not (g$bound-id-member?$27100$1LXXoO
                           (car g$id*$27865$1LXXoO)
                           (cdr g$id*$27865$1LXXoO)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$27099$1LXXoO
                      (cdr g$id*$27865$1LXXoO)))
                  '#f)))))
         (null? g$id*$27865$1LXXoO)))))
   (g$bound-id-member?$27100$1LXXoO
     g$bound-id-member?$31107$1LXXoO
     (case-lambda
       ((g$id$27867$1LXXoO g$id*$27868$1LXXoO)
        (if (pair? g$id*$27868$1LXXoO)
          (begin
            '#f
            ((case-lambda
               ((g$t$27869$1LXXoO)
                (if g$t$27869$1LXXoO
                  g$t$27869$1LXXoO
                  (begin
                    '#f
                    (g$bound-id-member?$27100$1LXXoO
                      g$id$27867$1LXXoO
                      (cdr g$id*$27868$1LXXoO))))))
             (g$bound-id=?$27096$1LXXoO
               g$id$27867$1LXXoO
               (car g$id*$27868$1LXXoO))))
          '#f))))
   (g$self-evaluating?$27101$1LXXoO
     g$self-evaluating?$31108$1LXXoO
     (case-lambda
       ((g$x$27870$1LXXoO)
        ((case-lambda
           ((g$t$27871$1LXXoO)
            (if g$t$27871$1LXXoO
              g$t$27871$1LXXoO
              ((case-lambda
                 ((g$t$27872$1LXXoO)
                  (if g$t$27872$1LXXoO
                    g$t$27872$1LXXoO
                    ((case-lambda
                       ((g$t$27873$1LXXoO)
                        (if g$t$27873$1LXXoO
                          g$t$27873$1LXXoO
                          ((case-lambda
                             ((g$t$27874$1LXXoO)
                              (if g$t$27874$1LXXoO
                                g$t$27874$1LXXoO
                                (begin
                                  '#f
                                  (g$bytevector?$20056$1LXXoO
                                    g$x$27870$1LXXoO)))))
                           (g$boolean?$20058$1LXXoO
                             g$x$27870$1LXXoO)))))
                     (g$char?$20054$1LXXoO g$x$27870$1LXXoO)))))
               (string? g$x$27870$1LXXoO)))))
         (g$number?$20698$1LXXoO g$x$27870$1LXXoO)))))
   (g$strip-annotations$27102$1LXXoO
     g$strip-annotations$31109$1LXXoO
     (case-lambda
       ((g$x$27875$1LXXoO)
        (if (pair? g$x$27875$1LXXoO)
          (cons
            (g$strip-annotations$27102$1LXXoO (car g$x$27875$1LXXoO))
            (g$strip-annotations$27102$1LXXoO (cdr g$x$27875$1LXXoO)))
          (if (g$vector?$20055$1LXXoO g$x$27875$1LXXoO)
            (g$vector-map$20124$1LXXoO
              g$strip-annotations$27102$1LXXoO
              g$x$27875$1LXXoO)
            (if (annotation? g$x$27875$1LXXoO)
              (annotation-stripped g$x$27875$1LXXoO)
              (begin '#f g$x$27875$1LXXoO)))))))
   (g$strip$27103$1LXXoO
     g$strip$31110$1LXXoO
     (case-lambda
       ((g$x$27876$1LXXoO g$m*$27877$1LXXoO)
        (if (g$top-marked?$27027$1LXXoO g$m*$27877$1LXXoO)
          (if ((case-lambda
                 ((g$t$27878$1LXXoO)
                  (if g$t$27878$1LXXoO
                    g$t$27878$1LXXoO
                    ((case-lambda
                       ((g$t$27879$1LXXoO)
                        (if g$t$27879$1LXXoO
                          g$t$27879$1LXXoO
                          (begin
                            '#f
                            (if (g$vector?$20055$1LXXoO
                                  g$x$27876$1LXXoO)
                              (if (g$>$20717$1LXXoO
                                    (vector-length g$x$27876$1LXXoO)
                                    '0)
                                (begin
                                  '#f
                                  (annotation?
                                    (g$vector-ref$20070$1LXXoO
                                      g$x$27876$1LXXoO
                                      '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$27876$1LXXoO)
                       (begin '#f (annotation? (car g$x$27876$1LXXoO)))
                       '#f)))))
               (annotation? g$x$27876$1LXXoO))
            (g$strip-annotations$27102$1LXXoO g$x$27876$1LXXoO)
            g$x$27876$1LXXoO)
          ((letrec ((g$f$27880$1LXXoO
                      (case-lambda
                        ((g$x$27881$1LXXoO)
                         (if (g$stx?$27065$1LXXoO g$x$27881$1LXXoO)
                           (g$strip$27103$1LXXoO
                             (g$stx-expr$27067$1LXXoO g$x$27881$1LXXoO)
                             (g$stx-mark*$27068$1LXXoO
                               g$x$27881$1LXXoO))
                           (if (annotation? g$x$27881$1LXXoO)
                             (annotation-stripped g$x$27881$1LXXoO)
                             (if (pair? g$x$27881$1LXXoO)
                               ((case-lambda
                                  ((g$a$27882$1LXXoO g$d$27883$1LXXoO)
                                   (if (if (eq? g$a$27882$1LXXoO
                                                (car g$x$27881$1LXXoO))
                                         (begin
                                           '#f
                                           (eq? g$d$27883$1LXXoO
                                                (cdr g$x$27881$1LXXoO)))
                                         '#f)
                                     g$x$27881$1LXXoO
                                     (cons
                                       g$a$27882$1LXXoO
                                       g$d$27883$1LXXoO))))
                                (g$f$27880$1LXXoO
                                  (car g$x$27881$1LXXoO))
                                (g$f$27880$1LXXoO
                                  (cdr g$x$27881$1LXXoO)))
                               (if (g$vector?$20055$1LXXoO
                                     g$x$27881$1LXXoO)
                                 ((case-lambda
                                    ((g$old$27884$1LXXoO)
                                     ((case-lambda
                                        ((g$new$27885$1LXXoO)
                                         (if (g$for-all$19223$1LXXoO
                                               eq?
                                               g$old$27884$1LXXoO
                                               g$new$27885$1LXXoO)
                                           g$x$27881$1LXXoO
                                           (g$list->vector$20068$1LXXoO
                                             g$new$27885$1LXXoO))))
                                      (g$map$19225$1LXXoO
                                        g$f$27880$1LXXoO
                                        g$old$27884$1LXXoO))))
                                  (vector->list g$x$27881$1LXXoO))
                                 (begin '#f g$x$27881$1LXXoO)))))))))
             g$f$27880$1LXXoO)
           g$x$27876$1LXXoO)))))
   (g$stx->datum$27104$1LXXoO
     g$stx->datum$31111$1LXXoO
     (case-lambda
       ((g$x$27886$1LXXoO)
        (g$strip$27103$1LXXoO g$x$27886$1LXXoO '()))))
   (g$same-marks*?$27105$1LXXoO
     g$same-marks*?$31112$1LXXoO
     (case-lambda
       ((g$mark*$27887$1LXXoO g$mark**$27888$1LXXoO g$si$27889$1LXXoO)
        (if (null? g$si$27889$1LXXoO)
          '#f
          (if (g$same-marks?$27095$1LXXoO
                g$mark*$27887$1LXXoO
                (g$vector-ref$20070$1LXXoO
                  g$mark**$27888$1LXXoO
                  (car g$si$27889$1LXXoO)))
            (car g$si$27889$1LXXoO)
            (g$same-marks*?$27105$1LXXoO
              g$mark*$27887$1LXXoO
              g$mark**$27888$1LXXoO
              (cdr g$si$27889$1LXXoO)))))))
   (g$id->label$27106$1LXXoO
     g$id->label$31113$1LXXoO
     (case-lambda
       ((g$id$27890$1LXXoO)
        ((case-lambda
           ((g$t$27891$1LXXoO)
            (if g$t$27891$1LXXoO
              g$t$27891$1LXXoO
              (begin
                '#f
                ((case-lambda
                   ((g$t$27892$1LXXoO)
                    (if g$t$27892$1LXXoO
                      ((case-lambda
                         ((g$env$27893$1LXXoO)
                          ((case-lambda
                             ((g$rib$27894$1LXXoO)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$27032$1LXXoO
                                     g$id$27890$1LXXoO
                                     g$rib$27894$1LXXoO
                                     '#f)))
                                (case-lambda
                                  ((g$lab$27897$1LXXoO
                                     g$_loc$27898$1LXXoO)
                                   ((case-lambda
                                      ((g$_loc$27899$1LXXoO
                                         g$lab$27900$1LXXoO)
                                       (begin
                                         (g$extend-rib!$27054$1LXXoO
                                           g$rib$27894$1LXXoO
                                           g$id$27890$1LXXoO
                                           g$lab$27900$1LXXoO
                                           '#t)
                                         g$lab$27900$1LXXoO)))
                                    g$_loc$27898$1LXXoO
                                    g$lab$27897$1LXXoO))))))
                           (g$interaction-env-rib$27676$1LXXoO
                             g$env$27893$1LXXoO))))
                       g$t$27892$1LXXoO)
                      (begin '#f '#f))))
                 (g$top-level-context$27718$1LXXoO))))))
         (g$id->real-label$27107$1LXXoO g$id$27890$1LXXoO)))))
   (g$id->real-label$27107$1LXXoO
     g$id->real-label$31114$1LXXoO
     (case-lambda
       ((g$id$27901$1LXXoO)
        ((case-lambda
           ((g$sym$27902$1LXXoO)
            ((letrec ((g$search$27903$1LXXoO
                        (case-lambda
                          ((g$subst*$27904$1LXXoO g$mark*$27905$1LXXoO)
                           (if (null? g$subst*$27904$1LXXoO)
                             '#f
                             (if (eq? (car g$subst*$27904$1LXXoO)
                                      'shift)
                               (g$search$27903$1LXXoO
                                 (cdr g$subst*$27904$1LXXoO)
                                 (cdr g$mark*$27905$1LXXoO))
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rib$27906$1LXXoO)
                                     ((case-lambda
                                        ((g$t$27907$1LXXoO)
                                         (if g$t$27907$1LXXoO
                                           ((case-lambda
                                              ((g$ht$27908$1LXXoO)
                                               ((case-lambda
                                                  ((g$si$27909$1LXXoO)
                                                   ((case-lambda
                                                      ((g$i$27910$1LXXoO)
                                                       (if g$i$27910$1LXXoO
                                                         (g$vector-ref$20070$1LXXoO
                                                           (g$rib-label*$27043$1LXXoO
                                                             g$rib$27906$1LXXoO)
                                                           g$i$27910$1LXXoO)
                                                         (g$search$27903$1LXXoO
                                                           (cdr g$subst*$27904$1LXXoO)
                                                           g$mark*$27905$1LXXoO))))
                                                    (if g$si$27909$1LXXoO
                                                      (begin
                                                        '#f
                                                        (g$same-marks*?$27105$1LXXoO
                                                          g$mark*$27905$1LXXoO
                                                          (g$rib-mark**$27042$1LXXoO
                                                            g$rib$27906$1LXXoO)
                                                          (g$reverse$20074$1LXXoO
                                                            g$si$27909$1LXXoO)))
                                                      '#f))))
                                                (g$hashtable-ref$20167$1LXXoO
                                                  g$ht$27908$1LXXoO
                                                  g$sym$27902$1LXXoO
                                                  '#f))))
                                            g$t$27907$1LXXoO)
                                           ((case-lambda
                                              ((g$t$27911$1LXXoO)
                                               (if g$t$27911$1LXXoO
                                                 g$t$27911$1LXXoO
                                                 (begin
                                                   '#f
                                                   (begin
                                                     '#f
                                                     ((letrec ((g$f$27912$1LXXoO
                                                                 (case-lambda
                                                                   ((g$sym*$27913$1LXXoO
                                                                      g$mark**$27914$1LXXoO
                                                                      g$label*$27915$1LXXoO)
                                                                    (if (null?
                                                                          g$sym*$27913$1LXXoO)
                                                                      (g$search$27903$1LXXoO
                                                                        (cdr g$subst*$27904$1LXXoO)
                                                                        g$mark*$27905$1LXXoO)
                                                                      (if (if (eq? (car g$sym*$27913$1LXXoO)
                                                                                   g$sym$27902$1LXXoO)
                                                                            (begin
                                                                              '#f
                                                                              (g$same-marks?$27095$1LXXoO
                                                                                (car g$mark**$27914$1LXXoO)
                                                                                g$mark*$27905$1LXXoO))
                                                                            '#f)
                                                                        (car g$label*$27915$1LXXoO)
                                                                        (begin
                                                                          '#f
                                                                          (g$f$27912$1LXXoO
                                                                            (cdr g$sym*$27913$1LXXoO)
                                                                            (cdr g$mark**$27914$1LXXoO)
                                                                            (cdr g$label*$27915$1LXXoO)))))))))
                                                        g$f$27912$1LXXoO)
                                                      (g$rib-sym*$27041$1LXXoO
                                                        g$rib$27906$1LXXoO)
                                                      (g$rib-mark**$27042$1LXXoO
                                                        g$rib$27906$1LXXoO)
                                                      (g$rib-label*$27043$1LXXoO
                                                        g$rib$27906$1LXXoO)))))))
                                            (g$find-label$27053$1LXXoO
                                              g$rib$27906$1LXXoO
                                              g$sym$27902$1LXXoO
                                              g$mark*$27905$1LXXoO)))))
                                      (g$rib-sealed/freq$27044$1LXXoO
                                        g$rib$27906$1LXXoO))))
                                  (car g$subst*$27904$1LXXoO)))))))))
               g$search$27903$1LXXoO)
             (g$stx-subst*$27069$1LXXoO g$id$27901$1LXXoO)
             (g$stx-mark*$27068$1LXXoO g$id$27901$1LXXoO))))
         (g$id->sym$27094$1LXXoO g$id$27901$1LXXoO)))))
   (g$label->binding$27108$1LXXoO
     g$label->binding$31115$1LXXoO
     (case-lambda
       ((g$x$27916$1LXXoO g$r$27917$1LXXoO)
        (if (not g$x$27916$1LXXoO)
          '(displaced-lexical)
          ((case-lambda
             ((g$t$27918$1LXXoO)
              (if g$t$27918$1LXXoO
                ((case-lambda
                   ((g$b$27919$1LXXoO)
                    (if (if (pair? g$b$27919$1LXXoO)
                          (begin
                            '#f
                            (eq? (car g$b$27919$1LXXoO) '$core-rtd))
                          '#f)
                      (cons
                        '$rtd
                        (g$map$19225$1LXXoO
                          g$bless$27554$1LXXoO
                          (cdr g$b$27919$1LXXoO)))
                      (if (if (pair? g$b$27919$1LXXoO)
                            (begin
                              '#f
                              (eq? (car g$b$27919$1LXXoO) 'global-rtd))
                            '#f)
                        ((case-lambda
                           ((g$lib$27920$1LXXoO g$loc$27921$1LXXoO)
                            (cons
                              '$rtd
                              (symbol-value g$loc$27921$1LXXoO))))
                         (g$cadr$20076$1LXXoO g$b$27919$1LXXoO)
                         (g$cddr$20078$1LXXoO g$b$27919$1LXXoO))
                        (begin '#f g$b$27919$1LXXoO)))))
                 g$t$27918$1LXXoO)
                ((case-lambda
                   ((g$t$27922$1LXXoO)
                    (if g$t$27922$1LXXoO
                      (cdr g$t$27922$1LXXoO)
                      ((case-lambda
                         ((g$t$27923$1LXXoO)
                          (if g$t$27923$1LXXoO
                            ((case-lambda
                               ((g$env$27924$1LXXoO)
                                ((case-lambda
                                   ((g$t$27925$1LXXoO)
                                    (if g$t$27925$1LXXoO
                                      ((case-lambda
                                         ((g$p$27926$1LXXoO)
                                          (g$cons*$19227$1LXXoO
                                            'lexical
                                            (cdr g$p$27926$1LXXoO)
                                            '#f)))
                                       g$t$27925$1LXXoO)
                                      (begin
                                        '#f
                                        '(displaced-lexical . #f)))))
                                 (g$assq$19213$1LXXoO
                                   g$x$27916$1LXXoO
                                   (g$interaction-env-locs$27678$1LXXoO
                                     g$env$27924$1LXXoO)))))
                             g$t$27923$1LXXoO)
                            (begin '#f '(displaced-lexical . #f)))))
                       (g$top-level-context$27718$1LXXoO)))))
                 (g$assq$19213$1LXXoO
                   g$x$27916$1LXXoO
                   g$r$27917$1LXXoO)))))
           (g$imported-label->binding$26798$1LXXoO
             g$x$27916$1LXXoO))))))
   (g$make-binding$27109$1LXXoO g$make-binding$31116$1LXXoO cons)
   (g$binding-type$27110$1LXXoO g$binding-type$31117$1LXXoO car)
   (g$binding-value$27111$1LXXoO g$binding-value$31118$1LXXoO cdr)
   (g$raise-unbound-error$27112$1LXXoO
     g$raise-unbound-error$31119$1LXXoO
     (case-lambda
       ((g$id$27927$1LXXoO)
        (g$syntax-violation*$27709$1LXXoO
          '#f
          '"unbound identifier"
          g$id$27927$1LXXoO
          (g$make-undefined-violation$21270$1LXXoO)))))
   (g$syntax-type$27113$1LXXoO
     g$syntax-type$31120$1LXXoO
     (case-lambda
       ((g$e$27928$1LXXoO g$r$27929$1LXXoO)
        (if (g$id?$27093$1LXXoO g$e$27928$1LXXoO)
          ((case-lambda
             ((g$id$27930$1LXXoO)
              ((case-lambda
                 ((g$label$27931$1LXXoO)
                  ((case-lambda
                     ((g$b$27932$1LXXoO)
                      ((case-lambda
                         ((g$type$27933$1LXXoO)
                          (begin
                            (if (not g$label$27931$1LXXoO)
                              (g$raise-unbound-error$27112$1LXXoO
                                g$id$27930$1LXXoO)
                              (void))
                            ((case-lambda
                               ((g$t$27934$1LXXoO)
                                (if (g$memv$19218$1LXXoO
                                      g$t$27934$1LXXoO
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable
                                         ctv
                                         local-ctv
                                         global-ctv))
                                  (values
                                    g$type$27933$1LXXoO
                                    (g$binding-value$27111$1LXXoO
                                      g$b$27932$1LXXoO)
                                    g$id$27930$1LXXoO)
                                  (begin '#f (values 'other '#f '#f)))))
                             g$type$27933$1LXXoO))))
                       (g$binding-type$27110$1LXXoO g$b$27932$1LXXoO))))
                   (g$label->binding$27108$1LXXoO
                     g$label$27931$1LXXoO
                     g$r$27929$1LXXoO))))
               (g$id->label$27106$1LXXoO g$id$27930$1LXXoO))))
           g$e$27928$1LXXoO)
          (if (g$syntax-pair?$27086$1LXXoO g$e$27928$1LXXoO)
            ((case-lambda
               ((g$id$27935$1LXXoO)
                (if (g$id?$27093$1LXXoO g$id$27935$1LXXoO)
                  ((case-lambda
                     ((g$label$27936$1LXXoO)
                      ((case-lambda
                         ((g$b$27937$1LXXoO)
                          ((case-lambda
                             ((g$type$27938$1LXXoO)
                              (begin
                                (if (not g$label$27936$1LXXoO)
                                  (g$raise-unbound-error$27112$1LXXoO
                                    g$id$27935$1LXXoO)
                                  (void))
                                ((case-lambda
                                   ((g$t$27939$1LXXoO)
                                    (if (g$memv$19218$1LXXoO
                                          g$t$27939$1LXXoO
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd
                                             ctv
                                             local-ctv
                                             global-ctv))
                                      (values
                                        g$type$27938$1LXXoO
                                        (g$binding-value$27111$1LXXoO
                                          g$b$27937$1LXXoO)
                                        g$id$27935$1LXXoO)
                                      (begin
                                        '#f
                                        (values 'call '#f '#f)))))
                                 g$type$27938$1LXXoO))))
                           (g$binding-type$27110$1LXXoO
                             g$b$27937$1LXXoO))))
                       (g$label->binding$27108$1LXXoO
                         g$label$27936$1LXXoO
                         g$r$27929$1LXXoO))))
                   (g$id->label$27106$1LXXoO g$id$27935$1LXXoO))
                  (values 'call '#f '#f))))
             (g$syntax-car$27090$1LXXoO g$e$27928$1LXXoO))
            (begin
              '#f
              ((case-lambda
                 ((g$d$27940$1LXXoO)
                  (if (g$self-evaluating?$27101$1LXXoO g$d$27940$1LXXoO)
                    (values 'constant g$d$27940$1LXXoO '#f)
                    (values 'other '#f '#f))))
               (g$stx->datum$27104$1LXXoO g$e$27928$1LXXoO))))))))
   (g$sanitize-binding$27136$1LXXoO
     g$sanitize-binding$31121$1LXXoO
     (case-lambda
       ((g$x$27941$1LXXoO g$src$27942$1LXXoO)
        (if (g$procedure?$20059$1LXXoO g$x$27941$1LXXoO)
          (g$cons*$19227$1LXXoO
            'local-macro
            g$x$27941$1LXXoO
            g$src$27942$1LXXoO)
          (if (if (pair? g$x$27941$1LXXoO)
                (if (eq? (car g$x$27941$1LXXoO) 'macro!)
                  (begin
                    '#f
                    (g$procedure?$20059$1LXXoO (cdr g$x$27941$1LXXoO)))
                  '#f)
                '#f)
            (g$cons*$19227$1LXXoO
              'local-macro!
              (cdr g$x$27941$1LXXoO)
              g$src$27942$1LXXoO)
            (if (if (pair? g$x$27941$1LXXoO)
                  (begin '#f (eq? (car g$x$27941$1LXXoO) '$rtd))
                  '#f)
              g$x$27941$1LXXoO
              (if (if (pair? g$x$27941$1LXXoO)
                    (begin '#f (eq? (car g$x$27941$1LXXoO) 'ctv))
                    '#f)
                (g$cons*$19227$1LXXoO
                  'local-ctv
                  (cdr g$x$27941$1LXXoO)
                  g$src$27942$1LXXoO)
                (begin
                  '#f
                  (assertion-violation
                    'expand
                    '"invalid transformer"
                    g$x$27941$1LXXoO)))))))))
   (g$make-variable-transformer$27137$1LXXoO
     g$make-variable-transformer$31122$1LXXoO
     (case-lambda
       ((g$x$27943$1LXXoO)
        (if (g$procedure?$20059$1LXXoO g$x$27943$1LXXoO)
          (cons 'macro! g$x$27943$1LXXoO)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$27943$1LXXoO)))))
   (g$make-compile-time-value$27138$1LXXoO
     g$make-compile-time-value$31123$1LXXoO
     (case-lambda ((g$x$27944$1LXXoO) (cons 'ctv g$x$27944$1LXXoO))))
   (g$variable-transformer?$27139$1LXXoO
     g$variable-transformer?$31124$1LXXoO
     (case-lambda
       ((g$x$27945$1LXXoO)
        (if (pair? g$x$27945$1LXXoO)
          (if (eq? (car g$x$27945$1LXXoO) 'macro!)
            (begin
              '#f
              (g$procedure?$20059$1LXXoO (cdr g$x$27945$1LXXoO)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$27140$1LXXoO
     g$variable-transformer-procedure$31125$1LXXoO
     (case-lambda
       ((g$x$27946$1LXXoO)
        (if (g$variable-transformer?$27139$1LXXoO g$x$27946$1LXXoO)
          (cdr g$x$27946$1LXXoO)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$27946$1LXXoO)))))
   (g$make-eval-transformer$27141$1LXXoO
     g$make-eval-transformer$31126$1LXXoO
     (case-lambda
       ((g$x$27947$1LXXoO)
        (g$sanitize-binding$27136$1LXXoO
          (eval-core (g$expanded->core$26531$1LXXoO g$x$27947$1LXXoO))
          g$x$27947$1LXXoO))))
   (g$parse-define$27531$1LXXoO
     g$parse-define$31127$1LXXoO
     (case-lambda
       ((g$x$27948$1LXXoO)
        ((case-lambda
           ((g$t$27949$1LXXoO)
            ((case-lambda
               ((g$ls/false$27950$1LXXoO)
                (if (if g$ls/false$27950$1LXXoO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$27951$1LXXoO
                               g$fmls$27952$1LXXoO
                               g$b$27953$1LXXoO
                               g$b*$27954$1LXXoO)
                             (g$id?$27093$1LXXoO g$id$27951$1LXXoO)))
                          g$ls/false$27950$1LXXoO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$27955$1LXXoO
                         g$fmls$27956$1LXXoO
                         g$b$27957$1LXXoO
                         g$b*$27958$1LXXoO)
                       (begin
                         (g$verify-formals$27611$1LXXoO
                           g$fmls$27956$1LXXoO
                           g$x$27948$1LXXoO)
                         (values
                           g$id$27955$1LXXoO
                           (cons
                             'defun
                             (cons
                               g$fmls$27956$1LXXoO
                               (cons
                                 g$b$27957$1LXXoO
                                 g$b*$27958$1LXXoO)))))))
                    g$ls/false$27950$1LXXoO)
                  ((case-lambda
                     ((g$t$27959$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$27960$1LXXoO)
                          (if (if g$ls/false$27960$1LXXoO
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$27961$1LXXoO
                                         g$val$27962$1LXXoO)
                                       (g$id?$27093$1LXXoO
                                         g$id$27961$1LXXoO)))
                                    g$ls/false$27960$1LXXoO))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$27963$1LXXoO g$val$27964$1LXXoO)
                                 (values
                                   g$id$27963$1LXXoO
                                   (cons 'expr g$val$27964$1LXXoO))))
                              g$ls/false$27960$1LXXoO)
                            ((case-lambda
                               ((g$t$27965$1LXXoO)
                                ((case-lambda
                                   ((g$ls/false$27966$1LXXoO)
                                    (if (if g$ls/false$27966$1LXXoO
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$27967$1LXXoO)
                                                 (g$id?$27093$1LXXoO
                                                   g$id$27967$1LXXoO)))
                                              g$ls/false$27966$1LXXoO))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$27968$1LXXoO)
                                           (values
                                             g$id$27968$1LXXoO
                                             (cons
                                               'expr
                                               (g$bless$27554$1LXXoO
                                                 '(void))))))
                                        g$ls/false$27966$1LXXoO)
                                      (g$syntax-violation$27710$1LXXoO
                                        '#f
                                        '"invalid syntax"
                                        g$t$27965$1LXXoO))))
                                 (g$syntax-dispatch$27591$1LXXoO
                                   g$t$27965$1LXXoO
                                   '(_ any)))))
                             g$t$27959$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$27959$1LXXoO
                         '(_ any any)))))
                   g$t$27949$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$27949$1LXXoO
               '(_ (any . any) any . each-any)))))
         g$x$27948$1LXXoO))))
   (g$parse-define-syntax$27532$1LXXoO
     g$parse-define-syntax$31128$1LXXoO
     (case-lambda
       ((g$x$27969$1LXXoO)
        ((case-lambda
           ((g$t$27970$1LXXoO)
            ((case-lambda
               ((g$ls/false$27971$1LXXoO)
                (if (if g$ls/false$27971$1LXXoO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$27972$1LXXoO g$val$27973$1LXXoO)
                             (g$id?$27093$1LXXoO g$id$27972$1LXXoO)))
                          g$ls/false$27971$1LXXoO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$27974$1LXXoO g$val$27975$1LXXoO)
                       (values g$id$27974$1LXXoO g$val$27975$1LXXoO)))
                    g$ls/false$27971$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$27970$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$27970$1LXXoO
               '(_ any any)))))
         g$x$27969$1LXXoO))))
   (g$scheme-stx-hashtable$27533$1LXXoO
     g$scheme-stx-hashtable$31129$1LXXoO
     (g$make-eq-hashtable$20164$1LXXoO))
   (g$scheme-stx$27534$1LXXoO
     g$scheme-stx$31130$1LXXoO
     (case-lambda
       ((g$sym$27976$1LXXoO)
        ((case-lambda
           ((g$t$27977$1LXXoO)
            (if g$t$27977$1LXXoO
              g$t$27977$1LXXoO
              (begin
                '#f
                ((case-lambda
                   ((g$subst$27978$1LXXoO)
                    ((case-lambda
                       ((g$stx$27979$1LXXoO)
                        ((case-lambda
                           ((g$stx$27980$1LXXoO)
                            (begin
                              (g$hashtable-set!$20168$1LXXoO
                                g$scheme-stx-hashtable$27533$1LXXoO
                                g$sym$27976$1LXXoO
                                g$stx$27980$1LXXoO)
                              g$stx$27980$1LXXoO)))
                         ((case-lambda
                            ((g$t$27981$1LXXoO)
                             (if g$t$27981$1LXXoO
                               ((case-lambda
                                  ((g$x$27982$1LXXoO)
                                   ((case-lambda
                                      ((g$name$27983$1LXXoO
                                         g$label$27984$1LXXoO)
                                       (g$add-subst$27083$1LXXoO
                                         (g$make-rib$27040$1LXXoO
                                           (list g$name$27983$1LXXoO)
                                           (list
                                             g$top-mark*$27026$1LXXoO)
                                           (list g$label$27984$1LXXoO)
                                           '#f
                                           '#f)
                                         g$stx$27979$1LXXoO)))
                                    (car g$x$27982$1LXXoO)
                                    (cdr g$x$27982$1LXXoO))))
                                g$t$27981$1LXXoO)
                               (begin '#f g$stx$27979$1LXXoO))))
                          (g$assq$19213$1LXXoO
                            g$sym$27976$1LXXoO
                            g$subst$27978$1LXXoO)))))
                     (g$make-stx$27066$1LXXoO
                       g$sym$27976$1LXXoO
                       g$top-mark*$27026$1LXXoO
                       '()
                       '()))))
                 (g$library-subst$26756$1LXXoO
                   (g$find-library-by-name$26792$1LXXoO
                     '(psyntax system $all))))))))
         (g$hashtable-ref$20167$1LXXoO
           g$scheme-stx-hashtable$27533$1LXXoO
           g$sym$27976$1LXXoO
           '#f)))))
   (g$lexical-var$27535$1LXXoO g$lexical-var$31131$1LXXoO car)
   (g$lexical-mutable?$27536$1LXXoO g$lexical-mutable?$31132$1LXXoO cdr)
   (g$set-lexical-mutable!$27537$1LXXoO
     g$set-lexical-mutable!$31133$1LXXoO
     set-cdr!)
   (g$add-lexical$27538$1LXXoO
     g$add-lexical$31134$1LXXoO
     (case-lambda
       ((g$lab$27985$1LXXoO g$lex$27986$1LXXoO g$r$27987$1LXXoO)
        (cons
          (g$cons*$19227$1LXXoO
            g$lab$27985$1LXXoO
            'lexical
            g$lex$27986$1LXXoO
            '#f)
          g$r$27987$1LXXoO))))
   (g$add-lexicals$27539$1LXXoO
     g$add-lexicals$31135$1LXXoO
     (case-lambda
       ((g$lab*$27988$1LXXoO g$lex*$27989$1LXXoO g$r$27990$1LXXoO)
        (if (null? g$lab*$27988$1LXXoO)
          g$r$27990$1LXXoO
          (begin
            '#f
            (g$add-lexicals$27539$1LXXoO
              (cdr g$lab*$27988$1LXXoO)
              (cdr g$lex*$27989$1LXXoO)
              (g$add-lexical$27538$1LXXoO
                (car g$lab*$27988$1LXXoO)
                (car g$lex*$27989$1LXXoO)
                g$r$27990$1LXXoO)))))))
   (g$letrec-helper$27540$1LXXoO
     g$letrec-helper$31136$1LXXoO
     (case-lambda
       ((g$e$27991$1LXXoO
          g$r$27992$1LXXoO
          g$mr$27993$1LXXoO
          g$build$27994$1LXXoO)
        ((case-lambda
           ((g$t$27995$1LXXoO)
            ((case-lambda
               ((g$ls/false$27996$1LXXoO)
                (if g$ls/false$27996$1LXXoO
                  (apply
                    (case-lambda
                      ((g$lhs*$27997$1LXXoO
                         g$rhs*$27998$1LXXoO
                         g$b$27999$1LXXoO
                         g$b*$28000$1LXXoO)
                       (if (not (g$valid-bound-ids?$27098$1LXXoO
                                  g$lhs*$27997$1LXXoO))
                         (g$invalid-fmls-error$27556$1LXXoO
                           g$e$27991$1LXXoO
                           g$lhs*$27997$1LXXoO)
                         ((case-lambda
                            ((g$lex*$28001$1LXXoO g$lab*$28002$1LXXoO)
                             ((case-lambda
                                ((g$rib$28003$1LXXoO g$r$28004$1LXXoO)
                                 ((case-lambda
                                    ((g$body$28005$1LXXoO
                                       g$rhs*$28006$1LXXoO)
                                     (g$build$27994$1LXXoO
                                       '#f
                                       g$lex*$28001$1LXXoO
                                       g$rhs*$28006$1LXXoO
                                       g$body$28005$1LXXoO)))
                                  (g$chi-internal$27620$1LXXoO
                                    (g$add-subst$27083$1LXXoO
                                      g$rib$28003$1LXXoO
                                      (cons
                                        g$b$27999$1LXXoO
                                        g$b*$28000$1LXXoO))
                                    g$r$28004$1LXXoO
                                    g$mr$27993$1LXXoO)
                                  (g$chi-expr*$27607$1LXXoO
                                    (g$map$19225$1LXXoO
                                      (case-lambda
                                        ((g$x$28007$1LXXoO)
                                         (g$add-subst$27083$1LXXoO
                                           g$rib$28003$1LXXoO
                                           g$x$28007$1LXXoO)))
                                      g$rhs*$27998$1LXXoO)
                                    g$r$28004$1LXXoO
                                    g$mr$27993$1LXXoO))))
                              (g$make-full-rib$27059$1LXXoO
                                g$lhs*$27997$1LXXoO
                                g$lab*$28002$1LXXoO)
                              (g$add-lexicals$27539$1LXXoO
                                g$lab*$28002$1LXXoO
                                g$lex*$28001$1LXXoO
                                g$r$27992$1LXXoO))))
                          (g$map$19225$1LXXoO
                            g$gen-lexical$27028$1LXXoO
                            g$lhs*$27997$1LXXoO)
                          (g$map$19225$1LXXoO
                            g$gen-label$27030$1LXXoO
                            g$lhs*$27997$1LXXoO)))))
                    g$ls/false$27996$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$27995$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$27995$1LXXoO
               '(_ #(each (any any)) any . each-any)))))
         g$e$27991$1LXXoO))))
   (g$letrec-transformer$27541$1LXXoO
     g$letrec-transformer$31137$1LXXoO
     (case-lambda
       ((g$e$28008$1LXXoO g$r$28009$1LXXoO g$mr$28010$1LXXoO)
        (g$letrec-helper$27540$1LXXoO
          g$e$28008$1LXXoO
          g$r$28009$1LXXoO
          g$mr$28010$1LXXoO
          g$build-letrec$27020$1LXXoO))))
   (g$letrec*-transformer$27542$1LXXoO
     g$letrec*-transformer$31138$1LXXoO
     (case-lambda
       ((g$e$28011$1LXXoO g$r$28012$1LXXoO g$mr$28013$1LXXoO)
        (g$letrec-helper$27540$1LXXoO
          g$e$28011$1LXXoO
          g$r$28012$1LXXoO
          g$mr$28013$1LXXoO
          g$build-letrec*$27021$1LXXoO))))
   (g$fluid-let-syntax-transformer$27543$1LXXoO
     g$fluid-let-syntax-transformer$31139$1LXXoO
     (case-lambda
       ((g$e$28014$1LXXoO g$r$28015$1LXXoO g$mr$28016$1LXXoO)
        (letrec* ((g$lookup$28017$1LXXoO
                    (case-lambda
                      ((g$x$28027$1LXXoO)
                       ((case-lambda
                          ((g$t$28028$1LXXoO)
                           (if g$t$28028$1LXXoO
                             g$t$28028$1LXXoO
                             (begin
                               '#f
                               (g$syntax-violation$27710$1LXXoO
                                 '#f
                                 '"unbound identifier"
                                 g$e$28014$1LXXoO
                                 g$x$28027$1LXXoO)))))
                        (g$id->label$27106$1LXXoO g$x$28027$1LXXoO))))))
          ((case-lambda
             ((g$t$28018$1LXXoO)
              ((case-lambda
                 ((g$ls/false$28019$1LXXoO)
                  (if g$ls/false$28019$1LXXoO
                    (apply
                      (case-lambda
                        ((g$lhs*$28020$1LXXoO
                           g$rhs*$28021$1LXXoO
                           g$b$28022$1LXXoO
                           g$b*$28023$1LXXoO)
                         (if (not (g$valid-bound-ids?$27098$1LXXoO
                                    g$lhs*$28020$1LXXoO))
                           (g$invalid-fmls-error$27556$1LXXoO
                             g$e$28014$1LXXoO
                             g$lhs*$28020$1LXXoO)
                           ((case-lambda
                              ((g$lab*$28024$1LXXoO g$rhs*$28025$1LXXoO)
                               (g$chi-internal$27620$1LXXoO
                                 (cons
                                   g$b$28022$1LXXoO
                                   g$b*$28023$1LXXoO)
                                 (append
                                   (g$map$19225$1LXXoO
                                     cons
                                     g$lab*$28024$1LXXoO
                                     g$rhs*$28025$1LXXoO)
                                   g$r$28015$1LXXoO)
                                 (append
                                   (g$map$19225$1LXXoO
                                     cons
                                     g$lab*$28024$1LXXoO
                                     g$rhs*$28025$1LXXoO)
                                   g$mr$28016$1LXXoO))))
                            (g$map$19225$1LXXoO
                              g$lookup$28017$1LXXoO
                              g$lhs*$28020$1LXXoO)
                            (g$map$19225$1LXXoO
                              (case-lambda
                                ((g$x$28026$1LXXoO)
                                 (g$make-eval-transformer$27141$1LXXoO
                                   (g$expand-transformer$27639$1LXXoO
                                     g$x$28026$1LXXoO
                                     g$mr$28016$1LXXoO))))
                              g$rhs*$28021$1LXXoO)))))
                      g$ls/false$28019$1LXXoO)
                    (g$syntax-violation$27710$1LXXoO
                      '#f
                      '"invalid syntax"
                      g$t$28018$1LXXoO))))
               (g$syntax-dispatch$27591$1LXXoO
                 g$t$28018$1LXXoO
                 '(_ #(each (any any)) any . each-any)))))
           g$e$28014$1LXXoO)))))
   (g$type-descriptor-transformer$27544$1LXXoO
     g$type-descriptor-transformer$31140$1LXXoO
     (case-lambda
       ((g$e$28029$1LXXoO g$r$28030$1LXXoO g$mr$28031$1LXXoO)
        ((case-lambda
           ((g$t$28032$1LXXoO)
            ((case-lambda
               ((g$ls/false$28033$1LXXoO)
                (if (if g$ls/false$28033$1LXXoO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$28034$1LXXoO)
                             (g$id?$27093$1LXXoO g$id$28034$1LXXoO)))
                          g$ls/false$28033$1LXXoO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$28035$1LXXoO)
                       ((case-lambda
                          ((g$lab$28036$1LXXoO)
                           ((case-lambda
                              ((g$b$28037$1LXXoO)
                               ((case-lambda
                                  ((g$type$28038$1LXXoO)
                                   (begin
                                     (if (not g$lab$28036$1LXXoO)
                                       (g$raise-unbound-error$27112$1LXXoO
                                         g$id$28035$1LXXoO)
                                       (void))
                                     (if (not (if (eq? g$type$28038$1LXXoO
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$27111$1LXXoO
                                                           g$b$28037$1LXXoO))))
                                                '#f))
                                       (g$syntax-violation$27710$1LXXoO
                                         '#f
                                         '"not a record type"
                                         g$e$28029$1LXXoO)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$27111$1LXXoO
                                         g$b$28037$1LXXoO)))))
                                (g$binding-type$27110$1LXXoO
                                  g$b$28037$1LXXoO))))
                            (g$label->binding$27108$1LXXoO
                              g$lab$28036$1LXXoO
                              g$r$28030$1LXXoO))))
                        (g$id->label$27106$1LXXoO g$id$28035$1LXXoO))))
                    g$ls/false$28033$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28032$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28032$1LXXoO
               '(_ any)))))
         g$e$28029$1LXXoO))))
   (g$record-type-descriptor-transformer$27545$1LXXoO
     g$record-type-descriptor-transformer$31141$1LXXoO
     (case-lambda
       ((g$e$28039$1LXXoO g$r$28040$1LXXoO g$mr$28041$1LXXoO)
        ((case-lambda
           ((g$t$28042$1LXXoO)
            ((case-lambda
               ((g$ls/false$28043$1LXXoO)
                (if (if g$ls/false$28043$1LXXoO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$28044$1LXXoO)
                             (g$id?$27093$1LXXoO g$id$28044$1LXXoO)))
                          g$ls/false$28043$1LXXoO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$28045$1LXXoO)
                       ((case-lambda
                          ((g$lab$28046$1LXXoO)
                           ((case-lambda
                              ((g$b$28047$1LXXoO)
                               ((case-lambda
                                  ((g$type$28048$1LXXoO)
                                   (begin
                                     (if (not g$lab$28046$1LXXoO)
                                       (g$raise-unbound-error$27112$1LXXoO
                                         g$id$28045$1LXXoO)
                                       (void))
                                     (if (not (if (eq? g$type$28048$1LXXoO
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$27111$1LXXoO
                                                      g$b$28047$1LXXoO)))
                                                '#f))
                                       (g$syntax-violation$27710$1LXXoO
                                         '#f
                                         '"not a record type"
                                         g$e$28039$1LXXoO)
                                       (void))
                                     (g$chi-expr$27609$1LXXoO
                                       (car (g$binding-value$27111$1LXXoO
                                              g$b$28047$1LXXoO))
                                       g$r$28040$1LXXoO
                                       g$mr$28041$1LXXoO))))
                                (g$binding-type$27110$1LXXoO
                                  g$b$28047$1LXXoO))))
                            (g$label->binding$27108$1LXXoO
                              g$lab$28046$1LXXoO
                              g$r$28040$1LXXoO))))
                        (g$id->label$27106$1LXXoO g$id$28045$1LXXoO))))
                    g$ls/false$28043$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28042$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28042$1LXXoO
               '(_ any)))))
         g$e$28039$1LXXoO))))
   (g$record-constructor-descriptor-transformer$27546$1LXXoO
     g$record-constructor-descriptor-transformer$31142$1LXXoO
     (case-lambda
       ((g$e$28049$1LXXoO g$r$28050$1LXXoO g$mr$28051$1LXXoO)
        ((case-lambda
           ((g$t$28052$1LXXoO)
            ((case-lambda
               ((g$ls/false$28053$1LXXoO)
                (if (if g$ls/false$28053$1LXXoO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$28054$1LXXoO)
                             (g$id?$27093$1LXXoO g$id$28054$1LXXoO)))
                          g$ls/false$28053$1LXXoO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$28055$1LXXoO)
                       ((case-lambda
                          ((g$lab$28056$1LXXoO)
                           ((case-lambda
                              ((g$b$28057$1LXXoO)
                               ((case-lambda
                                  ((g$type$28058$1LXXoO)
                                   (begin
                                     (if (not g$lab$28056$1LXXoO)
                                       (g$raise-unbound-error$27112$1LXXoO
                                         g$id$28055$1LXXoO)
                                       (void))
                                     (if (not (if (eq? g$type$28058$1LXXoO
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$27111$1LXXoO
                                                      g$b$28057$1LXXoO)))
                                                '#f))
                                       (g$syntax-violation$27710$1LXXoO
                                         '#f
                                         '"invalid type"
                                         g$e$28049$1LXXoO)
                                       (void))
                                     (g$chi-expr$27609$1LXXoO
                                       (g$cadr$20076$1LXXoO
                                         (g$binding-value$27111$1LXXoO
                                           g$b$28057$1LXXoO))
                                       g$r$28050$1LXXoO
                                       g$mr$28051$1LXXoO))))
                                (g$binding-type$27110$1LXXoO
                                  g$b$28057$1LXXoO))))
                            (g$label->binding$27108$1LXXoO
                              g$lab$28056$1LXXoO
                              g$r$28050$1LXXoO))))
                        (g$id->label$27106$1LXXoO g$id$28055$1LXXoO))))
                    g$ls/false$28053$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28052$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28052$1LXXoO
               '(_ any)))))
         g$e$28049$1LXXoO))))
   (g$when-macro$27547$1LXXoO
     g$when-macro$31143$1LXXoO
     (case-lambda
       ((g$e$28059$1LXXoO)
        ((case-lambda
           ((g$t$28060$1LXXoO)
            ((case-lambda
               ((g$ls/false$28061$1LXXoO)
                (if g$ls/false$28061$1LXXoO
                  (apply
                    (case-lambda
                      ((g$test$28062$1LXXoO
                         g$e$28063$1LXXoO
                         g$e*$28064$1LXXoO)
                       (g$bless$27554$1LXXoO
                         (list
                           'if
                           g$test$28062$1LXXoO
                           (cons
                             'begin
                             (cons
                               g$e$28063$1LXXoO
                               g$e*$28064$1LXXoO))))))
                    g$ls/false$28061$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28060$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28060$1LXXoO
               '(_ any any . each-any)))))
         g$e$28059$1LXXoO))))
   (g$unless-macro$27548$1LXXoO
     g$unless-macro$31144$1LXXoO
     (case-lambda
       ((g$e$28065$1LXXoO)
        ((case-lambda
           ((g$t$28066$1LXXoO)
            ((case-lambda
               ((g$ls/false$28067$1LXXoO)
                (if g$ls/false$28067$1LXXoO
                  (apply
                    (case-lambda
                      ((g$test$28068$1LXXoO
                         g$e$28069$1LXXoO
                         g$e*$28070$1LXXoO)
                       (g$bless$27554$1LXXoO
                         (list
                           'if
                           (list 'not g$test$28068$1LXXoO)
                           (cons
                             'begin
                             (cons
                               g$e$28069$1LXXoO
                               g$e*$28070$1LXXoO))))))
                    g$ls/false$28067$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28066$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28066$1LXXoO
               '(_ any any . each-any)))))
         g$e$28065$1LXXoO))))
   (g$if-transformer$27549$1LXXoO
     g$if-transformer$31145$1LXXoO
     (case-lambda
       ((g$e$28071$1LXXoO g$r$28072$1LXXoO g$mr$28073$1LXXoO)
        ((case-lambda
           ((g$t$28074$1LXXoO)
            ((case-lambda
               ((g$ls/false$28075$1LXXoO)
                (if g$ls/false$28075$1LXXoO
                  (apply
                    (case-lambda
                      ((g$e0$28076$1LXXoO
                         g$e1$28077$1LXXoO
                         g$e2$28078$1LXXoO)
                       (list
                         'if
                         (g$chi-expr$27609$1LXXoO
                           g$e0$28076$1LXXoO
                           g$r$28072$1LXXoO
                           g$mr$28073$1LXXoO)
                         (g$chi-expr$27609$1LXXoO
                           g$e1$28077$1LXXoO
                           g$r$28072$1LXXoO
                           g$mr$28073$1LXXoO)
                         (g$chi-expr$27609$1LXXoO
                           g$e2$28078$1LXXoO
                           g$r$28072$1LXXoO
                           g$mr$28073$1LXXoO))))
                    g$ls/false$28075$1LXXoO)
                  ((case-lambda
                     ((g$t$28079$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$28080$1LXXoO)
                          (if g$ls/false$28080$1LXXoO
                            (apply
                              (case-lambda
                                ((g$e0$28081$1LXXoO g$e1$28082$1LXXoO)
                                 (list
                                   'if
                                   (g$chi-expr$27609$1LXXoO
                                     g$e0$28081$1LXXoO
                                     g$r$28072$1LXXoO
                                     g$mr$28073$1LXXoO)
                                   (g$chi-expr$27609$1LXXoO
                                     g$e1$28082$1LXXoO
                                     g$r$28072$1LXXoO
                                     g$mr$28073$1LXXoO)
                                   (g$build-void$27019$1LXXoO))))
                              g$ls/false$28080$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"invalid syntax"
                              g$t$28079$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$28079$1LXXoO
                         '(_ any any)))))
                   g$t$28074$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28074$1LXXoO
               '(_ any any any)))))
         g$e$28071$1LXXoO))))
   (g$case-macro$27550$1LXXoO
     g$case-macro$31146$1LXXoO
     (case-lambda
       ((g$e$28083$1LXXoO)
        (letrec* ((g$build-last$28084$1LXXoO
                    (case-lambda
                      ((g$cls$28104$1LXXoO)
                       ((case-lambda
                          ((g$t$28105$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$28106$1LXXoO)
                               (if g$ls/false$28106$1LXXoO
                                 (apply
                                   (case-lambda
                                     ((g$e$28107$1LXXoO
                                        g$e*$28108$1LXXoO)
                                      (cons
                                        'begin
                                        (cons
                                          '#f
                                          (cons
                                            g$e$28107$1LXXoO
                                            g$e*$28108$1LXXoO)))))
                                   g$ls/false$28106$1LXXoO)
                                 ((case-lambda
                                    ((g$t$28109$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$28110$1LXXoO)
                                         (if g$ls/false$28110$1LXXoO
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$28085$1LXXoO
                                                  g$cls$28104$1LXXoO
                                                  '(if #f #f))))
                                             g$ls/false$28110$1LXXoO)
                                           (g$syntax-violation$27710$1LXXoO
                                             '#f
                                             '"invalid syntax"
                                             g$t$28109$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$28109$1LXXoO
                                        '_))))
                                  g$t$28105$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$28105$1LXXoO
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$28104$1LXXoO))))
                  (g$build-one$28085$1LXXoO
                    (case-lambda
                      ((g$cls$28097$1LXXoO g$k$28098$1LXXoO)
                       ((case-lambda
                          ((g$t$28099$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$28100$1LXXoO)
                               (if g$ls/false$28100$1LXXoO
                                 (apply
                                   (case-lambda
                                     ((g$d*$28101$1LXXoO
                                        g$e$28102$1LXXoO
                                        g$e*$28103$1LXXoO)
                                      (if (g$=$20714$1LXXoO
                                            '1
                                            (length g$d*$28101$1LXXoO))
                                        (list
                                          'if
                                          (list
                                            'eqv?
                                            't
                                            (list
                                              'quote
                                              (car g$d*$28101$1LXXoO)))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$28102$1LXXoO
                                              g$e*$28103$1LXXoO))
                                          g$k$28098$1LXXoO)
                                        (list
                                          'if
                                          (list
                                            'memv
                                            't
                                            (list
                                              'quote
                                              g$d*$28101$1LXXoO))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$28102$1LXXoO
                                              g$e*$28103$1LXXoO))
                                          g$k$28098$1LXXoO))))
                                   g$ls/false$28100$1LXXoO)
                                 (g$syntax-violation$27710$1LXXoO
                                   '#f
                                   '"invalid syntax"
                                   g$t$28099$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$28099$1LXXoO
                              '(each-any any . each-any)))))
                        g$cls$28097$1LXXoO)))))
          ((case-lambda
             ((g$t$28086$1LXXoO)
              ((case-lambda
                 ((g$ls/false$28087$1LXXoO)
                  (if g$ls/false$28087$1LXXoO
                    (apply
                      (case-lambda
                        ((g$expr$28088$1LXXoO)
                         (g$bless$27554$1LXXoO
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$28088$1LXXoO))
                               '((if #f #f)))))))
                      g$ls/false$28087$1LXXoO)
                    ((case-lambda
                       ((g$t$28089$1LXXoO)
                        ((case-lambda
                           ((g$ls/false$28090$1LXXoO)
                            (if g$ls/false$28090$1LXXoO
                              (apply
                                (case-lambda
                                  ((g$expr$28091$1LXXoO
                                     g$cls$28092$1LXXoO
                                     g$cls*$28093$1LXXoO)
                                   (g$bless$27554$1LXXoO
                                     (list
                                       'let
                                       (list
                                         (list 't g$expr$28091$1LXXoO))
                                       ((letrec ((g$f$28094$1LXXoO
                                                   (case-lambda
                                                     ((g$cls$28095$1LXXoO
                                                        g$cls*$28096$1LXXoO)
                                                      (if (null?
                                                            g$cls*$28096$1LXXoO)
                                                        (g$build-last$28084$1LXXoO
                                                          g$cls$28095$1LXXoO)
                                                        (g$build-one$28085$1LXXoO
                                                          g$cls$28095$1LXXoO
                                                          (g$f$28094$1LXXoO
                                                            (car g$cls*$28096$1LXXoO)
                                                            (cdr g$cls*$28096$1LXXoO))))))))
                                          g$f$28094$1LXXoO)
                                        g$cls$28092$1LXXoO
                                        g$cls*$28093$1LXXoO)))))
                                g$ls/false$28090$1LXXoO)
                              (g$syntax-violation$27710$1LXXoO
                                '#f
                                '"invalid syntax"
                                g$t$28089$1LXXoO))))
                         (g$syntax-dispatch$27591$1LXXoO
                           g$t$28089$1LXXoO
                           '(_ any any . each-any)))))
                     g$t$28086$1LXXoO))))
               (g$syntax-dispatch$27591$1LXXoO
                 g$t$28086$1LXXoO
                 '(_ any)))))
           g$e$28083$1LXXoO)))))
   (g$quote-transformer$27551$1LXXoO
     g$quote-transformer$31147$1LXXoO
     (case-lambda
       ((g$e$28111$1LXXoO g$r$28112$1LXXoO g$mr$28113$1LXXoO)
        ((case-lambda
           ((g$t$28114$1LXXoO)
            ((case-lambda
               ((g$ls/false$28115$1LXXoO)
                (if g$ls/false$28115$1LXXoO
                  (apply
                    (case-lambda
                      ((g$datum$28116$1LXXoO)
                       (list
                         'quote
                         (g$stx->datum$27104$1LXXoO
                           g$datum$28116$1LXXoO))))
                    g$ls/false$28115$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28114$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28114$1LXXoO
               '(_ any)))))
         g$e$28111$1LXXoO))))
   (g$case-lambda-transformer$27552$1LXXoO
     g$case-lambda-transformer$31148$1LXXoO
     (case-lambda
       ((g$e$28117$1LXXoO g$r$28118$1LXXoO g$mr$28119$1LXXoO)
        ((case-lambda
           ((g$t$28120$1LXXoO)
            ((case-lambda
               ((g$ls/false$28121$1LXXoO)
                (if g$ls/false$28121$1LXXoO
                  (apply
                    (case-lambda
                      ((g$fmls*$28122$1LXXoO
                         g$b*$28123$1LXXoO
                         g$b**$28124$1LXXoO)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$27613$1LXXoO
                              g$e$28117$1LXXoO
                              g$fmls*$28122$1LXXoO
                              (g$map$19225$1LXXoO
                                cons
                                g$b*$28123$1LXXoO
                                g$b**$28124$1LXXoO)
                              g$r$28118$1LXXoO
                              g$mr$28119$1LXXoO)))
                         (case-lambda
                           ((g$fmls*$28127$1LXXoO g$body*$28128$1LXXoO)
                            ((case-lambda
                               ((g$body*$28129$1LXXoO
                                  g$fmls*$28130$1LXXoO)
                                (g$build-case-lambda$27016$1LXXoO
                                  '#f
                                  g$fmls*$28130$1LXXoO
                                  g$body*$28129$1LXXoO)))
                             g$body*$28128$1LXXoO
                             g$fmls*$28127$1LXXoO))))))
                    g$ls/false$28121$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28120$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28120$1LXXoO
               '(_ . #(each (any any . each-any)))))))
         g$e$28117$1LXXoO))))
   (g$lambda-transformer$27553$1LXXoO
     g$lambda-transformer$31149$1LXXoO
     (case-lambda
       ((g$e$28131$1LXXoO g$r$28132$1LXXoO g$mr$28133$1LXXoO)
        ((case-lambda
           ((g$t$28134$1LXXoO)
            ((case-lambda
               ((g$ls/false$28135$1LXXoO)
                (if g$ls/false$28135$1LXXoO
                  (apply
                    (case-lambda
                      ((g$fmls$28136$1LXXoO
                         g$b$28137$1LXXoO
                         g$b*$28138$1LXXoO)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$27612$1LXXoO
                              g$e$28131$1LXXoO
                              g$fmls$28136$1LXXoO
                              (cons g$b$28137$1LXXoO g$b*$28138$1LXXoO)
                              g$r$28132$1LXXoO
                              g$mr$28133$1LXXoO)))
                         (case-lambda
                           ((g$fmls$28141$1LXXoO g$body$28142$1LXXoO)
                            ((case-lambda
                               ((g$body$28143$1LXXoO
                                  g$fmls$28144$1LXXoO)
                                (g$build-lambda$27015$1LXXoO
                                  '#f
                                  g$fmls$28144$1LXXoO
                                  g$body$28143$1LXXoO)))
                             g$body$28142$1LXXoO
                             g$fmls$28141$1LXXoO))))))
                    g$ls/false$28135$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28134$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28134$1LXXoO
               '(_ any any . each-any)))))
         g$e$28131$1LXXoO))))
   (g$bless$27554$1LXXoO
     g$bless$31150$1LXXoO
     (case-lambda
       ((g$x$28145$1LXXoO)
        (g$mkstx$27081$1LXXoO
          ((letrec ((g$f$28146$1LXXoO
                      (case-lambda
                        ((g$x$28147$1LXXoO)
                         (if (g$stx?$27065$1LXXoO g$x$28147$1LXXoO)
                           g$x$28147$1LXXoO
                           (if (pair? g$x$28147$1LXXoO)
                             (cons
                               (g$f$28146$1LXXoO (car g$x$28147$1LXXoO))
                               (g$f$28146$1LXXoO
                                 (cdr g$x$28147$1LXXoO)))
                             (if (g$symbol?$20057$1LXXoO
                                   g$x$28147$1LXXoO)
                               (g$scheme-stx$27534$1LXXoO
                                 g$x$28147$1LXXoO)
                               (if (g$vector?$20055$1LXXoO
                                     g$x$28147$1LXXoO)
                                 (g$vector-map$20124$1LXXoO
                                   g$f$28146$1LXXoO
                                   g$x$28147$1LXXoO)
                                 (begin '#f g$x$28147$1LXXoO)))))))))
             g$f$28146$1LXXoO)
           g$x$28145$1LXXoO)
          '()
          '()
          '()))))
   (g$with-syntax-macro$27555$1LXXoO
     g$with-syntax-macro$31151$1LXXoO
     (case-lambda
       ((g$e$28148$1LXXoO)
        ((case-lambda
           ((g$t$28149$1LXXoO)
            ((case-lambda
               ((g$ls/false$28150$1LXXoO)
                (if g$ls/false$28150$1LXXoO
                  (apply
                    (case-lambda
                      ((g$pat*$28151$1LXXoO
                         g$expr*$28152$1LXXoO
                         g$b$28153$1LXXoO
                         g$b*$28154$1LXXoO)
                       ((case-lambda
                          ((g$idn*$28155$1LXXoO)
                           (begin
                             (g$verify-formals$27611$1LXXoO
                               (g$map$19225$1LXXoO
                                 car
                                 g$idn*$28155$1LXXoO)
                               g$e$28148$1LXXoO)
                             ((case-lambda
                                ((g$t*$28156$1LXXoO)
                                 (g$bless$27554$1LXXoO
                                   (list
                                     'let
                                     (g$map$19225$1LXXoO
                                       list
                                       g$t*$28156$1LXXoO
                                       g$expr*$28152$1LXXoO)
                                     ((letrec ((g$f$28157$1LXXoO
                                                 (case-lambda
                                                   ((g$pat*$28158$1LXXoO
                                                      g$t*$28159$1LXXoO)
                                                    (if (null?
                                                          g$pat*$28158$1LXXoO)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$28153$1LXXoO
                                                          g$b*$28154$1LXXoO))
                                                      (begin
                                                        '#f
                                                        (list
                                                          'syntax-case
                                                          (car g$t*$28159$1LXXoO)
                                                          '()
                                                          (list
                                                            (car g$pat*$28158$1LXXoO)
                                                            (g$f$28157$1LXXoO
                                                              (cdr g$pat*$28158$1LXXoO)
                                                              (cdr g$t*$28159$1LXXoO)))
                                                          (list
                                                            '_
                                                            (list
                                                              'assertion-violation
                                                              ''with-syntax
                                                              '"pattern does not match value"
                                                              (list
                                                                'quote
                                                                (car g$pat*$28158$1LXXoO))
                                                              (car g$t*$28159$1LXXoO))))))))))
                                        g$f$28157$1LXXoO)
                                      g$pat*$28151$1LXXoO
                                      g$t*$28156$1LXXoO)))))
                              (g$generate-temporaries$27700$1LXXoO
                                g$expr*$28152$1LXXoO)))))
                        ((letrec ((g$f$28160$1LXXoO
                                    (case-lambda
                                      ((g$pat*$28161$1LXXoO)
                                       (if (null? g$pat*$28161$1LXXoO)
                                         '()
                                         (begin
                                           '#f
                                           (call-with-values
                                             (case-lambda
                                               (()
                                                (g$convert-pattern$27590$1LXXoO
                                                  (car g$pat*$28161$1LXXoO)
                                                  '())))
                                             (case-lambda
                                               ((g$pat$28164$1LXXoO
                                                  g$idn*$28165$1LXXoO)
                                                ((case-lambda
                                                   ((g$idn*$28166$1LXXoO
                                                      g$pat$28167$1LXXoO)
                                                    (append
                                                      g$idn*$28166$1LXXoO
                                                      (g$f$28160$1LXXoO
                                                        (cdr g$pat*$28161$1LXXoO)))))
                                                 g$idn*$28165$1LXXoO
                                                 g$pat$28164$1LXXoO))))))))))
                           g$f$28160$1LXXoO)
                         g$pat*$28151$1LXXoO))))
                    g$ls/false$28150$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28149$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28149$1LXXoO
               '(_ #(each (any any)) any . each-any)))))
         g$e$28148$1LXXoO))))
   (g$invalid-fmls-error$27556$1LXXoO
     g$invalid-fmls-error$31152$1LXXoO
     (case-lambda
       ((g$stx$28168$1LXXoO g$fmls$28169$1LXXoO)
        ((case-lambda
           ((g$t$28170$1LXXoO)
            ((case-lambda
               ((g$ls/false$28171$1LXXoO)
                (if g$ls/false$28171$1LXXoO
                  (apply
                    (case-lambda
                      ((g$id*$28172$1LXXoO g$last$28173$1LXXoO)
                       ((letrec ((g$f$28174$1LXXoO
                                   (case-lambda
                                     ((g$id*$28175$1LXXoO)
                                      (if (null? g$id*$28175$1LXXoO)
                                        (values)
                                        (if (not (g$id?$27093$1LXXoO
                                                   (car g$id*$28175$1LXXoO)))
                                          (g$syntax-violation$27710$1LXXoO
                                            '#f
                                            '"not an identifier"
                                            g$stx$28168$1LXXoO
                                            (car g$id*$28175$1LXXoO))
                                          (begin
                                            '#f
                                            (g$f$28174$1LXXoO
                                              (cdr g$id*$28175$1LXXoO))
                                            (if (g$bound-id-member?$27100$1LXXoO
                                                  (car g$id*$28175$1LXXoO)
                                                  (cdr g$id*$28175$1LXXoO))
                                              (g$syntax-violation$27710$1LXXoO
                                                '#f
                                                '"duplicate binding"
                                                g$stx$28168$1LXXoO
                                                (car g$id*$28175$1LXXoO))
                                              (void)))))))))
                          g$f$28174$1LXXoO)
                        (if (g$id?$27093$1LXXoO g$last$28173$1LXXoO)
                          (cons g$last$28173$1LXXoO g$id*$28172$1LXXoO)
                          (if (g$syntax-null?$27088$1LXXoO
                                g$last$28173$1LXXoO)
                            g$id*$28172$1LXXoO
                            (begin
                              '#f
                              (g$syntax-violation$27710$1LXXoO
                                '#f
                                '"not an identifier"
                                g$stx$28168$1LXXoO
                                g$last$28173$1LXXoO)))))))
                    g$ls/false$28171$1LXXoO)
                  ((case-lambda
                     ((g$t$28176$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$28177$1LXXoO)
                          (if g$ls/false$28177$1LXXoO
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$27710$1LXXoO
                                   '#f
                                   '"malformed binding form"
                                   g$stx$28168$1LXXoO
                                   g$fmls$28169$1LXXoO)))
                              g$ls/false$28177$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"invalid syntax"
                              g$t$28176$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$28176$1LXXoO
                         '_))))
                   g$t$28170$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28170$1LXXoO
               '#(each+ any () any)))))
         g$fmls$28169$1LXXoO))))
   (g$let-macro$27557$1LXXoO
     g$let-macro$31153$1LXXoO
     (case-lambda
       ((g$stx$28178$1LXXoO)
        ((case-lambda
           ((g$t$28179$1LXXoO)
            ((case-lambda
               ((g$ls/false$28180$1LXXoO)
                (if g$ls/false$28180$1LXXoO
                  (apply
                    (case-lambda
                      ((g$lhs*$28181$1LXXoO
                         g$rhs*$28182$1LXXoO
                         g$b$28183$1LXXoO
                         g$b*$28184$1LXXoO)
                       (if (g$valid-bound-ids?$27098$1LXXoO
                             g$lhs*$28181$1LXXoO)
                         (g$bless$27554$1LXXoO
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$28181$1LXXoO
                                 (cons
                                   g$b$28183$1LXXoO
                                   g$b*$28184$1LXXoO)))
                             g$rhs*$28182$1LXXoO))
                         (g$invalid-fmls-error$27556$1LXXoO
                           g$stx$28178$1LXXoO
                           g$lhs*$28181$1LXXoO))))
                    g$ls/false$28180$1LXXoO)
                  ((case-lambda
                     ((g$t$28185$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$28186$1LXXoO)
                          (if (if g$ls/false$28186$1LXXoO
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$28187$1LXXoO
                                         g$lhs*$28188$1LXXoO
                                         g$rhs*$28189$1LXXoO
                                         g$b$28190$1LXXoO
                                         g$b*$28191$1LXXoO)
                                       (g$id?$27093$1LXXoO
                                         g$f$28187$1LXXoO)))
                                    g$ls/false$28186$1LXXoO))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$28192$1LXXoO
                                   g$lhs*$28193$1LXXoO
                                   g$rhs*$28194$1LXXoO
                                   g$b$28195$1LXXoO
                                   g$b*$28196$1LXXoO)
                                 (if (g$valid-bound-ids?$27098$1LXXoO
                                       g$lhs*$28193$1LXXoO)
                                   (g$bless$27554$1LXXoO
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$28192$1LXXoO
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$28193$1LXXoO
                                                 (cons
                                                   g$b$28195$1LXXoO
                                                   g$b*$28196$1LXXoO)))))
                                         g$f$28192$1LXXoO)
                                       g$rhs*$28194$1LXXoO))
                                   (g$invalid-fmls-error$27556$1LXXoO
                                     g$stx$28178$1LXXoO
                                     g$lhs*$28193$1LXXoO))))
                              g$ls/false$28186$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"invalid syntax"
                              g$t$28185$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$28185$1LXXoO
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$28179$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28179$1LXXoO
               '(_ #(each (any any)) any . each-any)))))
         g$stx$28178$1LXXoO))))
   (g$let-values-macro$27558$1LXXoO
     g$let-values-macro$31154$1LXXoO
     (case-lambda
       ((g$stx$28197$1LXXoO)
        (letrec* ((g$rename$28198$1LXXoO
                    (case-lambda
                      ((g$x$28249$1LXXoO
                         g$old*$28250$1LXXoO
                         g$new*$28251$1LXXoO)
                       (begin
                         (if (not (g$id?$27093$1LXXoO g$x$28249$1LXXoO))
                           (g$syntax-violation$27710$1LXXoO
                             '#f
                             '"not an indentifier"
                             g$stx$28197$1LXXoO
                             g$x$28249$1LXXoO)
                           (void))
                         (if (g$bound-id-member?$27100$1LXXoO
                               g$x$28249$1LXXoO
                               g$old*$28250$1LXXoO)
                           (g$syntax-violation$27710$1LXXoO
                             '#f
                             '"duplicate binding"
                             g$stx$28197$1LXXoO
                             g$x$28249$1LXXoO)
                           (void))
                         ((case-lambda
                            ((g$y$28252$1LXXoO)
                             (values
                               g$y$28252$1LXXoO
                               (cons
                                 g$x$28249$1LXXoO
                                 g$old*$28250$1LXXoO)
                               (cons
                                 g$y$28252$1LXXoO
                                 g$new*$28251$1LXXoO))))
                          (gensym
                            (g$syntax->datum$27713$1LXXoO
                              g$x$28249$1LXXoO)))))))
                  (g$rename*$28199$1LXXoO
                    (case-lambda
                      ((g$x*$28240$1LXXoO
                         g$old*$28241$1LXXoO
                         g$new*$28242$1LXXoO)
                       (if (null? g$x*$28240$1LXXoO)
                         (values
                           '()
                           g$old*$28241$1LXXoO
                           g$new*$28242$1LXXoO)
                         (begin
                           '#f
                           (call-with-values
                             (case-lambda
                               (()
                                (g$rename$28198$1LXXoO
                                  (car g$x*$28240$1LXXoO)
                                  g$old*$28241$1LXXoO
                                  g$new*$28242$1LXXoO)))
                             (case-lambda
                               ((g$x$28243$1LXXoO
                                  g$old*$28244$1LXXoO
                                  g$new*$28245$1LXXoO)
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$rename*$28199$1LXXoO
                                       (cdr g$x*$28240$1LXXoO)
                                       g$old*$28244$1LXXoO
                                       g$new*$28245$1LXXoO)))
                                  (case-lambda
                                    ((g$x*$28246$1LXXoO
                                       g$old*$28247$1LXXoO
                                       g$new*$28248$1LXXoO)
                                     (values
                                       (cons
                                         g$x$28243$1LXXoO
                                         g$x*$28246$1LXXoO)
                                       g$old*$28247$1LXXoO
                                       g$new*$28248$1LXXoO)))))))))))))
          ((case-lambda
             ((g$t$28200$1LXXoO)
              ((case-lambda
                 ((g$ls/false$28201$1LXXoO)
                  (if g$ls/false$28201$1LXXoO
                    (apply
                      (case-lambda
                        ((g$b$28202$1LXXoO g$b*$28203$1LXXoO)
                         (g$cons*$19227$1LXXoO
                           (g$bless$27554$1LXXoO 'let)
                           '()
                           g$b$28202$1LXXoO
                           g$b*$28203$1LXXoO)))
                      g$ls/false$28201$1LXXoO)
                    ((case-lambda
                       ((g$t$28204$1LXXoO)
                        ((case-lambda
                           ((g$ls/false$28205$1LXXoO)
                            (if g$ls/false$28205$1LXXoO
                              (apply
                                (case-lambda
                                  ((g$lhs*$28206$1LXXoO
                                     g$rhs*$28207$1LXXoO
                                     g$b$28208$1LXXoO
                                     g$b*$28209$1LXXoO)
                                   (g$bless$27554$1LXXoO
                                     ((letrec ((g$f$28210$1LXXoO
                                                 (case-lambda
                                                   ((g$lhs*$28211$1LXXoO
                                                      g$rhs*$28212$1LXXoO
                                                      g$old*$28213$1LXXoO
                                                      g$new*$28214$1LXXoO)
                                                    (if (null?
                                                          g$lhs*$28211$1LXXoO)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$19225$1LXXoO
                                                            list
                                                            g$old*$28213$1LXXoO
                                                            g$new*$28214$1LXXoO)
                                                          (cons
                                                            g$b$28208$1LXXoO
                                                            g$b*$28209$1LXXoO)))
                                                      (begin
                                                        '#f
                                                        ((case-lambda
                                                           ((g$t$28215$1LXXoO)
                                                            ((case-lambda
                                                               ((g$ls/false$28216$1LXXoO)
                                                                (if g$ls/false$28216$1LXXoO
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x*$28217$1LXXoO)
                                                                       (call-with-values
                                                                         (case-lambda
                                                                           (()
                                                                            (g$rename*$28199$1LXXoO
                                                                              g$x*$28217$1LXXoO
                                                                              g$old*$28213$1LXXoO
                                                                              g$new*$28214$1LXXoO)))
                                                                         (case-lambda
                                                                           ((g$y*$28221$1LXXoO
                                                                              g$old*$28222$1LXXoO
                                                                              g$new*$28223$1LXXoO)
                                                                            ((case-lambda
                                                                               ((g$new*$28224$1LXXoO
                                                                                  g$old*$28225$1LXXoO
                                                                                  g$y*$28226$1LXXoO)
                                                                                (list
                                                                                  'call-with-values
                                                                                  (list
                                                                                    'lambda
                                                                                    '()
                                                                                    (car g$rhs*$28212$1LXXoO))
                                                                                  (list
                                                                                    'lambda
                                                                                    g$y*$28226$1LXXoO
                                                                                    (g$f$28210$1LXXoO
                                                                                      (cdr g$lhs*$28211$1LXXoO)
                                                                                      (cdr g$rhs*$28212$1LXXoO)
                                                                                      g$old*$28225$1LXXoO
                                                                                      g$new*$28224$1LXXoO)))))
                                                                             g$new*$28223$1LXXoO
                                                                             g$old*$28222$1LXXoO
                                                                             g$y*$28221$1LXXoO))))))
                                                                    g$ls/false$28216$1LXXoO)
                                                                  ((case-lambda
                                                                     ((g$t$28227$1LXXoO)
                                                                      ((case-lambda
                                                                         ((g$ls/false$28228$1LXXoO)
                                                                          (if g$ls/false$28228$1LXXoO
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$x*$28229$1LXXoO
                                                                                   g$x$28230$1LXXoO)
                                                                                 (call-with-values
                                                                                   (case-lambda
                                                                                     (()
                                                                                      (g$rename$28198$1LXXoO
                                                                                        g$x$28230$1LXXoO
                                                                                        g$old*$28213$1LXXoO
                                                                                        g$new*$28214$1LXXoO)))
                                                                                   (case-lambda
                                                                                     ((g$y$28231$1LXXoO
                                                                                        g$old*$28232$1LXXoO
                                                                                        g$new*$28233$1LXXoO)
                                                                                      (call-with-values
                                                                                        (case-lambda
                                                                                          (()
                                                                                           (g$rename*$28199$1LXXoO
                                                                                             g$x*$28229$1LXXoO
                                                                                             g$old*$28232$1LXXoO
                                                                                             g$new*$28233$1LXXoO)))
                                                                                        (case-lambda
                                                                                          ((g$y*$28234$1LXXoO
                                                                                             g$old*$28235$1LXXoO
                                                                                             g$new*$28236$1LXXoO)
                                                                                           (list
                                                                                             'call-with-values
                                                                                             (list
                                                                                               'lambda
                                                                                               '()
                                                                                               (car g$rhs*$28212$1LXXoO))
                                                                                             (list
                                                                                               'lambda
                                                                                               (append
                                                                                                 g$y*$28234$1LXXoO
                                                                                                 g$y$28231$1LXXoO)
                                                                                               (g$f$28210$1LXXoO
                                                                                                 (cdr g$lhs*$28211$1LXXoO)
                                                                                                 (cdr g$rhs*$28212$1LXXoO)
                                                                                                 g$old*$28235$1LXXoO
                                                                                                 g$new*$28236$1LXXoO)))))))))))
                                                                              g$ls/false$28228$1LXXoO)
                                                                            ((case-lambda
                                                                               ((g$t$28237$1LXXoO)
                                                                                ((case-lambda
                                                                                   ((g$ls/false$28238$1LXXoO)
                                                                                    (if g$ls/false$28238$1LXXoO
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$others$28239$1LXXoO)
                                                                                           (g$syntax-violation$27710$1LXXoO
                                                                                             '#f
                                                                                             '"malformed bindings"
                                                                                             g$stx$28197$1LXXoO
                                                                                             g$others$28239$1LXXoO)))
                                                                                        g$ls/false$28238$1LXXoO)
                                                                                      (g$syntax-violation$27710$1LXXoO
                                                                                        '#f
                                                                                        '"invalid syntax"
                                                                                        g$t$28237$1LXXoO))))
                                                                                 (g$syntax-dispatch$27591$1LXXoO
                                                                                   g$t$28237$1LXXoO
                                                                                   'any))))
                                                                             g$t$28227$1LXXoO))))
                                                                       (g$syntax-dispatch$27591$1LXXoO
                                                                         g$t$28227$1LXXoO
                                                                         '#(each+
                                                                            any
                                                                            ()
                                                                            any)))))
                                                                   g$t$28215$1LXXoO))))
                                                             (g$syntax-dispatch$27591$1LXXoO
                                                               g$t$28215$1LXXoO
                                                               'each-any))))
                                                         (car g$lhs*$28211$1LXXoO))))))))
                                        g$f$28210$1LXXoO)
                                      g$lhs*$28206$1LXXoO
                                      g$rhs*$28207$1LXXoO
                                      '()
                                      '()))))
                                g$ls/false$28205$1LXXoO)
                              (g$syntax-violation$27710$1LXXoO
                                '#f
                                '"invalid syntax"
                                g$t$28204$1LXXoO))))
                         (g$syntax-dispatch$27591$1LXXoO
                           g$t$28204$1LXXoO
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$28200$1LXXoO))))
               (g$syntax-dispatch$27591$1LXXoO
                 g$t$28200$1LXXoO
                 '(_ () any . each-any)))))
           g$stx$28197$1LXXoO)))))
   (g$let*-values-macro$27559$1LXXoO
     g$let*-values-macro$31155$1LXXoO
     (case-lambda
       ((g$stx$28253$1LXXoO)
        (letrec* ((g$check$28254$1LXXoO
                    (case-lambda
                      ((g$x*$28278$1LXXoO)
                       (if (not (null? g$x*$28278$1LXXoO))
                         ((case-lambda
                            ((g$x$28279$1LXXoO)
                             (begin
                               (if (not (g$id?$27093$1LXXoO
                                          g$x$28279$1LXXoO))
                                 (g$syntax-violation$27710$1LXXoO
                                   '#f
                                   '"not an identifier"
                                   g$stx$28253$1LXXoO
                                   g$x$28279$1LXXoO)
                                 (void))
                               (g$check$28254$1LXXoO
                                 (cdr g$x*$28278$1LXXoO))
                               (if (g$bound-id-member?$27100$1LXXoO
                                     g$x$28279$1LXXoO
                                     (cdr g$x*$28278$1LXXoO))
                                 (g$syntax-violation$27710$1LXXoO
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$28253$1LXXoO
                                   g$x$28279$1LXXoO)
                                 (void)))))
                          (car g$x*$28278$1LXXoO))
                         (void))))))
          ((case-lambda
             ((g$t$28255$1LXXoO)
              ((case-lambda
                 ((g$ls/false$28256$1LXXoO)
                  (if g$ls/false$28256$1LXXoO
                    (apply
                      (case-lambda
                        ((g$b$28257$1LXXoO g$b*$28258$1LXXoO)
                         (g$cons*$19227$1LXXoO
                           (g$bless$27554$1LXXoO 'let)
                           '()
                           g$b$28257$1LXXoO
                           g$b*$28258$1LXXoO)))
                      g$ls/false$28256$1LXXoO)
                    ((case-lambda
                       ((g$t$28259$1LXXoO)
                        ((case-lambda
                           ((g$ls/false$28260$1LXXoO)
                            (if g$ls/false$28260$1LXXoO
                              (apply
                                (case-lambda
                                  ((g$lhs*$28261$1LXXoO
                                     g$rhs*$28262$1LXXoO
                                     g$b$28263$1LXXoO
                                     g$b*$28264$1LXXoO)
                                   (g$bless$27554$1LXXoO
                                     ((letrec ((g$f$28265$1LXXoO
                                                 (case-lambda
                                                   ((g$lhs*$28266$1LXXoO
                                                      g$rhs*$28267$1LXXoO)
                                                    (if (null?
                                                          g$lhs*$28266$1LXXoO)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$28263$1LXXoO
                                                          g$b*$28264$1LXXoO))
                                                      (begin
                                                        '#f
                                                        ((case-lambda
                                                           ((g$t$28268$1LXXoO)
                                                            ((case-lambda
                                                               ((g$ls/false$28269$1LXXoO)
                                                                (if g$ls/false$28269$1LXXoO
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x*$28270$1LXXoO)
                                                                       (begin
                                                                         (g$check$28254$1LXXoO
                                                                           g$x*$28270$1LXXoO)
                                                                         (list
                                                                           'call-with-values
                                                                           (list
                                                                             'lambda
                                                                             '()
                                                                             (car g$rhs*$28267$1LXXoO))
                                                                           (list
                                                                             'lambda
                                                                             g$x*$28270$1LXXoO
                                                                             (g$f$28265$1LXXoO
                                                                               (cdr g$lhs*$28266$1LXXoO)
                                                                               (cdr g$rhs*$28267$1LXXoO)))))))
                                                                    g$ls/false$28269$1LXXoO)
                                                                  ((case-lambda
                                                                     ((g$t$28271$1LXXoO)
                                                                      ((case-lambda
                                                                         ((g$ls/false$28272$1LXXoO)
                                                                          (if g$ls/false$28272$1LXXoO
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$x*$28273$1LXXoO
                                                                                   g$x$28274$1LXXoO)
                                                                                 (begin
                                                                                   (g$check$28254$1LXXoO
                                                                                     (cons
                                                                                       g$x$28274$1LXXoO
                                                                                       g$x*$28273$1LXXoO))
                                                                                   (list
                                                                                     'call-with-values
                                                                                     (list
                                                                                       'lambda
                                                                                       '()
                                                                                       (car g$rhs*$28267$1LXXoO))
                                                                                     (list
                                                                                       'lambda
                                                                                       (append
                                                                                         g$x*$28273$1LXXoO
                                                                                         g$x$28274$1LXXoO)
                                                                                       (g$f$28265$1LXXoO
                                                                                         (cdr g$lhs*$28266$1LXXoO)
                                                                                         (cdr g$rhs*$28267$1LXXoO)))))))
                                                                              g$ls/false$28272$1LXXoO)
                                                                            ((case-lambda
                                                                               ((g$t$28275$1LXXoO)
                                                                                ((case-lambda
                                                                                   ((g$ls/false$28276$1LXXoO)
                                                                                    (if g$ls/false$28276$1LXXoO
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$others$28277$1LXXoO)
                                                                                           (g$syntax-violation$27710$1LXXoO
                                                                                             '#f
                                                                                             '"malformed bindings"
                                                                                             g$stx$28253$1LXXoO
                                                                                             g$others$28277$1LXXoO)))
                                                                                        g$ls/false$28276$1LXXoO)
                                                                                      (g$syntax-violation$27710$1LXXoO
                                                                                        '#f
                                                                                        '"invalid syntax"
                                                                                        g$t$28275$1LXXoO))))
                                                                                 (g$syntax-dispatch$27591$1LXXoO
                                                                                   g$t$28275$1LXXoO
                                                                                   'any))))
                                                                             g$t$28271$1LXXoO))))
                                                                       (g$syntax-dispatch$27591$1LXXoO
                                                                         g$t$28271$1LXXoO
                                                                         '#(each+
                                                                            any
                                                                            ()
                                                                            any)))))
                                                                   g$t$28268$1LXXoO))))
                                                             (g$syntax-dispatch$27591$1LXXoO
                                                               g$t$28268$1LXXoO
                                                               'each-any))))
                                                         (car g$lhs*$28266$1LXXoO))))))))
                                        g$f$28265$1LXXoO)
                                      g$lhs*$28261$1LXXoO
                                      g$rhs*$28262$1LXXoO))))
                                g$ls/false$28260$1LXXoO)
                              (g$syntax-violation$27710$1LXXoO
                                '#f
                                '"invalid syntax"
                                g$t$28259$1LXXoO))))
                         (g$syntax-dispatch$27591$1LXXoO
                           g$t$28259$1LXXoO
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$28255$1LXXoO))))
               (g$syntax-dispatch$27591$1LXXoO
                 g$t$28255$1LXXoO
                 '(_ () any . each-any)))))
           g$stx$28253$1LXXoO)))))
   (g$trace-lambda-macro$27560$1LXXoO
     g$trace-lambda-macro$31156$1LXXoO
     (case-lambda
       ((g$stx$28280$1LXXoO)
        ((case-lambda
           ((g$t$28281$1LXXoO)
            ((case-lambda
               ((g$ls/false$28282$1LXXoO)
                (if g$ls/false$28282$1LXXoO
                  (apply
                    (case-lambda
                      ((g$who$28283$1LXXoO
                         g$fmls$28284$1LXXoO
                         g$b$28285$1LXXoO
                         g$b*$28286$1LXXoO)
                       (if (g$valid-bound-ids?$27098$1LXXoO
                             g$fmls$28284$1LXXoO)
                         (g$bless$27554$1LXXoO
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$28283$1LXXoO)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$28284$1LXXoO
                                 (cons
                                   g$b$28285$1LXXoO
                                   g$b*$28286$1LXXoO)))))
                         (g$invalid-fmls-error$27556$1LXXoO
                           g$stx$28280$1LXXoO
                           g$fmls$28284$1LXXoO))))
                    g$ls/false$28282$1LXXoO)
                  ((case-lambda
                     ((g$t$28287$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$28288$1LXXoO)
                          (if g$ls/false$28288$1LXXoO
                            (apply
                              (case-lambda
                                ((g$who$28289$1LXXoO
                                   g$fmls$28290$1LXXoO
                                   g$last$28291$1LXXoO
                                   g$b$28292$1LXXoO
                                   g$b*$28293$1LXXoO)
                                 (if (g$valid-bound-ids?$27098$1LXXoO
                                       (cons
                                         g$last$28291$1LXXoO
                                         g$fmls$28290$1LXXoO))
                                   (g$bless$27554$1LXXoO
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$28289$1LXXoO)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$28290$1LXXoO
                                             g$last$28291$1LXXoO)
                                           (cons
                                             g$b$28292$1LXXoO
                                             g$b*$28293$1LXXoO)))))
                                   (g$invalid-fmls-error$27556$1LXXoO
                                     g$stx$28280$1LXXoO
                                     (append
                                       g$fmls$28290$1LXXoO
                                       g$last$28291$1LXXoO)))))
                              g$ls/false$28288$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"invalid syntax"
                              g$t$28287$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$28287$1LXXoO
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$28281$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28281$1LXXoO
               '(_ any each-any any . each-any)))))
         g$stx$28280$1LXXoO))))
   (g$trace-define-macro$27561$1LXXoO
     g$trace-define-macro$31157$1LXXoO
     (case-lambda
       ((g$stx$28294$1LXXoO)
        ((case-lambda
           ((g$t$28295$1LXXoO)
            ((case-lambda
               ((g$ls/false$28296$1LXXoO)
                (if g$ls/false$28296$1LXXoO
                  (apply
                    (case-lambda
                      ((g$who$28297$1LXXoO
                         g$fmls$28298$1LXXoO
                         g$b$28299$1LXXoO
                         g$b*$28300$1LXXoO)
                       (if (g$valid-bound-ids?$27098$1LXXoO
                             g$fmls$28298$1LXXoO)
                         (g$bless$27554$1LXXoO
                           (list
                             'define
                             g$who$28297$1LXXoO
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$28297$1LXXoO)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$28298$1LXXoO
                                   (cons
                                     g$b$28299$1LXXoO
                                     g$b*$28300$1LXXoO))))))
                         (g$invalid-fmls-error$27556$1LXXoO
                           g$stx$28294$1LXXoO
                           g$fmls$28298$1LXXoO))))
                    g$ls/false$28296$1LXXoO)
                  ((case-lambda
                     ((g$t$28301$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$28302$1LXXoO)
                          (if g$ls/false$28302$1LXXoO
                            (apply
                              (case-lambda
                                ((g$who$28303$1LXXoO
                                   g$fmls$28304$1LXXoO
                                   g$last$28305$1LXXoO
                                   g$b$28306$1LXXoO
                                   g$b*$28307$1LXXoO)
                                 (if (g$valid-bound-ids?$27098$1LXXoO
                                       (cons
                                         g$last$28305$1LXXoO
                                         g$fmls$28304$1LXXoO))
                                   (g$bless$27554$1LXXoO
                                     (list
                                       'define
                                       g$who$28303$1LXXoO
                                       (list
                                         'make-traced-procedure
                                         (list
                                           'quote
                                           g$who$28303$1LXXoO)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$28304$1LXXoO
                                               g$last$28305$1LXXoO)
                                             (cons
                                               g$b$28306$1LXXoO
                                               g$b*$28307$1LXXoO))))))
                                   (g$invalid-fmls-error$27556$1LXXoO
                                     g$stx$28294$1LXXoO
                                     (append
                                       g$fmls$28304$1LXXoO
                                       g$last$28305$1LXXoO)))))
                              g$ls/false$28302$1LXXoO)
                            ((case-lambda
                               ((g$t$28308$1LXXoO)
                                ((case-lambda
                                   ((g$ls/false$28309$1LXXoO)
                                    (if g$ls/false$28309$1LXXoO
                                      (apply
                                        (case-lambda
                                          ((g$who$28310$1LXXoO
                                             g$expr$28311$1LXXoO)
                                           (if (g$id?$27093$1LXXoO
                                                 g$who$28310$1LXXoO)
                                             (g$bless$27554$1LXXoO
                                               (list
                                                 'define
                                                 g$who$28310$1LXXoO
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$28311$1LXXoO))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$28310$1LXXoO)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$27710$1LXXoO
                                               '#f
                                               '"invalid name"
                                               g$stx$28294$1LXXoO))))
                                        g$ls/false$28309$1LXXoO)
                                      (g$syntax-violation$27710$1LXXoO
                                        '#f
                                        '"invalid syntax"
                                        g$t$28308$1LXXoO))))
                                 (g$syntax-dispatch$27591$1LXXoO
                                   g$t$28308$1LXXoO
                                   '(_ any any)))))
                             g$t$28301$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$28301$1LXXoO
                         '(_ (any . #(each+ any () any))
                             any
                             .
                             each-any)))))
                   g$t$28295$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28295$1LXXoO
               '(_ (any . each-any) any . each-any)))))
         g$stx$28294$1LXXoO))))
   (g$trace-define-syntax-macro$27562$1LXXoO
     g$trace-define-syntax-macro$31158$1LXXoO
     (case-lambda
       ((g$stx$28312$1LXXoO)
        ((case-lambda
           ((g$t$28313$1LXXoO)
            ((case-lambda
               ((g$ls/false$28314$1LXXoO)
                (if g$ls/false$28314$1LXXoO
                  (apply
                    (case-lambda
                      ((g$who$28315$1LXXoO g$expr$28316$1LXXoO)
                       (if (g$id?$27093$1LXXoO g$who$28315$1LXXoO)
                         (g$bless$27554$1LXXoO
                           (list
                             'define-syntax
                             g$who$28315$1LXXoO
                             (list
                               'make-traced-macro
                               (list 'quote g$who$28315$1LXXoO)
                               g$expr$28316$1LXXoO)))
                         (g$syntax-violation$27710$1LXXoO
                           '#f
                           '"invalid name"
                           g$stx$28312$1LXXoO))))
                    g$ls/false$28314$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28313$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28313$1LXXoO
               '(_ any any)))))
         g$stx$28312$1LXXoO))))
   (g$trace-let/rec-syntax$27563$1LXXoO
     g$trace-let/rec-syntax$31159$1LXXoO
     (case-lambda
       ((g$who$28317$1LXXoO)
        (case-lambda
          ((g$stx$28318$1LXXoO)
           ((case-lambda
              ((g$t$28319$1LXXoO)
               ((case-lambda
                  ((g$ls/false$28320$1LXXoO)
                   (if g$ls/false$28320$1LXXoO
                     (apply
                       (case-lambda
                         ((g$lhs*$28321$1LXXoO
                            g$rhs*$28322$1LXXoO
                            g$b$28323$1LXXoO
                            g$b*$28324$1LXXoO)
                          (if (g$valid-bound-ids?$27098$1LXXoO
                                g$lhs*$28321$1LXXoO)
                            ((case-lambda
                               ((g$rhs*$28325$1LXXoO)
                                (g$bless$27554$1LXXoO
                                  (cons
                                    g$who$28317$1LXXoO
                                    (cons
                                      (g$map$19225$1LXXoO
                                        list
                                        g$lhs*$28321$1LXXoO
                                        g$rhs*$28325$1LXXoO)
                                      (cons
                                        g$b$28323$1LXXoO
                                        g$b*$28324$1LXXoO))))))
                             (g$map$19225$1LXXoO
                               (case-lambda
                                 ((g$lhs$28326$1LXXoO
                                    g$rhs$28327$1LXXoO)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$28326$1LXXoO)
                                    g$rhs$28327$1LXXoO)))
                               g$lhs*$28321$1LXXoO
                               g$rhs*$28322$1LXXoO))
                            (g$invalid-fmls-error$27556$1LXXoO
                              g$stx$28318$1LXXoO
                              g$lhs*$28321$1LXXoO))))
                       g$ls/false$28320$1LXXoO)
                     (g$syntax-violation$27710$1LXXoO
                       '#f
                       '"invalid syntax"
                       g$t$28319$1LXXoO))))
                (g$syntax-dispatch$27591$1LXXoO
                  g$t$28319$1LXXoO
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$28318$1LXXoO))))))
   (g$trace-let-syntax-macro$27564$1LXXoO
     g$trace-let-syntax-macro$31160$1LXXoO
     (g$trace-let/rec-syntax$27563$1LXXoO 'let-syntax))
   (g$trace-letrec-syntax-macro$27565$1LXXoO
     g$trace-letrec-syntax-macro$31161$1LXXoO
     (g$trace-let/rec-syntax$27563$1LXXoO 'letrec-syntax))
   (g$guard-macro$27566$1LXXoO
     g$guard-macro$31162$1LXXoO
     (case-lambda
       ((g$x$28328$1LXXoO)
        (letrec* ((g$gen-clauses$28329$1LXXoO
                    (case-lambda
                      ((g$con$28341$1LXXoO
                         g$outerk$28342$1LXXoO
                         g$clause*$28343$1LXXoO)
                       (letrec* ((g$f$28344$1LXXoO
                                   (case-lambda
                                     ((g$x$28372$1LXXoO
                                        g$k$28373$1LXXoO)
                                      ((case-lambda
                                         ((g$t$28374$1LXXoO)
                                          ((case-lambda
                                             ((g$ls/false$28375$1LXXoO)
                                              (if g$ls/false$28375$1LXXoO
                                                (apply
                                                  (case-lambda
                                                    ((g$e$28376$1LXXoO
                                                       g$p$28377$1LXXoO)
                                                     ((case-lambda
                                                        ((g$t$28378$1LXXoO)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$28378$1LXXoO
                                                               g$e$28376$1LXXoO))
                                                           (list
                                                             'if
                                                             g$t$28378$1LXXoO
                                                             (list
                                                               g$p$28377$1LXXoO
                                                               g$t$28378$1LXXoO)
                                                             g$k$28373$1LXXoO))))
                                                      (gensym))))
                                                  g$ls/false$28375$1LXXoO)
                                                ((case-lambda
                                                   ((g$t$28379$1LXXoO)
                                                    ((case-lambda
                                                       ((g$ls/false$28380$1LXXoO)
                                                        (if g$ls/false$28380$1LXXoO
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$28381$1LXXoO)
                                                               ((case-lambda
                                                                  ((g$t$28382$1LXXoO)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$28382$1LXXoO
                                                                         g$e$28381$1LXXoO))
                                                                     (list
                                                                       'if
                                                                       g$t$28382$1LXXoO
                                                                       g$t$28382$1LXXoO
                                                                       g$k$28373$1LXXoO))))
                                                                (gensym))))
                                                            g$ls/false$28380$1LXXoO)
                                                          ((case-lambda
                                                             ((g$t$28383$1LXXoO)
                                                              ((case-lambda
                                                                 ((g$ls/false$28384$1LXXoO)
                                                                  (if g$ls/false$28384$1LXXoO
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$28385$1LXXoO
                                                                           g$v$28386$1LXXoO
                                                                           g$v*$28387$1LXXoO)
                                                                         (list
                                                                           'if
                                                                           g$e$28385$1LXXoO
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$28386$1LXXoO
                                                                               g$v*$28387$1LXXoO))
                                                                           g$k$28373$1LXXoO)))
                                                                      g$ls/false$28384$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$t$28388$1LXXoO)
                                                                        ((case-lambda
                                                                           ((g$ls/false$28389$1LXXoO)
                                                                            (if g$ls/false$28389$1LXXoO
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$27710$1LXXoO
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$28372$1LXXoO)))
                                                                                g$ls/false$28389$1LXXoO)
                                                                              (g$syntax-violation$27710$1LXXoO
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$28388$1LXXoO))))
                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                           g$t$28388$1LXXoO
                                                                           '_))))
                                                                     g$t$28383$1LXXoO))))
                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                 g$t$28383$1LXXoO
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$28379$1LXXoO))))
                                                     (g$syntax-dispatch$27591$1LXXoO
                                                       g$t$28379$1LXXoO
                                                       '(any)))))
                                                 g$t$28374$1LXXoO))))
                                           (g$syntax-dispatch$27591$1LXXoO
                                             g$t$28374$1LXXoO
                                             '(any #(scheme-id =>)
                                                   any)))))
                                       g$x$28372$1LXXoO))))
                                 (g$f*$28345$1LXXoO
                                   (case-lambda
                                     ((g$x*$28352$1LXXoO)
                                      ((case-lambda
                                         ((g$t$28353$1LXXoO)
                                          ((case-lambda
                                             ((g$ls/false$28354$1LXXoO)
                                              (if g$ls/false$28354$1LXXoO
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$28341$1LXXoO)
                                                       '#t)))
                                                  g$ls/false$28354$1LXXoO)
                                                ((case-lambda
                                                   ((g$t$28355$1LXXoO)
                                                    ((case-lambda
                                                       ((g$ls/false$28356$1LXXoO)
                                                        (if g$ls/false$28356$1LXXoO
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$28357$1LXXoO
                                                                 g$e*$28358$1LXXoO)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$28357$1LXXoO
                                                                     g$e*$28358$1LXXoO))
                                                                 '#f)))
                                                            g$ls/false$28356$1LXXoO)
                                                          ((case-lambda
                                                             ((g$t$28359$1LXXoO)
                                                              ((case-lambda
                                                                 ((g$ls/false$28360$1LXXoO)
                                                                  (if g$ls/false$28360$1LXXoO
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$28361$1LXXoO
                                                                           g$cls*$28362$1LXXoO)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$28345$1LXXoO
                                                                                g$cls*$28362$1LXXoO)))
                                                                           (case-lambda
                                                                             ((g$e$28365$1LXXoO
                                                                                g$g$28366$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$g$28367$1LXXoO
                                                                                    g$e$28368$1LXXoO)
                                                                                  (values
                                                                                    (g$f$28344$1LXXoO
                                                                                      g$cls$28361$1LXXoO
                                                                                      g$e$28368$1LXXoO)
                                                                                    g$g$28367$1LXXoO)))
                                                                               g$g$28366$1LXXoO
                                                                               g$e$28365$1LXXoO))))))
                                                                      g$ls/false$28360$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$t$28369$1LXXoO)
                                                                        ((case-lambda
                                                                           ((g$ls/false$28370$1LXXoO)
                                                                            (if g$ls/false$28370$1LXXoO
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$28371$1LXXoO)
                                                                                   (g$syntax-violation$27710$1LXXoO
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$28371$1LXXoO)))
                                                                                g$ls/false$28370$1LXXoO)
                                                                              (g$syntax-violation$27710$1LXXoO
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$28369$1LXXoO))))
                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                           g$t$28369$1LXXoO
                                                                           'any))))
                                                                     g$t$28359$1LXXoO))))
                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                 g$t$28359$1LXXoO
                                                                 '(any .
                                                                       any)))))
                                                           g$t$28355$1LXXoO))))
                                                     (g$syntax-dispatch$27591$1LXXoO
                                                       g$t$28355$1LXXoO
                                                       '((#(scheme-id
                                                            else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$28353$1LXXoO))))
                                           (g$syntax-dispatch$27591$1LXXoO
                                             g$t$28353$1LXXoO
                                             '()))))
                                       g$x*$28352$1LXXoO)))))
                         (call-with-values
                           (case-lambda
                             (()
                              (g$f*$28345$1LXXoO
                                g$clause*$28343$1LXXoO)))
                           (case-lambda
                             ((g$code$28348$1LXXoO
                                g$raisek$28349$1LXXoO)
                              ((case-lambda
                                 ((g$raisek$28350$1LXXoO
                                    g$code$28351$1LXXoO)
                                  (if g$raisek$28350$1LXXoO
                                    (list
                                      g$outerk$28342$1LXXoO
                                      g$code$28351$1LXXoO)
                                    g$code$28351$1LXXoO)))
                               g$raisek$28349$1LXXoO
                               g$code$28348$1LXXoO)))))))))
          ((case-lambda
             ((g$t$28330$1LXXoO)
              ((case-lambda
                 ((g$ls/false$28331$1LXXoO)
                  (if (if g$ls/false$28331$1LXXoO
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$28332$1LXXoO
                                 g$clause*$28333$1LXXoO
                                 g$b$28334$1LXXoO
                                 g$b*$28335$1LXXoO)
                               (g$id?$27093$1LXXoO g$con$28332$1LXXoO)))
                            g$ls/false$28331$1LXXoO))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$28336$1LXXoO
                           g$clause*$28337$1LXXoO
                           g$b$28338$1LXXoO
                           g$b*$28339$1LXXoO)
                         ((case-lambda
                            ((g$outerk$28340$1LXXoO)
                             (g$bless$27554$1LXXoO
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$28340$1LXXoO)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$28336$1LXXoO)
                                           (g$gen-clauses$28329$1LXXoO
                                             g$con$28336$1LXXoO
                                             g$outerk$28340$1LXXoO
                                             g$clause*$28337$1LXXoO))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               g$b$28338$1LXXoO
                                               g$b*$28339$1LXXoO)))))))))))
                          (gensym))))
                      g$ls/false$28331$1LXXoO)
                    (g$syntax-violation$27710$1LXXoO
                      '#f
                      '"invalid syntax"
                      g$t$28330$1LXXoO))))
               (g$syntax-dispatch$27591$1LXXoO
                 g$t$28330$1LXXoO
                 '(_ (any . each-any) any . each-any)))))
           g$x$28328$1LXXoO)))))
   (g$define-enumeration-macro$27567$1LXXoO
     g$define-enumeration-macro$31163$1LXXoO
     (case-lambda
       ((g$stx$28390$1LXXoO)
        (letrec* ((g$set?$28391$1LXXoO
                    (case-lambda
                      ((g$x$28404$1LXXoO)
                       ((case-lambda
                          ((g$t$28405$1LXXoO)
                           (if g$t$28405$1LXXoO
                             g$t$28405$1LXXoO
                             (begin
                               '#f
                               (if (not (g$memq$19217$1LXXoO
                                          (car g$x$28404$1LXXoO)
                                          (cdr g$x$28404$1LXXoO)))
                                 (begin
                                   '#f
                                   (g$set?$28391$1LXXoO
                                     (cdr g$x$28404$1LXXoO)))
                                 '#f)))))
                        (null? g$x$28404$1LXXoO)))))
                  (g$remove-dups$28392$1LXXoO
                    (case-lambda
                      ((g$ls$28403$1LXXoO)
                       (if (null? g$ls$28403$1LXXoO)
                         '()
                         (begin
                           '#f
                           (cons
                             (car g$ls$28403$1LXXoO)
                             (g$remove-dups$28392$1LXXoO
                               (g$remq$19232$1LXXoO
                                 (car g$ls$28403$1LXXoO)
                                 (cdr g$ls$28403$1LXXoO))))))))))
          ((case-lambda
             ((g$t$28393$1LXXoO)
              ((case-lambda
                 ((g$ls/false$28394$1LXXoO)
                  (if (if g$ls/false$28394$1LXXoO
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$28395$1LXXoO
                                 g$id*$28396$1LXXoO
                                 g$maker$28397$1LXXoO)
                               (if (g$id?$27093$1LXXoO
                                     g$name$28395$1LXXoO)
                                 (if (g$id?$27093$1LXXoO
                                       g$maker$28397$1LXXoO)
                                   (begin
                                     '#f
                                     (g$for-all$19223$1LXXoO
                                       g$id?$27093$1LXXoO
                                       g$id*$28396$1LXXoO))
                                   '#f)
                                 '#f)))
                            g$ls/false$28394$1LXXoO))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$28398$1LXXoO
                           g$id*$28399$1LXXoO
                           g$maker$28400$1LXXoO)
                         ((case-lambda
                            ((g$name*$28401$1LXXoO g$mk$28402$1LXXoO)
                             (g$bless$27554$1LXXoO
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$28402$1LXXoO
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list
                                         'quote
                                         g$name*$28401$1LXXoO))))
                                 (list
                                   'define-syntax
                                   g$name$28398$1LXXoO
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list
                                               'quote
                                               g$name*$28401$1LXXoO))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list
                                                 'quote
                                                 g$name$28398$1LXXoO)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$28400$1LXXoO
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$28400$1LXXoO)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$28401$1LXXoO))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$28400$1LXXoO)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$28402$1LXXoO
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$28392$1LXXoO
                            (g$syntax->datum$27713$1LXXoO
                              g$id*$28399$1LXXoO))
                          (gensym))))
                      g$ls/false$28394$1LXXoO)
                    (g$syntax-violation$27710$1LXXoO
                      '#f
                      '"invalid syntax"
                      g$t$28393$1LXXoO))))
               (g$syntax-dispatch$27591$1LXXoO
                 g$t$28393$1LXXoO
                 '(_ any each-any any)))))
           g$stx$28390$1LXXoO)))))
   (g$time-macro$27568$1LXXoO
     g$time-macro$31164$1LXXoO
     (case-lambda
       ((g$stx$28406$1LXXoO)
        ((case-lambda
           ((g$t$28407$1LXXoO)
            ((case-lambda
               ((g$ls/false$28408$1LXXoO)
                (if g$ls/false$28408$1LXXoO
                  (apply
                    (case-lambda
                      ((g$expr$28409$1LXXoO)
                       ((case-lambda
                          ((g$str$28410$1LXXoO)
                           (g$bless$27554$1LXXoO
                             (list
                               'time-it
                               g$str$28410$1LXXoO
                               (list
                                 'lambda
                                 '()
                                 g$expr$28409$1LXXoO)))))
                        (call-with-values
                          (case-lambda
                            (()
                             (g$open-string-output-port$25505$1LXXoO)))
                          (case-lambda
                            ((g$p$28413$1LXXoO g$e$28414$1LXXoO)
                             ((case-lambda
                                ((g$e$28415$1LXXoO g$p$28416$1LXXoO)
                                 (begin
                                   (write
                                     (g$syntax->datum$27713$1LXXoO
                                       g$expr$28409$1LXXoO)
                                     g$p$28416$1LXXoO)
                                   (g$e$28415$1LXXoO))))
                              g$e$28414$1LXXoO
                              g$p$28413$1LXXoO)))))))
                    g$ls/false$28408$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28407$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28407$1LXXoO
               '(_ any)))))
         g$stx$28406$1LXXoO))))
   (g$delay-macro$27569$1LXXoO
     g$delay-macro$31165$1LXXoO
     (case-lambda
       ((g$stx$28417$1LXXoO)
        ((case-lambda
           ((g$t$28418$1LXXoO)
            ((case-lambda
               ((g$ls/false$28419$1LXXoO)
                (if g$ls/false$28419$1LXXoO
                  (apply
                    (case-lambda
                      ((g$expr$28420$1LXXoO)
                       (g$bless$27554$1LXXoO
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$28420$1LXXoO)))))
                    g$ls/false$28419$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28418$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28418$1LXXoO
               '(_ any)))))
         g$stx$28417$1LXXoO))))
   (g$assert-macro$27570$1LXXoO
     g$assert-macro$31166$1LXXoO
     (case-lambda
       ((g$stx$28421$1LXXoO)
        ((case-lambda
           ((g$t$28422$1LXXoO)
            ((case-lambda
               ((g$ls/false$28423$1LXXoO)
                (if g$ls/false$28423$1LXXoO
                  (apply
                    (case-lambda
                      ((g$expr$28424$1LXXoO)
                       ((case-lambda
                          ((g$pos$28425$1LXXoO)
                           (g$bless$27554$1LXXoO
                             (list
                               'unless
                               g$expr$28424$1LXXoO
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$28424$1LXXoO)
                                 (list 'quote g$pos$28425$1LXXoO))))))
                        ((case-lambda
                           ((g$t$28426$1LXXoO)
                            (if g$t$28426$1LXXoO
                              g$t$28426$1LXXoO
                              (begin
                                '#f
                                (g$expression-position$27705$1LXXoO
                                  g$expr$28424$1LXXoO)))))
                         (g$expression-position$27705$1LXXoO
                           g$stx$28421$1LXXoO)))))
                    g$ls/false$28423$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28422$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28422$1LXXoO
               '(_ any)))))
         g$stx$28421$1LXXoO))))
   (g$endianness-macro$27571$1LXXoO
     g$endianness-macro$31167$1LXXoO
     (case-lambda
       ((g$stx$28427$1LXXoO)
        ((case-lambda
           ((g$t$28428$1LXXoO)
            ((case-lambda
               ((g$ls/false$28429$1LXXoO)
                (if g$ls/false$28429$1LXXoO
                  (apply
                    (case-lambda
                      ((g$e$28430$1LXXoO)
                       ((case-lambda
                          ((g$t$28431$1LXXoO)
                           (if (eqv? g$t$28431$1LXXoO 'little)
                             (g$bless$27554$1LXXoO ''little)
                             (if (eqv? g$t$28431$1LXXoO 'big)
                               (g$bless$27554$1LXXoO ''big)
                               (begin
                                 '#f
                                 (g$syntax-violation$27710$1LXXoO
                                   '#f
                                   '"endianness must be big or little"
                                   g$stx$28427$1LXXoO))))))
                        (g$syntax->datum$27713$1LXXoO
                          g$e$28430$1LXXoO))))
                    g$ls/false$28429$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28428$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28428$1LXXoO
               '(_ any)))))
         g$stx$28427$1LXXoO))))
   (g$identifier-syntax-macro$27572$1LXXoO
     g$identifier-syntax-macro$31168$1LXXoO
     (case-lambda
       ((g$stx$28432$1LXXoO)
        ((case-lambda
           ((g$t$28433$1LXXoO)
            ((case-lambda
               ((g$ls/false$28434$1LXXoO)
                (if g$ls/false$28434$1LXXoO
                  (apply
                    (case-lambda
                      ((g$expr$28435$1LXXoO)
                       (g$bless$27554$1LXXoO
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$28435$1LXXoO))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$28435$1LXXoO)
                                   '(#'(e* ...))))))))))
                    g$ls/false$28434$1LXXoO)
                  ((case-lambda
                     ((g$t$28436$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$28437$1LXXoO)
                          (if (if g$ls/false$28437$1LXXoO
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$28438$1LXXoO
                                         g$expr1$28439$1LXXoO
                                         g$id2$28440$1LXXoO
                                         g$expr2$28441$1LXXoO
                                         g$expr3$28442$1LXXoO)
                                       (if (g$id?$27093$1LXXoO
                                             g$id1$28438$1LXXoO)
                                         (if (g$id?$27093$1LXXoO
                                               g$id2$28440$1LXXoO)
                                           (begin
                                             '#f
                                             (g$id?$27093$1LXXoO
                                               g$expr2$28441$1LXXoO))
                                           '#f)
                                         '#f)))
                                    g$ls/false$28437$1LXXoO))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$28443$1LXXoO
                                   g$expr1$28444$1LXXoO
                                   g$id2$28445$1LXXoO
                                   g$expr2$28446$1LXXoO
                                   g$expr3$28447$1LXXoO)
                                 (g$bless$27554$1LXXoO
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             g$expr1$28444$1LXXoO))
                                         (list
                                           (list
                                             'set!
                                             'id
                                             g$expr2$28446$1LXXoO)
                                           (list
                                             'syntax
                                             g$expr3$28447$1LXXoO))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$28444$1LXXoO
                                               '(e* ...))))))))))
                              g$ls/false$28437$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"invalid syntax"
                              g$t$28436$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$28436$1LXXoO
                         '(_ (any any)
                             ((#(scheme-id set!) any any) any))))))
                   g$t$28433$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28433$1LXXoO
               '(_ any)))))
         g$stx$28432$1LXXoO))))
   (g$do-macro$27573$1LXXoO
     g$do-macro$31169$1LXXoO
     (case-lambda
       ((g$stx$28448$1LXXoO)
        (letrec* ((g$bind$28449$1LXXoO
                    (case-lambda
                      ((g$x$28461$1LXXoO)
                       ((case-lambda
                          ((g$t$28462$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$28463$1LXXoO)
                               (if g$ls/false$28463$1LXXoO
                                 (apply
                                   (case-lambda
                                     ((g$x$28464$1LXXoO
                                        g$init$28465$1LXXoO)
                                      (list
                                        g$x$28464$1LXXoO
                                        g$init$28465$1LXXoO
                                        g$x$28464$1LXXoO)))
                                   g$ls/false$28463$1LXXoO)
                                 ((case-lambda
                                    ((g$t$28466$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$28467$1LXXoO)
                                         (if g$ls/false$28467$1LXXoO
                                           (apply
                                             (case-lambda
                                               ((g$x$28468$1LXXoO
                                                  g$init$28469$1LXXoO
                                                  g$step$28470$1LXXoO)
                                                (list
                                                  g$x$28468$1LXXoO
                                                  g$init$28469$1LXXoO
                                                  g$step$28470$1LXXoO)))
                                             g$ls/false$28467$1LXXoO)
                                           ((case-lambda
                                              ((g$t$28471$1LXXoO)
                                               ((case-lambda
                                                  ((g$ls/false$28472$1LXXoO)
                                                   (if g$ls/false$28472$1LXXoO
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$27710$1LXXoO
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$28448$1LXXoO)))
                                                       g$ls/false$28472$1LXXoO)
                                                     (g$syntax-violation$27710$1LXXoO
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$28471$1LXXoO))))
                                                (g$syntax-dispatch$27591$1LXXoO
                                                  g$t$28471$1LXXoO
                                                  '_))))
                                            g$t$28466$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$28466$1LXXoO
                                        '(any any any)))))
                                  g$t$28462$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$28462$1LXXoO
                              '(any any)))))
                        g$x$28461$1LXXoO)))))
          ((case-lambda
             ((g$t$28450$1LXXoO)
              ((case-lambda
                 ((g$ls/false$28451$1LXXoO)
                  (if g$ls/false$28451$1LXXoO
                    (apply
                      (case-lambda
                        ((g$binding*$28452$1LXXoO
                           g$test$28453$1LXXoO
                           g$expr*$28454$1LXXoO
                           g$command*$28455$1LXXoO)
                         ((case-lambda
                            ((g$t$28456$1LXXoO)
                             ((case-lambda
                                ((g$ls/false$28457$1LXXoO)
                                 (if g$ls/false$28457$1LXXoO
                                   (apply
                                     (case-lambda
                                       ((g$x*$28458$1LXXoO
                                          g$init*$28459$1LXXoO
                                          g$step*$28460$1LXXoO)
                                        (if (g$valid-bound-ids?$27098$1LXXoO
                                              g$x*$28458$1LXXoO)
                                          (g$bless$27554$1LXXoO
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$28458$1LXXoO
                                                    (list
                                                      'if
                                                      g$test$28453$1LXXoO
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$28454$1LXXoO))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$28455$1LXXoO
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$28460$1LXXoO))))))))
                                              (cons
                                                'loop
                                                g$init*$28459$1LXXoO)))
                                          (g$syntax-violation$27710$1LXXoO
                                            '#f
                                            '"invalid bindings"
                                            g$stx$28448$1LXXoO))))
                                     g$ls/false$28457$1LXXoO)
                                   (g$syntax-violation$27710$1LXXoO
                                     '#f
                                     '"invalid syntax"
                                     g$t$28456$1LXXoO))))
                              (g$syntax-dispatch$27591$1LXXoO
                                g$t$28456$1LXXoO
                                '#(each (any any any))))))
                          (g$map$19225$1LXXoO
                            g$bind$28449$1LXXoO
                            g$binding*$28452$1LXXoO))))
                      g$ls/false$28451$1LXXoO)
                    (g$syntax-violation$27710$1LXXoO
                      '#f
                      '"invalid syntax"
                      g$t$28450$1LXXoO))))
               (g$syntax-dispatch$27591$1LXXoO
                 g$t$28450$1LXXoO
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$28448$1LXXoO)))))
   (g$let*-macro$27574$1LXXoO
     g$let*-macro$31170$1LXXoO
     (case-lambda
       ((g$stx$28473$1LXXoO)
        ((case-lambda
           ((g$t$28474$1LXXoO)
            ((case-lambda
               ((g$ls/false$28475$1LXXoO)
                (if (if g$ls/false$28475$1LXXoO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$28476$1LXXoO
                               g$rhs*$28477$1LXXoO
                               g$b$28478$1LXXoO
                               g$b*$28479$1LXXoO)
                             (g$for-all$19223$1LXXoO
                               g$id?$27093$1LXXoO
                               g$lhs*$28476$1LXXoO)))
                          g$ls/false$28475$1LXXoO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$28480$1LXXoO
                         g$rhs*$28481$1LXXoO
                         g$b$28482$1LXXoO
                         g$b*$28483$1LXXoO)
                       (g$bless$27554$1LXXoO
                         ((letrec ((g$f$28484$1LXXoO
                                     (case-lambda
                                       ((g$x*$28485$1LXXoO)
                                        (if (null? g$x*$28485$1LXXoO)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$28482$1LXXoO
                                                g$b*$28483$1LXXoO)))
                                          (if (null?
                                                (cdr g$x*$28485$1LXXoO))
                                            (cons
                                              'let
                                              (cons
                                                (list
                                                  (car g$x*$28485$1LXXoO))
                                                (cons
                                                  g$b$28482$1LXXoO
                                                  g$b*$28483$1LXXoO)))
                                            (begin
                                              '#f
                                              (list
                                                'let
                                                (list
                                                  (car g$x*$28485$1LXXoO))
                                                (g$f$28484$1LXXoO
                                                  (cdr g$x*$28485$1LXXoO))))))))))
                            g$f$28484$1LXXoO)
                          (g$map$19225$1LXXoO
                            list
                            g$lhs*$28480$1LXXoO
                            g$rhs*$28481$1LXXoO)))))
                    g$ls/false$28475$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28474$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28474$1LXXoO
               '(_ #(each (any any)) any . each-any)))))
         g$stx$28473$1LXXoO))))
   (g$or-macro$27575$1LXXoO
     g$or-macro$31171$1LXXoO
     (case-lambda
       ((g$stx$28486$1LXXoO)
        ((case-lambda
           ((g$t$28487$1LXXoO)
            ((case-lambda
               ((g$ls/false$28488$1LXXoO)
                (if g$ls/false$28488$1LXXoO
                  (apply (case-lambda (() '#f)) g$ls/false$28488$1LXXoO)
                  ((case-lambda
                     ((g$t$28489$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$28490$1LXXoO)
                          (if g$ls/false$28490$1LXXoO
                            (apply
                              (case-lambda
                                ((g$e$28491$1LXXoO g$e*$28492$1LXXoO)
                                 (g$bless$27554$1LXXoO
                                   ((letrec ((g$f$28493$1LXXoO
                                               (case-lambda
                                                 ((g$e$28494$1LXXoO
                                                    g$e*$28495$1LXXoO)
                                                  (if (null?
                                                        g$e*$28495$1LXXoO)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$28494$1LXXoO)
                                                    (begin
                                                      '#f
                                                      (list
                                                        'let
                                                        (list
                                                          (list
                                                            't
                                                            g$e$28494$1LXXoO))
                                                        (list
                                                          'if
                                                          't
                                                          't
                                                          (g$f$28493$1LXXoO
                                                            (car g$e*$28495$1LXXoO)
                                                            (cdr g$e*$28495$1LXXoO))))))))))
                                      g$f$28493$1LXXoO)
                                    g$e$28491$1LXXoO
                                    g$e*$28492$1LXXoO))))
                              g$ls/false$28490$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"invalid syntax"
                              g$t$28489$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$28489$1LXXoO
                         '(_ any . each-any)))))
                   g$t$28487$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO g$t$28487$1LXXoO '(_)))))
         g$stx$28486$1LXXoO))))
   (g$and-macro$27576$1LXXoO
     g$and-macro$31172$1LXXoO
     (case-lambda
       ((g$stx$28496$1LXXoO)
        ((case-lambda
           ((g$t$28497$1LXXoO)
            ((case-lambda
               ((g$ls/false$28498$1LXXoO)
                (if g$ls/false$28498$1LXXoO
                  (apply (case-lambda (() '#t)) g$ls/false$28498$1LXXoO)
                  ((case-lambda
                     ((g$t$28499$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$28500$1LXXoO)
                          (if g$ls/false$28500$1LXXoO
                            (apply
                              (case-lambda
                                ((g$e$28501$1LXXoO g$e*$28502$1LXXoO)
                                 (g$bless$27554$1LXXoO
                                   ((letrec ((g$f$28503$1LXXoO
                                               (case-lambda
                                                 ((g$e$28504$1LXXoO
                                                    g$e*$28505$1LXXoO)
                                                  (if (null?
                                                        g$e*$28505$1LXXoO)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$28504$1LXXoO)
                                                    (begin
                                                      '#f
                                                      (cons
                                                        'if
                                                        (cons
                                                          g$e$28504$1LXXoO
                                                          (cons
                                                            (g$f$28503$1LXXoO
                                                              (car g$e*$28505$1LXXoO)
                                                              (cdr g$e*$28505$1LXXoO))
                                                            '(#f))))))))))
                                      g$f$28503$1LXXoO)
                                    g$e$28501$1LXXoO
                                    g$e*$28502$1LXXoO))))
                              g$ls/false$28500$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"invalid syntax"
                              g$t$28499$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$28499$1LXXoO
                         '(_ any . each-any)))))
                   g$t$28497$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO g$t$28497$1LXXoO '(_)))))
         g$stx$28496$1LXXoO))))
   (g$cond-macro$27577$1LXXoO
     g$cond-macro$31173$1LXXoO
     (case-lambda
       ((g$stx$28506$1LXXoO)
        ((case-lambda
           ((g$t$28507$1LXXoO)
            ((case-lambda
               ((g$ls/false$28508$1LXXoO)
                (if g$ls/false$28508$1LXXoO
                  (apply
                    (case-lambda
                      ((g$cls$28509$1LXXoO g$cls*$28510$1LXXoO)
                       (g$bless$27554$1LXXoO
                         ((letrec ((g$f$28511$1LXXoO
                                     (case-lambda
                                       ((g$cls$28512$1LXXoO
                                          g$cls*$28513$1LXXoO)
                                        (if (null? g$cls*$28513$1LXXoO)
                                          ((case-lambda
                                             ((g$t$28514$1LXXoO)
                                              ((case-lambda
                                                 ((g$ls/false$28515$1LXXoO)
                                                  (if g$ls/false$28515$1LXXoO
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$28516$1LXXoO
                                                           g$e*$28517$1LXXoO)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             '#f
                                                             (cons
                                                               g$e$28516$1LXXoO
                                                               g$e*$28517$1LXXoO)))))
                                                      g$ls/false$28515$1LXXoO)
                                                    ((case-lambda
                                                       ((g$t$28518$1LXXoO)
                                                        ((case-lambda
                                                           ((g$ls/false$28519$1LXXoO)
                                                            (if g$ls/false$28519$1LXXoO
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$28520$1LXXoO
                                                                     g$p$28521$1LXXoO)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$28520$1LXXoO))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$28521$1LXXoO
                                                                         '(t))))))
                                                                g$ls/false$28519$1LXXoO)
                                                              ((case-lambda
                                                                 ((g$t$28522$1LXXoO)
                                                                  ((case-lambda
                                                                     ((g$ls/false$28523$1LXXoO)
                                                                      (if g$ls/false$28523$1LXXoO
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$28524$1LXXoO)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$28524$1LXXoO
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$28523$1LXXoO)
                                                                        ((case-lambda
                                                                           ((g$t$28525$1LXXoO)
                                                                            ((case-lambda
                                                                               ((g$ls/false$28526$1LXXoO)
                                                                                (if g$ls/false$28526$1LXXoO
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$28527$1LXXoO
                                                                                         g$e*$28528$1LXXoO)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$28527$1LXXoO
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$28528$1LXXoO))))
                                                                                    g$ls/false$28526$1LXXoO)
                                                                                  ((case-lambda
                                                                                     ((g$t$28529$1LXXoO)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$28530$1LXXoO)
                                                                                          (if g$ls/false$28530$1LXXoO
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$27710$1LXXoO
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$28506$1LXXoO)))
                                                                                              g$ls/false$28530$1LXXoO)
                                                                                            (g$syntax-violation$27710$1LXXoO
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$28529$1LXXoO))))
                                                                                       (g$syntax-dispatch$27591$1LXXoO
                                                                                         g$t$28529$1LXXoO
                                                                                         '_))))
                                                                                   g$t$28525$1LXXoO))))
                                                                             (g$syntax-dispatch$27591$1LXXoO
                                                                               g$t$28525$1LXXoO
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$28522$1LXXoO))))
                                                                   (g$syntax-dispatch$27591$1LXXoO
                                                                     g$t$28522$1LXXoO
                                                                     '(any)))))
                                                               g$t$28518$1LXXoO))))
                                                         (g$syntax-dispatch$27591$1LXXoO
                                                           g$t$28518$1LXXoO
                                                           '(any #(scheme-id
                                                                   =>)
                                                                 any)))))
                                                     g$t$28514$1LXXoO))))
                                               (g$syntax-dispatch$27591$1LXXoO
                                                 g$t$28514$1LXXoO
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$28512$1LXXoO)
                                          (begin
                                            '#f
                                            ((case-lambda
                                               ((g$t$28531$1LXXoO)
                                                ((case-lambda
                                                   ((g$ls/false$28532$1LXXoO)
                                                    (if g$ls/false$28532$1LXXoO
                                                      (apply
                                                        (case-lambda
                                                          ((g$e$28533$1LXXoO
                                                             g$e*$28534$1LXXoO)
                                                           (g$syntax-violation$27710$1LXXoO
                                                             '#f
                                                             '"incorrect position of keyword else"
                                                             g$stx$28506$1LXXoO)))
                                                        g$ls/false$28532$1LXXoO)
                                                      ((case-lambda
                                                         ((g$t$28535$1LXXoO)
                                                          ((case-lambda
                                                             ((g$ls/false$28536$1LXXoO)
                                                              (if g$ls/false$28536$1LXXoO
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$e$28537$1LXXoO
                                                                       g$p$28538$1LXXoO)
                                                                     (list
                                                                       'let
                                                                       (list
                                                                         (list
                                                                           't
                                                                           g$e$28537$1LXXoO))
                                                                       (list
                                                                         'if
                                                                         't
                                                                         (cons
                                                                           g$p$28538$1LXXoO
                                                                           '(t))
                                                                         (g$f$28511$1LXXoO
                                                                           (car g$cls*$28513$1LXXoO)
                                                                           (cdr g$cls*$28513$1LXXoO))))))
                                                                  g$ls/false$28536$1LXXoO)
                                                                ((case-lambda
                                                                   ((g$t$28539$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$ls/false$28540$1LXXoO)
                                                                        (if g$ls/false$28540$1LXXoO
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$e$28541$1LXXoO)
                                                                               (list
                                                                                 'or
                                                                                 g$e$28541$1LXXoO
                                                                                 (g$f$28511$1LXXoO
                                                                                   (car g$cls*$28513$1LXXoO)
                                                                                   (cdr g$cls*$28513$1LXXoO)))))
                                                                            g$ls/false$28540$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$t$28542$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$28543$1LXXoO)
                                                                                  (if g$ls/false$28543$1LXXoO
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$e$28544$1LXXoO
                                                                                           g$e*$28545$1LXXoO)
                                                                                         (list
                                                                                           'if
                                                                                           g$e$28544$1LXXoO
                                                                                           (cons
                                                                                             'begin
                                                                                             g$e*$28545$1LXXoO)
                                                                                           (g$f$28511$1LXXoO
                                                                                             (car g$cls*$28513$1LXXoO)
                                                                                             (cdr g$cls*$28513$1LXXoO)))))
                                                                                      g$ls/false$28543$1LXXoO)
                                                                                    ((case-lambda
                                                                                       ((g$t$28546$1LXXoO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$28547$1LXXoO)
                                                                                            (if g$ls/false$28547$1LXXoO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$syntax-violation$27710$1LXXoO
                                                                                                     '#f
                                                                                                     '"invalid last clause"
                                                                                                     g$stx$28506$1LXXoO)))
                                                                                                g$ls/false$28547$1LXXoO)
                                                                                              (g$syntax-violation$27710$1LXXoO
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$28546$1LXXoO))))
                                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                                           g$t$28546$1LXXoO
                                                                                           '_))))
                                                                                     g$t$28542$1LXXoO))))
                                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                                 g$t$28542$1LXXoO
                                                                                 '(any .
                                                                                       each-any)))))
                                                                           g$t$28539$1LXXoO))))
                                                                     (g$syntax-dispatch$27591$1LXXoO
                                                                       g$t$28539$1LXXoO
                                                                       '(any)))))
                                                                 g$t$28535$1LXXoO))))
                                                           (g$syntax-dispatch$27591$1LXXoO
                                                             g$t$28535$1LXXoO
                                                             '(any #(scheme-id
                                                                     =>)
                                                                   any)))))
                                                       g$t$28531$1LXXoO))))
                                                 (g$syntax-dispatch$27591$1LXXoO
                                                   g$t$28531$1LXXoO
                                                   '(#(scheme-id else)
                                                     any
                                                     .
                                                     each-any)))))
                                             g$cls$28512$1LXXoO)))))))
                            g$f$28511$1LXXoO)
                          g$cls$28509$1LXXoO
                          g$cls*$28510$1LXXoO))))
                    g$ls/false$28508$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28507$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28507$1LXXoO
               '(_ any . each-any)))))
         g$stx$28506$1LXXoO))))
   (g$do-include$27578$1LXXoO
     g$do-include$31174$1LXXoO
     (case-lambda
       ((g$stx$28548$1LXXoO g$id$28549$1LXXoO g$filename$28550$1LXXoO)
        ((case-lambda
           ((g$filename$28551$1LXXoO)
            (begin
              (if (not (if (string? g$filename$28551$1LXXoO)
                         (begin
                           '#f
                           (g$id?$27093$1LXXoO g$id$28549$1LXXoO))
                         '#f))
                (g$syntax-violation$27710$1LXXoO
                  '#f
                  '"invalid syntax"
                  g$stx$28548$1LXXoO)
                (void))
              (cons
                (g$bless$27554$1LXXoO 'begin)
                (g$with-input-from-file$25567$1LXXoO
                  g$filename$28551$1LXXoO
                  (case-lambda
                    (()
                     ((letrec ((g$f$28552$1LXXoO
                                 (case-lambda
                                   ((g$ls$28553$1LXXoO)
                                    ((case-lambda
                                       ((g$x$28554$1LXXoO)
                                        (if (eof-object?
                                              g$x$28554$1LXXoO)
                                          (g$reverse$20074$1LXXoO
                                            g$ls$28553$1LXXoO)
                                          (begin
                                            '#f
                                            (g$f$28552$1LXXoO
                                              (cons
                                                (g$datum->stx$27076$1LXXoO
                                                  g$id$28549$1LXXoO
                                                  g$x$28554$1LXXoO)
                                                g$ls$28553$1LXXoO))))))
                                     (read-annotated))))))
                        g$f$28552$1LXXoO)
                      '()))))))))
         (g$stx->datum$27104$1LXXoO g$filename$28550$1LXXoO)))))
   (g$include-macro$27579$1LXXoO
     g$include-macro$31175$1LXXoO
     (case-lambda
       ((g$e$28555$1LXXoO)
        ((case-lambda
           ((g$t$28556$1LXXoO)
            ((case-lambda
               ((g$ls/false$28557$1LXXoO)
                (if g$ls/false$28557$1LXXoO
                  (apply
                    (case-lambda
                      ((g$id$28558$1LXXoO g$filename$28559$1LXXoO)
                       (g$do-include$27578$1LXXoO
                         g$e$28555$1LXXoO
                         g$id$28558$1LXXoO
                         g$filename$28559$1LXXoO)))
                    g$ls/false$28557$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28556$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28556$1LXXoO
               '(any any)))))
         g$e$28555$1LXXoO))))
   (g$include-into-macro$27580$1LXXoO
     g$include-into-macro$31176$1LXXoO
     (case-lambda
       ((g$e$28560$1LXXoO)
        ((case-lambda
           ((g$t$28561$1LXXoO)
            ((case-lambda
               ((g$ls/false$28562$1LXXoO)
                (if g$ls/false$28562$1LXXoO
                  (apply
                    (case-lambda
                      ((g$id$28563$1LXXoO g$filename$28564$1LXXoO)
                       (g$do-include$27578$1LXXoO
                         g$e$28560$1LXXoO
                         g$id$28563$1LXXoO
                         g$filename$28564$1LXXoO)))
                    g$ls/false$28562$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28561$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28561$1LXXoO
               '(_ any any)))))
         g$e$28560$1LXXoO))))
   (g$syntax-rules-macro$27581$1LXXoO
     g$syntax-rules-macro$31177$1LXXoO
     (case-lambda
       ((g$e$28565$1LXXoO)
        ((case-lambda
           ((g$t$28566$1LXXoO)
            ((case-lambda
               ((g$ls/false$28567$1LXXoO)
                (if g$ls/false$28567$1LXXoO
                  (apply
                    (case-lambda
                      ((g$lits$28568$1LXXoO
                         g$pat*$28569$1LXXoO
                         g$tmp*$28570$1LXXoO)
                       (begin
                         (g$verify-literals$27594$1LXXoO
                           g$lits$28568$1LXXoO
                           g$e$28565$1LXXoO)
                         (g$bless$27554$1LXXoO
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$28568$1LXXoO
                                   (g$map$19225$1LXXoO
                                     (case-lambda
                                       ((g$pat$28571$1LXXoO
                                          g$tmp$28572$1LXXoO)
                                        ((case-lambda
                                           ((g$t$28573$1LXXoO)
                                            ((case-lambda
                                               ((g$ls/false$28574$1LXXoO)
                                                (if g$ls/false$28574$1LXXoO
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$28575$1LXXoO)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$28575$1LXXoO)
                                                         (list
                                                           'syntax
                                                           g$tmp$28572$1LXXoO))))
                                                    g$ls/false$28574$1LXXoO)
                                                  ((case-lambda
                                                     ((g$t$28576$1LXXoO)
                                                      ((case-lambda
                                                         ((g$ls/false$28577$1LXXoO)
                                                          (if g$ls/false$28577$1LXXoO
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$27710$1LXXoO
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$28565$1LXXoO
                                                                   g$pat$28571$1LXXoO)))
                                                              g$ls/false$28577$1LXXoO)
                                                            (g$syntax-violation$27710$1LXXoO
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$28576$1LXXoO))))
                                                       (g$syntax-dispatch$27591$1LXXoO
                                                         g$t$28576$1LXXoO
                                                         '_))))
                                                   g$t$28573$1LXXoO))))
                                             (g$syntax-dispatch$27591$1LXXoO
                                               g$t$28573$1LXXoO
                                               '(_ . any)))))
                                         g$pat$28571$1LXXoO)))
                                     g$pat*$28569$1LXXoO
                                     g$tmp*$28570$1LXXoO)))))))))
                    g$ls/false$28567$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$28566$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$28566$1LXXoO
               '(_ each-any . #(each (any any)))))))
         g$e$28565$1LXXoO))))
   (g$quasiquote-macro$27582$1LXXoO
     g$quasiquote-macro$31178$1LXXoO
     ((case-lambda
        (()
         (letrec* ((g$datum$28578$1LXXoO
                     (case-lambda
                       ((g$x$28728$1LXXoO)
                        (list
                          (g$scheme-stx$27534$1LXXoO 'quote)
                          (g$mkstx$27081$1LXXoO
                            g$x$28728$1LXXoO
                            '()
                            '()
                            '())))))
                   (g$quasicons*$28613$1LXXoO
                     (case-lambda
                       ((g$x$28724$1LXXoO g$y$28725$1LXXoO)
                        ((letrec ((g$f$28726$1LXXoO
                                    (case-lambda
                                      ((g$x$28727$1LXXoO)
                                       (if (null? g$x$28727$1LXXoO)
                                         g$y$28725$1LXXoO
                                         (g$quasicons$28614$1LXXoO
                                           (car g$x$28727$1LXXoO)
                                           (g$f$28726$1LXXoO
                                             (cdr g$x$28727$1LXXoO))))))))
                           g$f$28726$1LXXoO)
                         g$x$28724$1LXXoO))))
                   (g$quasicons$28614$1LXXoO
                     (case-lambda
                       ((g$x$28705$1LXXoO g$y$28706$1LXXoO)
                        ((case-lambda
                           ((g$t$28707$1LXXoO)
                            ((case-lambda
                               ((g$ls/false$28708$1LXXoO)
                                (if g$ls/false$28708$1LXXoO
                                  (apply
                                    (case-lambda
                                      ((g$dy$28709$1LXXoO)
                                       ((case-lambda
                                          ((g$t$28710$1LXXoO)
                                           ((case-lambda
                                              ((g$ls/false$28711$1LXXoO)
                                               (if g$ls/false$28711$1LXXoO
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$28712$1LXXoO)
                                                      (list
                                                        (g$scheme-stx$27534$1LXXoO
                                                          'quote)
                                                        (cons
                                                          g$dx$28712$1LXXoO
                                                          g$dy$28709$1LXXoO))))
                                                   g$ls/false$28711$1LXXoO)
                                                 ((case-lambda
                                                    ((g$t$28713$1LXXoO)
                                                     ((case-lambda
                                                        ((g$ls/false$28714$1LXXoO)
                                                         (if g$ls/false$28714$1LXXoO
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$28715$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$ls/false$28716$1LXXoO)
                                                                        (if g$ls/false$28716$1LXXoO
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$27534$1LXXoO
                                                                                   'list)
                                                                                 g$x$28705$1LXXoO)))
                                                                            g$ls/false$28716$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$t$28717$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$28718$1LXXoO)
                                                                                  (if g$ls/false$28718$1LXXoO
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$27534$1LXXoO
                                                                                             'cons)
                                                                                           g$x$28705$1LXXoO
                                                                                           g$y$28706$1LXXoO)))
                                                                                      g$ls/false$28718$1LXXoO)
                                                                                    (g$syntax-violation$27710$1LXXoO
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$28717$1LXXoO))))
                                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                                 g$t$28717$1LXXoO
                                                                                 '_))))
                                                                           g$t$28715$1LXXoO))))
                                                                     (g$syntax-dispatch$27591$1LXXoO
                                                                       g$t$28715$1LXXoO
                                                                       '()))))
                                                                 g$dy$28709$1LXXoO)))
                                                             g$ls/false$28714$1LXXoO)
                                                           (g$syntax-violation$27710$1LXXoO
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$28713$1LXXoO))))
                                                      (g$syntax-dispatch$27591$1LXXoO
                                                        g$t$28713$1LXXoO
                                                        '_))))
                                                  g$t$28710$1LXXoO))))
                                            (g$syntax-dispatch$27591$1LXXoO
                                              g$t$28710$1LXXoO
                                              '(#(scheme-id quote)
                                                any)))))
                                        g$x$28705$1LXXoO)))
                                    g$ls/false$28708$1LXXoO)
                                  ((case-lambda
                                     ((g$t$28719$1LXXoO)
                                      ((case-lambda
                                         ((g$ls/false$28720$1LXXoO)
                                          (if g$ls/false$28720$1LXXoO
                                            (apply
                                              (case-lambda
                                                ((g$stuff$28721$1LXXoO)
                                                 (g$cons*$19227$1LXXoO
                                                   (g$scheme-stx$27534$1LXXoO
                                                     'list)
                                                   g$x$28705$1LXXoO
                                                   g$stuff$28721$1LXXoO)))
                                              g$ls/false$28720$1LXXoO)
                                            ((case-lambda
                                               ((g$t$28722$1LXXoO)
                                                ((case-lambda
                                                   ((g$ls/false$28723$1LXXoO)
                                                    (if g$ls/false$28723$1LXXoO
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$27534$1LXXoO
                                                               'cons)
                                                             g$x$28705$1LXXoO
                                                             g$y$28706$1LXXoO)))
                                                        g$ls/false$28723$1LXXoO)
                                                      (g$syntax-violation$27710$1LXXoO
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$28722$1LXXoO))))
                                                 (g$syntax-dispatch$27591$1LXXoO
                                                   g$t$28722$1LXXoO
                                                   '_))))
                                             g$t$28719$1LXXoO))))
                                       (g$syntax-dispatch$27591$1LXXoO
                                         g$t$28719$1LXXoO
                                         '(#(scheme-id list)
                                           .
                                           each-any)))))
                                   g$t$28707$1LXXoO))))
                             (g$syntax-dispatch$27591$1LXXoO
                               g$t$28707$1LXXoO
                               '(#(scheme-id quote) any)))))
                         g$y$28706$1LXXoO))))
                   (g$quasiappend$28615$1LXXoO
                     (case-lambda
                       ((g$x$28692$1LXXoO g$y$28693$1LXXoO)
                        ((case-lambda
                           ((g$ls$28694$1LXXoO)
                            (if (null? g$ls$28694$1LXXoO)
                              (list
                                (g$scheme-stx$27534$1LXXoO 'quote)
                                '())
                              (if (null? (cdr g$ls$28694$1LXXoO))
                                (car g$ls$28694$1LXXoO)
                                (begin
                                  '#f
                                  (g$cons*$19227$1LXXoO
                                    (g$scheme-stx$27534$1LXXoO 'append)
                                    g$ls$28694$1LXXoO))))))
                         ((letrec ((g$f$28695$1LXXoO
                                     (case-lambda
                                       ((g$x$28696$1LXXoO)
                                        (if (null? g$x$28696$1LXXoO)
                                          ((case-lambda
                                             ((g$t$28697$1LXXoO)
                                              ((case-lambda
                                                 ((g$ls/false$28698$1LXXoO)
                                                  (if g$ls/false$28698$1LXXoO
                                                    (apply
                                                      (case-lambda
                                                        (() '()))
                                                      g$ls/false$28698$1LXXoO)
                                                    ((case-lambda
                                                       ((g$t$28699$1LXXoO)
                                                        ((case-lambda
                                                           ((g$ls/false$28700$1LXXoO)
                                                            (if g$ls/false$28700$1LXXoO
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$28693$1LXXoO)))
                                                                g$ls/false$28700$1LXXoO)
                                                              (g$syntax-violation$27710$1LXXoO
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$28699$1LXXoO))))
                                                         (g$syntax-dispatch$27591$1LXXoO
                                                           g$t$28699$1LXXoO
                                                           '_))))
                                                     g$t$28697$1LXXoO))))
                                               (g$syntax-dispatch$27591$1LXXoO
                                                 g$t$28697$1LXXoO
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           g$y$28693$1LXXoO)
                                          ((case-lambda
                                             ((g$t$28701$1LXXoO)
                                              ((case-lambda
                                                 ((g$ls/false$28702$1LXXoO)
                                                  (if g$ls/false$28702$1LXXoO
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$28695$1LXXoO
                                                           (cdr g$x$28696$1LXXoO))))
                                                      g$ls/false$28702$1LXXoO)
                                                    ((case-lambda
                                                       ((g$t$28703$1LXXoO)
                                                        ((case-lambda
                                                           ((g$ls/false$28704$1LXXoO)
                                                            (if g$ls/false$28704$1LXXoO
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$28696$1LXXoO)
                                                                     (g$f$28695$1LXXoO
                                                                       (cdr g$x$28696$1LXXoO)))))
                                                                g$ls/false$28704$1LXXoO)
                                                              (g$syntax-violation$27710$1LXXoO
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$28703$1LXXoO))))
                                                         (g$syntax-dispatch$27591$1LXXoO
                                                           g$t$28703$1LXXoO
                                                           '_))))
                                                     g$t$28701$1LXXoO))))
                                               (g$syntax-dispatch$27591$1LXXoO
                                                 g$t$28701$1LXXoO
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           (car g$x$28696$1LXXoO)))))))
                            g$f$28695$1LXXoO)
                          g$x$28692$1LXXoO)))))
                   (g$quasivector$28616$1LXXoO
                     (case-lambda
                       ((g$x$28667$1LXXoO)
                        ((case-lambda
                           ((g$pat-x$28668$1LXXoO)
                            ((case-lambda
                               ((g$t$28669$1LXXoO)
                                ((case-lambda
                                   ((g$ls/false$28670$1LXXoO)
                                    (if g$ls/false$28670$1LXXoO
                                      (apply
                                        (case-lambda
                                          ((g$x*$28671$1LXXoO)
                                           (list
                                             (g$scheme-stx$27534$1LXXoO
                                               'quote)
                                             (g$list->vector$20068$1LXXoO
                                               g$x*$28671$1LXXoO))))
                                        g$ls/false$28670$1LXXoO)
                                      ((case-lambda
                                         ((g$t$28672$1LXXoO)
                                          ((case-lambda
                                             ((g$ls/false$28673$1LXXoO)
                                              (if g$ls/false$28673$1LXXoO
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$28674$1LXXoO
                                                                 (case-lambda
                                                                   ((g$x$28675$1LXXoO
                                                                      g$k$28676$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$t$28677$1LXXoO)
                                                                        ((case-lambda
                                                                           ((g$ls/false$28678$1LXXoO)
                                                                            (if g$ls/false$28678$1LXXoO
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$28679$1LXXoO)
                                                                                   (g$k$28676$1LXXoO
                                                                                     (g$map$19225$1LXXoO
                                                                                       (case-lambda
                                                                                         ((g$x$28680$1LXXoO)
                                                                                          (list
                                                                                            (g$scheme-stx$27534$1LXXoO
                                                                                              'quote)
                                                                                            g$x$28680$1LXXoO)))
                                                                                       g$x*$28679$1LXXoO))))
                                                                                g$ls/false$28678$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$t$28681$1LXXoO)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$28682$1LXXoO)
                                                                                      (if g$ls/false$28682$1LXXoO
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$28683$1LXXoO)
                                                                                             (g$k$28676$1LXXoO
                                                                                               g$x*$28683$1LXXoO)))
                                                                                          g$ls/false$28682$1LXXoO)
                                                                                        ((case-lambda
                                                                                           ((g$t$28684$1LXXoO)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$28685$1LXXoO)
                                                                                                (if g$ls/false$28685$1LXXoO
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$28686$1LXXoO
                                                                                                         g$y$28687$1LXXoO)
                                                                                                       (g$f$28674$1LXXoO
                                                                                                         g$y$28687$1LXXoO
                                                                                                         (case-lambda
                                                                                                           ((g$ls$28688$1LXXoO)
                                                                                                            (g$k$28676$1LXXoO
                                                                                                              (cons
                                                                                                                g$x$28686$1LXXoO
                                                                                                                g$ls$28688$1LXXoO)))))))
                                                                                                    g$ls/false$28685$1LXXoO)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$28689$1LXXoO)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$28690$1LXXoO)
                                                                                                          (if g$ls/false$28690$1LXXoO
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$27534$1LXXoO
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$28668$1LXXoO)))
                                                                                                              g$ls/false$28690$1LXXoO)
                                                                                                            (g$syntax-violation$27710$1LXXoO
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$28689$1LXXoO))))
                                                                                                       (g$syntax-dispatch$27591$1LXXoO
                                                                                                         g$t$28689$1LXXoO
                                                                                                         '_))))
                                                                                                   g$t$28684$1LXXoO))))
                                                                                             (g$syntax-dispatch$27591$1LXXoO
                                                                                               g$t$28684$1LXXoO
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$28681$1LXXoO))))
                                                                                   (g$syntax-dispatch$27591$1LXXoO
                                                                                     g$t$28681$1LXXoO
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$28677$1LXXoO))))
                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                           g$t$28677$1LXXoO
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$28675$1LXXoO)))))
                                                        g$f$28674$1LXXoO)
                                                      g$x$28667$1LXXoO
                                                      (case-lambda
                                                        ((g$ls$28691$1LXXoO)
                                                         (g$cons*$19227$1LXXoO
                                                           (g$scheme-stx$27534$1LXXoO
                                                             'vector)
                                                           g$ls$28691$1LXXoO))))))
                                                  g$ls/false$28673$1LXXoO)
                                                (g$syntax-violation$27710$1LXXoO
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$28672$1LXXoO))))
                                           (g$syntax-dispatch$27591$1LXXoO
                                             g$t$28672$1LXXoO
                                             '_))))
                                       g$t$28669$1LXXoO))))
                                 (g$syntax-dispatch$27591$1LXXoO
                                   g$t$28669$1LXXoO
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$28668$1LXXoO)))
                         g$x$28667$1LXXoO))))
                   (g$vquasi$28617$1LXXoO
                     (case-lambda
                       ((g$p$28650$1LXXoO g$lev$28651$1LXXoO)
                        ((case-lambda
                           ((g$t$28652$1LXXoO)
                            ((case-lambda
                               ((g$ls/false$28653$1LXXoO)
                                (if g$ls/false$28653$1LXXoO
                                  (apply
                                    (case-lambda
                                      ((g$p$28654$1LXXoO
                                         g$q$28655$1LXXoO)
                                       ((case-lambda
                                          ((g$t$28656$1LXXoO)
                                           ((case-lambda
                                              ((g$ls/false$28657$1LXXoO)
                                               (if g$ls/false$28657$1LXXoO
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$28658$1LXXoO)
                                                      (if (g$=$20714$1LXXoO
                                                            g$lev$28651$1LXXoO
                                                            '0)
                                                        (g$quasicons*$28613$1LXXoO
                                                          g$p$28658$1LXXoO
                                                          (g$vquasi$28617$1LXXoO
                                                            g$q$28655$1LXXoO
                                                            g$lev$28651$1LXXoO))
                                                        (g$quasicons$28614$1LXXoO
                                                          (g$quasicons$28614$1LXXoO
                                                            (g$datum$28578$1LXXoO
                                                              'unquote)
                                                            (g$quasi$28618$1LXXoO
                                                              g$p$28658$1LXXoO
                                                              (- g$lev$28651$1LXXoO
                                                                 '1)))
                                                          (g$vquasi$28617$1LXXoO
                                                            g$q$28655$1LXXoO
                                                            g$lev$28651$1LXXoO)))))
                                                   g$ls/false$28657$1LXXoO)
                                                 ((case-lambda
                                                    ((g$t$28659$1LXXoO)
                                                     ((case-lambda
                                                        ((g$ls/false$28660$1LXXoO)
                                                         (if g$ls/false$28660$1LXXoO
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$28661$1LXXoO)
                                                                (if (g$=$20714$1LXXoO
                                                                      g$lev$28651$1LXXoO
                                                                      '0)
                                                                  (g$quasiappend$28615$1LXXoO
                                                                    g$p$28661$1LXXoO
                                                                    (g$vquasi$28617$1LXXoO
                                                                      g$q$28655$1LXXoO
                                                                      g$lev$28651$1LXXoO))
                                                                  (g$quasicons$28614$1LXXoO
                                                                    (g$quasicons$28614$1LXXoO
                                                                      (g$datum$28578$1LXXoO
                                                                        'unquote-splicing)
                                                                      (g$quasi$28618$1LXXoO
                                                                        g$p$28661$1LXXoO
                                                                        (- g$lev$28651$1LXXoO
                                                                           '1)))
                                                                    (g$vquasi$28617$1LXXoO
                                                                      g$q$28655$1LXXoO
                                                                      g$lev$28651$1LXXoO)))))
                                                             g$ls/false$28660$1LXXoO)
                                                           ((case-lambda
                                                              ((g$t$28662$1LXXoO)
                                                               ((case-lambda
                                                                  ((g$ls/false$28663$1LXXoO)
                                                                   (if g$ls/false$28663$1LXXoO
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$28664$1LXXoO)
                                                                          (g$quasicons$28614$1LXXoO
                                                                            (g$quasi$28618$1LXXoO
                                                                              g$p$28664$1LXXoO
                                                                              g$lev$28651$1LXXoO)
                                                                            (g$vquasi$28617$1LXXoO
                                                                              g$q$28655$1LXXoO
                                                                              g$lev$28651$1LXXoO))))
                                                                       g$ls/false$28663$1LXXoO)
                                                                     (g$syntax-violation$27710$1LXXoO
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$28662$1LXXoO))))
                                                                (g$syntax-dispatch$27591$1LXXoO
                                                                  g$t$28662$1LXXoO
                                                                  'any))))
                                                            g$t$28659$1LXXoO))))
                                                      (g$syntax-dispatch$27591$1LXXoO
                                                        g$t$28659$1LXXoO
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$28656$1LXXoO))))
                                            (g$syntax-dispatch$27591$1LXXoO
                                              g$t$28656$1LXXoO
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$28654$1LXXoO)))
                                    g$ls/false$28653$1LXXoO)
                                  ((case-lambda
                                     ((g$t$28665$1LXXoO)
                                      ((case-lambda
                                         ((g$ls/false$28666$1LXXoO)
                                          (if g$ls/false$28666$1LXXoO
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$27534$1LXXoO
                                                     'quote)
                                                   '())))
                                              g$ls/false$28666$1LXXoO)
                                            (g$syntax-violation$27710$1LXXoO
                                              '#f
                                              '"invalid syntax"
                                              g$t$28665$1LXXoO))))
                                       (g$syntax-dispatch$27591$1LXXoO
                                         g$t$28665$1LXXoO
                                         '()))))
                                   g$t$28652$1LXXoO))))
                             (g$syntax-dispatch$27591$1LXXoO
                               g$t$28652$1LXXoO
                               '(any . any)))))
                         g$p$28650$1LXXoO))))
                   (g$quasi$28618$1LXXoO
                     (case-lambda
                       ((g$p$28623$1LXXoO g$lev$28624$1LXXoO)
                        ((case-lambda
                           ((g$t$28625$1LXXoO)
                            ((case-lambda
                               ((g$ls/false$28626$1LXXoO)
                                (if g$ls/false$28626$1LXXoO
                                  (apply
                                    (case-lambda
                                      ((g$p$28627$1LXXoO)
                                       (if (g$=$20714$1LXXoO
                                             g$lev$28624$1LXXoO
                                             '0)
                                         g$p$28627$1LXXoO
                                         (g$quasicons$28614$1LXXoO
                                           (g$datum$28578$1LXXoO
                                             'unquote)
                                           (g$quasi$28618$1LXXoO
                                             (list g$p$28627$1LXXoO)
                                             (- g$lev$28624$1LXXoO
                                                '1))))))
                                    g$ls/false$28626$1LXXoO)
                                  ((case-lambda
                                     ((g$t$28628$1LXXoO)
                                      ((case-lambda
                                         ((g$ls/false$28629$1LXXoO)
                                          (if g$ls/false$28629$1LXXoO
                                            (apply
                                              (case-lambda
                                                ((g$p$28630$1LXXoO
                                                   g$q$28631$1LXXoO)
                                                 (if (g$=$20714$1LXXoO
                                                       g$lev$28624$1LXXoO
                                                       '0)
                                                   (g$quasicons*$28613$1LXXoO
                                                     g$p$28630$1LXXoO
                                                     (g$quasi$28618$1LXXoO
                                                       g$q$28631$1LXXoO
                                                       g$lev$28624$1LXXoO))
                                                   (g$quasicons$28614$1LXXoO
                                                     (g$quasicons$28614$1LXXoO
                                                       (g$datum$28578$1LXXoO
                                                         'unquote)
                                                       (g$quasi$28618$1LXXoO
                                                         g$p$28630$1LXXoO
                                                         (- g$lev$28624$1LXXoO
                                                            '1)))
                                                     (g$quasi$28618$1LXXoO
                                                       g$q$28631$1LXXoO
                                                       g$lev$28624$1LXXoO)))))
                                              g$ls/false$28629$1LXXoO)
                                            ((case-lambda
                                               ((g$t$28632$1LXXoO)
                                                ((case-lambda
                                                   ((g$ls/false$28633$1LXXoO)
                                                    (if g$ls/false$28633$1LXXoO
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$28634$1LXXoO
                                                             g$q$28635$1LXXoO)
                                                           (if (g$=$20714$1LXXoO
                                                                 g$lev$28624$1LXXoO
                                                                 '0)
                                                             (g$quasiappend$28615$1LXXoO
                                                               g$p$28634$1LXXoO
                                                               (g$quasi$28618$1LXXoO
                                                                 g$q$28635$1LXXoO
                                                                 g$lev$28624$1LXXoO))
                                                             (g$quasicons$28614$1LXXoO
                                                               (g$quasicons$28614$1LXXoO
                                                                 (g$datum$28578$1LXXoO
                                                                   'unquote-splicing)
                                                                 (g$quasi$28618$1LXXoO
                                                                   g$p$28634$1LXXoO
                                                                   (- g$lev$28624$1LXXoO
                                                                      '1)))
                                                               (g$quasi$28618$1LXXoO
                                                                 g$q$28635$1LXXoO
                                                                 g$lev$28624$1LXXoO)))))
                                                        g$ls/false$28633$1LXXoO)
                                                      ((case-lambda
                                                         ((g$t$28636$1LXXoO)
                                                          ((case-lambda
                                                             ((g$ls/false$28637$1LXXoO)
                                                              (if g$ls/false$28637$1LXXoO
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$28638$1LXXoO)
                                                                     (g$quasicons$28614$1LXXoO
                                                                       (g$datum$28578$1LXXoO
                                                                         'quasiquote)
                                                                       (g$quasi$28618$1LXXoO
                                                                         (list
                                                                           g$p$28638$1LXXoO)
                                                                         (+ g$lev$28624$1LXXoO
                                                                            '1)))))
                                                                  g$ls/false$28637$1LXXoO)
                                                                ((case-lambda
                                                                   ((g$t$28639$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$ls/false$28640$1LXXoO)
                                                                        (if g$ls/false$28640$1LXXoO
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$28641$1LXXoO
                                                                                 g$q$28642$1LXXoO)
                                                                               (g$quasicons$28614$1LXXoO
                                                                                 (g$quasi$28618$1LXXoO
                                                                                   g$p$28641$1LXXoO
                                                                                   g$lev$28624$1LXXoO)
                                                                                 (g$quasi$28618$1LXXoO
                                                                                   g$q$28642$1LXXoO
                                                                                   g$lev$28624$1LXXoO))))
                                                                            g$ls/false$28640$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$t$28643$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$28644$1LXXoO)
                                                                                  (if (if g$ls/false$28644$1LXXoO
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$28645$1LXXoO)
                                                                                               (not (g$stx?$27065$1LXXoO
                                                                                                      g$x$28645$1LXXoO))))
                                                                                            g$ls/false$28644$1LXXoO))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$28646$1LXXoO)
                                                                                         (g$quasivector$28616$1LXXoO
                                                                                           (g$vquasi$28617$1LXXoO
                                                                                             g$x$28646$1LXXoO
                                                                                             g$lev$28624$1LXXoO))))
                                                                                      g$ls/false$28644$1LXXoO)
                                                                                    ((case-lambda
                                                                                       ((g$t$28647$1LXXoO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$28648$1LXXoO)
                                                                                            (if g$ls/false$28648$1LXXoO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$28649$1LXXoO)
                                                                                                   (list
                                                                                                     (g$scheme-stx$27534$1LXXoO
                                                                                                       'quote)
                                                                                                     g$p$28649$1LXXoO)))
                                                                                                g$ls/false$28648$1LXXoO)
                                                                                              (g$syntax-violation$27710$1LXXoO
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$28647$1LXXoO))))
                                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                                           g$t$28647$1LXXoO
                                                                                           'any))))
                                                                                     g$t$28643$1LXXoO))))
                                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                                 g$t$28643$1LXXoO
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$28639$1LXXoO))))
                                                                     (g$syntax-dispatch$27591$1LXXoO
                                                                       g$t$28639$1LXXoO
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$28636$1LXXoO))))
                                                           (g$syntax-dispatch$27591$1LXXoO
                                                             g$t$28636$1LXXoO
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$28632$1LXXoO))))
                                                 (g$syntax-dispatch$27591$1LXXoO
                                                   g$t$28632$1LXXoO
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$28628$1LXXoO))))
                                       (g$syntax-dispatch$27591$1LXXoO
                                         g$t$28628$1LXXoO
                                         '((#(scheme-id unquote)
                                            .
                                            each-any)
                                           .
                                           any)))))
                                   g$t$28625$1LXXoO))))
                             (g$syntax-dispatch$27591$1LXXoO
                               g$t$28625$1LXXoO
                               '(#(scheme-id unquote) any)))))
                         g$p$28623$1LXXoO)))))
           (case-lambda
             ((g$x$28619$1LXXoO)
              ((case-lambda
                 ((g$t$28620$1LXXoO)
                  ((case-lambda
                     ((g$ls/false$28621$1LXXoO)
                      (if g$ls/false$28621$1LXXoO
                        (apply
                          (case-lambda
                            ((g$e$28622$1LXXoO)
                             (g$quasi$28618$1LXXoO
                               g$e$28622$1LXXoO
                               '0)))
                          g$ls/false$28621$1LXXoO)
                        (g$syntax-violation$27710$1LXXoO
                          '#f
                          '"invalid syntax"
                          g$t$28620$1LXXoO))))
                   (g$syntax-dispatch$27591$1LXXoO
                     g$t$28620$1LXXoO
                     '(_ any)))))
               g$x$28619$1LXXoO))))))))
   (g$quasisyntax-macro$27583$1LXXoO
     g$quasisyntax-macro$31179$1LXXoO
     ((case-lambda
        (()
         (letrec* ((g$quasi$28729$1LXXoO
                     (case-lambda
                       ((g$p$28743$1LXXoO g$lev$28744$1LXXoO)
                        ((case-lambda
                           ((g$t$28745$1LXXoO)
                            ((case-lambda
                               ((g$ls/false$28746$1LXXoO)
                                (if g$ls/false$28746$1LXXoO
                                  (apply
                                    (case-lambda
                                      ((g$p$28747$1LXXoO)
                                       (if (g$=$20714$1LXXoO
                                             g$lev$28744$1LXXoO
                                             '0)
                                         ((case-lambda
                                            ((g$g$28748$1LXXoO)
                                             (values
                                               (list g$g$28748$1LXXoO)
                                               (list g$p$28747$1LXXoO)
                                               g$g$28748$1LXXoO)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$28729$1LXXoO
                                                g$p$28747$1LXXoO
                                                (- g$lev$28744$1LXXoO
                                                   '1))))
                                           (case-lambda
                                             ((g$lhs*$28752$1LXXoO
                                                g$rhs*$28753$1LXXoO
                                                g$p$28754$1LXXoO)
                                              ((case-lambda
                                                 ((g$p$28755$1LXXoO
                                                    g$rhs*$28756$1LXXoO
                                                    g$lhs*$28757$1LXXoO)
                                                  (values
                                                    g$lhs*$28757$1LXXoO
                                                    g$rhs*$28756$1LXXoO
                                                    (list
                                                      'unsyntax
                                                      g$p$28755$1LXXoO))))
                                               g$p$28754$1LXXoO
                                               g$rhs*$28753$1LXXoO
                                               g$lhs*$28752$1LXXoO)))))))
                                    g$ls/false$28746$1LXXoO)
                                  ((case-lambda
                                     ((g$t$28758$1LXXoO)
                                      ((case-lambda
                                         ((g$ls/false$28759$1LXXoO)
                                          (if (if g$ls/false$28759$1LXXoO
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (g$=$20714$1LXXoO
                                                         g$lev$28744$1LXXoO
                                                         '0)))
                                                    g$ls/false$28759$1LXXoO))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$27710$1LXXoO
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$28743$1LXXoO)))
                                              g$ls/false$28759$1LXXoO)
                                            ((case-lambda
                                               ((g$t$28760$1LXXoO)
                                                ((case-lambda
                                                   ((g$ls/false$28761$1LXXoO)
                                                    (if g$ls/false$28761$1LXXoO
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$28762$1LXXoO
                                                             g$q$28763$1LXXoO)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$28729$1LXXoO
                                                                  g$q$28763$1LXXoO
                                                                  g$lev$28744$1LXXoO)))
                                                             (case-lambda
                                                               ((g$lhs*$28767$1LXXoO
                                                                  g$rhs*$28768$1LXXoO
                                                                  g$q$28769$1LXXoO)
                                                                ((case-lambda
                                                                   ((g$q$28770$1LXXoO
                                                                      g$rhs*$28771$1LXXoO
                                                                      g$lhs*$28772$1LXXoO)
                                                                    (if (g$=$20714$1LXXoO
                                                                          g$lev$28744$1LXXoO
                                                                          '0)
                                                                      ((case-lambda
                                                                         ((g$g*$28773$1LXXoO)
                                                                          (values
                                                                            (append
                                                                              g$g*$28773$1LXXoO
                                                                              g$lhs*$28772$1LXXoO)
                                                                            (append
                                                                              g$p*$28762$1LXXoO
                                                                              g$rhs*$28771$1LXXoO)
                                                                            (append
                                                                              g$g*$28773$1LXXoO
                                                                              g$q$28770$1LXXoO))))
                                                                       (g$map$19225$1LXXoO
                                                                         (case-lambda
                                                                           ((g$x$28774$1LXXoO)
                                                                            (gensym)))
                                                                         g$p*$28762$1LXXoO))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$28729$1LXXoO
                                                                             g$p*$28762$1LXXoO
                                                                             (- g$lev$28744$1LXXoO
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$28778$1LXXoO
                                                                             g$rhs2*$28779$1LXXoO
                                                                             g$p*$28780$1LXXoO)
                                                                           ((case-lambda
                                                                              ((g$p*$28781$1LXXoO
                                                                                 g$rhs2*$28782$1LXXoO
                                                                                 g$lhs2*$28783$1LXXoO)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$28783$1LXXoO
                                                                                   g$lhs*$28772$1LXXoO)
                                                                                 (append
                                                                                   g$rhs2*$28782$1LXXoO
                                                                                   g$rhs*$28771$1LXXoO)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$28781$1LXXoO)
                                                                                   g$q$28770$1LXXoO))))
                                                                            g$p*$28780$1LXXoO
                                                                            g$rhs2*$28779$1LXXoO
                                                                            g$lhs2*$28778$1LXXoO)))))))
                                                                 g$q$28769$1LXXoO
                                                                 g$rhs*$28768$1LXXoO
                                                                 g$lhs*$28767$1LXXoO))))))
                                                        g$ls/false$28761$1LXXoO)
                                                      ((case-lambda
                                                         ((g$t$28784$1LXXoO)
                                                          ((case-lambda
                                                             ((g$ls/false$28785$1LXXoO)
                                                              (if g$ls/false$28785$1LXXoO
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$28786$1LXXoO
                                                                       g$q$28787$1LXXoO)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$28729$1LXXoO
                                                                            g$q$28787$1LXXoO
                                                                            g$lev$28744$1LXXoO)))
                                                                       (case-lambda
                                                                         ((g$lhs*$28791$1LXXoO
                                                                            g$rhs*$28792$1LXXoO
                                                                            g$q$28793$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$q$28794$1LXXoO
                                                                                g$rhs*$28795$1LXXoO
                                                                                g$lhs*$28796$1LXXoO)
                                                                              (if (g$=$20714$1LXXoO
                                                                                    g$lev$28744$1LXXoO
                                                                                    '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$28797$1LXXoO)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$19225$1LXXoO
                                                                                          (case-lambda
                                                                                            ((g$g$28798$1LXXoO)
                                                                                             (cons
                                                                                               g$g$28798$1LXXoO
                                                                                               '(...))))
                                                                                          g$g*$28797$1LXXoO)
                                                                                        g$lhs*$28796$1LXXoO)
                                                                                      (append
                                                                                        g$p*$28786$1LXXoO
                                                                                        g$rhs*$28795$1LXXoO)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$19225$1LXXoO
                                                                                            (case-lambda
                                                                                              ((g$g$28799$1LXXoO)
                                                                                               (cons
                                                                                                 g$g$28799$1LXXoO
                                                                                                 '(...))))
                                                                                            g$g*$28797$1LXXoO))
                                                                                        g$q$28794$1LXXoO))))
                                                                                 (g$map$19225$1LXXoO
                                                                                   (case-lambda
                                                                                     ((g$x$28800$1LXXoO)
                                                                                      (gensym)))
                                                                                   g$p*$28786$1LXXoO))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$28729$1LXXoO
                                                                                       g$p*$28786$1LXXoO
                                                                                       (- g$lev$28744$1LXXoO
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$28804$1LXXoO
                                                                                       g$rhs2*$28805$1LXXoO
                                                                                       g$p*$28806$1LXXoO)
                                                                                     ((case-lambda
                                                                                        ((g$p*$28807$1LXXoO
                                                                                           g$rhs2*$28808$1LXXoO
                                                                                           g$lhs2*$28809$1LXXoO)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$28809$1LXXoO
                                                                                             g$lhs*$28796$1LXXoO)
                                                                                           (append
                                                                                             g$rhs2*$28808$1LXXoO
                                                                                             g$rhs*$28795$1LXXoO)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$28807$1LXXoO)
                                                                                             g$q$28794$1LXXoO))))
                                                                                      g$p*$28806$1LXXoO
                                                                                      g$rhs2*$28805$1LXXoO
                                                                                      g$lhs2*$28804$1LXXoO)))))))
                                                                           g$q$28793$1LXXoO
                                                                           g$rhs*$28792$1LXXoO
                                                                           g$lhs*$28791$1LXXoO))))))
                                                                  g$ls/false$28785$1LXXoO)
                                                                ((case-lambda
                                                                   ((g$t$28810$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$ls/false$28811$1LXXoO)
                                                                        (if (if g$ls/false$28811$1LXXoO
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$=$20714$1LXXoO
                                                                                       g$lev$28744$1LXXoO
                                                                                       '0)))
                                                                                  g$ls/false$28811$1LXXoO))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$27710$1LXXoO
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$28743$1LXXoO)))
                                                                            g$ls/false$28811$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$t$28812$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$28813$1LXXoO)
                                                                                  (if g$ls/false$28813$1LXXoO
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$28814$1LXXoO)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$28729$1LXXoO
                                                                                                g$p$28814$1LXXoO
                                                                                                (+ g$lev$28744$1LXXoO
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$28818$1LXXoO
                                                                                                g$rhs*$28819$1LXXoO
                                                                                                g$p$28820$1LXXoO)
                                                                                              ((case-lambda
                                                                                                 ((g$p$28821$1LXXoO
                                                                                                    g$rhs*$28822$1LXXoO
                                                                                                    g$lhs*$28823$1LXXoO)
                                                                                                  (values
                                                                                                    g$lhs*$28823$1LXXoO
                                                                                                    g$rhs*$28822$1LXXoO
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$28821$1LXXoO))))
                                                                                               g$p$28820$1LXXoO
                                                                                               g$rhs*$28819$1LXXoO
                                                                                               g$lhs*$28818$1LXXoO))))))
                                                                                      g$ls/false$28813$1LXXoO)
                                                                                    ((case-lambda
                                                                                       ((g$t$28824$1LXXoO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$28825$1LXXoO)
                                                                                            (if g$ls/false$28825$1LXXoO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$28826$1LXXoO
                                                                                                     g$q$28827$1LXXoO)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$28729$1LXXoO
                                                                                                          g$p$28826$1LXXoO
                                                                                                          g$lev$28744$1LXXoO)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$28834$1LXXoO
                                                                                                          g$rhs*$28835$1LXXoO
                                                                                                          g$p$28836$1LXXoO)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$28729$1LXXoO
                                                                                                               g$q$28827$1LXXoO
                                                                                                               g$lev$28744$1LXXoO)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$28837$1LXXoO
                                                                                                               g$rhs2*$28838$1LXXoO
                                                                                                               g$q$28839$1LXXoO)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$28840$1LXXoO
                                                                                                                   g$rhs2*$28841$1LXXoO
                                                                                                                   g$lhs2*$28842$1LXXoO
                                                                                                                   g$p$28843$1LXXoO
                                                                                                                   g$rhs*$28844$1LXXoO
                                                                                                                   g$lhs*$28845$1LXXoO)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$28842$1LXXoO
                                                                                                                     g$lhs*$28845$1LXXoO)
                                                                                                                   (append
                                                                                                                     g$rhs2*$28841$1LXXoO
                                                                                                                     g$rhs*$28844$1LXXoO)
                                                                                                                   (cons
                                                                                                                     g$p$28843$1LXXoO
                                                                                                                     g$q$28840$1LXXoO))))
                                                                                                              g$q$28839$1LXXoO
                                                                                                              g$rhs2*$28838$1LXXoO
                                                                                                              g$lhs2*$28837$1LXXoO
                                                                                                              g$p$28836$1LXXoO
                                                                                                              g$rhs*$28835$1LXXoO
                                                                                                              g$lhs*$28834$1LXXoO)))))))))
                                                                                                g$ls/false$28825$1LXXoO)
                                                                                              ((case-lambda
                                                                                                 ((g$t$28846$1LXXoO)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$28847$1LXXoO)
                                                                                                      (if g$ls/false$28847$1LXXoO
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$28848$1LXXoO)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$28729$1LXXoO
                                                                                                                    g$x*$28848$1LXXoO
                                                                                                                    g$lev$28744$1LXXoO)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$28852$1LXXoO
                                                                                                                    g$rhs*$28853$1LXXoO
                                                                                                                    g$x*$28854$1LXXoO)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$28855$1LXXoO
                                                                                                                        g$rhs*$28856$1LXXoO
                                                                                                                        g$lhs*$28857$1LXXoO)
                                                                                                                      (values
                                                                                                                        g$lhs*$28857$1LXXoO
                                                                                                                        g$rhs*$28856$1LXXoO
                                                                                                                        (g$list->vector$20068$1LXXoO
                                                                                                                          g$x*$28855$1LXXoO))))
                                                                                                                   g$x*$28854$1LXXoO
                                                                                                                   g$rhs*$28853$1LXXoO
                                                                                                                   g$lhs*$28852$1LXXoO))))))
                                                                                                          g$ls/false$28847$1LXXoO)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$28858$1LXXoO)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$28859$1LXXoO)
                                                                                                                (if g$ls/false$28859$1LXXoO
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$28743$1LXXoO)))
                                                                                                                    g$ls/false$28859$1LXXoO)
                                                                                                                  (g$syntax-violation$27710$1LXXoO
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$28858$1LXXoO))))
                                                                                                             (g$syntax-dispatch$27591$1LXXoO
                                                                                                               g$t$28858$1LXXoO
                                                                                                               '_))))
                                                                                                         g$t$28846$1LXXoO))))
                                                                                                   (g$syntax-dispatch$27591$1LXXoO
                                                                                                     g$t$28846$1LXXoO
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$28824$1LXXoO))))
                                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                                           g$t$28824$1LXXoO
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$28812$1LXXoO))))
                                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                                 g$t$28812$1LXXoO
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$28810$1LXXoO))))
                                                                     (g$syntax-dispatch$27591$1LXXoO
                                                                       g$t$28810$1LXXoO
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$28784$1LXXoO))))
                                                           (g$syntax-dispatch$27591$1LXXoO
                                                             g$t$28784$1LXXoO
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$28760$1LXXoO))))
                                                 (g$syntax-dispatch$27591$1LXXoO
                                                   g$t$28760$1LXXoO
                                                   '((#(scheme-id
                                                        unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$28758$1LXXoO))))
                                       (g$syntax-dispatch$27591$1LXXoO
                                         g$t$28758$1LXXoO
                                         '#(scheme-id unsyntax)))))
                                   g$t$28745$1LXXoO))))
                             (g$syntax-dispatch$27591$1LXXoO
                               g$t$28745$1LXXoO
                               '(#(scheme-id unsyntax) any)))))
                         g$p$28743$1LXXoO)))))
           (case-lambda
             ((g$x$28730$1LXXoO)
              ((case-lambda
                 ((g$t$28731$1LXXoO)
                  ((case-lambda
                     ((g$ls/false$28732$1LXXoO)
                      (if g$ls/false$28732$1LXXoO
                        (apply
                          (case-lambda
                            ((g$e$28733$1LXXoO)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$quasi$28729$1LXXoO
                                    g$e$28733$1LXXoO
                                    '0)))
                               (case-lambda
                                 ((g$lhs*$28737$1LXXoO
                                    g$rhs*$28738$1LXXoO
                                    g$v$28739$1LXXoO)
                                  ((case-lambda
                                     ((g$v$28740$1LXXoO
                                        g$rhs*$28741$1LXXoO
                                        g$lhs*$28742$1LXXoO)
                                      (g$bless$27554$1LXXoO
                                        (list
                                          'syntax-case
                                          (cons
                                            'list
                                            g$rhs*$28741$1LXXoO)
                                          '()
                                          (list
                                            g$lhs*$28742$1LXXoO
                                            (list
                                              'syntax
                                              g$v$28740$1LXXoO))))))
                                   g$v$28739$1LXXoO
                                   g$rhs*$28738$1LXXoO
                                   g$lhs*$28737$1LXXoO))))))
                          g$ls/false$28732$1LXXoO)
                        (g$syntax-violation$27710$1LXXoO
                          '#f
                          '"invalid syntax"
                          g$t$28731$1LXXoO))))
                   (g$syntax-dispatch$27591$1LXXoO
                     g$t$28731$1LXXoO
                     '(_ any)))))
               g$x$28730$1LXXoO))))))))
   (g$define-struct-macro$27584$1LXXoO
     g$define-struct-macro$31180$1LXXoO
     (case-lambda
       ((g$stx$28860$1LXXoO)
        (g$syntax-violation$27710$1LXXoO
          '#f
          '"define-struct not supported"
          g$stx$28860$1LXXoO))))
   (g$define-record-type-macro$27585$1LXXoO
     g$define-record-type-macro$31181$1LXXoO
     (case-lambda
       ((g$x$28861$1LXXoO)
        (letrec* ((g$id$28862$1LXXoO
                    (case-lambda
                      ((g$ctxt$29114$1LXXoO . g$str*$29115$1LXXoO)
                       (g$datum->syntax$27712$1LXXoO
                         g$ctxt$29114$1LXXoO
                         (string->symbol
                           (apply
                             string-append
                             (g$map$19225$1LXXoO
                               (case-lambda
                                 ((g$x$29116$1LXXoO)
                                  (if (g$symbol?$20057$1LXXoO
                                        g$x$29116$1LXXoO)
                                    (symbol->string g$x$29116$1LXXoO)
                                    (if (string? g$x$29116$1LXXoO)
                                      g$x$29116$1LXXoO
                                      (begin
                                        '#f
                                        (assertion-violation
                                          'define-record-type
                                          '"BUG"))))))
                               g$str*$29115$1LXXoO)))))))
                  (g$get-record-name$28863$1LXXoO
                    (case-lambda
                      ((g$spec$29105$1LXXoO)
                       ((case-lambda
                          ((g$t$29106$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$29107$1LXXoO)
                               (if g$ls/false$29107$1LXXoO
                                 (apply
                                   (case-lambda
                                     ((g$foo$29108$1LXXoO
                                        g$make-foo$29109$1LXXoO
                                        g$foo?$29110$1LXXoO)
                                      g$foo$29108$1LXXoO))
                                   g$ls/false$29107$1LXXoO)
                                 ((case-lambda
                                    ((g$t$29111$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$29112$1LXXoO)
                                         (if g$ls/false$29112$1LXXoO
                                           (apply
                                             (case-lambda
                                               ((g$foo$29113$1LXXoO)
                                                g$foo$29113$1LXXoO))
                                             g$ls/false$29112$1LXXoO)
                                           (g$syntax-violation$27710$1LXXoO
                                             '#f
                                             '"invalid syntax"
                                             g$t$29111$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$29111$1LXXoO
                                        'any))))
                                  g$t$29106$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$29106$1LXXoO
                              '(any any any)))))
                        g$spec$29105$1LXXoO))))
                  (g$get-record-constructor-name$28864$1LXXoO
                    (case-lambda
                      ((g$spec$29095$1LXXoO)
                       ((case-lambda
                          ((g$t$29096$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$29097$1LXXoO)
                               (if g$ls/false$29097$1LXXoO
                                 (apply
                                   (case-lambda
                                     ((g$foo$29098$1LXXoO
                                        g$make-foo$29099$1LXXoO
                                        g$foo?$29100$1LXXoO)
                                      g$make-foo$29099$1LXXoO))
                                   g$ls/false$29097$1LXXoO)
                                 ((case-lambda
                                    ((g$t$29101$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$29102$1LXXoO)
                                         (if (if g$ls/false$29102$1LXXoO
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$29103$1LXXoO)
                                                      (g$id?$27093$1LXXoO
                                                        g$foo$29103$1LXXoO)))
                                                   g$ls/false$29102$1LXXoO))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$29104$1LXXoO)
                                                (g$id$28862$1LXXoO
                                                  g$foo$29104$1LXXoO
                                                  '"make-"
                                                  (g$stx->datum$27104$1LXXoO
                                                    g$foo$29104$1LXXoO))))
                                             g$ls/false$29102$1LXXoO)
                                           (g$syntax-violation$27710$1LXXoO
                                             '#f
                                             '"invalid syntax"
                                             g$t$29101$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$29101$1LXXoO
                                        'any))))
                                  g$t$29096$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$29096$1LXXoO
                              '(any any any)))))
                        g$spec$29095$1LXXoO))))
                  (g$get-record-predicate-name$28865$1LXXoO
                    (case-lambda
                      ((g$spec$29085$1LXXoO)
                       ((case-lambda
                          ((g$t$29086$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$29087$1LXXoO)
                               (if g$ls/false$29087$1LXXoO
                                 (apply
                                   (case-lambda
                                     ((g$foo$29088$1LXXoO
                                        g$make-foo$29089$1LXXoO
                                        g$foo?$29090$1LXXoO)
                                      g$foo?$29090$1LXXoO))
                                   g$ls/false$29087$1LXXoO)
                                 ((case-lambda
                                    ((g$t$29091$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$29092$1LXXoO)
                                         (if (if g$ls/false$29092$1LXXoO
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$29093$1LXXoO)
                                                      (g$id?$27093$1LXXoO
                                                        g$foo$29093$1LXXoO)))
                                                   g$ls/false$29092$1LXXoO))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$29094$1LXXoO)
                                                (g$id$28862$1LXXoO
                                                  g$foo$29094$1LXXoO
                                                  (g$stx->datum$27104$1LXXoO
                                                    g$foo$29094$1LXXoO)
                                                  '"?")))
                                             g$ls/false$29092$1LXXoO)
                                           (g$syntax-violation$27710$1LXXoO
                                             '#f
                                             '"invalid syntax"
                                             g$t$29091$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$29091$1LXXoO
                                        'any))))
                                  g$t$29086$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$29086$1LXXoO
                              '(any any any)))))
                        g$spec$29085$1LXXoO))))
                  (g$get-clause$28866$1LXXoO
                    (case-lambda
                      ((g$id$29076$1LXXoO g$ls$29077$1LXXoO)
                       ((case-lambda
                          ((g$t$29078$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$29079$1LXXoO)
                               (if g$ls/false$29079$1LXXoO
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$29079$1LXXoO)
                                 ((case-lambda
                                    ((g$t$29080$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$29081$1LXXoO)
                                         (if g$ls/false$29081$1LXXoO
                                           (apply
                                             (case-lambda
                                               ((g$x$29082$1LXXoO
                                                  g$rest$29083$1LXXoO
                                                  g$ls$29084$1LXXoO)
                                                (if (g$free-id=?$27097$1LXXoO
                                                      (g$bless$27554$1LXXoO
                                                        g$id$29076$1LXXoO)
                                                      g$x$29082$1LXXoO)
                                                  (cons
                                                    g$x$29082$1LXXoO
                                                    g$rest$29083$1LXXoO)
                                                  (g$get-clause$28866$1LXXoO
                                                    g$id$29076$1LXXoO
                                                    g$ls$29084$1LXXoO))))
                                             g$ls/false$29081$1LXXoO)
                                           (g$syntax-violation$27710$1LXXoO
                                             '#f
                                             '"invalid syntax"
                                             g$t$29080$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$29080$1LXXoO
                                        '((any . any) . any)))))
                                  g$t$29078$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$29078$1LXXoO
                              '()))))
                        g$ls$29077$1LXXoO))))
                  (g$foo-rtd-code$28867$1LXXoO
                    (case-lambda
                      ((g$name$29035$1LXXoO
                         g$clause*$29036$1LXXoO
                         g$parent-rtd-code$29037$1LXXoO)
                       (letrec* ((g$convert-field-spec*$29038$1LXXoO
                                   (case-lambda
                                     ((g$ls$29063$1LXXoO)
                                      (g$list->vector$20068$1LXXoO
                                        (g$map$19225$1LXXoO
                                          (case-lambda
                                            ((g$x$29064$1LXXoO)
                                             ((case-lambda
                                                ((g$t$29065$1LXXoO)
                                                 ((case-lambda
                                                    ((g$ls/false$29066$1LXXoO)
                                                     (if g$ls/false$29066$1LXXoO
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$29067$1LXXoO
                                                              g$rest$29068$1LXXoO)
                                                            (list
                                                              'mutable
                                                              g$name$29067$1LXXoO)))
                                                         g$ls/false$29066$1LXXoO)
                                                       ((case-lambda
                                                          ((g$t$29069$1LXXoO)
                                                           ((case-lambda
                                                              ((g$ls/false$29070$1LXXoO)
                                                               (if g$ls/false$29070$1LXXoO
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$29071$1LXXoO
                                                                        g$rest$29072$1LXXoO)
                                                                      (list
                                                                        'immutable
                                                                        g$name$29071$1LXXoO)))
                                                                   g$ls/false$29070$1LXXoO)
                                                                 ((case-lambda
                                                                    ((g$t$29073$1LXXoO)
                                                                     ((case-lambda
                                                                        ((g$ls/false$29074$1LXXoO)
                                                                         (if g$ls/false$29074$1LXXoO
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$29075$1LXXoO)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$29075$1LXXoO)))
                                                                             g$ls/false$29074$1LXXoO)
                                                                           (g$syntax-violation$27710$1LXXoO
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$29073$1LXXoO))))
                                                                      (g$syntax-dispatch$27591$1LXXoO
                                                                        g$t$29073$1LXXoO
                                                                        'any))))
                                                                  g$t$29069$1LXXoO))))
                                                            (g$syntax-dispatch$27591$1LXXoO
                                                              g$t$29069$1LXXoO
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$29065$1LXXoO))))
                                                  (g$syntax-dispatch$27591$1LXXoO
                                                    g$t$29065$1LXXoO
                                                    '(#(scheme-id
                                                        mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$29064$1LXXoO)))
                                          g$ls$29063$1LXXoO))))))
                         ((case-lambda
                            ((g$uid-code$29039$1LXXoO
                               g$sealed?$29040$1LXXoO
                               g$opaque?$29041$1LXXoO
                               g$fields$29042$1LXXoO)
                             (g$bless$27554$1LXXoO
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$29035$1LXXoO)
                                 g$parent-rtd-code$29037$1LXXoO
                                 g$uid-code$29039$1LXXoO
                                 g$sealed?$29040$1LXXoO
                                 g$opaque?$29041$1LXXoO
                                 g$fields$29042$1LXXoO))))
                          ((case-lambda
                             ((g$t$29043$1LXXoO)
                              ((case-lambda
                                 ((g$ls/false$29044$1LXXoO)
                                  (if g$ls/false$29044$1LXXoO
                                    (apply
                                      (case-lambda
                                        (() (list 'quote (gensym))))
                                      g$ls/false$29044$1LXXoO)
                                    ((case-lambda
                                       ((g$t$29045$1LXXoO)
                                        ((case-lambda
                                           ((g$ls/false$29046$1LXXoO)
                                            (if g$ls/false$29046$1LXXoO
                                              (apply
                                                (case-lambda
                                                  ((g$uid$29047$1LXXoO)
                                                   (list
                                                     'quote
                                                     g$uid$29047$1LXXoO)))
                                                g$ls/false$29046$1LXXoO)
                                              ((case-lambda
                                                 ((g$t$29048$1LXXoO)
                                                  ((case-lambda
                                                     ((g$ls/false$29049$1LXXoO)
                                                      (if g$ls/false$29049$1LXXoO
                                                        (apply
                                                          (case-lambda
                                                            (() '#f))
                                                          g$ls/false$29049$1LXXoO)
                                                        (g$syntax-violation$27710$1LXXoO
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$29048$1LXXoO))))
                                                   (g$syntax-dispatch$27591$1LXXoO
                                                     g$t$29048$1LXXoO
                                                     '_))))
                                               g$t$29045$1LXXoO))))
                                         (g$syntax-dispatch$27591$1LXXoO
                                           g$t$29045$1LXXoO
                                           '(_ any)))))
                                     g$t$29043$1LXXoO))))
                               (g$syntax-dispatch$27591$1LXXoO
                                 g$t$29043$1LXXoO
                                 '(_)))))
                           (g$get-clause$28866$1LXXoO
                             'nongenerative
                             g$clause*$29036$1LXXoO))
                          ((case-lambda
                             ((g$t$29050$1LXXoO)
                              ((case-lambda
                                 ((g$ls/false$29051$1LXXoO)
                                  (if g$ls/false$29051$1LXXoO
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$29051$1LXXoO)
                                    ((case-lambda
                                       ((g$t$29052$1LXXoO)
                                        ((case-lambda
                                           ((g$ls/false$29053$1LXXoO)
                                            (if g$ls/false$29053$1LXXoO
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$29053$1LXXoO)
                                              (g$syntax-violation$27710$1LXXoO
                                                '#f
                                                '"invalid syntax"
                                                g$t$29052$1LXXoO))))
                                         (g$syntax-dispatch$27591$1LXXoO
                                           g$t$29052$1LXXoO
                                           '_))))
                                     g$t$29050$1LXXoO))))
                               (g$syntax-dispatch$27591$1LXXoO
                                 g$t$29050$1LXXoO
                                 '(_ #(atom #t))))))
                           (g$get-clause$28866$1LXXoO
                             'sealed
                             g$clause*$29036$1LXXoO))
                          ((case-lambda
                             ((g$t$29054$1LXXoO)
                              ((case-lambda
                                 ((g$ls/false$29055$1LXXoO)
                                  (if g$ls/false$29055$1LXXoO
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$29055$1LXXoO)
                                    ((case-lambda
                                       ((g$t$29056$1LXXoO)
                                        ((case-lambda
                                           ((g$ls/false$29057$1LXXoO)
                                            (if g$ls/false$29057$1LXXoO
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$29057$1LXXoO)
                                              (g$syntax-violation$27710$1LXXoO
                                                '#f
                                                '"invalid syntax"
                                                g$t$29056$1LXXoO))))
                                         (g$syntax-dispatch$27591$1LXXoO
                                           g$t$29056$1LXXoO
                                           '_))))
                                     g$t$29054$1LXXoO))))
                               (g$syntax-dispatch$27591$1LXXoO
                                 g$t$29054$1LXXoO
                                 '(_ #(atom #t))))))
                           (g$get-clause$28866$1LXXoO
                             'opaque
                             g$clause*$29036$1LXXoO))
                          ((case-lambda
                             ((g$t$29058$1LXXoO)
                              ((case-lambda
                                 ((g$ls/false$29059$1LXXoO)
                                  (if g$ls/false$29059$1LXXoO
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$29060$1LXXoO)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$29038$1LXXoO
                                             g$field-spec*$29060$1LXXoO))))
                                      g$ls/false$29059$1LXXoO)
                                    ((case-lambda
                                       ((g$t$29061$1LXXoO)
                                        ((case-lambda
                                           ((g$ls/false$29062$1LXXoO)
                                            (if g$ls/false$29062$1LXXoO
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$29062$1LXXoO)
                                              (g$syntax-violation$27710$1LXXoO
                                                '#f
                                                '"invalid syntax"
                                                g$t$29061$1LXXoO))))
                                         (g$syntax-dispatch$27591$1LXXoO
                                           g$t$29061$1LXXoO
                                           '_))))
                                     g$t$29058$1LXXoO))))
                               (g$syntax-dispatch$27591$1LXXoO
                                 g$t$29058$1LXXoO
                                 '(_ . each-any)))))
                           (g$get-clause$28866$1LXXoO
                             'fields
                             g$clause*$29036$1LXXoO)))))))
                  (g$parent-rtd-code$28868$1LXXoO
                    (case-lambda
                      ((g$clause*$29023$1LXXoO)
                       ((case-lambda
                          ((g$t$29024$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$29025$1LXXoO)
                               (if g$ls/false$29025$1LXXoO
                                 (apply
                                   (case-lambda
                                     ((g$name$29026$1LXXoO)
                                      (list
                                        'record-type-descriptor
                                        g$name$29026$1LXXoO)))
                                   g$ls/false$29025$1LXXoO)
                                 ((case-lambda
                                    ((g$t$29027$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$29028$1LXXoO)
                                         (if g$ls/false$29028$1LXXoO
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$29029$1LXXoO)
                                                    ((case-lambda
                                                       ((g$ls/false$29030$1LXXoO)
                                                        (if g$ls/false$29030$1LXXoO
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$29031$1LXXoO
                                                                 g$rcd$29032$1LXXoO)
                                                               g$rtd$29031$1LXXoO))
                                                            g$ls/false$29030$1LXXoO)
                                                          ((case-lambda
                                                             ((g$t$29033$1LXXoO)
                                                              ((case-lambda
                                                                 ((g$ls/false$29034$1LXXoO)
                                                                  (if g$ls/false$29034$1LXXoO
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$29034$1LXXoO)
                                                                    (g$syntax-violation$27710$1LXXoO
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$29033$1LXXoO))))
                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                 g$t$29033$1LXXoO
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$29029$1LXXoO))))
                                                     (g$syntax-dispatch$27591$1LXXoO
                                                       g$t$29029$1LXXoO
                                                       '(_ any any)))))
                                                 (g$get-clause$28866$1LXXoO
                                                   'parent-rtd
                                                   g$clause*$29023$1LXXoO))))
                                             g$ls/false$29028$1LXXoO)
                                           (g$syntax-violation$27710$1LXXoO
                                             '#f
                                             '"invalid syntax"
                                             g$t$29027$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$29027$1LXXoO
                                        '#(atom #f)))))
                                  g$t$29024$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$29024$1LXXoO
                              '(_ any)))))
                        (g$get-clause$28866$1LXXoO
                          'parent
                          g$clause*$29023$1LXXoO)))))
                  (g$parent-rcd-code$28869$1LXXoO
                    (case-lambda
                      ((g$clause*$29011$1LXXoO)
                       ((case-lambda
                          ((g$t$29012$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$29013$1LXXoO)
                               (if g$ls/false$29013$1LXXoO
                                 (apply
                                   (case-lambda
                                     ((g$name$29014$1LXXoO)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$29014$1LXXoO)))
                                   g$ls/false$29013$1LXXoO)
                                 ((case-lambda
                                    ((g$t$29015$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$29016$1LXXoO)
                                         (if g$ls/false$29016$1LXXoO
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$29017$1LXXoO)
                                                    ((case-lambda
                                                       ((g$ls/false$29018$1LXXoO)
                                                        (if g$ls/false$29018$1LXXoO
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$29019$1LXXoO
                                                                 g$rcd$29020$1LXXoO)
                                                               g$rcd$29020$1LXXoO))
                                                            g$ls/false$29018$1LXXoO)
                                                          ((case-lambda
                                                             ((g$t$29021$1LXXoO)
                                                              ((case-lambda
                                                                 ((g$ls/false$29022$1LXXoO)
                                                                  (if g$ls/false$29022$1LXXoO
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$29022$1LXXoO)
                                                                    (g$syntax-violation$27710$1LXXoO
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$29021$1LXXoO))))
                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                 g$t$29021$1LXXoO
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$29017$1LXXoO))))
                                                     (g$syntax-dispatch$27591$1LXXoO
                                                       g$t$29017$1LXXoO
                                                       '(_ any any)))))
                                                 (g$get-clause$28866$1LXXoO
                                                   'parent-rtd
                                                   g$clause*$29011$1LXXoO))))
                                             g$ls/false$29016$1LXXoO)
                                           (g$syntax-violation$27710$1LXXoO
                                             '#f
                                             '"invalid syntax"
                                             g$t$29015$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$29015$1LXXoO
                                        '#(atom #f)))))
                                  g$t$29012$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$29012$1LXXoO
                              '(_ any)))))
                        (g$get-clause$28866$1LXXoO
                          'parent
                          g$clause*$29011$1LXXoO)))))
                  (g$foo-rcd-code$28870$1LXXoO
                    (case-lambda
                      ((g$clause*$29007$1LXXoO
                         g$foo-rtd$29008$1LXXoO
                         g$protocol$29009$1LXXoO
                         g$parent-rcd-code$29010$1LXXoO)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$29008$1LXXoO
                         g$parent-rcd-code$29010$1LXXoO
                         g$protocol$29009$1LXXoO))))
                  (g$get-protocol-code$28871$1LXXoO
                    (case-lambda
                      ((g$clause*$29001$1LXXoO)
                       ((case-lambda
                          ((g$t$29002$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$29003$1LXXoO)
                               (if g$ls/false$29003$1LXXoO
                                 (apply
                                   (case-lambda
                                     ((g$expr$29004$1LXXoO)
                                      g$expr$29004$1LXXoO))
                                   g$ls/false$29003$1LXXoO)
                                 ((case-lambda
                                    ((g$t$29005$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$29006$1LXXoO)
                                         (if g$ls/false$29006$1LXXoO
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$29006$1LXXoO)
                                           (g$syntax-violation$27710$1LXXoO
                                             '#f
                                             '"invalid syntax"
                                             g$t$29005$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$29005$1LXXoO
                                        '_))))
                                  g$t$29002$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$29002$1LXXoO
                              '(_ any)))))
                        (g$get-clause$28866$1LXXoO
                          'protocol
                          g$clause*$29001$1LXXoO)))))
                  (g$get-fields$28872$1LXXoO
                    (case-lambda
                      ((g$clause*$28992$1LXXoO)
                       ((case-lambda
                          ((g$t$28993$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$28994$1LXXoO)
                               (if g$ls/false$28994$1LXXoO
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$28994$1LXXoO)
                                 ((case-lambda
                                    ((g$t$28995$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$28996$1LXXoO)
                                         (if g$ls/false$28996$1LXXoO
                                           (apply
                                             (case-lambda
                                               ((g$f*$28997$1LXXoO)
                                                g$f*$28997$1LXXoO))
                                             g$ls/false$28996$1LXXoO)
                                           ((case-lambda
                                              ((g$t$28998$1LXXoO)
                                               ((case-lambda
                                                  ((g$ls/false$28999$1LXXoO)
                                                   (if g$ls/false$28999$1LXXoO
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$29000$1LXXoO)
                                                          (g$get-fields$28872$1LXXoO
                                                            g$rest$29000$1LXXoO)))
                                                       g$ls/false$28999$1LXXoO)
                                                     (g$syntax-violation$27710$1LXXoO
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$28998$1LXXoO))))
                                                (g$syntax-dispatch$27591$1LXXoO
                                                  g$t$28998$1LXXoO
                                                  '(_ . any)))))
                                            g$t$28995$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$28995$1LXXoO
                                        '((#(scheme-id fields)
                                           .
                                           each-any)
                                          .
                                          _)))))
                                  g$t$28993$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$28993$1LXXoO
                              '()))))
                        g$clause*$28992$1LXXoO))))
                  (g$get-mutator-indices$28873$1LXXoO
                    (case-lambda
                      ((g$fields$28980$1LXXoO)
                       ((letrec ((g$f$28981$1LXXoO
                                   (case-lambda
                                     ((g$fields$28982$1LXXoO
                                        g$i$28983$1LXXoO)
                                      ((case-lambda
                                         ((g$t$28984$1LXXoO)
                                          ((case-lambda
                                             ((g$ls/false$28985$1LXXoO)
                                              (if g$ls/false$28985$1LXXoO
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$28985$1LXXoO)
                                                ((case-lambda
                                                   ((g$t$28986$1LXXoO)
                                                    ((case-lambda
                                                       ((g$ls/false$28987$1LXXoO)
                                                        (if g$ls/false$28987$1LXXoO
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$28988$1LXXoO)
                                                               (cons
                                                                 g$i$28983$1LXXoO
                                                                 (g$f$28981$1LXXoO
                                                                   g$rest$28988$1LXXoO
                                                                   (+ g$i$28983$1LXXoO
                                                                      '1)))))
                                                            g$ls/false$28987$1LXXoO)
                                                          ((case-lambda
                                                             ((g$t$28989$1LXXoO)
                                                              ((case-lambda
                                                                 ((g$ls/false$28990$1LXXoO)
                                                                  (if g$ls/false$28990$1LXXoO
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$28991$1LXXoO)
                                                                         (g$f$28981$1LXXoO
                                                                           g$rest$28991$1LXXoO
                                                                           (+ g$i$28983$1LXXoO
                                                                              '1))))
                                                                      g$ls/false$28990$1LXXoO)
                                                                    (g$syntax-violation$27710$1LXXoO
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$28989$1LXXoO))))
                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                 g$t$28989$1LXXoO
                                                                 '(_ .
                                                                     any)))))
                                                           g$t$28986$1LXXoO))))
                                                     (g$syntax-dispatch$27591$1LXXoO
                                                       g$t$28986$1LXXoO
                                                       '((#(scheme-id
                                                            mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$28984$1LXXoO))))
                                           (g$syntax-dispatch$27591$1LXXoO
                                             g$t$28984$1LXXoO
                                             '()))))
                                       g$fields$28982$1LXXoO)))))
                          g$f$28981$1LXXoO)
                        g$fields$28980$1LXXoO
                        '0))))
                  (g$get-mutators$28874$1LXXoO
                    (case-lambda
                      ((g$foo$28959$1LXXoO g$fields$28960$1LXXoO)
                       (letrec* ((g$gen-name$28961$1LXXoO
                                   (case-lambda
                                     ((g$x$28979$1LXXoO)
                                      (g$datum->syntax$27712$1LXXoO
                                        g$foo$28959$1LXXoO
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$27713$1LXXoO
                                                g$foo$28959$1LXXoO))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$27713$1LXXoO
                                                g$x$28979$1LXXoO))
                                            '"-set!")))))))
                         ((letrec ((g$f$28962$1LXXoO
                                     (case-lambda
                                       ((g$fields$28963$1LXXoO)
                                        ((case-lambda
                                           ((g$t$28964$1LXXoO)
                                            ((case-lambda
                                               ((g$ls/false$28965$1LXXoO)
                                                (if g$ls/false$28965$1LXXoO
                                                  (apply
                                                    (case-lambda
                                                      (() '()))
                                                    g$ls/false$28965$1LXXoO)
                                                  ((case-lambda
                                                     ((g$t$28966$1LXXoO)
                                                      ((case-lambda
                                                         ((g$ls/false$28967$1LXXoO)
                                                          (if g$ls/false$28967$1LXXoO
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$28968$1LXXoO
                                                                   g$accessor$28969$1LXXoO
                                                                   g$mutator$28970$1LXXoO
                                                                   g$rest$28971$1LXXoO)
                                                                 (cons
                                                                   g$mutator$28970$1LXXoO
                                                                   (g$f$28962$1LXXoO
                                                                     g$rest$28971$1LXXoO))))
                                                              g$ls/false$28967$1LXXoO)
                                                            ((case-lambda
                                                               ((g$t$28972$1LXXoO)
                                                                ((case-lambda
                                                                   ((g$ls/false$28973$1LXXoO)
                                                                    (if g$ls/false$28973$1LXXoO
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$28974$1LXXoO
                                                                             g$rest$28975$1LXXoO)
                                                                           (cons
                                                                             (g$gen-name$28961$1LXXoO
                                                                               g$name$28974$1LXXoO)
                                                                             (g$f$28962$1LXXoO
                                                                               g$rest$28975$1LXXoO))))
                                                                        g$ls/false$28973$1LXXoO)
                                                                      ((case-lambda
                                                                         ((g$t$28976$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$ls/false$28977$1LXXoO)
                                                                              (if g$ls/false$28977$1LXXoO
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$28978$1LXXoO)
                                                                                     (g$f$28962$1LXXoO
                                                                                       g$rest$28978$1LXXoO)))
                                                                                  g$ls/false$28977$1LXXoO)
                                                                                (g$syntax-violation$27710$1LXXoO
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$28976$1LXXoO))))
                                                                           (g$syntax-dispatch$27591$1LXXoO
                                                                             g$t$28976$1LXXoO
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$28972$1LXXoO))))
                                                                 (g$syntax-dispatch$27591$1LXXoO
                                                                   g$t$28972$1LXXoO
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$28966$1LXXoO))))
                                                       (g$syntax-dispatch$27591$1LXXoO
                                                         g$t$28966$1LXXoO
                                                         '((#(scheme-id
                                                              mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$28964$1LXXoO))))
                                             (g$syntax-dispatch$27591$1LXXoO
                                               g$t$28964$1LXXoO
                                               '()))))
                                         g$fields$28963$1LXXoO)))))
                            g$f$28962$1LXXoO)
                          g$fields$28960$1LXXoO)))))
                  (g$get-accessors$28875$1LXXoO
                    (case-lambda
                      ((g$foo$28925$1LXXoO g$fields$28926$1LXXoO)
                       (letrec* ((g$gen-name$28927$1LXXoO
                                   (case-lambda
                                     ((g$x$28958$1LXXoO)
                                      (g$datum->syntax$27712$1LXXoO
                                        g$foo$28925$1LXXoO
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$27713$1LXXoO
                                                g$foo$28925$1LXXoO))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$27713$1LXXoO
                                                g$x$28958$1LXXoO)))))))))
                         (g$map$19225$1LXXoO
                           (case-lambda
                             ((g$field$28928$1LXXoO)
                              ((case-lambda
                                 ((g$t$28929$1LXXoO)
                                  ((case-lambda
                                     ((g$ls/false$28930$1LXXoO)
                                      (if (if g$ls/false$28930$1LXXoO
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$28931$1LXXoO
                                                     g$accessor$28932$1LXXoO
                                                     g$mutator$28933$1LXXoO)
                                                   (g$id?$27093$1LXXoO
                                                     g$accessor$28932$1LXXoO)))
                                                g$ls/false$28930$1LXXoO))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$28934$1LXXoO
                                               g$accessor$28935$1LXXoO
                                               g$mutator$28936$1LXXoO)
                                             g$accessor$28935$1LXXoO))
                                          g$ls/false$28930$1LXXoO)
                                        ((case-lambda
                                           ((g$t$28937$1LXXoO)
                                            ((case-lambda
                                               ((g$ls/false$28938$1LXXoO)
                                                (if (if g$ls/false$28938$1LXXoO
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$28939$1LXXoO
                                                               g$accessor$28940$1LXXoO)
                                                             (g$id?$27093$1LXXoO
                                                               g$accessor$28940$1LXXoO)))
                                                          g$ls/false$28938$1LXXoO))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$28941$1LXXoO
                                                         g$accessor$28942$1LXXoO)
                                                       g$accessor$28942$1LXXoO))
                                                    g$ls/false$28938$1LXXoO)
                                                  ((case-lambda
                                                     ((g$t$28943$1LXXoO)
                                                      ((case-lambda
                                                         ((g$ls/false$28944$1LXXoO)
                                                          (if (if g$ls/false$28944$1LXXoO
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$28945$1LXXoO)
                                                                       (g$id?$27093$1LXXoO
                                                                         g$name$28945$1LXXoO)))
                                                                    g$ls/false$28944$1LXXoO))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$28946$1LXXoO)
                                                                 (g$gen-name$28927$1LXXoO
                                                                   g$name$28946$1LXXoO)))
                                                              g$ls/false$28944$1LXXoO)
                                                            ((case-lambda
                                                               ((g$t$28947$1LXXoO)
                                                                ((case-lambda
                                                                   ((g$ls/false$28948$1LXXoO)
                                                                    (if (if g$ls/false$28948$1LXXoO
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$28949$1LXXoO)
                                                                                 (g$id?$27093$1LXXoO
                                                                                   g$name$28949$1LXXoO)))
                                                                              g$ls/false$28948$1LXXoO))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$28950$1LXXoO)
                                                                           (g$gen-name$28927$1LXXoO
                                                                             g$name$28950$1LXXoO)))
                                                                        g$ls/false$28948$1LXXoO)
                                                                      ((case-lambda
                                                                         ((g$t$28951$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$ls/false$28952$1LXXoO)
                                                                              (if (if g$ls/false$28952$1LXXoO
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$28953$1LXXoO)
                                                                                           (g$id?$27093$1LXXoO
                                                                                             g$name$28953$1LXXoO)))
                                                                                        g$ls/false$28952$1LXXoO))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$28954$1LXXoO)
                                                                                     (g$gen-name$28927$1LXXoO
                                                                                       g$name$28954$1LXXoO)))
                                                                                  g$ls/false$28952$1LXXoO)
                                                                                ((case-lambda
                                                                                   ((g$t$28955$1LXXoO)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$28956$1LXXoO)
                                                                                        (if g$ls/false$28956$1LXXoO
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$28957$1LXXoO)
                                                                                               (g$syntax-violation$27710$1LXXoO
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$28928$1LXXoO)))
                                                                                            g$ls/false$28956$1LXXoO)
                                                                                          (g$syntax-violation$27710$1LXXoO
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$28955$1LXXoO))))
                                                                                     (g$syntax-dispatch$27591$1LXXoO
                                                                                       g$t$28955$1LXXoO
                                                                                       'any))))
                                                                                 g$t$28951$1LXXoO))))
                                                                           (g$syntax-dispatch$27591$1LXXoO
                                                                             g$t$28951$1LXXoO
                                                                             'any))))
                                                                       g$t$28947$1LXXoO))))
                                                                 (g$syntax-dispatch$27591$1LXXoO
                                                                   g$t$28947$1LXXoO
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$28943$1LXXoO))))
                                                       (g$syntax-dispatch$27591$1LXXoO
                                                         g$t$28943$1LXXoO
                                                         '(#(scheme-id
                                                             mutable)
                                                           any)))))
                                                   g$t$28937$1LXXoO))))
                                             (g$syntax-dispatch$27591$1LXXoO
                                               g$t$28937$1LXXoO
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$28929$1LXXoO))))
                                   (g$syntax-dispatch$27591$1LXXoO
                                     g$t$28929$1LXXoO
                                     '(#(scheme-id mutable)
                                       any
                                       any
                                       any)))))
                               g$field$28928$1LXXoO)))
                           g$fields$28926$1LXXoO)))))
                  (g$enumerate$28876$1LXXoO
                    (case-lambda
                      ((g$ls$28921$1LXXoO)
                       ((letrec ((g$f$28922$1LXXoO
                                   (case-lambda
                                     ((g$ls$28923$1LXXoO
                                        g$i$28924$1LXXoO)
                                      (if (null? g$ls$28923$1LXXoO)
                                        '()
                                        (begin
                                          '#f
                                          (cons
                                            g$i$28924$1LXXoO
                                            (g$f$28922$1LXXoO
                                              (cdr g$ls$28923$1LXXoO)
                                              (+ g$i$28924$1LXXoO
                                                 '1)))))))))
                          g$f$28922$1LXXoO)
                        g$ls$28921$1LXXoO
                        '0))))
                  (g$do-define-record$28877$1LXXoO
                    (case-lambda
                      ((g$namespec$28901$1LXXoO g$clause*$28902$1LXXoO)
                       ((case-lambda
                          ((g$foo$28903$1LXXoO)
                           ((case-lambda
                              ((g$foo-rtd$28904$1LXXoO)
                               ((case-lambda
                                  ((g$foo-rcd$28905$1LXXoO)
                                   ((case-lambda
                                      ((g$protocol$28906$1LXXoO)
                                       ((case-lambda
                                          ((g$make-foo$28907$1LXXoO)
                                           ((case-lambda
                                              ((g$fields$28908$1LXXoO)
                                               ((case-lambda
                                                  ((g$idx*$28909$1LXXoO)
                                                   ((case-lambda
                                                      ((g$foo-x*$28910$1LXXoO)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$28911$1LXXoO)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$28912$1LXXoO)
                                                               ((case-lambda
                                                                  ((g$foo?$28913$1LXXoO)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$28914$1LXXoO)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$28915$1LXXoO)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$28916$1LXXoO)
                                                                               (g$bless$27554$1LXXoO
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$28904$1LXXoO
                                                                                       g$foo-rtd-code$28914$1LXXoO)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$28906$1LXXoO
                                                                                         g$protocol-code$28916$1LXXoO)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$28905$1LXXoO
                                                                                           g$foo-rcd-code$28915$1LXXoO)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$28903$1LXXoO
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$28904$1LXXoO)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$28905$1LXXoO)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$28913$1LXXoO
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$28904$1LXXoO))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$28907$1LXXoO
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$28905$1LXXoO))
                                                                                               (append
                                                                                                 (g$map$19225$1LXXoO
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$28917$1LXXoO
                                                                                                        g$idx$28918$1LXXoO)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$28917$1LXXoO
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$28904$1LXXoO
                                                                                                          g$idx$28918$1LXXoO))))
                                                                                                   g$foo-x*$28910$1LXXoO
                                                                                                   g$idx*$28909$1LXXoO)
                                                                                                 (g$map$19225$1LXXoO
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$28919$1LXXoO
                                                                                                        g$idx$28920$1LXXoO)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$28919$1LXXoO
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$28904$1LXXoO
                                                                                                          g$idx$28920$1LXXoO))))
                                                                                                   g$set-foo-x!*$28911$1LXXoO
                                                                                                   g$set-foo-idx*$28912$1LXXoO))))))))))))
                                                                            (g$get-protocol-code$28871$1LXXoO
                                                                              g$clause*$28902$1LXXoO))))
                                                                        (g$foo-rcd-code$28870$1LXXoO
                                                                          g$clause*$28902$1LXXoO
                                                                          g$foo-rtd$28904$1LXXoO
                                                                          g$protocol$28906$1LXXoO
                                                                          (g$parent-rcd-code$28869$1LXXoO
                                                                            g$clause*$28902$1LXXoO)))))
                                                                    (g$foo-rtd-code$28867$1LXXoO
                                                                      g$foo$28903$1LXXoO
                                                                      g$clause*$28902$1LXXoO
                                                                      (g$parent-rtd-code$28868$1LXXoO
                                                                        g$clause*$28902$1LXXoO)))))
                                                                (g$get-record-predicate-name$28865$1LXXoO
                                                                  g$namespec$28901$1LXXoO))))
                                                            (g$get-mutator-indices$28873$1LXXoO
                                                              g$fields$28908$1LXXoO))))
                                                        (g$get-mutators$28874$1LXXoO
                                                          g$foo$28903$1LXXoO
                                                          g$fields$28908$1LXXoO))))
                                                    (g$get-accessors$28875$1LXXoO
                                                      g$foo$28903$1LXXoO
                                                      g$fields$28908$1LXXoO))))
                                                (g$enumerate$28876$1LXXoO
                                                  g$fields$28908$1LXXoO))))
                                            (g$get-fields$28872$1LXXoO
                                              g$clause*$28902$1LXXoO))))
                                        (g$get-record-constructor-name$28864$1LXXoO
                                          g$namespec$28901$1LXXoO))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$28863$1LXXoO
                          g$namespec$28901$1LXXoO)))))
                  (g$verify-clauses$28878$1LXXoO
                    (case-lambda
                      ((g$x$28883$1LXXoO g$cls*$28884$1LXXoO)
                       (letrec* ((g$valid-kwds$28885$1LXXoO
                                   (g$map$19225$1LXXoO
                                     g$bless$27554$1LXXoO
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$28886$1LXXoO
                                   (case-lambda
                                     ((g$x$28898$1LXXoO
                                        g$ls$28899$1LXXoO)
                                      (if (pair? g$ls$28899$1LXXoO)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$28900$1LXXoO)
                                              (if g$t$28900$1LXXoO
                                                g$t$28900$1LXXoO
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$28886$1LXXoO
                                                    g$x$28898$1LXXoO
                                                    (cdr g$ls$28899$1LXXoO))))))
                                           (g$free-id=?$27097$1LXXoO
                                             g$x$28898$1LXXoO
                                             (car g$ls$28899$1LXXoO))))
                                        '#f)))))
                         ((letrec ((g$f$28887$1LXXoO
                                     (case-lambda
                                       ((g$cls*$28888$1LXXoO
                                          g$seen*$28889$1LXXoO)
                                        (if (not (null?
                                                   g$cls*$28888$1LXXoO))
                                          ((case-lambda
                                             ((g$t$28890$1LXXoO)
                                              ((case-lambda
                                                 ((g$ls/false$28891$1LXXoO)
                                                  (if g$ls/false$28891$1LXXoO
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$28892$1LXXoO
                                                           g$rest$28893$1LXXoO)
                                                         (if ((case-lambda
                                                                ((g$t$28894$1LXXoO)
                                                                 (if g$t$28894$1LXXoO
                                                                   g$t$28894$1LXXoO
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$28886$1LXXoO
                                                                            g$kwd$28892$1LXXoO
                                                                            g$valid-kwds$28885$1LXXoO))))))
                                                              (not (g$id?$27093$1LXXoO
                                                                     g$kwd$28892$1LXXoO)))
                                                           (g$syntax-violation$27710$1LXXoO
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$28892$1LXXoO)
                                                           (if (g$bound-id-member?$27100$1LXXoO
                                                                 g$kwd$28892$1LXXoO
                                                                 g$seen*$28889$1LXXoO)
                                                             (g$syntax-violation$27710$1LXXoO
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$28883$1LXXoO
                                                               g$kwd$28892$1LXXoO)
                                                             (begin
                                                               '#f
                                                               (g$f$28887$1LXXoO
                                                                 (cdr g$cls*$28888$1LXXoO)
                                                                 (cons
                                                                   g$kwd$28892$1LXXoO
                                                                   g$seen*$28889$1LXXoO)))))))
                                                      g$ls/false$28891$1LXXoO)
                                                    ((case-lambda
                                                       ((g$t$28895$1LXXoO)
                                                        ((case-lambda
                                                           ((g$ls/false$28896$1LXXoO)
                                                            (if g$ls/false$28896$1LXXoO
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$28897$1LXXoO)
                                                                   (g$syntax-violation$27710$1LXXoO
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$28897$1LXXoO)))
                                                                g$ls/false$28896$1LXXoO)
                                                              (g$syntax-violation$27710$1LXXoO
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$28895$1LXXoO))))
                                                         (g$syntax-dispatch$27591$1LXXoO
                                                           g$t$28895$1LXXoO
                                                           'any))))
                                                     g$t$28890$1LXXoO))))
                                               (g$syntax-dispatch$27591$1LXXoO
                                                 g$t$28890$1LXXoO
                                                 '(any . any)))))
                                           (car g$cls*$28888$1LXXoO))
                                          (void))))))
                            g$f$28887$1LXXoO)
                          g$cls*$28884$1LXXoO
                          '()))))))
          ((case-lambda
             ((g$t$28879$1LXXoO)
              ((case-lambda
                 ((g$ls/false$28880$1LXXoO)
                  (if g$ls/false$28880$1LXXoO
                    (apply
                      (case-lambda
                        ((g$namespec$28881$1LXXoO
                           g$clause*$28882$1LXXoO)
                         (begin
                           (g$verify-clauses$28878$1LXXoO
                             g$x$28861$1LXXoO
                             g$clause*$28882$1LXXoO)
                           (g$do-define-record$28877$1LXXoO
                             g$namespec$28881$1LXXoO
                             g$clause*$28882$1LXXoO))))
                      g$ls/false$28880$1LXXoO)
                    (g$syntax-violation$27710$1LXXoO
                      '#f
                      '"invalid syntax"
                      g$t$28879$1LXXoO))))
               (g$syntax-dispatch$27591$1LXXoO
                 g$t$28879$1LXXoO
                 '(_ any . each-any)))))
           g$x$28861$1LXXoO)))))
   (g$define-condition-type-macro$27586$1LXXoO
     g$define-condition-type-macro$31182$1LXXoO
     (case-lambda
       ((g$x$29117$1LXXoO)
        (letrec* ((g$mkname$29118$1LXXoO
                    (case-lambda
                      ((g$name$29141$1LXXoO g$suffix$29142$1LXXoO)
                       (g$datum->syntax$27712$1LXXoO
                         g$name$29141$1LXXoO
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$27713$1LXXoO
                                 g$name$29141$1LXXoO))
                             g$suffix$29142$1LXXoO)))))))
          ((case-lambda
             ((g$t$29119$1LXXoO)
              ((case-lambda
                 ((g$ls/false$29120$1LXXoO)
                  (if (if g$ls/false$29120$1LXXoO
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$29121$1LXXoO
                                 g$name$29122$1LXXoO
                                 g$super$29123$1LXXoO
                                 g$constructor$29124$1LXXoO
                                 g$predicate$29125$1LXXoO
                                 g$field*$29126$1LXXoO
                                 g$accessor*$29127$1LXXoO)
                               (if (g$id?$27093$1LXXoO
                                     g$name$29122$1LXXoO)
                                 (if (g$id?$27093$1LXXoO
                                       g$super$29123$1LXXoO)
                                   (if (g$id?$27093$1LXXoO
                                         g$constructor$29124$1LXXoO)
                                     (if (g$id?$27093$1LXXoO
                                           g$predicate$29125$1LXXoO)
                                       (if (g$for-all$19223$1LXXoO
                                             g$id?$27093$1LXXoO
                                             g$field*$29126$1LXXoO)
                                         (begin
                                           '#f
                                           (g$for-all$19223$1LXXoO
                                             g$id?$27093$1LXXoO
                                             g$accessor*$29127$1LXXoO))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$29120$1LXXoO))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$29128$1LXXoO
                           g$name$29129$1LXXoO
                           g$super$29130$1LXXoO
                           g$constructor$29131$1LXXoO
                           g$predicate$29132$1LXXoO
                           g$field*$29133$1LXXoO
                           g$accessor*$29134$1LXXoO)
                         ((case-lambda
                            ((g$aux-accessor*$29135$1LXXoO)
                             (g$bless$27554$1LXXoO
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$29129$1LXXoO
                                         g$constructor$29131$1LXXoO
                                         (gensym))
                                       (cons
                                         (list
                                           'parent
                                           g$super$29130$1LXXoO)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$19225$1LXXoO
                                               (case-lambda
                                                 ((g$field$29136$1LXXoO
                                                    g$aux$29137$1LXXoO)
                                                  (list
                                                    'immutable
                                                    g$field$29136$1LXXoO
                                                    g$aux$29137$1LXXoO)))
                                               g$field*$29133$1LXXoO
                                               g$aux-accessor*$29135$1LXXoO))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$29132$1LXXoO
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$29129$1LXXoO)))
                                     (g$map$19225$1LXXoO
                                       (case-lambda
                                         ((g$accessor$29138$1LXXoO
                                            g$aux$29139$1LXXoO)
                                          (list
                                            'define
                                            g$accessor$29138$1LXXoO
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$29129$1LXXoO)
                                              g$aux$29139$1LXXoO))))
                                       g$accessor*$29134$1LXXoO
                                       g$aux-accessor*$29135$1LXXoO)))))))
                          (g$map$19225$1LXXoO
                            (case-lambda ((g$x$29140$1LXXoO) (gensym)))
                            g$accessor*$29134$1LXXoO))))
                      g$ls/false$29120$1LXXoO)
                    (g$syntax-violation$27710$1LXXoO
                      '#f
                      '"invalid syntax"
                      g$t$29119$1LXXoO))))
               (g$syntax-dispatch$27591$1LXXoO
                 g$t$29119$1LXXoO
                 '(any any any any any . #(each (any any)))))))
           g$x$29117$1LXXoO)))))
   (g$incorrect-usage-macro$27587$1LXXoO
     g$incorrect-usage-macro$31183$1LXXoO
     (case-lambda
       ((g$e$29143$1LXXoO)
        (g$syntax-violation$27710$1LXXoO
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$29143$1LXXoO))))
   (g$parameterize-macro$27588$1LXXoO
     g$parameterize-macro$31184$1LXXoO
     (case-lambda
       ((g$e$29144$1LXXoO)
        ((case-lambda
           ((g$t$29145$1LXXoO)
            ((case-lambda
               ((g$ls/false$29146$1LXXoO)
                (if g$ls/false$29146$1LXXoO
                  (apply
                    (case-lambda
                      ((g$b$29147$1LXXoO g$b*$29148$1LXXoO)
                       (g$bless$27554$1LXXoO
                         (cons
                           'let
                           (cons
                             '()
                             (cons
                               g$b$29147$1LXXoO
                               g$b*$29148$1LXXoO))))))
                    g$ls/false$29146$1LXXoO)
                  ((case-lambda
                     ((g$t$29149$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$29150$1LXXoO)
                          (if g$ls/false$29150$1LXXoO
                            (apply
                              (case-lambda
                                ((g$olhs*$29151$1LXXoO
                                   g$orhs*$29152$1LXXoO
                                   g$b$29153$1LXXoO
                                   g$b*$29154$1LXXoO)
                                 ((case-lambda
                                    ((g$lhs*$29155$1LXXoO
                                       g$rhs*$29156$1LXXoO)
                                     (g$bless$27554$1LXXoO
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$29155$1LXXoO
                                             g$rhs*$29156$1LXXoO)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$19225$1LXXoO
                                                       (case-lambda
                                                         ((g$lhs$29157$1LXXoO
                                                            g$rhs$29158$1LXXoO)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$29157$1LXXoO)))
                                                            (list
                                                              g$lhs$29157$1LXXoO
                                                              g$rhs$29158$1LXXoO)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$29158$1LXXoO
                                                                '(t))))))
                                                       g$lhs*$29155$1LXXoO
                                                       g$rhs*$29156$1LXXoO)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$29153$1LXXoO
                                                         g$b*$29154$1LXXoO)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$29151$1LXXoO
                                           g$orhs*$29152$1LXXoO)))))
                                  (g$generate-temporaries$27700$1LXXoO
                                    g$olhs*$29151$1LXXoO)
                                  (g$generate-temporaries$27700$1LXXoO
                                    g$orhs*$29152$1LXXoO))))
                              g$ls/false$29150$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"invalid syntax"
                              g$t$29149$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$29149$1LXXoO
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$29145$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$29145$1LXXoO
               '(_ () any . each-any)))))
         g$e$29144$1LXXoO))))
   (g$foreign-call-transformer$27589$1LXXoO
     g$foreign-call-transformer$31185$1LXXoO
     (case-lambda
       ((g$e$29159$1LXXoO g$r$29160$1LXXoO g$mr$29161$1LXXoO)
        ((case-lambda
           ((g$t$29162$1LXXoO)
            ((case-lambda
               ((g$ls/false$29163$1LXXoO)
                (if g$ls/false$29163$1LXXoO
                  (apply
                    (case-lambda
                      ((g$name$29164$1LXXoO g$arg*$29165$1LXXoO)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$27609$1LXXoO
                             g$name$29164$1LXXoO
                             g$r$29160$1LXXoO
                             g$mr$29161$1LXXoO)
                           (g$chi-expr*$27607$1LXXoO
                             g$arg*$29165$1LXXoO
                             g$r$29160$1LXXoO
                             g$mr$29161$1LXXoO)))))
                    g$ls/false$29163$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$29162$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$29162$1LXXoO
               '(_ any . each-any)))))
         g$e$29159$1LXXoO))))
   (g$convert-pattern$27590$1LXXoO
     g$convert-pattern$31186$1LXXoO
     (case-lambda
       ((g$pattern$29166$1LXXoO g$keys$29167$1LXXoO)
        (letrec* ((g$cvt*$29168$1LXXoO
                    (case-lambda
                      ((g$p*$29248$1LXXoO
                         g$n$29249$1LXXoO
                         g$ids$29250$1LXXoO)
                       (if (null? g$p*$29248$1LXXoO)
                         (values '() g$ids$29250$1LXXoO)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$29168$1LXXoO
                                (cdr g$p*$29248$1LXXoO)
                                g$n$29249$1LXXoO
                                g$ids$29250$1LXXoO)))
                           (case-lambda
                             ((g$y$29253$1LXXoO g$ids$29254$1LXXoO)
                              ((case-lambda
                                 ((g$ids$29255$1LXXoO g$y$29256$1LXXoO)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$29169$1LXXoO
                                         (car g$p*$29248$1LXXoO)
                                         g$n$29249$1LXXoO
                                         g$ids$29255$1LXXoO)))
                                    (case-lambda
                                      ((g$x$29259$1LXXoO
                                         g$ids$29260$1LXXoO)
                                       ((case-lambda
                                          ((g$ids$29261$1LXXoO
                                             g$x$29262$1LXXoO)
                                           (values
                                             (cons
                                               g$x$29262$1LXXoO
                                               g$y$29256$1LXXoO)
                                             g$ids$29261$1LXXoO)))
                                        g$ids$29260$1LXXoO
                                        g$x$29259$1LXXoO))))))
                               g$ids$29254$1LXXoO
                               g$y$29253$1LXXoO))))))))
                  (g$cvt$29169$1LXXoO
                    (case-lambda
                      ((g$p$29170$1LXXoO
                         g$n$29171$1LXXoO
                         g$ids$29172$1LXXoO)
                       ((case-lambda
                          ((g$t$29173$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$29174$1LXXoO)
                               (if (if g$ls/false$29174$1LXXoO
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$29175$1LXXoO)
                                            (g$id?$27093$1LXXoO
                                              g$id$29175$1LXXoO)))
                                         g$ls/false$29174$1LXXoO))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$29176$1LXXoO)
                                      (if (g$bound-id-member?$27100$1LXXoO
                                            g$p$29170$1LXXoO
                                            g$keys$29167$1LXXoO)
                                        (values
                                          (vector
                                            'free-id
                                            g$p$29170$1LXXoO)
                                          g$ids$29172$1LXXoO)
                                        (if (g$free-id=?$27097$1LXXoO
                                              g$p$29170$1LXXoO
                                              (g$scheme-stx$27534$1LXXoO
                                                '_))
                                          (values '_ g$ids$29172$1LXXoO)
                                          (begin
                                            '#f
                                            (values
                                              'any
                                              (cons
                                                (cons
                                                  g$p$29170$1LXXoO
                                                  g$n$29171$1LXXoO)
                                                g$ids$29172$1LXXoO)))))))
                                   g$ls/false$29174$1LXXoO)
                                 ((case-lambda
                                    ((g$t$29177$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$29178$1LXXoO)
                                         (if (if g$ls/false$29178$1LXXoO
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$29179$1LXXoO
                                                        g$dots$29180$1LXXoO)
                                                      (g$ellipsis?$27592$1LXXoO
                                                        g$dots$29180$1LXXoO)))
                                                   g$ls/false$29178$1LXXoO))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$29181$1LXXoO
                                                  g$dots$29182$1LXXoO)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$29169$1LXXoO
                                                       g$p$29181$1LXXoO
                                                       (+ g$n$29171$1LXXoO
                                                          '1)
                                                       g$ids$29172$1LXXoO)))
                                                  (case-lambda
                                                    ((g$p$29185$1LXXoO
                                                       g$ids$29186$1LXXoO)
                                                     ((case-lambda
                                                        ((g$ids$29187$1LXXoO
                                                           g$p$29188$1LXXoO)
                                                         (values
                                                           (if (eq? g$p$29188$1LXXoO
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$29188$1LXXoO))
                                                           g$ids$29187$1LXXoO)))
                                                      g$ids$29186$1LXXoO
                                                      g$p$29185$1LXXoO))))))
                                             g$ls/false$29178$1LXXoO)
                                           ((case-lambda
                                              ((g$t$29189$1LXXoO)
                                               ((case-lambda
                                                  ((g$ls/false$29190$1LXXoO)
                                                   (if (if g$ls/false$29190$1LXXoO
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$29191$1LXXoO
                                                                  g$dots$29192$1LXXoO
                                                                  g$ys$29193$1LXXoO
                                                                  g$z$29194$1LXXoO)
                                                                (g$ellipsis?$27592$1LXXoO
                                                                  g$dots$29192$1LXXoO)))
                                                             g$ls/false$29190$1LXXoO))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$29195$1LXXoO
                                                            g$dots$29196$1LXXoO
                                                            g$ys$29197$1LXXoO
                                                            g$z$29198$1LXXoO)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$29169$1LXXoO
                                                                 g$z$29198$1LXXoO
                                                                 g$n$29171$1LXXoO
                                                                 g$ids$29172$1LXXoO)))
                                                            (case-lambda
                                                              ((g$z$29201$1LXXoO
                                                                 g$ids$29202$1LXXoO)
                                                               ((case-lambda
                                                                  ((g$ids$29203$1LXXoO
                                                                     g$z$29204$1LXXoO)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$29168$1LXXoO
                                                                          g$ys$29197$1LXXoO
                                                                          g$n$29171$1LXXoO
                                                                          g$ids$29203$1LXXoO)))
                                                                     (case-lambda
                                                                       ((g$ys$29207$1LXXoO
                                                                          g$ids$29208$1LXXoO)
                                                                        ((case-lambda
                                                                           ((g$ids$29209$1LXXoO
                                                                              g$ys$29210$1LXXoO)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$29169$1LXXoO
                                                                                   g$x$29195$1LXXoO
                                                                                   (+ g$n$29171$1LXXoO
                                                                                      '1)
                                                                                   g$ids$29209$1LXXoO)))
                                                                              (case-lambda
                                                                                ((g$x$29213$1LXXoO
                                                                                   g$ids$29214$1LXXoO)
                                                                                 ((case-lambda
                                                                                    ((g$ids$29215$1LXXoO
                                                                                       g$x$29216$1LXXoO)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$29216$1LXXoO
                                                                                         (g$reverse$20074$1LXXoO
                                                                                           g$ys$29210$1LXXoO)
                                                                                         g$z$29204$1LXXoO)
                                                                                       g$ids$29215$1LXXoO)))
                                                                                  g$ids$29214$1LXXoO
                                                                                  g$x$29213$1LXXoO))))))
                                                                         g$ids$29208$1LXXoO
                                                                         g$ys$29207$1LXXoO))))))
                                                                g$ids$29202$1LXXoO
                                                                g$z$29201$1LXXoO))))))
                                                       g$ls/false$29190$1LXXoO)
                                                     ((case-lambda
                                                        ((g$t$29217$1LXXoO)
                                                         ((case-lambda
                                                            ((g$ls/false$29218$1LXXoO)
                                                             (if g$ls/false$29218$1LXXoO
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$29219$1LXXoO
                                                                      g$y$29220$1LXXoO)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$29169$1LXXoO
                                                                           g$y$29220$1LXXoO
                                                                           g$n$29171$1LXXoO
                                                                           g$ids$29172$1LXXoO)))
                                                                      (case-lambda
                                                                        ((g$y$29223$1LXXoO
                                                                           g$ids$29224$1LXXoO)
                                                                         ((case-lambda
                                                                            ((g$ids$29225$1LXXoO
                                                                               g$y$29226$1LXXoO)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$29169$1LXXoO
                                                                                    g$x$29219$1LXXoO
                                                                                    g$n$29171$1LXXoO
                                                                                    g$ids$29225$1LXXoO)))
                                                                               (case-lambda
                                                                                 ((g$x$29229$1LXXoO
                                                                                    g$ids$29230$1LXXoO)
                                                                                  ((case-lambda
                                                                                     ((g$ids$29231$1LXXoO
                                                                                        g$x$29232$1LXXoO)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$29232$1LXXoO
                                                                                          g$y$29226$1LXXoO)
                                                                                        g$ids$29231$1LXXoO)))
                                                                                   g$ids$29230$1LXXoO
                                                                                   g$x$29229$1LXXoO))))))
                                                                          g$ids$29224$1LXXoO
                                                                          g$y$29223$1LXXoO))))))
                                                                 g$ls/false$29218$1LXXoO)
                                                               ((case-lambda
                                                                  ((g$t$29233$1LXXoO)
                                                                   ((case-lambda
                                                                      ((g$ls/false$29234$1LXXoO)
                                                                       (if g$ls/false$29234$1LXXoO
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$29172$1LXXoO)))
                                                                           g$ls/false$29234$1LXXoO)
                                                                         ((case-lambda
                                                                            ((g$t$29235$1LXXoO)
                                                                             ((case-lambda
                                                                                ((g$ls/false$29236$1LXXoO)
                                                                                 (if (if g$ls/false$29236$1LXXoO
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$29237$1LXXoO)
                                                                                              (not (g$stx?$27065$1LXXoO
                                                                                                     g$p$29237$1LXXoO))))
                                                                                           g$ls/false$29236$1LXXoO))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$29238$1LXXoO)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$29169$1LXXoO
                                                                                               g$p$29238$1LXXoO
                                                                                               g$n$29171$1LXXoO
                                                                                               g$ids$29172$1LXXoO)))
                                                                                          (case-lambda
                                                                                            ((g$p$29241$1LXXoO
                                                                                               g$ids$29242$1LXXoO)
                                                                                             ((case-lambda
                                                                                                ((g$ids$29243$1LXXoO
                                                                                                   g$p$29244$1LXXoO)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$29244$1LXXoO)
                                                                                                   g$ids$29243$1LXXoO)))
                                                                                              g$ids$29242$1LXXoO
                                                                                              g$p$29241$1LXXoO))))))
                                                                                     g$ls/false$29236$1LXXoO)
                                                                                   ((case-lambda
                                                                                      ((g$t$29245$1LXXoO)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$29246$1LXXoO)
                                                                                           (if g$ls/false$29246$1LXXoO
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$29247$1LXXoO)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$27104$1LXXoO
                                                                                                        g$datum$29247$1LXXoO))
                                                                                                    g$ids$29172$1LXXoO)))
                                                                                               g$ls/false$29246$1LXXoO)
                                                                                             (g$syntax-violation$27710$1LXXoO
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$29245$1LXXoO))))
                                                                                        (g$syntax-dispatch$27591$1LXXoO
                                                                                          g$t$29245$1LXXoO
                                                                                          'any))))
                                                                                    g$t$29235$1LXXoO))))
                                                                              (g$syntax-dispatch$27591$1LXXoO
                                                                                g$t$29235$1LXXoO
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$29233$1LXXoO))))
                                                                    (g$syntax-dispatch$27591$1LXXoO
                                                                      g$t$29233$1LXXoO
                                                                      '()))))
                                                                g$t$29217$1LXXoO))))
                                                          (g$syntax-dispatch$27591$1LXXoO
                                                            g$t$29217$1LXXoO
                                                            '(any .
                                                                  any)))))
                                                      g$t$29189$1LXXoO))))
                                                (g$syntax-dispatch$27591$1LXXoO
                                                  g$t$29189$1LXXoO
                                                  '(any any
                                                        .
                                                        #(each+
                                                          any
                                                          ()
                                                          any))))))
                                            g$t$29177$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$29177$1LXXoO
                                        '(any any)))))
                                  g$t$29173$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$29173$1LXXoO
                              'any))))
                        g$p$29170$1LXXoO)))))
          (g$cvt$29169$1LXXoO g$pattern$29166$1LXXoO '0 '())))))
   (g$syntax-dispatch$27591$1LXXoO
     g$syntax-dispatch$31187$1LXXoO
     (case-lambda
       ((g$e$29263$1LXXoO g$p$29264$1LXXoO)
        (letrec* ((g$stx^$29265$1LXXoO
                    (case-lambda
                      ((g$e$29373$1LXXoO
                         g$m*$29374$1LXXoO
                         g$s*$29375$1LXXoO
                         g$ae*$29376$1LXXoO)
                       (if (if (null? g$m*$29374$1LXXoO)
                             (if (null? g$s*$29375$1LXXoO)
                               (begin '#f (null? g$ae*$29376$1LXXoO))
                               '#f)
                             '#f)
                         g$e$29373$1LXXoO
                         (g$mkstx$27081$1LXXoO
                           g$e$29373$1LXXoO
                           g$m*$29374$1LXXoO
                           g$s*$29375$1LXXoO
                           g$ae*$29376$1LXXoO)))))
                  (g$match-each$29266$1LXXoO
                    (case-lambda
                      ((g$e$29357$1LXXoO
                         g$p$29358$1LXXoO
                         g$m*$29359$1LXXoO
                         g$s*$29360$1LXXoO
                         g$ae*$29361$1LXXoO)
                       (if (pair? g$e$29357$1LXXoO)
                         ((case-lambda
                            ((g$first$29362$1LXXoO)
                             (if g$first$29362$1LXXoO
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$29363$1LXXoO)
                                     (if g$rest$29363$1LXXoO
                                       (begin
                                         '#f
                                         (cons
                                           g$first$29362$1LXXoO
                                           g$rest$29363$1LXXoO))
                                       '#f)))
                                  (g$match-each$29266$1LXXoO
                                    (cdr g$e$29357$1LXXoO)
                                    g$p$29358$1LXXoO
                                    g$m*$29359$1LXXoO
                                    g$s*$29360$1LXXoO
                                    g$ae*$29361$1LXXoO)))
                               '#f)))
                          (g$match$29272$1LXXoO
                            (car g$e$29357$1LXXoO)
                            g$p$29358$1LXXoO
                            g$m*$29359$1LXXoO
                            g$s*$29360$1LXXoO
                            g$ae*$29361$1LXXoO
                            '()))
                         (if (null? g$e$29357$1LXXoO)
                           '()
                           (if (g$stx?$27065$1LXXoO g$e$29357$1LXXoO)
                             (if (not (g$top-marked?$27027$1LXXoO
                                        g$m*$29359$1LXXoO))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$27080$1LXXoO
                                        g$m*$29359$1LXXoO
                                        g$s*$29360$1LXXoO
                                        g$ae*$29361$1LXXoO
                                        g$e$29357$1LXXoO)))
                                   (case-lambda
                                     ((g$m*$29367$1LXXoO
                                        g$s*$29368$1LXXoO
                                        g$ae*$29369$1LXXoO)
                                      ((case-lambda
                                         ((g$ae*$29370$1LXXoO
                                            g$s*$29371$1LXXoO
                                            g$m*$29372$1LXXoO)
                                          (g$match-each$29266$1LXXoO
                                            (g$stx-expr$27067$1LXXoO
                                              g$e$29357$1LXXoO)
                                            g$p$29358$1LXXoO
                                            g$m*$29372$1LXXoO
                                            g$s*$29371$1LXXoO
                                            g$ae*$29370$1LXXoO)))
                                       g$ae*$29369$1LXXoO
                                       g$s*$29368$1LXXoO
                                       g$m*$29367$1LXXoO)))))
                               '#f)
                             (if (annotation? g$e$29357$1LXXoO)
                               (g$match-each$29266$1LXXoO
                                 (annotation-expression
                                   g$e$29357$1LXXoO)
                                 g$p$29358$1LXXoO
                                 g$m*$29359$1LXXoO
                                 g$s*$29360$1LXXoO
                                 g$ae*$29361$1LXXoO)
                               (begin '#f '#f))))))))
                  (g$match-each+$29267$1LXXoO
                    (case-lambda
                      ((g$e$29325$1LXXoO
                         g$x-pat$29326$1LXXoO
                         g$y-pat$29327$1LXXoO
                         g$z-pat$29328$1LXXoO
                         g$m*$29329$1LXXoO
                         g$s*$29330$1LXXoO
                         g$ae*$29331$1LXXoO
                         g$r$29332$1LXXoO)
                       ((letrec ((g$f$29333$1LXXoO
                                   (case-lambda
                                     ((g$e$29334$1LXXoO
                                        g$m*$29335$1LXXoO
                                        g$s*$29336$1LXXoO
                                        g$ae*$29337$1LXXoO)
                                      (if (pair? g$e$29334$1LXXoO)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$29333$1LXXoO
                                               (cdr g$e$29334$1LXXoO)
                                               g$m*$29335$1LXXoO
                                               g$s*$29336$1LXXoO
                                               g$ae*$29337$1LXXoO)))
                                          (case-lambda
                                            ((g$xr*$29341$1LXXoO
                                               g$y-pat$29342$1LXXoO
                                               g$r$29343$1LXXoO)
                                             ((case-lambda
                                                ((g$r$29344$1LXXoO
                                                   g$y-pat$29345$1LXXoO
                                                   g$xr*$29346$1LXXoO)
                                                 (if g$r$29344$1LXXoO
                                                   (if (null?
                                                         g$y-pat$29345$1LXXoO)
                                                     ((case-lambda
                                                        ((g$xr$29347$1LXXoO)
                                                         (if g$xr$29347$1LXXoO
                                                           (values
                                                             (cons
                                                               g$xr$29347$1LXXoO
                                                               g$xr*$29346$1LXXoO)
                                                             g$y-pat$29345$1LXXoO
                                                             g$r$29344$1LXXoO)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$29272$1LXXoO
                                                        (car g$e$29334$1LXXoO)
                                                        g$x-pat$29326$1LXXoO
                                                        g$m*$29335$1LXXoO
                                                        g$s*$29336$1LXXoO
                                                        g$ae*$29337$1LXXoO
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$29345$1LXXoO)
                                                       (g$match$29272$1LXXoO
                                                         (car g$e$29334$1LXXoO)
                                                         (car g$y-pat$29345$1LXXoO)
                                                         g$m*$29335$1LXXoO
                                                         g$s*$29336$1LXXoO
                                                         g$ae*$29337$1LXXoO
                                                         g$r$29344$1LXXoO)))
                                                   (values
                                                     '#f
                                                     '#f
                                                     '#f))))
                                              g$r$29343$1LXXoO
                                              g$y-pat$29342$1LXXoO
                                              g$xr*$29341$1LXXoO))))
                                        (if (g$stx?$27065$1LXXoO
                                              g$e$29334$1LXXoO)
                                          (if (g$top-marked?$27027$1LXXoO
                                                g$m*$29335$1LXXoO)
                                            (values
                                              '()
                                              g$y-pat$29327$1LXXoO
                                              (g$match$29272$1LXXoO
                                                g$e$29334$1LXXoO
                                                g$z-pat$29328$1LXXoO
                                                g$m*$29335$1LXXoO
                                                g$s*$29336$1LXXoO
                                                g$ae*$29337$1LXXoO
                                                g$r$29332$1LXXoO))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$27080$1LXXoO
                                                   g$m*$29335$1LXXoO
                                                   g$s*$29336$1LXXoO
                                                   g$ae*$29337$1LXXoO
                                                   g$e$29334$1LXXoO)))
                                              (case-lambda
                                                ((g$m*$29351$1LXXoO
                                                   g$s*$29352$1LXXoO
                                                   g$ae*$29353$1LXXoO)
                                                 ((case-lambda
                                                    ((g$ae*$29354$1LXXoO
                                                       g$s*$29355$1LXXoO
                                                       g$m*$29356$1LXXoO)
                                                     (g$f$29333$1LXXoO
                                                       (g$stx-expr$27067$1LXXoO
                                                         g$e$29334$1LXXoO)
                                                       g$m*$29356$1LXXoO
                                                       g$s*$29355$1LXXoO
                                                       g$ae*$29354$1LXXoO)))
                                                  g$ae*$29353$1LXXoO
                                                  g$s*$29352$1LXXoO
                                                  g$m*$29351$1LXXoO)))))
                                          (if (annotation?
                                                g$e$29334$1LXXoO)
                                            (g$f$29333$1LXXoO
                                              (annotation-expression
                                                g$e$29334$1LXXoO)
                                              g$m*$29335$1LXXoO
                                              g$s*$29336$1LXXoO
                                              g$ae*$29337$1LXXoO)
                                            (begin
                                              '#f
                                              (values
                                                '()
                                                g$y-pat$29327$1LXXoO
                                                (g$match$29272$1LXXoO
                                                  g$e$29334$1LXXoO
                                                  g$z-pat$29328$1LXXoO
                                                  g$m*$29335$1LXXoO
                                                  g$s*$29336$1LXXoO
                                                  g$ae*$29337$1LXXoO
                                                  g$r$29332$1LXXoO))))))))))
                          g$f$29333$1LXXoO)
                        g$e$29325$1LXXoO
                        g$m*$29329$1LXXoO
                        g$s*$29330$1LXXoO
                        g$ae*$29331$1LXXoO))))
                  (g$match-each-any$29268$1LXXoO
                    (case-lambda
                      ((g$e$29311$1LXXoO
                         g$m*$29312$1LXXoO
                         g$s*$29313$1LXXoO
                         g$ae*$29314$1LXXoO)
                       (if (pair? g$e$29311$1LXXoO)
                         ((case-lambda
                            ((g$l$29315$1LXXoO)
                             (if g$l$29315$1LXXoO
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$29265$1LXXoO
                                     (car g$e$29311$1LXXoO)
                                     g$m*$29312$1LXXoO
                                     g$s*$29313$1LXXoO
                                     g$ae*$29314$1LXXoO)
                                   g$l$29315$1LXXoO))
                               '#f)))
                          (g$match-each-any$29268$1LXXoO
                            (cdr g$e$29311$1LXXoO)
                            g$m*$29312$1LXXoO
                            g$s*$29313$1LXXoO
                            g$ae*$29314$1LXXoO))
                         (if (null? g$e$29311$1LXXoO)
                           '()
                           (if (g$stx?$27065$1LXXoO g$e$29311$1LXXoO)
                             (if (not (g$top-marked?$27027$1LXXoO
                                        g$m*$29312$1LXXoO))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$27080$1LXXoO
                                        g$m*$29312$1LXXoO
                                        g$s*$29313$1LXXoO
                                        g$ae*$29314$1LXXoO
                                        g$e$29311$1LXXoO)))
                                   (case-lambda
                                     ((g$m*$29319$1LXXoO
                                        g$s*$29320$1LXXoO
                                        g$ae*$29321$1LXXoO)
                                      ((case-lambda
                                         ((g$ae*$29322$1LXXoO
                                            g$s*$29323$1LXXoO
                                            g$m*$29324$1LXXoO)
                                          (g$match-each-any$29268$1LXXoO
                                            (g$stx-expr$27067$1LXXoO
                                              g$e$29311$1LXXoO)
                                            g$m*$29324$1LXXoO
                                            g$s*$29323$1LXXoO
                                            g$ae*$29322$1LXXoO)))
                                       g$ae*$29321$1LXXoO
                                       g$s*$29320$1LXXoO
                                       g$m*$29319$1LXXoO)))))
                               '#f)
                             (if (annotation? g$e$29311$1LXXoO)
                               (g$match-each-any$29268$1LXXoO
                                 (annotation-expression
                                   g$e$29311$1LXXoO)
                                 g$m*$29312$1LXXoO
                                 g$s*$29313$1LXXoO
                                 g$ae*$29314$1LXXoO)
                               (begin '#f '#f))))))))
                  (g$match-empty$29269$1LXXoO
                    (case-lambda
                      ((g$p$29308$1LXXoO g$r$29309$1LXXoO)
                       (if (null? g$p$29308$1LXXoO)
                         g$r$29309$1LXXoO
                         (if (eq? g$p$29308$1LXXoO '_)
                           g$r$29309$1LXXoO
                           (if (eq? g$p$29308$1LXXoO 'any)
                             (cons '() g$r$29309$1LXXoO)
                             (if (pair? g$p$29308$1LXXoO)
                               (g$match-empty$29269$1LXXoO
                                 (car g$p$29308$1LXXoO)
                                 (g$match-empty$29269$1LXXoO
                                   (cdr g$p$29308$1LXXoO)
                                   g$r$29309$1LXXoO))
                               (if (eq? g$p$29308$1LXXoO 'each-any)
                                 (cons '() g$r$29309$1LXXoO)
                                 (begin
                                   '#f
                                   ((case-lambda
                                      ((g$t$29310$1LXXoO)
                                       (if (eqv? g$t$29310$1LXXoO 'each)
                                         (g$match-empty$29269$1LXXoO
                                           (g$vector-ref$20070$1LXXoO
                                             g$p$29308$1LXXoO
                                             '1)
                                           g$r$29309$1LXXoO)
                                         (if (eqv?
                                               g$t$29310$1LXXoO
                                               'each+)
                                           (g$match-empty$29269$1LXXoO
                                             (g$vector-ref$20070$1LXXoO
                                               g$p$29308$1LXXoO
                                               '1)
                                             (g$match-empty$29269$1LXXoO
                                               (g$reverse$20074$1LXXoO
                                                 (g$vector-ref$20070$1LXXoO
                                                   g$p$29308$1LXXoO
                                                   '2))
                                               (g$match-empty$29269$1LXXoO
                                                 (g$vector-ref$20070$1LXXoO
                                                   g$p$29308$1LXXoO
                                                   '3)
                                                 g$r$29309$1LXXoO)))
                                           (if (g$memv$19218$1LXXoO
                                                 g$t$29310$1LXXoO
                                                 '(free-id atom))
                                             g$r$29309$1LXXoO
                                             (if (g$memv$19218$1LXXoO
                                                   g$t$29310$1LXXoO
                                                   '(scheme-id atom))
                                               g$r$29309$1LXXoO
                                               (if (eqv?
                                                     g$t$29310$1LXXoO
                                                     'vector)
                                                 (g$match-empty$29269$1LXXoO
                                                   (g$vector-ref$20070$1LXXoO
                                                     g$p$29308$1LXXoO
                                                     '1)
                                                   g$r$29309$1LXXoO)
                                                 (begin
                                                   '#f
                                                   (assertion-violation
                                                     'syntax-dispatch
                                                     '"invalid pattern"
                                                     g$p$29308$1LXXoO)))))))))
                                    (g$vector-ref$20070$1LXXoO
                                      g$p$29308$1LXXoO
                                      '0)))))))))))
                  (g$combine$29270$1LXXoO
                    (case-lambda
                      ((g$r*$29306$1LXXoO g$r$29307$1LXXoO)
                       (if (null? (car g$r*$29306$1LXXoO))
                         g$r$29307$1LXXoO
                         (cons
                           (g$map$19225$1LXXoO car g$r*$29306$1LXXoO)
                           (g$combine$29270$1LXXoO
                             (g$map$19225$1LXXoO cdr g$r*$29306$1LXXoO)
                             g$r$29307$1LXXoO))))))
                  (g$match*$29271$1LXXoO
                    (case-lambda
                      ((g$e$29288$1LXXoO
                         g$p$29289$1LXXoO
                         g$m*$29290$1LXXoO
                         g$s*$29291$1LXXoO
                         g$ae*$29292$1LXXoO
                         g$r$29293$1LXXoO)
                       (if (null? g$p$29289$1LXXoO)
                         (if (null? g$e$29288$1LXXoO)
                           (begin '#f g$r$29293$1LXXoO)
                           '#f)
                         (if (pair? g$p$29289$1LXXoO)
                           (if (pair? g$e$29288$1LXXoO)
                             (begin
                               '#f
                               (g$match$29272$1LXXoO
                                 (car g$e$29288$1LXXoO)
                                 (car g$p$29289$1LXXoO)
                                 g$m*$29290$1LXXoO
                                 g$s*$29291$1LXXoO
                                 g$ae*$29292$1LXXoO
                                 (g$match$29272$1LXXoO
                                   (cdr g$e$29288$1LXXoO)
                                   (cdr g$p$29289$1LXXoO)
                                   g$m*$29290$1LXXoO
                                   g$s*$29291$1LXXoO
                                   g$ae*$29292$1LXXoO
                                   g$r$29293$1LXXoO)))
                             '#f)
                           (if (eq? g$p$29289$1LXXoO 'each-any)
                             ((case-lambda
                                ((g$l$29294$1LXXoO)
                                 (if g$l$29294$1LXXoO
                                   (begin
                                     '#f
                                     (cons
                                       g$l$29294$1LXXoO
                                       g$r$29293$1LXXoO))
                                   '#f)))
                              (g$match-each-any$29268$1LXXoO
                                g$e$29288$1LXXoO
                                g$m*$29290$1LXXoO
                                g$s*$29291$1LXXoO
                                g$ae*$29292$1LXXoO))
                             (begin
                               '#f
                               ((case-lambda
                                  ((g$t$29295$1LXXoO)
                                   (if (eqv? g$t$29295$1LXXoO 'each)
                                     (if (null? g$e$29288$1LXXoO)
                                       (g$match-empty$29269$1LXXoO
                                         (g$vector-ref$20070$1LXXoO
                                           g$p$29289$1LXXoO
                                           '1)
                                         g$r$29293$1LXXoO)
                                       ((case-lambda
                                          ((g$r*$29296$1LXXoO)
                                           (if g$r*$29296$1LXXoO
                                             (begin
                                               '#f
                                               (g$combine$29270$1LXXoO
                                                 g$r*$29296$1LXXoO
                                                 g$r$29293$1LXXoO))
                                             '#f)))
                                        (g$match-each$29266$1LXXoO
                                          g$e$29288$1LXXoO
                                          (g$vector-ref$20070$1LXXoO
                                            g$p$29289$1LXXoO
                                            '1)
                                          g$m*$29290$1LXXoO
                                          g$s*$29291$1LXXoO
                                          g$ae*$29292$1LXXoO)))
                                     (if (eqv?
                                           g$t$29295$1LXXoO
                                           'free-id)
                                       (if (g$symbol?$20057$1LXXoO
                                             g$e$29288$1LXXoO)
                                         (if (g$top-marked?$27027$1LXXoO
                                               g$m*$29290$1LXXoO)
                                           (if (g$free-id=?$27097$1LXXoO
                                                 (g$stx^$29265$1LXXoO
                                                   g$e$29288$1LXXoO
                                                   g$m*$29290$1LXXoO
                                                   g$s*$29291$1LXXoO
                                                   g$ae*$29292$1LXXoO)
                                                 (g$vector-ref$20070$1LXXoO
                                                   g$p$29289$1LXXoO
                                                   '1))
                                             (begin
                                               '#f
                                               g$r$29293$1LXXoO)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (eqv?
                                             g$t$29295$1LXXoO
                                             'scheme-id)
                                         (if (g$symbol?$20057$1LXXoO
                                               g$e$29288$1LXXoO)
                                           (if (g$top-marked?$27027$1LXXoO
                                                 g$m*$29290$1LXXoO)
                                             (if (g$free-id=?$27097$1LXXoO
                                                   (g$stx^$29265$1LXXoO
                                                     g$e$29288$1LXXoO
                                                     g$m*$29290$1LXXoO
                                                     g$s*$29291$1LXXoO
                                                     g$ae*$29292$1LXXoO)
                                                   (g$scheme-stx$27534$1LXXoO
                                                     (g$vector-ref$20070$1LXXoO
                                                       g$p$29289$1LXXoO
                                                       '1)))
                                               (begin
                                                 '#f
                                                 g$r$29293$1LXXoO)
                                               '#f)
                                             '#f)
                                           '#f)
                                         (if (eqv?
                                               g$t$29295$1LXXoO
                                               'each+)
                                           (call-with-values
                                             (case-lambda
                                               (()
                                                (g$match-each+$29267$1LXXoO
                                                  g$e$29288$1LXXoO
                                                  (g$vector-ref$20070$1LXXoO
                                                    g$p$29289$1LXXoO
                                                    '1)
                                                  (g$vector-ref$20070$1LXXoO
                                                    g$p$29289$1LXXoO
                                                    '2)
                                                  (g$vector-ref$20070$1LXXoO
                                                    g$p$29289$1LXXoO
                                                    '3)
                                                  g$m*$29290$1LXXoO
                                                  g$s*$29291$1LXXoO
                                                  g$ae*$29292$1LXXoO
                                                  g$r$29293$1LXXoO)))
                                             (case-lambda
                                               ((g$xr*$29300$1LXXoO
                                                  g$y-pat$29301$1LXXoO
                                                  g$r$29302$1LXXoO)
                                                ((case-lambda
                                                   ((g$r$29303$1LXXoO
                                                      g$y-pat$29304$1LXXoO
                                                      g$xr*$29305$1LXXoO)
                                                    (if g$r$29303$1LXXoO
                                                      (if (null?
                                                            g$y-pat$29304$1LXXoO)
                                                        (begin
                                                          '#f
                                                          (if (null?
                                                                g$xr*$29305$1LXXoO)
                                                            (g$match-empty$29269$1LXXoO
                                                              (g$vector-ref$20070$1LXXoO
                                                                g$p$29289$1LXXoO
                                                                '1)
                                                              g$r$29303$1LXXoO)
                                                            (g$combine$29270$1LXXoO
                                                              g$xr*$29305$1LXXoO
                                                              g$r$29303$1LXXoO)))
                                                        '#f)
                                                      '#f)))
                                                 g$r$29302$1LXXoO
                                                 g$y-pat$29301$1LXXoO
                                                 g$xr*$29300$1LXXoO))))
                                           (if (eqv?
                                                 g$t$29295$1LXXoO
                                                 'atom)
                                             (if (equal?
                                                   (g$vector-ref$20070$1LXXoO
                                                     g$p$29289$1LXXoO
                                                     '1)
                                                   (g$strip$27103$1LXXoO
                                                     g$e$29288$1LXXoO
                                                     g$m*$29290$1LXXoO))
                                               (begin
                                                 '#f
                                                 g$r$29293$1LXXoO)
                                               '#f)
                                             (if (eqv?
                                                   g$t$29295$1LXXoO
                                                   'vector)
                                               (if (g$vector?$20055$1LXXoO
                                                     g$e$29288$1LXXoO)
                                                 (begin
                                                   '#f
                                                   (g$match$29272$1LXXoO
                                                     (vector->list
                                                       g$e$29288$1LXXoO)
                                                     (g$vector-ref$20070$1LXXoO
                                                       g$p$29289$1LXXoO
                                                       '1)
                                                     g$m*$29290$1LXXoO
                                                     g$s*$29291$1LXXoO
                                                     g$ae*$29292$1LXXoO
                                                     g$r$29293$1LXXoO))
                                                 '#f)
                                               (begin
                                                 '#f
                                                 (assertion-violation
                                                   'syntax-dispatch
                                                   '"invalid pattern"
                                                   g$p$29289$1LXXoO))))))))))
                                (g$vector-ref$20070$1LXXoO
                                  g$p$29289$1LXXoO
                                  '0)))))))))
                  (g$match$29272$1LXXoO
                    (case-lambda
                      ((g$e$29273$1LXXoO
                         g$p$29274$1LXXoO
                         g$m*$29275$1LXXoO
                         g$s*$29276$1LXXoO
                         g$ae*$29277$1LXXoO
                         g$r$29278$1LXXoO)
                       (if (not g$r$29278$1LXXoO)
                         '#f
                         (if (eq? g$p$29274$1LXXoO '_)
                           g$r$29278$1LXXoO
                           (if (eq? g$p$29274$1LXXoO 'any)
                             (cons
                               (g$stx^$29265$1LXXoO
                                 g$e$29273$1LXXoO
                                 g$m*$29275$1LXXoO
                                 g$s*$29276$1LXXoO
                                 g$ae*$29277$1LXXoO)
                               g$r$29278$1LXXoO)
                             (if (g$stx?$27065$1LXXoO g$e$29273$1LXXoO)
                               (if (not (g$top-marked?$27027$1LXXoO
                                          g$m*$29275$1LXXoO))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$27080$1LXXoO
                                          g$m*$29275$1LXXoO
                                          g$s*$29276$1LXXoO
                                          g$ae*$29277$1LXXoO
                                          g$e$29273$1LXXoO)))
                                     (case-lambda
                                       ((g$m*$29282$1LXXoO
                                          g$s*$29283$1LXXoO
                                          g$ae*$29284$1LXXoO)
                                        ((case-lambda
                                           ((g$ae*$29285$1LXXoO
                                              g$s*$29286$1LXXoO
                                              g$m*$29287$1LXXoO)
                                            (g$match$29272$1LXXoO
                                              (g$stx-expr$27067$1LXXoO
                                                g$e$29273$1LXXoO)
                                              g$p$29274$1LXXoO
                                              g$m*$29287$1LXXoO
                                              g$s*$29286$1LXXoO
                                              g$ae*$29285$1LXXoO
                                              g$r$29278$1LXXoO)))
                                         g$ae*$29284$1LXXoO
                                         g$s*$29283$1LXXoO
                                         g$m*$29282$1LXXoO)))))
                                 '#f)
                               (if (annotation? g$e$29273$1LXXoO)
                                 (g$match$29272$1LXXoO
                                   (annotation-expression
                                     g$e$29273$1LXXoO)
                                   g$p$29274$1LXXoO
                                   g$m*$29275$1LXXoO
                                   g$s*$29276$1LXXoO
                                   g$ae*$29277$1LXXoO
                                   g$r$29278$1LXXoO)
                                 (begin
                                   '#f
                                   (g$match*$29271$1LXXoO
                                     g$e$29273$1LXXoO
                                     g$p$29274$1LXXoO
                                     g$m*$29275$1LXXoO
                                     g$s*$29276$1LXXoO
                                     g$ae*$29277$1LXXoO
                                     g$r$29278$1LXXoO)))))))))))
          (g$match$29272$1LXXoO
            g$e$29263$1LXXoO
            g$p$29264$1LXXoO
            '()
            '()
            '()
            '())))))
   (g$ellipsis?$27592$1LXXoO
     g$ellipsis?$31188$1LXXoO
     (case-lambda
       ((g$x$29377$1LXXoO)
        (if (g$id?$27093$1LXXoO g$x$29377$1LXXoO)
          (begin
            '#f
            (g$free-id=?$27097$1LXXoO
              g$x$29377$1LXXoO
              (g$scheme-stx$27534$1LXXoO '...)))
          '#f))))
   (g$underscore?$27593$1LXXoO
     g$underscore?$31189$1LXXoO
     (case-lambda
       ((g$x$29378$1LXXoO)
        (if (g$id?$27093$1LXXoO g$x$29378$1LXXoO)
          (begin
            '#f
            (g$free-id=?$27097$1LXXoO
              g$x$29378$1LXXoO
              (g$scheme-stx$27534$1LXXoO '_)))
          '#f))))
   (g$verify-literals$27594$1LXXoO
     g$verify-literals$31190$1LXXoO
     (case-lambda
       ((g$lits$29379$1LXXoO g$expr$29380$1LXXoO)
        (g$for-each$19226$1LXXoO
          (case-lambda
            ((g$x$29381$1LXXoO)
             (if ((case-lambda
                    ((g$t$29382$1LXXoO)
                     (if g$t$29382$1LXXoO
                       g$t$29382$1LXXoO
                       ((case-lambda
                          ((g$t$29383$1LXXoO)
                           (if g$t$29383$1LXXoO
                             g$t$29383$1LXXoO
                             (begin
                               '#f
                               (g$underscore?$27593$1LXXoO
                                 g$x$29381$1LXXoO)))))
                        (g$ellipsis?$27592$1LXXoO g$x$29381$1LXXoO)))))
                  (not (g$id?$27093$1LXXoO g$x$29381$1LXXoO)))
               (g$syntax-violation$27710$1LXXoO
                 '#f
                 '"invalid literal"
                 g$expr$29380$1LXXoO
                 g$x$29381$1LXXoO)
               (void))))
          g$lits$29379$1LXXoO))))
   (g$syntax-case-transformer$27595$1LXXoO
     g$syntax-case-transformer$31191$1LXXoO
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$29384$1LXXoO
                     (case-lambda
                       ((g$pvars$29441$1LXXoO
                          g$expr$29442$1LXXoO
                          g$y$29443$1LXXoO
                          g$r$29444$1LXXoO
                          g$mr$29445$1LXXoO)
                        ((case-lambda
                           ((g$ids$29446$1LXXoO g$levels$29447$1LXXoO)
                            ((case-lambda
                               ((g$labels$29448$1LXXoO
                                  g$new-vars$29449$1LXXoO)
                                ((case-lambda
                                   ((g$body$29450$1LXXoO)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$27015$1LXXoO
                                        '#f
                                        g$new-vars$29449$1LXXoO
                                        g$body$29450$1LXXoO)
                                      g$y$29443$1LXXoO)))
                                 (g$chi-expr$27609$1LXXoO
                                   (g$add-subst$27083$1LXXoO
                                     (g$make-full-rib$27059$1LXXoO
                                       g$ids$29446$1LXXoO
                                       g$labels$29448$1LXXoO)
                                     g$expr$29442$1LXXoO)
                                   (append
                                     (g$map$19225$1LXXoO
                                       (case-lambda
                                         ((g$label$29451$1LXXoO
                                            g$var$29452$1LXXoO
                                            g$level$29453$1LXXoO)
                                          (cons
                                            g$label$29451$1LXXoO
                                            (g$make-binding$27109$1LXXoO
                                              'syntax
                                              (cons
                                                g$var$29452$1LXXoO
                                                g$level$29453$1LXXoO)))))
                                       g$labels$29448$1LXXoO
                                       g$new-vars$29449$1LXXoO
                                       (g$map$19225$1LXXoO
                                         cdr
                                         g$pvars$29441$1LXXoO))
                                     g$r$29444$1LXXoO)
                                   g$mr$29445$1LXXoO))))
                             (g$map$19225$1LXXoO
                               g$gen-label$27030$1LXXoO
                               g$ids$29446$1LXXoO)
                             (g$map$19225$1LXXoO
                               g$gen-lexical$27028$1LXXoO
                               g$ids$29446$1LXXoO))))
                         (g$map$19225$1LXXoO car g$pvars$29441$1LXXoO)
                         (g$map$19225$1LXXoO
                           cdr
                           g$pvars$29441$1LXXoO)))))
                   (g$invalid-ids-error$29385$1LXXoO
                     (case-lambda
                       ((g$id*$29435$1LXXoO
                          g$e$29436$1LXXoO
                          g$class$29437$1LXXoO)
                        ((letrec ((g$find$29438$1LXXoO
                                    (case-lambda
                                      ((g$id*$29439$1LXXoO
                                         g$ok*$29440$1LXXoO)
                                       (if (null? g$id*$29439$1LXXoO)
                                         (g$syntax-violation$27710$1LXXoO
                                           '#f
                                           '"invalid syntax"
                                           g$e$29436$1LXXoO)
                                         (if (g$id?$27093$1LXXoO
                                               (car g$id*$29439$1LXXoO))
                                           (if (g$bound-id-member?$27100$1LXXoO
                                                 (car g$id*$29439$1LXXoO)
                                                 g$ok*$29440$1LXXoO)
                                             (g$syntax-error$27707$1LXXoO
                                               (car g$id*$29439$1LXXoO)
                                               '"duplicate "
                                               g$class$29437$1LXXoO)
                                             (g$find$29438$1LXXoO
                                               (cdr g$id*$29439$1LXXoO)
                                               (cons
                                                 (car g$id*$29439$1LXXoO)
                                                 g$ok*$29440$1LXXoO)))
                                           (g$syntax-error$27707$1LXXoO
                                             (car g$id*$29439$1LXXoO)
                                             '"invalid "
                                             g$class$29437$1LXXoO)))))))
                           g$find$29438$1LXXoO)
                         g$id*$29435$1LXXoO
                         '()))))
                   (g$gen-clause$29386$1LXXoO
                     (case-lambda
                       ((g$x$29415$1LXXoO
                          g$keys$29416$1LXXoO
                          g$clauses$29417$1LXXoO
                          g$r$29418$1LXXoO
                          g$mr$29419$1LXXoO
                          g$pat$29420$1LXXoO
                          g$fender$29421$1LXXoO
                          g$expr$29422$1LXXoO)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$27590$1LXXoO
                               g$pat$29420$1LXXoO
                               g$keys$29416$1LXXoO)))
                          (case-lambda
                            ((g$p$29425$1LXXoO g$pvars$29426$1LXXoO)
                             ((case-lambda
                                ((g$pvars$29427$1LXXoO g$p$29428$1LXXoO)
                                 (if (not (g$distinct-bound-ids?$27099$1LXXoO
                                            (g$map$19225$1LXXoO
                                              car
                                              g$pvars$29427$1LXXoO)))
                                   (g$invalid-ids-error$29385$1LXXoO
                                     (g$map$19225$1LXXoO
                                       car
                                       g$pvars$29427$1LXXoO)
                                     g$pat$29420$1LXXoO
                                     '"pattern variable")
                                   (if (not (g$for-all$19223$1LXXoO
                                              (case-lambda
                                                ((g$x$29429$1LXXoO)
                                                 (not (g$ellipsis?$27592$1LXXoO
                                                        (car g$x$29429$1LXXoO)))))
                                              g$pvars$29427$1LXXoO))
                                     (g$syntax-violation$27710$1LXXoO
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$29420$1LXXoO)
                                     (begin
                                       '#f
                                       ((case-lambda
                                          ((g$y$29430$1LXXoO)
                                           ((case-lambda
                                              ((g$test$29431$1LXXoO)
                                               ((case-lambda
                                                  ((g$conseq$29432$1LXXoO)
                                                   ((case-lambda
                                                      ((g$altern$29433$1LXXoO)
                                                       (list
                                                         (g$build-lambda$27015$1LXXoO
                                                           '#f
                                                           (list
                                                             g$y$29430$1LXXoO)
                                                           (list
                                                             'if
                                                             g$test$29431$1LXXoO
                                                             g$conseq$29432$1LXXoO
                                                             g$altern$29433$1LXXoO))
                                                         (list
                                                           '(primitive
                                                              syntax-dispatch)
                                                           g$x$29415$1LXXoO
                                                           (list
                                                             'quote
                                                             g$p$29428$1LXXoO)))))
                                                    (g$gen-syntax-case$29387$1LXXoO
                                                      g$x$29415$1LXXoO
                                                      g$keys$29416$1LXXoO
                                                      g$clauses$29417$1LXXoO
                                                      g$r$29418$1LXXoO
                                                      g$mr$29419$1LXXoO))))
                                                (g$build-dispatch-call$29384$1LXXoO
                                                  g$pvars$29427$1LXXoO
                                                  g$expr$29422$1LXXoO
                                                  g$y$29430$1LXXoO
                                                  g$r$29418$1LXXoO
                                                  g$mr$29419$1LXXoO))))
                                            (if (eq? g$fender$29421$1LXXoO
                                                     '#t)
                                              g$y$29430$1LXXoO
                                              (begin
                                                '#f
                                                ((case-lambda
                                                   ((g$call$29434$1LXXoO)
                                                    (list
                                                      'if
                                                      g$y$29430$1LXXoO
                                                      g$call$29434$1LXXoO
                                                      (list
                                                        'quote
                                                        '#f))))
                                                 (g$build-dispatch-call$29384$1LXXoO
                                                   g$pvars$29427$1LXXoO
                                                   g$fender$29421$1LXXoO
                                                   g$y$29430$1LXXoO
                                                   g$r$29418$1LXXoO
                                                   g$mr$29419$1LXXoO)))))))
                                        (g$gen-lexical$27028$1LXXoO
                                          'tmp)))))))
                              g$pvars$29426$1LXXoO
                              g$p$29425$1LXXoO)))))))
                   (g$gen-syntax-case$29387$1LXXoO
                     (case-lambda
                       ((g$x$29398$1LXXoO
                          g$keys$29399$1LXXoO
                          g$clauses$29400$1LXXoO
                          g$r$29401$1LXXoO
                          g$mr$29402$1LXXoO)
                        (if (null? g$clauses$29400$1LXXoO)
                          (list
                            '(primitive syntax-error)
                            g$x$29398$1LXXoO)
                          ((case-lambda
                             ((g$t$29403$1LXXoO)
                              ((case-lambda
                                 ((g$ls/false$29404$1LXXoO)
                                  (if g$ls/false$29404$1LXXoO
                                    (apply
                                      (case-lambda
                                        ((g$pat$29405$1LXXoO
                                           g$expr$29406$1LXXoO)
                                         (if (if (g$id?$27093$1LXXoO
                                                   g$pat$29405$1LXXoO)
                                               (if (not (g$bound-id-member?$27100$1LXXoO
                                                          g$pat$29405$1LXXoO
                                                          g$keys$29399$1LXXoO))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$27592$1LXXoO
                                                          g$pat$29405$1LXXoO)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$27097$1LXXoO
                                                 g$pat$29405$1LXXoO
                                                 (g$scheme-stx$27534$1LXXoO
                                                   '_))
                                             (g$chi-expr$27609$1LXXoO
                                               g$expr$29406$1LXXoO
                                               g$r$29401$1LXXoO
                                               g$mr$29402$1LXXoO)
                                             ((case-lambda
                                                ((g$lab$29407$1LXXoO
                                                   g$lex$29408$1LXXoO)
                                                 ((case-lambda
                                                    ((g$body$29409$1LXXoO)
                                                     (list
                                                       (g$build-lambda$27015$1LXXoO
                                                         '#f
                                                         (list
                                                           g$lex$29408$1LXXoO)
                                                         g$body$29409$1LXXoO)
                                                       g$x$29398$1LXXoO)))
                                                  (g$chi-expr$27609$1LXXoO
                                                    (g$add-subst$27083$1LXXoO
                                                      (g$make-full-rib$27059$1LXXoO
                                                        (list
                                                          g$pat$29405$1LXXoO)
                                                        (list
                                                          g$lab$29407$1LXXoO))
                                                      g$expr$29406$1LXXoO)
                                                    (cons
                                                      (cons
                                                        g$lab$29407$1LXXoO
                                                        (g$make-binding$27109$1LXXoO
                                                          'syntax
                                                          (cons
                                                            g$lex$29408$1LXXoO
                                                            '0)))
                                                      g$r$29401$1LXXoO)
                                                    g$mr$29402$1LXXoO))))
                                              (g$gen-label$27030$1LXXoO
                                                g$pat$29405$1LXXoO)
                                              (g$gen-lexical$27028$1LXXoO
                                                g$pat$29405$1LXXoO)))
                                           (g$gen-clause$29386$1LXXoO
                                             g$x$29398$1LXXoO
                                             g$keys$29399$1LXXoO
                                             (cdr g$clauses$29400$1LXXoO)
                                             g$r$29401$1LXXoO
                                             g$mr$29402$1LXXoO
                                             g$pat$29405$1LXXoO
                                             '#t
                                             g$expr$29406$1LXXoO))))
                                      g$ls/false$29404$1LXXoO)
                                    ((case-lambda
                                       ((g$t$29410$1LXXoO)
                                        ((case-lambda
                                           ((g$ls/false$29411$1LXXoO)
                                            (if g$ls/false$29411$1LXXoO
                                              (apply
                                                (case-lambda
                                                  ((g$pat$29412$1LXXoO
                                                     g$fender$29413$1LXXoO
                                                     g$expr$29414$1LXXoO)
                                                   (g$gen-clause$29386$1LXXoO
                                                     g$x$29398$1LXXoO
                                                     g$keys$29399$1LXXoO
                                                     (cdr g$clauses$29400$1LXXoO)
                                                     g$r$29401$1LXXoO
                                                     g$mr$29402$1LXXoO
                                                     g$pat$29412$1LXXoO
                                                     g$fender$29413$1LXXoO
                                                     g$expr$29414$1LXXoO)))
                                                g$ls/false$29411$1LXXoO)
                                              (g$syntax-violation$27710$1LXXoO
                                                '#f
                                                '"invalid syntax"
                                                g$t$29410$1LXXoO))))
                                         (g$syntax-dispatch$27591$1LXXoO
                                           g$t$29410$1LXXoO
                                           '(any any any)))))
                                     g$t$29403$1LXXoO))))
                               (g$syntax-dispatch$27591$1LXXoO
                                 g$t$29403$1LXXoO
                                 '(any any)))))
                           (car g$clauses$29400$1LXXoO)))))))
           (case-lambda
             ((g$e$29388$1LXXoO g$r$29389$1LXXoO g$mr$29390$1LXXoO)
              ((case-lambda
                 ((g$t$29391$1LXXoO)
                  ((case-lambda
                     ((g$ls/false$29392$1LXXoO)
                      (if g$ls/false$29392$1LXXoO
                        (apply
                          (case-lambda
                            ((g$expr$29393$1LXXoO
                               g$keys$29394$1LXXoO
                               g$clauses$29395$1LXXoO)
                             (begin
                               (g$verify-literals$27594$1LXXoO
                                 g$keys$29394$1LXXoO
                                 g$e$29388$1LXXoO)
                               ((case-lambda
                                  ((g$x$29396$1LXXoO)
                                   ((case-lambda
                                      ((g$body$29397$1LXXoO)
                                       (list
                                         (g$build-lambda$27015$1LXXoO
                                           '#f
                                           (list g$x$29396$1LXXoO)
                                           g$body$29397$1LXXoO)
                                         (g$chi-expr$27609$1LXXoO
                                           g$expr$29393$1LXXoO
                                           g$r$29389$1LXXoO
                                           g$mr$29390$1LXXoO))))
                                    (g$gen-syntax-case$29387$1LXXoO
                                      g$x$29396$1LXXoO
                                      g$keys$29394$1LXXoO
                                      g$clauses$29395$1LXXoO
                                      g$r$29389$1LXXoO
                                      g$mr$29390$1LXXoO))))
                                (g$gen-lexical$27028$1LXXoO 'tmp)))))
                          g$ls/false$29392$1LXXoO)
                        (g$syntax-violation$27710$1LXXoO
                          '#f
                          '"invalid syntax"
                          g$t$29391$1LXXoO))))
                   (g$syntax-dispatch$27591$1LXXoO
                     g$t$29391$1LXXoO
                     '(_ any each-any . each-any)))))
               g$e$29388$1LXXoO))))))))
   (g$ellipsis-map$27596$1LXXoO
     g$ellipsis-map$31192$1LXXoO
     (case-lambda
       ((g$proc$29454$1LXXoO g$ls$29455$1LXXoO . g$ls*$29456$1LXXoO)
        (letrec* ((g$who$29457$1LXXoO '...))
          (begin
            (if (not (list? g$ls$29455$1LXXoO))
              (assertion-violation
                g$who$29457$1LXXoO
                '"not a list"
                g$ls$29455$1LXXoO)
              (void))
            (if (not (null? g$ls*$29456$1LXXoO))
              ((case-lambda
                 ((g$n$29458$1LXXoO)
                  (g$for-each$19226$1LXXoO
                    (case-lambda
                      ((g$x$29459$1LXXoO)
                       (begin
                         (if (not (list? g$x$29459$1LXXoO))
                           (assertion-violation
                             g$who$29457$1LXXoO
                             '"not a list"
                             g$x$29459$1LXXoO)
                           (void))
                         (if (not (g$=$20714$1LXXoO
                                    (length g$x$29459$1LXXoO)
                                    g$n$29458$1LXXoO))
                           (assertion-violation
                             g$who$29457$1LXXoO
                             '"length mismatch"
                             g$ls$29455$1LXXoO
                             g$x$29459$1LXXoO)
                           (void)))))
                    g$ls*$29456$1LXXoO)))
               (length g$ls$29455$1LXXoO))
              (void))
            (apply
              g$map$19225$1LXXoO
              g$proc$29454$1LXXoO
              g$ls$29455$1LXXoO
              g$ls*$29456$1LXXoO))))))
   (g$syntax-transformer$27597$1LXXoO
     g$syntax-transformer$31193$1LXXoO
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$29460$1LXXoO
                     (case-lambda
                       ((g$src$29520$1LXXoO
                          g$e$29521$1LXXoO
                          g$r$29522$1LXXoO
                          g$maps$29523$1LXXoO
                          g$ellipsis?$29524$1LXXoO
                          g$vec?$29525$1LXXoO)
                        ((case-lambda
                           ((g$t$29526$1LXXoO)
                            ((case-lambda
                               ((g$ls/false$29527$1LXXoO)
                                (if (if g$ls/false$29527$1LXXoO
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$29528$1LXXoO)
                                             (g$ellipsis?$29524$1LXXoO
                                               g$dots$29528$1LXXoO)))
                                          g$ls/false$29527$1LXXoO))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$29529$1LXXoO)
                                       (g$syntax-violation$27710$1LXXoO
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$29520$1LXXoO)))
                                    g$ls/false$29527$1LXXoO)
                                  ((case-lambda
                                     ((g$t$29530$1LXXoO)
                                      ((case-lambda
                                         ((g$ls/false$29531$1LXXoO)
                                          (if (if g$ls/false$29531$1LXXoO
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$29532$1LXXoO)
                                                       (g$id?$27093$1LXXoO
                                                         g$id$29532$1LXXoO)))
                                                    g$ls/false$29531$1LXXoO))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$29533$1LXXoO)
                                                 ((case-lambda
                                                    ((g$label$29534$1LXXoO)
                                                     ((case-lambda
                                                        ((g$b$29535$1LXXoO)
                                                         (if (eq? (g$binding-type$27110$1LXXoO
                                                                    g$b$29535$1LXXoO)
                                                                  'syntax)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$var.lev$29538$1LXXoO)
                                                                    (g$gen-ref$29461$1LXXoO
                                                                      g$src$29520$1LXXoO
                                                                      (car g$var.lev$29538$1LXXoO)
                                                                      (cdr g$var.lev$29538$1LXXoO)
                                                                      g$maps$29523$1LXXoO)))
                                                                 (g$binding-value$27111$1LXXoO
                                                                   g$b$29535$1LXXoO))))
                                                             (case-lambda
                                                               ((g$var$29539$1LXXoO
                                                                  g$maps$29540$1LXXoO)
                                                                ((case-lambda
                                                                   ((g$maps$29541$1LXXoO
                                                                      g$var$29542$1LXXoO)
                                                                    (values
                                                                      (list
                                                                        'ref
                                                                        g$var$29542$1LXXoO)
                                                                      g$maps$29541$1LXXoO)))
                                                                 g$maps$29540$1LXXoO
                                                                 g$var$29539$1LXXoO))))
                                                           (values
                                                             (list
                                                               'quote
                                                               g$e$29521$1LXXoO)
                                                             g$maps$29523$1LXXoO))))
                                                      (g$label->binding$27108$1LXXoO
                                                        g$label$29534$1LXXoO
                                                        g$r$29522$1LXXoO))))
                                                  (g$id->label$27106$1LXXoO
                                                    g$e$29521$1LXXoO))))
                                              g$ls/false$29531$1LXXoO)
                                            ((case-lambda
                                               ((g$t$29543$1LXXoO)
                                                ((case-lambda
                                                   ((g$ls/false$29544$1LXXoO)
                                                    (if (if g$ls/false$29544$1LXXoO
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$29545$1LXXoO
                                                                   g$e$29546$1LXXoO)
                                                                 (g$ellipsis?$29524$1LXXoO
                                                                   g$dots$29545$1LXXoO)))
                                                              g$ls/false$29544$1LXXoO))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$29547$1LXXoO
                                                             g$e$29548$1LXXoO)
                                                           (if g$vec?$29525$1LXXoO
                                                             (g$syntax-violation$27710$1LXXoO
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$29520$1LXXoO)
                                                             (g$gen-syntax$29460$1LXXoO
                                                               g$src$29520$1LXXoO
                                                               g$e$29548$1LXXoO
                                                               g$r$29522$1LXXoO
                                                               g$maps$29523$1LXXoO
                                                               (case-lambda
                                                                 ((g$x$29549$1LXXoO)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$29544$1LXXoO)
                                                      ((case-lambda
                                                         ((g$t$29550$1LXXoO)
                                                          ((case-lambda
                                                             ((g$ls/false$29551$1LXXoO)
                                                              (if (if g$ls/false$29551$1LXXoO
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$29552$1LXXoO
                                                                             g$dots$29553$1LXXoO
                                                                             g$y$29554$1LXXoO)
                                                                           (g$ellipsis?$29524$1LXXoO
                                                                             g$dots$29553$1LXXoO)))
                                                                        g$ls/false$29551$1LXXoO))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$29555$1LXXoO
                                                                       g$dots$29556$1LXXoO
                                                                       g$y$29557$1LXXoO)
                                                                     ((letrec ((g$f$29558$1LXXoO
                                                                                 (case-lambda
                                                                                   ((g$y$29559$1LXXoO
                                                                                      g$k$29560$1LXXoO)
                                                                                    ((case-lambda
                                                                                       ((g$t$29561$1LXXoO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$29562$1LXXoO)
                                                                                            (if g$ls/false$29562$1LXXoO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$29560$1LXXoO
                                                                                                     g$maps$29523$1LXXoO)))
                                                                                                g$ls/false$29562$1LXXoO)
                                                                                              ((case-lambda
                                                                                                 ((g$t$29563$1LXXoO)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$29564$1LXXoO)
                                                                                                      (if (if g$ls/false$29564$1LXXoO
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$29565$1LXXoO
                                                                                                                     g$y$29566$1LXXoO)
                                                                                                                   (g$ellipsis?$29524$1LXXoO
                                                                                                                     g$dots$29565$1LXXoO)))
                                                                                                                g$ls/false$29564$1LXXoO))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$29567$1LXXoO
                                                                                                               g$y$29568$1LXXoO)
                                                                                                             (g$f$29558$1LXXoO
                                                                                                               g$y$29568$1LXXoO
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$29569$1LXXoO)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$29560$1LXXoO
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$29569$1LXXoO))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$29572$1LXXoO
                                                                                                                         g$maps$29573$1LXXoO)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$29574$1LXXoO
                                                                                                                             g$x$29575$1LXXoO)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$29574$1LXXoO))
                                                                                                                             (g$syntax-violation$27710$1LXXoO
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$29520$1LXXoO)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$29463$1LXXoO
                                                                                                                                 g$x$29575$1LXXoO
                                                                                                                                 (car g$maps$29574$1LXXoO))
                                                                                                                               (cdr g$maps$29574$1LXXoO)))))
                                                                                                                        g$maps$29573$1LXXoO
                                                                                                                        g$x$29572$1LXXoO)))))))))
                                                                                                          g$ls/false$29564$1LXXoO)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$29576$1LXXoO)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$29577$1LXXoO)
                                                                                                                (if g$ls/false$29577$1LXXoO
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$29460$1LXXoO
                                                                                                                              g$src$29520$1LXXoO
                                                                                                                              g$y$29559$1LXXoO
                                                                                                                              g$r$29522$1LXXoO
                                                                                                                              g$maps$29523$1LXXoO
                                                                                                                              g$ellipsis?$29524$1LXXoO
                                                                                                                              g$vec?$29525$1LXXoO)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$29580$1LXXoO
                                                                                                                              g$maps$29581$1LXXoO)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$29582$1LXXoO
                                                                                                                                  g$y$29583$1LXXoO)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$29560$1LXXoO
                                                                                                                                       g$maps$29582$1LXXoO)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$29586$1LXXoO
                                                                                                                                       g$maps$29587$1LXXoO)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$29588$1LXXoO
                                                                                                                                           g$x$29589$1LXXoO)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$29462$1LXXoO
                                                                                                                                             g$x$29589$1LXXoO
                                                                                                                                             g$y$29583$1LXXoO)
                                                                                                                                           g$maps$29588$1LXXoO)))
                                                                                                                                      g$maps$29587$1LXXoO
                                                                                                                                      g$x$29586$1LXXoO))))))
                                                                                                                             g$maps$29581$1LXXoO
                                                                                                                             g$y$29580$1LXXoO))))))
                                                                                                                    g$ls/false$29577$1LXXoO)
                                                                                                                  (g$syntax-violation$27710$1LXXoO
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$29576$1LXXoO))))
                                                                                                             (g$syntax-dispatch$27591$1LXXoO
                                                                                                               g$t$29576$1LXXoO
                                                                                                               '_))))
                                                                                                         g$t$29563$1LXXoO))))
                                                                                                   (g$syntax-dispatch$27591$1LXXoO
                                                                                                     g$t$29563$1LXXoO
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$29561$1LXXoO))))
                                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                                           g$t$29561$1LXXoO
                                                                                           '()))))
                                                                                     g$y$29559$1LXXoO)))))
                                                                        g$f$29558$1LXXoO)
                                                                      g$y$29557$1LXXoO
                                                                      (case-lambda
                                                                        ((g$maps$29590$1LXXoO)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$29460$1LXXoO
                                                                                g$src$29520$1LXXoO
                                                                                g$x$29555$1LXXoO
                                                                                g$r$29522$1LXXoO
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$29590$1LXXoO)
                                                                                g$ellipsis?$29524$1LXXoO
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$29593$1LXXoO
                                                                                g$maps$29594$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$maps$29595$1LXXoO
                                                                                    g$x$29596$1LXXoO)
                                                                                  (if (null?
                                                                                        (car g$maps$29595$1LXXoO))
                                                                                    (g$syntax-violation$27710$1LXXoO
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$29520$1LXXoO)
                                                                                    (values
                                                                                      (g$gen-map$29464$1LXXoO
                                                                                        g$x$29596$1LXXoO
                                                                                        (car g$maps$29595$1LXXoO))
                                                                                      (cdr g$maps$29595$1LXXoO)))))
                                                                               g$maps$29594$1LXXoO
                                                                               g$x$29593$1LXXoO)))))))))
                                                                  g$ls/false$29551$1LXXoO)
                                                                ((case-lambda
                                                                   ((g$t$29597$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$ls/false$29598$1LXXoO)
                                                                        (if g$ls/false$29598$1LXXoO
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$29599$1LXXoO
                                                                                 g$y$29600$1LXXoO)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$29460$1LXXoO
                                                                                      g$src$29520$1LXXoO
                                                                                      g$x$29599$1LXXoO
                                                                                      g$r$29522$1LXXoO
                                                                                      g$maps$29523$1LXXoO
                                                                                      g$ellipsis?$29524$1LXXoO
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$29603$1LXXoO
                                                                                      g$maps$29604$1LXXoO)
                                                                                    ((case-lambda
                                                                                       ((g$maps$29605$1LXXoO
                                                                                          g$xnew$29606$1LXXoO)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$29460$1LXXoO
                                                                                               g$src$29520$1LXXoO
                                                                                               g$y$29600$1LXXoO
                                                                                               g$r$29522$1LXXoO
                                                                                               g$maps$29605$1LXXoO
                                                                                               g$ellipsis?$29524$1LXXoO
                                                                                               g$vec?$29525$1LXXoO)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$29609$1LXXoO
                                                                                               g$maps$29610$1LXXoO)
                                                                                             ((case-lambda
                                                                                                ((g$maps$29611$1LXXoO
                                                                                                   g$ynew$29612$1LXXoO)
                                                                                                 (values
                                                                                                   (g$gen-cons$29465$1LXXoO
                                                                                                     g$e$29521$1LXXoO
                                                                                                     g$x$29599$1LXXoO
                                                                                                     g$y$29600$1LXXoO
                                                                                                     g$xnew$29606$1LXXoO
                                                                                                     g$ynew$29612$1LXXoO)
                                                                                                   g$maps$29611$1LXXoO)))
                                                                                              g$maps$29610$1LXXoO
                                                                                              g$ynew$29609$1LXXoO))))))
                                                                                     g$maps$29604$1LXXoO
                                                                                     g$xnew$29603$1LXXoO))))))
                                                                            g$ls/false$29598$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$t$29613$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$29614$1LXXoO)
                                                                                  (if g$ls/false$29614$1LXXoO
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$29615$1LXXoO)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$29460$1LXXoO
                                                                                                g$src$29520$1LXXoO
                                                                                                g$ls$29615$1LXXoO
                                                                                                g$r$29522$1LXXoO
                                                                                                g$maps$29523$1LXXoO
                                                                                                g$ellipsis?$29524$1LXXoO
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$29618$1LXXoO
                                                                                                g$maps$29619$1LXXoO)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$29620$1LXXoO
                                                                                                    g$lsnew$29621$1LXXoO)
                                                                                                  (values
                                                                                                    (g$gen-vector$29466$1LXXoO
                                                                                                      g$e$29521$1LXXoO
                                                                                                      g$ls$29615$1LXXoO
                                                                                                      g$lsnew$29621$1LXXoO)
                                                                                                    g$maps$29620$1LXXoO)))
                                                                                               g$maps$29619$1LXXoO
                                                                                               g$lsnew$29618$1LXXoO))))))
                                                                                      g$ls/false$29614$1LXXoO)
                                                                                    ((case-lambda
                                                                                       ((g$t$29622$1LXXoO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$29623$1LXXoO)
                                                                                            (if g$ls/false$29623$1LXXoO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$29521$1LXXoO)
                                                                                                     g$maps$29523$1LXXoO)))
                                                                                                g$ls/false$29623$1LXXoO)
                                                                                              (g$syntax-violation$27710$1LXXoO
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$29622$1LXXoO))))
                                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                                           g$t$29622$1LXXoO
                                                                                           '_))))
                                                                                     g$t$29613$1LXXoO))))
                                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                                 g$t$29613$1LXXoO
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$29597$1LXXoO))))
                                                                     (g$syntax-dispatch$27591$1LXXoO
                                                                       g$t$29597$1LXXoO
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$29550$1LXXoO))))
                                                           (g$syntax-dispatch$27591$1LXXoO
                                                             g$t$29550$1LXXoO
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$29543$1LXXoO))))
                                                 (g$syntax-dispatch$27591$1LXXoO
                                                   g$t$29543$1LXXoO
                                                   '(any any)))))
                                             g$t$29530$1LXXoO))))
                                       (g$syntax-dispatch$27591$1LXXoO
                                         g$t$29530$1LXXoO
                                         'any))))
                                   g$t$29526$1LXXoO))))
                             (g$syntax-dispatch$27591$1LXXoO
                               g$t$29526$1LXXoO
                               'any))))
                         g$e$29521$1LXXoO))))
                   (g$gen-ref$29461$1LXXoO
                     (case-lambda
                       ((g$src$29507$1LXXoO
                          g$var$29508$1LXXoO
                          g$level$29509$1LXXoO
                          g$maps$29510$1LXXoO)
                        (if (g$=$20714$1LXXoO g$level$29509$1LXXoO '0)
                          (values
                            g$var$29508$1LXXoO
                            g$maps$29510$1LXXoO)
                          (if (null? g$maps$29510$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$29507$1LXXoO)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$29461$1LXXoO
                                   g$src$29507$1LXXoO
                                   g$var$29508$1LXXoO
                                   (- g$level$29509$1LXXoO '1)
                                   (cdr g$maps$29510$1LXXoO))))
                              (case-lambda
                                ((g$outer-var$29513$1LXXoO
                                   g$outer-maps$29514$1LXXoO)
                                 ((case-lambda
                                    ((g$outer-maps$29515$1LXXoO
                                       g$outer-var$29516$1LXXoO)
                                     ((case-lambda
                                        ((g$t$29517$1LXXoO)
                                         (if g$t$29517$1LXXoO
                                           ((case-lambda
                                              ((g$b$29518$1LXXoO)
                                               (values
                                                 (cdr g$b$29518$1LXXoO)
                                                 g$maps$29510$1LXXoO)))
                                            g$t$29517$1LXXoO)
                                           (begin
                                             '#f
                                             ((case-lambda
                                                ((g$inner-var$29519$1LXXoO)
                                                 (values
                                                   g$inner-var$29519$1LXXoO
                                                   (cons
                                                     (cons
                                                       (cons
                                                         g$outer-var$29516$1LXXoO
                                                         g$inner-var$29519$1LXXoO)
                                                       (car g$maps$29510$1LXXoO))
                                                     g$outer-maps$29515$1LXXoO))))
                                              (g$gen-lexical$27028$1LXXoO
                                                'tmp))))))
                                      (g$assq$19213$1LXXoO
                                        g$outer-var$29516$1LXXoO
                                        (car g$maps$29510$1LXXoO)))))
                                  g$outer-maps$29514$1LXXoO
                                  g$outer-var$29513$1LXXoO)))))))))
                   (g$gen-append$29462$1LXXoO
                     (case-lambda
                       ((g$x$29505$1LXXoO g$y$29506$1LXXoO)
                        (if (equal? g$y$29506$1LXXoO ''())
                          g$x$29505$1LXXoO
                          (list
                            'append
                            g$x$29505$1LXXoO
                            g$y$29506$1LXXoO)))))
                   (g$gen-mappend$29463$1LXXoO
                     (case-lambda
                       ((g$e$29503$1LXXoO g$map-env$29504$1LXXoO)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$29464$1LXXoO
                            g$e$29503$1LXXoO
                            g$map-env$29504$1LXXoO)))))
                   (g$gen-map$29464$1LXXoO
                     (case-lambda
                       ((g$e$29494$1LXXoO g$map-env$29495$1LXXoO)
                        ((case-lambda
                           ((g$formals$29496$1LXXoO
                              g$actuals$29497$1LXXoO)
                            (if (eq? (car g$e$29494$1LXXoO) 'ref)
                              (car g$actuals$29497$1LXXoO)
                              (if (g$for-all$19223$1LXXoO
                                    (case-lambda
                                      ((g$x$29498$1LXXoO)
                                       (if (eq? (car g$x$29498$1LXXoO)
                                                'ref)
                                         (begin
                                           '#f
                                           (g$memq$19217$1LXXoO
                                             (g$cadr$20076$1LXXoO
                                               g$x$29498$1LXXoO)
                                             g$formals$29496$1LXXoO))
                                         '#f)))
                                    (cdr g$e$29494$1LXXoO))
                                ((case-lambda
                                   ((g$args$29499$1LXXoO)
                                    (cons
                                      'map
                                      (cons
                                        (list
                                          'primitive
                                          (car g$e$29494$1LXXoO))
                                        g$args$29499$1LXXoO))))
                                 (g$map$19225$1LXXoO
                                   ((case-lambda
                                      ((g$r$29500$1LXXoO)
                                       (case-lambda
                                         ((g$x$29501$1LXXoO)
                                          (cdr (g$assq$19213$1LXXoO
                                                 (g$cadr$20076$1LXXoO
                                                   g$x$29501$1LXXoO)
                                                 g$r$29500$1LXXoO))))))
                                    (g$map$19225$1LXXoO
                                      cons
                                      g$formals$29496$1LXXoO
                                      g$actuals$29497$1LXXoO))
                                   (cdr g$e$29494$1LXXoO)))
                                (begin
                                  '#f
                                  (g$cons*$19227$1LXXoO
                                    'map
                                    (list
                                      'lambda
                                      g$formals$29496$1LXXoO
                                      g$e$29494$1LXXoO)
                                    g$actuals$29497$1LXXoO))))))
                         (g$map$19225$1LXXoO cdr g$map-env$29495$1LXXoO)
                         (g$map$19225$1LXXoO
                           (case-lambda
                             ((g$x$29502$1LXXoO)
                              (list 'ref (car g$x$29502$1LXXoO))))
                           g$map-env$29495$1LXXoO)))))
                   (g$gen-cons$29465$1LXXoO
                     (case-lambda
                       ((g$e$29486$1LXXoO
                          g$x$29487$1LXXoO
                          g$y$29488$1LXXoO
                          g$xnew$29489$1LXXoO
                          g$ynew$29490$1LXXoO)
                        ((case-lambda
                           ((g$t$29491$1LXXoO)
                            (if (eqv? g$t$29491$1LXXoO 'quote)
                              (if (eq? (car g$xnew$29489$1LXXoO) 'quote)
                                ((case-lambda
                                   ((g$xnew$29492$1LXXoO
                                      g$ynew$29493$1LXXoO)
                                    (if (if (eq? g$xnew$29492$1LXXoO
                                                 g$x$29487$1LXXoO)
                                          (begin
                                            '#f
                                            (eq? g$ynew$29493$1LXXoO
                                                 g$y$29488$1LXXoO))
                                          '#f)
                                      (list 'quote g$e$29486$1LXXoO)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$29492$1LXXoO
                                          g$ynew$29493$1LXXoO)))))
                                 (g$cadr$20076$1LXXoO
                                   g$xnew$29489$1LXXoO)
                                 (g$cadr$20076$1LXXoO
                                   g$ynew$29490$1LXXoO))
                                (if (null?
                                      (g$cadr$20076$1LXXoO
                                        g$ynew$29490$1LXXoO))
                                  (list 'list g$xnew$29489$1LXXoO)
                                  (list
                                    'cons
                                    g$xnew$29489$1LXXoO
                                    g$ynew$29490$1LXXoO)))
                              (if (eqv? g$t$29491$1LXXoO 'list)
                                (cons
                                  'list
                                  (cons
                                    g$xnew$29489$1LXXoO
                                    (cdr g$ynew$29490$1LXXoO)))
                                (begin
                                  '#f
                                  (list
                                    'cons
                                    g$xnew$29489$1LXXoO
                                    g$ynew$29490$1LXXoO))))))
                         (car g$ynew$29490$1LXXoO)))))
                   (g$gen-vector$29466$1LXXoO
                     (case-lambda
                       ((g$e$29483$1LXXoO
                          g$ls$29484$1LXXoO
                          g$lsnew$29485$1LXXoO)
                        (if (eq? (car g$lsnew$29485$1LXXoO) 'quote)
                          (if (eq? (g$cadr$20076$1LXXoO
                                     g$lsnew$29485$1LXXoO)
                                   g$ls$29484$1LXXoO)
                            (list 'quote g$e$29483$1LXXoO)
                            (list
                              'quote
                              (g$list->vector$20068$1LXXoO
                                (g$cadr$20076$1LXXoO
                                  g$lsnew$29485$1LXXoO))))
                          (if (eq? (car g$lsnew$29485$1LXXoO) 'list)
                            (cons 'vector (cdr g$lsnew$29485$1LXXoO))
                            (begin
                              '#f
                              (list
                                'list->vector
                                g$lsnew$29485$1LXXoO)))))))
                   (g$regen$29467$1LXXoO
                     (case-lambda
                       ((g$x$29480$1LXXoO)
                        ((case-lambda
                           ((g$t$29481$1LXXoO)
                            (if (eqv? g$t$29481$1LXXoO 'ref)
                              (g$cadr$20076$1LXXoO g$x$29480$1LXXoO)
                              (if (eqv? g$t$29481$1LXXoO 'primitive)
                                (list
                                  'primitive
                                  (g$cadr$20076$1LXXoO
                                    g$x$29480$1LXXoO))
                                (if (eqv? g$t$29481$1LXXoO 'quote)
                                  (list
                                    'quote
                                    (g$cadr$20076$1LXXoO
                                      g$x$29480$1LXXoO))
                                  (if (eqv? g$t$29481$1LXXoO 'lambda)
                                    (g$build-lambda$27015$1LXXoO
                                      '#f
                                      (g$cadr$20076$1LXXoO
                                        g$x$29480$1LXXoO)
                                      (g$regen$29467$1LXXoO
                                        (g$caddr$20082$1LXXoO
                                          g$x$29480$1LXXoO)))
                                    (if (eqv? g$t$29481$1LXXoO 'map)
                                      ((case-lambda
                                         ((g$ls$29482$1LXXoO)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$29482$1LXXoO)))
                                       (g$map$19225$1LXXoO
                                         g$regen$29467$1LXXoO
                                         (cdr g$x$29480$1LXXoO)))
                                      (begin
                                        '#f
                                        (cons
                                          (list
                                            'primitive
                                            (car g$x$29480$1LXXoO))
                                          (g$map$19225$1LXXoO
                                            g$regen$29467$1LXXoO
                                            (cdr g$x$29480$1LXXoO)))))))))))
                         (car g$x$29480$1LXXoO))))))
           (case-lambda
             ((g$e$29468$1LXXoO g$r$29469$1LXXoO g$mr$29470$1LXXoO)
              ((case-lambda
                 ((g$t$29471$1LXXoO)
                  ((case-lambda
                     ((g$ls/false$29472$1LXXoO)
                      (if g$ls/false$29472$1LXXoO
                        (apply
                          (case-lambda
                            ((g$x$29473$1LXXoO)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$29460$1LXXoO
                                    g$e$29468$1LXXoO
                                    g$x$29473$1LXXoO
                                    g$r$29469$1LXXoO
                                    '()
                                    g$ellipsis?$27592$1LXXoO
                                    '#f)))
                               (case-lambda
                                 ((g$e$29476$1LXXoO g$maps$29477$1LXXoO)
                                  ((case-lambda
                                     ((g$maps$29478$1LXXoO
                                        g$e$29479$1LXXoO)
                                      (g$regen$29467$1LXXoO
                                        g$e$29479$1LXXoO)))
                                   g$maps$29477$1LXXoO
                                   g$e$29476$1LXXoO))))))
                          g$ls/false$29472$1LXXoO)
                        (g$syntax-violation$27710$1LXXoO
                          '#f
                          '"invalid syntax"
                          g$t$29471$1LXXoO))))
                   (g$syntax-dispatch$27591$1LXXoO
                     g$t$29471$1LXXoO
                     '(_ any)))))
               g$e$29468$1LXXoO))))))))
   (g$core-macro-transformer$27598$1LXXoO
     g$core-macro-transformer$31194$1LXXoO
     (case-lambda
       ((g$name$29624$1LXXoO)
        ((case-lambda
           ((g$t$29625$1LXXoO)
            (if (eqv? g$t$29625$1LXXoO 'quote)
              g$quote-transformer$27551$1LXXoO
              (if (eqv? g$t$29625$1LXXoO 'lambda)
                g$lambda-transformer$27553$1LXXoO
                (if (eqv? g$t$29625$1LXXoO 'case-lambda)
                  g$case-lambda-transformer$27552$1LXXoO
                  (if (eqv? g$t$29625$1LXXoO 'letrec)
                    g$letrec-transformer$27541$1LXXoO
                    (if (eqv? g$t$29625$1LXXoO 'letrec*)
                      g$letrec*-transformer$27542$1LXXoO
                      (if (eqv? g$t$29625$1LXXoO 'if)
                        g$if-transformer$27549$1LXXoO
                        (if (eqv? g$t$29625$1LXXoO 'foreign-call)
                          g$foreign-call-transformer$27589$1LXXoO
                          (if (eqv? g$t$29625$1LXXoO 'syntax-case)
                            g$syntax-case-transformer$27595$1LXXoO
                            (if (eqv? g$t$29625$1LXXoO 'syntax)
                              g$syntax-transformer$27597$1LXXoO
                              (if (eqv?
                                    g$t$29625$1LXXoO
                                    'type-descriptor)
                                g$type-descriptor-transformer$27544$1LXXoO
                                (if (eqv?
                                      g$t$29625$1LXXoO
                                      'record-type-descriptor)
                                  g$record-type-descriptor-transformer$27545$1LXXoO
                                  (if (eqv?
                                        g$t$29625$1LXXoO
                                        'record-constructor-descriptor)
                                    g$record-constructor-descriptor-transformer$27546$1LXXoO
                                    (if (eqv?
                                          g$t$29625$1LXXoO
                                          'fluid-let-syntax)
                                      g$fluid-let-syntax-transformer$27543$1LXXoO
                                      (begin
                                        '#f
                                        (assertion-violation
                                          'macro-transformer
                                          '"BUG: cannot find transformer"
                                          g$name$29624$1LXXoO)))))))))))))))))
         g$name$29624$1LXXoO))))
   (g$file-options-macro$27599$1LXXoO
     g$file-options-macro$31195$1LXXoO
     (case-lambda
       ((g$x$29626$1LXXoO)
        (letrec* ((g$valid-option?$29627$1LXXoO
                    (case-lambda
                      ((g$x$29632$1LXXoO)
                       (if (g$id?$27093$1LXXoO g$x$29632$1LXXoO)
                         (begin
                           '#f
                           (g$memq$19217$1LXXoO
                             (g$id->sym$27094$1LXXoO g$x$29632$1LXXoO)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$29628$1LXXoO)
              ((case-lambda
                 ((g$ls/false$29629$1LXXoO)
                  (if (if g$ls/false$29629$1LXXoO
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$29630$1LXXoO)
                               (if (g$for-all$19223$1LXXoO
                                     g$valid-option?$29627$1LXXoO
                                     g$opt*$29630$1LXXoO)
                                 (begin
                                   '#f
                                   (g$file-options-spec$25956$1LXXoO
                                     (g$map$19225$1LXXoO
                                       g$id->sym$27094$1LXXoO
                                       g$opt*$29630$1LXXoO)))
                                 '#f)))
                            g$ls/false$29629$1LXXoO))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$29631$1LXXoO)
                         (g$bless$27554$1LXXoO
                           (list
                             'quote
                             (g$file-options-spec$25956$1LXXoO
                               (g$map$19225$1LXXoO
                                 g$id->sym$27094$1LXXoO
                                 g$opt*$29631$1LXXoO))))))
                      g$ls/false$29629$1LXXoO)
                    (g$syntax-violation$27710$1LXXoO
                      '#f
                      '"invalid syntax"
                      g$t$29628$1LXXoO))))
               (g$syntax-dispatch$27591$1LXXoO
                 g$t$29628$1LXXoO
                 '(_ . each-any)))))
           g$x$29626$1LXXoO)))))
   (g$symbol-macro$27600$1LXXoO
     g$symbol-macro$31196$1LXXoO
     (case-lambda
       ((g$x$29633$1LXXoO g$set$29634$1LXXoO)
        ((case-lambda
           ((g$t$29635$1LXXoO)
            ((case-lambda
               ((g$ls/false$29636$1LXXoO)
                (if (if g$ls/false$29636$1LXXoO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$29637$1LXXoO)
                             (if (g$id?$27093$1LXXoO
                                   g$name$29637$1LXXoO)
                               (begin
                                 '#f
                                 (g$memq$19217$1LXXoO
                                   (g$id->sym$27094$1LXXoO
                                     g$name$29637$1LXXoO)
                                   g$set$29634$1LXXoO))
                               '#f)))
                          g$ls/false$29636$1LXXoO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$29638$1LXXoO)
                       (g$bless$27554$1LXXoO
                         (list 'quote g$name$29638$1LXXoO))))
                    g$ls/false$29636$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$29635$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$29635$1LXXoO
               '(_ any)))))
         g$x$29633$1LXXoO))))
   (g$macro-transformer$27601$1LXXoO
     g$macro-transformer$31197$1LXXoO
     (case-lambda
       ((g$x$29639$1LXXoO)
        (if (g$procedure?$20059$1LXXoO g$x$29639$1LXXoO)
          g$x$29639$1LXXoO
          (if (g$symbol?$20057$1LXXoO g$x$29639$1LXXoO)
            ((case-lambda
               ((g$t$29640$1LXXoO)
                (if (eqv? g$t$29640$1LXXoO 'define-record-type)
                  g$define-record-type-macro$27585$1LXXoO
                  (if (eqv? g$t$29640$1LXXoO 'define-struct)
                    g$define-struct-macro$27584$1LXXoO
                    (if (eqv? g$t$29640$1LXXoO 'include)
                      g$include-macro$27579$1LXXoO
                      (if (eqv? g$t$29640$1LXXoO 'cond)
                        g$cond-macro$27577$1LXXoO
                        (if (eqv? g$t$29640$1LXXoO 'let)
                          g$let-macro$27557$1LXXoO
                          (if (eqv? g$t$29640$1LXXoO 'do)
                            g$do-macro$27573$1LXXoO
                            (if (eqv? g$t$29640$1LXXoO 'or)
                              g$or-macro$27575$1LXXoO
                              (if (eqv? g$t$29640$1LXXoO 'and)
                                g$and-macro$27576$1LXXoO
                                (if (eqv? g$t$29640$1LXXoO 'let*)
                                  g$let*-macro$27574$1LXXoO
                                  (if (eqv?
                                        g$t$29640$1LXXoO
                                        'let-values)
                                    g$let-values-macro$27558$1LXXoO
                                    (if (eqv?
                                          g$t$29640$1LXXoO
                                          'let*-values)
                                      g$let*-values-macro$27559$1LXXoO
                                      (if (eqv?
                                            g$t$29640$1LXXoO
                                            'syntax-rules)
                                        g$syntax-rules-macro$27581$1LXXoO
                                        (if (eqv?
                                              g$t$29640$1LXXoO
                                              'quasiquote)
                                          g$quasiquote-macro$27582$1LXXoO
                                          (if (eqv?
                                                g$t$29640$1LXXoO
                                                'quasisyntax)
                                            g$quasisyntax-macro$27583$1LXXoO
                                            (if (eqv?
                                                  g$t$29640$1LXXoO
                                                  'with-syntax)
                                              g$with-syntax-macro$27555$1LXXoO
                                              (if (eqv?
                                                    g$t$29640$1LXXoO
                                                    'when)
                                                g$when-macro$27547$1LXXoO
                                                (if (eqv?
                                                      g$t$29640$1LXXoO
                                                      'unless)
                                                  g$unless-macro$27548$1LXXoO
                                                  (if (eqv?
                                                        g$t$29640$1LXXoO
                                                        'case)
                                                    g$case-macro$27550$1LXXoO
                                                    (if (eqv?
                                                          g$t$29640$1LXXoO
                                                          'identifier-syntax)
                                                      g$identifier-syntax-macro$27572$1LXXoO
                                                      (if (eqv?
                                                            g$t$29640$1LXXoO
                                                            'time)
                                                        g$time-macro$27568$1LXXoO
                                                        (if (eqv?
                                                              g$t$29640$1LXXoO
                                                              'delay)
                                                          g$delay-macro$27569$1LXXoO
                                                          (if (eqv?
                                                                g$t$29640$1LXXoO
                                                                'assert)
                                                            g$assert-macro$27570$1LXXoO
                                                            (if (eqv?
                                                                  g$t$29640$1LXXoO
                                                                  'endianness)
                                                              g$endianness-macro$27571$1LXXoO
                                                              (if (eqv?
                                                                    g$t$29640$1LXXoO
                                                                    'guard)
                                                                g$guard-macro$27566$1LXXoO
                                                                (if (eqv?
                                                                      g$t$29640$1LXXoO
                                                                      'define-enumeration)
                                                                  g$define-enumeration-macro$27567$1LXXoO
                                                                  (if (eqv?
                                                                        g$t$29640$1LXXoO
                                                                        'trace-lambda)
                                                                    g$trace-lambda-macro$27560$1LXXoO
                                                                    (if (eqv?
                                                                          g$t$29640$1LXXoO
                                                                          'trace-define)
                                                                      g$trace-define-macro$27561$1LXXoO
                                                                      (if (eqv?
                                                                            g$t$29640$1LXXoO
                                                                            'trace-define-syntax)
                                                                        g$trace-define-syntax-macro$27562$1LXXoO
                                                                        (if (eqv?
                                                                              g$t$29640$1LXXoO
                                                                              'trace-let-syntax)
                                                                          g$trace-let-syntax-macro$27564$1LXXoO
                                                                          (if (eqv?
                                                                                g$t$29640$1LXXoO
                                                                                'trace-letrec-syntax)
                                                                            g$trace-letrec-syntax-macro$27565$1LXXoO
                                                                            (if (eqv?
                                                                                  g$t$29640$1LXXoO
                                                                                  'define-condition-type)
                                                                              g$define-condition-type-macro$27586$1LXXoO
                                                                              (if (eqv?
                                                                                    g$t$29640$1LXXoO
                                                                                    'parameterize)
                                                                                g$parameterize-macro$27588$1LXXoO
                                                                                (if (eqv?
                                                                                      g$t$29640$1LXXoO
                                                                                      'include-into)
                                                                                  g$include-into-macro$27580$1LXXoO
                                                                                  (if (eqv?
                                                                                        g$t$29640$1LXXoO
                                                                                        'eol-style)
                                                                                    (case-lambda
                                                                                      ((g$x$29641$1LXXoO)
                                                                                       (g$symbol-macro$27600$1LXXoO
                                                                                         g$x$29641$1LXXoO
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (eqv?
                                                                                          g$t$29640$1LXXoO
                                                                                          'error-handling-mode)
                                                                                      (case-lambda
                                                                                        ((g$x$29642$1LXXoO)
                                                                                         (g$symbol-macro$27600$1LXXoO
                                                                                           g$x$29642$1LXXoO
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (eqv?
                                                                                            g$t$29640$1LXXoO
                                                                                            'buffer-mode)
                                                                                        (case-lambda
                                                                                          ((g$x$29643$1LXXoO)
                                                                                           (g$symbol-macro$27600$1LXXoO
                                                                                             g$x$29643$1LXXoO
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (eqv?
                                                                                              g$t$29640$1LXXoO
                                                                                              'file-options)
                                                                                          g$file-options-macro$27599$1LXXoO
                                                                                          (if (g$memv$19218$1LXXoO
                                                                                                g$t$29640$1LXXoO
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$27587$1LXXoO
                                                                                            (begin
                                                                                              '#f
                                                                                              (error
                                                                                                'macro-transformer
                                                                                                '"BUG: invalid macro"
                                                                                                g$x$29639$1LXXoO))))))))))))))))))))))))))))))))))))))))))
             g$x$29639$1LXXoO)
            (begin
              '#f
              (error
                'core-macro-transformer
                '"BUG: invalid macro"
                g$x$29639$1LXXoO)))))))
   (g$local-macro-transformer$27602$1LXXoO
     g$local-macro-transformer$31198$1LXXoO
     (case-lambda ((g$x$29644$1LXXoO) (car g$x$29644$1LXXoO))))
   (g$do-macro-call$27603$1LXXoO
     g$do-macro-call$31199$1LXXoO
     (case-lambda
       ((g$transformer$29645$1LXXoO
          g$expr$29646$1LXXoO
          g$r$29647$1LXXoO)
        (letrec* ((g$return$29648$1LXXoO
                    (case-lambda
                      ((g$x$29656$1LXXoO)
                       (begin
                         ((letrec ((g$f$29657$1LXXoO
                                     (case-lambda
                                       ((g$x$29658$1LXXoO)
                                        (if (not (g$stx?$27065$1LXXoO
                                                   g$x$29658$1LXXoO))
                                          (if (pair? g$x$29658$1LXXoO)
                                            (begin
                                              (g$f$29657$1LXXoO
                                                (car g$x$29658$1LXXoO))
                                              (g$f$29657$1LXXoO
                                                (cdr g$x$29658$1LXXoO)))
                                            (if (g$vector?$20055$1LXXoO
                                                  g$x$29658$1LXXoO)
                                              (g$vector-for-each$20125$1LXXoO
                                                g$f$29657$1LXXoO
                                                g$x$29658$1LXXoO)
                                              (if (g$symbol?$20057$1LXXoO
                                                    g$x$29658$1LXXoO)
                                                (g$syntax-violation$27710$1LXXoO
                                                  '#f
                                                  '"raw symbol encountered in output of macro"
                                                  g$expr$29646$1LXXoO
                                                  g$x$29658$1LXXoO)
                                                (void))))
                                          (void))))))
                            g$f$29657$1LXXoO)
                          g$x$29656$1LXXoO)
                         (g$add-mark$27082$1LXXoO
                           (g$gen-mark$27077$1LXXoO)
                           g$x$29656$1LXXoO
                           g$expr$29646$1LXXoO))))))
          ((case-lambda
             ((g$x$29649$1LXXoO)
              (if (g$procedure?$20059$1LXXoO g$x$29649$1LXXoO)
                (g$return$29648$1LXXoO
                  (g$x$29649$1LXXoO
                    (case-lambda
                      ((g$id$29650$1LXXoO)
                       (begin
                         (if (not (g$id?$27093$1LXXoO
                                    g$id$29650$1LXXoO))
                           (assertion-violation
                             'rho
                             '"not an identifier"
                             g$id$29650$1LXXoO)
                           (void))
                         ((case-lambda
                            ((g$label$29651$1LXXoO)
                             ((case-lambda
                                ((g$binding$29652$1LXXoO)
                                 ((case-lambda
                                    ((g$t$29653$1LXXoO)
                                     (if (eqv?
                                           g$t$29653$1LXXoO
                                           'local-ctv)
                                       (g$cadr$20076$1LXXoO
                                         g$binding$29652$1LXXoO)
                                       (if (eqv?
                                             g$t$29653$1LXXoO
                                             'global-ctv)
                                         ((case-lambda
                                            ((g$lib$29654$1LXXoO
                                               g$loc$29655$1LXXoO)
                                             (begin
                                               (g$visit-library$26800$1LXXoO
                                                 g$lib$29654$1LXXoO)
                                               (symbol-value
                                                 g$loc$29655$1LXXoO))))
                                          (g$cadr$20076$1LXXoO
                                            g$binding$29652$1LXXoO)
                                          (g$cddr$20078$1LXXoO
                                            g$binding$29652$1LXXoO))
                                         (begin '#f '#f)))))
                                  (car g$binding$29652$1LXXoO))))
                              (g$label->binding$27108$1LXXoO
                                g$label$29651$1LXXoO
                                g$r$29647$1LXXoO))))
                          (g$id->label$27106$1LXXoO
                            g$id$29650$1LXXoO)))))))
                (g$return$29648$1LXXoO g$x$29649$1LXXoO))))
           (g$transformer$29645$1LXXoO
             (g$add-mark$27082$1LXXoO
               g$anti-mark$27078$1LXXoO
               g$expr$29646$1LXXoO
               '#f)))))))
   (g$chi-macro$27604$1LXXoO
     g$chi-macro$31200$1LXXoO
     (case-lambda
       ((g$p$29659$1LXXoO g$e$29660$1LXXoO g$r$29661$1LXXoO)
        (g$do-macro-call$27603$1LXXoO
          (g$macro-transformer$27601$1LXXoO g$p$29659$1LXXoO)
          g$e$29660$1LXXoO
          g$r$29661$1LXXoO))))
   (g$chi-local-macro$27605$1LXXoO
     g$chi-local-macro$31201$1LXXoO
     (case-lambda
       ((g$p$29662$1LXXoO g$e$29663$1LXXoO g$r$29664$1LXXoO)
        (g$do-macro-call$27603$1LXXoO
          (g$local-macro-transformer$27602$1LXXoO g$p$29662$1LXXoO)
          g$e$29663$1LXXoO
          g$r$29664$1LXXoO))))
   (g$chi-global-macro$27606$1LXXoO
     g$chi-global-macro$31202$1LXXoO
     (case-lambda
       ((g$p$29665$1LXXoO g$e$29666$1LXXoO g$r$29667$1LXXoO)
        ((case-lambda
           ((g$lib$29668$1LXXoO g$loc$29669$1LXXoO)
            (begin
              (g$visit-library$26800$1LXXoO g$lib$29668$1LXXoO)
              ((case-lambda
                 ((g$x$29670$1LXXoO)
                  ((case-lambda
                     ((g$transformer$29671$1LXXoO)
                      (g$do-macro-call$27603$1LXXoO
                        g$transformer$29671$1LXXoO
                        g$e$29666$1LXXoO
                        g$r$29667$1LXXoO)))
                   (if (g$procedure?$20059$1LXXoO g$x$29670$1LXXoO)
                     g$x$29670$1LXXoO
                     (begin
                       '#f
                       (assertion-violation
                         'chi-global-macro
                         '"BUG: not a procedure"
                         g$x$29670$1LXXoO))))))
               (symbol-value g$loc$29669$1LXXoO)))))
         (car g$p$29665$1LXXoO)
         (cdr g$p$29665$1LXXoO)))))
   (g$chi-expr*$27607$1LXXoO
     g$chi-expr*$31203$1LXXoO
     (case-lambda
       ((g$e*$29672$1LXXoO g$r$29673$1LXXoO g$mr$29674$1LXXoO)
        (if (null? g$e*$29672$1LXXoO)
          '()
          (begin
            '#f
            ((case-lambda
               ((g$e$29675$1LXXoO)
                (cons
                  g$e$29675$1LXXoO
                  (g$chi-expr*$27607$1LXXoO
                    (cdr g$e*$29672$1LXXoO)
                    g$r$29673$1LXXoO
                    g$mr$29674$1LXXoO))))
             (g$chi-expr$27609$1LXXoO
               (car g$e*$29672$1LXXoO)
               g$r$29673$1LXXoO
               g$mr$29674$1LXXoO)))))))
   (g$chi-application$27608$1LXXoO
     g$chi-application$31204$1LXXoO
     (case-lambda
       ((g$e$29676$1LXXoO g$r$29677$1LXXoO g$mr$29678$1LXXoO)
        ((case-lambda
           ((g$t$29679$1LXXoO)
            ((case-lambda
               ((g$ls/false$29680$1LXXoO)
                (if g$ls/false$29680$1LXXoO
                  (apply
                    (case-lambda
                      ((g$rator$29681$1LXXoO g$rands$29682$1LXXoO)
                       ((case-lambda
                          ((g$rator$29683$1LXXoO)
                           (cons
                             g$rator$29683$1LXXoO
                             (g$chi-expr*$27607$1LXXoO
                               g$rands$29682$1LXXoO
                               g$r$29677$1LXXoO
                               g$mr$29678$1LXXoO))))
                        (g$chi-expr$27609$1LXXoO
                          g$rator$29681$1LXXoO
                          g$r$29677$1LXXoO
                          g$mr$29678$1LXXoO))))
                    g$ls/false$29680$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$29679$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$29679$1LXXoO
               '(any . each-any)))))
         g$e$29676$1LXXoO))))
   (g$chi-expr$27609$1LXXoO
     g$chi-expr$31205$1LXXoO
     (case-lambda
       ((g$e$29684$1LXXoO g$r$29685$1LXXoO g$mr$29686$1LXXoO)
        (call-with-values
          (case-lambda
            (()
             (g$syntax-type$27113$1LXXoO
               g$e$29684$1LXXoO
               g$r$29685$1LXXoO)))
          (case-lambda
            ((g$type$29690$1LXXoO
               g$value$29691$1LXXoO
               g$kwd$29692$1LXXoO)
             ((case-lambda
                ((g$kwd$29693$1LXXoO
                   g$value$29694$1LXXoO
                   g$type$29695$1LXXoO)
                 ((case-lambda
                    ((g$t$29696$1LXXoO)
                     (if (eqv? g$t$29696$1LXXoO 'core-macro)
                       ((case-lambda
                          ((g$transformer$29697$1LXXoO)
                           (g$transformer$29697$1LXXoO
                             g$e$29684$1LXXoO
                             g$r$29685$1LXXoO
                             g$mr$29686$1LXXoO)))
                        (g$core-macro-transformer$27598$1LXXoO
                          g$value$29694$1LXXoO))
                       (if (eqv? g$t$29696$1LXXoO 'global)
                         ((case-lambda
                            ((g$lib$29698$1LXXoO)
                             ((case-lambda
                                ((g$loc$29699$1LXXoO)
                                 (begin
                                   ((g$inv-collector$27646$1LXXoO)
                                    g$lib$29698$1LXXoO)
                                   g$loc$29699$1LXXoO)))
                              (cdr g$value$29694$1LXXoO))))
                          (car g$value$29694$1LXXoO))
                         (if (eqv? g$t$29696$1LXXoO 'core-prim)
                           ((case-lambda
                              ((g$name$29700$1LXXoO)
                               (list 'primitive g$name$29700$1LXXoO)))
                            g$value$29694$1LXXoO)
                           (if (eqv? g$t$29696$1LXXoO 'call)
                             (g$chi-application$27608$1LXXoO
                               g$e$29684$1LXXoO
                               g$r$29685$1LXXoO
                               g$mr$29686$1LXXoO)
                             (if (eqv? g$t$29696$1LXXoO 'lexical)
                               ((case-lambda
                                  ((g$lex$29701$1LXXoO)
                                   g$lex$29701$1LXXoO))
                                (g$lexical-var$27535$1LXXoO
                                  g$value$29694$1LXXoO))
                               (if (g$memv$19218$1LXXoO
                                     g$t$29696$1LXXoO
                                     '(global-macro global-macro!))
                                 (g$chi-expr$27609$1LXXoO
                                   (g$chi-global-macro$27606$1LXXoO
                                     g$value$29694$1LXXoO
                                     g$e$29684$1LXXoO
                                     g$r$29685$1LXXoO)
                                   g$r$29685$1LXXoO
                                   g$mr$29686$1LXXoO)
                                 (if (g$memv$19218$1LXXoO
                                       g$t$29696$1LXXoO
                                       '(local-macro local-macro!))
                                   (g$chi-expr$27609$1LXXoO
                                     (g$chi-local-macro$27605$1LXXoO
                                       g$value$29694$1LXXoO
                                       g$e$29684$1LXXoO
                                       g$r$29685$1LXXoO)
                                     g$r$29685$1LXXoO
                                     g$mr$29686$1LXXoO)
                                   (if (g$memv$19218$1LXXoO
                                         g$t$29696$1LXXoO
                                         '(macro macro!))
                                     (g$chi-expr$27609$1LXXoO
                                       (g$chi-macro$27604$1LXXoO
                                         g$value$29694$1LXXoO
                                         g$e$29684$1LXXoO
                                         g$r$29685$1LXXoO)
                                       g$r$29685$1LXXoO
                                       g$mr$29686$1LXXoO)
                                     (if (eqv?
                                           g$t$29696$1LXXoO
                                           'constant)
                                       ((case-lambda
                                          ((g$datum$29702$1LXXoO)
                                           (list
                                             'quote
                                             g$datum$29702$1LXXoO)))
                                        g$value$29694$1LXXoO)
                                       (if (eqv? g$t$29696$1LXXoO 'set!)
                                         (g$chi-set!$27610$1LXXoO
                                           g$e$29684$1LXXoO
                                           g$r$29685$1LXXoO
                                           g$mr$29686$1LXXoO)
                                         (if (eqv?
                                               g$t$29696$1LXXoO
                                               'begin)
                                           ((case-lambda
                                              ((g$t$29703$1LXXoO)
                                               ((case-lambda
                                                  ((g$ls/false$29704$1LXXoO)
                                                   (if g$ls/false$29704$1LXXoO
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$29705$1LXXoO
                                                            g$x*$29706$1LXXoO)
                                                          (g$build-sequence$27018$1LXXoO
                                                            '#f
                                                            (g$chi-expr*$27607$1LXXoO
                                                              (cons
                                                                g$x$29705$1LXXoO
                                                                g$x*$29706$1LXXoO)
                                                              g$r$29685$1LXXoO
                                                              g$mr$29686$1LXXoO))))
                                                       g$ls/false$29704$1LXXoO)
                                                     (g$syntax-violation$27710$1LXXoO
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$29703$1LXXoO))))
                                                (g$syntax-dispatch$27591$1LXXoO
                                                  g$t$29703$1LXXoO
                                                  '(_ any
                                                      .
                                                      each-any)))))
                                            g$e$29684$1LXXoO)
                                           (if (g$memv$19218$1LXXoO
                                                 g$t$29696$1LXXoO
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$29707$1LXXoO)
                                                 ((case-lambda
                                                    ((g$ls/false$29708$1LXXoO)
                                                     (if (if g$ls/false$29708$1LXXoO
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$29709$1LXXoO
                                                                    g$xrhs*$29710$1LXXoO
                                                                    g$xbody$29711$1LXXoO
                                                                    g$xbody*$29712$1LXXoO)
                                                                  (if (not (g$valid-bound-ids?$27098$1LXXoO
                                                                             g$xlhs*$29709$1LXXoO))
                                                                    (g$syntax-violation$27710$1LXXoO
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$29684$1LXXoO)
                                                                    (void))))
                                                               g$ls/false$29708$1LXXoO))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$29713$1LXXoO
                                                              g$xrhs*$29714$1LXXoO
                                                              g$xbody$29715$1LXXoO
                                                              g$xbody*$29716$1LXXoO)
                                                            ((case-lambda
                                                               ((g$xlab*$29717$1LXXoO)
                                                                ((case-lambda
                                                                   ((g$xrib$29718$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$xb*$29719$1LXXoO)
                                                                        (g$build-sequence$27018$1LXXoO
                                                                          '#f
                                                                          (g$chi-expr*$27607$1LXXoO
                                                                            (g$map$19225$1LXXoO
                                                                              (case-lambda
                                                                                ((g$x$29720$1LXXoO)
                                                                                 (g$add-subst$27083$1LXXoO
                                                                                   g$xrib$29718$1LXXoO
                                                                                   g$x$29720$1LXXoO)))
                                                                              (cons
                                                                                g$xbody$29715$1LXXoO
                                                                                g$xbody*$29716$1LXXoO))
                                                                            (append
                                                                              (g$map$19225$1LXXoO
                                                                                cons
                                                                                g$xlab*$29717$1LXXoO
                                                                                g$xb*$29719$1LXXoO)
                                                                              g$r$29685$1LXXoO)
                                                                            (append
                                                                              (g$map$19225$1LXXoO
                                                                                cons
                                                                                g$xlab*$29717$1LXXoO
                                                                                g$xb*$29719$1LXXoO)
                                                                              g$mr$29686$1LXXoO)))))
                                                                     (g$map$19225$1LXXoO
                                                                       (case-lambda
                                                                         ((g$x$29721$1LXXoO)
                                                                          (g$make-eval-transformer$27141$1LXXoO
                                                                            (g$expand-transformer$27639$1LXXoO
                                                                              (if (eq? g$type$29695$1LXXoO
                                                                                       'let-syntax)
                                                                                g$x$29721$1LXXoO
                                                                                (g$add-subst$27083$1LXXoO
                                                                                  g$xrib$29718$1LXXoO
                                                                                  g$x$29721$1LXXoO))
                                                                              g$mr$29686$1LXXoO))))
                                                                       g$xrhs*$29714$1LXXoO))))
                                                                 (g$make-full-rib$27059$1LXXoO
                                                                   g$xlhs*$29713$1LXXoO
                                                                   g$xlab*$29717$1LXXoO))))
                                                             (g$map$19225$1LXXoO
                                                               g$gen-label$27030$1LXXoO
                                                               g$xlhs*$29713$1LXXoO))))
                                                         g$ls/false$29708$1LXXoO)
                                                       (g$syntax-violation$27710$1LXXoO
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$29707$1LXXoO))))
                                                  (g$syntax-dispatch$27591$1LXXoO
                                                    g$t$29707$1LXXoO
                                                    '(_ #(each
                                                          (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$29684$1LXXoO)
                                             (if (eqv?
                                                   g$t$29696$1LXXoO
                                                   'displaced-lexical)
                                               (g$syntax-violation$27710$1LXXoO
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$29684$1LXXoO)
                                               (if (eqv?
                                                     g$t$29696$1LXXoO
                                                     'syntax)
                                                 (g$syntax-violation$27710$1LXXoO
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$29684$1LXXoO)
                                                 (if (g$memv$19218$1LXXoO
                                                       g$t$29696$1LXXoO
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$27710$1LXXoO
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$29722$1LXXoO)
                                                           (if (eqv?
                                                                 g$t$29722$1LXXoO
                                                                 'define)
                                                             '"a definition"
                                                             (if (eqv?
                                                                   g$t$29722$1LXXoO
                                                                   'define-syntax)
                                                               '"a define-syntax"
                                                               (if (eqv?
                                                                     g$t$29722$1LXXoO
                                                                     'module)
                                                                 '"a module definition"
                                                                 (if (eqv?
                                                                       g$t$29722$1LXXoO
                                                                       'library)
                                                                   '"a library definition"
                                                                   (if (eqv?
                                                                         g$t$29722$1LXXoO
                                                                         'import)
                                                                     '"an import declaration"
                                                                     (if (eqv?
                                                                           g$t$29722$1LXXoO
                                                                           'export)
                                                                       '"an export declaration"
                                                                       (begin
                                                                         '#f
                                                                         '"a non-expression")))))))))
                                                        g$type$29695$1LXXoO)
                                                       '" was found where an expression was expected")
                                                     g$e$29684$1LXXoO)
                                                   (if (eqv?
                                                         g$t$29696$1LXXoO
                                                         'mutable)
                                                     (g$syntax-violation$27710$1LXXoO
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$29684$1LXXoO)
                                                     (begin
                                                       '#f
                                                       (g$syntax-violation$27710$1LXXoO
                                                         '#f
                                                         '"invalid expression"
                                                         g$e$29684$1LXXoO))))))))))))))))))))
                  g$type$29695$1LXXoO)))
              g$kwd$29692$1LXXoO
              g$value$29691$1LXXoO
              g$type$29690$1LXXoO)))))))
   (g$chi-set!$27610$1LXXoO
     g$chi-set!$31206$1LXXoO
     (case-lambda
       ((g$e$29723$1LXXoO g$r$29724$1LXXoO g$mr$29725$1LXXoO)
        ((case-lambda
           ((g$t$29726$1LXXoO)
            ((case-lambda
               ((g$ls/false$29727$1LXXoO)
                (if (if g$ls/false$29727$1LXXoO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$29728$1LXXoO g$v$29729$1LXXoO)
                             (g$id?$27093$1LXXoO g$x$29728$1LXXoO)))
                          g$ls/false$29727$1LXXoO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$29730$1LXXoO g$v$29731$1LXXoO)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$27113$1LXXoO
                              g$x$29730$1LXXoO
                              g$r$29724$1LXXoO)))
                         (case-lambda
                           ((g$type$29735$1LXXoO
                              g$value$29736$1LXXoO
                              g$kwd$29737$1LXXoO)
                            ((case-lambda
                               ((g$kwd$29738$1LXXoO
                                  g$value$29739$1LXXoO
                                  g$type$29740$1LXXoO)
                                ((case-lambda
                                   ((g$t$29741$1LXXoO)
                                    (if (eqv? g$t$29741$1LXXoO 'lexical)
                                      (begin
                                        (g$set-lexical-mutable!$27537$1LXXoO
                                          g$value$29739$1LXXoO
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$27535$1LXXoO
                                            g$value$29739$1LXXoO)
                                          (g$chi-expr$27609$1LXXoO
                                            g$v$29731$1LXXoO
                                            g$r$29724$1LXXoO
                                            g$mr$29725$1LXXoO)))
                                      (if (eqv?
                                            g$t$29741$1LXXoO
                                            'core-prim)
                                        (g$syntax-violation$27710$1LXXoO
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$29723$1LXXoO)
                                        (if (eqv?
                                              g$t$29741$1LXXoO
                                              'global)
                                          (g$syntax-violation$27710$1LXXoO
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$29723$1LXXoO)
                                          (if (eqv?
                                                g$t$29741$1LXXoO
                                                'global-macro!)
                                            (g$chi-expr$27609$1LXXoO
                                              (g$chi-global-macro$27606$1LXXoO
                                                g$value$29739$1LXXoO
                                                g$e$29723$1LXXoO
                                                g$r$29724$1LXXoO)
                                              g$r$29724$1LXXoO
                                              g$mr$29725$1LXXoO)
                                            (if (eqv?
                                                  g$t$29741$1LXXoO
                                                  'local-macro!)
                                              (g$chi-expr$27609$1LXXoO
                                                (g$chi-local-macro$27605$1LXXoO
                                                  g$value$29739$1LXXoO
                                                  g$e$29723$1LXXoO
                                                  g$r$29724$1LXXoO)
                                                g$r$29724$1LXXoO
                                                g$mr$29725$1LXXoO)
                                              (if (eqv?
                                                    g$t$29741$1LXXoO
                                                    'mutable)
                                                (g$syntax-violation$27710$1LXXoO
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$29723$1LXXoO)
                                                (begin
                                                  '#f
                                                  (g$syntax-violation$27710$1LXXoO
                                                    '#f
                                                    '"invalid syntax"
                                                    g$e$29723$1LXXoO))))))))))
                                 g$type$29740$1LXXoO)))
                             g$kwd$29737$1LXXoO
                             g$value$29736$1LXXoO
                             g$type$29735$1LXXoO))))))
                    g$ls/false$29727$1LXXoO)
                  (g$syntax-violation$27710$1LXXoO
                    '#f
                    '"invalid syntax"
                    g$t$29726$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$29726$1LXXoO
               '(_ any any)))))
         g$e$29723$1LXXoO))))
   (g$verify-formals$27611$1LXXoO
     g$verify-formals$31207$1LXXoO
     (case-lambda
       ((g$fmls$29742$1LXXoO g$stx$29743$1LXXoO)
        ((case-lambda
           ((g$t$29744$1LXXoO)
            ((case-lambda
               ((g$ls/false$29745$1LXXoO)
                (if g$ls/false$29745$1LXXoO
                  (apply
                    (case-lambda
                      ((g$x*$29746$1LXXoO)
                       (if (not (g$valid-bound-ids?$27098$1LXXoO
                                  g$x*$29746$1LXXoO))
                         (g$invalid-fmls-error$27556$1LXXoO
                           g$stx$29743$1LXXoO
                           g$fmls$29742$1LXXoO)
                         (void))))
                    g$ls/false$29745$1LXXoO)
                  ((case-lambda
                     ((g$t$29747$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$29748$1LXXoO)
                          (if g$ls/false$29748$1LXXoO
                            (apply
                              (case-lambda
                                ((g$x*$29749$1LXXoO g$x$29750$1LXXoO)
                                 (if (not (g$valid-bound-ids?$27098$1LXXoO
                                            (cons
                                              g$x$29750$1LXXoO
                                              g$x*$29749$1LXXoO)))
                                   (g$invalid-fmls-error$27556$1LXXoO
                                     g$stx$29743$1LXXoO
                                     g$fmls$29742$1LXXoO)
                                   (void))))
                              g$ls/false$29748$1LXXoO)
                            ((case-lambda
                               ((g$t$29751$1LXXoO)
                                ((case-lambda
                                   ((g$ls/false$29752$1LXXoO)
                                    (if g$ls/false$29752$1LXXoO
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$27710$1LXXoO
                                             '#f
                                             '"invalid syntax"
                                             g$stx$29743$1LXXoO)))
                                        g$ls/false$29752$1LXXoO)
                                      (g$syntax-violation$27710$1LXXoO
                                        '#f
                                        '"invalid syntax"
                                        g$t$29751$1LXXoO))))
                                 (g$syntax-dispatch$27591$1LXXoO
                                   g$t$29751$1LXXoO
                                   '_))))
                             g$t$29747$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$29747$1LXXoO
                         '#(each+ any () any)))))
                   g$t$29744$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$29744$1LXXoO
               'each-any))))
         g$fmls$29742$1LXXoO))))
   (g$chi-lambda-clause$27612$1LXXoO
     g$chi-lambda-clause$31208$1LXXoO
     (case-lambda
       ((g$stx$29753$1LXXoO
          g$fmls$29754$1LXXoO
          g$body*$29755$1LXXoO
          g$r$29756$1LXXoO
          g$mr$29757$1LXXoO)
        ((case-lambda
           ((g$t$29758$1LXXoO)
            ((case-lambda
               ((g$ls/false$29759$1LXXoO)
                (if g$ls/false$29759$1LXXoO
                  (apply
                    (case-lambda
                      ((g$x*$29760$1LXXoO)
                       (begin
                         (g$verify-formals$27611$1LXXoO
                           g$fmls$29754$1LXXoO
                           g$stx$29753$1LXXoO)
                         ((case-lambda
                            ((g$lex*$29761$1LXXoO g$lab*$29762$1LXXoO)
                             (values
                               g$lex*$29761$1LXXoO
                               (g$chi-internal$27620$1LXXoO
                                 (g$add-subst$27083$1LXXoO
                                   (g$make-full-rib$27059$1LXXoO
                                     g$x*$29760$1LXXoO
                                     g$lab*$29762$1LXXoO)
                                   g$body*$29755$1LXXoO)
                                 (g$add-lexicals$27539$1LXXoO
                                   g$lab*$29762$1LXXoO
                                   g$lex*$29761$1LXXoO
                                   g$r$29756$1LXXoO)
                                 g$mr$29757$1LXXoO))))
                          (g$map$19225$1LXXoO
                            g$gen-lexical$27028$1LXXoO
                            g$x*$29760$1LXXoO)
                          (g$map$19225$1LXXoO
                            g$gen-label$27030$1LXXoO
                            g$x*$29760$1LXXoO)))))
                    g$ls/false$29759$1LXXoO)
                  ((case-lambda
                     ((g$t$29763$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$29764$1LXXoO)
                          (if g$ls/false$29764$1LXXoO
                            (apply
                              (case-lambda
                                ((g$x*$29765$1LXXoO g$x$29766$1LXXoO)
                                 (begin
                                   (g$verify-formals$27611$1LXXoO
                                     g$fmls$29754$1LXXoO
                                     g$stx$29753$1LXXoO)
                                   ((case-lambda
                                      ((g$lex*$29767$1LXXoO
                                         g$lab*$29768$1LXXoO
                                         g$lex$29769$1LXXoO
                                         g$lab$29770$1LXXoO)
                                       (values
                                         (append
                                           g$lex*$29767$1LXXoO
                                           g$lex$29769$1LXXoO)
                                         (g$chi-internal$27620$1LXXoO
                                           (g$add-subst$27083$1LXXoO
                                             (g$make-full-rib$27059$1LXXoO
                                               (cons
                                                 g$x$29766$1LXXoO
                                                 g$x*$29765$1LXXoO)
                                               (cons
                                                 g$lab$29770$1LXXoO
                                                 g$lab*$29768$1LXXoO))
                                             g$body*$29755$1LXXoO)
                                           (g$add-lexicals$27539$1LXXoO
                                             (cons
                                               g$lab$29770$1LXXoO
                                               g$lab*$29768$1LXXoO)
                                             (cons
                                               g$lex$29769$1LXXoO
                                               g$lex*$29767$1LXXoO)
                                             g$r$29756$1LXXoO)
                                           g$mr$29757$1LXXoO))))
                                    (g$map$19225$1LXXoO
                                      g$gen-lexical$27028$1LXXoO
                                      g$x*$29765$1LXXoO)
                                    (g$map$19225$1LXXoO
                                      g$gen-label$27030$1LXXoO
                                      g$x*$29765$1LXXoO)
                                    (g$gen-lexical$27028$1LXXoO
                                      g$x$29766$1LXXoO)
                                    (g$gen-label$27030$1LXXoO
                                      g$x$29766$1LXXoO)))))
                              g$ls/false$29764$1LXXoO)
                            ((case-lambda
                               ((g$t$29771$1LXXoO)
                                ((case-lambda
                                   ((g$ls/false$29772$1LXXoO)
                                    (if g$ls/false$29772$1LXXoO
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$27710$1LXXoO
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$29754$1LXXoO)))
                                        g$ls/false$29772$1LXXoO)
                                      (g$syntax-violation$27710$1LXXoO
                                        '#f
                                        '"invalid syntax"
                                        g$t$29771$1LXXoO))))
                                 (g$syntax-dispatch$27591$1LXXoO
                                   g$t$29771$1LXXoO
                                   '_))))
                             g$t$29763$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$29763$1LXXoO
                         '#(each+ any () any)))))
                   g$t$29758$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$29758$1LXXoO
               'each-any))))
         g$fmls$29754$1LXXoO))))
   (g$chi-lambda-clause*$27613$1LXXoO
     g$chi-lambda-clause*$31209$1LXXoO
     (case-lambda
       ((g$stx$29773$1LXXoO
          g$fmls*$29774$1LXXoO
          g$body**$29775$1LXXoO
          g$r$29776$1LXXoO
          g$mr$29777$1LXXoO)
        (if (null? g$fmls*$29774$1LXXoO)
          (values '() '())
          (begin
            '#f
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$27612$1LXXoO
                   g$stx$29773$1LXXoO
                   (car g$fmls*$29774$1LXXoO)
                   (car g$body**$29775$1LXXoO)
                   g$r$29776$1LXXoO
                   g$mr$29777$1LXXoO)))
              (case-lambda
                ((g$a$29780$1LXXoO g$b$29781$1LXXoO)
                 ((case-lambda
                    ((g$b$29782$1LXXoO g$a$29783$1LXXoO)
                     (call-with-values
                       (case-lambda
                         (()
                          (g$chi-lambda-clause*$27613$1LXXoO
                            g$stx$29773$1LXXoO
                            (cdr g$fmls*$29774$1LXXoO)
                            (cdr g$body**$29775$1LXXoO)
                            g$r$29776$1LXXoO
                            g$mr$29777$1LXXoO)))
                       (case-lambda
                         ((g$a*$29786$1LXXoO g$b*$29787$1LXXoO)
                          ((case-lambda
                             ((g$b*$29788$1LXXoO g$a*$29789$1LXXoO)
                              (values
                                (cons
                                  g$a$29783$1LXXoO
                                  g$a*$29789$1LXXoO)
                                (cons
                                  g$b$29782$1LXXoO
                                  g$b*$29788$1LXXoO))))
                           g$b*$29787$1LXXoO
                           g$a*$29786$1LXXoO))))))
                  g$b$29781$1LXXoO
                  g$a$29780$1LXXoO)))))))))
   (g$chi-defun$27614$1LXXoO
     g$chi-defun$31210$1LXXoO
     (case-lambda
       ((g$x$29790$1LXXoO g$r$29791$1LXXoO g$mr$29792$1LXXoO)
        ((case-lambda
           ((g$fmls$29793$1LXXoO g$body*$29794$1LXXoO)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$27612$1LXXoO
                   g$fmls$29793$1LXXoO
                   g$fmls$29793$1LXXoO
                   g$body*$29794$1LXXoO
                   g$r$29791$1LXXoO
                   g$mr$29792$1LXXoO)))
              (case-lambda
                ((g$fmls$29797$1LXXoO g$body$29798$1LXXoO)
                 ((case-lambda
                    ((g$body$29799$1LXXoO g$fmls$29800$1LXXoO)
                     (g$build-lambda$27015$1LXXoO
                       '#f
                       g$fmls$29800$1LXXoO
                       g$body$29799$1LXXoO)))
                  g$body$29798$1LXXoO
                  g$fmls$29797$1LXXoO))))))
         (car g$x$29790$1LXXoO)
         (cdr g$x$29790$1LXXoO)))))
   (g$chi-rhs$27615$1LXXoO
     g$chi-rhs$31211$1LXXoO
     (case-lambda
       ((g$rhs$29801$1LXXoO g$r$29802$1LXXoO g$mr$29803$1LXXoO)
        ((case-lambda
           ((g$t$29804$1LXXoO)
            (if (eqv? g$t$29804$1LXXoO 'defun)
              (g$chi-defun$27614$1LXXoO
                (cdr g$rhs$29801$1LXXoO)
                g$r$29802$1LXXoO
                g$mr$29803$1LXXoO)
              (if (eqv? g$t$29804$1LXXoO 'expr)
                ((case-lambda
                   ((g$expr$29805$1LXXoO)
                    (g$chi-expr$27609$1LXXoO
                      g$expr$29805$1LXXoO
                      g$r$29802$1LXXoO
                      g$mr$29803$1LXXoO)))
                 (cdr g$rhs$29801$1LXXoO))
                (if (eqv? g$t$29804$1LXXoO 'top-expr)
                  ((case-lambda
                     ((g$expr$29806$1LXXoO)
                      (g$build-sequence$27018$1LXXoO
                        '#f
                        (list
                          (g$chi-expr$27609$1LXXoO
                            g$expr$29806$1LXXoO
                            g$r$29802$1LXXoO
                            g$mr$29803$1LXXoO)
                          (g$build-void$27019$1LXXoO)))))
                   (cdr g$rhs$29801$1LXXoO))
                  (begin
                    '#f
                    (assertion-violation
                      'chi-rhs
                      '"BUG: invalid rhs"
                      g$rhs$29801$1LXXoO)))))))
         (car g$rhs$29801$1LXXoO)))))
   (g$expand-interaction-rhs*/init*$27616$1LXXoO
     g$expand-interaction-rhs*/init*$31212$1LXXoO
     (case-lambda
       ((g$lhs*$29807$1LXXoO
          g$rhs*$29808$1LXXoO
          g$init*$29809$1LXXoO
          g$r$29810$1LXXoO
          g$mr$29811$1LXXoO)
        ((letrec ((g$f$29812$1LXXoO
                    (case-lambda
                      ((g$lhs*$29813$1LXXoO g$rhs*$29814$1LXXoO)
                       (if (null? g$lhs*$29813$1LXXoO)
                         (g$map$19225$1LXXoO
                           (case-lambda
                             ((g$x$29815$1LXXoO)
                              (g$chi-expr$27609$1LXXoO
                                g$x$29815$1LXXoO
                                g$r$29810$1LXXoO
                                g$mr$29811$1LXXoO)))
                           g$init*$29809$1LXXoO)
                         (begin
                           '#f
                           ((case-lambda
                              ((g$lhs$29816$1LXXoO g$rhs$29817$1LXXoO)
                               ((case-lambda
                                  ((g$t$29818$1LXXoO)
                                   (if (eqv? g$t$29818$1LXXoO 'defun)
                                     ((case-lambda
                                        ((g$rhs$29819$1LXXoO)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$29816$1LXXoO
                                             g$rhs$29819$1LXXoO)
                                           (g$f$29812$1LXXoO
                                             (cdr g$lhs*$29813$1LXXoO)
                                             (cdr g$rhs*$29814$1LXXoO)))))
                                      (g$chi-defun$27614$1LXXoO
                                        (cdr g$rhs$29817$1LXXoO)
                                        g$r$29810$1LXXoO
                                        g$mr$29811$1LXXoO))
                                     (if (eqv? g$t$29818$1LXXoO 'expr)
                                       ((case-lambda
                                          ((g$rhs$29820$1LXXoO)
                                           (cons
                                             (list
                                               'set!
                                               g$lhs$29816$1LXXoO
                                               g$rhs$29820$1LXXoO)
                                             (g$f$29812$1LXXoO
                                               (cdr g$lhs*$29813$1LXXoO)
                                               (cdr g$rhs*$29814$1LXXoO)))))
                                        (g$chi-expr$27609$1LXXoO
                                          (cdr g$rhs$29817$1LXXoO)
                                          g$r$29810$1LXXoO
                                          g$mr$29811$1LXXoO))
                                       (if (eqv?
                                             g$t$29818$1LXXoO
                                             'top-expr)
                                         ((case-lambda
                                            ((g$e$29821$1LXXoO)
                                             (cons
                                               g$e$29821$1LXXoO
                                               (g$f$29812$1LXXoO
                                                 (cdr g$lhs*$29813$1LXXoO)
                                                 (cdr g$rhs*$29814$1LXXoO)))))
                                          (g$chi-expr$27609$1LXXoO
                                            (cdr g$rhs$29817$1LXXoO)
                                            g$r$29810$1LXXoO
                                            g$mr$29811$1LXXoO))
                                         (begin
                                           '#f
                                           (error
                                             'expand-interaction
                                             '"invallid"
                                             g$rhs$29817$1LXXoO)))))))
                                (car g$rhs$29817$1LXXoO))))
                            (car g$lhs*$29813$1LXXoO)
                            (car g$rhs*$29814$1LXXoO))))))))
           g$f$29812$1LXXoO)
         g$lhs*$29807$1LXXoO
         g$rhs*$29808$1LXXoO))))
   (g$chi-rhs*$27617$1LXXoO
     g$chi-rhs*$31213$1LXXoO
     (case-lambda
       ((g$rhs*$29822$1LXXoO g$r$29823$1LXXoO g$mr$29824$1LXXoO)
        ((letrec ((g$f$29825$1LXXoO
                    (case-lambda
                      ((g$ls$29826$1LXXoO)
                       (if (null? g$ls$29826$1LXXoO)
                         '()
                         (begin
                           '#f
                           ((case-lambda
                              ((g$a$29827$1LXXoO)
                               (cons
                                 g$a$29827$1LXXoO
                                 (g$f$29825$1LXXoO
                                   (cdr g$ls$29826$1LXXoO)))))
                            (g$chi-rhs$27615$1LXXoO
                              (car g$ls$29826$1LXXoO)
                              g$r$29823$1LXXoO
                              g$mr$29824$1LXXoO))))))))
           g$f$29825$1LXXoO)
         g$rhs*$29822$1LXXoO))))
   (g$find-bound=?$27618$1LXXoO
     g$find-bound=?$31214$1LXXoO
     (case-lambda
       ((g$x$29828$1LXXoO g$lhs*$29829$1LXXoO g$rhs*$29830$1LXXoO)
        (if (null? g$lhs*$29829$1LXXoO)
          '#f
          (if (g$bound-id=?$27096$1LXXoO
                g$x$29828$1LXXoO
                (car g$lhs*$29829$1LXXoO))
            (car g$rhs*$29830$1LXXoO)
            (begin
              '#f
              (g$find-bound=?$27618$1LXXoO
                g$x$29828$1LXXoO
                (cdr g$lhs*$29829$1LXXoO)
                (cdr g$rhs*$29830$1LXXoO))))))))
   (g$find-dups$27619$1LXXoO
     g$find-dups$31215$1LXXoO
     (case-lambda
       ((g$ls$29831$1LXXoO)
        ((letrec ((g$f$29832$1LXXoO
                    (case-lambda
                      ((g$ls$29833$1LXXoO g$dups$29834$1LXXoO)
                       (if (null? g$ls$29833$1LXXoO)
                         g$dups$29834$1LXXoO
                         ((case-lambda
                            ((g$t$29835$1LXXoO)
                             (if g$t$29835$1LXXoO
                               ((case-lambda
                                  ((g$x$29836$1LXXoO)
                                   (g$f$29832$1LXXoO
                                     (cdr g$ls$29833$1LXXoO)
                                     (cons
                                       (list
                                         (car g$ls$29833$1LXXoO)
                                         g$x$29836$1LXXoO)
                                       g$dups$29834$1LXXoO))))
                                g$t$29835$1LXXoO)
                               (begin
                                 '#f
                                 (g$f$29832$1LXXoO
                                   (cdr g$ls$29833$1LXXoO)
                                   g$dups$29834$1LXXoO)))))
                          (g$find-bound=?$27618$1LXXoO
                            (car g$ls$29833$1LXXoO)
                            (cdr g$ls$29833$1LXXoO)
                            (cdr g$ls$29833$1LXXoO))))))))
           g$f$29832$1LXXoO)
         g$ls$29831$1LXXoO
         '()))))
   (g$chi-internal$27620$1LXXoO
     g$chi-internal$31216$1LXXoO
     (case-lambda
       ((g$e*$29837$1LXXoO g$r$29838$1LXXoO g$mr$29839$1LXXoO)
        ((case-lambda
           ((g$rib$29840$1LXXoO)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$27638$1LXXoO
                   (g$map$19225$1LXXoO
                     (case-lambda
                       ((g$x$29849$1LXXoO)
                        (g$add-subst$27083$1LXXoO
                          g$rib$29840$1LXXoO
                          g$x$29849$1LXXoO)))
                     (g$syntax->list$27092$1LXXoO g$e*$29837$1LXXoO))
                   g$r$29838$1LXXoO
                   g$mr$29839$1LXXoO
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$29840$1LXXoO
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$29850$1LXXoO
                   g$r$29851$1LXXoO
                   g$mr$29852$1LXXoO
                   g$lex*$29853$1LXXoO
                   g$rhs*$29854$1LXXoO
                   g$mod**$29855$1LXXoO
                   g$kwd*$29856$1LXXoO
                   g$_exp*$29857$1LXXoO)
                 ((case-lambda
                    ((g$_exp*$29858$1LXXoO
                       g$kwd*$29859$1LXXoO
                       g$mod**$29860$1LXXoO
                       g$rhs*$29861$1LXXoO
                       g$lex*$29862$1LXXoO
                       g$mr$29863$1LXXoO
                       g$r$29864$1LXXoO
                       g$e*$29865$1LXXoO)
                     (begin
                       (if (null? g$e*$29865$1LXXoO)
                         (g$syntax-violation$27710$1LXXoO
                           '#f
                           '"no expression in body"
                           g$e*$29865$1LXXoO)
                         (void))
                       ((case-lambda
                          ((g$init*$29866$1LXXoO)
                           ((case-lambda
                              ((g$rhs*$29867$1LXXoO)
                               (g$build-letrec*$27021$1LXXoO
                                 '#f
                                 (g$reverse$20074$1LXXoO
                                   g$lex*$29862$1LXXoO)
                                 (g$reverse$20074$1LXXoO
                                   g$rhs*$29867$1LXXoO)
                                 (g$build-sequence$27018$1LXXoO
                                   '#f
                                   g$init*$29866$1LXXoO))))
                            (g$chi-rhs*$27617$1LXXoO
                              g$rhs*$29861$1LXXoO
                              g$r$29864$1LXXoO
                              g$mr$29863$1LXXoO))))
                        (g$chi-expr*$27607$1LXXoO
                          (append
                            (apply
                              append
                              (g$reverse$20074$1LXXoO
                                g$mod**$29860$1LXXoO))
                            g$e*$29865$1LXXoO)
                          g$r$29864$1LXXoO
                          g$mr$29863$1LXXoO)))))
                  g$_exp*$29857$1LXXoO
                  g$kwd*$29856$1LXXoO
                  g$mod**$29855$1LXXoO
                  g$rhs*$29854$1LXXoO
                  g$lex*$29853$1LXXoO
                  g$mr$29852$1LXXoO
                  g$r$29851$1LXXoO
                  g$e*$29850$1LXXoO))))))
         (g$make-empty-rib$27051$1LXXoO)))))
   (g$parse-module$27621$1LXXoO
     g$parse-module$31217$1LXXoO
     (case-lambda
       ((g$e$29868$1LXXoO)
        ((case-lambda
           ((g$t$29869$1LXXoO)
            ((case-lambda
               ((g$ls/false$29870$1LXXoO)
                (if g$ls/false$29870$1LXXoO
                  (apply
                    (case-lambda
                      ((g$export*$29871$1LXXoO g$b*$29872$1LXXoO)
                       (begin
                         (if (not (g$for-all$19223$1LXXoO
                                    g$id?$27093$1LXXoO
                                    g$export*$29871$1LXXoO))
                           (g$syntax-violation$27710$1LXXoO
                             '#f
                             '"module exports must be identifiers"
                             g$e$29868$1LXXoO)
                           (void))
                         (values
                           '#f
                           (g$list->vector$20068$1LXXoO
                             g$export*$29871$1LXXoO)
                           g$b*$29872$1LXXoO))))
                    g$ls/false$29870$1LXXoO)
                  ((case-lambda
                     ((g$t$29873$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$29874$1LXXoO)
                          (if g$ls/false$29874$1LXXoO
                            (apply
                              (case-lambda
                                ((g$name$29875$1LXXoO
                                   g$export*$29876$1LXXoO
                                   g$b*$29877$1LXXoO)
                                 (begin
                                   (if (not (g$id?$27093$1LXXoO
                                              g$name$29875$1LXXoO))
                                     (g$syntax-violation$27710$1LXXoO
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$29868$1LXXoO)
                                     (void))
                                   (if (not (g$for-all$19223$1LXXoO
                                              g$id?$27093$1LXXoO
                                              g$export*$29876$1LXXoO))
                                     (g$syntax-violation$27710$1LXXoO
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$29868$1LXXoO)
                                     (void))
                                   (values
                                     g$name$29875$1LXXoO
                                     (g$list->vector$20068$1LXXoO
                                       g$export*$29876$1LXXoO)
                                     g$b*$29877$1LXXoO))))
                              g$ls/false$29874$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"invalid syntax"
                              g$t$29873$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$29873$1LXXoO
                         '(_ any each-any . each-any)))))
                   g$t$29869$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$29869$1LXXoO
               '(_ each-any . each-any)))))
         g$e$29868$1LXXoO))))
   (g$9806$27622$1LXXoO
     g$9806$31218$1LXXoO
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$9809$1LXXoO
       '#t
       '#t
       '#((mutable first-mark)
          (mutable exp-id-vec)
          (mutable exp-lab-vec))))
   (g$9808$27623$1LXXoO g$9808$31219$1LXXoO '#f)
   (g$9807$27624$1LXXoO
     g$9807$31220$1LXXoO
     (make-record-constructor-descriptor
       g$9806$27622$1LXXoO
       '#f
       g$9808$27623$1LXXoO))
   (g$module-interface?$27627$1LXXoO
     g$module-interface?$31221$1LXXoO
     (record-predicate g$9806$27622$1LXXoO))
   (g$make-module-interface$27628$1LXXoO
     g$make-module-interface$31222$1LXXoO
     (record-constructor g$9807$27624$1LXXoO))
   (g$module-interface-first-mark$27629$1LXXoO
     g$module-interface-first-mark$31223$1LXXoO
     (record-accessor g$9806$27622$1LXXoO '0))
   (g$module-interface-exp-id-vec$27630$1LXXoO
     g$module-interface-exp-id-vec$31224$1LXXoO
     (record-accessor g$9806$27622$1LXXoO '1))
   (g$module-interface-exp-lab-vec$27631$1LXXoO
     g$module-interface-exp-lab-vec$31225$1LXXoO
     (record-accessor g$9806$27622$1LXXoO '2))
   (g$set-module-interface-first-mark!$27632$1LXXoO
     g$set-module-interface-first-mark!$31226$1LXXoO
     (record-mutator g$9806$27622$1LXXoO '0))
   (g$set-module-interface-exp-id-vec!$27633$1LXXoO
     g$set-module-interface-exp-id-vec!$31227$1LXXoO
     (record-mutator g$9806$27622$1LXXoO '1))
   (g$set-module-interface-exp-lab-vec!$27634$1LXXoO
     g$set-module-interface-exp-lab-vec!$31228$1LXXoO
     (record-mutator g$9806$27622$1LXXoO '2))
   (g$module-interface-exp-id*$27635$1LXXoO
     g$module-interface-exp-id*$31229$1LXXoO
     (case-lambda
       ((g$iface$29878$1LXXoO g$id$29879$1LXXoO)
        (letrec* ((g$diff-marks$29880$1LXXoO
                    (case-lambda
                      ((g$ls$29884$1LXXoO g$x$29885$1LXXoO)
                       (begin
                         (if (null? g$ls$29884$1LXXoO)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$29886$1LXXoO)
                             (if (eq? g$a$29886$1LXXoO g$x$29885$1LXXoO)
                               '()
                               (cons
                                 g$a$29886$1LXXoO
                                 (g$diff-marks$29880$1LXXoO
                                   (cdr g$ls$29884$1LXXoO)
                                   g$x$29885$1LXXoO)))))
                          (car g$ls$29884$1LXXoO)))))))
          ((case-lambda
             ((g$diff$29881$1LXXoO g$id-vec$29882$1LXXoO)
              (if (null? g$diff$29881$1LXXoO)
                g$id-vec$29882$1LXXoO
                (g$vector-map$20124$1LXXoO
                  (case-lambda
                    ((g$x$29883$1LXXoO)
                     (g$make-stx$27066$1LXXoO
                       (g$stx-expr$27067$1LXXoO g$x$29883$1LXXoO)
                       (append
                         g$diff$29881$1LXXoO
                         (g$stx-mark*$27068$1LXXoO g$x$29883$1LXXoO))
                       '()
                       '())))
                  g$id-vec$29882$1LXXoO))))
           (g$diff-marks$29880$1LXXoO
             (g$stx-mark*$27068$1LXXoO g$id$29879$1LXXoO)
             (g$module-interface-first-mark$27629$1LXXoO
               g$iface$29878$1LXXoO))
           (g$module-interface-exp-id-vec$27630$1LXXoO
             g$iface$29878$1LXXoO))))))
   (g$syntax-transpose$27636$1LXXoO
     g$syntax-transpose$31230$1LXXoO
     (case-lambda
       ((g$object$29887$1LXXoO
          g$base-id$29888$1LXXoO
          g$new-id$29889$1LXXoO)
        (letrec* ((g$who$29890$1LXXoO 'syntax-transpose)
                  (g$err$29891$1LXXoO
                    (case-lambda
                      ((g$msg$29933$1LXXoO . g$args$29934$1LXXoO)
                       (apply
                         assertion-violation
                         g$who$29890$1LXXoO
                         g$msg$29933$1LXXoO
                         g$args$29934$1LXXoO))))
                  (g$split$29892$1LXXoO
                    (case-lambda
                      ((g$s*$29926$1LXXoO)
                       (if (eq? (car g$s*$29926$1LXXoO) 'shift)
                         (values (list 'shift) (cdr g$s*$29926$1LXXoO))
                         (begin
                           '#f
                           (call-with-values
                             (case-lambda
                               (()
                                (g$split$29892$1LXXoO
                                  (cdr g$s*$29926$1LXXoO))))
                             (case-lambda
                               ((g$s1*$29929$1LXXoO g$s2*$29930$1LXXoO)
                                ((case-lambda
                                   ((g$s2*$29931$1LXXoO
                                      g$s1*$29932$1LXXoO)
                                    (values
                                      (cons
                                        (car g$s*$29926$1LXXoO)
                                        g$s1*$29932$1LXXoO)
                                      g$s2*$29931$1LXXoO)))
                                 g$s2*$29930$1LXXoO
                                 g$s1*$29929$1LXXoO)))))))))
                  (g$final$29893$1LXXoO
                    (case-lambda
                      ((g$s*$29924$1LXXoO)
                       (if ((case-lambda
                              ((g$t$29925$1LXXoO)
                               (if g$t$29925$1LXXoO
                                 g$t$29925$1LXXoO
                                 (begin
                                   '#f
                                   (eq? (car g$s*$29924$1LXXoO)
                                        'shift)))))
                            (null? g$s*$29924$1LXXoO))
                         '()
                         (begin
                           '#f
                           (cons
                             (car g$s*$29924$1LXXoO)
                             (g$final$29893$1LXXoO
                               (cdr g$s*$29924$1LXXoO))))))))
                  (g$diff$29894$1LXXoO
                    (case-lambda
                      ((g$m$29904$1LXXoO
                         g$m*$29905$1LXXoO
                         g$s*$29906$1LXXoO
                         g$ae*$29907$1LXXoO)
                       (if (null? g$m*$29905$1LXXoO)
                         (g$err$29891$1LXXoO
                           '"unmatched identifiers"
                           g$base-id$29888$1LXXoO
                           g$new-id$29889$1LXXoO)
                         ((case-lambda
                            ((g$m1$29908$1LXXoO)
                             (if (eq? g$m$29904$1LXXoO
                                      g$m1$29908$1LXXoO)
                               (values
                                 '()
                                 (g$final$29893$1LXXoO
                                   g$s*$29906$1LXXoO)
                                 '())
                               (call-with-values
                                 (case-lambda
                                   (()
                                    (g$split$29892$1LXXoO
                                      g$s*$29906$1LXXoO)))
                                 (case-lambda
                                   ((g$s1*$29911$1LXXoO
                                      g$s2*$29912$1LXXoO)
                                    ((case-lambda
                                       ((g$s2*$29913$1LXXoO
                                          g$s1*$29914$1LXXoO)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$diff$29894$1LXXoO
                                               g$m$29904$1LXXoO
                                               (cdr g$m*$29905$1LXXoO)
                                               g$s2*$29913$1LXXoO
                                               (cdr g$ae*$29907$1LXXoO))))
                                          (case-lambda
                                            ((g$nm*$29918$1LXXoO
                                               g$ns*$29919$1LXXoO
                                               g$nae*$29920$1LXXoO)
                                             ((case-lambda
                                                ((g$nae*$29921$1LXXoO
                                                   g$ns*$29922$1LXXoO
                                                   g$nm*$29923$1LXXoO)
                                                 (values
                                                   (cons
                                                     g$m1$29908$1LXXoO
                                                     g$nm*$29923$1LXXoO)
                                                   (append
                                                     g$s1*$29914$1LXXoO
                                                     g$ns*$29922$1LXXoO)
                                                   (cons
                                                     (car g$ae*$29907$1LXXoO)
                                                     g$nae*$29921$1LXXoO))))
                                              g$nae*$29920$1LXXoO
                                              g$ns*$29919$1LXXoO
                                              g$nm*$29918$1LXXoO))))))
                                     g$s2*$29912$1LXXoO
                                     g$s1*$29911$1LXXoO)))))))
                          (car g$m*$29905$1LXXoO)))))))
          (begin
            (if (not (g$id?$27093$1LXXoO g$base-id$29888$1LXXoO))
              (g$err$29891$1LXXoO
                '"not an identifier"
                g$base-id$29888$1LXXoO)
              (void))
            (if (not (g$id?$27093$1LXXoO g$new-id$29889$1LXXoO))
              (g$err$29891$1LXXoO
                '"not an identifier"
                g$new-id$29889$1LXXoO)
              (void))
            (if (not (g$free-identifier=?$27701$1LXXoO
                       g$base-id$29888$1LXXoO
                       g$new-id$29889$1LXXoO))
              (g$err$29891$1LXXoO
                '"not the same identifier"
                g$base-id$29888$1LXXoO
                g$new-id$29889$1LXXoO)
              (void))
            (call-with-values
              (case-lambda
                (()
                 (g$diff$29894$1LXXoO
                   (car (g$stx-mark*$27068$1LXXoO
                          g$base-id$29888$1LXXoO))
                   (g$stx-mark*$27068$1LXXoO g$new-id$29889$1LXXoO)
                   (g$stx-subst*$27069$1LXXoO g$new-id$29889$1LXXoO)
                   (g$stx-ae*$27070$1LXXoO g$new-id$29889$1LXXoO))))
              (case-lambda
                ((g$m*$29898$1LXXoO
                   g$s*$29899$1LXXoO
                   g$ae*$29900$1LXXoO)
                 ((case-lambda
                    ((g$ae*$29901$1LXXoO
                       g$s*$29902$1LXXoO
                       g$m*$29903$1LXXoO)
                     (if (if (null? g$m*$29903$1LXXoO)
                           (begin '#f (null? g$s*$29902$1LXXoO))
                           '#f)
                       g$object$29887$1LXXoO
                       (g$mkstx$27081$1LXXoO
                         g$object$29887$1LXXoO
                         g$m*$29903$1LXXoO
                         g$s*$29902$1LXXoO
                         g$ae*$29901$1LXXoO))))
                  g$ae*$29900$1LXXoO
                  g$s*$29899$1LXXoO
                  g$m*$29898$1LXXoO)))))))))
   (g$chi-internal-module$27637$1LXXoO
     g$chi-internal-module$31231$1LXXoO
     (case-lambda
       ((g$e$29935$1LXXoO
          g$r$29936$1LXXoO
          g$mr$29937$1LXXoO
          g$lex*$29938$1LXXoO
          g$rhs*$29939$1LXXoO
          g$mod**$29940$1LXXoO
          g$kwd*$29941$1LXXoO)
        (call-with-values
          (case-lambda
            (() (g$parse-module$27621$1LXXoO g$e$29935$1LXXoO)))
          (case-lambda
            ((g$name$29945$1LXXoO
               g$exp-id*$29946$1LXXoO
               g$e*$29947$1LXXoO)
             ((case-lambda
                ((g$e*$29948$1LXXoO
                   g$exp-id*$29949$1LXXoO
                   g$name$29950$1LXXoO)
                 ((case-lambda
                    ((g$rib$29951$1LXXoO)
                     ((case-lambda
                        ((g$e*$29952$1LXXoO)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$27638$1LXXoO
                                g$e*$29952$1LXXoO
                                g$r$29936$1LXXoO
                                g$mr$29937$1LXXoO
                                g$lex*$29938$1LXXoO
                                g$rhs*$29939$1LXXoO
                                g$mod**$29940$1LXXoO
                                g$kwd*$29941$1LXXoO
                                '()
                                g$rib$29951$1LXXoO
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$29961$1LXXoO
                                g$r$29962$1LXXoO
                                g$mr$29963$1LXXoO
                                g$lex*$29964$1LXXoO
                                g$rhs*$29965$1LXXoO
                                g$mod**$29966$1LXXoO
                                g$kwd*$29967$1LXXoO
                                g$_exp*$29968$1LXXoO)
                              ((case-lambda
                                 ((g$_exp*$29969$1LXXoO
                                    g$kwd*$29970$1LXXoO
                                    g$mod**$29971$1LXXoO
                                    g$rhs*$29972$1LXXoO
                                    g$lex*$29973$1LXXoO
                                    g$mr$29974$1LXXoO
                                    g$r$29975$1LXXoO
                                    g$e*$29976$1LXXoO)
                                  ((case-lambda
                                     ((g$exp-lab*$29977$1LXXoO
                                        g$mod**$29978$1LXXoO)
                                      (if (not g$name$29950$1LXXoO)
                                        (values
                                          g$lex*$29973$1LXXoO
                                          g$rhs*$29972$1LXXoO
                                          g$exp-id*$29949$1LXXoO
                                          g$exp-lab*$29977$1LXXoO
                                          g$r$29975$1LXXoO
                                          g$mr$29974$1LXXoO
                                          g$mod**$29978$1LXXoO
                                          g$kwd*$29970$1LXXoO)
                                        ((case-lambda
                                           ((g$lab$29979$1LXXoO
                                              g$iface$29980$1LXXoO)
                                            (values
                                              g$lex*$29973$1LXXoO
                                              g$rhs*$29972$1LXXoO
                                              (vector
                                                g$name$29950$1LXXoO)
                                              (vector
                                                g$lab$29979$1LXXoO)
                                              (cons
                                                (cons
                                                  g$lab$29979$1LXXoO
                                                  (cons
                                                    '$module
                                                    g$iface$29980$1LXXoO))
                                                g$r$29975$1LXXoO)
                                              (cons
                                                (cons
                                                  g$lab$29979$1LXXoO
                                                  (cons
                                                    '$module
                                                    g$iface$29980$1LXXoO))
                                                g$mr$29974$1LXXoO)
                                              g$mod**$29978$1LXXoO
                                              g$kwd*$29970$1LXXoO)))
                                         (g$gen-label$27030$1LXXoO
                                           'module)
                                         (g$make-module-interface$27628$1LXXoO
                                           (car (g$stx-mark*$27068$1LXXoO
                                                  g$name$29950$1LXXoO))
                                           (g$vector-map$20124$1LXXoO
                                             (case-lambda
                                               ((g$x$29981$1LXXoO)
                                                (g$make-stx$27066$1LXXoO
                                                  (g$stx-expr$27067$1LXXoO
                                                    g$x$29981$1LXXoO)
                                                  (g$stx-mark*$27068$1LXXoO
                                                    g$x$29981$1LXXoO)
                                                  '()
                                                  '())))
                                             g$exp-id*$29949$1LXXoO)
                                           g$exp-lab*$29977$1LXXoO)))))
                                   (g$vector-map$20124$1LXXoO
                                     (case-lambda
                                       ((g$x$29982$1LXXoO)
                                        ((case-lambda
                                           ((g$t$29983$1LXXoO)
                                            (if g$t$29983$1LXXoO
                                              g$t$29983$1LXXoO
                                              (begin
                                                '#f
                                                (g$syntax-violation$27710$1LXXoO
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$29982$1LXXoO)))))
                                         (g$id->label$27106$1LXXoO
                                           (g$make-stx$27066$1LXXoO
                                             (g$id->sym$27094$1LXXoO
                                               g$x$29982$1LXXoO)
                                             (g$stx-mark*$27068$1LXXoO
                                               g$x$29982$1LXXoO)
                                             (list g$rib$29951$1LXXoO)
                                             '())))))
                                     g$exp-id*$29949$1LXXoO)
                                   (cons
                                     g$e*$29976$1LXXoO
                                     g$mod**$29971$1LXXoO))))
                               g$_exp*$29968$1LXXoO
                               g$kwd*$29967$1LXXoO
                               g$mod**$29966$1LXXoO
                               g$rhs*$29965$1LXXoO
                               g$lex*$29964$1LXXoO
                               g$mr$29963$1LXXoO
                               g$r$29962$1LXXoO
                               g$e*$29961$1LXXoO))))))
                      (g$map$19225$1LXXoO
                        (case-lambda
                          ((g$x$29984$1LXXoO)
                           (g$add-subst$27083$1LXXoO
                             g$rib$29951$1LXXoO
                             g$x$29984$1LXXoO)))
                        (g$syntax->list$27092$1LXXoO
                          g$e*$29948$1LXXoO)))))
                  (g$make-empty-rib$27051$1LXXoO))))
              g$e*$29947$1LXXoO
              g$exp-id*$29946$1LXXoO
              g$name$29945$1LXXoO)))))))
   (g$chi-body*$27638$1LXXoO
     g$chi-body*$31232$1LXXoO
     (case-lambda
       ((g$e*$29985$1LXXoO
          g$r$29986$1LXXoO
          g$mr$29987$1LXXoO
          g$lex*$29988$1LXXoO
          g$rhs*$29989$1LXXoO
          g$mod**$29990$1LXXoO
          g$kwd*$29991$1LXXoO
          g$exp*$29992$1LXXoO
          g$rib$29993$1LXXoO
          g$mix?$29994$1LXXoO
          g$sd?$29995$1LXXoO)
        (if (null? g$e*$29985$1LXXoO)
          (values
            g$e*$29985$1LXXoO
            g$r$29986$1LXXoO
            g$mr$29987$1LXXoO
            g$lex*$29988$1LXXoO
            g$rhs*$29989$1LXXoO
            g$mod**$29990$1LXXoO
            g$kwd*$29991$1LXXoO
            g$exp*$29992$1LXXoO)
          (begin
            '#f
            ((case-lambda
               ((g$e$29996$1LXXoO)
                (call-with-values
                  (case-lambda
                    (()
                     (g$syntax-type$27113$1LXXoO
                       g$e$29996$1LXXoO
                       g$r$29986$1LXXoO)))
                  (case-lambda
                    ((g$type$30000$1LXXoO
                       g$value$30001$1LXXoO
                       g$kwd$30002$1LXXoO)
                     ((case-lambda
                        ((g$kwd$30003$1LXXoO
                           g$value$30004$1LXXoO
                           g$type$30005$1LXXoO)
                         ((case-lambda
                            ((g$kwd*$30006$1LXXoO)
                             ((case-lambda
                                ((g$t$30007$1LXXoO)
                                 (if (eqv? g$t$30007$1LXXoO 'define)
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define$27531$1LXXoO
                                          g$e$29996$1LXXoO)))
                                     (case-lambda
                                       ((g$id$30010$1LXXoO
                                          g$rhs$30011$1LXXoO)
                                        ((case-lambda
                                           ((g$rhs$30012$1LXXoO
                                              g$id$30013$1LXXoO)
                                            (begin
                                              (if (g$bound-id-member?$27100$1LXXoO
                                                    g$id$30013$1LXXoO
                                                    g$kwd*$30006$1LXXoO)
                                                (g$syntax-violation$27710$1LXXoO
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$29996$1LXXoO)
                                                (void))
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$gen-define-label+loc$27032$1LXXoO
                                                     g$id$30013$1LXXoO
                                                     g$rib$29993$1LXXoO
                                                     g$sd?$29995$1LXXoO)))
                                                (case-lambda
                                                  ((g$lab$30016$1LXXoO
                                                     g$lex$30017$1LXXoO)
                                                   ((case-lambda
                                                      ((g$lex$30018$1LXXoO
                                                         g$lab$30019$1LXXoO)
                                                       (begin
                                                         (g$extend-rib!$27054$1LXXoO
                                                           g$rib$29993$1LXXoO
                                                           g$id$30013$1LXXoO
                                                           g$lab$30019$1LXXoO
                                                           g$sd?$29995$1LXXoO)
                                                         (g$chi-body*$27638$1LXXoO
                                                           (cdr g$e*$29985$1LXXoO)
                                                           (g$add-lexical$27538$1LXXoO
                                                             g$lab$30019$1LXXoO
                                                             g$lex$30018$1LXXoO
                                                             g$r$29986$1LXXoO)
                                                           g$mr$29987$1LXXoO
                                                           (cons
                                                             g$lex$30018$1LXXoO
                                                             g$lex*$29988$1LXXoO)
                                                           (cons
                                                             g$rhs$30012$1LXXoO
                                                             g$rhs*$29989$1LXXoO)
                                                           g$mod**$29990$1LXXoO
                                                           g$kwd*$30006$1LXXoO
                                                           g$exp*$29992$1LXXoO
                                                           g$rib$29993$1LXXoO
                                                           g$mix?$29994$1LXXoO
                                                           g$sd?$29995$1LXXoO))))
                                                    g$lex$30017$1LXXoO
                                                    g$lab$30016$1LXXoO)))))))
                                         g$rhs$30011$1LXXoO
                                         g$id$30010$1LXXoO))))
                                   (if (eqv?
                                         g$t$30007$1LXXoO
                                         'define-syntax)
                                     (call-with-values
                                       (case-lambda
                                         (()
                                          (g$parse-define-syntax$27532$1LXXoO
                                            g$e$29996$1LXXoO)))
                                       (case-lambda
                                         ((g$id$30022$1LXXoO
                                            g$rhs$30023$1LXXoO)
                                          ((case-lambda
                                             ((g$rhs$30024$1LXXoO
                                                g$id$30025$1LXXoO)
                                              (begin
                                                (if (g$bound-id-member?$27100$1LXXoO
                                                      g$id$30025$1LXXoO
                                                      g$kwd*$30006$1LXXoO)
                                                  (g$syntax-violation$27710$1LXXoO
                                                    '#f
                                                    '"cannot redefine keyword"
                                                    g$e$29996$1LXXoO)
                                                  (void))
                                                ((case-lambda
                                                   ((g$lab$30026$1LXXoO)
                                                    ((case-lambda
                                                       ((g$expanded-rhs$30027$1LXXoO)
                                                        (begin
                                                          (g$extend-rib!$27054$1LXXoO
                                                            g$rib$29993$1LXXoO
                                                            g$id$30025$1LXXoO
                                                            g$lab$30026$1LXXoO
                                                            g$sd?$29995$1LXXoO)
                                                          ((case-lambda
                                                             ((g$b$30028$1LXXoO)
                                                              (g$chi-body*$27638$1LXXoO
                                                                (cdr g$e*$29985$1LXXoO)
                                                                (cons
                                                                  (cons
                                                                    g$lab$30026$1LXXoO
                                                                    g$b$30028$1LXXoO)
                                                                  g$r$29986$1LXXoO)
                                                                (cons
                                                                  (cons
                                                                    g$lab$30026$1LXXoO
                                                                    g$b$30028$1LXXoO)
                                                                  g$mr$29987$1LXXoO)
                                                                g$lex*$29988$1LXXoO
                                                                g$rhs*$29989$1LXXoO
                                                                g$mod**$29990$1LXXoO
                                                                g$kwd*$30006$1LXXoO
                                                                g$exp*$29992$1LXXoO
                                                                g$rib$29993$1LXXoO
                                                                g$mix?$29994$1LXXoO
                                                                g$sd?$29995$1LXXoO)))
                                                           (g$make-eval-transformer$27141$1LXXoO
                                                             g$expanded-rhs$30027$1LXXoO)))))
                                                     (g$expand-transformer$27639$1LXXoO
                                                       g$rhs$30024$1LXXoO
                                                       g$mr$29987$1LXXoO))))
                                                 (g$gen-define-label$27033$1LXXoO
                                                   g$id$30025$1LXXoO
                                                   g$rib$29993$1LXXoO
                                                   g$sd?$29995$1LXXoO)))))
                                           g$rhs$30023$1LXXoO
                                           g$id$30022$1LXXoO))))
                                     (if (g$memv$19218$1LXXoO
                                           g$t$30007$1LXXoO
                                           '(let-syntax letrec-syntax))
                                       ((case-lambda
                                          ((g$t$30029$1LXXoO)
                                           ((case-lambda
                                              ((g$ls/false$30030$1LXXoO)
                                               (if (if g$ls/false$30030$1LXXoO
                                                     (begin
                                                       '#f
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$30031$1LXXoO
                                                              g$xrhs*$30032$1LXXoO
                                                              g$xbody*$30033$1LXXoO)
                                                            (if (not (g$valid-bound-ids?$27098$1LXXoO
                                                                       g$xlhs*$30031$1LXXoO))
                                                              (g$syntax-violation$27710$1LXXoO
                                                                '#f
                                                                '"invalid identifiers"
                                                                g$e$29996$1LXXoO)
                                                              (void))))
                                                         g$ls/false$30030$1LXXoO))
                                                     '#f)
                                                 (apply
                                                   (case-lambda
                                                     ((g$xlhs*$30034$1LXXoO
                                                        g$xrhs*$30035$1LXXoO
                                                        g$xbody*$30036$1LXXoO)
                                                      ((case-lambda
                                                         ((g$xlab*$30037$1LXXoO)
                                                          ((case-lambda
                                                             ((g$xrib$30038$1LXXoO)
                                                              ((case-lambda
                                                                 ((g$xb*$30039$1LXXoO)
                                                                  (g$chi-body*$27638$1LXXoO
                                                                    (append
                                                                      (g$map$19225$1LXXoO
                                                                        (case-lambda
                                                                          ((g$x$30040$1LXXoO)
                                                                           (g$add-subst$27083$1LXXoO
                                                                             g$xrib$30038$1LXXoO
                                                                             g$x$30040$1LXXoO)))
                                                                        g$xbody*$30036$1LXXoO)
                                                                      (cdr g$e*$29985$1LXXoO))
                                                                    (append
                                                                      (g$map$19225$1LXXoO
                                                                        cons
                                                                        g$xlab*$30037$1LXXoO
                                                                        g$xb*$30039$1LXXoO)
                                                                      g$r$29986$1LXXoO)
                                                                    (append
                                                                      (g$map$19225$1LXXoO
                                                                        cons
                                                                        g$xlab*$30037$1LXXoO
                                                                        g$xb*$30039$1LXXoO)
                                                                      g$mr$29987$1LXXoO)
                                                                    g$lex*$29988$1LXXoO
                                                                    g$rhs*$29989$1LXXoO
                                                                    g$mod**$29990$1LXXoO
                                                                    g$kwd*$30006$1LXXoO
                                                                    g$exp*$29992$1LXXoO
                                                                    g$rib$29993$1LXXoO
                                                                    g$mix?$29994$1LXXoO
                                                                    g$sd?$29995$1LXXoO)))
                                                               (g$map$19225$1LXXoO
                                                                 (case-lambda
                                                                   ((g$x$30041$1LXXoO)
                                                                    (g$make-eval-transformer$27141$1LXXoO
                                                                      (g$expand-transformer$27639$1LXXoO
                                                                        (if (eq? g$type$30005$1LXXoO
                                                                                 'let-syntax)
                                                                          g$x$30041$1LXXoO
                                                                          (g$add-subst$27083$1LXXoO
                                                                            g$xrib$30038$1LXXoO
                                                                            g$x$30041$1LXXoO))
                                                                        g$mr$29987$1LXXoO))))
                                                                 g$xrhs*$30035$1LXXoO))))
                                                           (g$make-full-rib$27059$1LXXoO
                                                             g$xlhs*$30034$1LXXoO
                                                             g$xlab*$30037$1LXXoO))))
                                                       (g$map$19225$1LXXoO
                                                         g$gen-label$27030$1LXXoO
                                                         g$xlhs*$30034$1LXXoO))))
                                                   g$ls/false$30030$1LXXoO)
                                                 (g$syntax-violation$27710$1LXXoO
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$30029$1LXXoO))))
                                            (g$syntax-dispatch$27591$1LXXoO
                                              g$t$30029$1LXXoO
                                              '(_ #(each (any any))
                                                  .
                                                  each-any)))))
                                        g$e$29996$1LXXoO)
                                       (if (eqv?
                                             g$t$30007$1LXXoO
                                             'begin)
                                         ((case-lambda
                                            ((g$t$30042$1LXXoO)
                                             ((case-lambda
                                                ((g$ls/false$30043$1LXXoO)
                                                 (if g$ls/false$30043$1LXXoO
                                                   (apply
                                                     (case-lambda
                                                       ((g$x*$30044$1LXXoO)
                                                        (g$chi-body*$27638$1LXXoO
                                                          (append
                                                            g$x*$30044$1LXXoO
                                                            (cdr g$e*$29985$1LXXoO))
                                                          g$r$29986$1LXXoO
                                                          g$mr$29987$1LXXoO
                                                          g$lex*$29988$1LXXoO
                                                          g$rhs*$29989$1LXXoO
                                                          g$mod**$29990$1LXXoO
                                                          g$kwd*$30006$1LXXoO
                                                          g$exp*$29992$1LXXoO
                                                          g$rib$29993$1LXXoO
                                                          g$mix?$29994$1LXXoO
                                                          g$sd?$29995$1LXXoO)))
                                                     g$ls/false$30043$1LXXoO)
                                                   (g$syntax-violation$27710$1LXXoO
                                                     '#f
                                                     '"invalid syntax"
                                                     g$t$30042$1LXXoO))))
                                              (g$syntax-dispatch$27591$1LXXoO
                                                g$t$30042$1LXXoO
                                                '(_ . each-any)))))
                                          g$e$29996$1LXXoO)
                                         (if (g$memv$19218$1LXXoO
                                               g$t$30007$1LXXoO
                                               '(global-macro
                                                  global-macro!))
                                           (g$chi-body*$27638$1LXXoO
                                             (cons
                                               (g$add-subst$27083$1LXXoO
                                                 g$rib$29993$1LXXoO
                                                 (g$chi-global-macro$27606$1LXXoO
                                                   g$value$30004$1LXXoO
                                                   g$e$29996$1LXXoO
                                                   g$r$29986$1LXXoO))
                                               (cdr g$e*$29985$1LXXoO))
                                             g$r$29986$1LXXoO
                                             g$mr$29987$1LXXoO
                                             g$lex*$29988$1LXXoO
                                             g$rhs*$29989$1LXXoO
                                             g$mod**$29990$1LXXoO
                                             g$kwd*$30006$1LXXoO
                                             g$exp*$29992$1LXXoO
                                             g$rib$29993$1LXXoO
                                             g$mix?$29994$1LXXoO
                                             g$sd?$29995$1LXXoO)
                                           (if (g$memv$19218$1LXXoO
                                                 g$t$30007$1LXXoO
                                                 '(local-macro
                                                    local-macro!))
                                             (g$chi-body*$27638$1LXXoO
                                               (cons
                                                 (g$add-subst$27083$1LXXoO
                                                   g$rib$29993$1LXXoO
                                                   (g$chi-local-macro$27605$1LXXoO
                                                     g$value$30004$1LXXoO
                                                     g$e$29996$1LXXoO
                                                     g$r$29986$1LXXoO))
                                                 (cdr g$e*$29985$1LXXoO))
                                               g$r$29986$1LXXoO
                                               g$mr$29987$1LXXoO
                                               g$lex*$29988$1LXXoO
                                               g$rhs*$29989$1LXXoO
                                               g$mod**$29990$1LXXoO
                                               g$kwd*$30006$1LXXoO
                                               g$exp*$29992$1LXXoO
                                               g$rib$29993$1LXXoO
                                               g$mix?$29994$1LXXoO
                                               g$sd?$29995$1LXXoO)
                                             (if (g$memv$19218$1LXXoO
                                                   g$t$30007$1LXXoO
                                                   '(macro macro!))
                                               (g$chi-body*$27638$1LXXoO
                                                 (cons
                                                   (g$add-subst$27083$1LXXoO
                                                     g$rib$29993$1LXXoO
                                                     (g$chi-macro$27604$1LXXoO
                                                       g$value$30004$1LXXoO
                                                       g$e$29996$1LXXoO
                                                       g$r$29986$1LXXoO))
                                                   (cdr g$e*$29985$1LXXoO))
                                                 g$r$29986$1LXXoO
                                                 g$mr$29987$1LXXoO
                                                 g$lex*$29988$1LXXoO
                                                 g$rhs*$29989$1LXXoO
                                                 g$mod**$29990$1LXXoO
                                                 g$kwd*$30006$1LXXoO
                                                 g$exp*$29992$1LXXoO
                                                 g$rib$29993$1LXXoO
                                                 g$mix?$29994$1LXXoO
                                                 g$sd?$29995$1LXXoO)
                                               (if (eqv?
                                                     g$t$30007$1LXXoO
                                                     'module)
                                                 (call-with-values
                                                   (case-lambda
                                                     (()
                                                      (g$chi-internal-module$27637$1LXXoO
                                                        g$e$29996$1LXXoO
                                                        g$r$29986$1LXXoO
                                                        g$mr$29987$1LXXoO
                                                        g$lex*$29988$1LXXoO
                                                        g$rhs*$29989$1LXXoO
                                                        g$mod**$29990$1LXXoO
                                                        g$kwd*$30006$1LXXoO)))
                                                   (case-lambda
                                                     ((g$lex*$30053$1LXXoO
                                                        g$rhs*$30054$1LXXoO
                                                        g$m-exp-id*$30055$1LXXoO
                                                        g$m-exp-lab*$30056$1LXXoO
                                                        g$r$30057$1LXXoO
                                                        g$mr$30058$1LXXoO
                                                        g$mod**$30059$1LXXoO
                                                        g$kwd*$30060$1LXXoO)
                                                      ((case-lambda
                                                         ((g$kwd*$30061$1LXXoO
                                                            g$mod**$30062$1LXXoO
                                                            g$mr$30063$1LXXoO
                                                            g$r$30064$1LXXoO
                                                            g$m-exp-lab*$30065$1LXXoO
                                                            g$m-exp-id*$30066$1LXXoO
                                                            g$rhs*$30067$1LXXoO
                                                            g$lex*$30068$1LXXoO)
                                                          (begin
                                                            (g$vector-for-each$20125$1LXXoO
                                                              (case-lambda
                                                                ((g$id$30069$1LXXoO
                                                                   g$lab$30070$1LXXoO)
                                                                 (g$extend-rib!$27054$1LXXoO
                                                                   g$rib$29993$1LXXoO
                                                                   g$id$30069$1LXXoO
                                                                   g$lab$30070$1LXXoO
                                                                   g$sd?$29995$1LXXoO)))
                                                              g$m-exp-id*$30066$1LXXoO
                                                              g$m-exp-lab*$30065$1LXXoO)
                                                            (g$chi-body*$27638$1LXXoO
                                                              (cdr g$e*$29985$1LXXoO)
                                                              g$r$30064$1LXXoO
                                                              g$mr$30063$1LXXoO
                                                              g$lex*$30068$1LXXoO
                                                              g$rhs*$30067$1LXXoO
                                                              g$mod**$30062$1LXXoO
                                                              g$kwd*$30061$1LXXoO
                                                              g$exp*$29992$1LXXoO
                                                              g$rib$29993$1LXXoO
                                                              g$mix?$29994$1LXXoO
                                                              g$sd?$29995$1LXXoO))))
                                                       g$kwd*$30060$1LXXoO
                                                       g$mod**$30059$1LXXoO
                                                       g$mr$30058$1LXXoO
                                                       g$r$30057$1LXXoO
                                                       g$m-exp-lab*$30056$1LXXoO
                                                       g$m-exp-id*$30055$1LXXoO
                                                       g$rhs*$30054$1LXXoO
                                                       g$lex*$30053$1LXXoO))))
                                                 (if (eqv?
                                                       g$t$30007$1LXXoO
                                                       'library)
                                                   (begin
                                                     (g$library-expander$27694$1LXXoO
                                                       (g$stx->datum$27104$1LXXoO
                                                         g$e$29996$1LXXoO))
                                                     (g$chi-body*$27638$1LXXoO
                                                       (cdr g$e*$29985$1LXXoO)
                                                       g$r$29986$1LXXoO
                                                       g$mr$29987$1LXXoO
                                                       g$lex*$29988$1LXXoO
                                                       g$rhs*$29989$1LXXoO
                                                       g$mod**$29990$1LXXoO
                                                       g$kwd*$30006$1LXXoO
                                                       g$exp*$29992$1LXXoO
                                                       g$rib$29993$1LXXoO
                                                       g$mix?$29994$1LXXoO
                                                       g$sd?$29995$1LXXoO))
                                                   (if (eqv?
                                                         g$t$30007$1LXXoO
                                                         'export)
                                                     ((case-lambda
                                                        ((g$t$30071$1LXXoO)
                                                         ((case-lambda
                                                            ((g$ls/false$30072$1LXXoO)
                                                             (if g$ls/false$30072$1LXXoO
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$exp-decl*$30073$1LXXoO)
                                                                    (g$chi-body*$27638$1LXXoO
                                                                      (cdr g$e*$29985$1LXXoO)
                                                                      g$r$29986$1LXXoO
                                                                      g$mr$29987$1LXXoO
                                                                      g$lex*$29988$1LXXoO
                                                                      g$rhs*$29989$1LXXoO
                                                                      g$mod**$29990$1LXXoO
                                                                      g$kwd*$30006$1LXXoO
                                                                      (append
                                                                        g$exp-decl*$30073$1LXXoO
                                                                        g$exp*$29992$1LXXoO)
                                                                      g$rib$29993$1LXXoO
                                                                      g$mix?$29994$1LXXoO
                                                                      g$sd?$29995$1LXXoO)))
                                                                 g$ls/false$30072$1LXXoO)
                                                               (g$syntax-violation$27710$1LXXoO
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$30071$1LXXoO))))
                                                          (g$syntax-dispatch$27591$1LXXoO
                                                            g$t$30071$1LXXoO
                                                            '(_ .
                                                                each-any)))))
                                                      g$e$29996$1LXXoO)
                                                     (if (eqv?
                                                           g$t$30007$1LXXoO
                                                           'import)
                                                       ((case-lambda
                                                          (()
                                                           (letrec* ((g$module-import?$30074$1LXXoO
                                                                       (case-lambda
                                                                         ((g$e$30116$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$t$30117$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$30118$1LXXoO)
                                                                                  (if (if g$ls/false$30118$1LXXoO
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$id$30119$1LXXoO)
                                                                                               (g$id?$27093$1LXXoO
                                                                                                 g$id$30119$1LXXoO)))
                                                                                            g$ls/false$30118$1LXXoO))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$id$30120$1LXXoO)
                                                                                         '#t))
                                                                                      g$ls/false$30118$1LXXoO)
                                                                                    ((case-lambda
                                                                                       ((g$t$30121$1LXXoO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$30122$1LXXoO)
                                                                                            (if g$ls/false$30122$1LXXoO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$imp*$30123$1LXXoO)
                                                                                                   '#f))
                                                                                                g$ls/false$30122$1LXXoO)
                                                                                              ((case-lambda
                                                                                                 ((g$t$30124$1LXXoO)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$30125$1LXXoO)
                                                                                                      (if g$ls/false$30125$1LXXoO
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$syntax-violation$27710$1LXXoO
                                                                                                               '#f
                                                                                                               '"malformed import form"
                                                                                                               g$e$30116$1LXXoO)))
                                                                                                          g$ls/false$30125$1LXXoO)
                                                                                                        (g$syntax-violation$27710$1LXXoO
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$30124$1LXXoO))))
                                                                                                   (g$syntax-dispatch$27591$1LXXoO
                                                                                                     g$t$30124$1LXXoO
                                                                                                     '_))))
                                                                                               g$t$30121$1LXXoO))))
                                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                                           g$t$30121$1LXXoO
                                                                                           '(_ .
                                                                                               each-any)))))
                                                                                     g$t$30117$1LXXoO))))
                                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                                 g$t$30117$1LXXoO
                                                                                 '(_ any)))))
                                                                           g$e$30116$1LXXoO))))
                                                                     (g$module-import$30075$1LXXoO
                                                                       (case-lambda
                                                                         ((g$e$30099$1LXXoO
                                                                            g$r$30100$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$t$30101$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$30102$1LXXoO)
                                                                                  (if (if g$ls/false$30102$1LXXoO
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$id$30103$1LXXoO)
                                                                                               (g$id?$27093$1LXXoO
                                                                                                 g$id$30103$1LXXoO)))
                                                                                            g$ls/false$30102$1LXXoO))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$id$30104$1LXXoO)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$syntax-type$27113$1LXXoO
                                                                                                g$id$30104$1LXXoO
                                                                                                g$r$30100$1LXXoO)))
                                                                                           (case-lambda
                                                                                             ((g$type$30108$1LXXoO
                                                                                                g$value$30109$1LXXoO
                                                                                                g$kwd$30110$1LXXoO)
                                                                                              ((case-lambda
                                                                                                 ((g$kwd$30111$1LXXoO
                                                                                                    g$value$30112$1LXXoO
                                                                                                    g$type$30113$1LXXoO)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$30114$1LXXoO)
                                                                                                      (if (eqv?
                                                                                                            g$t$30114$1LXXoO
                                                                                                            '$module)
                                                                                                        ((case-lambda
                                                                                                           ((g$iface$30115$1LXXoO)
                                                                                                            (values
                                                                                                              (g$module-interface-exp-id*$27635$1LXXoO
                                                                                                                g$iface$30115$1LXXoO
                                                                                                                g$id$30104$1LXXoO)
                                                                                                              (g$module-interface-exp-lab-vec$27631$1LXXoO
                                                                                                                g$iface$30115$1LXXoO))))
                                                                                                         g$value$30112$1LXXoO)
                                                                                                        (begin
                                                                                                          '#f
                                                                                                          (g$syntax-violation$27710$1LXXoO
                                                                                                            '#f
                                                                                                            '"invalid import"
                                                                                                            g$e$30099$1LXXoO)))))
                                                                                                   g$type$30113$1LXXoO)))
                                                                                               g$kwd$30110$1LXXoO
                                                                                               g$value$30109$1LXXoO
                                                                                               g$type$30108$1LXXoO))))))
                                                                                      g$ls/false$30102$1LXXoO)
                                                                                    (g$syntax-violation$27710$1LXXoO
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$30101$1LXXoO))))
                                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                                 g$t$30101$1LXXoO
                                                                                 '(_ any)))))
                                                                           g$e$30099$1LXXoO))))
                                                                     (g$library-import$30076$1LXXoO
                                                                       (case-lambda
                                                                         ((g$e$30085$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$t$30086$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$30087$1LXXoO)
                                                                                  (if g$ls/false$30087$1LXXoO
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ctxt$30088$1LXXoO
                                                                                           g$imp*$30089$1LXXoO)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$parse-import-spec*$27643$1LXXoO
                                                                                                (g$syntax->datum$27713$1LXXoO
                                                                                                  g$imp*$30089$1LXXoO))))
                                                                                           (case-lambda
                                                                                             ((g$subst-names$30092$1LXXoO
                                                                                                g$subst-labels$30093$1LXXoO)
                                                                                              ((case-lambda
                                                                                                 ((g$subst-labels$30094$1LXXoO
                                                                                                    g$subst-names$30095$1LXXoO)
                                                                                                  (values
                                                                                                    (g$vector-map$20124$1LXXoO
                                                                                                      (case-lambda
                                                                                                        ((g$name$30096$1LXXoO)
                                                                                                         (g$datum->stx$27076$1LXXoO
                                                                                                           g$ctxt$30088$1LXXoO
                                                                                                           g$name$30096$1LXXoO)))
                                                                                                      g$subst-names$30095$1LXXoO)
                                                                                                    g$subst-labels$30094$1LXXoO)))
                                                                                               g$subst-labels$30093$1LXXoO
                                                                                               g$subst-names$30092$1LXXoO))))))
                                                                                      g$ls/false$30087$1LXXoO)
                                                                                    ((case-lambda
                                                                                       ((g$t$30097$1LXXoO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$30098$1LXXoO)
                                                                                            (if g$ls/false$30098$1LXXoO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$syntax-violation$27710$1LXXoO
                                                                                                     '#f
                                                                                                     '"invalid import form"
                                                                                                     g$e$30085$1LXXoO)))
                                                                                                g$ls/false$30098$1LXXoO)
                                                                                              (g$syntax-violation$27710$1LXXoO
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$30097$1LXXoO))))
                                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                                           g$t$30097$1LXXoO
                                                                                           '_))))
                                                                                     g$t$30086$1LXXoO))))
                                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                                 g$t$30086$1LXXoO
                                                                                 '(any .
                                                                                       each-any)))))
                                                                           g$e$30085$1LXXoO)))))
                                                             (begin
                                                               (call-with-values
                                                                 (case-lambda
                                                                   (()
                                                                    (if (g$module-import?$30074$1LXXoO
                                                                          g$e$29996$1LXXoO)
                                                                      (g$module-import$30075$1LXXoO
                                                                        g$e$29996$1LXXoO
                                                                        g$r$29986$1LXXoO)
                                                                      (g$library-import$30076$1LXXoO
                                                                        g$e$29996$1LXXoO))))
                                                                 (case-lambda
                                                                   ((g$id*$30079$1LXXoO
                                                                      g$lab*$30080$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$lab*$30081$1LXXoO
                                                                          g$id*$30082$1LXXoO)
                                                                        (g$vector-for-each$20125$1LXXoO
                                                                          (case-lambda
                                                                            ((g$id$30083$1LXXoO
                                                                               g$lab$30084$1LXXoO)
                                                                             (g$extend-rib!$27054$1LXXoO
                                                                               g$rib$29993$1LXXoO
                                                                               g$id$30083$1LXXoO
                                                                               g$lab$30084$1LXXoO
                                                                               g$sd?$29995$1LXXoO)))
                                                                          g$id*$30082$1LXXoO
                                                                          g$lab*$30081$1LXXoO)))
                                                                     g$lab*$30080$1LXXoO
                                                                     g$id*$30079$1LXXoO))))
                                                               (g$chi-body*$27638$1LXXoO
                                                                 (cdr g$e*$29985$1LXXoO)
                                                                 g$r$29986$1LXXoO
                                                                 g$mr$29987$1LXXoO
                                                                 g$lex*$29988$1LXXoO
                                                                 g$rhs*$29989$1LXXoO
                                                                 g$mod**$29990$1LXXoO
                                                                 g$kwd*$30006$1LXXoO
                                                                 g$exp*$29992$1LXXoO
                                                                 g$rib$29993$1LXXoO
                                                                 g$mix?$29994$1LXXoO
                                                                 g$sd?$29995$1LXXoO))))))
                                                       (begin
                                                         '#f
                                                         (if g$mix?$29994$1LXXoO
                                                           (g$chi-body*$27638$1LXXoO
                                                             (cdr g$e*$29985$1LXXoO)
                                                             g$r$29986$1LXXoO
                                                             g$mr$29987$1LXXoO
                                                             (cons
                                                               (g$gen-lexical$27028$1LXXoO
                                                                 'dummy)
                                                               g$lex*$29988$1LXXoO)
                                                             (cons
                                                               (cons
                                                                 'top-expr
                                                                 g$e$29996$1LXXoO)
                                                               g$rhs*$29989$1LXXoO)
                                                             g$mod**$29990$1LXXoO
                                                             g$kwd*$30006$1LXXoO
                                                             g$exp*$29992$1LXXoO
                                                             g$rib$29993$1LXXoO
                                                             '#t
                                                             g$sd?$29995$1LXXoO)
                                                           (values
                                                             g$e*$29985$1LXXoO
                                                             g$r$29986$1LXXoO
                                                             g$mr$29987$1LXXoO
                                                             g$lex*$29988$1LXXoO
                                                             g$rhs*$29989$1LXXoO
                                                             g$mod**$29990$1LXXoO
                                                             g$kwd*$30006$1LXXoO
                                                             g$exp*$29992$1LXXoO))))))))))))))))
                              g$type$30005$1LXXoO)))
                          (if (g$id?$27093$1LXXoO g$kwd$30003$1LXXoO)
                            (cons
                              g$kwd$30003$1LXXoO
                              g$kwd*$29991$1LXXoO)
                            g$kwd*$29991$1LXXoO))))
                      g$kwd$30002$1LXXoO
                      g$value$30001$1LXXoO
                      g$type$30000$1LXXoO))))))
             (car g$e*$29985$1LXXoO)))))))
   (g$expand-transformer$27639$1LXXoO
     g$expand-transformer$31233$1LXXoO
     (case-lambda
       ((g$expr$30126$1LXXoO g$r$30127$1LXXoO)
        ((case-lambda
           ((g$rtc$30128$1LXXoO)
            ((case-lambda
               ((g$expanded-rhs$30129$1LXXoO)
                (begin
                  (g$for-each$19226$1LXXoO
                    ((case-lambda
                       ((g$mark-visit$30130$1LXXoO)
                        (case-lambda
                          ((g$x$30131$1LXXoO)
                           (begin
                             (g$invoke-library$26799$1LXXoO
                               g$x$30131$1LXXoO)
                             (g$mark-visit$30130$1LXXoO
                               g$x$30131$1LXXoO))))))
                     (g$vis-collector$27647$1LXXoO))
                    (g$rtc$30128$1LXXoO))
                  g$expanded-rhs$30129$1LXXoO)))
             ((case-lambda
                ((g$inv-collector$30136$1LXXoO
                   g$vis-collector$30137$1LXXoO
                   g$inv-collector$30138$1LXXoO
                   g$vis-collector$30139$1LXXoO)
                 ((case-lambda
                    ((g$swap$30140$1LXXoO)
                     (dynamic-wind
                       g$swap$30140$1LXXoO
                       (case-lambda
                         (()
                          (g$chi-expr$27609$1LXXoO
                            g$expr$30126$1LXXoO
                            g$r$30127$1LXXoO
                            g$r$30127$1LXXoO)))
                       g$swap$30140$1LXXoO)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$30141$1LXXoO)
                           (begin
                             (g$inv-collector$30136$1LXXoO
                               g$inv-collector$30138$1LXXoO)
                             (set! g$inv-collector$30138$1LXXoO
                               g$t$30141$1LXXoO))))
                        (g$inv-collector$30136$1LXXoO))
                       ((case-lambda
                          ((g$t$30142$1LXXoO)
                           (begin
                             (g$vis-collector$30137$1LXXoO
                               g$vis-collector$30139$1LXXoO)
                             (set! g$vis-collector$30139$1LXXoO
                               g$t$30142$1LXXoO))))
                        (g$vis-collector$30137$1LXXoO))))))))
              g$inv-collector$27646$1LXXoO
              g$vis-collector$27647$1LXXoO
              g$rtc$30128$1LXXoO
              (case-lambda ((g$x$30143$1LXXoO) (values)))))))
         (g$make-collector$27645$1LXXoO)))))
   (g$parse-exports$27640$1LXXoO
     g$parse-exports$31234$1LXXoO
     (case-lambda
       ((g$exp*$30144$1LXXoO)
        ((letrec ((g$f$30145$1LXXoO
                    (case-lambda
                      ((g$exp*$30146$1LXXoO
                         g$int*$30147$1LXXoO
                         g$ext*$30148$1LXXoO)
                       (if (null? g$exp*$30146$1LXXoO)
                         (begin
                           (if (not (g$valid-bound-ids?$27098$1LXXoO
                                      g$ext*$30148$1LXXoO))
                             (g$syntax-violation$27710$1LXXoO
                               'export
                               '"invalid exports"
                               (g$find-dups$27619$1LXXoO
                                 g$ext*$30148$1LXXoO))
                             (void))
                           (values
                             (g$map$19225$1LXXoO
                               g$syntax->datum$27713$1LXXoO
                               g$ext*$30148$1LXXoO)
                             g$int*$30147$1LXXoO))
                         (begin
                           '#f
                           ((case-lambda
                              ((g$t$30149$1LXXoO)
                               ((case-lambda
                                  ((g$ls/false$30150$1LXXoO)
                                   (if g$ls/false$30150$1LXXoO
                                     (apply
                                       (case-lambda
                                         ((g$rename$30151$1LXXoO
                                            g$i*$30152$1LXXoO
                                            g$e*$30153$1LXXoO)
                                          (begin
                                            (if (not (if (eq? (g$syntax->datum$27713$1LXXoO
                                                                g$rename$30151$1LXXoO)
                                                              'rename)
                                                       (if (g$for-all$19223$1LXXoO
                                                             g$id?$27093$1LXXoO
                                                             g$i*$30152$1LXXoO)
                                                         (begin
                                                           '#f
                                                           (g$for-all$19223$1LXXoO
                                                             g$id?$27093$1LXXoO
                                                             g$e*$30153$1LXXoO))
                                                         '#f)
                                                       '#f))
                                              (g$syntax-violation$27710$1LXXoO
                                                'export
                                                '"invalid export specifier"
                                                (car g$exp*$30146$1LXXoO))
                                              (void))
                                            (g$f$30145$1LXXoO
                                              (cdr g$exp*$30146$1LXXoO)
                                              (append
                                                g$i*$30152$1LXXoO
                                                g$int*$30147$1LXXoO)
                                              (append
                                                g$e*$30153$1LXXoO
                                                g$ext*$30148$1LXXoO)))))
                                       g$ls/false$30150$1LXXoO)
                                     ((case-lambda
                                        ((g$t$30154$1LXXoO)
                                         ((case-lambda
                                            ((g$ls/false$30155$1LXXoO)
                                             (if g$ls/false$30155$1LXXoO
                                               (apply
                                                 (case-lambda
                                                   ((g$ie$30156$1LXXoO)
                                                    (begin
                                                      (if (not (g$id?$27093$1LXXoO
                                                                 g$ie$30156$1LXXoO))
                                                        (g$syntax-violation$27710$1LXXoO
                                                          'export
                                                          '"invalid export"
                                                          g$ie$30156$1LXXoO)
                                                        (void))
                                                      (g$f$30145$1LXXoO
                                                        (cdr g$exp*$30146$1LXXoO)
                                                        (cons
                                                          g$ie$30156$1LXXoO
                                                          g$int*$30147$1LXXoO)
                                                        (cons
                                                          g$ie$30156$1LXXoO
                                                          g$ext*$30148$1LXXoO)))))
                                                 g$ls/false$30155$1LXXoO)
                                               (g$syntax-violation$27710$1LXXoO
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$30154$1LXXoO))))
                                          (g$syntax-dispatch$27591$1LXXoO
                                            g$t$30154$1LXXoO
                                            'any))))
                                      g$t$30149$1LXXoO))))
                                (g$syntax-dispatch$27591$1LXXoO
                                  g$t$30149$1LXXoO
                                  '(any . #(each (any any)))))))
                            (car g$exp*$30146$1LXXoO))))))))
           g$f$30145$1LXXoO)
         g$exp*$30144$1LXXoO
         '()
         '()))))
   (g$parse-library-name$27641$1LXXoO
     g$parse-library-name$31235$1LXXoO
     (case-lambda
       ((g$spec$30157$1LXXoO)
        (letrec* ((g$parse$30158$1LXXoO
                    (case-lambda
                      ((g$x$30165$1LXXoO)
                       ((case-lambda
                          ((g$t$30166$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$30167$1LXXoO)
                               (if (if g$ls/false$30167$1LXXoO
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$30168$1LXXoO)
                                            (g$for-all$19223$1LXXoO
                                              (case-lambda
                                                ((g$x$30169$1LXXoO)
                                                 ((case-lambda
                                                    ((g$x$30170$1LXXoO)
                                                     (if (g$integer?$20707$1LXXoO
                                                           g$x$30170$1LXXoO)
                                                       (begin
                                                         '#f
                                                         (g$exact?$20702$1LXXoO
                                                           g$x$30170$1LXXoO))
                                                       '#f)))
                                                  (g$syntax->datum$27713$1LXXoO
                                                    g$x$30169$1LXXoO))))
                                              g$v*$30168$1LXXoO)))
                                         g$ls/false$30167$1LXXoO))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$30171$1LXXoO)
                                      (values
                                        '()
                                        (g$map$19225$1LXXoO
                                          g$syntax->datum$27713$1LXXoO
                                          g$v*$30171$1LXXoO))))
                                   g$ls/false$30167$1LXXoO)
                                 ((case-lambda
                                    ((g$t$30172$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$30173$1LXXoO)
                                         (if (if g$ls/false$30173$1LXXoO
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$30174$1LXXoO
                                                        g$rest$30175$1LXXoO)
                                                      (g$symbol?$20057$1LXXoO
                                                        (g$syntax->datum$27713$1LXXoO
                                                          g$x$30174$1LXXoO))))
                                                   g$ls/false$30173$1LXXoO))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$30176$1LXXoO
                                                  g$rest$30177$1LXXoO)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$30158$1LXXoO
                                                       g$rest$30177$1LXXoO)))
                                                  (case-lambda
                                                    ((g$x*$30180$1LXXoO
                                                       g$v*$30181$1LXXoO)
                                                     ((case-lambda
                                                        ((g$v*$30182$1LXXoO
                                                           g$x*$30183$1LXXoO)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$27713$1LXXoO
                                                               g$x$30176$1LXXoO)
                                                             g$x*$30183$1LXXoO)
                                                           g$v*$30182$1LXXoO)))
                                                      g$v*$30181$1LXXoO
                                                      g$x*$30180$1LXXoO))))))
                                             g$ls/false$30173$1LXXoO)
                                           ((case-lambda
                                              ((g$t$30184$1LXXoO)
                                               ((case-lambda
                                                  ((g$ls/false$30185$1LXXoO)
                                                   (if g$ls/false$30185$1LXXoO
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (values
                                                            '()
                                                            '())))
                                                       g$ls/false$30185$1LXXoO)
                                                     ((case-lambda
                                                        ((g$t$30186$1LXXoO)
                                                         ((case-lambda
                                                            ((g$ls/false$30187$1LXXoO)
                                                             (if g$ls/false$30187$1LXXoO
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$27710$1LXXoO
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$30157$1LXXoO)))
                                                                 g$ls/false$30187$1LXXoO)
                                                               (g$syntax-violation$27710$1LXXoO
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$30186$1LXXoO))))
                                                          (g$syntax-dispatch$27591$1LXXoO
                                                            g$t$30186$1LXXoO
                                                            '_))))
                                                      g$t$30184$1LXXoO))))
                                                (g$syntax-dispatch$27591$1LXXoO
                                                  g$t$30184$1LXXoO
                                                  '()))))
                                            g$t$30172$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$30172$1LXXoO
                                        '(any . any)))))
                                  g$t$30166$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$30166$1LXXoO
                              '(each-any)))))
                        g$x$30165$1LXXoO)))))
          (call-with-values
            (case-lambda
              (() (g$parse$30158$1LXXoO g$spec$30157$1LXXoO)))
            (case-lambda
              ((g$name*$30161$1LXXoO g$ver*$30162$1LXXoO)
               ((case-lambda
                  ((g$ver*$30163$1LXXoO g$name*$30164$1LXXoO)
                   (begin
                     (if (null? g$name*$30164$1LXXoO)
                       (g$syntax-violation$27710$1LXXoO
                         '#f
                         '"empty library name"
                         g$spec$30157$1LXXoO)
                       (void))
                     (values
                       g$name*$30164$1LXXoO
                       g$ver*$30163$1LXXoO))))
                g$ver*$30162$1LXXoO
                g$name*$30161$1LXXoO))))))))
   (g$parse-library$27642$1LXXoO
     g$parse-library$31236$1LXXoO
     (case-lambda
       ((g$e$30188$1LXXoO)
        ((case-lambda
           ((g$t$30189$1LXXoO)
            ((case-lambda
               ((g$ls/false$30190$1LXXoO)
                (if (if g$ls/false$30190$1LXXoO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$30191$1LXXoO
                               g$name*$30192$1LXXoO
                               g$export$30193$1LXXoO
                               g$exp*$30194$1LXXoO
                               g$import$30195$1LXXoO
                               g$imp*$30196$1LXXoO
                               g$b*$30197$1LXXoO)
                             (if (eq? (g$syntax->datum$27713$1LXXoO
                                        g$export$30193$1LXXoO)
                                      'export)
                               (if (eq? (g$syntax->datum$27713$1LXXoO
                                          g$import$30195$1LXXoO)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$27713$1LXXoO
                                          g$library$30191$1LXXoO)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$30190$1LXXoO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$30198$1LXXoO
                         g$name*$30199$1LXXoO
                         g$export$30200$1LXXoO
                         g$exp*$30201$1LXXoO
                         g$import$30202$1LXXoO
                         g$imp*$30203$1LXXoO
                         g$b*$30204$1LXXoO)
                       (values
                         g$name*$30199$1LXXoO
                         g$exp*$30201$1LXXoO
                         g$imp*$30203$1LXXoO
                         g$b*$30204$1LXXoO)))
                    g$ls/false$30190$1LXXoO)
                  ((case-lambda
                     ((g$t$30205$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$30206$1LXXoO)
                          (if g$ls/false$30206$1LXXoO
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$27710$1LXXoO
                                   '#f
                                   '"malformed library"
                                   g$e$30188$1LXXoO)))
                              g$ls/false$30206$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"invalid syntax"
                              g$t$30205$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$30205$1LXXoO
                         '_))))
                   g$t$30189$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$30189$1LXXoO
               '(any each-any
                     (any . each-any)
                     (any . each-any)
                     .
                     each-any)))))
         g$e$30188$1LXXoO))))
   (g$parse-import-spec*$27643$1LXXoO
     g$parse-import-spec*$31237$1LXXoO
     (case-lambda
       ((g$imp*$30207$1LXXoO)
        (letrec* ((g$idsyn?$30208$1LXXoO
                    (case-lambda
                      ((g$x$30468$1LXXoO)
                       (g$symbol?$20057$1LXXoO
                         (g$syntax->datum$27713$1LXXoO
                           g$x$30468$1LXXoO)))))
                  (g$dup-error$30209$1LXXoO
                    (case-lambda
                      ((g$name$30467$1LXXoO)
                       (g$syntax-violation$27710$1LXXoO
                         'import
                         '"two imports with different bindings"
                         g$name$30467$1LXXoO))))
                  (g$merge-substs$30210$1LXXoO
                    (case-lambda
                      ((g$s$30458$1LXXoO g$subst$30459$1LXXoO)
                       (letrec* ((g$insert-to-subst$30460$1LXXoO
                                   (case-lambda
                                     ((g$a$30461$1LXXoO
                                        g$subst$30462$1LXXoO)
                                      ((case-lambda
                                         ((g$name$30463$1LXXoO
                                            g$label$30464$1LXXoO)
                                          ((case-lambda
                                             ((g$t$30465$1LXXoO)
                                              (if g$t$30465$1LXXoO
                                                ((case-lambda
                                                   ((g$x$30466$1LXXoO)
                                                    (if (eq? (cdr g$x$30466$1LXXoO)
                                                             g$label$30464$1LXXoO)
                                                      g$subst$30462$1LXXoO
                                                      (begin
                                                        '#f
                                                        (g$dup-error$30209$1LXXoO
                                                          g$name$30463$1LXXoO)))))
                                                 g$t$30465$1LXXoO)
                                                (begin
                                                  '#f
                                                  (cons
                                                    g$a$30461$1LXXoO
                                                    g$subst$30462$1LXXoO)))))
                                           (g$assq$19213$1LXXoO
                                             g$name$30463$1LXXoO
                                             g$subst$30462$1LXXoO))))
                                       (car g$a$30461$1LXXoO)
                                       (cdr g$a$30461$1LXXoO))))))
                         (if (null? g$s$30458$1LXXoO)
                           g$subst$30459$1LXXoO
                           (begin
                             '#f
                             (g$insert-to-subst$30460$1LXXoO
                               (car g$s$30458$1LXXoO)
                               (g$merge-substs$30210$1LXXoO
                                 (cdr g$s$30458$1LXXoO)
                                 g$subst$30459$1LXXoO))))))))
                  (g$exclude*$30211$1LXXoO
                    (case-lambda
                      ((g$sym*$30434$1LXXoO g$subst$30435$1LXXoO)
                       (letrec* ((g$exclude$30436$1LXXoO
                                   (case-lambda
                                     ((g$sym$30449$1LXXoO
                                        g$subst$30450$1LXXoO)
                                      (if (null? g$subst$30450$1LXXoO)
                                        (g$syntax-violation$27710$1LXXoO
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$30449$1LXXoO)
                                        (if (eq? g$sym$30449$1LXXoO
                                                 (g$caar$20075$1LXXoO
                                                   g$subst$30450$1LXXoO))
                                          (values
                                            (g$cdar$20077$1LXXoO
                                              g$subst$30450$1LXXoO)
                                            (cdr g$subst$30450$1LXXoO))
                                          (begin
                                            '#f
                                            ((case-lambda
                                               ((g$a$30451$1LXXoO)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$exclude$30436$1LXXoO
                                                       g$sym$30449$1LXXoO
                                                       (cdr g$subst$30450$1LXXoO))))
                                                  (case-lambda
                                                    ((g$old$30454$1LXXoO
                                                       g$subst$30455$1LXXoO)
                                                     ((case-lambda
                                                        ((g$subst$30456$1LXXoO
                                                           g$old$30457$1LXXoO)
                                                         (values
                                                           g$old$30457$1LXXoO
                                                           (cons
                                                             g$a$30451$1LXXoO
                                                             g$subst$30456$1LXXoO))))
                                                      g$subst$30455$1LXXoO
                                                      g$old$30454$1LXXoO))))))
                                             (car g$subst$30450$1LXXoO)))))))))
                         (if (null? g$sym*$30434$1LXXoO)
                           (values '() g$subst$30435$1LXXoO)
                           (begin
                             '#f
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$exclude$30436$1LXXoO
                                    (car g$sym*$30434$1LXXoO)
                                    g$subst$30435$1LXXoO)))
                               (case-lambda
                                 ((g$old$30439$1LXXoO
                                    g$subst$30440$1LXXoO)
                                  ((case-lambda
                                     ((g$subst$30441$1LXXoO
                                        g$old$30442$1LXXoO)
                                      (call-with-values
                                        (case-lambda
                                          (()
                                           (g$exclude*$30211$1LXXoO
                                             (cdr g$sym*$30434$1LXXoO)
                                             g$subst$30441$1LXXoO)))
                                        (case-lambda
                                          ((g$old*$30445$1LXXoO
                                             g$subst$30446$1LXXoO)
                                           ((case-lambda
                                              ((g$subst$30447$1LXXoO
                                                 g$old*$30448$1LXXoO)
                                               (values
                                                 (cons
                                                   g$old$30442$1LXXoO
                                                   g$old*$30448$1LXXoO)
                                                 g$subst$30447$1LXXoO)))
                                            g$subst$30446$1LXXoO
                                            g$old*$30445$1LXXoO))))))
                                   g$subst$30440$1LXXoO
                                   g$old$30439$1LXXoO))))))))))
                  (g$find*$30212$1LXXoO
                    (case-lambda
                      ((g$sym*$30430$1LXXoO g$subst$30431$1LXXoO)
                       (g$map$19225$1LXXoO
                         (case-lambda
                           ((g$x$30432$1LXXoO)
                            ((case-lambda
                               ((g$t$30433$1LXXoO)
                                (if g$t$30433$1LXXoO
                                  (cdr g$t$30433$1LXXoO)
                                  (begin
                                    '#f
                                    (g$syntax-violation$27710$1LXXoO
                                      'import
                                      '"cannot find identifier"
                                      g$x$30432$1LXXoO)))))
                             (g$assq$19213$1LXXoO
                               g$x$30432$1LXXoO
                               g$subst$30431$1LXXoO))))
                         g$sym*$30430$1LXXoO))))
                  (g$rem*$30213$1LXXoO
                    (case-lambda
                      ((g$sym*$30426$1LXXoO g$subst$30427$1LXXoO)
                       ((letrec ((g$f$30428$1LXXoO
                                   (case-lambda
                                     ((g$subst$30429$1LXXoO)
                                      (if (null? g$subst$30429$1LXXoO)
                                        '()
                                        (if (g$memq$19217$1LXXoO
                                              (g$caar$20075$1LXXoO
                                                g$subst$30429$1LXXoO)
                                              g$sym*$30426$1LXXoO)
                                          (g$f$30428$1LXXoO
                                            (cdr g$subst$30429$1LXXoO))
                                          (begin
                                            '#f
                                            (cons
                                              (car g$subst$30429$1LXXoO)
                                              (g$f$30428$1LXXoO
                                                (cdr g$subst$30429$1LXXoO))))))))))
                          g$f$30428$1LXXoO)
                        g$subst$30427$1LXXoO))))
                  (g$remove-dups$30214$1LXXoO
                    (case-lambda
                      ((g$ls$30425$1LXXoO)
                       (if (null? g$ls$30425$1LXXoO)
                         '()
                         (if (g$memq$19217$1LXXoO
                               (car g$ls$30425$1LXXoO)
                               (cdr g$ls$30425$1LXXoO))
                           (g$remove-dups$30214$1LXXoO
                             (cdr g$ls$30425$1LXXoO))
                           (begin
                             '#f
                             (cons
                               (car g$ls$30425$1LXXoO)
                               (g$remove-dups$30214$1LXXoO
                                 (cdr g$ls$30425$1LXXoO)))))))))
                  (g$parse-library-name$30215$1LXXoO
                    (case-lambda
                      ((g$spec$30309$1LXXoO)
                       (letrec* ((g$subversion?$30310$1LXXoO
                                   (case-lambda
                                     ((g$x$30423$1LXXoO)
                                      ((case-lambda
                                         ((g$x$30424$1LXXoO)
                                          (if (g$integer?$20707$1LXXoO
                                                g$x$30424$1LXXoO)
                                            (if (g$exact?$20702$1LXXoO
                                                  g$x$30424$1LXXoO)
                                              (begin
                                                '#f
                                                (g$>=$20718$1LXXoO
                                                  g$x$30424$1LXXoO
                                                  '0))
                                              '#f)
                                            '#f)))
                                       (g$syntax->datum$27713$1LXXoO
                                         g$x$30423$1LXXoO)))))
                                 (g$subversion-pred$30311$1LXXoO
                                   (case-lambda
                                     ((g$x*$30375$1LXXoO)
                                      ((case-lambda
                                         ((g$t$30376$1LXXoO)
                                          ((case-lambda
                                             ((g$ls/false$30377$1LXXoO)
                                              (if (if g$ls/false$30377$1LXXoO
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$30378$1LXXoO)
                                                           (g$subversion?$30310$1LXXoO
                                                             g$n$30378$1LXXoO)))
                                                        g$ls/false$30377$1LXXoO))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$30379$1LXXoO)
                                                     (case-lambda
                                                       ((g$x$30380$1LXXoO)
                                                        (g$=$20714$1LXXoO
                                                          g$x$30380$1LXXoO
                                                          (g$syntax->datum$27713$1LXXoO
                                                            g$n$30379$1LXXoO))))))
                                                  g$ls/false$30377$1LXXoO)
                                                ((case-lambda
                                                   ((g$t$30381$1LXXoO)
                                                    ((case-lambda
                                                       ((g$ls/false$30382$1LXXoO)
                                                        (if (if g$ls/false$30382$1LXXoO
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$30383$1LXXoO
                                                                       g$sub*$30384$1LXXoO)
                                                                     (eq? (g$syntax->datum$27713$1LXXoO
                                                                            g$p?$30383$1LXXoO)
                                                                          'and)))
                                                                  g$ls/false$30382$1LXXoO))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$30385$1LXXoO
                                                                 g$sub*$30386$1LXXoO)
                                                               ((case-lambda
                                                                  ((g$p*$30387$1LXXoO)
                                                                   (case-lambda
                                                                     ((g$x$30388$1LXXoO)
                                                                      (g$for-all$19223$1LXXoO
                                                                        (case-lambda
                                                                          ((g$p$30389$1LXXoO)
                                                                           (g$p$30389$1LXXoO
                                                                             g$x$30388$1LXXoO)))
                                                                        g$p*$30387$1LXXoO)))))
                                                                (g$map$19225$1LXXoO
                                                                  g$subversion-pred$30311$1LXXoO
                                                                  g$sub*$30386$1LXXoO))))
                                                            g$ls/false$30382$1LXXoO)
                                                          ((case-lambda
                                                             ((g$t$30390$1LXXoO)
                                                              ((case-lambda
                                                                 ((g$ls/false$30391$1LXXoO)
                                                                  (if (if g$ls/false$30391$1LXXoO
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$30392$1LXXoO
                                                                                 g$sub*$30393$1LXXoO)
                                                                               (eq? (g$syntax->datum$27713$1LXXoO
                                                                                      g$p?$30392$1LXXoO)
                                                                                    'or)))
                                                                            g$ls/false$30391$1LXXoO))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$30394$1LXXoO
                                                                           g$sub*$30395$1LXXoO)
                                                                         ((case-lambda
                                                                            ((g$p*$30396$1LXXoO)
                                                                             (case-lambda
                                                                               ((g$x$30397$1LXXoO)
                                                                                (g$exists$19224$1LXXoO
                                                                                  (case-lambda
                                                                                    ((g$p$30398$1LXXoO)
                                                                                     (g$p$30398$1LXXoO
                                                                                       g$x$30397$1LXXoO)))
                                                                                  g$p*$30396$1LXXoO)))))
                                                                          (g$map$19225$1LXXoO
                                                                            g$subversion-pred$30311$1LXXoO
                                                                            g$sub*$30395$1LXXoO))))
                                                                      g$ls/false$30391$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$t$30399$1LXXoO)
                                                                        ((case-lambda
                                                                           ((g$ls/false$30400$1LXXoO)
                                                                            (if (if g$ls/false$30400$1LXXoO
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$30401$1LXXoO
                                                                                           g$sub$30402$1LXXoO)
                                                                                         (eq? (g$syntax->datum$27713$1LXXoO
                                                                                                g$p?$30401$1LXXoO)
                                                                                              'not)))
                                                                                      g$ls/false$30400$1LXXoO))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$30403$1LXXoO
                                                                                     g$sub$30404$1LXXoO)
                                                                                   ((case-lambda
                                                                                      ((g$p$30405$1LXXoO)
                                                                                       (case-lambda
                                                                                         ((g$x$30406$1LXXoO)
                                                                                          (not (g$p$30405$1LXXoO
                                                                                                 g$x$30406$1LXXoO))))))
                                                                                    (g$subversion-pred$30311$1LXXoO
                                                                                      g$sub$30404$1LXXoO))))
                                                                                g$ls/false$30400$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$t$30407$1LXXoO)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$30408$1LXXoO)
                                                                                      (if (if g$ls/false$30408$1LXXoO
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$30409$1LXXoO
                                                                                                     g$n$30410$1LXXoO)
                                                                                                   (if (eq? (g$syntax->datum$27713$1LXXoO
                                                                                                              g$p?$30409$1LXXoO)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$30310$1LXXoO
                                                                                                         g$n$30410$1LXXoO))
                                                                                                     '#f)))
                                                                                                g$ls/false$30408$1LXXoO))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$30411$1LXXoO
                                                                                               g$n$30412$1LXXoO)
                                                                                             (case-lambda
                                                                                               ((g$x$30413$1LXXoO)
                                                                                                (g$<=$20716$1LXXoO
                                                                                                  g$x$30413$1LXXoO
                                                                                                  (g$syntax->datum$27713$1LXXoO
                                                                                                    g$n$30412$1LXXoO))))))
                                                                                          g$ls/false$30408$1LXXoO)
                                                                                        ((case-lambda
                                                                                           ((g$t$30414$1LXXoO)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$30415$1LXXoO)
                                                                                                (if (if g$ls/false$30415$1LXXoO
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$30416$1LXXoO
                                                                                                               g$n$30417$1LXXoO)
                                                                                                             (if (eq? (g$syntax->datum$27713$1LXXoO
                                                                                                                        g$p?$30416$1LXXoO)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$30310$1LXXoO
                                                                                                                   g$n$30417$1LXXoO))
                                                                                                               '#f)))
                                                                                                          g$ls/false$30415$1LXXoO))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$30418$1LXXoO
                                                                                                         g$n$30419$1LXXoO)
                                                                                                       (case-lambda
                                                                                                         ((g$x$30420$1LXXoO)
                                                                                                          (g$>=$20718$1LXXoO
                                                                                                            g$x$30420$1LXXoO
                                                                                                            (g$syntax->datum$27713$1LXXoO
                                                                                                              g$n$30419$1LXXoO))))))
                                                                                                    g$ls/false$30415$1LXXoO)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$30421$1LXXoO)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$30422$1LXXoO)
                                                                                                          (if g$ls/false$30422$1LXXoO
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$27710$1LXXoO
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$30309$1LXXoO
                                                                                                                   g$x*$30375$1LXXoO)))
                                                                                                              g$ls/false$30422$1LXXoO)
                                                                                                            (g$syntax-violation$27710$1LXXoO
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$30421$1LXXoO))))
                                                                                                       (g$syntax-dispatch$27591$1LXXoO
                                                                                                         g$t$30421$1LXXoO
                                                                                                         '_))))
                                                                                                   g$t$30414$1LXXoO))))
                                                                                             (g$syntax-dispatch$27591$1LXXoO
                                                                                               g$t$30414$1LXXoO
                                                                                               '(any any)))))
                                                                                         g$t$30407$1LXXoO))))
                                                                                   (g$syntax-dispatch$27591$1LXXoO
                                                                                     g$t$30407$1LXXoO
                                                                                     '(any any)))))
                                                                               g$t$30399$1LXXoO))))
                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                           g$t$30399$1LXXoO
                                                                           '(any any)))))
                                                                     g$t$30390$1LXXoO))))
                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                 g$t$30390$1LXXoO
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$30381$1LXXoO))))
                                                     (g$syntax-dispatch$27591$1LXXoO
                                                       g$t$30381$1LXXoO
                                                       '(any .
                                                             each-any)))))
                                                 g$t$30376$1LXXoO))))
                                           (g$syntax-dispatch$27591$1LXXoO
                                             g$t$30376$1LXXoO
                                             'any))))
                                       g$x*$30375$1LXXoO))))
                                 (g$version-pred$30312$1LXXoO
                                   (case-lambda
                                     ((g$x*$30335$1LXXoO)
                                      ((case-lambda
                                         ((g$t$30336$1LXXoO)
                                          ((case-lambda
                                             ((g$ls/false$30337$1LXXoO)
                                              (if g$ls/false$30337$1LXXoO
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$30338$1LXXoO)
                                                        '#t))))
                                                  g$ls/false$30337$1LXXoO)
                                                ((case-lambda
                                                   ((g$t$30339$1LXXoO)
                                                    ((case-lambda
                                                       ((g$ls/false$30340$1LXXoO)
                                                        (if (if g$ls/false$30340$1LXXoO
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$30341$1LXXoO
                                                                       g$ver*$30342$1LXXoO)
                                                                     (eq? (g$syntax->datum$27713$1LXXoO
                                                                            g$c$30341$1LXXoO)
                                                                          'and)))
                                                                  g$ls/false$30340$1LXXoO))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$30343$1LXXoO
                                                                 g$ver*$30344$1LXXoO)
                                                               ((case-lambda
                                                                  ((g$p*$30345$1LXXoO)
                                                                   (case-lambda
                                                                     ((g$x$30346$1LXXoO)
                                                                      (g$for-all$19223$1LXXoO
                                                                        (case-lambda
                                                                          ((g$p$30347$1LXXoO)
                                                                           (g$p$30347$1LXXoO
                                                                             g$x$30346$1LXXoO)))
                                                                        g$p*$30345$1LXXoO)))))
                                                                (g$map$19225$1LXXoO
                                                                  g$version-pred$30312$1LXXoO
                                                                  g$ver*$30344$1LXXoO))))
                                                            g$ls/false$30340$1LXXoO)
                                                          ((case-lambda
                                                             ((g$t$30348$1LXXoO)
                                                              ((case-lambda
                                                                 ((g$ls/false$30349$1LXXoO)
                                                                  (if (if g$ls/false$30349$1LXXoO
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$30350$1LXXoO
                                                                                 g$ver*$30351$1LXXoO)
                                                                               (eq? (g$syntax->datum$27713$1LXXoO
                                                                                      g$c$30350$1LXXoO)
                                                                                    'or)))
                                                                            g$ls/false$30349$1LXXoO))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$30352$1LXXoO
                                                                           g$ver*$30353$1LXXoO)
                                                                         ((case-lambda
                                                                            ((g$p*$30354$1LXXoO)
                                                                             (case-lambda
                                                                               ((g$x$30355$1LXXoO)
                                                                                (g$exists$19224$1LXXoO
                                                                                  (case-lambda
                                                                                    ((g$p$30356$1LXXoO)
                                                                                     (g$p$30356$1LXXoO
                                                                                       g$x$30355$1LXXoO)))
                                                                                  g$p*$30354$1LXXoO)))))
                                                                          (g$map$19225$1LXXoO
                                                                            g$version-pred$30312$1LXXoO
                                                                            g$ver*$30353$1LXXoO))))
                                                                      g$ls/false$30349$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$t$30357$1LXXoO)
                                                                        ((case-lambda
                                                                           ((g$ls/false$30358$1LXXoO)
                                                                            (if (if g$ls/false$30358$1LXXoO
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$30359$1LXXoO
                                                                                           g$ver$30360$1LXXoO)
                                                                                         (eq? (g$syntax->datum$27713$1LXXoO
                                                                                                g$c$30359$1LXXoO)
                                                                                              'not)))
                                                                                      g$ls/false$30358$1LXXoO))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$30361$1LXXoO
                                                                                     g$ver$30362$1LXXoO)
                                                                                   ((case-lambda
                                                                                      ((g$p$30363$1LXXoO)
                                                                                       (case-lambda
                                                                                         ((g$x$30364$1LXXoO)
                                                                                          (not (g$p$30363$1LXXoO
                                                                                                 g$x$30364$1LXXoO))))))
                                                                                    (g$version-pred$30312$1LXXoO
                                                                                      g$ver$30362$1LXXoO))))
                                                                                g$ls/false$30358$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$t$30365$1LXXoO)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$30366$1LXXoO)
                                                                                      (if g$ls/false$30366$1LXXoO
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$30367$1LXXoO)
                                                                                             ((case-lambda
                                                                                                ((g$p*$30368$1LXXoO)
                                                                                                 (case-lambda
                                                                                                   ((g$x$30369$1LXXoO)
                                                                                                    ((letrec ((g$f$30370$1LXXoO
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$30371$1LXXoO
                                                                                                                     g$x$30372$1LXXoO)
                                                                                                                   (if (null?
                                                                                                                         g$p*$30371$1LXXoO)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$30372$1LXXoO)
                                                                                                                       '#f
                                                                                                                       (begin
                                                                                                                         '#f
                                                                                                                         (if ((car g$p*$30371$1LXXoO)
                                                                                                                              (car g$x$30372$1LXXoO))
                                                                                                                           (begin
                                                                                                                             '#f
                                                                                                                             (g$f$30370$1LXXoO
                                                                                                                               (cdr g$p*$30371$1LXXoO)
                                                                                                                               (cdr g$x$30372$1LXXoO)))
                                                                                                                           '#f))))))))
                                                                                                       g$f$30370$1LXXoO)
                                                                                                     g$p*$30368$1LXXoO
                                                                                                     g$x$30369$1LXXoO)))))
                                                                                              (g$map$19225$1LXXoO
                                                                                                g$subversion-pred$30311$1LXXoO
                                                                                                g$sub*$30367$1LXXoO))))
                                                                                          g$ls/false$30366$1LXXoO)
                                                                                        ((case-lambda
                                                                                           ((g$t$30373$1LXXoO)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$30374$1LXXoO)
                                                                                                (if g$ls/false$30374$1LXXoO
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$27710$1LXXoO
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$30309$1LXXoO
                                                                                                         g$x*$30335$1LXXoO)))
                                                                                                    g$ls/false$30374$1LXXoO)
                                                                                                  (g$syntax-violation$27710$1LXXoO
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$30373$1LXXoO))))
                                                                                             (g$syntax-dispatch$27591$1LXXoO
                                                                                               g$t$30373$1LXXoO
                                                                                               '_))))
                                                                                         g$t$30365$1LXXoO))))
                                                                                   (g$syntax-dispatch$27591$1LXXoO
                                                                                     g$t$30365$1LXXoO
                                                                                     'each-any))))
                                                                               g$t$30357$1LXXoO))))
                                                                         (g$syntax-dispatch$27591$1LXXoO
                                                                           g$t$30357$1LXXoO
                                                                           '(any any)))))
                                                                     g$t$30348$1LXXoO))))
                                                               (g$syntax-dispatch$27591$1LXXoO
                                                                 g$t$30348$1LXXoO
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$30339$1LXXoO))))
                                                     (g$syntax-dispatch$27591$1LXXoO
                                                       g$t$30339$1LXXoO
                                                       '(any .
                                                             each-any)))))
                                                 g$t$30336$1LXXoO))))
                                           (g$syntax-dispatch$27591$1LXXoO
                                             g$t$30336$1LXXoO
                                             '()))))
                                       g$x*$30335$1LXXoO)))))
                         ((letrec ((g$f$30313$1LXXoO
                                     (case-lambda
                                       ((g$x$30314$1LXXoO)
                                        ((case-lambda
                                           ((g$t$30315$1LXXoO)
                                            ((case-lambda
                                               ((g$ls/false$30316$1LXXoO)
                                                (if g$ls/false$30316$1LXXoO
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$30317$1LXXoO)
                                                       (values
                                                         '()
                                                         (g$version-pred$30312$1LXXoO
                                                           g$version-spec*$30317$1LXXoO))))
                                                    g$ls/false$30316$1LXXoO)
                                                  ((case-lambda
                                                     ((g$t$30318$1LXXoO)
                                                      ((case-lambda
                                                         ((g$ls/false$30319$1LXXoO)
                                                          (if (if g$ls/false$30319$1LXXoO
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$30320$1LXXoO
                                                                         g$x*$30321$1LXXoO)
                                                                       (g$idsyn?$30208$1LXXoO
                                                                         g$x$30320$1LXXoO)))
                                                                    g$ls/false$30319$1LXXoO))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$30322$1LXXoO
                                                                   g$x*$30323$1LXXoO)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$30313$1LXXoO
                                                                        g$x*$30323$1LXXoO)))
                                                                   (case-lambda
                                                                     ((g$name$30326$1LXXoO
                                                                        g$pred$30327$1LXXoO)
                                                                      ((case-lambda
                                                                         ((g$pred$30328$1LXXoO
                                                                            g$name$30329$1LXXoO)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$27713$1LXXoO
                                                                                g$x$30322$1LXXoO)
                                                                              g$name$30329$1LXXoO)
                                                                            g$pred$30328$1LXXoO)))
                                                                       g$pred$30327$1LXXoO
                                                                       g$name$30326$1LXXoO))))))
                                                              g$ls/false$30319$1LXXoO)
                                                            ((case-lambda
                                                               ((g$t$30330$1LXXoO)
                                                                ((case-lambda
                                                                   ((g$ls/false$30331$1LXXoO)
                                                                    (if g$ls/false$30331$1LXXoO
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$30332$1LXXoO)
                                                                                '#t)))))
                                                                        g$ls/false$30331$1LXXoO)
                                                                      ((case-lambda
                                                                         ((g$t$30333$1LXXoO)
                                                                          ((case-lambda
                                                                             ((g$ls/false$30334$1LXXoO)
                                                                              (if g$ls/false$30334$1LXXoO
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$27710$1LXXoO
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$30309$1LXXoO)))
                                                                                  g$ls/false$30334$1LXXoO)
                                                                                (g$syntax-violation$27710$1LXXoO
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$30333$1LXXoO))))
                                                                           (g$syntax-dispatch$27591$1LXXoO
                                                                             g$t$30333$1LXXoO
                                                                             '_))))
                                                                       g$t$30330$1LXXoO))))
                                                                 (g$syntax-dispatch$27591$1LXXoO
                                                                   g$t$30330$1LXXoO
                                                                   '()))))
                                                             g$t$30318$1LXXoO))))
                                                       (g$syntax-dispatch$27591$1LXXoO
                                                         g$t$30318$1LXXoO
                                                         '(any .
                                                               any)))))
                                                   g$t$30315$1LXXoO))))
                                             (g$syntax-dispatch$27591$1LXXoO
                                               g$t$30315$1LXXoO
                                               '(each-any)))))
                                         g$x$30314$1LXXoO)))))
                            g$f$30313$1LXXoO)
                          g$spec$30309$1LXXoO)))))
                  (g$import-library$30216$1LXXoO
                    (case-lambda
                      ((g$spec*$30301$1LXXoO)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$30215$1LXXoO
                              g$spec*$30301$1LXXoO)))
                         (case-lambda
                           ((g$name$30304$1LXXoO g$pred$30305$1LXXoO)
                            ((case-lambda
                               ((g$pred$30306$1LXXoO
                                  g$name$30307$1LXXoO)
                                (begin
                                  (if (null? g$name$30307$1LXXoO)
                                    (g$syntax-violation$27710$1LXXoO
                                      'import
                                      '"empty library name"
                                      g$spec*$30301$1LXXoO)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$30308$1LXXoO)
                                      (begin
                                        (if (not g$lib$30308$1LXXoO)
                                          (g$syntax-violation$27710$1LXXoO
                                            'import
                                            '"cannot find library with required name"
                                            g$name$30307$1LXXoO)
                                          (void))
                                        (if (not (g$pred$30306$1LXXoO
                                                   (g$library-version$26752$1LXXoO
                                                     g$lib$30308$1LXXoO)))
                                          (g$syntax-violation$27710$1LXXoO
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$30301$1LXXoO
                                            g$lib$30308$1LXXoO)
                                          (void))
                                        ((g$imp-collector$27648$1LXXoO)
                                         g$lib$30308$1LXXoO)
                                        (g$library-subst$26756$1LXXoO
                                          g$lib$30308$1LXXoO))))
                                   (g$find-library-by-name$26792$1LXXoO
                                     g$name$30307$1LXXoO)))))
                             g$pred$30305$1LXXoO
                             g$name$30304$1LXXoO)))))))
                  (g$get-import$30217$1LXXoO
                    (case-lambda
                      ((g$spec$30230$1LXXoO)
                       ((case-lambda
                          ((g$t$30231$1LXXoO)
                           ((case-lambda
                              ((g$ls/false$30232$1LXXoO)
                               (if (if g$ls/false$30232$1LXXoO
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$30233$1LXXoO
                                              g$x*$30234$1LXXoO)
                                            (not (g$memq$19217$1LXXoO
                                                   (g$syntax->datum$27713$1LXXoO
                                                     g$x$30233$1LXXoO)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$30232$1LXXoO))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$30235$1LXXoO
                                        g$x*$30236$1LXXoO)
                                      (g$import-library$30216$1LXXoO
                                        (cons
                                          g$x$30235$1LXXoO
                                          g$x*$30236$1LXXoO))))
                                   g$ls/false$30232$1LXXoO)
                                 ((case-lambda
                                    ((g$t$30237$1LXXoO)
                                     ((case-lambda
                                        ((g$ls/false$30238$1LXXoO)
                                         (if (if g$ls/false$30238$1LXXoO
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$30239$1LXXoO
                                                        g$isp$30240$1LXXoO
                                                        g$old*$30241$1LXXoO
                                                        g$new*$30242$1LXXoO)
                                                      (if (eq? (g$syntax->datum$27713$1LXXoO
                                                                 g$rename$30239$1LXXoO)
                                                               'rename)
                                                        (if (g$for-all$19223$1LXXoO
                                                              g$idsyn?$30208$1LXXoO
                                                              g$old*$30241$1LXXoO)
                                                          (begin
                                                            '#f
                                                            (g$for-all$19223$1LXXoO
                                                              g$idsyn?$30208$1LXXoO
                                                              g$new*$30242$1LXXoO))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$30238$1LXXoO))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$30243$1LXXoO
                                                  g$isp$30244$1LXXoO
                                                  g$old*$30245$1LXXoO
                                                  g$new*$30246$1LXXoO)
                                                ((case-lambda
                                                   ((g$subst$30247$1LXXoO
                                                      g$old*$30248$1LXXoO
                                                      g$new*$30249$1LXXoO)
                                                    ((case-lambda
                                                       ((g$old-label*$30250$1LXXoO)
                                                        ((case-lambda
                                                           ((g$subst$30251$1LXXoO)
                                                            (g$merge-substs$30210$1LXXoO
                                                              (g$map$19225$1LXXoO
                                                                cons
                                                                g$new*$30249$1LXXoO
                                                                g$old-label*$30250$1LXXoO)
                                                              g$subst$30251$1LXXoO)))
                                                         (g$rem*$30213$1LXXoO
                                                           g$old*$30248$1LXXoO
                                                           g$subst$30247$1LXXoO))))
                                                     (g$find*$30212$1LXXoO
                                                       g$old*$30248$1LXXoO
                                                       g$subst$30247$1LXXoO))))
                                                 (g$get-import$30217$1LXXoO
                                                   g$isp$30244$1LXXoO)
                                                 (g$map$19225$1LXXoO
                                                   g$syntax->datum$27713$1LXXoO
                                                   g$old*$30245$1LXXoO)
                                                 (g$map$19225$1LXXoO
                                                   g$syntax->datum$27713$1LXXoO
                                                   g$new*$30246$1LXXoO))))
                                             g$ls/false$30238$1LXXoO)
                                           ((case-lambda
                                              ((g$t$30252$1LXXoO)
                                               ((case-lambda
                                                  ((g$ls/false$30253$1LXXoO)
                                                   (if (if g$ls/false$30253$1LXXoO
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$30254$1LXXoO
                                                                  g$isp$30255$1LXXoO
                                                                  g$sym*$30256$1LXXoO)
                                                                (if (eq? (g$syntax->datum$27713$1LXXoO
                                                                           g$except$30254$1LXXoO)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$19223$1LXXoO
                                                                      g$idsyn?$30208$1LXXoO
                                                                      g$sym*$30256$1LXXoO))
                                                                  '#f)))
                                                             g$ls/false$30253$1LXXoO))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$30257$1LXXoO
                                                            g$isp$30258$1LXXoO
                                                            g$sym*$30259$1LXXoO)
                                                          ((case-lambda
                                                             ((g$subst$30260$1LXXoO)
                                                              (g$rem*$30213$1LXXoO
                                                                (g$map$19225$1LXXoO
                                                                  g$syntax->datum$27713$1LXXoO
                                                                  g$sym*$30259$1LXXoO)
                                                                g$subst$30260$1LXXoO)))
                                                           (g$get-import$30217$1LXXoO
                                                             g$isp$30258$1LXXoO))))
                                                       g$ls/false$30253$1LXXoO)
                                                     ((case-lambda
                                                        ((g$t$30261$1LXXoO)
                                                         ((case-lambda
                                                            ((g$ls/false$30262$1LXXoO)
                                                             (if (if g$ls/false$30262$1LXXoO
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$30263$1LXXoO
                                                                            g$isp$30264$1LXXoO
                                                                            g$sym*$30265$1LXXoO)
                                                                          (if (eq? (g$syntax->datum$27713$1LXXoO
                                                                                     g$only$30263$1LXXoO)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$19223$1LXXoO
                                                                                g$idsyn?$30208$1LXXoO
                                                                                g$sym*$30265$1LXXoO))
                                                                            '#f)))
                                                                       g$ls/false$30262$1LXXoO))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$30266$1LXXoO
                                                                      g$isp$30267$1LXXoO
                                                                      g$sym*$30268$1LXXoO)
                                                                    ((case-lambda
                                                                       ((g$subst$30269$1LXXoO
                                                                          g$sym*$30270$1LXXoO)
                                                                        ((case-lambda
                                                                           ((g$sym*$30271$1LXXoO)
                                                                            ((case-lambda
                                                                               ((g$lab*$30272$1LXXoO)
                                                                                (g$map$19225$1LXXoO
                                                                                  cons
                                                                                  g$sym*$30271$1LXXoO
                                                                                  g$lab*$30272$1LXXoO)))
                                                                             (g$find*$30212$1LXXoO
                                                                               g$sym*$30271$1LXXoO
                                                                               g$subst$30269$1LXXoO))))
                                                                         (g$remove-dups$30214$1LXXoO
                                                                           g$sym*$30270$1LXXoO))))
                                                                     (g$get-import$30217$1LXXoO
                                                                       g$isp$30267$1LXXoO)
                                                                     (g$map$19225$1LXXoO
                                                                       g$syntax->datum$27713$1LXXoO
                                                                       g$sym*$30268$1LXXoO))))
                                                                 g$ls/false$30262$1LXXoO)
                                                               ((case-lambda
                                                                  ((g$t$30273$1LXXoO)
                                                                   ((case-lambda
                                                                      ((g$ls/false$30274$1LXXoO)
                                                                       (if (if g$ls/false$30274$1LXXoO
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$30275$1LXXoO
                                                                                      g$isp$30276$1LXXoO
                                                                                      g$p$30277$1LXXoO)
                                                                                    (if (eq? (g$syntax->datum$27713$1LXXoO
                                                                                               g$prefix$30275$1LXXoO)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$30208$1LXXoO
                                                                                          g$p$30277$1LXXoO))
                                                                                      '#f)))
                                                                                 g$ls/false$30274$1LXXoO))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$30278$1LXXoO
                                                                                g$isp$30279$1LXXoO
                                                                                g$p$30280$1LXXoO)
                                                                              ((case-lambda
                                                                                 ((g$subst$30281$1LXXoO
                                                                                    g$prefix$30282$1LXXoO)
                                                                                  (g$map$19225$1LXXoO
                                                                                    (case-lambda
                                                                                      ((g$x$30283$1LXXoO)
                                                                                       (cons
                                                                                         (string->symbol
                                                                                           (string-append
                                                                                             g$prefix$30282$1LXXoO
                                                                                             (symbol->string
                                                                                               (car g$x$30283$1LXXoO))))
                                                                                         (cdr g$x$30283$1LXXoO))))
                                                                                    g$subst$30281$1LXXoO)))
                                                                               (g$get-import$30217$1LXXoO
                                                                                 g$isp$30279$1LXXoO)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$27713$1LXXoO
                                                                                   g$p$30280$1LXXoO)))))
                                                                           g$ls/false$30274$1LXXoO)
                                                                         ((case-lambda
                                                                            ((g$t$30284$1LXXoO)
                                                                             ((case-lambda
                                                                                ((g$ls/false$30285$1LXXoO)
                                                                                 (if (if g$ls/false$30285$1LXXoO
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$30286$1LXXoO
                                                                                                g$spec*$30287$1LXXoO)
                                                                                              (eq? (g$syntax->datum$27713$1LXXoO
                                                                                                     g$library$30286$1LXXoO)
                                                                                                   'library)))
                                                                                           g$ls/false$30285$1LXXoO))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$30288$1LXXoO
                                                                                          g$spec*$30289$1LXXoO)
                                                                                        (g$import-library$30216$1LXXoO
                                                                                          g$spec*$30289$1LXXoO)))
                                                                                     g$ls/false$30285$1LXXoO)
                                                                                   ((case-lambda
                                                                                      ((g$t$30290$1LXXoO)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$30291$1LXXoO)
                                                                                           (if (if g$ls/false$30291$1LXXoO
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$30292$1LXXoO
                                                                                                          g$isp$30293$1LXXoO
                                                                                                          g$rest$30294$1LXXoO)
                                                                                                        (eq? (g$syntax->datum$27713$1LXXoO
                                                                                                               g$for$30292$1LXXoO)
                                                                                                             'for)))
                                                                                                     g$ls/false$30291$1LXXoO))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$30295$1LXXoO
                                                                                                    g$isp$30296$1LXXoO
                                                                                                    g$rest$30297$1LXXoO)
                                                                                                  (g$get-import$30217$1LXXoO
                                                                                                    g$isp$30296$1LXXoO)))
                                                                                               g$ls/false$30291$1LXXoO)
                                                                                             ((case-lambda
                                                                                                ((g$t$30298$1LXXoO)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$30299$1LXXoO)
                                                                                                     (if g$ls/false$30299$1LXXoO
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$30300$1LXXoO)
                                                                                                            (g$syntax-violation$27710$1LXXoO
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$30300$1LXXoO)))
                                                                                                         g$ls/false$30299$1LXXoO)
                                                                                                       (g$syntax-violation$27710$1LXXoO
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$30298$1LXXoO))))
                                                                                                  (g$syntax-dispatch$27591$1LXXoO
                                                                                                    g$t$30298$1LXXoO
                                                                                                    'any))))
                                                                                              g$t$30290$1LXXoO))))
                                                                                        (g$syntax-dispatch$27591$1LXXoO
                                                                                          g$t$30290$1LXXoO
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$30284$1LXXoO))))
                                                                              (g$syntax-dispatch$27591$1LXXoO
                                                                                g$t$30284$1LXXoO
                                                                                '(any each-any)))))
                                                                          g$t$30273$1LXXoO))))
                                                                    (g$syntax-dispatch$27591$1LXXoO
                                                                      g$t$30273$1LXXoO
                                                                      '(any any
                                                                            any)))))
                                                                g$t$30261$1LXXoO))))
                                                          (g$syntax-dispatch$27591$1LXXoO
                                                            g$t$30261$1LXXoO
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$30252$1LXXoO))))
                                                (g$syntax-dispatch$27591$1LXXoO
                                                  g$t$30252$1LXXoO
                                                  '(any any
                                                        .
                                                        each-any)))))
                                            g$t$30237$1LXXoO))))
                                      (g$syntax-dispatch$27591$1LXXoO
                                        g$t$30237$1LXXoO
                                        '(any any
                                              .
                                              #(each (any any)))))))
                                  g$t$30231$1LXXoO))))
                            (g$syntax-dispatch$27591$1LXXoO
                              g$t$30231$1LXXoO
                              '(any . each-any)))))
                        g$spec$30230$1LXXoO))))
                  (g$add-imports!$30218$1LXXoO
                    (case-lambda
                      ((g$imp$30222$1LXXoO g$h$30223$1LXXoO)
                       ((case-lambda
                          ((g$subst$30224$1LXXoO)
                           (g$for-each$19226$1LXXoO
                             (case-lambda
                               ((g$x$30225$1LXXoO)
                                ((case-lambda
                                   ((g$name$30226$1LXXoO
                                      g$label$30227$1LXXoO)
                                    ((case-lambda
                                       ((g$t$30228$1LXXoO)
                                        (if g$t$30228$1LXXoO
                                          ((case-lambda
                                             ((g$l$30229$1LXXoO)
                                              (if (not (eq? g$l$30229$1LXXoO
                                                            g$label$30227$1LXXoO))
                                                (g$dup-error$30209$1LXXoO
                                                  g$name$30226$1LXXoO)
                                                (void))))
                                           g$t$30228$1LXXoO)
                                          (begin
                                            '#f
                                            (g$hashtable-set!$20168$1LXXoO
                                              g$h$30223$1LXXoO
                                              g$name$30226$1LXXoO
                                              g$label$30227$1LXXoO)))))
                                     (g$hashtable-ref$20167$1LXXoO
                                       g$h$30223$1LXXoO
                                       g$name$30226$1LXXoO
                                       '#f))))
                                 (car g$x$30225$1LXXoO)
                                 (cdr g$x$30225$1LXXoO))))
                             g$subst$30224$1LXXoO)))
                        (g$get-import$30217$1LXXoO
                          g$imp$30222$1LXXoO))))))
          ((letrec ((g$f$30219$1LXXoO
                      (case-lambda
                        ((g$imp*$30220$1LXXoO g$h$30221$1LXXoO)
                         (if (null? g$imp*$30220$1LXXoO)
                           (hashtable-entries g$h$30221$1LXXoO)
                           (begin
                             '#f
                             (g$add-imports!$30218$1LXXoO
                               (car g$imp*$30220$1LXXoO)
                               g$h$30221$1LXXoO)
                             (g$f$30219$1LXXoO
                               (cdr g$imp*$30220$1LXXoO)
                               g$h$30221$1LXXoO)))))))
             g$f$30219$1LXXoO)
           g$imp*$30207$1LXXoO
           (g$make-eq-hashtable$20164$1LXXoO))))))
   (g$make-top-rib$27644$1LXXoO
     g$make-top-rib$31238$1LXXoO
     (case-lambda
       ((g$names$30469$1LXXoO g$labels$30470$1LXXoO)
        ((case-lambda
           ((g$rib$30471$1LXXoO)
            (begin
              (g$vector-for-each$20125$1LXXoO
                (case-lambda
                  ((g$name$30472$1LXXoO g$label$30473$1LXXoO)
                   (begin
                     (if (not (g$symbol?$20057$1LXXoO
                                g$name$30472$1LXXoO))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$30472$1LXXoO)
                       (void))
                     (g$extend-rib/nc!$27055$1LXXoO
                       g$rib$30471$1LXXoO
                       (g$make-stx$27066$1LXXoO
                         g$name$30472$1LXXoO
                         g$top-mark*$27026$1LXXoO
                         '()
                         '())
                       g$label$30473$1LXXoO))))
                g$names$30469$1LXXoO
                g$labels$30470$1LXXoO)
              g$rib$30471$1LXXoO)))
         (g$make-cache-rib$27052$1LXXoO)))))
   (g$make-collector$27645$1LXXoO
     g$make-collector$31239$1LXXoO
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$30474$1LXXoO)
            (case-lambda
              (() g$ls$30474$1LXXoO)
              ((g$x$30475$1LXXoO)
               (set! g$ls$30474$1LXXoO
                 (g$set-cons$27023$1LXXoO
                   g$x$30475$1LXXoO
                   g$ls$30474$1LXXoO))))))
         '()))))
   (g$inv-collector$27646$1LXXoO
     g$inv-collector$31240$1LXXoO
     (g$make-parameter$25954$1LXXoO
       (case-lambda
         (g$args$30476$1LXXoO
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$30477$1LXXoO)
          (begin
            (if (not (g$procedure?$20059$1LXXoO g$x$30477$1LXXoO))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$30477$1LXXoO)
              (void))
            g$x$30477$1LXXoO)))))
   (g$vis-collector$27647$1LXXoO
     g$vis-collector$31241$1LXXoO
     (g$make-parameter$25954$1LXXoO
       (case-lambda
         (g$args$30478$1LXXoO
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$30479$1LXXoO)
          (begin
            (if (not (g$procedure?$20059$1LXXoO g$x$30479$1LXXoO))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$30479$1LXXoO)
              (void))
            g$x$30479$1LXXoO)))))
   (g$imp-collector$27648$1LXXoO
     g$imp-collector$31242$1LXXoO
     (g$make-parameter$25954$1LXXoO
       (case-lambda
         (g$args$30480$1LXXoO
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$30481$1LXXoO)
          (begin
            (if (not (g$procedure?$20059$1LXXoO g$x$30481$1LXXoO))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$30481$1LXXoO)
              (void))
            g$x$30481$1LXXoO)))))
   (g$chi-library-internal$27649$1LXXoO
     g$chi-library-internal$31243$1LXXoO
     (case-lambda
       ((g$e*$30482$1LXXoO g$rib$30483$1LXXoO g$mix?$30484$1LXXoO)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$27638$1LXXoO
               g$e*$30482$1LXXoO
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$30483$1LXXoO
               g$mix?$30484$1LXXoO
               '#t)))
          (case-lambda
            ((g$e*$30493$1LXXoO
               g$r$30494$1LXXoO
               g$mr$30495$1LXXoO
               g$lex*$30496$1LXXoO
               g$rhs*$30497$1LXXoO
               g$mod**$30498$1LXXoO
               g$_kwd*$30499$1LXXoO
               g$exp*$30500$1LXXoO)
             ((case-lambda
                ((g$exp*$30501$1LXXoO
                   g$_kwd*$30502$1LXXoO
                   g$mod**$30503$1LXXoO
                   g$rhs*$30504$1LXXoO
                   g$lex*$30505$1LXXoO
                   g$mr$30506$1LXXoO
                   g$r$30507$1LXXoO
                   g$e*$30508$1LXXoO)
                 (values
                   (append
                     (apply
                       append
                       (g$reverse$20074$1LXXoO g$mod**$30503$1LXXoO))
                     g$e*$30508$1LXXoO)
                   g$r$30507$1LXXoO
                   g$mr$30506$1LXXoO
                   (g$reverse$20074$1LXXoO g$lex*$30505$1LXXoO)
                   (g$reverse$20074$1LXXoO g$rhs*$30504$1LXXoO)
                   g$exp*$30501$1LXXoO)))
              g$exp*$30500$1LXXoO
              g$_kwd*$30499$1LXXoO
              g$mod**$30498$1LXXoO
              g$rhs*$30497$1LXXoO
              g$lex*$30496$1LXXoO
              g$mr$30495$1LXXoO
              g$r$30494$1LXXoO
              g$e*$30493$1LXXoO)))))))
   (g$chi-interaction-expr$27650$1LXXoO
     g$chi-interaction-expr$31244$1LXXoO
     (case-lambda
       ((g$e$30509$1LXXoO g$rib$30510$1LXXoO g$r$30511$1LXXoO)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$27638$1LXXoO
               (list g$e$30509$1LXXoO)
               g$r$30511$1LXXoO
               g$r$30511$1LXXoO
               '()
               '()
               '()
               '()
               '()
               g$rib$30510$1LXXoO
               '#t
               '#f)))
          (case-lambda
            ((g$e*$30520$1LXXoO
               g$r$30521$1LXXoO
               g$mr$30522$1LXXoO
               g$lex*$30523$1LXXoO
               g$rhs*$30524$1LXXoO
               g$mod**$30525$1LXXoO
               g$_kwd*$30526$1LXXoO
               g$_exp*$30527$1LXXoO)
             ((case-lambda
                ((g$_exp*$30528$1LXXoO
                   g$_kwd*$30529$1LXXoO
                   g$mod**$30530$1LXXoO
                   g$rhs*$30531$1LXXoO
                   g$lex*$30532$1LXXoO
                   g$mr$30533$1LXXoO
                   g$r$30534$1LXXoO
                   g$e*$30535$1LXXoO)
                 ((case-lambda
                    ((g$e*$30536$1LXXoO)
                     ((case-lambda
                        ((g$e$30537$1LXXoO)
                         (values g$e$30537$1LXXoO g$r$30534$1LXXoO)))
                      (if (null? g$e*$30536$1LXXoO)
                        (g$build-void$27019$1LXXoO)
                        (if (null? (cdr g$e*$30536$1LXXoO))
                          (car g$e*$30536$1LXXoO)
                          (begin
                            '#f
                            (g$build-sequence$27018$1LXXoO
                              '#f
                              g$e*$30536$1LXXoO)))))))
                  (g$expand-interaction-rhs*/init*$27616$1LXXoO
                    (g$reverse$20074$1LXXoO g$lex*$30532$1LXXoO)
                    (g$reverse$20074$1LXXoO g$rhs*$30531$1LXXoO)
                    (append
                      (apply
                        append
                        (g$reverse$20074$1LXXoO g$mod**$30530$1LXXoO))
                      g$e*$30535$1LXXoO)
                    g$r$30534$1LXXoO
                    g$mr$30533$1LXXoO))))
              g$_exp*$30527$1LXXoO
              g$_kwd*$30526$1LXXoO
              g$mod**$30525$1LXXoO
              g$rhs*$30524$1LXXoO
              g$lex*$30523$1LXXoO
              g$mr$30522$1LXXoO
              g$r$30521$1LXXoO
              g$e*$30520$1LXXoO)))))))
   (g$library-body-expander$27651$1LXXoO
     g$library-body-expander$31245$1LXXoO
     (case-lambda
       ((g$name$30538$1LXXoO
          g$main-exp*$30539$1LXXoO
          g$imp*$30540$1LXXoO
          g$b*$30541$1LXXoO
          g$mix?$30542$1LXXoO)
        (letrec* ((g$itc$30543$1LXXoO (g$make-collector$27645$1LXXoO)))
          ((case-lambda
             ((g$imp-collector$30548$1LXXoO
                g$top-level-context$30549$1LXXoO
                g$imp-collector$30550$1LXXoO
                g$top-level-context$30551$1LXXoO)
              ((case-lambda
                 ((g$swap$30552$1LXXoO)
                  (dynamic-wind
                    g$swap$30552$1LXXoO
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$27643$1LXXoO
                              g$imp*$30540$1LXXoO)))
                         (case-lambda
                           ((g$subst-names$30555$1LXXoO
                              g$subst-labels$30556$1LXXoO)
                            ((case-lambda
                               ((g$subst-labels$30557$1LXXoO
                                  g$subst-names$30558$1LXXoO)
                                ((case-lambda
                                   ((g$rib$30559$1LXXoO)
                                    (letrec* ((g$wrap$30560$1LXXoO
                                                (case-lambda
                                                  ((g$x$30622$1LXXoO)
                                                   (g$make-stx$27066$1LXXoO
                                                     g$x$30622$1LXXoO
                                                     g$top-mark*$27026$1LXXoO
                                                     (list
                                                       g$rib$30559$1LXXoO)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$30561$1LXXoO
                                            g$main-exp*$30562$1LXXoO
                                            g$rtc$30563$1LXXoO
                                            g$vtc$30564$1LXXoO)
                                          ((case-lambda
                                             ((g$inv-collector$30569$1LXXoO
                                                g$vis-collector$30570$1LXXoO
                                                g$inv-collector$30571$1LXXoO
                                                g$vis-collector$30572$1LXXoO)
                                              ((case-lambda
                                                 ((g$swap$30573$1LXXoO)
                                                  (dynamic-wind
                                                    g$swap$30573$1LXXoO
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$27649$1LXXoO
                                                              g$b*$30561$1LXXoO
                                                              g$rib$30559$1LXXoO
                                                              g$mix?$30542$1LXXoO)))
                                                         (case-lambda
                                                           ((g$init*$30580$1LXXoO
                                                              g$r$30581$1LXXoO
                                                              g$mr$30582$1LXXoO
                                                              g$lex*$30583$1LXXoO
                                                              g$rhs*$30584$1LXXoO
                                                              g$internal-exp*$30585$1LXXoO)
                                                            ((case-lambda
                                                               ((g$internal-exp*$30586$1LXXoO
                                                                  g$rhs*$30587$1LXXoO
                                                                  g$lex*$30588$1LXXoO
                                                                  g$mr$30589$1LXXoO
                                                                  g$r$30590$1LXXoO
                                                                  g$init*$30591$1LXXoO)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$27640$1LXXoO
                                                                       (append
                                                                         g$main-exp*$30562$1LXXoO
                                                                         g$internal-exp*$30586$1LXXoO))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$30594$1LXXoO
                                                                       g$exp-id*$30595$1LXXoO)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$30596$1LXXoO
                                                                           g$exp-name*$30597$1LXXoO)
                                                                         (begin
                                                                           (g$seal-rib!$27057$1LXXoO
                                                                             g$rib$30559$1LXXoO)
                                                                           ((case-lambda
                                                                              ((g$init*$30598$1LXXoO)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$30599$1LXXoO)
                                                                                   (begin
                                                                                     (g$unseal-rib!$27058$1LXXoO
                                                                                       g$rib$30559$1LXXoO)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$30600$1LXXoO
                                                                                           g$export-subst$30601$1LXXoO)
                                                                                         (letrec* ((g$errstr$30602$1LXXoO
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$27699$1LXXoO
                                                                                                  g$lex*$30588$1LXXoO
                                                                                                  g$loc*$30600$1LXXoO
                                                                                                  g$r$30590$1LXXoO)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$30606$1LXXoO
                                                                                                  g$global*$30607$1LXXoO
                                                                                                  g$macro*$30608$1LXXoO)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$30609$1LXXoO
                                                                                                      g$global*$30610$1LXXoO
                                                                                                      g$export-env$30611$1LXXoO)
                                                                                                    (begin
                                                                                                      (g$for-each$19226$1LXXoO
                                                                                                        (case-lambda
                                                                                                          ((g$s$30612$1LXXoO)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$30613$1LXXoO
                                                                                                                 g$label$30614$1LXXoO)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$30615$1LXXoO)
                                                                                                                   (if g$p$30615$1LXXoO
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$30616$1LXXoO)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$30617$1LXXoO)
                                                                                                                             (if (eq? g$type$30617$1LXXoO
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$27710$1LXXoO
                                                                                                                                 'export
                                                                                                                                 g$errstr$30602$1LXXoO
                                                                                                                                 g$name$30613$1LXXoO)
                                                                                                                               (void))))
                                                                                                                          (car g$b$30616$1LXXoO))))
                                                                                                                      (cdr g$p$30615$1LXXoO))
                                                                                                                     (void))))
                                                                                                                (g$assq$19213$1LXXoO
                                                                                                                  g$label$30614$1LXXoO
                                                                                                                  g$export-env$30611$1LXXoO))))
                                                                                                            (car g$s$30612$1LXXoO)
                                                                                                            (cdr g$s$30612$1LXXoO))))
                                                                                                        g$export-subst$30601$1LXXoO)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$30618$1LXXoO
                                                                                                            g$invoke-definitions$30619$1LXXoO)
                                                                                                          (values
                                                                                                            (g$itc$30543$1LXXoO)
                                                                                                            (g$rtc$30563$1LXXoO)
                                                                                                            (g$vtc$30564$1LXXoO)
                                                                                                            (g$build-sequence$27018$1LXXoO
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$30619$1LXXoO
                                                                                                                (list
                                                                                                                  g$invoke-body$30618$1LXXoO)))
                                                                                                            g$macro*$30609$1LXXoO
                                                                                                            g$export-subst$30601$1LXXoO
                                                                                                            g$export-env$30611$1LXXoO)))
                                                                                                       (g$build-library-letrec*$27022$1LXXoO
                                                                                                         '#f
                                                                                                         g$name$30538$1LXXoO
                                                                                                         g$lex*$30588$1LXXoO
                                                                                                         g$loc*$30600$1LXXoO
                                                                                                         g$rhs*$30599$1LXXoO
                                                                                                         (if (null?
                                                                                                               g$init*$30598$1LXXoO)
                                                                                                           (g$build-void$27019$1LXXoO)
                                                                                                           (g$build-sequence$27018$1LXXoO
                                                                                                             '#f
                                                                                                             g$init*$30598$1LXXoO)))
                                                                                                       (g$map$19225$1LXXoO
                                                                                                         g$build-global-define$27014$1LXXoO
                                                                                                         (g$map$19225$1LXXoO
                                                                                                           cdr
                                                                                                           g$global*$30610$1LXXoO))))))
                                                                                                 g$macro*$30608$1LXXoO
                                                                                                 g$global*$30607$1LXXoO
                                                                                                 g$export-env$30606$1LXXoO)))))))
                                                                                      (g$map$19225$1LXXoO
                                                                                        g$gen-global$27029$1LXXoO
                                                                                        g$lex*$30588$1LXXoO)
                                                                                      (g$make-export-subst$27698$1LXXoO
                                                                                        g$exp-name*$30597$1LXXoO
                                                                                        g$exp-id*$30596$1LXXoO)))))
                                                                                (g$chi-rhs*$27617$1LXXoO
                                                                                  g$rhs*$30587$1LXXoO
                                                                                  g$r$30590$1LXXoO
                                                                                  g$mr$30589$1LXXoO))))
                                                                            (g$chi-expr*$27607$1LXXoO
                                                                              g$init*$30591$1LXXoO
                                                                              g$r$30590$1LXXoO
                                                                              g$mr$30589$1LXXoO)))))
                                                                      g$exp-id*$30595$1LXXoO
                                                                      g$exp-name*$30594$1LXXoO))))))
                                                             g$internal-exp*$30585$1LXXoO
                                                             g$rhs*$30584$1LXXoO
                                                             g$lex*$30583$1LXXoO
                                                             g$mr$30582$1LXXoO
                                                             g$r$30581$1LXXoO
                                                             g$init*$30580$1LXXoO))))))
                                                    g$swap$30573$1LXXoO)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$30620$1LXXoO)
                                                        (begin
                                                          (g$inv-collector$30569$1LXXoO
                                                            g$inv-collector$30571$1LXXoO)
                                                          (set! g$inv-collector$30571$1LXXoO
                                                            g$t$30620$1LXXoO))))
                                                     (g$inv-collector$30569$1LXXoO))
                                                    ((case-lambda
                                                       ((g$t$30621$1LXXoO)
                                                        (begin
                                                          (g$vis-collector$30570$1LXXoO
                                                            g$vis-collector$30572$1LXXoO)
                                                          (set! g$vis-collector$30572$1LXXoO
                                                            g$t$30621$1LXXoO))))
                                                     (g$vis-collector$30570$1LXXoO))))))))
                                           g$inv-collector$27646$1LXXoO
                                           g$vis-collector$27647$1LXXoO
                                           g$rtc$30563$1LXXoO
                                           g$vtc$30564$1LXXoO)))
                                       (g$map$19225$1LXXoO
                                         g$wrap$30560$1LXXoO
                                         g$b*$30541$1LXXoO)
                                       (g$map$19225$1LXXoO
                                         g$wrap$30560$1LXXoO
                                         g$main-exp*$30539$1LXXoO)
                                       (g$make-collector$27645$1LXXoO)
                                       (g$make-collector$27645$1LXXoO)))))
                                 (g$make-top-rib$27644$1LXXoO
                                   g$subst-names$30558$1LXXoO
                                   g$subst-labels$30557$1LXXoO))))
                             g$subst-labels$30556$1LXXoO
                             g$subst-names$30555$1LXXoO))))))
                    g$swap$30552$1LXXoO)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$30623$1LXXoO)
                        (begin
                          (g$imp-collector$30548$1LXXoO
                            g$imp-collector$30550$1LXXoO)
                          (set! g$imp-collector$30550$1LXXoO
                            g$t$30623$1LXXoO))))
                     (g$imp-collector$30548$1LXXoO))
                    ((case-lambda
                       ((g$t$30624$1LXXoO)
                        (begin
                          (g$top-level-context$30549$1LXXoO
                            g$top-level-context$30551$1LXXoO)
                          (set! g$top-level-context$30551$1LXXoO
                            g$t$30624$1LXXoO))))
                     (g$top-level-context$30549$1LXXoO))))))))
           g$imp-collector$27648$1LXXoO
           g$top-level-context$27718$1LXXoO
           g$itc$30543$1LXXoO
           '#f)))))
   (g$core-library-expander$27652$1LXXoO
     g$core-library-expander$31246$1LXXoO
     (case-lambda
       ((g$e$30625$1LXXoO g$verify-name$30626$1LXXoO)
        (call-with-values
          (case-lambda
            (() (g$parse-library$27642$1LXXoO g$e$30625$1LXXoO)))
          (case-lambda
            ((g$name*$30631$1LXXoO
               g$exp*$30632$1LXXoO
               g$imp*$30633$1LXXoO
               g$b*$30634$1LXXoO)
             ((case-lambda
                ((g$b*$30635$1LXXoO
                   g$imp*$30636$1LXXoO
                   g$exp*$30637$1LXXoO
                   g$name*$30638$1LXXoO)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$parse-library-name$27641$1LXXoO
                        g$name*$30638$1LXXoO)))
                   (case-lambda
                     ((g$name$30641$1LXXoO g$ver$30642$1LXXoO)
                      ((case-lambda
                         ((g$ver$30643$1LXXoO g$name$30644$1LXXoO)
                          (begin
                            (g$verify-name$30626$1LXXoO
                              g$name$30644$1LXXoO)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$27651$1LXXoO
                                   g$name$30644$1LXXoO
                                   g$exp*$30637$1LXXoO
                                   g$imp*$30636$1LXXoO
                                   g$b*$30635$1LXXoO
                                   '#f)))
                              (case-lambda
                                ((g$imp*$30652$1LXXoO
                                   g$invoke-req*$30653$1LXXoO
                                   g$visit-req*$30654$1LXXoO
                                   g$invoke-code$30655$1LXXoO
                                   g$visit-code$30656$1LXXoO
                                   g$export-subst$30657$1LXXoO
                                   g$export-env$30658$1LXXoO)
                                 ((case-lambda
                                    ((g$export-env$30659$1LXXoO
                                       g$export-subst$30660$1LXXoO
                                       g$visit-code$30661$1LXXoO
                                       g$invoke-code$30662$1LXXoO
                                       g$visit-req*$30663$1LXXoO
                                       g$invoke-req*$30664$1LXXoO
                                       g$imp*$30665$1LXXoO)
                                     (values
                                       g$name$30644$1LXXoO
                                       g$ver$30643$1LXXoO
                                       g$imp*$30665$1LXXoO
                                       g$invoke-req*$30664$1LXXoO
                                       g$visit-req*$30663$1LXXoO
                                       g$invoke-code$30662$1LXXoO
                                       g$visit-code$30661$1LXXoO
                                       g$export-subst$30660$1LXXoO
                                       g$export-env$30659$1LXXoO)))
                                  g$export-env$30658$1LXXoO
                                  g$export-subst$30657$1LXXoO
                                  g$visit-code$30656$1LXXoO
                                  g$invoke-code$30655$1LXXoO
                                  g$visit-req*$30654$1LXXoO
                                  g$invoke-req*$30653$1LXXoO
                                  g$imp*$30652$1LXXoO)))))))
                       g$ver$30642$1LXXoO
                       g$name$30641$1LXXoO))))))
              g$b*$30634$1LXXoO
              g$imp*$30633$1LXXoO
              g$exp*$30632$1LXXoO
              g$name*$30631$1LXXoO)))))))
   (g$parse-top-level-program$27653$1LXXoO
     g$parse-top-level-program$31247$1LXXoO
     (case-lambda
       ((g$e*$30666$1LXXoO)
        ((case-lambda
           ((g$t$30667$1LXXoO)
            ((case-lambda
               ((g$ls/false$30668$1LXXoO)
                (if (if g$ls/false$30668$1LXXoO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$30669$1LXXoO
                               g$imp*$30670$1LXXoO
                               g$b*$30671$1LXXoO)
                             (eq? (g$syntax->datum$27713$1LXXoO
                                    g$import$30669$1LXXoO)
                                  'import)))
                          g$ls/false$30668$1LXXoO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$30672$1LXXoO
                         g$imp*$30673$1LXXoO
                         g$b*$30674$1LXXoO)
                       (values g$imp*$30673$1LXXoO g$b*$30674$1LXXoO)))
                    g$ls/false$30668$1LXXoO)
                  ((case-lambda
                     ((g$t$30675$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$30676$1LXXoO)
                          (if (if g$ls/false$30676$1LXXoO
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$30677$1LXXoO
                                         g$x$30678$1LXXoO
                                         g$y$30679$1LXXoO)
                                       (eq? (g$syntax->datum$27713$1LXXoO
                                              g$import$30677$1LXXoO)
                                            'import)))
                                    g$ls/false$30676$1LXXoO))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$30680$1LXXoO
                                   g$x$30681$1LXXoO
                                   g$y$30682$1LXXoO)
                                 (g$syntax-violation$27710$1LXXoO
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$27090$1LXXoO
                                     g$e*$30666$1LXXoO))))
                              g$ls/false$30676$1LXXoO)
                            ((case-lambda
                               ((g$t$30683$1LXXoO)
                                ((case-lambda
                                   ((g$ls/false$30684$1LXXoO)
                                    (if g$ls/false$30684$1LXXoO
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$30684$1LXXoO)
                                      (g$syntax-violation$27710$1LXXoO
                                        '#f
                                        '"invalid syntax"
                                        g$t$30683$1LXXoO))))
                                 (g$syntax-dispatch$27591$1LXXoO
                                   g$t$30683$1LXXoO
                                   '_))))
                             g$t$30675$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$30675$1LXXoO
                         '((any . any) . any)))))
                   g$t$30667$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$30667$1LXXoO
               '((any . each-any) . each-any)))))
         g$e*$30666$1LXXoO))))
   (g$top-level-expander$27654$1LXXoO
     g$top-level-expander$31248$1LXXoO
     (case-lambda
       ((g$e*$30685$1LXXoO)
        (call-with-values
          (case-lambda
            (()
             (g$parse-top-level-program$27653$1LXXoO
               g$e*$30685$1LXXoO)))
          (case-lambda
            ((g$imp*$30688$1LXXoO g$b*$30689$1LXXoO)
             ((case-lambda
                ((g$b*$30690$1LXXoO g$imp*$30691$1LXXoO)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$27651$1LXXoO
                        '()
                        '()
                        g$imp*$30691$1LXXoO
                        g$b*$30690$1LXXoO
                        '#t)))
                   (case-lambda
                     ((g$imp*$30699$1LXXoO
                        g$invoke-req*$30700$1LXXoO
                        g$visit-req*$30701$1LXXoO
                        g$invoke-code$30702$1LXXoO
                        g$visit-code$30703$1LXXoO
                        g$export-subst$30704$1LXXoO
                        g$export-env$30705$1LXXoO)
                      ((case-lambda
                         ((g$export-env$30706$1LXXoO
                            g$export-subst$30707$1LXXoO
                            g$visit-code$30708$1LXXoO
                            g$invoke-code$30709$1LXXoO
                            g$visit-req*$30710$1LXXoO
                            g$invoke-req*$30711$1LXXoO
                            g$imp*$30712$1LXXoO)
                          (values
                            g$invoke-req*$30711$1LXXoO
                            g$invoke-code$30709$1LXXoO)))
                       g$export-env$30705$1LXXoO
                       g$export-subst$30704$1LXXoO
                       g$visit-code$30703$1LXXoO
                       g$invoke-code$30702$1LXXoO
                       g$visit-req*$30701$1LXXoO
                       g$invoke-req*$30700$1LXXoO
                       g$imp*$30699$1LXXoO))))))
              g$b*$30689$1LXXoO
              g$imp*$30688$1LXXoO)))))))
   (g$9842$27655$1LXXoO
     g$9842$31249$1LXXoO
     (make-record-type-descriptor
       'env
       '#f
       'g$9845$1LXXoO
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$9844$27656$1LXXoO g$9844$31250$1LXXoO '#f)
   (g$9843$27657$1LXXoO
     g$9843$31251$1LXXoO
     (make-record-constructor-descriptor
       g$9842$27655$1LXXoO
       '#f
       g$9844$27656$1LXXoO))
   (g$env?$27660$1LXXoO
     g$env?$31252$1LXXoO
     (record-predicate g$9842$27655$1LXXoO))
   (g$make-env$27661$1LXXoO
     g$make-env$31253$1LXXoO
     (record-constructor g$9843$27657$1LXXoO))
   (g$env-names$27662$1LXXoO
     g$env-names$31254$1LXXoO
     (record-accessor g$9842$27655$1LXXoO '0))
   (g$env-labels$27663$1LXXoO
     g$env-labels$31255$1LXXoO
     (record-accessor g$9842$27655$1LXXoO '1))
   (g$env-itc$27664$1LXXoO
     g$env-itc$31256$1LXXoO
     (record-accessor g$9842$27655$1LXXoO '2))
   (g$set-env-names!$27665$1LXXoO
     g$set-env-names!$31257$1LXXoO
     (record-mutator g$9842$27655$1LXXoO '0))
   (g$set-env-labels!$27666$1LXXoO
     g$set-env-labels!$31258$1LXXoO
     (record-mutator g$9842$27655$1LXXoO '1))
   (g$set-env-itc!$27667$1LXXoO
     g$set-env-itc!$31259$1LXXoO
     (record-mutator g$9842$27655$1LXXoO '2))
   (g$rp$27668$1LXXoO
     g$rp$31260$1LXXoO
     (make-record-printer
       'env
       (case-lambda
         ((g$x$30713$1LXXoO g$p$30714$1LXXoO g$wr$30715$1LXXoO)
          (display '"#<environment>" g$p$30714$1LXXoO)))))
   (g$9859$27669$1LXXoO
     g$9859$31261$1LXXoO
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$9862$1LXXoO
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$9861$27670$1LXXoO g$9861$31262$1LXXoO '#f)
   (g$9860$27671$1LXXoO
     g$9860$31263$1LXXoO
     (make-record-constructor-descriptor
       g$9859$27669$1LXXoO
       '#f
       g$9861$27670$1LXXoO))
   (g$interaction-env?$27674$1LXXoO
     g$interaction-env?$31264$1LXXoO
     (record-predicate g$9859$27669$1LXXoO))
   (g$make-interaction-env$27675$1LXXoO
     g$make-interaction-env$31265$1LXXoO
     (record-constructor g$9860$27671$1LXXoO))
   (g$interaction-env-rib$27676$1LXXoO
     g$interaction-env-rib$31266$1LXXoO
     (record-accessor g$9859$27669$1LXXoO '0))
   (g$interaction-env-r$27677$1LXXoO
     g$interaction-env-r$31267$1LXXoO
     (record-accessor g$9859$27669$1LXXoO '1))
   (g$interaction-env-locs$27678$1LXXoO
     g$interaction-env-locs$31268$1LXXoO
     (record-accessor g$9859$27669$1LXXoO '2))
   (g$set-interaction-env-rib!$27679$1LXXoO
     g$set-interaction-env-rib!$31269$1LXXoO
     (record-mutator g$9859$27669$1LXXoO '0))
   (g$set-interaction-env-r!$27680$1LXXoO
     g$set-interaction-env-r!$31270$1LXXoO
     (record-mutator g$9859$27669$1LXXoO '1))
   (g$set-interaction-env-locs!$27681$1LXXoO
     g$set-interaction-env-locs!$31271$1LXXoO
     (record-mutator g$9859$27669$1LXXoO '2))
   (g$rp$27682$1LXXoO
     g$rp$31272$1LXXoO
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$30716$1LXXoO g$p$30717$1LXXoO g$wr$30718$1LXXoO)
          (display '"#<environment>" g$p$30717$1LXXoO)))))
   (g$interaction-environment-symbols$27683$1LXXoO
     g$interaction-environment-symbols$31273$1LXXoO
     (case-lambda
       (()
        (g$environment-symbols$27687$1LXXoO
          (g$interaction-environment$27717$1LXXoO)))))
   (g$environment-bindings$27684$1LXXoO
     g$environment-bindings$31274$1LXXoO
     (case-lambda
       ((g$e$30719$1LXXoO)
        (vector->list
          (g$vector-map$20124$1LXXoO
            (case-lambda
              ((g$name$30720$1LXXoO g$label$30721$1LXXoO)
               (g$parse-binding$27685$1LXXoO
                 (cons
                   g$name$30720$1LXXoO
                   (g$imported-label->binding$26798$1LXXoO
                     g$label$30721$1LXXoO)))))
            (g$env-names$27662$1LXXoO g$e$30719$1LXXoO)
            (g$env-labels$27663$1LXXoO g$e$30719$1LXXoO))))))
   (g$parse-binding$27685$1LXXoO
     g$parse-binding$31275$1LXXoO
     (case-lambda
       ((g$b$30722$1LXXoO)
        (cons
          (car g$b$30722$1LXXoO)
          ((case-lambda
             ((g$t$30723$1LXXoO)
              (if (g$memv$19218$1LXXoO
                    g$t$30723$1LXXoO
                    '(core-prim global))
                'procedure
                (if (g$memv$19218$1LXXoO
                      g$t$30723$1LXXoO
                      '(core-macro macro global-macro))
                  'syntax
                  (if (eqv? g$t$30723$1LXXoO '$core-rtd)
                    'record
                    (begin
                      '#f
                      (if (eq? (car g$b$30722$1LXXoO)
                               (g$cadr$20076$1LXXoO g$b$30722$1LXXoO))
                        'syntax
                        'unknown)))))))
           (g$cadr$20076$1LXXoO g$b$30722$1LXXoO))))))
   (g$environment?$27686$1LXXoO
     g$environment?$31276$1LXXoO
     (case-lambda
       ((g$x$30724$1LXXoO)
        ((case-lambda
           ((g$t$30725$1LXXoO)
            (if g$t$30725$1LXXoO
              g$t$30725$1LXXoO
              (begin
                '#f
                (g$interaction-env?$27674$1LXXoO g$x$30724$1LXXoO)))))
         (g$env?$27660$1LXXoO g$x$30724$1LXXoO)))))
   (g$environment-symbols$27687$1LXXoO
     g$environment-symbols$31277$1LXXoO
     (case-lambda
       ((g$x$30726$1LXXoO)
        (if (g$env?$27660$1LXXoO g$x$30726$1LXXoO)
          (vector->list (g$env-names$27662$1LXXoO g$x$30726$1LXXoO))
          (if (g$interaction-env?$27674$1LXXoO g$x$30726$1LXXoO)
            (g$map$19225$1LXXoO
              values
              (g$rib-sym*$27041$1LXXoO
                (g$interaction-env-rib$27676$1LXXoO g$x$30726$1LXXoO)))
            (begin
              '#f
              (assertion-violation
                'environment-symbols
                '"not an environment"
                g$x$30726$1LXXoO)))))))
   (g$environment$27688$1LXXoO
     g$environment$31278$1LXXoO
     (case-lambda
       (g$imp*$30727$1LXXoO
        ((case-lambda
           ((g$itc$30728$1LXXoO)
            ((case-lambda
               ((g$imp-collector$30731$1LXXoO
                  g$imp-collector$30732$1LXXoO)
                ((case-lambda
                   ((g$swap$30733$1LXXoO)
                    (dynamic-wind
                      g$swap$30733$1LXXoO
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$27643$1LXXoO
                                g$imp*$30727$1LXXoO)))
                           (case-lambda
                             ((g$subst-names$30736$1LXXoO
                                g$subst-labels$30737$1LXXoO)
                              ((case-lambda
                                 ((g$subst-labels$30738$1LXXoO
                                    g$subst-names$30739$1LXXoO)
                                  (g$make-env$27661$1LXXoO
                                    g$subst-names$30739$1LXXoO
                                    g$subst-labels$30738$1LXXoO
                                    g$itc$30728$1LXXoO)))
                               g$subst-labels$30737$1LXXoO
                               g$subst-names$30736$1LXXoO))))))
                      g$swap$30733$1LXXoO)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$30740$1LXXoO)
                        (begin
                          (g$imp-collector$30731$1LXXoO
                            g$imp-collector$30732$1LXXoO)
                          (set! g$imp-collector$30732$1LXXoO
                            g$t$30740$1LXXoO))))
                     (g$imp-collector$30731$1LXXoO)))))))
             g$imp-collector$27648$1LXXoO
             g$itc$30728$1LXXoO)))
         (g$make-collector$27645$1LXXoO)))))
   (g$null-environment$27689$1LXXoO
     g$null-environment$31279$1LXXoO
     (case-lambda
       ((g$n$30741$1LXXoO)
        (begin
          (if (not (eqv? g$n$30741$1LXXoO '5))
            (assertion-violation
              'null-environment
              '"not 5"
              g$n$30741$1LXXoO)
            (void))
          (g$environment$27688$1LXXoO '(psyntax null-environment-5))))))
   (g$scheme-report-environment$27690$1LXXoO
     g$scheme-report-environment$31280$1LXXoO
     (case-lambda
       ((g$n$30742$1LXXoO)
        (begin
          (if (not (eqv? g$n$30742$1LXXoO '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$30742$1LXXoO)
            (void))
          (g$environment$27688$1LXXoO
            '(psyntax scheme-report-environment-5))))))
   (g$expand$27691$1LXXoO
     g$expand$31281$1LXXoO
     (case-lambda
       ((g$x$30743$1LXXoO g$env$30744$1LXXoO)
        (if (g$env?$27660$1LXXoO g$env$30744$1LXXoO)
          ((case-lambda
             ((g$rib$30745$1LXXoO)
              ((case-lambda
                 ((g$x$30746$1LXXoO
                    g$itc$30747$1LXXoO
                    g$rtc$30748$1LXXoO
                    g$vtc$30749$1LXXoO)
                  ((case-lambda
                     ((g$x$30750$1LXXoO)
                      (begin
                        (g$seal-rib!$27057$1LXXoO g$rib$30745$1LXXoO)
                        (values
                          g$x$30750$1LXXoO
                          (g$rtc$30748$1LXXoO)))))
                   ((case-lambda
                      ((g$top-level-context$30759$1LXXoO
                         g$inv-collector$30760$1LXXoO
                         g$vis-collector$30761$1LXXoO
                         g$imp-collector$30762$1LXXoO
                         g$top-level-context$30763$1LXXoO
                         g$inv-collector$30764$1LXXoO
                         g$vis-collector$30765$1LXXoO
                         g$imp-collector$30766$1LXXoO)
                       ((case-lambda
                          ((g$swap$30767$1LXXoO)
                           (dynamic-wind
                             g$swap$30767$1LXXoO
                             (case-lambda
                               (()
                                (g$chi-expr$27609$1LXXoO
                                  g$x$30746$1LXXoO
                                  '()
                                  '())))
                             g$swap$30767$1LXXoO)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$30768$1LXXoO)
                                 (begin
                                   (g$top-level-context$30759$1LXXoO
                                     g$top-level-context$30763$1LXXoO)
                                   (set! g$top-level-context$30763$1LXXoO
                                     g$t$30768$1LXXoO))))
                              (g$top-level-context$30759$1LXXoO))
                             ((case-lambda
                                ((g$t$30769$1LXXoO)
                                 (begin
                                   (g$inv-collector$30760$1LXXoO
                                     g$inv-collector$30764$1LXXoO)
                                   (set! g$inv-collector$30764$1LXXoO
                                     g$t$30769$1LXXoO))))
                              (g$inv-collector$30760$1LXXoO))
                             ((case-lambda
                                ((g$t$30770$1LXXoO)
                                 (begin
                                   (g$vis-collector$30761$1LXXoO
                                     g$vis-collector$30765$1LXXoO)
                                   (set! g$vis-collector$30765$1LXXoO
                                     g$t$30770$1LXXoO))))
                              (g$vis-collector$30761$1LXXoO))
                             ((case-lambda
                                ((g$t$30771$1LXXoO)
                                 (begin
                                   (g$imp-collector$30762$1LXXoO
                                     g$imp-collector$30766$1LXXoO)
                                   (set! g$imp-collector$30766$1LXXoO
                                     g$t$30771$1LXXoO))))
                              (g$imp-collector$30762$1LXXoO))))))))
                    g$top-level-context$27718$1LXXoO
                    g$inv-collector$27646$1LXXoO
                    g$vis-collector$27647$1LXXoO
                    g$imp-collector$27648$1LXXoO
                    '#f
                    g$rtc$30748$1LXXoO
                    g$vtc$30749$1LXXoO
                    g$itc$30747$1LXXoO))))
               (g$make-stx$27066$1LXXoO
                 g$x$30743$1LXXoO
                 g$top-mark*$27026$1LXXoO
                 (list g$rib$30745$1LXXoO)
                 '())
               (g$env-itc$27664$1LXXoO g$env$30744$1LXXoO)
               (g$make-collector$27645$1LXXoO)
               (g$make-collector$27645$1LXXoO))))
           (g$make-top-rib$27644$1LXXoO
             (g$env-names$27662$1LXXoO g$env$30744$1LXXoO)
             (g$env-labels$27663$1LXXoO g$env$30744$1LXXoO)))
          (if (g$interaction-env?$27674$1LXXoO g$env$30744$1LXXoO)
            ((case-lambda
               ((g$rib$30772$1LXXoO g$r$30773$1LXXoO g$rtc$30774$1LXXoO)
                ((case-lambda
                   ((g$x$30775$1LXXoO)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$30786$1LXXoO
                               g$inv-collector$30787$1LXXoO
                               g$vis-collector$30788$1LXXoO
                               g$imp-collector$30789$1LXXoO
                               g$top-level-context$30790$1LXXoO
                               g$inv-collector$30791$1LXXoO
                               g$vis-collector$30792$1LXXoO
                               g$imp-collector$30793$1LXXoO)
                             ((case-lambda
                                ((g$swap$30794$1LXXoO)
                                 (dynamic-wind
                                   g$swap$30794$1LXXoO
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$27650$1LXXoO
                                        g$x$30775$1LXXoO
                                        g$rib$30772$1LXXoO
                                        g$r$30773$1LXXoO)))
                                   g$swap$30794$1LXXoO)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$30795$1LXXoO)
                                       (begin
                                         (g$top-level-context$30786$1LXXoO
                                           g$top-level-context$30790$1LXXoO)
                                         (set! g$top-level-context$30790$1LXXoO
                                           g$t$30795$1LXXoO))))
                                    (g$top-level-context$30786$1LXXoO))
                                   ((case-lambda
                                      ((g$t$30796$1LXXoO)
                                       (begin
                                         (g$inv-collector$30787$1LXXoO
                                           g$inv-collector$30791$1LXXoO)
                                         (set! g$inv-collector$30791$1LXXoO
                                           g$t$30796$1LXXoO))))
                                    (g$inv-collector$30787$1LXXoO))
                                   ((case-lambda
                                      ((g$t$30797$1LXXoO)
                                       (begin
                                         (g$vis-collector$30788$1LXXoO
                                           g$vis-collector$30792$1LXXoO)
                                         (set! g$vis-collector$30792$1LXXoO
                                           g$t$30797$1LXXoO))))
                                    (g$vis-collector$30788$1LXXoO))
                                   ((case-lambda
                                      ((g$t$30798$1LXXoO)
                                       (begin
                                         (g$imp-collector$30789$1LXXoO
                                           g$imp-collector$30793$1LXXoO)
                                         (set! g$imp-collector$30793$1LXXoO
                                           g$t$30798$1LXXoO))))
                                    (g$imp-collector$30789$1LXXoO))))))))
                          g$top-level-context$27718$1LXXoO
                          g$inv-collector$27646$1LXXoO
                          g$vis-collector$27647$1LXXoO
                          g$imp-collector$27648$1LXXoO
                          g$env$30744$1LXXoO
                          g$rtc$30774$1LXXoO
                          (g$make-collector$27645$1LXXoO)
                          (g$make-collector$27645$1LXXoO))))
                      (case-lambda
                        ((g$e$30799$1LXXoO g$r^$30800$1LXXoO)
                         ((case-lambda
                            ((g$r^$30801$1LXXoO g$e$30802$1LXXoO)
                             (begin
                               (g$set-interaction-env-r!$27680$1LXXoO
                                 g$env$30744$1LXXoO
                                 g$r^$30801$1LXXoO)
                               (values
                                 g$e$30802$1LXXoO
                                 (g$rtc$30774$1LXXoO)))))
                          g$r^$30800$1LXXoO
                          g$e$30799$1LXXoO))))))
                 (g$make-stx$27066$1LXXoO
                   g$x$30743$1LXXoO
                   g$top-mark*$27026$1LXXoO
                   (list g$rib$30772$1LXXoO)
                   '()))))
             (g$interaction-env-rib$27676$1LXXoO g$env$30744$1LXXoO)
             (g$interaction-env-r$27677$1LXXoO g$env$30744$1LXXoO)
             (g$make-collector$27645$1LXXoO))
            (begin
              '#f
              (assertion-violation
                'expand
                '"not an environment"
                g$env$30744$1LXXoO)))))))
   (g$eval$27692$1LXXoO
     g$eval$31282$1LXXoO
     (case-lambda
       ((g$x$30803$1LXXoO g$env$30804$1LXXoO)
        (begin
          (if (not (g$environment?$27686$1LXXoO g$env$30804$1LXXoO))
            (error 'eval '"not an environment" g$env$30804$1LXXoO)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$27691$1LXXoO
                 g$x$30803$1LXXoO
                 g$env$30804$1LXXoO)))
            (case-lambda
              ((g$x$30807$1LXXoO g$invoke-req*$30808$1LXXoO)
               ((case-lambda
                  ((g$invoke-req*$30809$1LXXoO g$x$30810$1LXXoO)
                   (begin
                     (g$for-each$19226$1LXXoO
                       g$invoke-library$26799$1LXXoO
                       g$invoke-req*$30809$1LXXoO)
                     (eval-core
                       (g$expanded->core$26531$1LXXoO
                         g$x$30810$1LXXoO)))))
                g$invoke-req*$30808$1LXXoO
                g$x$30807$1LXXoO))))))))
   (g$expand->core$27693$1LXXoO
     g$expand->core$31283$1LXXoO
     (case-lambda
       ((g$x$30811$1LXXoO g$env$30812$1LXXoO)
        (begin
          (if (not (g$environment?$27686$1LXXoO g$env$30812$1LXXoO))
            (error 'eval '"not an environment" g$env$30812$1LXXoO)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$27691$1LXXoO
                 g$x$30811$1LXXoO
                 g$env$30812$1LXXoO)))
            (case-lambda
              ((g$x$30815$1LXXoO g$invoke-req*$30816$1LXXoO)
               ((case-lambda
                  ((g$invoke-req*$30817$1LXXoO g$x$30818$1LXXoO)
                   (begin
                     (g$for-each$19226$1LXXoO
                       g$invoke-library$26799$1LXXoO
                       g$invoke-req*$30817$1LXXoO)
                     (g$expanded->core$26531$1LXXoO g$x$30818$1LXXoO))))
                g$invoke-req*$30816$1LXXoO
                g$x$30815$1LXXoO))))))))
   (g$library-expander$27694$1LXXoO
     g$library-expander$31284$1LXXoO
     (case-lambda
       ((g$x$30819$1LXXoO
          g$filename$30820$1LXXoO
          g$verify-name$30821$1LXXoO)
        (letrec* ((g$build-visit-code$30822$1LXXoO
                    (case-lambda
                      ((g$macro*$30865$1LXXoO)
                       (if (null? g$macro*$30865$1LXXoO)
                         (g$build-void$27019$1LXXoO)
                         (g$build-sequence$27018$1LXXoO
                           '#f
                           (g$map$19225$1LXXoO
                             (case-lambda
                               ((g$x$30866$1LXXoO)
                                ((case-lambda
                                   ((g$loc$30867$1LXXoO
                                      g$src$30868$1LXXoO)
                                    (list
                                      'set!
                                      g$loc$30867$1LXXoO
                                      g$src$30868$1LXXoO)))
                                 (car g$x$30866$1LXXoO)
                                 (g$cddr$20078$1LXXoO
                                   g$x$30866$1LXXoO))))
                             g$macro*$30865$1LXXoO))))))
                  (g$visit!$30823$1LXXoO
                    (case-lambda
                      ((g$macro*$30861$1LXXoO)
                       (g$for-each$19226$1LXXoO
                         (case-lambda
                           ((g$x$30862$1LXXoO)
                            ((case-lambda
                               ((g$loc$30863$1LXXoO g$proc$30864$1LXXoO)
                                (set-symbol-value!
                                  g$loc$30863$1LXXoO
                                  g$proc$30864$1LXXoO)))
                             (car g$x$30862$1LXXoO)
                             (g$cadr$20076$1LXXoO g$x$30862$1LXXoO))))
                         g$macro*$30861$1LXXoO)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$27652$1LXXoO
                 g$x$30819$1LXXoO
                 g$verify-name$30821$1LXXoO)))
            (case-lambda
              ((g$name$30833$1LXXoO
                 g$ver$30834$1LXXoO
                 g$imp*$30835$1LXXoO
                 g$inv*$30836$1LXXoO
                 g$vis*$30837$1LXXoO
                 g$invoke-code$30838$1LXXoO
                 g$macro*$30839$1LXXoO
                 g$export-subst$30840$1LXXoO
                 g$export-env$30841$1LXXoO)
               ((case-lambda
                  ((g$export-env$30842$1LXXoO
                     g$export-subst$30843$1LXXoO
                     g$macro*$30844$1LXXoO
                     g$invoke-code$30845$1LXXoO
                     g$vis*$30846$1LXXoO
                     g$inv*$30847$1LXXoO
                     g$imp*$30848$1LXXoO
                     g$ver$30849$1LXXoO
                     g$name$30850$1LXXoO)
                   ((case-lambda
                      ((g$id$30851$1LXXoO
                         g$name$30852$1LXXoO
                         g$ver$30853$1LXXoO
                         g$imp*$30854$1LXXoO
                         g$vis*$30855$1LXXoO
                         g$inv*$30856$1LXXoO
                         g$visit-proc$30857$1LXXoO
                         g$invoke-proc$30858$1LXXoO
                         g$visit-code$30859$1LXXoO
                         g$invoke-code$30860$1LXXoO)
                       (begin
                         (g$install-library$26797$1LXXoO
                           g$id$30851$1LXXoO
                           g$name$30852$1LXXoO
                           g$ver$30853$1LXXoO
                           g$imp*$30854$1LXXoO
                           g$vis*$30855$1LXXoO
                           g$inv*$30856$1LXXoO
                           g$export-subst$30843$1LXXoO
                           g$export-env$30842$1LXXoO
                           g$visit-proc$30857$1LXXoO
                           g$invoke-proc$30858$1LXXoO
                           g$visit-code$30859$1LXXoO
                           g$invoke-code$30860$1LXXoO
                           '#t
                           g$filename$30820$1LXXoO)
                         (values
                           g$id$30851$1LXXoO
                           g$name$30852$1LXXoO
                           g$ver$30853$1LXXoO
                           g$imp*$30854$1LXXoO
                           g$vis*$30855$1LXXoO
                           g$inv*$30856$1LXXoO
                           g$invoke-code$30860$1LXXoO
                           g$visit-code$30859$1LXXoO
                           g$export-subst$30843$1LXXoO
                           g$export-env$30842$1LXXoO))))
                    (gensym)
                    g$name$30850$1LXXoO
                    g$ver$30849$1LXXoO
                    (g$map$19225$1LXXoO
                      g$library-spec$26803$1LXXoO
                      g$imp*$30848$1LXXoO)
                    (g$map$19225$1LXXoO
                      g$library-spec$26803$1LXXoO
                      g$vis*$30846$1LXXoO)
                    (g$map$19225$1LXXoO
                      g$library-spec$26803$1LXXoO
                      g$inv*$30847$1LXXoO)
                    (case-lambda
                      (()
                       (g$visit!$30823$1LXXoO g$macro*$30844$1LXXoO)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$26531$1LXXoO
                           g$invoke-code$30845$1LXXoO))))
                    (g$build-visit-code$30822$1LXXoO
                      g$macro*$30844$1LXXoO)
                    g$invoke-code$30845$1LXXoO)))
                g$export-env$30841$1LXXoO
                g$export-subst$30840$1LXXoO
                g$macro*$30839$1LXXoO
                g$invoke-code$30838$1LXXoO
                g$vis*$30837$1LXXoO
                g$inv*$30836$1LXXoO
                g$imp*$30835$1LXXoO
                g$ver$30834$1LXXoO
                g$name$30833$1LXXoO))))))
       ((g$x$30869$1LXXoO g$filename$30870$1LXXoO)
        (g$library-expander$27694$1LXXoO
          g$x$30869$1LXXoO
          g$filename$30870$1LXXoO
          (case-lambda ((g$x$30871$1LXXoO) (values)))))
       ((g$x$30872$1LXXoO)
        (g$library-expander$27694$1LXXoO
          g$x$30872$1LXXoO
          '#f
          (case-lambda ((g$x$30873$1LXXoO) (values)))))))
   (g$boot-library-expand$27695$1LXXoO
     g$boot-library-expand$31285$1LXXoO
     (case-lambda
       ((g$x$30874$1LXXoO)
        (call-with-values
          (case-lambda
            (() (g$library-expander$27694$1LXXoO g$x$30874$1LXXoO)))
          (case-lambda
            ((g$id$30885$1LXXoO
               g$name$30886$1LXXoO
               g$ver$30887$1LXXoO
               g$imp*$30888$1LXXoO
               g$vis*$30889$1LXXoO
               g$inv*$30890$1LXXoO
               g$invoke-code$30891$1LXXoO
               g$visit-code$30892$1LXXoO
               g$export-subst$30893$1LXXoO
               g$export-env$30894$1LXXoO)
             ((case-lambda
                ((g$export-env$30895$1LXXoO
                   g$export-subst$30896$1LXXoO
                   g$visit-code$30897$1LXXoO
                   g$invoke-code$30898$1LXXoO
                   g$inv*$30899$1LXXoO
                   g$vis*$30900$1LXXoO
                   g$imp*$30901$1LXXoO
                   g$ver$30902$1LXXoO
                   g$name$30903$1LXXoO
                   g$id$30904$1LXXoO)
                 (values
                   g$name$30903$1LXXoO
                   g$invoke-code$30898$1LXXoO
                   g$export-subst$30896$1LXXoO
                   g$export-env$30895$1LXXoO)))
              g$export-env$30894$1LXXoO
              g$export-subst$30893$1LXXoO
              g$visit-code$30892$1LXXoO
              g$invoke-code$30891$1LXXoO
              g$inv*$30890$1LXXoO
              g$vis*$30889$1LXXoO
              g$imp*$30888$1LXXoO
              g$ver$30887$1LXXoO
              g$name$30886$1LXXoO
              g$id$30885$1LXXoO)))))))
   (g$rev-map-append$27696$1LXXoO
     g$rev-map-append$31286$1LXXoO
     (case-lambda
       ((g$f$30905$1LXXoO g$ls$30906$1LXXoO g$ac$30907$1LXXoO)
        (if (null? g$ls$30906$1LXXoO)
          g$ac$30907$1LXXoO
          (begin
            '#f
            (g$rev-map-append$27696$1LXXoO
              g$f$30905$1LXXoO
              (cdr g$ls$30906$1LXXoO)
              (cons
                (g$f$30905$1LXXoO (car g$ls$30906$1LXXoO))
                g$ac$30907$1LXXoO)))))))
   (g$build-exports$27697$1LXXoO
     g$build-exports$31287$1LXXoO
     (case-lambda
       ((g$lex*+loc*$30908$1LXXoO g$init*$30909$1LXXoO)
        (g$build-sequence$27018$1LXXoO
          '#f
          (cons
            (g$build-void$27019$1LXXoO)
            (g$rev-map-append$27696$1LXXoO
              (case-lambda
                ((g$x$30910$1LXXoO)
                 (list
                   'set!
                   (cdr g$x$30910$1LXXoO)
                   (car g$x$30910$1LXXoO))))
              g$lex*+loc*$30908$1LXXoO
              g$init*$30909$1LXXoO))))))
   (g$make-export-subst$27698$1LXXoO
     g$make-export-subst$31288$1LXXoO
     (case-lambda
       ((g$name*$30911$1LXXoO g$id*$30912$1LXXoO)
        (g$map$19225$1LXXoO
          (case-lambda
            ((g$name$30913$1LXXoO g$id$30914$1LXXoO)
             ((case-lambda
                ((g$label$30915$1LXXoO)
                 (begin
                   (if (not g$label$30915$1LXXoO)
                     (g$syntax-violation$27710$1LXXoO
                       '#f
                       '"cannot export unbound identifier"
                       g$id$30914$1LXXoO)
                     (void))
                   (cons g$name$30913$1LXXoO g$label$30915$1LXXoO))))
              (g$id->label$27106$1LXXoO g$id$30914$1LXXoO))))
          g$name*$30911$1LXXoO
          g$id*$30912$1LXXoO))))
   (g$make-export-env/macros$27699$1LXXoO
     g$make-export-env/macros$31289$1LXXoO
     (case-lambda
       ((g$lex*$30916$1LXXoO g$loc*$30917$1LXXoO g$r$30918$1LXXoO)
        (letrec* ((g$lookup$30919$1LXXoO
                    (case-lambda
                      ((g$x$30935$1LXXoO)
                       ((letrec ((g$f$30936$1LXXoO
                                   (case-lambda
                                     ((g$x$30937$1LXXoO
                                        g$lex*$30938$1LXXoO
                                        g$loc*$30939$1LXXoO)
                                      (if (pair? g$lex*$30938$1LXXoO)
                                        (if (eq? g$x$30937$1LXXoO
                                                 (car g$lex*$30938$1LXXoO))
                                          (car g$loc*$30939$1LXXoO)
                                          (g$f$30936$1LXXoO
                                            g$x$30937$1LXXoO
                                            (cdr g$lex*$30938$1LXXoO)
                                            (cdr g$loc*$30939$1LXXoO)))
                                        (begin
                                          '#f
                                          (assertion-violation
                                            'lookup-make-export
                                            '"BUG")))))))
                          g$f$30936$1LXXoO)
                        g$x$30935$1LXXoO
                        g$lex*$30916$1LXXoO
                        g$loc*$30917$1LXXoO)))))
          ((letrec ((g$f$30920$1LXXoO
                      (case-lambda
                        ((g$r$30921$1LXXoO
                           g$env$30922$1LXXoO
                           g$global*$30923$1LXXoO
                           g$macro*$30924$1LXXoO)
                         (if (null? g$r$30921$1LXXoO)
                           (values
                             g$env$30922$1LXXoO
                             g$global*$30923$1LXXoO
                             g$macro*$30924$1LXXoO)
                           (begin
                             '#f
                             ((case-lambda
                                ((g$x$30925$1LXXoO)
                                 ((case-lambda
                                    ((g$label$30926$1LXXoO
                                       g$b$30927$1LXXoO)
                                     ((case-lambda
                                        ((g$t$30928$1LXXoO)
                                         (if (eqv?
                                               g$t$30928$1LXXoO
                                               'lexical)
                                           ((case-lambda
                                              ((g$v$30929$1LXXoO)
                                               ((case-lambda
                                                  ((g$loc$30930$1LXXoO
                                                     g$type$30931$1LXXoO)
                                                   (g$f$30920$1LXXoO
                                                     (cdr g$r$30921$1LXXoO)
                                                     (cons
                                                       (g$cons*$19227$1LXXoO
                                                         g$label$30926$1LXXoO
                                                         g$type$30931$1LXXoO
                                                         g$loc$30930$1LXXoO)
                                                       g$env$30922$1LXXoO)
                                                     (cons
                                                       (cons
                                                         (g$lexical-var$27535$1LXXoO
                                                           g$v$30929$1LXXoO)
                                                         g$loc$30930$1LXXoO)
                                                       g$global*$30923$1LXXoO)
                                                     g$macro*$30924$1LXXoO)))
                                                (g$lookup$30919$1LXXoO
                                                  (g$lexical-var$27535$1LXXoO
                                                    g$v$30929$1LXXoO))
                                                (if (g$lexical-mutable?$27536$1LXXoO
                                                      g$v$30929$1LXXoO)
                                                  'mutable
                                                  'global))))
                                            (g$binding-value$27111$1LXXoO
                                              g$b$30927$1LXXoO))
                                           (if (eqv?
                                                 g$t$30928$1LXXoO
                                                 'local-macro)
                                             ((case-lambda
                                                ((g$loc$30932$1LXXoO)
                                                 (g$f$30920$1LXXoO
                                                   (cdr g$r$30921$1LXXoO)
                                                   (cons
                                                     (g$cons*$19227$1LXXoO
                                                       g$label$30926$1LXXoO
                                                       'global-macro
                                                       g$loc$30932$1LXXoO)
                                                     g$env$30922$1LXXoO)
                                                   g$global*$30923$1LXXoO
                                                   (cons
                                                     (cons
                                                       g$loc$30932$1LXXoO
                                                       (g$binding-value$27111$1LXXoO
                                                         g$b$30927$1LXXoO))
                                                     g$macro*$30924$1LXXoO))))
                                              (gensym))
                                             (if (eqv?
                                                   g$t$30928$1LXXoO
                                                   'local-macro!)
                                               ((case-lambda
                                                  ((g$loc$30933$1LXXoO)
                                                   (g$f$30920$1LXXoO
                                                     (cdr g$r$30921$1LXXoO)
                                                     (cons
                                                       (g$cons*$19227$1LXXoO
                                                         g$label$30926$1LXXoO
                                                         'global-macro!
                                                         g$loc$30933$1LXXoO)
                                                       g$env$30922$1LXXoO)
                                                     g$global*$30923$1LXXoO
                                                     (cons
                                                       (cons
                                                         g$loc$30933$1LXXoO
                                                         (g$binding-value$27111$1LXXoO
                                                           g$b$30927$1LXXoO))
                                                       g$macro*$30924$1LXXoO))))
                                                (gensym))
                                               (if (eqv?
                                                     g$t$30928$1LXXoO
                                                     'local-ctv)
                                                 ((case-lambda
                                                    ((g$loc$30934$1LXXoO)
                                                     (g$f$30920$1LXXoO
                                                       (cdr g$r$30921$1LXXoO)
                                                       (cons
                                                         (g$cons*$19227$1LXXoO
                                                           g$label$30926$1LXXoO
                                                           'global-ctv
                                                           g$loc$30934$1LXXoO)
                                                         g$env$30922$1LXXoO)
                                                       g$global*$30923$1LXXoO
                                                       (cons
                                                         (cons
                                                           g$loc$30934$1LXXoO
                                                           (g$binding-value$27111$1LXXoO
                                                             g$b$30927$1LXXoO))
                                                         g$macro*$30924$1LXXoO))))
                                                  (gensym))
                                                 (if (g$memv$19218$1LXXoO
                                                       g$t$30928$1LXXoO
                                                       '($rtd $module))
                                                   (g$f$30920$1LXXoO
                                                     (cdr g$r$30921$1LXXoO)
                                                     (cons
                                                       g$x$30925$1LXXoO
                                                       g$env$30922$1LXXoO)
                                                     g$global*$30923$1LXXoO
                                                     g$macro*$30924$1LXXoO)
                                                   (begin
                                                     '#f
                                                     (assertion-violation
                                                       'expander
                                                       '"BUG: do not know how to export"
                                                       (g$binding-type$27110$1LXXoO
                                                         g$b$30927$1LXXoO)
                                                       (g$binding-value$27111$1LXXoO
                                                         g$b$30927$1LXXoO))))))))))
                                      (g$binding-type$27110$1LXXoO
                                        g$b$30927$1LXXoO))))
                                  (car g$x$30925$1LXXoO)
                                  (cdr g$x$30925$1LXXoO))))
                              (car g$r$30921$1LXXoO))))))))
             g$f$30920$1LXXoO)
           g$r$30918$1LXXoO
           '()
           '()
           '())))))
   (g$generate-temporaries$27700$1LXXoO
     g$generate-temporaries$31290$1LXXoO
     (case-lambda
       ((g$ls$30940$1LXXoO)
        ((case-lambda
           ((g$t$30941$1LXXoO)
            ((case-lambda
               ((g$ls/false$30942$1LXXoO)
                (if g$ls/false$30942$1LXXoO
                  (apply
                    (case-lambda
                      ((g$ls$30943$1LXXoO)
                       (g$map$19225$1LXXoO
                         (case-lambda
                           ((g$x$30944$1LXXoO)
                            (g$make-stx$27066$1LXXoO
                              ((case-lambda
                                 ((g$x$30945$1LXXoO)
                                  (if ((case-lambda
                                         ((g$t$30946$1LXXoO)
                                          (if g$t$30946$1LXXoO
                                            g$t$30946$1LXXoO
                                            (begin
                                              '#f
                                              (string?
                                                g$x$30945$1LXXoO)))))
                                       (g$symbol?$20057$1LXXoO
                                         g$x$30945$1LXXoO))
                                    (gensym g$x$30945$1LXXoO)
                                    (begin '#f (gensym 't)))))
                               (g$syntax->datum$27713$1LXXoO
                                 g$x$30944$1LXXoO))
                              g$top-mark*$27026$1LXXoO
                              '()
                              '())))
                         g$ls$30943$1LXXoO)))
                    g$ls/false$30942$1LXXoO)
                  ((case-lambda
                     ((g$t$30947$1LXXoO)
                      ((case-lambda
                         ((g$ls/false$30948$1LXXoO)
                          (if g$ls/false$30948$1LXXoO
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$30948$1LXXoO)
                            (g$syntax-violation$27710$1LXXoO
                              '#f
                              '"invalid syntax"
                              g$t$30947$1LXXoO))))
                       (g$syntax-dispatch$27591$1LXXoO
                         g$t$30947$1LXXoO
                         '_))))
                   g$t$30941$1LXXoO))))
             (g$syntax-dispatch$27591$1LXXoO
               g$t$30941$1LXXoO
               'each-any))))
         g$ls$30940$1LXXoO))))
   (g$free-identifier=?$27701$1LXXoO
     g$free-identifier=?$31291$1LXXoO
     (case-lambda
       ((g$x$30949$1LXXoO g$y$30950$1LXXoO)
        (if (g$id?$27093$1LXXoO g$x$30949$1LXXoO)
          (if (g$id?$27093$1LXXoO g$y$30950$1LXXoO)
            (g$free-id=?$27097$1LXXoO g$x$30949$1LXXoO g$y$30950$1LXXoO)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$30950$1LXXoO))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$30949$1LXXoO)))))
   (g$bound-identifier=?$27702$1LXXoO
     g$bound-identifier=?$31292$1LXXoO
     (case-lambda
       ((g$x$30951$1LXXoO g$y$30952$1LXXoO)
        (if (g$id?$27093$1LXXoO g$x$30951$1LXXoO)
          (if (g$id?$27093$1LXXoO g$y$30952$1LXXoO)
            (g$bound-id=?$27096$1LXXoO
              g$x$30951$1LXXoO
              g$y$30952$1LXXoO)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$30952$1LXXoO))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$30951$1LXXoO)))))
   (g$make-source-condition$27703$1LXXoO
     g$make-source-condition$31293$1LXXoO
     (case-lambda
       ((g$x$30953$1LXXoO)
        (letrec* ((g$12832$30954$1LXXoO
                    (make-record-type-descriptor
                      '&source-information
                      g$&condition-rtd$21158$1LXXoO
                      'g$12835$1LXXoO
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$12834$30955$1LXXoO '#f)
                  (g$12833$30956$1LXXoO
                    (make-record-constructor-descriptor
                      g$12832$30954$1LXXoO
                      g$&condition-rcd$21159$1LXXoO
                      g$12834$30955$1LXXoO))
                  (g$12831$30959$1LXXoO
                    (record-predicate g$12832$30954$1LXXoO))
                  (g$make-source-condition$30960$1LXXoO
                    (record-constructor g$12833$30956$1LXXoO))
                  (g$12829$30961$1LXXoO
                    (record-accessor g$12832$30954$1LXXoO '0))
                  (g$12830$30962$1LXXoO
                    (record-accessor g$12832$30954$1LXXoO '1))
                  (g$source-condition?$30963$1LXXoO
                    (condition-predicate g$12832$30954$1LXXoO))
                  (g$source-filename$30964$1LXXoO
                    (condition-accessor
                      g$12832$30954$1LXXoO
                      g$12829$30961$1LXXoO))
                  (g$source-character$30965$1LXXoO
                    (condition-accessor
                      g$12832$30954$1LXXoO
                      g$12830$30962$1LXXoO)))
          (if (pair? g$x$30953$1LXXoO)
            (g$make-source-condition$30960$1LXXoO
              (car g$x$30953$1LXXoO)
              (cdr g$x$30953$1LXXoO))
            (condition))))))
   (g$extract-position-condition$27704$1LXXoO
     g$extract-position-condition$31294$1LXXoO
     (case-lambda
       ((g$x$30966$1LXXoO)
        (g$make-source-condition$27703$1LXXoO
          (g$expression-position$27705$1LXXoO g$x$30966$1LXXoO)))))
   (g$expression-position$27705$1LXXoO
     g$expression-position$31295$1LXXoO
     (case-lambda
       ((g$x$30967$1LXXoO)
        (if (g$stx?$27065$1LXXoO g$x$30967$1LXXoO)
          (begin
            '#f
            ((case-lambda
               ((g$x$30968$1LXXoO)
                (if (annotation? g$x$30968$1LXXoO)
                  (begin '#f (annotation-source g$x$30968$1LXXoO))
                  '#f)))
             (g$stx-expr$27067$1LXXoO g$x$30967$1LXXoO)))
          '#f))))
   (g$assertion-error$27706$1LXXoO
     g$assertion-error$31296$1LXXoO
     (case-lambda
       ((g$expr$30969$1LXXoO g$pos$30970$1LXXoO)
        (raise
          (condition
            (g$make-assertion-violation$21206$1LXXoO)
            (g$make-who-condition$21224$1LXXoO 'assert)
            (g$make-message-condition$21164$1LXXoO '"assertion failed")
            (g$make-irritants-condition$21214$1LXXoO
              (list g$expr$30969$1LXXoO))
            (g$make-source-condition$27703$1LXXoO
              g$pos$30970$1LXXoO))))))
   (g$syntax-error$27707$1LXXoO
     g$syntax-error$31297$1LXXoO
     (case-lambda
       ((g$x$30971$1LXXoO . g$args$30972$1LXXoO)
        (begin
          (if (not (g$for-all$19223$1LXXoO string? g$args$30972$1LXXoO))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$30972$1LXXoO)
            (void))
          (raise
            (condition
              (g$make-message-condition$21164$1LXXoO
                (if (null? g$args$30972$1LXXoO)
                  '"invalid syntax"
                  (apply string-append g$args$30972$1LXXoO)))
              (g$make-syntax-violation$21258$1LXXoO
                (g$syntax->datum$27713$1LXXoO g$x$30971$1LXXoO)
                '#f)
              (g$extract-position-condition$27704$1LXXoO
                g$x$30971$1LXXoO)
              (g$extract-trace$27708$1LXXoO g$x$30971$1LXXoO)))))))
   (g$extract-trace$27708$1LXXoO
     g$extract-trace$31298$1LXXoO
     (case-lambda
       ((g$x$30973$1LXXoO)
        (letrec* ((g$12857$30974$1LXXoO
                    (make-record-type-descriptor
                      '&trace
                      g$&condition-rtd$21158$1LXXoO
                      'g$12860$1LXXoO
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$12859$30975$1LXXoO '#f)
                  (g$12858$30976$1LXXoO
                    (make-record-constructor-descriptor
                      g$12857$30974$1LXXoO
                      g$&condition-rcd$21159$1LXXoO
                      g$12859$30975$1LXXoO))
                  (g$12856$30979$1LXXoO
                    (record-predicate g$12857$30974$1LXXoO))
                  (g$make-trace$30980$1LXXoO
                    (record-constructor g$12858$30976$1LXXoO))
                  (g$12855$30981$1LXXoO
                    (record-accessor g$12857$30974$1LXXoO '0))
                  (g$trace?$30982$1LXXoO
                    (condition-predicate g$12857$30974$1LXXoO))
                  (g$trace-form$30983$1LXXoO
                    (condition-accessor
                      g$12857$30974$1LXXoO
                      g$12855$30981$1LXXoO)))
          ((letrec ((g$f$30984$1LXXoO
                      (case-lambda
                        ((g$x$30985$1LXXoO)
                         (if (g$stx?$27065$1LXXoO g$x$30985$1LXXoO)
                           (apply
                             condition
                             (g$make-trace$30980$1LXXoO
                               g$x$30985$1LXXoO)
                             (g$map$19225$1LXXoO
                               g$f$30984$1LXXoO
                               (g$stx-ae*$27070$1LXXoO
                                 g$x$30985$1LXXoO)))
                           (if (annotation? g$x$30985$1LXXoO)
                             (g$make-trace$30980$1LXXoO
                               (g$make-stx$27066$1LXXoO
                                 g$x$30985$1LXXoO
                                 '()
                                 '()
                                 '()))
                             (begin '#f (condition))))))))
             g$f$30984$1LXXoO)
           g$x$30973$1LXXoO)))))
   (g$syntax-violation*$27709$1LXXoO
     g$syntax-violation*$31299$1LXXoO
     (case-lambda
       ((g$who$30986$1LXXoO
          g$msg$30987$1LXXoO
          g$form$30988$1LXXoO
          g$condition-object$30989$1LXXoO)
        (begin
          (if (not (string? g$msg$30987$1LXXoO))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$30987$1LXXoO)
            (void))
          ((case-lambda
             ((g$who$30990$1LXXoO)
              (raise
                (condition
                  (if g$who$30990$1LXXoO
                    (g$make-who-condition$21224$1LXXoO
                      g$who$30990$1LXXoO)
                    (condition))
                  (g$make-message-condition$21164$1LXXoO
                    g$msg$30987$1LXXoO)
                  g$condition-object$30989$1LXXoO
                  (g$extract-position-condition$27704$1LXXoO
                    g$form$30988$1LXXoO)
                  (g$extract-trace$27708$1LXXoO g$form$30988$1LXXoO)))))
           (if ((case-lambda
                  ((g$t$30991$1LXXoO)
                   (if g$t$30991$1LXXoO
                     g$t$30991$1LXXoO
                     (begin
                       '#f
                       (g$symbol?$20057$1LXXoO g$who$30986$1LXXoO)))))
                (string? g$who$30986$1LXXoO))
             g$who$30986$1LXXoO
             (if (not g$who$30986$1LXXoO)
               ((case-lambda
                  ((g$t$30992$1LXXoO)
                   ((case-lambda
                      ((g$ls/false$30993$1LXXoO)
                       (if (if g$ls/false$30993$1LXXoO
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$30994$1LXXoO)
                                    (g$id?$27093$1LXXoO
                                      g$id$30994$1LXXoO)))
                                 g$ls/false$30993$1LXXoO))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$30995$1LXXoO)
                              (g$syntax->datum$27713$1LXXoO
                                g$id$30995$1LXXoO)))
                           g$ls/false$30993$1LXXoO)
                         ((case-lambda
                            ((g$t$30996$1LXXoO)
                             ((case-lambda
                                ((g$ls/false$30997$1LXXoO)
                                 (if (if g$ls/false$30997$1LXXoO
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$30998$1LXXoO
                                                g$rest$30999$1LXXoO)
                                              (g$id?$27093$1LXXoO
                                                g$id$30998$1LXXoO)))
                                           g$ls/false$30997$1LXXoO))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$31000$1LXXoO
                                          g$rest$31001$1LXXoO)
                                        (g$syntax->datum$27713$1LXXoO
                                          g$id$31000$1LXXoO)))
                                     g$ls/false$30997$1LXXoO)
                                   ((case-lambda
                                      ((g$t$31002$1LXXoO)
                                       ((case-lambda
                                          ((g$ls/false$31003$1LXXoO)
                                           (if g$ls/false$31003$1LXXoO
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$31003$1LXXoO)
                                             (g$syntax-violation$27710$1LXXoO
                                               '#f
                                               '"invalid syntax"
                                               g$t$31002$1LXXoO))))
                                        (g$syntax-dispatch$27591$1LXXoO
                                          g$t$31002$1LXXoO
                                          '_))))
                                    g$t$30996$1LXXoO))))
                              (g$syntax-dispatch$27591$1LXXoO
                                g$t$30996$1LXXoO
                                '(any . any)))))
                          g$t$30992$1LXXoO))))
                    (g$syntax-dispatch$27591$1LXXoO
                      g$t$30992$1LXXoO
                      'any))))
                g$form$30988$1LXXoO)
               (begin
                 '#f
                 (assertion-violation
                   'syntax-violation
                   '"invalid who argument"
                   g$who$30986$1LXXoO)))))))))
   (g$syntax-violation$27710$1LXXoO
     g$syntax-violation$31300$1LXXoO
     (case-lambda
       ((g$who$31004$1LXXoO g$msg$31005$1LXXoO g$form$31006$1LXXoO)
        (g$syntax-violation$27710$1LXXoO
          g$who$31004$1LXXoO
          g$msg$31005$1LXXoO
          g$form$31006$1LXXoO
          '#f))
       ((g$who$31007$1LXXoO
          g$msg$31008$1LXXoO
          g$form$31009$1LXXoO
          g$subform$31010$1LXXoO)
        (g$syntax-violation*$27709$1LXXoO
          g$who$31007$1LXXoO
          g$msg$31008$1LXXoO
          g$form$31009$1LXXoO
          (g$make-syntax-violation$21258$1LXXoO
            (g$syntax->datum$27713$1LXXoO g$form$31009$1LXXoO)
            (g$syntax->datum$27713$1LXXoO g$subform$31010$1LXXoO))))))
   (g$identifier?$27711$1LXXoO
     g$identifier?$31301$1LXXoO
     (case-lambda
       ((g$x$31011$1LXXoO) (g$id?$27093$1LXXoO g$x$31011$1LXXoO))))
   (g$datum->syntax$27712$1LXXoO
     g$datum->syntax$31302$1LXXoO
     (case-lambda
       ((g$id$31012$1LXXoO g$datum$31013$1LXXoO)
        (if (g$id?$27093$1LXXoO g$id$31012$1LXXoO)
          (g$datum->stx$27076$1LXXoO
            g$id$31012$1LXXoO
            g$datum$31013$1LXXoO)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$31012$1LXXoO)))))
   (g$syntax->datum$27713$1LXXoO
     g$syntax->datum$31303$1LXXoO
     (case-lambda
       ((g$x$31014$1LXXoO)
        (g$stx->datum$27104$1LXXoO g$x$31014$1LXXoO))))
   (g$compile-r6rs-top-level$27714$1LXXoO
     g$compile-r6rs-top-level$31304$1LXXoO
     (case-lambda
       ((g$x*$31015$1LXXoO)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$27654$1LXXoO g$x*$31015$1LXXoO)))
          (case-lambda
            ((g$lib*$31018$1LXXoO g$invoke-code$31019$1LXXoO)
             ((case-lambda
                ((g$invoke-code$31020$1LXXoO g$lib*$31021$1LXXoO)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$19226$1LXXoO
                        g$invoke-library$26799$1LXXoO
                        g$lib*$31021$1LXXoO)
                      (eval-core
                        (g$expanded->core$26531$1LXXoO
                          g$invoke-code$31020$1LXXoO)))))))
              g$invoke-code$31019$1LXXoO
              g$lib*$31018$1LXXoO)))))))
   (g$pre-compile-r6rs-top-level$27715$1LXXoO
     g$pre-compile-r6rs-top-level$31305$1LXXoO
     (case-lambda
       ((g$x*$31022$1LXXoO)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$27654$1LXXoO g$x*$31022$1LXXoO)))
          (case-lambda
            ((g$lib*$31025$1LXXoO g$invoke-code$31026$1LXXoO)
             ((case-lambda
                ((g$invoke-code$31027$1LXXoO g$lib*$31028$1LXXoO)
                 (begin
                   (g$for-each$19226$1LXXoO
                     g$invoke-library$26799$1LXXoO
                     g$lib*$31028$1LXXoO)
                   (compile-core
                     (g$expanded->core$26531$1LXXoO
                       g$invoke-code$31027$1LXXoO)))))
              g$invoke-code$31026$1LXXoO
              g$lib*$31025$1LXXoO)))))))
   (g$new-interaction-environment$27716$1LXXoO
     g$new-interaction-environment$31306$1LXXoO
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$31029$1LXXoO g$rib$31030$1LXXoO)
            (begin
              ((case-lambda
                 ((g$subst$31031$1LXXoO)
                  (begin
                    (g$set-rib-sym*!$27046$1LXXoO
                      g$rib$31030$1LXXoO
                      (g$map$19225$1LXXoO car g$subst$31031$1LXXoO))
                    (g$set-rib-mark**!$27047$1LXXoO
                      g$rib$31030$1LXXoO
                      (g$map$19225$1LXXoO
                        (case-lambda
                          ((g$x$31032$1LXXoO) g$top-mark*$27026$1LXXoO))
                        g$subst$31031$1LXXoO))
                    (g$set-rib-label*!$27048$1LXXoO
                      g$rib$31030$1LXXoO
                      (g$map$19225$1LXXoO cdr g$subst$31031$1LXXoO)))))
               (g$library-subst$26756$1LXXoO g$lib$31029$1LXXoO))
              (g$make-interaction-env$27675$1LXXoO
                g$rib$31030$1LXXoO
                '()
                '()))))
         (g$find-library-by-name$26792$1LXXoO '(ironscheme))
         (g$make-empty-rib$27051$1LXXoO)))))
   (g$interaction-environment$27717$1LXXoO
     g$interaction-environment$31307$1LXXoO
     ((case-lambda
        ((g$e$31033$1LXXoO)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$31034$1LXXoO)
                (if g$t$31034$1LXXoO
                  g$t$31034$1LXXoO
                  (begin
                    '#f
                    (begin
                      (set! g$e$31033$1LXXoO
                        (g$new-interaction-environment$27716$1LXXoO))
                      g$e$31033$1LXXoO)))))
             g$e$31033$1LXXoO)))))
      '#f))
   (g$top-level-context$27718$1LXXoO
     g$top-level-context$31308$1LXXoO
     (g$make-parameter$25954$1LXXoO '#f)))
  (g$current-library-expander$26789$1LXXoO
    g$library-expander$27694$1LXXoO))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$26528$1LXXoO
      (case-lambda
        ((g$x$31389$1LXXoO)
         ((case-lambda
            ((g$t$31390$1LXXoO)
             (if g$t$31390$1LXXoO
               (cdr g$t$31390$1LXXoO)
               (begin '#f '#f))))
          (g$assq$19213$1LXXoO
            g$x$31389$1LXXoO
            '((ellipsis-map . g$ellipsis-map$31192$1LXXoO)
              (&no-nans-rcd . g$&no-nans-rcd$21393$1LXXoO)
              (&no-nans-rtd . g$&no-nans-rtd$21392$1LXXoO)
              (&no-infinities-rcd . g$&no-infinities-rcd$21385$1LXXoO)
              (&no-infinities-rtd . g$&no-infinities-rtd$21384$1LXXoO)
              (&i/o-encoding-rcd . g$&i/o-encoding-rcd$21377$1LXXoO)
              (&i/o-encoding-rtd . g$&i/o-encoding-rtd$21376$1LXXoO)
              (&i/o-decoding-rcd . g$&i/o-decoding-rcd$21367$1LXXoO)
              (&i/o-decoding-rtd . g$&i/o-decoding-rtd$21366$1LXXoO)
              (&i/o-port-rcd . g$&i/o-port-rcd$21359$1LXXoO)
              (&i/o-port-rtd . g$&i/o-port-rtd$21358$1LXXoO)
              (&i/o-file-does-not-exist-rcd
                .
                g$&i/o-file-does-not-exist-rcd$21349$1LXXoO)
              (&i/o-file-does-not-exist-rtd
                .
                g$&i/o-file-does-not-exist-rtd$21348$1LXXoO)
              (&i/o-file-already-exists-rcd
                .
                g$&i/o-file-already-exists-rcd$21341$1LXXoO)
              (&i/o-file-already-exists-rtd
                .
                g$&i/o-file-already-exists-rtd$21340$1LXXoO)
              (&i/o-file-is-read-only-rcd
                .
                g$&i/o-file-is-read-only-rcd$21333$1LXXoO)
              (&i/o-file-is-read-only-rtd
                .
                g$&i/o-file-is-read-only-rtd$21332$1LXXoO)
              (&i/o-file-protection-rcd
                .
                g$&i/o-file-protection-rcd$21325$1LXXoO)
              (&i/o-file-protection-rtd
                .
                g$&i/o-file-protection-rtd$21324$1LXXoO)
              (&i/o-filename-rcd . g$&i/o-filename-rcd$21317$1LXXoO)
              (&i/o-filename-rtd . g$&i/o-filename-rtd$21316$1LXXoO)
              (&i/o-invalid-position-rcd
                .
                g$&i/o-invalid-position-rcd$21307$1LXXoO)
              (&i/o-invalid-position-rtd
                .
                g$&i/o-invalid-position-rtd$21306$1LXXoO)
              (&i/o-write-rcd . g$&i/o-write-rcd$21297$1LXXoO)
              (&i/o-write-rtd . g$&i/o-write-rtd$21296$1LXXoO)
              (&i/o-read-rcd . g$&i/o-read-rcd$21289$1LXXoO)
              (&i/o-read-rtd . g$&i/o-read-rtd$21288$1LXXoO)
              (&i/o-rcd . g$&i/o-rcd$21281$1LXXoO)
              (&i/o-rtd . g$&i/o-rtd$21280$1LXXoO)
              (&undefined-rcd . g$&undefined-rcd$21273$1LXXoO)
              (&undefined-rtd . g$&undefined-rtd$21272$1LXXoO)
              (&syntax-rcd . g$&syntax-rcd$21265$1LXXoO)
              (&syntax-rtd . g$&syntax-rtd$21264$1LXXoO)
              (&lexical-rcd . g$&lexical-rcd$21253$1LXXoO)
              (&lexical-rtd . g$&lexical-rtd$21252$1LXXoO)
              (&implementation-restriction-rcd
                .
                g$&implementation-restriction-rcd$21245$1LXXoO)
              (&implementation-restriction-rtd
                .
                g$&implementation-restriction-rtd$21244$1LXXoO)
              (&non-continuable-rcd
                .
                g$&non-continuable-rcd$21237$1LXXoO)
              (&non-continuable-rtd
                .
                g$&non-continuable-rtd$21236$1LXXoO)
              (&who-rcd . g$&who-rcd$21229$1LXXoO)
              (&who-rtd . g$&who-rtd$21228$1LXXoO)
              (&irritants-rcd . g$&irritants-rcd$21219$1LXXoO)
              (&irritants-rtd . g$&irritants-rtd$21218$1LXXoO)
              (&assertion-rcd . g$&assertion-rcd$21209$1LXXoO)
              (&assertion-rtd . g$&assertion-rtd$21208$1LXXoO)
              (&violation-rcd . g$&violation-rcd$21201$1LXXoO)
              (&violation-rtd . g$&violation-rtd$21200$1LXXoO)
              (&error-rcd . g$&error-rcd$21193$1LXXoO)
              (&error-rtd . g$&error-rtd$21192$1LXXoO)
              (&serious-rcd . g$&serious-rcd$21185$1LXXoO)
              (&serious-rtd . g$&serious-rtd$21184$1LXXoO)
              (&warning-rcd . g$&warning-rcd$21177$1LXXoO)
              (&warning-rtd . g$&warning-rtd$21176$1LXXoO)
              (&message-rcd . g$&message-rcd$21169$1LXXoO)
              (&message-rtd . g$&message-rtd$21168$1LXXoO)
              (&condition-rcd . g$&condition-rcd$21159$1LXXoO)
              (&condition-rtd . g$&condition-rtd$21158$1LXXoO)
              (tanh . g$tanh$20736$1LXXoO)
              (cosh . g$cosh$20734$1LXXoO)
              (sinh . g$sinh$20731$1LXXoO)
              (make-list . g$make-list$19208$1LXXoO)
              (last-pair . g$last-pair$19207$1LXXoO)
              (ironscheme-build . g$ironscheme-build$31380$1LXXoO)
              (syntax-error . g$syntax-error$31297$1LXXoO)
              (syntax-dispatch . g$syntax-dispatch$31187$1LXXoO)
              (compile-system-libraries
                .
                g$compile-system-libraries$31384$1LXXoO)
              (compile->closure . g$compile->closure$31386$1LXXoO)
              (compile . g$compile$31385$1LXXoO)
              (load . g$load$31379$1LXXoO)
              (interaction-environment
                .
                g$interaction-environment$31307$1LXXoO)
              (string-normalize-nfkd
                .
                g$string-normalize-nfkd$21615$1LXXoO)
              (string-normalize-nfkc
                .
                g$string-normalize-nfkc$21614$1LXXoO)
              (string-normalize-nfd
                .
                g$string-normalize-nfd$21613$1LXXoO)
              (string-normalize-nfc
                .
                g$string-normalize-nfc$21612$1LXXoO)
              (string-ci>? . g$string-ci>?$21604$1LXXoO)
              (string-ci>=? . g$string-ci>=?$21606$1LXXoO)
              (string-ci=? . g$string-ci=?$21602$1LXXoO)
              (string-ci<? . g$string-ci<?$21603$1LXXoO)
              (string-ci<=? . g$string-ci<=?$21605$1LXXoO)
              (char-ci>? . g$char-ci>?$21609$1LXXoO)
              (char-ci>=? . g$char-ci>=?$21611$1LXXoO)
              (char-ci=? . g$char-ci=?$21607$1LXXoO)
              (char-ci<? . g$char-ci<?$21608$1LXXoO)
              (char-ci<=? . g$char-ci<=?$21610$1LXXoO)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$31125$1LXXoO)
              (variable-transformer?
                .
                g$variable-transformer?$31124$1LXXoO)
              (make-variable-transformer
                .
                g$make-variable-transformer$31122$1LXXoO)
              (identifier? . g$identifier?$31301$1LXXoO)
              (generate-temporaries
                .
                g$generate-temporaries$31290$1LXXoO)
              (free-identifier=? . g$free-identifier=?$31291$1LXXoO)
              (syntax->datum . g$syntax->datum$31303$1LXXoO)
              (datum->syntax . g$datum->syntax$31302$1LXXoO)
              (bound-identifier=? . g$bound-identifier=?$31292$1LXXoO)
              (delete-file . g$delete-file$20183$1LXXoO)
              (file-exists? . g$file-exists?$20182$1LXXoO)
              (list-sort . g$list-sort$21457$1LXXoO)
              (make-eqv-hashtable . g$make-eqv-hashtable$20165$1LXXoO)
              (make-eq-hashtable . g$make-eq-hashtable$20164$1LXXoO)
              (hashtable-update! . g$hashtable-update!$20171$1LXXoO)
              (hashtable-size . g$hashtable-size$20166$1LXXoO)
              (hashtable-set! . g$hashtable-set!$20168$1LXXoO)
              (hashtable-ref . g$hashtable-ref$20167$1LXXoO)
              (hashtable-delete! . g$hashtable-delete!$20169$1LXXoO)
              (hashtable-contains? . g$hashtable-contains?$20170$1LXXoO)
              (hashtable-clear! . g$hashtable-clear!$20172$1LXXoO)
              (call-with-output-file
                .
                g$call-with-output-file$25570$1LXXoO)
              (call-with-input-file
                .
                g$call-with-input-file$25569$1LXXoO)
              (write-char . g$write-char$25566$1LXXoO)
              (with-output-to-file . g$with-output-to-file$25568$1LXXoO)
              (with-input-from-file
                .
                g$with-input-from-file$25567$1LXXoO)
              (read-char . g$read-char$25565$1LXXoO)
              (peek-char . g$peek-char$25564$1LXXoO)
              (newline . g$newline$25571$1LXXoO)
              (put-datum . g$put-datum$25501$1LXXoO)
              (port? . g$port?$25506$1LXXoO)
              (open-string-output-port
                .
                g$open-string-output-port$25505$1LXXoO)
              (make-i/o-write-error
                .
                g$make-i/o-write-error$21294$1LXXoO)
              (make-i/o-read-error . g$make-i/o-read-error$21286$1LXXoO)
              (make-i/o-port-error . g$make-i/o-port-error$21354$1LXXoO)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$21302$1LXXoO)
              (make-i/o-filename-error
                .
                g$make-i/o-filename-error$21312$1LXXoO)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$21322$1LXXoO)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$21330$1LXXoO)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$21346$1LXXoO)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$21338$1LXXoO)
              (make-i/o-error . g$make-i/o-error$21278$1LXXoO)
              (make-i/o-encoding-error
                .
                g$make-i/o-encoding-error$21372$1LXXoO)
              (make-i/o-decoding-error
                .
                g$make-i/o-decoding-error$21364$1LXXoO)
              (i/o-write-error? . g$i/o-write-error?$21295$1LXXoO)
              (i/o-read-error? . g$i/o-read-error?$21287$1LXXoO)
              (i/o-port-error? . g$i/o-port-error?$21356$1LXXoO)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$21304$1LXXoO)
              (i/o-error-position . g$i/o-error-position$21305$1LXXoO)
              (i/o-filename-error? . g$i/o-filename-error?$21314$1LXXoO)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$21323$1LXXoO)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$21331$1LXXoO)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$21347$1LXXoO)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$21339$1LXXoO)
              (i/o-error? . g$i/o-error?$21279$1LXXoO)
              (i/o-error-port . g$i/o-error-port$21357$1LXXoO)
              (i/o-error-filename . g$i/o-error-filename$21315$1LXXoO)
              (i/o-encoding-error? . g$i/o-encoding-error?$21374$1LXXoO)
              (i/o-encoding-error-char
                .
                g$i/o-encoding-error-char$21375$1LXXoO)
              (i/o-decoding-error? . g$i/o-decoding-error?$21365$1LXXoO)
              (get-datum . g$get-datum$25502$1LXXoO)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$25507$1LXXoO)
              (call-with-port . g$call-with-port$25508$1LXXoO)
              (scheme-report-environment
                .
                g$scheme-report-environment$31280$1LXXoO)
              (quotient . g$quotient$21424$1LXXoO)
              (null-environment . g$null-environment$31279$1LXXoO)
              (remainder . g$remainder$21425$1LXXoO)
              (modulo . g$modulo$21426$1LXXoO)
              (inexact->exact . g$inexact->exact$21421$1LXXoO)
              (force . g$force$21428$1LXXoO)
              (exact->inexact . g$exact->inexact$21422$1LXXoO)
              (command-line . g$command-line$31375$1LXXoO)
              (remove . g$remove$19230$1LXXoO)
              (remv . g$remv$19231$1LXXoO)
              (remp . g$remp$19211$1LXXoO)
              (remq . g$remq$19232$1LXXoO)
              (partition . g$partition$19210$1LXXoO)
              (memv . g$memv$19218$1LXXoO)
              (memq . g$memq$19217$1LXXoO)
              (memp . g$memp$19220$1LXXoO)
              (member . g$member$19219$1LXXoO)
              (exists . g$exists$19224$1LXXoO)
              (for-all . g$for-all$19223$1LXXoO)
              (fold-right . g$fold-right$19229$1LXXoO)
              (fold-left . g$fold-left$19228$1LXXoO)
              (find . g$find$19209$1LXXoO)
              (filter . g$filter$19212$1LXXoO)
              (cons* . g$cons*$19227$1LXXoO)
              (assv . g$assv$19214$1LXXoO)
              (assq . g$assq$19213$1LXXoO)
              (assp . g$assp$19216$1LXXoO)
              (assoc . g$assoc$19215$1LXXoO)
              (eval . g$eval$31282$1LXXoO)
              (environment . g$environment$31278$1LXXoO)
              (make-enumeration . g$make-enumeration$25707$1LXXoO)
              (enum-set=? . g$enum-set=?$25714$1LXXoO)
              (enum-set-universe . g$enum-set-universe$25708$1LXXoO)
              (enum-set-union . g$enum-set-union$25715$1LXXoO)
              (enum-set-subset? . g$enum-set-subset?$25713$1LXXoO)
              (enum-set-projection . g$enum-set-projection$25719$1LXXoO)
              (enum-set-member? . g$enum-set-member?$25712$1LXXoO)
              (enum-set-intersection
                .
                g$enum-set-intersection$25716$1LXXoO)
              (enum-set-indexer . g$enum-set-indexer$25709$1LXXoO)
              (enum-set-difference . g$enum-set-difference$25717$1LXXoO)
              (enum-set-constructor
                .
                g$enum-set-constructor$25710$1LXXoO)
              (enum-set-complement . g$enum-set-complement$25718$1LXXoO)
              (enum-set->list . g$enum-set->list$25711$1LXXoO)
              (who-condition? . g$who-condition?$21226$1LXXoO)
              (warning? . g$warning?$21175$1LXXoO)
              (violation? . g$violation?$21199$1LXXoO)
              (undefined-violation?
                .
                g$undefined-violation?$21271$1LXXoO)
              (syntax-violation? . g$syntax-violation?$21261$1LXXoO)
              (syntax-violation-subform
                .
                g$syntax-violation-subform$21263$1LXXoO)
              (syntax-violation-form
                .
                g$syntax-violation-form$21262$1LXXoO)
              (syntax-violation . g$syntax-violation$31300$1LXXoO)
              (serious-condition? . g$serious-condition?$21183$1LXXoO)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$21235$1LXXoO)
              (message-condition? . g$message-condition?$21166$1LXXoO)
              (make-who-condition . g$make-who-condition$21224$1LXXoO)
              (make-warning . g$make-warning$21174$1LXXoO)
              (make-violation . g$make-violation$21198$1LXXoO)
              (make-undefined-violation
                .
                g$make-undefined-violation$21270$1LXXoO)
              (make-syntax-violation
                .
                g$make-syntax-violation$21258$1LXXoO)
              (make-serious-condition
                .
                g$make-serious-condition$21182$1LXXoO)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$21234$1LXXoO)
              (make-message-condition
                .
                g$make-message-condition$21164$1LXXoO)
              (make-lexical-violation
                .
                g$make-lexical-violation$21250$1LXXoO)
              (make-irritants-condition
                .
                g$make-irritants-condition$21214$1LXXoO)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$21242$1LXXoO)
              (make-error . g$make-error$21190$1LXXoO)
              (make-assertion-violation
                .
                g$make-assertion-violation$21206$1LXXoO)
              (lexical-violation? . g$lexical-violation?$21251$1LXXoO)
              (irritants-condition?
                .
                g$irritants-condition?$21216$1LXXoO)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$21243$1LXXoO)
              (error? . g$error?$21191$1LXXoO)
              (condition-who . g$condition-who$21227$1LXXoO)
              (condition-message . g$condition-message$21167$1LXXoO)
              (condition-irritants . g$condition-irritants$21217$1LXXoO)
              (assertion-violation?
                .
                g$assertion-violation?$21207$1LXXoO)
              (native-endianness . g$native-endianness$20296$1LXXoO)
              (bytevector? . g$bytevector?$20056$1LXXoO)
              (bytevector-u64-set! . g$bytevector-u64-set!$20317$1LXXoO)
              (bytevector-u64-ref . g$bytevector-u64-ref$20313$1LXXoO)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$20319$1LXXoO)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$20315$1LXXoO)
              (bytevector-u32-set! . g$bytevector-u32-set!$20309$1LXXoO)
              (bytevector-u32-ref . g$bytevector-u32-ref$20305$1LXXoO)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$20311$1LXXoO)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$20307$1LXXoO)
              (bytevector-u16-set! . g$bytevector-u16-set!$20301$1LXXoO)
              (bytevector-u16-ref . g$bytevector-u16-ref$20297$1LXXoO)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$20303$1LXXoO)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$20299$1LXXoO)
              (bytevector-s64-set! . g$bytevector-s64-set!$20318$1LXXoO)
              (bytevector-s64-ref . g$bytevector-s64-ref$20314$1LXXoO)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$20320$1LXXoO)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$20316$1LXXoO)
              (bytevector-s32-set! . g$bytevector-s32-set!$20310$1LXXoO)
              (bytevector-s32-ref . g$bytevector-s32-ref$20306$1LXXoO)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$20312$1LXXoO)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$20308$1LXXoO)
              (bytevector-s16-set! . g$bytevector-s16-set!$20302$1LXXoO)
              (bytevector-s16-ref . g$bytevector-s16-ref$20298$1LXXoO)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$20304$1LXXoO)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$20300$1LXXoO)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$20323$1LXXoO)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$20321$1LXXoO)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$20324$1LXXoO)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$20322$1LXXoO)
              (no-nans-violation? . g$no-nans-violation?$21391$1LXXoO)
              (no-infinities-violation?
                .
                g$no-infinities-violation?$21383$1LXXoO)
              (make-no-nans-violation
                .
                g$make-no-nans-violation$21390$1LXXoO)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$21382$1LXXoO)
              (flzero? . g$flzero?$25474$1LXXoO)
              (fltruncate . g$fltruncate$25469$1LXXoO)
              (fltan . g$fltan$25458$1LXXoO)
              (flsqrt . g$flsqrt$25463$1LXXoO)
              (flsin . g$flsin$25456$1LXXoO)
              (flround . g$flround$25470$1LXXoO)
              (flpositive? . g$flpositive?$25472$1LXXoO)
              (flonum? . g$flonum?$20061$1LXXoO)
              (flodd? . g$flodd?$25476$1LXXoO)
              (flnegative? . g$flnegative?$25473$1LXXoO)
              (flnan? . g$flnan?$25455$1LXXoO)
              (flmod0 . g$flmod0$25446$1LXXoO)
              (flmod . g$flmod$25445$1LXXoO)
              (flmin . g$flmin$25478$1LXXoO)
              (flmax . g$flmax$25477$1LXXoO)
              (fllog . g$fllog$25462$1LXXoO)
              (flinteger? . g$flinteger?$25451$1LXXoO)
              (flinfinite? . g$flinfinite?$25454$1LXXoO)
              (flfloor . g$flfloor$25468$1LXXoO)
              (flfinite? . g$flfinite?$25452$1LXXoO)
              (flexpt . g$flexpt$25465$1LXXoO)
              (flexp . g$flexp$25464$1LXXoO)
              (fleven? . g$fleven?$25475$1LXXoO)
              (fldiv0-and-mod0 . g$fldiv0-and-mod0$25450$1LXXoO)
              (fldiv0 . g$fldiv0$25443$1LXXoO)
              (fldiv-and-mod . g$fldiv-and-mod$25447$1LXXoO)
              (fldiv . g$fldiv$25449$1LXXoO)
              (flcos . g$flcos$25457$1LXXoO)
              (flceiling . g$flceiling$25466$1LXXoO)
              (flatan . g$flatan$25461$1LXXoO)
              (flasin . g$flasin$25459$1LXXoO)
              (flacos . g$flacos$25460$1LXXoO)
              (flabs . g$flabs$25471$1LXXoO)
              (fl>? . g$fl>?$25440$1LXXoO)
              (fl>=? . g$fl>=?$25441$1LXXoO)
              (fl=? . g$fl=?$25437$1LXXoO)
              (fl<? . g$fl<?$25438$1LXXoO)
              (fl<=? . g$fl<=?$25439$1LXXoO)
              (fl/ . g$fl/$25436$1LXXoO)
              (fl- . g$fl-$25435$1LXXoO)
              (fl+ . g$fl+$25433$1LXXoO)
              (fl* . g$fl*$25434$1LXXoO)
              (fxzero? . g$fxzero?$23924$1LXXoO)
              (fxxor . g$fxxor$23908$1LXXoO)
              (fxrotate-bit-field . g$fxrotate-bit-field$23944$1LXXoO)
              (fxreverse-bit-field . g$fxreverse-bit-field$23945$1LXXoO)
              (fxpositive? . g$fxpositive?$23920$1LXXoO)
              (fxodd? . g$fxodd?$23928$1LXXoO)
              (fxnot . g$fxnot$23900$1LXXoO)
              (fxnegative? . g$fxnegative?$23922$1LXXoO)
              (fxmod0 . g$fxmod0$23913$1LXXoO)
              (fxmod . g$fxmod$23912$1LXXoO)
              (fxmin . g$fxmin$23930$1LXXoO)
              (fxmax . g$fxmax$23929$1LXXoO)
              (fxlength . g$fxlength$23897$1LXXoO)
              (fxior . g$fxior$23907$1LXXoO)
              (fxif . g$fxif$23935$1LXXoO)
              (fxfirst-bit-set . g$fxfirst-bit-set$23898$1LXXoO)
              (fxeven? . g$fxeven?$23926$1LXXoO)
              (fxdiv0-and-mod0 . g$fxdiv0-and-mod0$23918$1LXXoO)
              (fxdiv0 . g$fxdiv0$23916$1LXXoO)
              (fxdiv-and-mod . g$fxdiv-and-mod$23914$1LXXoO)
              (fxdiv . g$fxdiv$23910$1LXXoO)
              (fxcopy-bit-field . g$fxcopy-bit-field$23941$1LXXoO)
              (fxcopy-bit . g$fxcopy-bit$23937$1LXXoO)
              (fxbit-set? . g$fxbit-set?$23899$1LXXoO)
              (fxbit-field . g$fxbit-field$23939$1LXXoO)
              (fxbit-count . g$fxbit-count$23895$1LXXoO)
              (fxarithmetic-shift-right
                .
                g$fxarithmetic-shift-right$23943$1LXXoO)
              (fxarithmetic-shift-left
                .
                g$fxarithmetic-shift-left$23942$1LXXoO)
              (fxarithmetic-shift . g$fxarithmetic-shift$23893$1LXXoO)
              (fxand . g$fxand$23906$1LXXoO)
              (fx>? . g$fx>?$23904$1LXXoO)
              (fx>=? . g$fx>=?$23905$1LXXoO)
              (fx=? . g$fx=?$23901$1LXXoO)
              (fx<? . g$fx<?$23902$1LXXoO)
              (fx<=? . g$fx<=?$23903$1LXXoO)
              (fx-/carry . g$fx-/carry$23932$1LXXoO)
              (fx- . g$fx-$23890$1LXXoO)
              (fx+/carry . g$fx+/carry$23933$1LXXoO)
              (fx+ . g$fx+$23888$1LXXoO)
              (fx*/carry . g$fx*/carry$23931$1LXXoO)
              (fx* . g$fx*$23889$1LXXoO)
              (greatest-fixnum . g$greatest-fixnum$23886$1LXXoO)
              (least-fixnum . g$least-fixnum$23887$1LXXoO)
              (fixnum-width . g$fixnum-width$20062$1LXXoO)
              (fixnum? . g$fixnum?$20060$1LXXoO)
              (bitwise-rotate-bit-field
                .
                g$bitwise-rotate-bit-field$21653$1LXXoO)
              (bitwise-if . g$bitwise-if$21647$1LXXoO)
              (bitwise-copy-bit-field
                .
                g$bitwise-copy-bit-field$21650$1LXXoO)
              (bitwise-copy-bit . g$bitwise-copy-bit$21648$1LXXoO)
              (bitwise-bit-field . g$bitwise-bit-field$21649$1LXXoO)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$21652$1LXXoO)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$21651$1LXXoO)
              (zero? . g$zero?$20711$1LXXoO)
              (vector? . g$vector?$20055$1LXXoO)
              (vector-set! . g$vector-set!$20071$1LXXoO)
              (vector-ref . g$vector-ref$20070$1LXXoO)
              (vector-map . g$vector-map$20124$1LXXoO)
              (vector-for-each . g$vector-for-each$20125$1LXXoO)
              (vector-fill! . g$vector-fill!$20072$1LXXoO)
              (truncate . g$truncate$20749$1LXXoO)
              (tan . g$tan$20735$1LXXoO)
              (symbol? . g$symbol?$20057$1LXXoO)
              (symbol=? . g$symbol=?$20114$1LXXoO)
              (string>? . g$string>?$20111$1LXXoO)
              (string>=? . g$string>=?$20113$1LXXoO)
              (string=? . g$string=?$20109$1LXXoO)
              (string<? . g$string<?$20110$1LXXoO)
              (string<=? . g$string<=?$20112$1LXXoO)
              (string-for-each . g$string-for-each$20126$1LXXoO)
              (sin . g$sin$20729$1LXXoO)
              (round . g$round$20750$1LXXoO)
              (reverse . g$reverse$20074$1LXXoO)
              (real? . g$real?$20705$1LXXoO)
              (real-valued? . g$real-valued?$20708$1LXXoO)
              (real-part . g$real-part$20726$1LXXoO)
              (rationalize . g$rationalize$20121$1LXXoO)
              (rational? . g$rational?$20706$1LXXoO)
              (rational-valued? . g$rational-valued?$20709$1LXXoO)
              (procedure? . g$procedure?$20059$1LXXoO)
              (positive? . g$positive?$20712$1LXXoO)
              (odd? . g$odd?$20104$1LXXoO)
              (numerator . g$numerator$20724$1LXXoO)
              (number? . g$number?$20698$1LXXoO)
              (negative? . g$negative?$20713$1LXXoO)
              (nan? . g$nan?$20699$1LXXoO)
              (min . g$min$20106$1LXXoO)
              (max . g$max$20105$1LXXoO)
              (map . g$map$19225$1LXXoO)
              (make-rectangular . g$make-rectangular$20719$1LXXoO)
              (make-polar . g$make-polar$20720$1LXXoO)
              (magnitude . g$magnitude$20722$1LXXoO)
              (log . g$log$20738$1LXXoO)
              (list-tail . g$list-tail$19205$1LXXoO)
              (list-ref . g$list-ref$19206$1LXXoO)
              (list->vector . g$list->vector$20068$1LXXoO)
              (list->string . g$list->string$20069$1LXXoO)
              (lcm . g$lcm$20108$1LXXoO)
              (integer? . g$integer?$20707$1LXXoO)
              (integer-valued? . g$integer-valued?$20710$1LXXoO)
              (infinite? . g$infinite?$20701$1LXXoO)
              (inexact? . g$inexact?$20703$1LXXoO)
              (imag-part . g$imag-part$20727$1LXXoO)
              (gcd . g$gcd$20107$1LXXoO)
              (for-each . g$for-each$19226$1LXXoO)
              (floor . g$floor$20747$1LXXoO)
              (finite? . g$finite?$20700$1LXXoO)
              (exp . g$exp$20728$1LXXoO)
              (exact? . g$exact?$20702$1LXXoO)
              (even? . g$even?$20103$1LXXoO)
              (div0-and-mod0 . g$div0-and-mod0$20067$1LXXoO)
              (mod0 . g$mod0$20065$1LXXoO)
              (div0 . g$div0$20063$1LXXoO)
              (div-and-mod . g$div-and-mod$20066$1LXXoO)
              (mod . g$mod$20064$1LXXoO)
              (div . g$div$20739$1LXXoO)
              (denominator . g$denominator$20725$1LXXoO)
              (cos . g$cos$20732$1LXXoO)
              (complex? . g$complex?$20704$1LXXoO)
              (char? . g$char?$20054$1LXXoO)
              (char>? . g$char>?$20118$1LXXoO)
              (char>=? . g$char>=?$20120$1LXXoO)
              (char=? . g$char=?$20116$1LXXoO)
              (char<? . g$char<?$20117$1LXXoO)
              (char<=? . g$char<=?$20119$1LXXoO)
              (ceiling . g$ceiling$20748$1LXXoO)
              (cddddr . g$cddddr$20102$1LXXoO)
              (cdddar . g$cdddar$20101$1LXXoO)
              (cddadr . g$cddadr$20100$1LXXoO)
              (cddaar . g$cddaar$20099$1LXXoO)
              (cdaddr . g$cdaddr$20098$1LXXoO)
              (cdadar . g$cdadar$20097$1LXXoO)
              (cdaadr . g$cdaadr$20096$1LXXoO)
              (cdaaar . g$cdaaar$20095$1LXXoO)
              (cadddr . g$cadddr$20094$1LXXoO)
              (caddar . g$caddar$20093$1LXXoO)
              (cadadr . g$cadadr$20092$1LXXoO)
              (cadaar . g$cadaar$20091$1LXXoO)
              (caaddr . g$caaddr$20090$1LXXoO)
              (caadar . g$caadar$20089$1LXXoO)
              (caaadr . g$caaadr$20088$1LXXoO)
              (caaaar . g$caaaar$20087$1LXXoO)
              (cdddr . g$cdddr$20086$1LXXoO)
              (cddar . g$cddar$20085$1LXXoO)
              (cdadr . g$cdadr$20084$1LXXoO)
              (cdaar . g$cdaar$20083$1LXXoO)
              (caddr . g$caddr$20082$1LXXoO)
              (cadar . g$cadar$20081$1LXXoO)
              (caadr . g$caadr$20080$1LXXoO)
              (caaar . g$caaar$20079$1LXXoO)
              (cddr . g$cddr$20078$1LXXoO)
              (cdar . g$cdar$20077$1LXXoO)
              (cadr . g$cadr$20076$1LXXoO)
              (caar . g$caar$20075$1LXXoO)
              (boolean? . g$boolean?$20058$1LXXoO)
              (boolean=? . g$boolean=?$20115$1LXXoO)
              (atan . g$atan$20737$1LXXoO)
              (asin . g$asin$20730$1LXXoO)
              (angle . g$angle$20721$1LXXoO)
              (acos . g$acos$20733$1LXXoO)
              (abs . g$abs$20740$1LXXoO)
              (>= . g$>=$20718$1LXXoO)
              (> . g$>$20717$1LXXoO)
              (= . g$=$20714$1LXXoO)
              (<= . g$<=$20716$1LXXoO)
              (< . g$<$20715$1LXXoO)
              (enum-set? . g$enum?$25688$1LXXoO)
              (make-promise . g$make-promise$21427$1LXXoO)
              (load/unload . g$load/unload$31378$1LXXoO)
              (load/args . g$load/args$31377$1LXXoO)
              (printf . g$printf$25743$1LXXoO)
              (fprintf . g$fprintf$25744$1LXXoO)
              (format . g$format$25745$1LXXoO)
              (trace-printer . g$trace-printer$31374$1LXXoO)
              (make-traced-macro . g$make-traced-macro$25749$1LXXoO)
              (assertion-error . g$assertion-error$31296$1LXXoO)
              (make-parameter . g$make-parameter$25954$1LXXoO)
              (environment-bindings
                .
                g$environment-bindings$31274$1LXXoO)
              (environment-symbols . g$environment-symbols$31277$1LXXoO)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$31273$1LXXoO)
              (library-path . g$library-path$26781$1LXXoO)
              (make-compile-time-value
                .
                g$make-compile-time-value$31123$1LXXoO)
              (expand->core . g$expand->core$31283$1LXXoO)
              (expand . g$expand$31281$1LXXoO)
              (syntax-transpose . g$syntax-transpose$31230$1LXXoO)
              (convert->cps . g$convert->cps$26482$1LXXoO)
              (installed-libraries . g$installed-libraries$26802$1LXXoO)
              (uninstall-library . g$uninstall-library$26793$1LXXoO)
              (pretty-gensyms . g$pretty-gensyms$26162$1LXXoO)
              (pretty-width . g$pretty-width$26159$1LXXoO)
              (pretty-print . g$pretty-print$26164$1LXXoO)))))))
    (g$install-library$26797$1LXXoO
      'g$13412$1LXXoO
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$5989$1LXXoO)
        (cosh . g$5987$1LXXoO)
        (sinh . g$5984$1LXXoO)
        (make-guid . g$13405$1LXXoO)
        (unspecified? . g$13404$1LXXoO)
        (make-list . g$5150$1LXXoO)
        (last-pair . g$5149$1LXXoO)
        (load-r5rs . g$13403$1LXXoO)
        (license . g$13402$1LXXoO)
        (stacktrace . g$13401$1LXXoO)
        (ironscheme-build . g$12927$1LXXoO)
        (remove-location . g$13385$1LXXoO)
        (set-symbol-value! . g$13384$1LXXoO)
        (symbol-value . g$13383$1LXXoO)
        (symbol-bound? . g$13382$1LXXoO)
        (ungensym . g$13381$1LXXoO)
        (gensym . g$13380$1LXXoO)
        (void . g$13379$1LXXoO)
        (compile-system-libraries . g$12931$1LXXoO)
        (compile->closure . g$12933$1LXXoO)
        (compile . g$12932$1LXXoO)
        (load . g$12926$1LXXoO)
        (interaction-environment . g$9910$1LXXoO)
        (string-upcase . g$13374$1LXXoO)
        (string-titlecase . g$13373$1LXXoO)
        (string-normalize-nfkd . g$6671$1LXXoO)
        (string-normalize-nfkc . g$6670$1LXXoO)
        (string-normalize-nfd . g$6669$1LXXoO)
        (string-normalize-nfc . g$6668$1LXXoO)
        (string-foldcase . g$13372$1LXXoO)
        (string-downcase . g$13371$1LXXoO)
        (string-ci>? . g$6655$1LXXoO)
        (string-ci>=? . g$6657$1LXXoO)
        (string-ci=? . g$6653$1LXXoO)
        (string-ci<? . g$6654$1LXXoO)
        (string-ci<=? . g$6656$1LXXoO)
        (char-whitespace? . g$13370$1LXXoO)
        (char-upper-case? . g$13369$1LXXoO)
        (char-title-case? . g$13368$1LXXoO)
        (char-numeric? . g$13367$1LXXoO)
        (char-lower-case? . g$13366$1LXXoO)
        (char-general-category . g$13365$1LXXoO)
        (char-upcase . g$13364$1LXXoO)
        (char-titlecase . g$13363$1LXXoO)
        (char-foldcase . g$13362$1LXXoO)
        (char-downcase . g$13361$1LXXoO)
        (char-ci>? . g$6665$1LXXoO)
        (char-ci>=? . g$6667$1LXXoO)
        (char-ci=? . g$6663$1LXXoO)
        (char-ci<? . g$6664$1LXXoO)
        (char-ci<=? . g$6666$1LXXoO)
        (char-alphabetic? . g$13360$1LXXoO)
        (make-variable-transformer . g$9584$1LXXoO)
        (identifier? . g$9904$1LXXoO)
        (generate-temporaries . g$9893$1LXXoO)
        (free-identifier=? . g$9894$1LXXoO)
        (syntax->datum . g$9906$1LXXoO)
        (datum->syntax . g$9905$1LXXoO)
        (bound-identifier=? . g$9895$1LXXoO)
        (record-type-descriptor? . g$13359$1LXXoO)
        (record-predicate . g$13358$1LXXoO)
        (record-mutator . g$13357$1LXXoO)
        (record-constructor . g$13356$1LXXoO)
        (record-accessor . g$13355$1LXXoO)
        (make-record-type-descriptor . g$13354$1LXXoO)
        (make-record-constructor-descriptor . g$13353$1LXXoO)
        (record? . g$13352$1LXXoO)
        (record-type-uid . g$13351$1LXXoO)
        (record-type-sealed? . g$13350$1LXXoO)
        (record-type-parent . g$13349$1LXXoO)
        (record-type-opaque? . g$13348$1LXXoO)
        (record-type-name . g$13347$1LXXoO)
        (record-type-generative? . g$13346$1LXXoO)
        (record-type-field-names . g$13345$1LXXoO)
        (record-rtd . g$13344$1LXXoO)
        (record-field-mutable? . g$13343$1LXXoO)
        (delete-file . g$5810$1LXXoO)
        (file-exists? . g$5809$1LXXoO)
        (vector-sort! . g$13342$1LXXoO)
        (vector-sort . g$13341$1LXXoO)
        (list-sort . g$6624$1LXXoO)
        (symbol-hash . g$13340$1LXXoO)
        (string-ci-hash . g$13339$1LXXoO)
        (string-hash . g$13338$1LXXoO)
        (equal-hash . g$13337$1LXXoO)
        (hashtable-equivalence-function . g$13336$1LXXoO)
        (make-hashtable . g$13335$1LXXoO)
        (hashtable-hash-function . g$13334$1LXXoO)
        (make-eqv-hashtable . g$5777$1LXXoO)
        (make-eq-hashtable . g$5776$1LXXoO)
        (hashtable? . g$13333$1LXXoO)
        (hashtable-update! . g$5783$1LXXoO)
        (hashtable-size . g$5778$1LXXoO)
        (hashtable-set! . g$5780$1LXXoO)
        (hashtable-ref . g$5779$1LXXoO)
        (hashtable-mutable? . g$13332$1LXXoO)
        (hashtable-keys . g$13331$1LXXoO)
        (hashtable-entries . g$13330$1LXXoO)
        (hashtable-delete! . g$5781$1LXXoO)
        (hashtable-copy . g$13329$1LXXoO)
        (hashtable-contains? . g$5782$1LXXoO)
        (hashtable-clear! . g$5784$1LXXoO)
        (call-with-output-file . g$8408$1LXXoO)
        (call-with-input-file . g$8407$1LXXoO)
        (write-char . g$8399$1LXXoO)
        (write . g$13328$1LXXoO)
        (with-output-to-file . g$8406$1LXXoO)
        (with-input-from-file . g$8405$1LXXoO)
        (read-char . g$8398$1LXXoO)
        (read . g$13327$1LXXoO)
        (peek-char . g$8397$1LXXoO)
        (open-output-file . g$13326$1LXXoO)
        (open-input-file . g$13325$1LXXoO)
        (newline . g$8409$1LXXoO)
        (display . g$13324$1LXXoO)
        (close-output-port . g$13323$1LXXoO)
        (close-input-port . g$13322$1LXXoO)
        (eof-object? . g$13321$1LXXoO)
        (eof-object . g$13320$1LXXoO)
        (current-error-port . g$13319$1LXXoO)
        (current-output-port . g$13318$1LXXoO)
        (current-input-port . g$13317$1LXXoO)
        (output-port? . g$13316$1LXXoO)
        (input-port? . g$13315$1LXXoO)
        (utf-8-codec . g$13314$1LXXoO)
        (utf-16-codec . g$13313$1LXXoO)
        (transcoder-error-handling-mode . g$13312$1LXXoO)
        (transcoder-eol-style . g$13311$1LXXoO)
        (transcoder-codec . g$13310$1LXXoO)
        (transcoded-port . g$13309$1LXXoO)
        (textual-port? . g$13308$1LXXoO)
        (string->bytevector . g$13307$1LXXoO)
        (standard-output-port . g$13306$1LXXoO)
        (standard-input-port . g$13305$1LXXoO)
        (standard-error-port . g$13304$1LXXoO)
        (set-port-position! . g$13303$1LXXoO)
        (put-u8 . g$13302$1LXXoO)
        (put-string . g$13301$1LXXoO)
        (put-datum . g$8377$1LXXoO)
        (put-char . g$13300$1LXXoO)
        (put-bytevector . g$13299$1LXXoO)
        (port? . g$8382$1LXXoO)
        (port-transcoder . g$13298$1LXXoO)
        (port-position . g$13297$1LXXoO)
        (port-has-set-port-position!? . g$13296$1LXXoO)
        (port-has-port-position? . g$13295$1LXXoO)
        (port-eof? . g$13294$1LXXoO)
        (output-port-buffer-mode . g$13293$1LXXoO)
        (open-string-output-port . g$8381$1LXXoO)
        (open-string-input-port . g$13292$1LXXoO)
        (open-file-output-port . g$13291$1LXXoO)
        (open-file-input/output-port . g$13290$1LXXoO)
        (open-file-input-port . g$13289$1LXXoO)
        (open-bytevector-output-port . g$13288$1LXXoO)
        (open-bytevector-input-port . g$13287$1LXXoO)
        (native-transcoder . g$13286$1LXXoO)
        (native-eol-style . g$13285$1LXXoO)
        (make-transcoder . g$13284$1LXXoO)
        (latin-1-codec . g$13283$1LXXoO)
        (make-i/o-write-error . g$6434$1LXXoO)
        (make-i/o-read-error . g$6421$1LXXoO)
        (make-i/o-port-error . g$6529$1LXXoO)
        (make-i/o-invalid-position-error . g$6447$1LXXoO)
        (make-i/o-filename-error . g$6462$1LXXoO)
        (make-i/o-file-protection-error . g$6477$1LXXoO)
        (make-i/o-file-is-read-only-error . g$6490$1LXXoO)
        (make-i/o-file-does-not-exist-error . g$6516$1LXXoO)
        (make-i/o-file-already-exists-error . g$6503$1LXXoO)
        (make-i/o-error . g$6408$1LXXoO)
        (make-i/o-encoding-error . g$6557$1LXXoO)
        (make-i/o-decoding-error . g$6544$1LXXoO)
        (make-custom-textual-output-port . g$13282$1LXXoO)
        (make-custom-textual-input/output-port . g$13281$1LXXoO)
        (make-custom-textual-input-port . g$13280$1LXXoO)
        (make-custom-binary-output-port . g$13279$1LXXoO)
        (make-custom-binary-input/output-port . g$13278$1LXXoO)
        (make-custom-binary-input-port . g$13277$1LXXoO)
        (make-bytevector . g$13276$1LXXoO)
        (lookahead-u8 . g$13275$1LXXoO)
        (lookahead-char . g$13274$1LXXoO)
        (i/o-write-error? . g$6435$1LXXoO)
        (i/o-read-error? . g$6422$1LXXoO)
        (i/o-port-error? . g$6531$1LXXoO)
        (i/o-invalid-position-error? . g$6449$1LXXoO)
        (i/o-error-position . g$6450$1LXXoO)
        (i/o-filename-error? . g$6464$1LXXoO)
        (i/o-file-protection-error? . g$6478$1LXXoO)
        (i/o-file-is-read-only-error? . g$6491$1LXXoO)
        (i/o-file-does-not-exist-error? . g$6517$1LXXoO)
        (i/o-file-already-exists-error? . g$6504$1LXXoO)
        (i/o-error? . g$6409$1LXXoO)
        (i/o-error-port . g$6532$1LXXoO)
        (i/o-error-filename . g$6465$1LXXoO)
        (i/o-encoding-error? . g$6559$1LXXoO)
        (i/o-encoding-error-char . g$6560$1LXXoO)
        (i/o-decoding-error? . g$6545$1LXXoO)
        (get-u8 . g$13273$1LXXoO)
        (get-string-n! . g$13272$1LXXoO)
        (get-string-n . g$13271$1LXXoO)
        (get-string-all . g$13270$1LXXoO)
        (get-line . g$13269$1LXXoO)
        (get-datum . g$8378$1LXXoO)
        (get-char . g$13268$1LXXoO)
        (get-bytevector-some . g$13267$1LXXoO)
        (get-bytevector-n! . g$13266$1LXXoO)
        (get-bytevector-n . g$13265$1LXXoO)
        (get-bytevector-all . g$13264$1LXXoO)
        (flush-output-port . g$13263$1LXXoO)
        (close-port . g$13262$1LXXoO)
        (call-with-string-output-port . g$8383$1LXXoO)
        (call-with-port . g$8384$1LXXoO)
        (call-with-bytevector-output-port . g$13261$1LXXoO)
        (bytevector->string . g$13260$1LXXoO)
        (buffer-mode? . g$13259$1LXXoO)
        (binary-port? . g$13258$1LXXoO)
        (scheme-report-environment . g$9883$1LXXoO)
        (quotient . g$6603$1LXXoO)
        (null-environment . g$9882$1LXXoO)
        (remainder . g$6604$1LXXoO)
        (modulo . g$6605$1LXXoO)
        (inexact->exact . g$6600$1LXXoO)
        (force . g$6607$1LXXoO)
        (exact->inexact . g$6601$1LXXoO)
        (exit . g$13257$1LXXoO)
        (command-line . g$12922$1LXXoO)
        (string-fill! . g$13256$1LXXoO)
        (string-set! . g$13255$1LXXoO)
        (set-cdr! . g$13254$1LXXoO)
        (set-car! . g$13253$1LXXoO)
        (remove . g$5172$1LXXoO)
        (remv . g$5173$1LXXoO)
        (remp . g$5153$1LXXoO)
        (remq . g$5174$1LXXoO)
        (partition . g$5152$1LXXoO)
        (memv . g$5160$1LXXoO)
        (memq . g$5159$1LXXoO)
        (memp . g$5162$1LXXoO)
        (member . g$5161$1LXXoO)
        (exists . g$5166$1LXXoO)
        (for-all . g$5165$1LXXoO)
        (fold-right . g$5171$1LXXoO)
        (fold-left . g$5170$1LXXoO)
        (find . g$5151$1LXXoO)
        (filter . g$5154$1LXXoO)
        (cons* . g$5169$1LXXoO)
        (assv . g$5156$1LXXoO)
        (assq . g$5155$1LXXoO)
        (assp . g$5158$1LXXoO)
        (assoc . g$5157$1LXXoO)
        (with-exception-handler . g$13252$1LXXoO)
        (raise-continuable . g$13251$1LXXoO)
        (raise . g$13250$1LXXoO)
        (eval . g$9885$1LXXoO)
        (environment . g$9881$1LXXoO)
        (make-enumeration . g$8469$1LXXoO)
        (enum-set=? . g$8476$1LXXoO)
        (enum-set-universe . g$8470$1LXXoO)
        (enum-set-union . g$8477$1LXXoO)
        (enum-set-subset? . g$8475$1LXXoO)
        (enum-set-projection . g$8481$1LXXoO)
        (enum-set-member? . g$8474$1LXXoO)
        (enum-set-intersection . g$8478$1LXXoO)
        (enum-set-indexer . g$8471$1LXXoO)
        (enum-set-difference . g$8479$1LXXoO)
        (enum-set-constructor . g$8472$1LXXoO)
        (enum-set-complement . g$8480$1LXXoO)
        (enum-set->list . g$8473$1LXXoO)
        (who-condition? . g$6326$1LXXoO)
        (warning? . g$6245$1LXXoO)
        (violation? . g$6284$1LXXoO)
        (undefined-violation? . g$6396$1LXXoO)
        (syntax-violation? . g$6381$1LXXoO)
        (syntax-violation-subform . g$6383$1LXXoO)
        (syntax-violation-form . g$6382$1LXXoO)
        (syntax-violation . g$9903$1LXXoO)
        (simple-conditions . g$13249$1LXXoO)
        (serious-condition? . g$6258$1LXXoO)
        (non-continuable-violation? . g$6340$1LXXoO)
        (message-condition? . g$6231$1LXXoO)
        (make-who-condition . g$6324$1LXXoO)
        (make-warning . g$6244$1LXXoO)
        (make-violation . g$6283$1LXXoO)
        (make-undefined-violation . g$6395$1LXXoO)
        (make-syntax-violation . g$6378$1LXXoO)
        (make-serious-condition . g$6257$1LXXoO)
        (make-non-continuable-violation . g$6339$1LXXoO)
        (make-message-condition . g$6229$1LXXoO)
        (make-lexical-violation . g$6365$1LXXoO)
        (make-irritants-condition . g$6309$1LXXoO)
        (make-implementation-restriction-violation . g$6352$1LXXoO)
        (make-error . g$6270$1LXXoO)
        (make-assertion-violation . g$6296$1LXXoO)
        (lexical-violation? . g$6366$1LXXoO)
        (irritants-condition? . g$6311$1LXXoO)
        (implementation-restriction-violation? . g$6353$1LXXoO)
        (error? . g$6271$1LXXoO)
        (condition-who . g$6327$1LXXoO)
        (condition-predicate . g$13248$1LXXoO)
        (condition-message . g$6232$1LXXoO)
        (condition-irritants . g$6312$1LXXoO)
        (condition-accessor . g$13247$1LXXoO)
        (condition . g$13246$1LXXoO)
        (assertion-violation? . g$6297$1LXXoO)
        (condition? . g$13245$1LXXoO)
        (utf32->string . g$13244$1LXXoO)
        (utf16->string . g$13243$1LXXoO)
        (utf8->string . g$13242$1LXXoO)
        (uint-list->bytevector . g$13241$1LXXoO)
        (u8-list->bytevector . g$13240$1LXXoO)
        (string->utf8 . g$13239$1LXXoO)
        (string->utf32 . g$13238$1LXXoO)
        (string->utf16 . g$13237$1LXXoO)
        (sint-list->bytevector . g$13236$1LXXoO)
        (native-endianness . g$5816$1LXXoO)
        (bytevector? . g$5506$1LXXoO)
        (bytevector=? . g$13235$1LXXoO)
        (bytevector-uint-set! . g$13234$1LXXoO)
        (bytevector-uint-ref . g$13233$1LXXoO)
        (bytevector-u8-set! . g$13232$1LXXoO)
        (bytevector-u8-ref . g$13231$1LXXoO)
        (bytevector-u64-set! . g$5837$1LXXoO)
        (bytevector-u64-ref . g$5833$1LXXoO)
        (bytevector-u64-native-set! . g$5839$1LXXoO)
        (bytevector-u64-native-ref . g$5835$1LXXoO)
        (bytevector-u32-set! . g$5829$1LXXoO)
        (bytevector-u32-ref . g$5825$1LXXoO)
        (bytevector-u32-native-set! . g$5831$1LXXoO)
        (bytevector-u32-native-ref . g$5827$1LXXoO)
        (bytevector-u16-set! . g$5821$1LXXoO)
        (bytevector-u16-ref . g$5817$1LXXoO)
        (bytevector-u16-native-set! . g$5823$1LXXoO)
        (bytevector-u16-native-ref . g$5819$1LXXoO)
        (bytevector-sint-set! . g$13230$1LXXoO)
        (bytevector-sint-ref . g$13229$1LXXoO)
        (bytevector-s8-set! . g$13228$1LXXoO)
        (bytevector-s8-ref . g$13227$1LXXoO)
        (bytevector-s64-set! . g$5838$1LXXoO)
        (bytevector-s64-ref . g$5834$1LXXoO)
        (bytevector-s64-native-set! . g$5840$1LXXoO)
        (bytevector-s64-native-ref . g$5836$1LXXoO)
        (bytevector-s32-set! . g$5830$1LXXoO)
        (bytevector-s32-ref . g$5826$1LXXoO)
        (bytevector-s32-native-set! . g$5832$1LXXoO)
        (bytevector-s32-native-ref . g$5828$1LXXoO)
        (bytevector-s16-set! . g$5822$1LXXoO)
        (bytevector-s16-ref . g$5818$1LXXoO)
        (bytevector-s16-native-set! . g$5824$1LXXoO)
        (bytevector-s16-native-ref . g$5820$1LXXoO)
        (bytevector-length . g$13226$1LXXoO)
        (bytevector-ieee-single-set! . g$13225$1LXXoO)
        (bytevector-ieee-single-ref . g$13224$1LXXoO)
        (bytevector-ieee-single-native-set! . g$5843$1LXXoO)
        (bytevector-ieee-single-native-ref . g$5841$1LXXoO)
        (bytevector-ieee-double-set! . g$13223$1LXXoO)
        (bytevector-ieee-double-ref . g$13222$1LXXoO)
        (bytevector-ieee-double-native-set! . g$5844$1LXXoO)
        (bytevector-ieee-double-native-ref . g$5842$1LXXoO)
        (bytevector-fill! . g$13221$1LXXoO)
        (bytevector-copy! . g$13220$1LXXoO)
        (bytevector-copy . g$13219$1LXXoO)
        (bytevector->uint-list . g$13218$1LXXoO)
        (bytevector->u8-list . g$13217$1LXXoO)
        (bytevector->sint-list . g$13216$1LXXoO)
        (no-nans-violation? . g$6586$1LXXoO)
        (no-infinities-violation? . g$6573$1LXXoO)
        (make-no-nans-violation . g$6585$1LXXoO)
        (make-no-infinities-violation . g$6572$1LXXoO)
        (real->flonum . g$13215$1LXXoO)
        (flzero? . g$7823$1LXXoO)
        (fltruncate . g$7818$1LXXoO)
        (fltan . g$7804$1LXXoO)
        (flsqrt . g$7809$1LXXoO)
        (flsin . g$7802$1LXXoO)
        (flround . g$7819$1LXXoO)
        (flpositive? . g$7821$1LXXoO)
        (flonum? . g$5511$1LXXoO)
        (flodd? . g$7825$1LXXoO)
        (flnumerator . g$13214$1LXXoO)
        (flnegative? . g$7822$1LXXoO)
        (flnan? . g$7801$1LXXoO)
        (flmod0 . g$7786$1LXXoO)
        (flmod . g$7785$1LXXoO)
        (flmin . g$7827$1LXXoO)
        (flmax . g$7826$1LXXoO)
        (fllog . g$7808$1LXXoO)
        (flinteger? . g$7794$1LXXoO)
        (flinfinite? . g$7800$1LXXoO)
        (flfloor . g$7817$1LXXoO)
        (flfinite? . g$7795$1LXXoO)
        (flexpt . g$7811$1LXXoO)
        (flexp . g$7810$1LXXoO)
        (fleven? . g$7824$1LXXoO)
        (fldiv0-and-mod0 . g$7793$1LXXoO)
        (fldiv0 . g$7780$1LXXoO)
        (fldiv-and-mod . g$7787$1LXXoO)
        (fldiv . g$7792$1LXXoO)
        (fldenominator . g$13213$1LXXoO)
        (flcos . g$7803$1LXXoO)
        (flceiling . g$7812$1LXXoO)
        (flatan . g$7807$1LXXoO)
        (flasin . g$7805$1LXXoO)
        (flacos . g$7806$1LXXoO)
        (flabs . g$7820$1LXXoO)
        (fl>? . g$7774$1LXXoO)
        (fl>=? . g$7775$1LXXoO)
        (fl=? . g$7771$1LXXoO)
        (fl<? . g$7772$1LXXoO)
        (fl<=? . g$7773$1LXXoO)
        (fl/ . g$7770$1LXXoO)
        (fl- . g$7769$1LXXoO)
        (fl+ . g$7767$1LXXoO)
        (fl* . g$7768$1LXXoO)
        (fixnum->flonum . g$13212$1LXXoO)
        (fxzero? . g$6867$1LXXoO)
        (fxxor . g$6830$1LXXoO)
        (fxrotate-bit-field . g$6905$1LXXoO)
        (fxreverse-bit-field . g$6906$1LXXoO)
        (fxpositive? . g$6857$1LXXoO)
        (fxodd? . g$6877$1LXXoO)
        (fxnot . g$6811$1LXXoO)
        (fxnegative? . g$6862$1LXXoO)
        (fxmod0 . g$6841$1LXXoO)
        (fxmod . g$6840$1LXXoO)
        (fxmin . g$6879$1LXXoO)
        (fxmax . g$6878$1LXXoO)
        (fxlength . g$6808$1LXXoO)
        (fxior . g$6829$1LXXoO)
        (fxif . g$6887$1LXXoO)
        (fxfirst-bit-set . g$6809$1LXXoO)
        (fxeven? . g$6872$1LXXoO)
        (fxdiv0-and-mod0 . g$6852$1LXXoO)
        (fxdiv0 . g$6847$1LXXoO)
        (fxdiv-and-mod . g$6842$1LXXoO)
        (fxdiv . g$6835$1LXXoO)
        (fxcopy-bit-field . g$6902$1LXXoO)
        (fxcopy-bit . g$6892$1LXXoO)
        (fxbit-set? . g$6810$1LXXoO)
        (fxbit-field . g$6897$1LXXoO)
        (fxbit-count . g$6803$1LXXoO)
        (fxarithmetic-shift-right . g$6904$1LXXoO)
        (fxarithmetic-shift-left . g$6903$1LXXoO)
        (fxarithmetic-shift . g$6798$1LXXoO)
        (fxand . g$6828$1LXXoO)
        (fx>? . g$6820$1LXXoO)
        (fx>=? . g$6821$1LXXoO)
        (fx=? . g$6817$1LXXoO)
        (fx<? . g$6818$1LXXoO)
        (fx<=? . g$6819$1LXXoO)
        (fx-/carry . g$6881$1LXXoO)
        (fx- . g$6792$1LXXoO)
        (fx+/carry . g$6882$1LXXoO)
        (fx+ . g$6790$1LXXoO)
        (fx*/carry . g$6880$1LXXoO)
        (fx* . g$6791$1LXXoO)
        (greatest-fixnum . g$6761$1LXXoO)
        (least-fixnum . g$6762$1LXXoO)
        (fixnum-width . g$5512$1LXXoO)
        (fixnum? . g$5510$1LXXoO)
        (bitwise-rotate-bit-field . g$6735$1LXXoO)
        (bitwise-reverse-bit-field . g$13211$1LXXoO)
        (bitwise-length . g$13210$1LXXoO)
        (bitwise-if . g$6729$1LXXoO)
        (bitwise-first-bit-set . g$13209$1LXXoO)
        (bitwise-copy-bit-field . g$6732$1LXXoO)
        (bitwise-copy-bit . g$6730$1LXXoO)
        (bitwise-bit-set? . g$13208$1LXXoO)
        (bitwise-bit-field . g$6731$1LXXoO)
        (bitwise-bit-count . g$13207$1LXXoO)
        (bitwise-xor . g$13206$1LXXoO)
        (bitwise-ior . g$13205$1LXXoO)
        (bitwise-and . g$13204$1LXXoO)
        (bitwise-not . g$13203$1LXXoO)
        (bitwise-arithmetic-shift-right . g$6734$1LXXoO)
        (bitwise-arithmetic-shift-left . g$6733$1LXXoO)
        (bitwise-arithmetic-shift . g$13202$1LXXoO)
        (zero? . g$5950$1LXXoO)
        (vector? . g$5505$1LXXoO)
        (vector-set! . g$5521$1LXXoO)
        (vector-ref . g$5520$1LXXoO)
        (vector-map . g$5584$1LXXoO)
        (vector-length . g$13201$1LXXoO)
        (vector-for-each . g$5585$1LXXoO)
        (vector-fill! . g$5522$1LXXoO)
        (vector->list . g$13200$1LXXoO)
        (vector . g$13199$1LXXoO)
        (values . g$13198$1LXXoO)
        (truncate . g$6002$1LXXoO)
        (tan . g$5988$1LXXoO)
        (symbol? . g$5507$1LXXoO)
        (symbol=? . g$5569$1LXXoO)
        (symbol->string . g$13197$1LXXoO)
        (substring . g$13196$1LXXoO)
        (string? . g$13195$1LXXoO)
        (string>? . g$5566$1LXXoO)
        (string>=? . g$5568$1LXXoO)
        (string=? . g$5564$1LXXoO)
        (string<? . g$5565$1LXXoO)
        (string<=? . g$5567$1LXXoO)
        (string-ref . g$13194$1LXXoO)
        (string-length . g$13193$1LXXoO)
        (string-for-each . g$5586$1LXXoO)
        (string-copy . g$13192$1LXXoO)
        (string-append . g$13191$1LXXoO)
        (string->symbol . g$13190$1LXXoO)
        (string->number . g$13189$1LXXoO)
        (string->list . g$13188$1LXXoO)
        (string . g$13187$1LXXoO)
        (sqrt . g$13186$1LXXoO)
        (sin . g$5982$1LXXoO)
        (round . g$6003$1LXXoO)
        (reverse . g$5524$1LXXoO)
        (real? . g$5944$1LXXoO)
        (real-valued? . g$5947$1LXXoO)
        (real-part . g$5975$1LXXoO)
        (rationalize . g$5581$1LXXoO)
        (rational? . g$5945$1LXXoO)
        (rational-valued? . g$5948$1LXXoO)
        (procedure? . g$5509$1LXXoO)
        (positive? . g$5951$1LXXoO)
        (pair? . g$13185$1LXXoO)
        (odd? . g$5554$1LXXoO)
        (numerator . g$5973$1LXXoO)
        (number? . g$5937$1LXXoO)
        (number->string . g$13184$1LXXoO)
        (null? . g$13183$1LXXoO)
        (not . g$13182$1LXXoO)
        (negative? . g$5952$1LXXoO)
        (nan? . g$5938$1LXXoO)
        (min . g$5556$1LXXoO)
        (max . g$5555$1LXXoO)
        (map . g$5167$1LXXoO)
        (make-vector . g$13181$1LXXoO)
        (make-string . g$13180$1LXXoO)
        (make-rectangular . g$5968$1LXXoO)
        (make-polar . g$5969$1LXXoO)
        (magnitude . g$5971$1LXXoO)
        (log . g$5991$1LXXoO)
        (list? . g$13179$1LXXoO)
        (list-tail . g$5147$1LXXoO)
        (list-ref . g$5148$1LXXoO)
        (list->vector . g$5518$1LXXoO)
        (list->string . g$5519$1LXXoO)
        (list . g$13178$1LXXoO)
        (length . g$13177$1LXXoO)
        (lcm . g$5558$1LXXoO)
        (integer? . g$5946$1LXXoO)
        (integer-valued? . g$5949$1LXXoO)
        (integer->char . g$13176$1LXXoO)
        (infinite? . g$5940$1LXXoO)
        (inexact? . g$5942$1LXXoO)
        (inexact . g$13175$1LXXoO)
        (imag-part . g$5976$1LXXoO)
        (gcd . g$5557$1LXXoO)
        (for-each . g$5168$1LXXoO)
        (floor . g$6000$1LXXoO)
        (finite? . g$5939$1LXXoO)
        (expt . g$13174$1LXXoO)
        (exp . g$5981$1LXXoO)
        (exact? . g$5941$1LXXoO)
        (exact-integer-sqrt . g$13173$1LXXoO)
        (exact . g$13172$1LXXoO)
        (even? . g$5553$1LXXoO)
        (error . g$13171$1LXXoO)
        (eqv? . g$13170$1LXXoO)
        (equal? . g$13169$1LXXoO)
        (eq? . g$13168$1LXXoO)
        (dynamic-wind . g$13167$1LXXoO)
        (div0-and-mod0 . g$5517$1LXXoO)
        (mod0 . g$5515$1LXXoO)
        (div0 . g$5513$1LXXoO)
        (div-and-mod . g$5516$1LXXoO)
        (mod . g$5514$1LXXoO)
        (div . g$5992$1LXXoO)
        (denominator . g$5974$1LXXoO)
        (cos . g$5985$1LXXoO)
        (cons . g$13166$1LXXoO)
        (complex? . g$5943$1LXXoO)
        (char? . g$5504$1LXXoO)
        (char>? . g$5578$1LXXoO)
        (char>=? . g$5580$1LXXoO)
        (char=? . g$5576$1LXXoO)
        (char<? . g$5577$1LXXoO)
        (char<=? . g$5579$1LXXoO)
        (char->integer . g$13165$1LXXoO)
        (ceiling . g$6001$1LXXoO)
        (call-with-values . g$13164$1LXXoO)
        (call/cc . g$13163$1LXXoO)
        (call-with-current-continuation . g$13162$1LXXoO)
        (cddddr . g$5552$1LXXoO)
        (cdddar . g$5551$1LXXoO)
        (cddadr . g$5550$1LXXoO)
        (cddaar . g$5549$1LXXoO)
        (cdaddr . g$5548$1LXXoO)
        (cdadar . g$5547$1LXXoO)
        (cdaadr . g$5546$1LXXoO)
        (cdaaar . g$5545$1LXXoO)
        (cadddr . g$5544$1LXXoO)
        (caddar . g$5543$1LXXoO)
        (cadadr . g$5542$1LXXoO)
        (cadaar . g$5541$1LXXoO)
        (caaddr . g$5540$1LXXoO)
        (caadar . g$5539$1LXXoO)
        (caaadr . g$5538$1LXXoO)
        (caaaar . g$5537$1LXXoO)
        (cdddr . g$5536$1LXXoO)
        (cddar . g$5535$1LXXoO)
        (cdadr . g$5534$1LXXoO)
        (cdaar . g$5533$1LXXoO)
        (caddr . g$5532$1LXXoO)
        (cadar . g$5531$1LXXoO)
        (caadr . g$5530$1LXXoO)
        (caaar . g$5529$1LXXoO)
        (cddr . g$5528$1LXXoO)
        (cdar . g$5527$1LXXoO)
        (cadr . g$5526$1LXXoO)
        (caar . g$5525$1LXXoO)
        (cdr . g$13161$1LXXoO)
        (car . g$13160$1LXXoO)
        (boolean? . g$5508$1LXXoO)
        (boolean=? . g$5570$1LXXoO)
        (atan . g$5990$1LXXoO)
        (assertion-violation . g$13159$1LXXoO)
        (asin . g$5983$1LXXoO)
        (apply . g$13158$1LXXoO)
        (append . g$13157$1LXXoO)
        (angle . g$5970$1LXXoO)
        (acos . g$5986$1LXXoO)
        (abs . g$5993$1LXXoO)
        (/ . g$13156$1LXXoO)
        (* . g$13155$1LXXoO)
        (- . g$13154$1LXXoO)
        (+ . g$13153$1LXXoO)
        (>= . g$5967$1LXXoO)
        (> . g$5966$1LXXoO)
        (= . g$5963$1LXXoO)
        (<= . g$5965$1LXXoO)
        (< . g$5964$1LXXoO)
        (deserialize-port . g$13116$1LXXoO)
        (serialize-port . g$13115$1LXXoO)
        (enum-set? . g$8446$1LXXoO)
        (load/unload . g$12925$1LXXoO)
        (load/args . g$12924$1LXXoO)
        (printf . g$8555$1LXXoO)
        (fprintf . g$8556$1LXXoO)
        (format . g$8557$1LXXoO)
        (procedure-form . g$13114$1LXXoO)
        (procedure-environment . g$13113$1LXXoO)
        (procedure-name . g$13112$1LXXoO)
        (procedure-arity . g$13111$1LXXoO)
        (gc-collect . g$13110$1LXXoO)
        (typeof . g$13109$1LXXoO)
        (clr-type? . g$13108$1LXXoO)
        (get-clr-type . g$13107$1LXXoO)
        (vector-append . g$13105$1LXXoO)
        (vector-filter . g$13104$1LXXoO)
        (vector-reverse! . g$13103$1LXXoO)
        (vector-contains? . g$13102$1LXXoO)
        (vector-index-of . g$13101$1LXXoO)
        (vector-copy . g$13100$1LXXoO)
        (vector-binary-search . g$13099$1LXXoO)
        (string-ci-compare . g$13098$1LXXoO)
        (string-compare . g$13097$1LXXoO)
        (string-format . g$13096$1LXXoO)
        (trace-printer . g$12921$1LXXoO)
        (time-it . g$13094$1LXXoO)
        (make-parameter . g$8584$1LXXoO)
        (open-tcp-input/output-port . g$13091$1LXXoO)
        (hashtable-for-each . g$13090$1LXXoO)
        (hashtable-map . g$13089$1LXXoO)
        (environment-bindings . g$9877$1LXXoO)
        (environment-symbols . g$9880$1LXXoO)
        (interaction-environment-symbols . g$9876$1LXXoO)
        (optimization-level . g$13088$1LXXoO)
        (library-path . g$9206$1LXXoO)
        (make-compile-time-value . g$9585$1LXXoO)
        (expand->core . g$9886$1LXXoO)
        (expand . g$9884$1LXXoO)
        (syntax-transpose . g$9823$1LXXoO)
        (convert->cps . g$8903$1LXXoO)
        (inexact=? . g$13087$1LXXoO)
        (inexact-compare . g$13086$1LXXoO)
        (exact-compare . g$13085$1LXXoO)
        (installed-libraries . g$9227$1LXXoO)
        (uninstall-library . g$9218$1LXXoO)
        (pretty-gensyms . g$8667$1LXXoO)
        (pretty-width . g$8664$1LXXoO)
        (pretty-print . g$8669$1LXXoO)
        (pointer+ . g$13084$1LXXoO)
        (&no-nans . g$13083$1LXXoO)
        (&no-infinities . g$13082$1LXXoO)
        (&i/o-encoding . g$13081$1LXXoO)
        (&i/o-decoding . g$13080$1LXXoO)
        (&i/o-port . g$13079$1LXXoO)
        (&i/o-file-does-not-exist . g$13078$1LXXoO)
        (&i/o-file-already-exists . g$13077$1LXXoO)
        (&i/o-file-is-read-only . g$13076$1LXXoO)
        (&i/o-file-protection . g$13075$1LXXoO)
        (&i/o-filename . g$13074$1LXXoO)
        (&i/o-invalid-position . g$13073$1LXXoO)
        (&i/o-write . g$13072$1LXXoO)
        (&i/o-read . g$13071$1LXXoO)
        (&i/o . g$13070$1LXXoO)
        (&non-continuable . g$13069$1LXXoO)
        (&undefined . g$13068$1LXXoO)
        (&syntax . g$13067$1LXXoO)
        (&lexical . g$13066$1LXXoO)
        (&implementation-restriction . g$13065$1LXXoO)
        (&who . g$13064$1LXXoO)
        (&irritants . g$13063$1LXXoO)
        (&assertion . g$13062$1LXXoO)
        (&violation . g$13061$1LXXoO)
        (&error . g$13060$1LXXoO)
        (&serious . g$13059$1LXXoO)
        (&warning . g$13058$1LXXoO)
        (&message . g$13057$1LXXoO)
        (&condition . g$13056$1LXXoO)
        (define-condition-type . g$13055$1LXXoO)
        (define-enumeration . g$13054$1LXXoO)
        (define-record-type . g$13053$1LXXoO)
        (parent-rtd . g$13052$1LXXoO)
        (nongenerative . g$13051$1LXXoO)
        (opaque . g$13050$1LXXoO)
        (sealed . g$13049$1LXXoO)
        (protocol . g$13048$1LXXoO)
        (parent . g$13047$1LXXoO)
        (immutable . g$13046$1LXXoO)
        (mutable . g$13045$1LXXoO)
        (fields . g$13044$1LXXoO)
        (error-handling-mode . g$13043$1LXXoO)
        (file-options . g$13042$1LXXoO)
        (buffer-mode . g$13041$1LXXoO)
        (eol-style . g$13040$1LXXoO)
        (guard . g$13039$1LXXoO)
        (trace-letrec-syntax . g$13038$1LXXoO)
        (trace-let-syntax . g$13037$1LXXoO)
        (trace-define-syntax . g$13036$1LXXoO)
        (trace-define . g$13035$1LXXoO)
        (trace-lambda . g$13034$1LXXoO)
        (unsyntax-splicing . g$13033$1LXXoO)
        (unsyntax . g$13032$1LXXoO)
        (unquote-splicing . g$13031$1LXXoO)
        (unquote . g$13030$1LXXoO)
        (_ . g$13029$1LXXoO)
        (else . g$13028$1LXXoO)
        (=> . g$13027$1LXXoO)
        (... . g$13026$1LXXoO)
        (assert . g$13025$1LXXoO)
        (endianness . g$13024$1LXXoO)
        (delay . g$13023$1LXXoO)
        (time . g$13022$1LXXoO)
        (or . g$13021$1LXXoO)
        (and . g$13020$1LXXoO)
        (do . g$13019$1LXXoO)
        (cond . g$13018$1LXXoO)
        (let* . g$13017$1LXXoO)
        (let . g$13016$1LXXoO)
        (identifier-syntax . g$13015$1LXXoO)
        (with-syntax . g$13014$1LXXoO)
        (quasisyntax . g$13013$1LXXoO)
        (quasiquote . g$13012$1LXXoO)
        (syntax-rules . g$13011$1LXXoO)
        (include-into . g$13010$1LXXoO)
        (include . g$13009$1LXXoO)
        (let-values . g$13007$1LXXoO)
        (let*-values . g$13006$1LXXoO)
        (record-constructor-descriptor . g$13005$1LXXoO)
        (record-type-descriptor . g$13004$1LXXoO)
        (fluid-let-syntax . g$13003$1LXXoO)
        (case . g$13002$1LXXoO)
        (parameterize . g$13001$1LXXoO)
        (unless . g$13000$1LXXoO)
        (when . g$12999$1LXXoO)
        (if . g$12998$1LXXoO)
        (letrec* . g$12997$1LXXoO)
        (letrec . g$12996$1LXXoO)
        (case-lambda . g$12994$1LXXoO)
        (lambda . g$12993$1LXXoO)
        (syntax . g$12992$1LXXoO)
        (syntax-case . g$12991$1LXXoO)
        (quote . g$12990$1LXXoO)
        (letrec-syntax . g$12988$1LXXoO)
        (let-syntax . g$12987$1LXXoO)
        (set! . g$12986$1LXXoO)
        (export . g$12985$1LXXoO)
        (import . g$12984$1LXXoO)
        (library . g$12983$1LXXoO)
        (begin . g$12982$1LXXoO)
        (module . g$12981$1LXXoO)
        (define-syntax . g$12980$1LXXoO)
        (define . g$12979$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13413$1LXXoO
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$13092$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13414$1LXXoO
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$13410$1LXXoO)
        (annotation-source . g$13409$1LXXoO)
        (annotation-expression . g$13408$1LXXoO)
        (annotation? . g$13407$1LXXoO)
        (read-annotated . g$13406$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13415$1LXXoO
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$13378$1LXXoO)
        (serialize-library . g$13377$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13416$1LXXoO
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((string-normalize . g$13376$1LXXoO)
        (variable-transformer-procedure . g$9587$1LXXoO)
        (variable-transformer? . g$9586$1LXXoO)
        (eqv-hash . g$13118$1LXXoO)
        (reverse! . g$13117$1LXXoO)
        (make-promise . g$6606$1LXXoO)
        (format . g$8557$1LXXoO)
        (get-command-line . g$13106$1LXXoO)
        (make-traced-procedure . g$13095$1LXXoO)
        (make-traced-macro . g$8577$1LXXoO)
        (assertion-error . g$9899$1LXXoO)
        (library-locator . g$13093$1LXXoO)
        (get-library-paths . g$13092$1LXXoO)
        (library-path . g$9206$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13417$1LXXoO
      '(ironscheme unsafe)
      '()
      '()
      '()
      '()
      '(($fl>=? . g$13152$1LXXoO)
        ($fl>? . g$13151$1LXXoO)
        ($fl<=? . g$13150$1LXXoO)
        ($fl<? . g$13149$1LXXoO)
        ($fl- . g$13148$1LXXoO)
        ($fl/ . g$13147$1LXXoO)
        ($fl* . g$13146$1LXXoO)
        ($fl+ . g$13145$1LXXoO)
        ($fl=? . g$13144$1LXXoO)
        ($try . g$13143$1LXXoO)
        ($fxarithmetic-shift-right . g$13142$1LXXoO)
        ($fxarithmetic-shift-left . g$13141$1LXXoO)
        ($$fx- . g$13140$1LXXoO)
        ($$fx* . g$13139$1LXXoO)
        ($$fx+ . g$13138$1LXXoO)
        ($fxnot . g$13137$1LXXoO)
        ($fxxor . g$13136$1LXXoO)
        ($fxior . g$13135$1LXXoO)
        ($fxand . g$13134$1LXXoO)
        ($fx>=? . g$13133$1LXXoO)
        ($fx>? . g$13132$1LXXoO)
        ($fx<=? . g$13131$1LXXoO)
        ($fx<? . g$13130$1LXXoO)
        ($fx- . g$13129$1LXXoO)
        ($fxmod0 . g$13128$1LXXoO)
        ($fxdiv0 . g$13127$1LXXoO)
        ($fx* . g$13126$1LXXoO)
        ($fx+ . g$13125$1LXXoO)
        ($fx=? . g$13124$1LXXoO)
        ($vector-set! . g$13123$1LXXoO)
        ($vector-ref . g$13122$1LXXoO)
        ($cdr . g$13121$1LXXoO)
        ($car . g$13120$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13418$1LXXoO
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$13119$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13419$1LXXoO
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((pinvoke-call-internal . g$13400$1LXXoO)
        (ffi-callback-internal . g$13399$1LXXoO)
        (ffi-callout-internal . g$13398$1LXXoO)
        (define-clr-class-internal . g$13397$1LXXoO)
        (clr-field-set!-internal . g$13396$1LXXoO)
        (clr-field-get-internal . g$13395$1LXXoO)
        (clr-cast-internal . g$13394$1LXXoO)
        (clr-call-internal . g$13393$1LXXoO)
        (clr-new-internal . g$13392$1LXXoO)
        (clr-new-array-internal . g$13391$1LXXoO)
        (clr-is-internal . g$13390$1LXXoO)
        (clr-reference-internal . g$13389$1LXXoO)
        (clr-using-internal . g$13388$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13420$1LXXoO
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$13031$1LXXoO)
        (unquote . g$13030$1LXXoO)
        (else . g$13028$1LXXoO)
        (=> . g$13027$1LXXoO)
        (delay . g$13023$1LXXoO)
        (or . g$13021$1LXXoO)
        (and . g$13020$1LXXoO)
        (do . g$13019$1LXXoO)
        (cond . g$13018$1LXXoO)
        (let* . g$13017$1LXXoO)
        (let . g$13016$1LXXoO)
        (quasiquote . g$13012$1LXXoO)
        (syntax-rules . g$13011$1LXXoO)
        (case . g$13002$1LXXoO)
        (if . g$12998$1LXXoO)
        (letrec . g$12996$1LXXoO)
        (lambda . g$12993$1LXXoO)
        (quote . g$12990$1LXXoO)
        (letrec-syntax . g$12988$1LXXoO)
        (let-syntax . g$12987$1LXXoO)
        (set! . g$12986$1LXXoO)
        (begin . g$12982$1LXXoO)
        (define-syntax . g$12980$1LXXoO)
        (define . g$12979$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13421$1LXXoO
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((char-ready? . g$13375$1LXXoO)
        (string-ci>? . g$6655$1LXXoO)
        (string-ci>=? . g$6657$1LXXoO)
        (string-ci=? . g$6653$1LXXoO)
        (string-ci<? . g$6654$1LXXoO)
        (string-ci<=? . g$6656$1LXXoO)
        (char-whitespace? . g$13370$1LXXoO)
        (char-upper-case? . g$13369$1LXXoO)
        (char-numeric? . g$13367$1LXXoO)
        (char-lower-case? . g$13366$1LXXoO)
        (char-upcase . g$13364$1LXXoO)
        (char-downcase . g$13361$1LXXoO)
        (char-ci>? . g$6665$1LXXoO)
        (char-ci>=? . g$6667$1LXXoO)
        (char-ci=? . g$6663$1LXXoO)
        (char-ci<? . g$6664$1LXXoO)
        (char-ci<=? . g$6666$1LXXoO)
        (char-alphabetic? . g$13360$1LXXoO)
        (call-with-output-file . g$8408$1LXXoO)
        (call-with-input-file . g$8407$1LXXoO)
        (write-char . g$8399$1LXXoO)
        (write . g$13328$1LXXoO)
        (with-output-to-file . g$8406$1LXXoO)
        (with-input-from-file . g$8405$1LXXoO)
        (read-char . g$8398$1LXXoO)
        (read . g$13327$1LXXoO)
        (peek-char . g$8397$1LXXoO)
        (open-output-file . g$13326$1LXXoO)
        (open-input-file . g$13325$1LXXoO)
        (newline . g$8409$1LXXoO)
        (display . g$13324$1LXXoO)
        (close-output-port . g$13323$1LXXoO)
        (close-input-port . g$13322$1LXXoO)
        (eof-object? . g$13321$1LXXoO)
        (current-error-port . g$13319$1LXXoO)
        (current-output-port . g$13318$1LXXoO)
        (current-input-port . g$13317$1LXXoO)
        (output-port? . g$13316$1LXXoO)
        (input-port? . g$13315$1LXXoO)
        (scheme-report-environment . g$9883$1LXXoO)
        (quotient . g$6603$1LXXoO)
        (null-environment . g$9882$1LXXoO)
        (remainder . g$6604$1LXXoO)
        (modulo . g$6605$1LXXoO)
        (inexact->exact . g$6600$1LXXoO)
        (force . g$6607$1LXXoO)
        (exact->inexact . g$6601$1LXXoO)
        (string-fill! . g$13256$1LXXoO)
        (string-set! . g$13255$1LXXoO)
        (set-cdr! . g$13254$1LXXoO)
        (set-car! . g$13253$1LXXoO)
        (memv . g$5160$1LXXoO)
        (memq . g$5159$1LXXoO)
        (member . g$5161$1LXXoO)
        (assv . g$5156$1LXXoO)
        (assq . g$5155$1LXXoO)
        (assoc . g$5157$1LXXoO)
        (eval . g$9885$1LXXoO)
        (zero? . g$5950$1LXXoO)
        (vector? . g$5505$1LXXoO)
        (vector-set! . g$5521$1LXXoO)
        (vector-ref . g$5520$1LXXoO)
        (vector-length . g$13201$1LXXoO)
        (vector-fill! . g$5522$1LXXoO)
        (vector->list . g$13200$1LXXoO)
        (vector . g$13199$1LXXoO)
        (values . g$13198$1LXXoO)
        (truncate . g$6002$1LXXoO)
        (tan . g$5988$1LXXoO)
        (symbol? . g$5507$1LXXoO)
        (symbol->string . g$13197$1LXXoO)
        (substring . g$13196$1LXXoO)
        (string? . g$13195$1LXXoO)
        (string>? . g$5566$1LXXoO)
        (string>=? . g$5568$1LXXoO)
        (string=? . g$5564$1LXXoO)
        (string<? . g$5565$1LXXoO)
        (string<=? . g$5567$1LXXoO)
        (string-ref . g$13194$1LXXoO)
        (string-length . g$13193$1LXXoO)
        (string-copy . g$13192$1LXXoO)
        (string-append . g$13191$1LXXoO)
        (string->symbol . g$13190$1LXXoO)
        (string->number . g$13189$1LXXoO)
        (string->list . g$13188$1LXXoO)
        (string . g$13187$1LXXoO)
        (sqrt . g$13186$1LXXoO)
        (sin . g$5982$1LXXoO)
        (round . g$6003$1LXXoO)
        (reverse . g$5524$1LXXoO)
        (real? . g$5944$1LXXoO)
        (real-part . g$5975$1LXXoO)
        (rationalize . g$5581$1LXXoO)
        (rational? . g$5945$1LXXoO)
        (procedure? . g$5509$1LXXoO)
        (positive? . g$5951$1LXXoO)
        (pair? . g$13185$1LXXoO)
        (odd? . g$5554$1LXXoO)
        (numerator . g$5973$1LXXoO)
        (number? . g$5937$1LXXoO)
        (number->string . g$13184$1LXXoO)
        (null? . g$13183$1LXXoO)
        (not . g$13182$1LXXoO)
        (negative? . g$5952$1LXXoO)
        (min . g$5556$1LXXoO)
        (max . g$5555$1LXXoO)
        (map . g$5167$1LXXoO)
        (make-vector . g$13181$1LXXoO)
        (make-string . g$13180$1LXXoO)
        (make-rectangular . g$5968$1LXXoO)
        (make-polar . g$5969$1LXXoO)
        (magnitude . g$5971$1LXXoO)
        (log . g$5991$1LXXoO)
        (list? . g$13179$1LXXoO)
        (list-tail . g$5147$1LXXoO)
        (list-ref . g$5148$1LXXoO)
        (list->vector . g$5518$1LXXoO)
        (list->string . g$5519$1LXXoO)
        (list . g$13178$1LXXoO)
        (length . g$13177$1LXXoO)
        (lcm . g$5558$1LXXoO)
        (integer? . g$5946$1LXXoO)
        (integer->char . g$13176$1LXXoO)
        (inexact? . g$5942$1LXXoO)
        (imag-part . g$5976$1LXXoO)
        (gcd . g$5557$1LXXoO)
        (for-each . g$5168$1LXXoO)
        (floor . g$6000$1LXXoO)
        (expt . g$13174$1LXXoO)
        (exp . g$5981$1LXXoO)
        (exact? . g$5941$1LXXoO)
        (even? . g$5553$1LXXoO)
        (eqv? . g$13170$1LXXoO)
        (equal? . g$13169$1LXXoO)
        (eq? . g$13168$1LXXoO)
        (dynamic-wind . g$13167$1LXXoO)
        (denominator . g$5974$1LXXoO)
        (cos . g$5985$1LXXoO)
        (cons . g$13166$1LXXoO)
        (complex? . g$5943$1LXXoO)
        (char? . g$5504$1LXXoO)
        (char>? . g$5578$1LXXoO)
        (char>=? . g$5580$1LXXoO)
        (char=? . g$5576$1LXXoO)
        (char<? . g$5577$1LXXoO)
        (char<=? . g$5579$1LXXoO)
        (char->integer . g$13165$1LXXoO)
        (ceiling . g$6001$1LXXoO)
        (call-with-values . g$13164$1LXXoO)
        (call-with-current-continuation . g$13162$1LXXoO)
        (cddddr . g$5552$1LXXoO)
        (cdddar . g$5551$1LXXoO)
        (cddadr . g$5550$1LXXoO)
        (cddaar . g$5549$1LXXoO)
        (cdaddr . g$5548$1LXXoO)
        (cdadar . g$5547$1LXXoO)
        (cdaadr . g$5546$1LXXoO)
        (cdaaar . g$5545$1LXXoO)
        (cadddr . g$5544$1LXXoO)
        (caddar . g$5543$1LXXoO)
        (cadadr . g$5542$1LXXoO)
        (cadaar . g$5541$1LXXoO)
        (caaddr . g$5540$1LXXoO)
        (caadar . g$5539$1LXXoO)
        (caaadr . g$5538$1LXXoO)
        (caaaar . g$5537$1LXXoO)
        (cdddr . g$5536$1LXXoO)
        (cddar . g$5535$1LXXoO)
        (cdadr . g$5534$1LXXoO)
        (cdaar . g$5533$1LXXoO)
        (caddr . g$5532$1LXXoO)
        (cadar . g$5531$1LXXoO)
        (caadr . g$5530$1LXXoO)
        (caaar . g$5529$1LXXoO)
        (cddr . g$5528$1LXXoO)
        (cdar . g$5527$1LXXoO)
        (cadr . g$5526$1LXXoO)
        (caar . g$5525$1LXXoO)
        (cdr . g$13161$1LXXoO)
        (car . g$13160$1LXXoO)
        (boolean? . g$5508$1LXXoO)
        (atan . g$5990$1LXXoO)
        (asin . g$5983$1LXXoO)
        (apply . g$13158$1LXXoO)
        (append . g$13157$1LXXoO)
        (angle . g$5970$1LXXoO)
        (acos . g$5986$1LXXoO)
        (abs . g$5993$1LXXoO)
        (/ . g$13156$1LXXoO)
        (* . g$13155$1LXXoO)
        (- . g$13154$1LXXoO)
        (+ . g$13153$1LXXoO)
        (>= . g$5967$1LXXoO)
        (> . g$5966$1LXXoO)
        (= . g$5963$1LXXoO)
        (<= . g$5965$1LXXoO)
        (< . g$5964$1LXXoO)
        (unquote-splicing . g$13031$1LXXoO)
        (unquote . g$13030$1LXXoO)
        (else . g$13028$1LXXoO)
        (=> . g$13027$1LXXoO)
        (... . g$13026$1LXXoO)
        (delay . g$13023$1LXXoO)
        (or . g$13021$1LXXoO)
        (and . g$13020$1LXXoO)
        (do . g$13019$1LXXoO)
        (cond . g$13018$1LXXoO)
        (let* . g$13017$1LXXoO)
        (let . g$13016$1LXXoO)
        (quasiquote . g$13012$1LXXoO)
        (syntax-rules . g$13011$1LXXoO)
        (case . g$13002$1LXXoO)
        (if . g$12998$1LXXoO)
        (letrec . g$12996$1LXXoO)
        (lambda . g$12993$1LXXoO)
        (quote . g$12990$1LXXoO)
        (letrec-syntax . g$12988$1LXXoO)
        (let-syntax . g$12987$1LXXoO)
        (set! . g$12986$1LXXoO)
        (begin . g$12982$1LXXoO)
        (define-syntax . g$12980$1LXXoO)
        (define . g$12979$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13422$1LXXoO
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$13374$1LXXoO)
        (string-titlecase . g$13373$1LXXoO)
        (string-normalize-nfkd . g$6671$1LXXoO)
        (string-normalize-nfkc . g$6670$1LXXoO)
        (string-normalize-nfd . g$6669$1LXXoO)
        (string-normalize-nfc . g$6668$1LXXoO)
        (string-foldcase . g$13372$1LXXoO)
        (string-downcase . g$13371$1LXXoO)
        (string-ci>? . g$6655$1LXXoO)
        (string-ci>=? . g$6657$1LXXoO)
        (string-ci=? . g$6653$1LXXoO)
        (string-ci<? . g$6654$1LXXoO)
        (string-ci<=? . g$6656$1LXXoO)
        (char-whitespace? . g$13370$1LXXoO)
        (char-upper-case? . g$13369$1LXXoO)
        (char-title-case? . g$13368$1LXXoO)
        (char-numeric? . g$13367$1LXXoO)
        (char-lower-case? . g$13366$1LXXoO)
        (char-general-category . g$13365$1LXXoO)
        (char-upcase . g$13364$1LXXoO)
        (char-titlecase . g$13363$1LXXoO)
        (char-foldcase . g$13362$1LXXoO)
        (char-downcase . g$13361$1LXXoO)
        (char-ci>? . g$6665$1LXXoO)
        (char-ci>=? . g$6667$1LXXoO)
        (char-ci=? . g$6663$1LXXoO)
        (char-ci<? . g$6664$1LXXoO)
        (char-ci<=? . g$6666$1LXXoO)
        (char-alphabetic? . g$13360$1LXXoO)
        (make-variable-transformer . g$9584$1LXXoO)
        (identifier? . g$9904$1LXXoO)
        (generate-temporaries . g$9893$1LXXoO)
        (free-identifier=? . g$9894$1LXXoO)
        (syntax->datum . g$9906$1LXXoO)
        (datum->syntax . g$9905$1LXXoO)
        (bound-identifier=? . g$9895$1LXXoO)
        (record-type-descriptor? . g$13359$1LXXoO)
        (record-predicate . g$13358$1LXXoO)
        (record-mutator . g$13357$1LXXoO)
        (record-constructor . g$13356$1LXXoO)
        (record-accessor . g$13355$1LXXoO)
        (make-record-type-descriptor . g$13354$1LXXoO)
        (make-record-constructor-descriptor . g$13353$1LXXoO)
        (record? . g$13352$1LXXoO)
        (record-type-uid . g$13351$1LXXoO)
        (record-type-sealed? . g$13350$1LXXoO)
        (record-type-parent . g$13349$1LXXoO)
        (record-type-opaque? . g$13348$1LXXoO)
        (record-type-name . g$13347$1LXXoO)
        (record-type-generative? . g$13346$1LXXoO)
        (record-type-field-names . g$13345$1LXXoO)
        (record-rtd . g$13344$1LXXoO)
        (record-field-mutable? . g$13343$1LXXoO)
        (delete-file . g$5810$1LXXoO)
        (file-exists? . g$5809$1LXXoO)
        (vector-sort! . g$13342$1LXXoO)
        (vector-sort . g$13341$1LXXoO)
        (list-sort . g$6624$1LXXoO)
        (symbol-hash . g$13340$1LXXoO)
        (string-ci-hash . g$13339$1LXXoO)
        (string-hash . g$13338$1LXXoO)
        (equal-hash . g$13337$1LXXoO)
        (hashtable-equivalence-function . g$13336$1LXXoO)
        (make-hashtable . g$13335$1LXXoO)
        (hashtable-hash-function . g$13334$1LXXoO)
        (make-eqv-hashtable . g$5777$1LXXoO)
        (make-eq-hashtable . g$5776$1LXXoO)
        (hashtable? . g$13333$1LXXoO)
        (hashtable-update! . g$5783$1LXXoO)
        (hashtable-size . g$5778$1LXXoO)
        (hashtable-set! . g$5780$1LXXoO)
        (hashtable-ref . g$5779$1LXXoO)
        (hashtable-mutable? . g$13332$1LXXoO)
        (hashtable-keys . g$13331$1LXXoO)
        (hashtable-entries . g$13330$1LXXoO)
        (hashtable-delete! . g$5781$1LXXoO)
        (hashtable-copy . g$13329$1LXXoO)
        (hashtable-contains? . g$5782$1LXXoO)
        (hashtable-clear! . g$5784$1LXXoO)
        (call-with-output-file . g$8408$1LXXoO)
        (call-with-input-file . g$8407$1LXXoO)
        (write-char . g$8399$1LXXoO)
        (write . g$13328$1LXXoO)
        (with-output-to-file . g$8406$1LXXoO)
        (with-input-from-file . g$8405$1LXXoO)
        (read-char . g$8398$1LXXoO)
        (read . g$13327$1LXXoO)
        (peek-char . g$8397$1LXXoO)
        (open-output-file . g$13326$1LXXoO)
        (open-input-file . g$13325$1LXXoO)
        (newline . g$8409$1LXXoO)
        (display . g$13324$1LXXoO)
        (close-output-port . g$13323$1LXXoO)
        (close-input-port . g$13322$1LXXoO)
        (eof-object? . g$13321$1LXXoO)
        (eof-object . g$13320$1LXXoO)
        (current-error-port . g$13319$1LXXoO)
        (current-output-port . g$13318$1LXXoO)
        (current-input-port . g$13317$1LXXoO)
        (output-port? . g$13316$1LXXoO)
        (input-port? . g$13315$1LXXoO)
        (utf-8-codec . g$13314$1LXXoO)
        (utf-16-codec . g$13313$1LXXoO)
        (transcoder-error-handling-mode . g$13312$1LXXoO)
        (transcoder-eol-style . g$13311$1LXXoO)
        (transcoder-codec . g$13310$1LXXoO)
        (transcoded-port . g$13309$1LXXoO)
        (textual-port? . g$13308$1LXXoO)
        (string->bytevector . g$13307$1LXXoO)
        (standard-output-port . g$13306$1LXXoO)
        (standard-input-port . g$13305$1LXXoO)
        (standard-error-port . g$13304$1LXXoO)
        (set-port-position! . g$13303$1LXXoO)
        (put-u8 . g$13302$1LXXoO)
        (put-string . g$13301$1LXXoO)
        (put-datum . g$8377$1LXXoO)
        (put-char . g$13300$1LXXoO)
        (put-bytevector . g$13299$1LXXoO)
        (port? . g$8382$1LXXoO)
        (port-transcoder . g$13298$1LXXoO)
        (port-position . g$13297$1LXXoO)
        (port-has-set-port-position!? . g$13296$1LXXoO)
        (port-has-port-position? . g$13295$1LXXoO)
        (port-eof? . g$13294$1LXXoO)
        (output-port-buffer-mode . g$13293$1LXXoO)
        (open-string-output-port . g$8381$1LXXoO)
        (open-string-input-port . g$13292$1LXXoO)
        (open-file-output-port . g$13291$1LXXoO)
        (open-file-input/output-port . g$13290$1LXXoO)
        (open-file-input-port . g$13289$1LXXoO)
        (open-bytevector-output-port . g$13288$1LXXoO)
        (open-bytevector-input-port . g$13287$1LXXoO)
        (native-transcoder . g$13286$1LXXoO)
        (native-eol-style . g$13285$1LXXoO)
        (make-transcoder . g$13284$1LXXoO)
        (latin-1-codec . g$13283$1LXXoO)
        (make-i/o-write-error . g$6434$1LXXoO)
        (make-i/o-read-error . g$6421$1LXXoO)
        (make-i/o-port-error . g$6529$1LXXoO)
        (make-i/o-invalid-position-error . g$6447$1LXXoO)
        (make-i/o-filename-error . g$6462$1LXXoO)
        (make-i/o-file-protection-error . g$6477$1LXXoO)
        (make-i/o-file-is-read-only-error . g$6490$1LXXoO)
        (make-i/o-file-does-not-exist-error . g$6516$1LXXoO)
        (make-i/o-file-already-exists-error . g$6503$1LXXoO)
        (make-i/o-error . g$6408$1LXXoO)
        (make-i/o-encoding-error . g$6557$1LXXoO)
        (make-i/o-decoding-error . g$6544$1LXXoO)
        (make-custom-textual-output-port . g$13282$1LXXoO)
        (make-custom-textual-input/output-port . g$13281$1LXXoO)
        (make-custom-textual-input-port . g$13280$1LXXoO)
        (make-custom-binary-output-port . g$13279$1LXXoO)
        (make-custom-binary-input/output-port . g$13278$1LXXoO)
        (make-custom-binary-input-port . g$13277$1LXXoO)
        (make-bytevector . g$13276$1LXXoO)
        (lookahead-u8 . g$13275$1LXXoO)
        (lookahead-char . g$13274$1LXXoO)
        (i/o-write-error? . g$6435$1LXXoO)
        (i/o-read-error? . g$6422$1LXXoO)
        (i/o-port-error? . g$6531$1LXXoO)
        (i/o-invalid-position-error? . g$6449$1LXXoO)
        (i/o-error-position . g$6450$1LXXoO)
        (i/o-filename-error? . g$6464$1LXXoO)
        (i/o-file-protection-error? . g$6478$1LXXoO)
        (i/o-file-is-read-only-error? . g$6491$1LXXoO)
        (i/o-file-does-not-exist-error? . g$6517$1LXXoO)
        (i/o-file-already-exists-error? . g$6504$1LXXoO)
        (i/o-error? . g$6409$1LXXoO)
        (i/o-error-port . g$6532$1LXXoO)
        (i/o-error-filename . g$6465$1LXXoO)
        (i/o-encoding-error? . g$6559$1LXXoO)
        (i/o-encoding-error-char . g$6560$1LXXoO)
        (i/o-decoding-error? . g$6545$1LXXoO)
        (get-u8 . g$13273$1LXXoO)
        (get-string-n! . g$13272$1LXXoO)
        (get-string-n . g$13271$1LXXoO)
        (get-string-all . g$13270$1LXXoO)
        (get-line . g$13269$1LXXoO)
        (get-datum . g$8378$1LXXoO)
        (get-char . g$13268$1LXXoO)
        (get-bytevector-some . g$13267$1LXXoO)
        (get-bytevector-n! . g$13266$1LXXoO)
        (get-bytevector-n . g$13265$1LXXoO)
        (get-bytevector-all . g$13264$1LXXoO)
        (flush-output-port . g$13263$1LXXoO)
        (close-port . g$13262$1LXXoO)
        (call-with-string-output-port . g$8383$1LXXoO)
        (call-with-port . g$8384$1LXXoO)
        (call-with-bytevector-output-port . g$13261$1LXXoO)
        (bytevector->string . g$13260$1LXXoO)
        (buffer-mode? . g$13259$1LXXoO)
        (binary-port? . g$13258$1LXXoO)
        (exit . g$13257$1LXXoO)
        (command-line . g$12922$1LXXoO)
        (remove . g$5172$1LXXoO)
        (remv . g$5173$1LXXoO)
        (remp . g$5153$1LXXoO)
        (remq . g$5174$1LXXoO)
        (partition . g$5152$1LXXoO)
        (memv . g$5160$1LXXoO)
        (memq . g$5159$1LXXoO)
        (memp . g$5162$1LXXoO)
        (member . g$5161$1LXXoO)
        (exists . g$5166$1LXXoO)
        (for-all . g$5165$1LXXoO)
        (fold-right . g$5171$1LXXoO)
        (fold-left . g$5170$1LXXoO)
        (find . g$5151$1LXXoO)
        (filter . g$5154$1LXXoO)
        (cons* . g$5169$1LXXoO)
        (assv . g$5156$1LXXoO)
        (assq . g$5155$1LXXoO)
        (assp . g$5158$1LXXoO)
        (assoc . g$5157$1LXXoO)
        (with-exception-handler . g$13252$1LXXoO)
        (raise-continuable . g$13251$1LXXoO)
        (raise . g$13250$1LXXoO)
        (make-enumeration . g$8469$1LXXoO)
        (enum-set=? . g$8476$1LXXoO)
        (enum-set-universe . g$8470$1LXXoO)
        (enum-set-union . g$8477$1LXXoO)
        (enum-set-subset? . g$8475$1LXXoO)
        (enum-set-projection . g$8481$1LXXoO)
        (enum-set-member? . g$8474$1LXXoO)
        (enum-set-intersection . g$8478$1LXXoO)
        (enum-set-indexer . g$8471$1LXXoO)
        (enum-set-difference . g$8479$1LXXoO)
        (enum-set-constructor . g$8472$1LXXoO)
        (enum-set-complement . g$8480$1LXXoO)
        (enum-set->list . g$8473$1LXXoO)
        (who-condition? . g$6326$1LXXoO)
        (warning? . g$6245$1LXXoO)
        (violation? . g$6284$1LXXoO)
        (undefined-violation? . g$6396$1LXXoO)
        (syntax-violation? . g$6381$1LXXoO)
        (syntax-violation-subform . g$6383$1LXXoO)
        (syntax-violation-form . g$6382$1LXXoO)
        (syntax-violation . g$9903$1LXXoO)
        (simple-conditions . g$13249$1LXXoO)
        (serious-condition? . g$6258$1LXXoO)
        (non-continuable-violation? . g$6340$1LXXoO)
        (message-condition? . g$6231$1LXXoO)
        (make-who-condition . g$6324$1LXXoO)
        (make-warning . g$6244$1LXXoO)
        (make-violation . g$6283$1LXXoO)
        (make-undefined-violation . g$6395$1LXXoO)
        (make-syntax-violation . g$6378$1LXXoO)
        (make-serious-condition . g$6257$1LXXoO)
        (make-non-continuable-violation . g$6339$1LXXoO)
        (make-message-condition . g$6229$1LXXoO)
        (make-lexical-violation . g$6365$1LXXoO)
        (make-irritants-condition . g$6309$1LXXoO)
        (make-implementation-restriction-violation . g$6352$1LXXoO)
        (make-error . g$6270$1LXXoO)
        (make-assertion-violation . g$6296$1LXXoO)
        (lexical-violation? . g$6366$1LXXoO)
        (irritants-condition? . g$6311$1LXXoO)
        (implementation-restriction-violation? . g$6353$1LXXoO)
        (error? . g$6271$1LXXoO)
        (condition-who . g$6327$1LXXoO)
        (condition-predicate . g$13248$1LXXoO)
        (condition-message . g$6232$1LXXoO)
        (condition-irritants . g$6312$1LXXoO)
        (condition-accessor . g$13247$1LXXoO)
        (condition . g$13246$1LXXoO)
        (assertion-violation? . g$6297$1LXXoO)
        (condition? . g$13245$1LXXoO)
        (utf32->string . g$13244$1LXXoO)
        (utf16->string . g$13243$1LXXoO)
        (utf8->string . g$13242$1LXXoO)
        (uint-list->bytevector . g$13241$1LXXoO)
        (u8-list->bytevector . g$13240$1LXXoO)
        (string->utf8 . g$13239$1LXXoO)
        (string->utf32 . g$13238$1LXXoO)
        (string->utf16 . g$13237$1LXXoO)
        (sint-list->bytevector . g$13236$1LXXoO)
        (native-endianness . g$5816$1LXXoO)
        (bytevector? . g$5506$1LXXoO)
        (bytevector=? . g$13235$1LXXoO)
        (bytevector-uint-set! . g$13234$1LXXoO)
        (bytevector-uint-ref . g$13233$1LXXoO)
        (bytevector-u8-set! . g$13232$1LXXoO)
        (bytevector-u8-ref . g$13231$1LXXoO)
        (bytevector-u64-set! . g$5837$1LXXoO)
        (bytevector-u64-ref . g$5833$1LXXoO)
        (bytevector-u64-native-set! . g$5839$1LXXoO)
        (bytevector-u64-native-ref . g$5835$1LXXoO)
        (bytevector-u32-set! . g$5829$1LXXoO)
        (bytevector-u32-ref . g$5825$1LXXoO)
        (bytevector-u32-native-set! . g$5831$1LXXoO)
        (bytevector-u32-native-ref . g$5827$1LXXoO)
        (bytevector-u16-set! . g$5821$1LXXoO)
        (bytevector-u16-ref . g$5817$1LXXoO)
        (bytevector-u16-native-set! . g$5823$1LXXoO)
        (bytevector-u16-native-ref . g$5819$1LXXoO)
        (bytevector-sint-set! . g$13230$1LXXoO)
        (bytevector-sint-ref . g$13229$1LXXoO)
        (bytevector-s8-set! . g$13228$1LXXoO)
        (bytevector-s8-ref . g$13227$1LXXoO)
        (bytevector-s64-set! . g$5838$1LXXoO)
        (bytevector-s64-ref . g$5834$1LXXoO)
        (bytevector-s64-native-set! . g$5840$1LXXoO)
        (bytevector-s64-native-ref . g$5836$1LXXoO)
        (bytevector-s32-set! . g$5830$1LXXoO)
        (bytevector-s32-ref . g$5826$1LXXoO)
        (bytevector-s32-native-set! . g$5832$1LXXoO)
        (bytevector-s32-native-ref . g$5828$1LXXoO)
        (bytevector-s16-set! . g$5822$1LXXoO)
        (bytevector-s16-ref . g$5818$1LXXoO)
        (bytevector-s16-native-set! . g$5824$1LXXoO)
        (bytevector-s16-native-ref . g$5820$1LXXoO)
        (bytevector-length . g$13226$1LXXoO)
        (bytevector-ieee-single-set! . g$13225$1LXXoO)
        (bytevector-ieee-single-ref . g$13224$1LXXoO)
        (bytevector-ieee-single-native-set! . g$5843$1LXXoO)
        (bytevector-ieee-single-native-ref . g$5841$1LXXoO)
        (bytevector-ieee-double-set! . g$13223$1LXXoO)
        (bytevector-ieee-double-ref . g$13222$1LXXoO)
        (bytevector-ieee-double-native-set! . g$5844$1LXXoO)
        (bytevector-ieee-double-native-ref . g$5842$1LXXoO)
        (bytevector-fill! . g$13221$1LXXoO)
        (bytevector-copy! . g$13220$1LXXoO)
        (bytevector-copy . g$13219$1LXXoO)
        (bytevector->uint-list . g$13218$1LXXoO)
        (bytevector->u8-list . g$13217$1LXXoO)
        (bytevector->sint-list . g$13216$1LXXoO)
        (no-nans-violation? . g$6586$1LXXoO)
        (no-infinities-violation? . g$6573$1LXXoO)
        (make-no-nans-violation . g$6585$1LXXoO)
        (make-no-infinities-violation . g$6572$1LXXoO)
        (real->flonum . g$13215$1LXXoO)
        (flzero? . g$7823$1LXXoO)
        (fltruncate . g$7818$1LXXoO)
        (fltan . g$7804$1LXXoO)
        (flsqrt . g$7809$1LXXoO)
        (flsin . g$7802$1LXXoO)
        (flround . g$7819$1LXXoO)
        (flpositive? . g$7821$1LXXoO)
        (flonum? . g$5511$1LXXoO)
        (flodd? . g$7825$1LXXoO)
        (flnumerator . g$13214$1LXXoO)
        (flnegative? . g$7822$1LXXoO)
        (flnan? . g$7801$1LXXoO)
        (flmod0 . g$7786$1LXXoO)
        (flmod . g$7785$1LXXoO)
        (flmin . g$7827$1LXXoO)
        (flmax . g$7826$1LXXoO)
        (fllog . g$7808$1LXXoO)
        (flinteger? . g$7794$1LXXoO)
        (flinfinite? . g$7800$1LXXoO)
        (flfloor . g$7817$1LXXoO)
        (flfinite? . g$7795$1LXXoO)
        (flexpt . g$7811$1LXXoO)
        (flexp . g$7810$1LXXoO)
        (fleven? . g$7824$1LXXoO)
        (fldiv0-and-mod0 . g$7793$1LXXoO)
        (fldiv0 . g$7780$1LXXoO)
        (fldiv-and-mod . g$7787$1LXXoO)
        (fldiv . g$7792$1LXXoO)
        (fldenominator . g$13213$1LXXoO)
        (flcos . g$7803$1LXXoO)
        (flceiling . g$7812$1LXXoO)
        (flatan . g$7807$1LXXoO)
        (flasin . g$7805$1LXXoO)
        (flacos . g$7806$1LXXoO)
        (flabs . g$7820$1LXXoO)
        (fl>? . g$7774$1LXXoO)
        (fl>=? . g$7775$1LXXoO)
        (fl=? . g$7771$1LXXoO)
        (fl<? . g$7772$1LXXoO)
        (fl<=? . g$7773$1LXXoO)
        (fl/ . g$7770$1LXXoO)
        (fl- . g$7769$1LXXoO)
        (fl+ . g$7767$1LXXoO)
        (fl* . g$7768$1LXXoO)
        (fixnum->flonum . g$13212$1LXXoO)
        (fxzero? . g$6867$1LXXoO)
        (fxxor . g$6830$1LXXoO)
        (fxrotate-bit-field . g$6905$1LXXoO)
        (fxreverse-bit-field . g$6906$1LXXoO)
        (fxpositive? . g$6857$1LXXoO)
        (fxodd? . g$6877$1LXXoO)
        (fxnot . g$6811$1LXXoO)
        (fxnegative? . g$6862$1LXXoO)
        (fxmod0 . g$6841$1LXXoO)
        (fxmod . g$6840$1LXXoO)
        (fxmin . g$6879$1LXXoO)
        (fxmax . g$6878$1LXXoO)
        (fxlength . g$6808$1LXXoO)
        (fxior . g$6829$1LXXoO)
        (fxif . g$6887$1LXXoO)
        (fxfirst-bit-set . g$6809$1LXXoO)
        (fxeven? . g$6872$1LXXoO)
        (fxdiv0-and-mod0 . g$6852$1LXXoO)
        (fxdiv0 . g$6847$1LXXoO)
        (fxdiv-and-mod . g$6842$1LXXoO)
        (fxdiv . g$6835$1LXXoO)
        (fxcopy-bit-field . g$6902$1LXXoO)
        (fxcopy-bit . g$6892$1LXXoO)
        (fxbit-set? . g$6810$1LXXoO)
        (fxbit-field . g$6897$1LXXoO)
        (fxbit-count . g$6803$1LXXoO)
        (fxarithmetic-shift-right . g$6904$1LXXoO)
        (fxarithmetic-shift-left . g$6903$1LXXoO)
        (fxarithmetic-shift . g$6798$1LXXoO)
        (fxand . g$6828$1LXXoO)
        (fx>? . g$6820$1LXXoO)
        (fx>=? . g$6821$1LXXoO)
        (fx=? . g$6817$1LXXoO)
        (fx<? . g$6818$1LXXoO)
        (fx<=? . g$6819$1LXXoO)
        (fx-/carry . g$6881$1LXXoO)
        (fx- . g$6792$1LXXoO)
        (fx+/carry . g$6882$1LXXoO)
        (fx+ . g$6790$1LXXoO)
        (fx*/carry . g$6880$1LXXoO)
        (fx* . g$6791$1LXXoO)
        (greatest-fixnum . g$6761$1LXXoO)
        (least-fixnum . g$6762$1LXXoO)
        (fixnum-width . g$5512$1LXXoO)
        (fixnum? . g$5510$1LXXoO)
        (bitwise-rotate-bit-field . g$6735$1LXXoO)
        (bitwise-reverse-bit-field . g$13211$1LXXoO)
        (bitwise-length . g$13210$1LXXoO)
        (bitwise-if . g$6729$1LXXoO)
        (bitwise-first-bit-set . g$13209$1LXXoO)
        (bitwise-copy-bit-field . g$6732$1LXXoO)
        (bitwise-copy-bit . g$6730$1LXXoO)
        (bitwise-bit-set? . g$13208$1LXXoO)
        (bitwise-bit-field . g$6731$1LXXoO)
        (bitwise-bit-count . g$13207$1LXXoO)
        (bitwise-xor . g$13206$1LXXoO)
        (bitwise-ior . g$13205$1LXXoO)
        (bitwise-and . g$13204$1LXXoO)
        (bitwise-not . g$13203$1LXXoO)
        (bitwise-arithmetic-shift-right . g$6734$1LXXoO)
        (bitwise-arithmetic-shift-left . g$6733$1LXXoO)
        (bitwise-arithmetic-shift . g$13202$1LXXoO)
        (zero? . g$5950$1LXXoO)
        (vector? . g$5505$1LXXoO)
        (vector-set! . g$5521$1LXXoO)
        (vector-ref . g$5520$1LXXoO)
        (vector-map . g$5584$1LXXoO)
        (vector-length . g$13201$1LXXoO)
        (vector-for-each . g$5585$1LXXoO)
        (vector-fill! . g$5522$1LXXoO)
        (vector->list . g$13200$1LXXoO)
        (vector . g$13199$1LXXoO)
        (values . g$13198$1LXXoO)
        (truncate . g$6002$1LXXoO)
        (tan . g$5988$1LXXoO)
        (symbol? . g$5507$1LXXoO)
        (symbol=? . g$5569$1LXXoO)
        (symbol->string . g$13197$1LXXoO)
        (substring . g$13196$1LXXoO)
        (string? . g$13195$1LXXoO)
        (string>? . g$5566$1LXXoO)
        (string>=? . g$5568$1LXXoO)
        (string=? . g$5564$1LXXoO)
        (string<? . g$5565$1LXXoO)
        (string<=? . g$5567$1LXXoO)
        (string-ref . g$13194$1LXXoO)
        (string-length . g$13193$1LXXoO)
        (string-for-each . g$5586$1LXXoO)
        (string-copy . g$13192$1LXXoO)
        (string-append . g$13191$1LXXoO)
        (string->symbol . g$13190$1LXXoO)
        (string->number . g$13189$1LXXoO)
        (string->list . g$13188$1LXXoO)
        (string . g$13187$1LXXoO)
        (sqrt . g$13186$1LXXoO)
        (sin . g$5982$1LXXoO)
        (round . g$6003$1LXXoO)
        (reverse . g$5524$1LXXoO)
        (real? . g$5944$1LXXoO)
        (real-valued? . g$5947$1LXXoO)
        (real-part . g$5975$1LXXoO)
        (rationalize . g$5581$1LXXoO)
        (rational? . g$5945$1LXXoO)
        (rational-valued? . g$5948$1LXXoO)
        (procedure? . g$5509$1LXXoO)
        (positive? . g$5951$1LXXoO)
        (pair? . g$13185$1LXXoO)
        (odd? . g$5554$1LXXoO)
        (numerator . g$5973$1LXXoO)
        (number? . g$5937$1LXXoO)
        (number->string . g$13184$1LXXoO)
        (null? . g$13183$1LXXoO)
        (not . g$13182$1LXXoO)
        (negative? . g$5952$1LXXoO)
        (nan? . g$5938$1LXXoO)
        (min . g$5556$1LXXoO)
        (max . g$5555$1LXXoO)
        (map . g$5167$1LXXoO)
        (make-vector . g$13181$1LXXoO)
        (make-string . g$13180$1LXXoO)
        (make-rectangular . g$5968$1LXXoO)
        (make-polar . g$5969$1LXXoO)
        (magnitude . g$5971$1LXXoO)
        (log . g$5991$1LXXoO)
        (list? . g$13179$1LXXoO)
        (list-tail . g$5147$1LXXoO)
        (list-ref . g$5148$1LXXoO)
        (list->vector . g$5518$1LXXoO)
        (list->string . g$5519$1LXXoO)
        (list . g$13178$1LXXoO)
        (length . g$13177$1LXXoO)
        (lcm . g$5558$1LXXoO)
        (integer? . g$5946$1LXXoO)
        (integer-valued? . g$5949$1LXXoO)
        (integer->char . g$13176$1LXXoO)
        (infinite? . g$5940$1LXXoO)
        (inexact? . g$5942$1LXXoO)
        (inexact . g$13175$1LXXoO)
        (imag-part . g$5976$1LXXoO)
        (gcd . g$5557$1LXXoO)
        (for-each . g$5168$1LXXoO)
        (floor . g$6000$1LXXoO)
        (finite? . g$5939$1LXXoO)
        (expt . g$13174$1LXXoO)
        (exp . g$5981$1LXXoO)
        (exact? . g$5941$1LXXoO)
        (exact-integer-sqrt . g$13173$1LXXoO)
        (exact . g$13172$1LXXoO)
        (even? . g$5553$1LXXoO)
        (error . g$13171$1LXXoO)
        (eqv? . g$13170$1LXXoO)
        (equal? . g$13169$1LXXoO)
        (eq? . g$13168$1LXXoO)
        (dynamic-wind . g$13167$1LXXoO)
        (div0-and-mod0 . g$5517$1LXXoO)
        (mod0 . g$5515$1LXXoO)
        (div0 . g$5513$1LXXoO)
        (div-and-mod . g$5516$1LXXoO)
        (mod . g$5514$1LXXoO)
        (div . g$5992$1LXXoO)
        (denominator . g$5974$1LXXoO)
        (cos . g$5985$1LXXoO)
        (cons . g$13166$1LXXoO)
        (complex? . g$5943$1LXXoO)
        (char? . g$5504$1LXXoO)
        (char>? . g$5578$1LXXoO)
        (char>=? . g$5580$1LXXoO)
        (char=? . g$5576$1LXXoO)
        (char<? . g$5577$1LXXoO)
        (char<=? . g$5579$1LXXoO)
        (char->integer . g$13165$1LXXoO)
        (ceiling . g$6001$1LXXoO)
        (call-with-values . g$13164$1LXXoO)
        (call/cc . g$13163$1LXXoO)
        (call-with-current-continuation . g$13162$1LXXoO)
        (cddddr . g$5552$1LXXoO)
        (cdddar . g$5551$1LXXoO)
        (cddadr . g$5550$1LXXoO)
        (cddaar . g$5549$1LXXoO)
        (cdaddr . g$5548$1LXXoO)
        (cdadar . g$5547$1LXXoO)
        (cdaadr . g$5546$1LXXoO)
        (cdaaar . g$5545$1LXXoO)
        (cadddr . g$5544$1LXXoO)
        (caddar . g$5543$1LXXoO)
        (cadadr . g$5542$1LXXoO)
        (cadaar . g$5541$1LXXoO)
        (caaddr . g$5540$1LXXoO)
        (caadar . g$5539$1LXXoO)
        (caaadr . g$5538$1LXXoO)
        (caaaar . g$5537$1LXXoO)
        (cdddr . g$5536$1LXXoO)
        (cddar . g$5535$1LXXoO)
        (cdadr . g$5534$1LXXoO)
        (cdaar . g$5533$1LXXoO)
        (caddr . g$5532$1LXXoO)
        (cadar . g$5531$1LXXoO)
        (caadr . g$5530$1LXXoO)
        (caaar . g$5529$1LXXoO)
        (cddr . g$5528$1LXXoO)
        (cdar . g$5527$1LXXoO)
        (cadr . g$5526$1LXXoO)
        (caar . g$5525$1LXXoO)
        (cdr . g$13161$1LXXoO)
        (car . g$13160$1LXXoO)
        (boolean? . g$5508$1LXXoO)
        (boolean=? . g$5570$1LXXoO)
        (atan . g$5990$1LXXoO)
        (assertion-violation . g$13159$1LXXoO)
        (asin . g$5983$1LXXoO)
        (apply . g$13158$1LXXoO)
        (append . g$13157$1LXXoO)
        (angle . g$5970$1LXXoO)
        (acos . g$5986$1LXXoO)
        (abs . g$5993$1LXXoO)
        (/ . g$13156$1LXXoO)
        (* . g$13155$1LXXoO)
        (- . g$13154$1LXXoO)
        (+ . g$13153$1LXXoO)
        (>= . g$5967$1LXXoO)
        (> . g$5966$1LXXoO)
        (= . g$5963$1LXXoO)
        (<= . g$5965$1LXXoO)
        (< . g$5964$1LXXoO)
        (&no-nans . g$13083$1LXXoO)
        (&no-infinities . g$13082$1LXXoO)
        (&i/o-encoding . g$13081$1LXXoO)
        (&i/o-decoding . g$13080$1LXXoO)
        (&i/o-port . g$13079$1LXXoO)
        (&i/o-file-does-not-exist . g$13078$1LXXoO)
        (&i/o-file-already-exists . g$13077$1LXXoO)
        (&i/o-file-is-read-only . g$13076$1LXXoO)
        (&i/o-file-protection . g$13075$1LXXoO)
        (&i/o-filename . g$13074$1LXXoO)
        (&i/o-invalid-position . g$13073$1LXXoO)
        (&i/o-write . g$13072$1LXXoO)
        (&i/o-read . g$13071$1LXXoO)
        (&i/o . g$13070$1LXXoO)
        (&non-continuable . g$13069$1LXXoO)
        (&undefined . g$13068$1LXXoO)
        (&syntax . g$13067$1LXXoO)
        (&lexical . g$13066$1LXXoO)
        (&implementation-restriction . g$13065$1LXXoO)
        (&who . g$13064$1LXXoO)
        (&irritants . g$13063$1LXXoO)
        (&assertion . g$13062$1LXXoO)
        (&violation . g$13061$1LXXoO)
        (&error . g$13060$1LXXoO)
        (&serious . g$13059$1LXXoO)
        (&warning . g$13058$1LXXoO)
        (&message . g$13057$1LXXoO)
        (&condition . g$13056$1LXXoO)
        (define-condition-type . g$13055$1LXXoO)
        (define-enumeration . g$13054$1LXXoO)
        (define-record-type . g$13053$1LXXoO)
        (parent-rtd . g$13052$1LXXoO)
        (nongenerative . g$13051$1LXXoO)
        (opaque . g$13050$1LXXoO)
        (sealed . g$13049$1LXXoO)
        (protocol . g$13048$1LXXoO)
        (parent . g$13047$1LXXoO)
        (immutable . g$13046$1LXXoO)
        (mutable . g$13045$1LXXoO)
        (fields . g$13044$1LXXoO)
        (error-handling-mode . g$13043$1LXXoO)
        (file-options . g$13042$1LXXoO)
        (buffer-mode . g$13041$1LXXoO)
        (eol-style . g$13040$1LXXoO)
        (guard . g$13039$1LXXoO)
        (unsyntax-splicing . g$13033$1LXXoO)
        (unsyntax . g$13032$1LXXoO)
        (unquote-splicing . g$13031$1LXXoO)
        (unquote . g$13030$1LXXoO)
        (_ . g$13029$1LXXoO)
        (else . g$13028$1LXXoO)
        (=> . g$13027$1LXXoO)
        (... . g$13026$1LXXoO)
        (assert . g$13025$1LXXoO)
        (endianness . g$13024$1LXXoO)
        (or . g$13021$1LXXoO)
        (and . g$13020$1LXXoO)
        (do . g$13019$1LXXoO)
        (cond . g$13018$1LXXoO)
        (let* . g$13017$1LXXoO)
        (let . g$13016$1LXXoO)
        (identifier-syntax . g$13015$1LXXoO)
        (with-syntax . g$13014$1LXXoO)
        (quasisyntax . g$13013$1LXXoO)
        (quasiquote . g$13012$1LXXoO)
        (syntax-rules . g$13011$1LXXoO)
        (let-values . g$13007$1LXXoO)
        (let*-values . g$13006$1LXXoO)
        (record-constructor-descriptor . g$13005$1LXXoO)
        (record-type-descriptor . g$13004$1LXXoO)
        (case . g$13002$1LXXoO)
        (unless . g$13000$1LXXoO)
        (when . g$12999$1LXXoO)
        (if . g$12998$1LXXoO)
        (letrec* . g$12997$1LXXoO)
        (letrec . g$12996$1LXXoO)
        (case-lambda . g$12994$1LXXoO)
        (lambda . g$12993$1LXXoO)
        (syntax . g$12992$1LXXoO)
        (syntax-case . g$12991$1LXXoO)
        (quote . g$12990$1LXXoO)
        (letrec-syntax . g$12988$1LXXoO)
        (let-syntax . g$12987$1LXXoO)
        (set! . g$12986$1LXXoO)
        (begin . g$12982$1LXXoO)
        (define-syntax . g$12980$1LXXoO)
        (define . g$12979$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13423$1LXXoO
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((scheme-report-environment . g$9883$1LXXoO)
        (quotient . g$6603$1LXXoO)
        (null-environment . g$9882$1LXXoO)
        (remainder . g$6604$1LXXoO)
        (modulo . g$6605$1LXXoO)
        (inexact->exact . g$6600$1LXXoO)
        (force . g$6607$1LXXoO)
        (exact->inexact . g$6601$1LXXoO)
        (delay . g$13023$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13424$1LXXoO
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$13019$1LXXoO)
        (unless . g$13000$1LXXoO)
        (when . g$12999$1LXXoO)
        (case-lambda . g$12994$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13425$1LXXoO
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$9885$1LXXoO) (environment . g$9881$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13426$1LXXoO
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$13254$1LXXoO) (set-car! . g$13253$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13427$1LXXoO
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$13256$1LXXoO) (string-set! . g$13255$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13428$1LXXoO
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$13257$1LXXoO) (command-line . g$12922$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13429$1LXXoO
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$9584$1LXXoO)
        (identifier? . g$9904$1LXXoO)
        (generate-temporaries . g$9893$1LXXoO)
        (free-identifier=? . g$9894$1LXXoO)
        (syntax->datum . g$9906$1LXXoO)
        (datum->syntax . g$9905$1LXXoO)
        (bound-identifier=? . g$9895$1LXXoO)
        (syntax-violation . g$9903$1LXXoO)
        (unsyntax-splicing . g$13033$1LXXoO)
        (unsyntax . g$13032$1LXXoO)
        (_ . g$13029$1LXXoO)
        (... . g$13026$1LXXoO)
        (with-syntax . g$13014$1LXXoO)
        (quasisyntax . g$13013$1LXXoO)
        (syntax . g$12992$1LXXoO)
        (syntax-case . g$12991$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13430$1LXXoO
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$5810$1LXXoO)
        (file-exists? . g$5809$1LXXoO)
        (make-i/o-write-error . g$6434$1LXXoO)
        (make-i/o-read-error . g$6421$1LXXoO)
        (make-i/o-port-error . g$6529$1LXXoO)
        (make-i/o-invalid-position-error . g$6447$1LXXoO)
        (make-i/o-filename-error . g$6462$1LXXoO)
        (make-i/o-file-protection-error . g$6477$1LXXoO)
        (make-i/o-file-is-read-only-error . g$6490$1LXXoO)
        (make-i/o-file-does-not-exist-error . g$6516$1LXXoO)
        (make-i/o-file-already-exists-error . g$6503$1LXXoO)
        (make-i/o-error . g$6408$1LXXoO)
        (i/o-write-error? . g$6435$1LXXoO)
        (i/o-read-error? . g$6422$1LXXoO)
        (i/o-port-error? . g$6531$1LXXoO)
        (i/o-invalid-position-error? . g$6449$1LXXoO)
        (i/o-error-position . g$6450$1LXXoO)
        (i/o-filename-error? . g$6464$1LXXoO)
        (i/o-file-protection-error? . g$6478$1LXXoO)
        (i/o-file-is-read-only-error? . g$6491$1LXXoO)
        (i/o-file-does-not-exist-error? . g$6517$1LXXoO)
        (i/o-file-already-exists-error? . g$6504$1LXXoO)
        (i/o-error? . g$6409$1LXXoO)
        (i/o-error-port . g$6532$1LXXoO)
        (i/o-error-filename . g$6465$1LXXoO)
        (&i/o-port . g$13079$1LXXoO)
        (&i/o-file-does-not-exist . g$13078$1LXXoO)
        (&i/o-file-already-exists . g$13077$1LXXoO)
        (&i/o-file-is-read-only . g$13076$1LXXoO)
        (&i/o-file-protection . g$13075$1LXXoO)
        (&i/o-filename . g$13074$1LXXoO)
        (&i/o-invalid-position . g$13073$1LXXoO)
        (&i/o-write . g$13072$1LXXoO)
        (&i/o-read . g$13071$1LXXoO)
        (&i/o . g$13070$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13431$1LXXoO
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$13342$1LXXoO)
        (vector-sort . g$13341$1LXXoO)
        (list-sort . g$6624$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13432$1LXXoO
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$5950$1LXXoO)
        (vector? . g$5505$1LXXoO)
        (vector-set! . g$5521$1LXXoO)
        (vector-ref . g$5520$1LXXoO)
        (vector-map . g$5584$1LXXoO)
        (vector-length . g$13201$1LXXoO)
        (vector-for-each . g$5585$1LXXoO)
        (vector-fill! . g$5522$1LXXoO)
        (vector->list . g$13200$1LXXoO)
        (vector . g$13199$1LXXoO)
        (values . g$13198$1LXXoO)
        (truncate . g$6002$1LXXoO)
        (tan . g$5988$1LXXoO)
        (symbol? . g$5507$1LXXoO)
        (symbol=? . g$5569$1LXXoO)
        (symbol->string . g$13197$1LXXoO)
        (substring . g$13196$1LXXoO)
        (string? . g$13195$1LXXoO)
        (string>? . g$5566$1LXXoO)
        (string>=? . g$5568$1LXXoO)
        (string=? . g$5564$1LXXoO)
        (string<? . g$5565$1LXXoO)
        (string<=? . g$5567$1LXXoO)
        (string-ref . g$13194$1LXXoO)
        (string-length . g$13193$1LXXoO)
        (string-for-each . g$5586$1LXXoO)
        (string-copy . g$13192$1LXXoO)
        (string-append . g$13191$1LXXoO)
        (string->symbol . g$13190$1LXXoO)
        (string->number . g$13189$1LXXoO)
        (string->list . g$13188$1LXXoO)
        (string . g$13187$1LXXoO)
        (sqrt . g$13186$1LXXoO)
        (sin . g$5982$1LXXoO)
        (round . g$6003$1LXXoO)
        (reverse . g$5524$1LXXoO)
        (real? . g$5944$1LXXoO)
        (real-valued? . g$5947$1LXXoO)
        (real-part . g$5975$1LXXoO)
        (rationalize . g$5581$1LXXoO)
        (rational? . g$5945$1LXXoO)
        (rational-valued? . g$5948$1LXXoO)
        (procedure? . g$5509$1LXXoO)
        (positive? . g$5951$1LXXoO)
        (pair? . g$13185$1LXXoO)
        (odd? . g$5554$1LXXoO)
        (numerator . g$5973$1LXXoO)
        (number? . g$5937$1LXXoO)
        (number->string . g$13184$1LXXoO)
        (null? . g$13183$1LXXoO)
        (not . g$13182$1LXXoO)
        (negative? . g$5952$1LXXoO)
        (nan? . g$5938$1LXXoO)
        (min . g$5556$1LXXoO)
        (max . g$5555$1LXXoO)
        (map . g$5167$1LXXoO)
        (make-vector . g$13181$1LXXoO)
        (make-string . g$13180$1LXXoO)
        (make-rectangular . g$5968$1LXXoO)
        (make-polar . g$5969$1LXXoO)
        (magnitude . g$5971$1LXXoO)
        (log . g$5991$1LXXoO)
        (list? . g$13179$1LXXoO)
        (list-tail . g$5147$1LXXoO)
        (list-ref . g$5148$1LXXoO)
        (list->vector . g$5518$1LXXoO)
        (list->string . g$5519$1LXXoO)
        (list . g$13178$1LXXoO)
        (length . g$13177$1LXXoO)
        (lcm . g$5558$1LXXoO)
        (integer? . g$5946$1LXXoO)
        (integer-valued? . g$5949$1LXXoO)
        (integer->char . g$13176$1LXXoO)
        (infinite? . g$5940$1LXXoO)
        (inexact? . g$5942$1LXXoO)
        (inexact . g$13175$1LXXoO)
        (imag-part . g$5976$1LXXoO)
        (gcd . g$5557$1LXXoO)
        (for-each . g$5168$1LXXoO)
        (floor . g$6000$1LXXoO)
        (finite? . g$5939$1LXXoO)
        (expt . g$13174$1LXXoO)
        (exp . g$5981$1LXXoO)
        (exact? . g$5941$1LXXoO)
        (exact-integer-sqrt . g$13173$1LXXoO)
        (exact . g$13172$1LXXoO)
        (even? . g$5553$1LXXoO)
        (error . g$13171$1LXXoO)
        (eqv? . g$13170$1LXXoO)
        (equal? . g$13169$1LXXoO)
        (eq? . g$13168$1LXXoO)
        (dynamic-wind . g$13167$1LXXoO)
        (div0-and-mod0 . g$5517$1LXXoO)
        (mod0 . g$5515$1LXXoO)
        (div0 . g$5513$1LXXoO)
        (div-and-mod . g$5516$1LXXoO)
        (mod . g$5514$1LXXoO)
        (div . g$5992$1LXXoO)
        (denominator . g$5974$1LXXoO)
        (cos . g$5985$1LXXoO)
        (cons . g$13166$1LXXoO)
        (complex? . g$5943$1LXXoO)
        (char? . g$5504$1LXXoO)
        (char>? . g$5578$1LXXoO)
        (char>=? . g$5580$1LXXoO)
        (char=? . g$5576$1LXXoO)
        (char<? . g$5577$1LXXoO)
        (char<=? . g$5579$1LXXoO)
        (char->integer . g$13165$1LXXoO)
        (ceiling . g$6001$1LXXoO)
        (call-with-values . g$13164$1LXXoO)
        (call/cc . g$13163$1LXXoO)
        (call-with-current-continuation . g$13162$1LXXoO)
        (cddddr . g$5552$1LXXoO)
        (cdddar . g$5551$1LXXoO)
        (cddadr . g$5550$1LXXoO)
        (cddaar . g$5549$1LXXoO)
        (cdaddr . g$5548$1LXXoO)
        (cdadar . g$5547$1LXXoO)
        (cdaadr . g$5546$1LXXoO)
        (cdaaar . g$5545$1LXXoO)
        (cadddr . g$5544$1LXXoO)
        (caddar . g$5543$1LXXoO)
        (cadadr . g$5542$1LXXoO)
        (cadaar . g$5541$1LXXoO)
        (caaddr . g$5540$1LXXoO)
        (caadar . g$5539$1LXXoO)
        (caaadr . g$5538$1LXXoO)
        (caaaar . g$5537$1LXXoO)
        (cdddr . g$5536$1LXXoO)
        (cddar . g$5535$1LXXoO)
        (cdadr . g$5534$1LXXoO)
        (cdaar . g$5533$1LXXoO)
        (caddr . g$5532$1LXXoO)
        (cadar . g$5531$1LXXoO)
        (caadr . g$5530$1LXXoO)
        (caaar . g$5529$1LXXoO)
        (cddr . g$5528$1LXXoO)
        (cdar . g$5527$1LXXoO)
        (cadr . g$5526$1LXXoO)
        (caar . g$5525$1LXXoO)
        (cdr . g$13161$1LXXoO)
        (car . g$13160$1LXXoO)
        (boolean? . g$5508$1LXXoO)
        (boolean=? . g$5570$1LXXoO)
        (atan . g$5990$1LXXoO)
        (assertion-violation . g$13159$1LXXoO)
        (asin . g$5983$1LXXoO)
        (apply . g$13158$1LXXoO)
        (append . g$13157$1LXXoO)
        (angle . g$5970$1LXXoO)
        (acos . g$5986$1LXXoO)
        (abs . g$5993$1LXXoO)
        (/ . g$13156$1LXXoO)
        (* . g$13155$1LXXoO)
        (- . g$13154$1LXXoO)
        (+ . g$13153$1LXXoO)
        (>= . g$5967$1LXXoO)
        (> . g$5966$1LXXoO)
        (= . g$5963$1LXXoO)
        (<= . g$5965$1LXXoO)
        (< . g$5964$1LXXoO)
        (unquote-splicing . g$13031$1LXXoO)
        (unquote . g$13030$1LXXoO)
        (_ . g$13029$1LXXoO)
        (else . g$13028$1LXXoO)
        (=> . g$13027$1LXXoO)
        (... . g$13026$1LXXoO)
        (assert . g$13025$1LXXoO)
        (or . g$13021$1LXXoO)
        (and . g$13020$1LXXoO)
        (cond . g$13018$1LXXoO)
        (let* . g$13017$1LXXoO)
        (let . g$13016$1LXXoO)
        (identifier-syntax . g$13015$1LXXoO)
        (quasiquote . g$13012$1LXXoO)
        (syntax-rules . g$13011$1LXXoO)
        (let-values . g$13007$1LXXoO)
        (let*-values . g$13006$1LXXoO)
        (case . g$13002$1LXXoO)
        (if . g$12998$1LXXoO)
        (letrec* . g$12997$1LXXoO)
        (letrec . g$12996$1LXXoO)
        (lambda . g$12993$1LXXoO)
        (quote . g$12990$1LXXoO)
        (letrec-syntax . g$12988$1LXXoO)
        (let-syntax . g$12987$1LXXoO)
        (set! . g$12986$1LXXoO)
        (begin . g$12982$1LXXoO)
        (define-syntax . g$12980$1LXXoO)
        (define . g$12979$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13433$1LXXoO
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5172$1LXXoO)
        (remv . g$5173$1LXXoO)
        (remp . g$5153$1LXXoO)
        (remq . g$5174$1LXXoO)
        (partition . g$5152$1LXXoO)
        (memv . g$5160$1LXXoO)
        (memq . g$5159$1LXXoO)
        (memp . g$5162$1LXXoO)
        (member . g$5161$1LXXoO)
        (exists . g$5166$1LXXoO)
        (for-all . g$5165$1LXXoO)
        (fold-right . g$5171$1LXXoO)
        (fold-left . g$5170$1LXXoO)
        (find . g$5151$1LXXoO)
        (filter . g$5154$1LXXoO)
        (cons* . g$5169$1LXXoO)
        (assv . g$5156$1LXXoO)
        (assq . g$5155$1LXXoO)
        (assp . g$5158$1LXXoO)
        (assoc . g$5157$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13434$1LXXoO
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$8408$1LXXoO)
        (call-with-input-file . g$8407$1LXXoO)
        (write-char . g$8399$1LXXoO)
        (write . g$13328$1LXXoO)
        (with-output-to-file . g$8406$1LXXoO)
        (with-input-from-file . g$8405$1LXXoO)
        (read-char . g$8398$1LXXoO)
        (read . g$13327$1LXXoO)
        (peek-char . g$8397$1LXXoO)
        (open-output-file . g$13326$1LXXoO)
        (open-input-file . g$13325$1LXXoO)
        (newline . g$8409$1LXXoO)
        (display . g$13324$1LXXoO)
        (close-output-port . g$13323$1LXXoO)
        (close-input-port . g$13322$1LXXoO)
        (eof-object? . g$13321$1LXXoO)
        (eof-object . g$13320$1LXXoO)
        (current-error-port . g$13319$1LXXoO)
        (current-output-port . g$13318$1LXXoO)
        (current-input-port . g$13317$1LXXoO)
        (output-port? . g$13316$1LXXoO)
        (input-port? . g$13315$1LXXoO)
        (make-i/o-write-error . g$6434$1LXXoO)
        (make-i/o-read-error . g$6421$1LXXoO)
        (make-i/o-port-error . g$6529$1LXXoO)
        (make-i/o-invalid-position-error . g$6447$1LXXoO)
        (make-i/o-filename-error . g$6462$1LXXoO)
        (make-i/o-file-protection-error . g$6477$1LXXoO)
        (make-i/o-file-is-read-only-error . g$6490$1LXXoO)
        (make-i/o-file-does-not-exist-error . g$6516$1LXXoO)
        (make-i/o-file-already-exists-error . g$6503$1LXXoO)
        (make-i/o-error . g$6408$1LXXoO)
        (i/o-write-error? . g$6435$1LXXoO)
        (i/o-read-error? . g$6422$1LXXoO)
        (i/o-port-error? . g$6531$1LXXoO)
        (i/o-invalid-position-error? . g$6449$1LXXoO)
        (i/o-error-position . g$6450$1LXXoO)
        (i/o-filename-error? . g$6464$1LXXoO)
        (i/o-file-protection-error? . g$6478$1LXXoO)
        (i/o-file-is-read-only-error? . g$6491$1LXXoO)
        (i/o-file-does-not-exist-error? . g$6517$1LXXoO)
        (i/o-file-already-exists-error? . g$6504$1LXXoO)
        (i/o-error? . g$6409$1LXXoO)
        (i/o-error-port . g$6532$1LXXoO)
        (i/o-error-filename . g$6465$1LXXoO)
        (&i/o-port . g$13079$1LXXoO)
        (&i/o-file-does-not-exist . g$13078$1LXXoO)
        (&i/o-file-already-exists . g$13077$1LXXoO)
        (&i/o-file-is-read-only . g$13076$1LXXoO)
        (&i/o-file-protection . g$13075$1LXXoO)
        (&i/o-filename . g$13074$1LXXoO)
        (&i/o-invalid-position . g$13073$1LXXoO)
        (&i/o-write . g$13072$1LXXoO)
        (&i/o-read . g$13071$1LXXoO)
        (&i/o . g$13070$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13435$1LXXoO
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$13276$1LXXoO)
        (utf32->string . g$13244$1LXXoO)
        (utf16->string . g$13243$1LXXoO)
        (utf8->string . g$13242$1LXXoO)
        (uint-list->bytevector . g$13241$1LXXoO)
        (u8-list->bytevector . g$13240$1LXXoO)
        (string->utf8 . g$13239$1LXXoO)
        (string->utf32 . g$13238$1LXXoO)
        (string->utf16 . g$13237$1LXXoO)
        (sint-list->bytevector . g$13236$1LXXoO)
        (native-endianness . g$5816$1LXXoO)
        (bytevector? . g$5506$1LXXoO)
        (bytevector=? . g$13235$1LXXoO)
        (bytevector-uint-set! . g$13234$1LXXoO)
        (bytevector-uint-ref . g$13233$1LXXoO)
        (bytevector-u8-set! . g$13232$1LXXoO)
        (bytevector-u8-ref . g$13231$1LXXoO)
        (bytevector-u64-set! . g$5837$1LXXoO)
        (bytevector-u64-ref . g$5833$1LXXoO)
        (bytevector-u64-native-set! . g$5839$1LXXoO)
        (bytevector-u64-native-ref . g$5835$1LXXoO)
        (bytevector-u32-set! . g$5829$1LXXoO)
        (bytevector-u32-ref . g$5825$1LXXoO)
        (bytevector-u32-native-set! . g$5831$1LXXoO)
        (bytevector-u32-native-ref . g$5827$1LXXoO)
        (bytevector-u16-set! . g$5821$1LXXoO)
        (bytevector-u16-ref . g$5817$1LXXoO)
        (bytevector-u16-native-set! . g$5823$1LXXoO)
        (bytevector-u16-native-ref . g$5819$1LXXoO)
        (bytevector-sint-set! . g$13230$1LXXoO)
        (bytevector-sint-ref . g$13229$1LXXoO)
        (bytevector-s8-set! . g$13228$1LXXoO)
        (bytevector-s8-ref . g$13227$1LXXoO)
        (bytevector-s64-set! . g$5838$1LXXoO)
        (bytevector-s64-ref . g$5834$1LXXoO)
        (bytevector-s64-native-set! . g$5840$1LXXoO)
        (bytevector-s64-native-ref . g$5836$1LXXoO)
        (bytevector-s32-set! . g$5830$1LXXoO)
        (bytevector-s32-ref . g$5826$1LXXoO)
        (bytevector-s32-native-set! . g$5832$1LXXoO)
        (bytevector-s32-native-ref . g$5828$1LXXoO)
        (bytevector-s16-set! . g$5822$1LXXoO)
        (bytevector-s16-ref . g$5818$1LXXoO)
        (bytevector-s16-native-set! . g$5824$1LXXoO)
        (bytevector-s16-native-ref . g$5820$1LXXoO)
        (bytevector-length . g$13226$1LXXoO)
        (bytevector-ieee-single-set! . g$13225$1LXXoO)
        (bytevector-ieee-single-ref . g$13224$1LXXoO)
        (bytevector-ieee-single-native-set! . g$5843$1LXXoO)
        (bytevector-ieee-single-native-ref . g$5841$1LXXoO)
        (bytevector-ieee-double-set! . g$13223$1LXXoO)
        (bytevector-ieee-double-ref . g$13222$1LXXoO)
        (bytevector-ieee-double-native-set! . g$5844$1LXXoO)
        (bytevector-ieee-double-native-ref . g$5842$1LXXoO)
        (bytevector-fill! . g$13221$1LXXoO)
        (bytevector-copy! . g$13220$1LXXoO)
        (bytevector-copy . g$13219$1LXXoO)
        (bytevector->uint-list . g$13218$1LXXoO)
        (bytevector->u8-list . g$13217$1LXXoO)
        (bytevector->sint-list . g$13216$1LXXoO)
        (endianness . g$13024$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13436$1LXXoO
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$13374$1LXXoO)
        (string-titlecase . g$13373$1LXXoO)
        (string-normalize-nfkd . g$6671$1LXXoO)
        (string-normalize-nfkc . g$6670$1LXXoO)
        (string-normalize-nfd . g$6669$1LXXoO)
        (string-normalize-nfc . g$6668$1LXXoO)
        (string-foldcase . g$13372$1LXXoO)
        (string-downcase . g$13371$1LXXoO)
        (string-ci>? . g$6655$1LXXoO)
        (string-ci>=? . g$6657$1LXXoO)
        (string-ci=? . g$6653$1LXXoO)
        (string-ci<? . g$6654$1LXXoO)
        (string-ci<=? . g$6656$1LXXoO)
        (char-whitespace? . g$13370$1LXXoO)
        (char-upper-case? . g$13369$1LXXoO)
        (char-title-case? . g$13368$1LXXoO)
        (char-numeric? . g$13367$1LXXoO)
        (char-lower-case? . g$13366$1LXXoO)
        (char-general-category . g$13365$1LXXoO)
        (char-upcase . g$13364$1LXXoO)
        (char-titlecase . g$13363$1LXXoO)
        (char-foldcase . g$13362$1LXXoO)
        (char-downcase . g$13361$1LXXoO)
        (char-ci>? . g$6665$1LXXoO)
        (char-ci>=? . g$6667$1LXXoO)
        (char-ci=? . g$6663$1LXXoO)
        (char-ci<? . g$6664$1LXXoO)
        (char-ci<=? . g$6666$1LXXoO)
        (char-alphabetic? . g$13360$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13437$1LXXoO
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$13252$1LXXoO)
        (raise-continuable . g$13251$1LXXoO)
        (raise . g$13250$1LXXoO)
        (guard . g$13039$1LXXoO)
        (else . g$13028$1LXXoO)
        (=> . g$13027$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13438$1LXXoO
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$6735$1LXXoO)
        (bitwise-reverse-bit-field . g$13211$1LXXoO)
        (bitwise-length . g$13210$1LXXoO)
        (bitwise-if . g$6729$1LXXoO)
        (bitwise-first-bit-set . g$13209$1LXXoO)
        (bitwise-copy-bit-field . g$6732$1LXXoO)
        (bitwise-copy-bit . g$6730$1LXXoO)
        (bitwise-bit-set? . g$13208$1LXXoO)
        (bitwise-bit-field . g$6731$1LXXoO)
        (bitwise-bit-count . g$13207$1LXXoO)
        (bitwise-xor . g$13206$1LXXoO)
        (bitwise-ior . g$13205$1LXXoO)
        (bitwise-and . g$13204$1LXXoO)
        (bitwise-not . g$13203$1LXXoO)
        (bitwise-arithmetic-shift-right . g$6734$1LXXoO)
        (bitwise-arithmetic-shift-left . g$6733$1LXXoO)
        (bitwise-arithmetic-shift . g$13202$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13439$1LXXoO
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$6867$1LXXoO)
        (fxxor . g$6830$1LXXoO)
        (fxrotate-bit-field . g$6905$1LXXoO)
        (fxreverse-bit-field . g$6906$1LXXoO)
        (fxpositive? . g$6857$1LXXoO)
        (fxodd? . g$6877$1LXXoO)
        (fxnot . g$6811$1LXXoO)
        (fxnegative? . g$6862$1LXXoO)
        (fxmod0 . g$6841$1LXXoO)
        (fxmod . g$6840$1LXXoO)
        (fxmin . g$6879$1LXXoO)
        (fxmax . g$6878$1LXXoO)
        (fxlength . g$6808$1LXXoO)
        (fxior . g$6829$1LXXoO)
        (fxif . g$6887$1LXXoO)
        (fxfirst-bit-set . g$6809$1LXXoO)
        (fxeven? . g$6872$1LXXoO)
        (fxdiv0-and-mod0 . g$6852$1LXXoO)
        (fxdiv0 . g$6847$1LXXoO)
        (fxdiv-and-mod . g$6842$1LXXoO)
        (fxdiv . g$6835$1LXXoO)
        (fxcopy-bit-field . g$6902$1LXXoO)
        (fxcopy-bit . g$6892$1LXXoO)
        (fxbit-set? . g$6810$1LXXoO)
        (fxbit-field . g$6897$1LXXoO)
        (fxbit-count . g$6803$1LXXoO)
        (fxarithmetic-shift-right . g$6904$1LXXoO)
        (fxarithmetic-shift-left . g$6903$1LXXoO)
        (fxarithmetic-shift . g$6798$1LXXoO)
        (fxand . g$6828$1LXXoO)
        (fx>? . g$6820$1LXXoO)
        (fx>=? . g$6821$1LXXoO)
        (fx=? . g$6817$1LXXoO)
        (fx<? . g$6818$1LXXoO)
        (fx<=? . g$6819$1LXXoO)
        (fx-/carry . g$6881$1LXXoO)
        (fx- . g$6792$1LXXoO)
        (fx+/carry . g$6882$1LXXoO)
        (fx+ . g$6790$1LXXoO)
        (fx*/carry . g$6880$1LXXoO)
        (fx* . g$6791$1LXXoO)
        (greatest-fixnum . g$6761$1LXXoO)
        (least-fixnum . g$6762$1LXXoO)
        (fixnum-width . g$5512$1LXXoO)
        (fixnum? . g$5510$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13440$1LXXoO
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$6586$1LXXoO)
        (no-infinities-violation? . g$6573$1LXXoO)
        (make-no-nans-violation . g$6585$1LXXoO)
        (make-no-infinities-violation . g$6572$1LXXoO)
        (real->flonum . g$13215$1LXXoO)
        (flzero? . g$7823$1LXXoO)
        (fltruncate . g$7818$1LXXoO)
        (fltan . g$7804$1LXXoO)
        (flsqrt . g$7809$1LXXoO)
        (flsin . g$7802$1LXXoO)
        (flround . g$7819$1LXXoO)
        (flpositive? . g$7821$1LXXoO)
        (flonum? . g$5511$1LXXoO)
        (flodd? . g$7825$1LXXoO)
        (flnumerator . g$13214$1LXXoO)
        (flnegative? . g$7822$1LXXoO)
        (flnan? . g$7801$1LXXoO)
        (flmod0 . g$7786$1LXXoO)
        (flmod . g$7785$1LXXoO)
        (flmin . g$7827$1LXXoO)
        (flmax . g$7826$1LXXoO)
        (fllog . g$7808$1LXXoO)
        (flinteger? . g$7794$1LXXoO)
        (flinfinite? . g$7800$1LXXoO)
        (flfloor . g$7817$1LXXoO)
        (flfinite? . g$7795$1LXXoO)
        (flexpt . g$7811$1LXXoO)
        (flexp . g$7810$1LXXoO)
        (fleven? . g$7824$1LXXoO)
        (fldiv0-and-mod0 . g$7793$1LXXoO)
        (fldiv0 . g$7780$1LXXoO)
        (fldiv-and-mod . g$7787$1LXXoO)
        (fldiv . g$7792$1LXXoO)
        (fldenominator . g$13213$1LXXoO)
        (flcos . g$7803$1LXXoO)
        (flceiling . g$7812$1LXXoO)
        (flatan . g$7807$1LXXoO)
        (flasin . g$7805$1LXXoO)
        (flacos . g$7806$1LXXoO)
        (flabs . g$7820$1LXXoO)
        (fl>? . g$7774$1LXXoO)
        (fl>=? . g$7775$1LXXoO)
        (fl=? . g$7771$1LXXoO)
        (fl<? . g$7772$1LXXoO)
        (fl<=? . g$7773$1LXXoO)
        (fl/ . g$7770$1LXXoO)
        (fl- . g$7769$1LXXoO)
        (fl+ . g$7767$1LXXoO)
        (fl* . g$7768$1LXXoO)
        (fixnum->flonum . g$13212$1LXXoO)
        (&no-nans . g$13083$1LXXoO)
        (&no-infinities . g$13082$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13441$1LXXoO
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$13340$1LXXoO)
        (string-ci-hash . g$13339$1LXXoO)
        (string-hash . g$13338$1LXXoO)
        (equal-hash . g$13337$1LXXoO)
        (hashtable-equivalence-function . g$13336$1LXXoO)
        (make-hashtable . g$13335$1LXXoO)
        (hashtable-hash-function . g$13334$1LXXoO)
        (make-eqv-hashtable . g$5777$1LXXoO)
        (make-eq-hashtable . g$5776$1LXXoO)
        (hashtable? . g$13333$1LXXoO)
        (hashtable-update! . g$5783$1LXXoO)
        (hashtable-size . g$5778$1LXXoO)
        (hashtable-set! . g$5780$1LXXoO)
        (hashtable-ref . g$5779$1LXXoO)
        (hashtable-mutable? . g$13332$1LXXoO)
        (hashtable-keys . g$13331$1LXXoO)
        (hashtable-entries . g$13330$1LXXoO)
        (hashtable-delete! . g$5781$1LXXoO)
        (hashtable-copy . g$13329$1LXXoO)
        (hashtable-contains? . g$5782$1LXXoO)
        (hashtable-clear! . g$5784$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13442$1LXXoO
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$13321$1LXXoO)
        (eof-object . g$13320$1LXXoO)
        (current-error-port . g$13319$1LXXoO)
        (current-output-port . g$13318$1LXXoO)
        (current-input-port . g$13317$1LXXoO)
        (output-port? . g$13316$1LXXoO)
        (input-port? . g$13315$1LXXoO)
        (utf-8-codec . g$13314$1LXXoO)
        (utf-16-codec . g$13313$1LXXoO)
        (transcoder-error-handling-mode . g$13312$1LXXoO)
        (transcoder-eol-style . g$13311$1LXXoO)
        (transcoder-codec . g$13310$1LXXoO)
        (transcoded-port . g$13309$1LXXoO)
        (textual-port? . g$13308$1LXXoO)
        (string->bytevector . g$13307$1LXXoO)
        (standard-output-port . g$13306$1LXXoO)
        (standard-input-port . g$13305$1LXXoO)
        (standard-error-port . g$13304$1LXXoO)
        (set-port-position! . g$13303$1LXXoO)
        (put-u8 . g$13302$1LXXoO)
        (put-string . g$13301$1LXXoO)
        (put-datum . g$8377$1LXXoO)
        (put-char . g$13300$1LXXoO)
        (put-bytevector . g$13299$1LXXoO)
        (port? . g$8382$1LXXoO)
        (port-transcoder . g$13298$1LXXoO)
        (port-position . g$13297$1LXXoO)
        (port-has-set-port-position!? . g$13296$1LXXoO)
        (port-has-port-position? . g$13295$1LXXoO)
        (port-eof? . g$13294$1LXXoO)
        (output-port-buffer-mode . g$13293$1LXXoO)
        (open-string-output-port . g$8381$1LXXoO)
        (open-string-input-port . g$13292$1LXXoO)
        (open-file-output-port . g$13291$1LXXoO)
        (open-file-input/output-port . g$13290$1LXXoO)
        (open-file-input-port . g$13289$1LXXoO)
        (open-bytevector-output-port . g$13288$1LXXoO)
        (open-bytevector-input-port . g$13287$1LXXoO)
        (native-transcoder . g$13286$1LXXoO)
        (native-eol-style . g$13285$1LXXoO)
        (make-transcoder . g$13284$1LXXoO)
        (latin-1-codec . g$13283$1LXXoO)
        (make-i/o-write-error . g$6434$1LXXoO)
        (make-i/o-read-error . g$6421$1LXXoO)
        (make-i/o-port-error . g$6529$1LXXoO)
        (make-i/o-invalid-position-error . g$6447$1LXXoO)
        (make-i/o-filename-error . g$6462$1LXXoO)
        (make-i/o-file-protection-error . g$6477$1LXXoO)
        (make-i/o-file-is-read-only-error . g$6490$1LXXoO)
        (make-i/o-file-does-not-exist-error . g$6516$1LXXoO)
        (make-i/o-file-already-exists-error . g$6503$1LXXoO)
        (make-i/o-error . g$6408$1LXXoO)
        (make-i/o-encoding-error . g$6557$1LXXoO)
        (make-i/o-decoding-error . g$6544$1LXXoO)
        (make-custom-textual-output-port . g$13282$1LXXoO)
        (make-custom-textual-input/output-port . g$13281$1LXXoO)
        (make-custom-textual-input-port . g$13280$1LXXoO)
        (make-custom-binary-output-port . g$13279$1LXXoO)
        (make-custom-binary-input/output-port . g$13278$1LXXoO)
        (make-custom-binary-input-port . g$13277$1LXXoO)
        (lookahead-u8 . g$13275$1LXXoO)
        (lookahead-char . g$13274$1LXXoO)
        (i/o-write-error? . g$6435$1LXXoO)
        (i/o-read-error? . g$6422$1LXXoO)
        (i/o-port-error? . g$6531$1LXXoO)
        (i/o-invalid-position-error? . g$6449$1LXXoO)
        (i/o-error-position . g$6450$1LXXoO)
        (i/o-filename-error? . g$6464$1LXXoO)
        (i/o-file-protection-error? . g$6478$1LXXoO)
        (i/o-file-is-read-only-error? . g$6491$1LXXoO)
        (i/o-file-does-not-exist-error? . g$6517$1LXXoO)
        (i/o-file-already-exists-error? . g$6504$1LXXoO)
        (i/o-error? . g$6409$1LXXoO)
        (i/o-error-port . g$6532$1LXXoO)
        (i/o-error-filename . g$6465$1LXXoO)
        (i/o-encoding-error? . g$6559$1LXXoO)
        (i/o-encoding-error-char . g$6560$1LXXoO)
        (i/o-decoding-error? . g$6545$1LXXoO)
        (get-u8 . g$13273$1LXXoO)
        (get-string-n! . g$13272$1LXXoO)
        (get-string-n . g$13271$1LXXoO)
        (get-string-all . g$13270$1LXXoO)
        (get-line . g$13269$1LXXoO)
        (get-datum . g$8378$1LXXoO)
        (get-char . g$13268$1LXXoO)
        (get-bytevector-some . g$13267$1LXXoO)
        (get-bytevector-n! . g$13266$1LXXoO)
        (get-bytevector-n . g$13265$1LXXoO)
        (get-bytevector-all . g$13264$1LXXoO)
        (flush-output-port . g$13263$1LXXoO)
        (close-port . g$13262$1LXXoO)
        (call-with-string-output-port . g$8383$1LXXoO)
        (call-with-port . g$8384$1LXXoO)
        (call-with-bytevector-output-port . g$13261$1LXXoO)
        (bytevector->string . g$13260$1LXXoO)
        (buffer-mode? . g$13259$1LXXoO)
        (binary-port? . g$13258$1LXXoO)
        (&i/o-encoding . g$13081$1LXXoO)
        (&i/o-decoding . g$13080$1LXXoO)
        (&i/o-port . g$13079$1LXXoO)
        (&i/o-file-does-not-exist . g$13078$1LXXoO)
        (&i/o-file-already-exists . g$13077$1LXXoO)
        (&i/o-file-is-read-only . g$13076$1LXXoO)
        (&i/o-file-protection . g$13075$1LXXoO)
        (&i/o-filename . g$13074$1LXXoO)
        (&i/o-invalid-position . g$13073$1LXXoO)
        (&i/o-write . g$13072$1LXXoO)
        (&i/o-read . g$13071$1LXXoO)
        (&i/o . g$13070$1LXXoO)
        (error-handling-mode . g$13043$1LXXoO)
        (file-options . g$13042$1LXXoO)
        (buffer-mode . g$13041$1LXXoO)
        (eol-style . g$13040$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13443$1LXXoO
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$8469$1LXXoO)
        (enum-set=? . g$8476$1LXXoO)
        (enum-set-universe . g$8470$1LXXoO)
        (enum-set-union . g$8477$1LXXoO)
        (enum-set-subset? . g$8475$1LXXoO)
        (enum-set-projection . g$8481$1LXXoO)
        (enum-set-member? . g$8474$1LXXoO)
        (enum-set-intersection . g$8478$1LXXoO)
        (enum-set-indexer . g$8471$1LXXoO)
        (enum-set-difference . g$8479$1LXXoO)
        (enum-set-constructor . g$8472$1LXXoO)
        (enum-set-complement . g$8480$1LXXoO)
        (enum-set->list . g$8473$1LXXoO)
        (define-enumeration . g$13054$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13444$1LXXoO
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6326$1LXXoO)
        (warning? . g$6245$1LXXoO)
        (violation? . g$6284$1LXXoO)
        (undefined-violation? . g$6396$1LXXoO)
        (syntax-violation? . g$6381$1LXXoO)
        (syntax-violation-subform . g$6383$1LXXoO)
        (syntax-violation-form . g$6382$1LXXoO)
        (simple-conditions . g$13249$1LXXoO)
        (serious-condition? . g$6258$1LXXoO)
        (non-continuable-violation? . g$6340$1LXXoO)
        (message-condition? . g$6231$1LXXoO)
        (make-who-condition . g$6324$1LXXoO)
        (make-warning . g$6244$1LXXoO)
        (make-violation . g$6283$1LXXoO)
        (make-undefined-violation . g$6395$1LXXoO)
        (make-syntax-violation . g$6378$1LXXoO)
        (make-serious-condition . g$6257$1LXXoO)
        (make-non-continuable-violation . g$6339$1LXXoO)
        (make-message-condition . g$6229$1LXXoO)
        (make-lexical-violation . g$6365$1LXXoO)
        (make-irritants-condition . g$6309$1LXXoO)
        (make-implementation-restriction-violation . g$6352$1LXXoO)
        (make-error . g$6270$1LXXoO)
        (make-assertion-violation . g$6296$1LXXoO)
        (lexical-violation? . g$6366$1LXXoO)
        (irritants-condition? . g$6311$1LXXoO)
        (implementation-restriction-violation? . g$6353$1LXXoO)
        (error? . g$6271$1LXXoO)
        (condition-who . g$6327$1LXXoO)
        (condition-predicate . g$13248$1LXXoO)
        (condition-message . g$6232$1LXXoO)
        (condition-irritants . g$6312$1LXXoO)
        (condition-accessor . g$13247$1LXXoO)
        (condition . g$13246$1LXXoO)
        (assertion-violation? . g$6297$1LXXoO)
        (condition? . g$13245$1LXXoO)
        (&non-continuable . g$13069$1LXXoO)
        (&undefined . g$13068$1LXXoO)
        (&syntax . g$13067$1LXXoO)
        (&lexical . g$13066$1LXXoO)
        (&implementation-restriction . g$13065$1LXXoO)
        (&who . g$13064$1LXXoO)
        (&irritants . g$13063$1LXXoO)
        (&assertion . g$13062$1LXXoO)
        (&violation . g$13061$1LXXoO)
        (&error . g$13060$1LXXoO)
        (&serious . g$13059$1LXXoO)
        (&warning . g$13058$1LXXoO)
        (&message . g$13057$1LXXoO)
        (&condition . g$13056$1LXXoO)
        (define-condition-type . g$13055$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13445$1LXXoO
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$13352$1LXXoO)
        (record-type-uid . g$13351$1LXXoO)
        (record-type-sealed? . g$13350$1LXXoO)
        (record-type-parent . g$13349$1LXXoO)
        (record-type-opaque? . g$13348$1LXXoO)
        (record-type-name . g$13347$1LXXoO)
        (record-type-generative? . g$13346$1LXXoO)
        (record-type-field-names . g$13345$1LXXoO)
        (record-rtd . g$13344$1LXXoO)
        (record-field-mutable? . g$13343$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13446$1LXXoO
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$13359$1LXXoO)
        (record-predicate . g$13358$1LXXoO)
        (record-mutator . g$13357$1LXXoO)
        (record-constructor . g$13356$1LXXoO)
        (record-accessor . g$13355$1LXXoO)
        (make-record-type-descriptor . g$13354$1LXXoO)
        (make-record-constructor-descriptor . g$13353$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13447$1LXXoO
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$13053$1LXXoO)
        (parent-rtd . g$13052$1LXXoO)
        (nongenerative . g$13051$1LXXoO)
        (opaque . g$13050$1LXXoO)
        (sealed . g$13049$1LXXoO)
        (protocol . g$13048$1LXXoO)
        (parent . g$13047$1LXXoO)
        (immutable . g$13046$1LXXoO)
        (mutable . g$13045$1LXXoO)
        (fields . g$13044$1LXXoO)
        (record-constructor-descriptor . g$13005$1LXXoO)
        (record-type-descriptor . g$13004$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13448$1LXXoO
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$9780$1LXXoO)
        (&no-nans-rcd . g$6588$1LXXoO)
        (&no-nans-rtd . g$6587$1LXXoO)
        (&no-infinities-rcd . g$6575$1LXXoO)
        (&no-infinities-rtd . g$6574$1LXXoO)
        (&i/o-encoding-rcd . g$6562$1LXXoO)
        (&i/o-encoding-rtd . g$6561$1LXXoO)
        (&i/o-decoding-rcd . g$6547$1LXXoO)
        (&i/o-decoding-rtd . g$6546$1LXXoO)
        (&i/o-port-rcd . g$6534$1LXXoO)
        (&i/o-port-rtd . g$6533$1LXXoO)
        (&i/o-file-does-not-exist-rcd . g$6519$1LXXoO)
        (&i/o-file-does-not-exist-rtd . g$6518$1LXXoO)
        (&i/o-file-already-exists-rcd . g$6506$1LXXoO)
        (&i/o-file-already-exists-rtd . g$6505$1LXXoO)
        (&i/o-file-is-read-only-rcd . g$6493$1LXXoO)
        (&i/o-file-is-read-only-rtd . g$6492$1LXXoO)
        (&i/o-file-protection-rcd . g$6480$1LXXoO)
        (&i/o-file-protection-rtd . g$6479$1LXXoO)
        (&i/o-filename-rcd . g$6467$1LXXoO)
        (&i/o-filename-rtd . g$6466$1LXXoO)
        (&i/o-invalid-position-rcd . g$6452$1LXXoO)
        (&i/o-invalid-position-rtd . g$6451$1LXXoO)
        (&i/o-write-rcd . g$6437$1LXXoO)
        (&i/o-write-rtd . g$6436$1LXXoO)
        (&i/o-read-rcd . g$6424$1LXXoO)
        (&i/o-read-rtd . g$6423$1LXXoO)
        (&i/o-rcd . g$6411$1LXXoO)
        (&i/o-rtd . g$6410$1LXXoO)
        (&undefined-rcd . g$6398$1LXXoO)
        (&undefined-rtd . g$6397$1LXXoO)
        (&syntax-rcd . g$6385$1LXXoO)
        (&syntax-rtd . g$6384$1LXXoO)
        (&lexical-rcd . g$6368$1LXXoO)
        (&lexical-rtd . g$6367$1LXXoO)
        (&implementation-restriction-rcd . g$6355$1LXXoO)
        (&implementation-restriction-rtd . g$6354$1LXXoO)
        (&non-continuable-rcd . g$6342$1LXXoO)
        (&non-continuable-rtd . g$6341$1LXXoO)
        (&who-rcd . g$6329$1LXXoO)
        (&who-rtd . g$6328$1LXXoO)
        (&irritants-rcd . g$6314$1LXXoO)
        (&irritants-rtd . g$6313$1LXXoO)
        (&assertion-rcd . g$6299$1LXXoO)
        (&assertion-rtd . g$6298$1LXXoO)
        (&violation-rcd . g$6286$1LXXoO)
        (&violation-rtd . g$6285$1LXXoO)
        (&error-rcd . g$6273$1LXXoO)
        (&error-rtd . g$6272$1LXXoO)
        (&serious-rcd . g$6260$1LXXoO)
        (&serious-rtd . g$6259$1LXXoO)
        (&warning-rcd . g$6247$1LXXoO)
        (&warning-rtd . g$6246$1LXXoO)
        (&message-rcd . g$6234$1LXXoO)
        (&message-rtd . g$6233$1LXXoO)
        (&condition-rcd . g$6194$1LXXoO)
        (&condition-rtd . g$6193$1LXXoO)
        (library-letrec* . g$13411$1LXXoO)
        (annotation-stripped . g$13410$1LXXoO)
        (annotation-source . g$13409$1LXXoO)
        (annotation-expression . g$13408$1LXXoO)
        (annotation? . g$13407$1LXXoO)
        (read-annotated . g$13406$1LXXoO)
        (tanh . g$5989$1LXXoO)
        (cosh . g$5987$1LXXoO)
        (sinh . g$5984$1LXXoO)
        (make-guid . g$13405$1LXXoO)
        (unspecified? . g$13404$1LXXoO)
        (make-list . g$5150$1LXXoO)
        (last-pair . g$5149$1LXXoO)
        (load-r5rs . g$13403$1LXXoO)
        (license . g$13402$1LXXoO)
        (stacktrace . g$13401$1LXXoO)
        (ironscheme-build . g$12927$1LXXoO)
        (pinvoke-call-internal . g$13400$1LXXoO)
        (ffi-callback-internal . g$13399$1LXXoO)
        (ffi-callout-internal . g$13398$1LXXoO)
        (define-clr-class-internal . g$13397$1LXXoO)
        (clr-field-set!-internal . g$13396$1LXXoO)
        (clr-field-get-internal . g$13395$1LXXoO)
        (clr-cast-internal . g$13394$1LXXoO)
        (clr-call-internal . g$13393$1LXXoO)
        (clr-new-internal . g$13392$1LXXoO)
        (clr-new-array-internal . g$13391$1LXXoO)
        (clr-is-internal . g$13390$1LXXoO)
        (clr-reference-internal . g$13389$1LXXoO)
        (clr-using-internal . g$13388$1LXXoO)
        (syntax-error . g$9900$1LXXoO)
        (syntax-dispatch . g$9775$1LXXoO)
        (compile-core . g$13387$1LXXoO)
        (eval-core . g$13386$1LXXoO)
        (remove-location . g$13385$1LXXoO)
        (set-symbol-value! . g$13384$1LXXoO)
        (symbol-value . g$13383$1LXXoO)
        (symbol-bound? . g$13382$1LXXoO)
        (ungensym . g$13381$1LXXoO)
        (gensym . g$13380$1LXXoO)
        (void . g$13379$1LXXoO)
        (load-serialized-library . g$13378$1LXXoO)
        (serialize-library . g$13377$1LXXoO)
        (compile-system-libraries . g$12931$1LXXoO)
        (compile->closure . g$12933$1LXXoO)
        (compile . g$12932$1LXXoO)
        (load . g$12926$1LXXoO)
        (string-normalize . g$13376$1LXXoO)
        (interaction-environment . g$9910$1LXXoO)
        (char-ready? . g$13375$1LXXoO)
        (string-upcase . g$13374$1LXXoO)
        (string-titlecase . g$13373$1LXXoO)
        (string-normalize-nfkd . g$6671$1LXXoO)
        (string-normalize-nfkc . g$6670$1LXXoO)
        (string-normalize-nfd . g$6669$1LXXoO)
        (string-normalize-nfc . g$6668$1LXXoO)
        (string-foldcase . g$13372$1LXXoO)
        (string-downcase . g$13371$1LXXoO)
        (string-ci>? . g$6655$1LXXoO)
        (string-ci>=? . g$6657$1LXXoO)
        (string-ci=? . g$6653$1LXXoO)
        (string-ci<? . g$6654$1LXXoO)
        (string-ci<=? . g$6656$1LXXoO)
        (char-whitespace? . g$13370$1LXXoO)
        (char-upper-case? . g$13369$1LXXoO)
        (char-title-case? . g$13368$1LXXoO)
        (char-numeric? . g$13367$1LXXoO)
        (char-lower-case? . g$13366$1LXXoO)
        (char-general-category . g$13365$1LXXoO)
        (char-upcase . g$13364$1LXXoO)
        (char-titlecase . g$13363$1LXXoO)
        (char-foldcase . g$13362$1LXXoO)
        (char-downcase . g$13361$1LXXoO)
        (char-ci>? . g$6665$1LXXoO)
        (char-ci>=? . g$6667$1LXXoO)
        (char-ci=? . g$6663$1LXXoO)
        (char-ci<? . g$6664$1LXXoO)
        (char-ci<=? . g$6666$1LXXoO)
        (char-alphabetic? . g$13360$1LXXoO)
        (variable-transformer-procedure . g$9587$1LXXoO)
        (variable-transformer? . g$9586$1LXXoO)
        (make-variable-transformer . g$9584$1LXXoO)
        (identifier? . g$9904$1LXXoO)
        (generate-temporaries . g$9893$1LXXoO)
        (free-identifier=? . g$9894$1LXXoO)
        (syntax->datum . g$9906$1LXXoO)
        (datum->syntax . g$9905$1LXXoO)
        (bound-identifier=? . g$9895$1LXXoO)
        (record-type-descriptor? . g$13359$1LXXoO)
        (record-predicate . g$13358$1LXXoO)
        (record-mutator . g$13357$1LXXoO)
        (record-constructor . g$13356$1LXXoO)
        (record-accessor . g$13355$1LXXoO)
        (make-record-type-descriptor . g$13354$1LXXoO)
        (make-record-constructor-descriptor . g$13353$1LXXoO)
        (record? . g$13352$1LXXoO)
        (record-type-uid . g$13351$1LXXoO)
        (record-type-sealed? . g$13350$1LXXoO)
        (record-type-parent . g$13349$1LXXoO)
        (record-type-opaque? . g$13348$1LXXoO)
        (record-type-name . g$13347$1LXXoO)
        (record-type-generative? . g$13346$1LXXoO)
        (record-type-field-names . g$13345$1LXXoO)
        (record-rtd . g$13344$1LXXoO)
        (record-field-mutable? . g$13343$1LXXoO)
        (delete-file . g$5810$1LXXoO)
        (file-exists? . g$5809$1LXXoO)
        (vector-sort! . g$13342$1LXXoO)
        (vector-sort . g$13341$1LXXoO)
        (list-sort . g$6624$1LXXoO)
        (symbol-hash . g$13340$1LXXoO)
        (string-ci-hash . g$13339$1LXXoO)
        (string-hash . g$13338$1LXXoO)
        (equal-hash . g$13337$1LXXoO)
        (hashtable-equivalence-function . g$13336$1LXXoO)
        (make-hashtable . g$13335$1LXXoO)
        (hashtable-hash-function . g$13334$1LXXoO)
        (make-eqv-hashtable . g$5777$1LXXoO)
        (make-eq-hashtable . g$5776$1LXXoO)
        (hashtable? . g$13333$1LXXoO)
        (hashtable-update! . g$5783$1LXXoO)
        (hashtable-size . g$5778$1LXXoO)
        (hashtable-set! . g$5780$1LXXoO)
        (hashtable-ref . g$5779$1LXXoO)
        (hashtable-mutable? . g$13332$1LXXoO)
        (hashtable-keys . g$13331$1LXXoO)
        (hashtable-entries . g$13330$1LXXoO)
        (hashtable-delete! . g$5781$1LXXoO)
        (hashtable-copy . g$13329$1LXXoO)
        (hashtable-contains? . g$5782$1LXXoO)
        (hashtable-clear! . g$5784$1LXXoO)
        (call-with-output-file . g$8408$1LXXoO)
        (call-with-input-file . g$8407$1LXXoO)
        (write-char . g$8399$1LXXoO)
        (write . g$13328$1LXXoO)
        (with-output-to-file . g$8406$1LXXoO)
        (with-input-from-file . g$8405$1LXXoO)
        (read-char . g$8398$1LXXoO)
        (read . g$13327$1LXXoO)
        (peek-char . g$8397$1LXXoO)
        (open-output-file . g$13326$1LXXoO)
        (open-input-file . g$13325$1LXXoO)
        (newline . g$8409$1LXXoO)
        (display . g$13324$1LXXoO)
        (close-output-port . g$13323$1LXXoO)
        (close-input-port . g$13322$1LXXoO)
        (eof-object? . g$13321$1LXXoO)
        (eof-object . g$13320$1LXXoO)
        (current-error-port . g$13319$1LXXoO)
        (current-output-port . g$13318$1LXXoO)
        (current-input-port . g$13317$1LXXoO)
        (output-port? . g$13316$1LXXoO)
        (input-port? . g$13315$1LXXoO)
        (utf-8-codec . g$13314$1LXXoO)
        (utf-16-codec . g$13313$1LXXoO)
        (transcoder-error-handling-mode . g$13312$1LXXoO)
        (transcoder-eol-style . g$13311$1LXXoO)
        (transcoder-codec . g$13310$1LXXoO)
        (transcoded-port . g$13309$1LXXoO)
        (textual-port? . g$13308$1LXXoO)
        (string->bytevector . g$13307$1LXXoO)
        (standard-output-port . g$13306$1LXXoO)
        (standard-input-port . g$13305$1LXXoO)
        (standard-error-port . g$13304$1LXXoO)
        (set-port-position! . g$13303$1LXXoO)
        (put-u8 . g$13302$1LXXoO)
        (put-string . g$13301$1LXXoO)
        (put-datum . g$8377$1LXXoO)
        (put-char . g$13300$1LXXoO)
        (put-bytevector . g$13299$1LXXoO)
        (port? . g$8382$1LXXoO)
        (port-transcoder . g$13298$1LXXoO)
        (port-position . g$13297$1LXXoO)
        (port-has-set-port-position!? . g$13296$1LXXoO)
        (port-has-port-position? . g$13295$1LXXoO)
        (port-eof? . g$13294$1LXXoO)
        (output-port-buffer-mode . g$13293$1LXXoO)
        (open-string-output-port . g$8381$1LXXoO)
        (open-string-input-port . g$13292$1LXXoO)
        (open-file-output-port . g$13291$1LXXoO)
        (open-file-input/output-port . g$13290$1LXXoO)
        (open-file-input-port . g$13289$1LXXoO)
        (open-bytevector-output-port . g$13288$1LXXoO)
        (open-bytevector-input-port . g$13287$1LXXoO)
        (native-transcoder . g$13286$1LXXoO)
        (native-eol-style . g$13285$1LXXoO)
        (make-transcoder . g$13284$1LXXoO)
        (latin-1-codec . g$13283$1LXXoO)
        (make-i/o-write-error . g$6434$1LXXoO)
        (make-i/o-read-error . g$6421$1LXXoO)
        (make-i/o-port-error . g$6529$1LXXoO)
        (make-i/o-invalid-position-error . g$6447$1LXXoO)
        (make-i/o-filename-error . g$6462$1LXXoO)
        (make-i/o-file-protection-error . g$6477$1LXXoO)
        (make-i/o-file-is-read-only-error . g$6490$1LXXoO)
        (make-i/o-file-does-not-exist-error . g$6516$1LXXoO)
        (make-i/o-file-already-exists-error . g$6503$1LXXoO)
        (make-i/o-error . g$6408$1LXXoO)
        (make-i/o-encoding-error . g$6557$1LXXoO)
        (make-i/o-decoding-error . g$6544$1LXXoO)
        (make-custom-textual-output-port . g$13282$1LXXoO)
        (make-custom-textual-input/output-port . g$13281$1LXXoO)
        (make-custom-textual-input-port . g$13280$1LXXoO)
        (make-custom-binary-output-port . g$13279$1LXXoO)
        (make-custom-binary-input/output-port . g$13278$1LXXoO)
        (make-custom-binary-input-port . g$13277$1LXXoO)
        (make-bytevector . g$13276$1LXXoO)
        (lookahead-u8 . g$13275$1LXXoO)
        (lookahead-char . g$13274$1LXXoO)
        (i/o-write-error? . g$6435$1LXXoO)
        (i/o-read-error? . g$6422$1LXXoO)
        (i/o-port-error? . g$6531$1LXXoO)
        (i/o-invalid-position-error? . g$6449$1LXXoO)
        (i/o-error-position . g$6450$1LXXoO)
        (i/o-filename-error? . g$6464$1LXXoO)
        (i/o-file-protection-error? . g$6478$1LXXoO)
        (i/o-file-is-read-only-error? . g$6491$1LXXoO)
        (i/o-file-does-not-exist-error? . g$6517$1LXXoO)
        (i/o-file-already-exists-error? . g$6504$1LXXoO)
        (i/o-error? . g$6409$1LXXoO)
        (i/o-error-port . g$6532$1LXXoO)
        (i/o-error-filename . g$6465$1LXXoO)
        (i/o-encoding-error? . g$6559$1LXXoO)
        (i/o-encoding-error-char . g$6560$1LXXoO)
        (i/o-decoding-error? . g$6545$1LXXoO)
        (get-u8 . g$13273$1LXXoO)
        (get-string-n! . g$13272$1LXXoO)
        (get-string-n . g$13271$1LXXoO)
        (get-string-all . g$13270$1LXXoO)
        (get-line . g$13269$1LXXoO)
        (get-datum . g$8378$1LXXoO)
        (get-char . g$13268$1LXXoO)
        (get-bytevector-some . g$13267$1LXXoO)
        (get-bytevector-n! . g$13266$1LXXoO)
        (get-bytevector-n . g$13265$1LXXoO)
        (get-bytevector-all . g$13264$1LXXoO)
        (flush-output-port . g$13263$1LXXoO)
        (close-port . g$13262$1LXXoO)
        (call-with-string-output-port . g$8383$1LXXoO)
        (call-with-port . g$8384$1LXXoO)
        (call-with-bytevector-output-port . g$13261$1LXXoO)
        (bytevector->string . g$13260$1LXXoO)
        (buffer-mode? . g$13259$1LXXoO)
        (binary-port? . g$13258$1LXXoO)
        (scheme-report-environment . g$9883$1LXXoO)
        (quotient . g$6603$1LXXoO)
        (null-environment . g$9882$1LXXoO)
        (remainder . g$6604$1LXXoO)
        (modulo . g$6605$1LXXoO)
        (inexact->exact . g$6600$1LXXoO)
        (force . g$6607$1LXXoO)
        (exact->inexact . g$6601$1LXXoO)
        (exit . g$13257$1LXXoO)
        (command-line . g$12922$1LXXoO)
        (string-fill! . g$13256$1LXXoO)
        (string-set! . g$13255$1LXXoO)
        (set-cdr! . g$13254$1LXXoO)
        (set-car! . g$13253$1LXXoO)
        (remove . g$5172$1LXXoO)
        (remv . g$5173$1LXXoO)
        (remp . g$5153$1LXXoO)
        (remq . g$5174$1LXXoO)
        (partition . g$5152$1LXXoO)
        (memv . g$5160$1LXXoO)
        (memq . g$5159$1LXXoO)
        (memp . g$5162$1LXXoO)
        (member . g$5161$1LXXoO)
        (exists . g$5166$1LXXoO)
        (for-all . g$5165$1LXXoO)
        (fold-right . g$5171$1LXXoO)
        (fold-left . g$5170$1LXXoO)
        (find . g$5151$1LXXoO)
        (filter . g$5154$1LXXoO)
        (cons* . g$5169$1LXXoO)
        (assv . g$5156$1LXXoO)
        (assq . g$5155$1LXXoO)
        (assp . g$5158$1LXXoO)
        (assoc . g$5157$1LXXoO)
        (with-exception-handler . g$13252$1LXXoO)
        (raise-continuable . g$13251$1LXXoO)
        (raise . g$13250$1LXXoO)
        (eval . g$9885$1LXXoO)
        (environment . g$9881$1LXXoO)
        (make-enumeration . g$8469$1LXXoO)
        (enum-set=? . g$8476$1LXXoO)
        (enum-set-universe . g$8470$1LXXoO)
        (enum-set-union . g$8477$1LXXoO)
        (enum-set-subset? . g$8475$1LXXoO)
        (enum-set-projection . g$8481$1LXXoO)
        (enum-set-member? . g$8474$1LXXoO)
        (enum-set-intersection . g$8478$1LXXoO)
        (enum-set-indexer . g$8471$1LXXoO)
        (enum-set-difference . g$8479$1LXXoO)
        (enum-set-constructor . g$8472$1LXXoO)
        (enum-set-complement . g$8480$1LXXoO)
        (enum-set->list . g$8473$1LXXoO)
        (who-condition? . g$6326$1LXXoO)
        (warning? . g$6245$1LXXoO)
        (violation? . g$6284$1LXXoO)
        (undefined-violation? . g$6396$1LXXoO)
        (syntax-violation? . g$6381$1LXXoO)
        (syntax-violation-subform . g$6383$1LXXoO)
        (syntax-violation-form . g$6382$1LXXoO)
        (syntax-violation . g$9903$1LXXoO)
        (simple-conditions . g$13249$1LXXoO)
        (serious-condition? . g$6258$1LXXoO)
        (non-continuable-violation? . g$6340$1LXXoO)
        (message-condition? . g$6231$1LXXoO)
        (make-who-condition . g$6324$1LXXoO)
        (make-warning . g$6244$1LXXoO)
        (make-violation . g$6283$1LXXoO)
        (make-undefined-violation . g$6395$1LXXoO)
        (make-syntax-violation . g$6378$1LXXoO)
        (make-serious-condition . g$6257$1LXXoO)
        (make-non-continuable-violation . g$6339$1LXXoO)
        (make-message-condition . g$6229$1LXXoO)
        (make-lexical-violation . g$6365$1LXXoO)
        (make-irritants-condition . g$6309$1LXXoO)
        (make-implementation-restriction-violation . g$6352$1LXXoO)
        (make-error . g$6270$1LXXoO)
        (make-assertion-violation . g$6296$1LXXoO)
        (lexical-violation? . g$6366$1LXXoO)
        (irritants-condition? . g$6311$1LXXoO)
        (implementation-restriction-violation? . g$6353$1LXXoO)
        (error? . g$6271$1LXXoO)
        (condition-who . g$6327$1LXXoO)
        (condition-predicate . g$13248$1LXXoO)
        (condition-message . g$6232$1LXXoO)
        (condition-irritants . g$6312$1LXXoO)
        (condition-accessor . g$13247$1LXXoO)
        (condition . g$13246$1LXXoO)
        (assertion-violation? . g$6297$1LXXoO)
        (condition? . g$13245$1LXXoO)
        (utf32->string . g$13244$1LXXoO)
        (utf16->string . g$13243$1LXXoO)
        (utf8->string . g$13242$1LXXoO)
        (uint-list->bytevector . g$13241$1LXXoO)
        (u8-list->bytevector . g$13240$1LXXoO)
        (string->utf8 . g$13239$1LXXoO)
        (string->utf32 . g$13238$1LXXoO)
        (string->utf16 . g$13237$1LXXoO)
        (sint-list->bytevector . g$13236$1LXXoO)
        (native-endianness . g$5816$1LXXoO)
        (bytevector? . g$5506$1LXXoO)
        (bytevector=? . g$13235$1LXXoO)
        (bytevector-uint-set! . g$13234$1LXXoO)
        (bytevector-uint-ref . g$13233$1LXXoO)
        (bytevector-u8-set! . g$13232$1LXXoO)
        (bytevector-u8-ref . g$13231$1LXXoO)
        (bytevector-u64-set! . g$5837$1LXXoO)
        (bytevector-u64-ref . g$5833$1LXXoO)
        (bytevector-u64-native-set! . g$5839$1LXXoO)
        (bytevector-u64-native-ref . g$5835$1LXXoO)
        (bytevector-u32-set! . g$5829$1LXXoO)
        (bytevector-u32-ref . g$5825$1LXXoO)
        (bytevector-u32-native-set! . g$5831$1LXXoO)
        (bytevector-u32-native-ref . g$5827$1LXXoO)
        (bytevector-u16-set! . g$5821$1LXXoO)
        (bytevector-u16-ref . g$5817$1LXXoO)
        (bytevector-u16-native-set! . g$5823$1LXXoO)
        (bytevector-u16-native-ref . g$5819$1LXXoO)
        (bytevector-sint-set! . g$13230$1LXXoO)
        (bytevector-sint-ref . g$13229$1LXXoO)
        (bytevector-s8-set! . g$13228$1LXXoO)
        (bytevector-s8-ref . g$13227$1LXXoO)
        (bytevector-s64-set! . g$5838$1LXXoO)
        (bytevector-s64-ref . g$5834$1LXXoO)
        (bytevector-s64-native-set! . g$5840$1LXXoO)
        (bytevector-s64-native-ref . g$5836$1LXXoO)
        (bytevector-s32-set! . g$5830$1LXXoO)
        (bytevector-s32-ref . g$5826$1LXXoO)
        (bytevector-s32-native-set! . g$5832$1LXXoO)
        (bytevector-s32-native-ref . g$5828$1LXXoO)
        (bytevector-s16-set! . g$5822$1LXXoO)
        (bytevector-s16-ref . g$5818$1LXXoO)
        (bytevector-s16-native-set! . g$5824$1LXXoO)
        (bytevector-s16-native-ref . g$5820$1LXXoO)
        (bytevector-length . g$13226$1LXXoO)
        (bytevector-ieee-single-set! . g$13225$1LXXoO)
        (bytevector-ieee-single-ref . g$13224$1LXXoO)
        (bytevector-ieee-single-native-set! . g$5843$1LXXoO)
        (bytevector-ieee-single-native-ref . g$5841$1LXXoO)
        (bytevector-ieee-double-set! . g$13223$1LXXoO)
        (bytevector-ieee-double-ref . g$13222$1LXXoO)
        (bytevector-ieee-double-native-set! . g$5844$1LXXoO)
        (bytevector-ieee-double-native-ref . g$5842$1LXXoO)
        (bytevector-fill! . g$13221$1LXXoO)
        (bytevector-copy! . g$13220$1LXXoO)
        (bytevector-copy . g$13219$1LXXoO)
        (bytevector->uint-list . g$13218$1LXXoO)
        (bytevector->u8-list . g$13217$1LXXoO)
        (bytevector->sint-list . g$13216$1LXXoO)
        (no-nans-violation? . g$6586$1LXXoO)
        (no-infinities-violation? . g$6573$1LXXoO)
        (make-no-nans-violation . g$6585$1LXXoO)
        (make-no-infinities-violation . g$6572$1LXXoO)
        (real->flonum . g$13215$1LXXoO)
        (flzero? . g$7823$1LXXoO)
        (fltruncate . g$7818$1LXXoO)
        (fltan . g$7804$1LXXoO)
        (flsqrt . g$7809$1LXXoO)
        (flsin . g$7802$1LXXoO)
        (flround . g$7819$1LXXoO)
        (flpositive? . g$7821$1LXXoO)
        (flonum? . g$5511$1LXXoO)
        (flodd? . g$7825$1LXXoO)
        (flnumerator . g$13214$1LXXoO)
        (flnegative? . g$7822$1LXXoO)
        (flnan? . g$7801$1LXXoO)
        (flmod0 . g$7786$1LXXoO)
        (flmod . g$7785$1LXXoO)
        (flmin . g$7827$1LXXoO)
        (flmax . g$7826$1LXXoO)
        (fllog . g$7808$1LXXoO)
        (flinteger? . g$7794$1LXXoO)
        (flinfinite? . g$7800$1LXXoO)
        (flfloor . g$7817$1LXXoO)
        (flfinite? . g$7795$1LXXoO)
        (flexpt . g$7811$1LXXoO)
        (flexp . g$7810$1LXXoO)
        (fleven? . g$7824$1LXXoO)
        (fldiv0-and-mod0 . g$7793$1LXXoO)
        (fldiv0 . g$7780$1LXXoO)
        (fldiv-and-mod . g$7787$1LXXoO)
        (fldiv . g$7792$1LXXoO)
        (fldenominator . g$13213$1LXXoO)
        (flcos . g$7803$1LXXoO)
        (flceiling . g$7812$1LXXoO)
        (flatan . g$7807$1LXXoO)
        (flasin . g$7805$1LXXoO)
        (flacos . g$7806$1LXXoO)
        (flabs . g$7820$1LXXoO)
        (fl>? . g$7774$1LXXoO)
        (fl>=? . g$7775$1LXXoO)
        (fl=? . g$7771$1LXXoO)
        (fl<? . g$7772$1LXXoO)
        (fl<=? . g$7773$1LXXoO)
        (fl/ . g$7770$1LXXoO)
        (fl- . g$7769$1LXXoO)
        (fl+ . g$7767$1LXXoO)
        (fl* . g$7768$1LXXoO)
        (fixnum->flonum . g$13212$1LXXoO)
        (fxzero? . g$6867$1LXXoO)
        (fxxor . g$6830$1LXXoO)
        (fxrotate-bit-field . g$6905$1LXXoO)
        (fxreverse-bit-field . g$6906$1LXXoO)
        (fxpositive? . g$6857$1LXXoO)
        (fxodd? . g$6877$1LXXoO)
        (fxnot . g$6811$1LXXoO)
        (fxnegative? . g$6862$1LXXoO)
        (fxmod0 . g$6841$1LXXoO)
        (fxmod . g$6840$1LXXoO)
        (fxmin . g$6879$1LXXoO)
        (fxmax . g$6878$1LXXoO)
        (fxlength . g$6808$1LXXoO)
        (fxior . g$6829$1LXXoO)
        (fxif . g$6887$1LXXoO)
        (fxfirst-bit-set . g$6809$1LXXoO)
        (fxeven? . g$6872$1LXXoO)
        (fxdiv0-and-mod0 . g$6852$1LXXoO)
        (fxdiv0 . g$6847$1LXXoO)
        (fxdiv-and-mod . g$6842$1LXXoO)
        (fxdiv . g$6835$1LXXoO)
        (fxcopy-bit-field . g$6902$1LXXoO)
        (fxcopy-bit . g$6892$1LXXoO)
        (fxbit-set? . g$6810$1LXXoO)
        (fxbit-field . g$6897$1LXXoO)
        (fxbit-count . g$6803$1LXXoO)
        (fxarithmetic-shift-right . g$6904$1LXXoO)
        (fxarithmetic-shift-left . g$6903$1LXXoO)
        (fxarithmetic-shift . g$6798$1LXXoO)
        (fxand . g$6828$1LXXoO)
        (fx>? . g$6820$1LXXoO)
        (fx>=? . g$6821$1LXXoO)
        (fx=? . g$6817$1LXXoO)
        (fx<? . g$6818$1LXXoO)
        (fx<=? . g$6819$1LXXoO)
        (fx-/carry . g$6881$1LXXoO)
        (fx- . g$6792$1LXXoO)
        (fx+/carry . g$6882$1LXXoO)
        (fx+ . g$6790$1LXXoO)
        (fx*/carry . g$6880$1LXXoO)
        (fx* . g$6791$1LXXoO)
        (greatest-fixnum . g$6761$1LXXoO)
        (least-fixnum . g$6762$1LXXoO)
        (fixnum-width . g$5512$1LXXoO)
        (fixnum? . g$5510$1LXXoO)
        (bitwise-rotate-bit-field . g$6735$1LXXoO)
        (bitwise-reverse-bit-field . g$13211$1LXXoO)
        (bitwise-length . g$13210$1LXXoO)
        (bitwise-if . g$6729$1LXXoO)
        (bitwise-first-bit-set . g$13209$1LXXoO)
        (bitwise-copy-bit-field . g$6732$1LXXoO)
        (bitwise-copy-bit . g$6730$1LXXoO)
        (bitwise-bit-set? . g$13208$1LXXoO)
        (bitwise-bit-field . g$6731$1LXXoO)
        (bitwise-bit-count . g$13207$1LXXoO)
        (bitwise-xor . g$13206$1LXXoO)
        (bitwise-ior . g$13205$1LXXoO)
        (bitwise-and . g$13204$1LXXoO)
        (bitwise-not . g$13203$1LXXoO)
        (bitwise-arithmetic-shift-right . g$6734$1LXXoO)
        (bitwise-arithmetic-shift-left . g$6733$1LXXoO)
        (bitwise-arithmetic-shift . g$13202$1LXXoO)
        (zero? . g$5950$1LXXoO)
        (vector? . g$5505$1LXXoO)
        (vector-set! . g$5521$1LXXoO)
        (vector-ref . g$5520$1LXXoO)
        (vector-map . g$5584$1LXXoO)
        (vector-length . g$13201$1LXXoO)
        (vector-for-each . g$5585$1LXXoO)
        (vector-fill! . g$5522$1LXXoO)
        (vector->list . g$13200$1LXXoO)
        (vector . g$13199$1LXXoO)
        (values . g$13198$1LXXoO)
        (truncate . g$6002$1LXXoO)
        (tan . g$5988$1LXXoO)
        (symbol? . g$5507$1LXXoO)
        (symbol=? . g$5569$1LXXoO)
        (symbol->string . g$13197$1LXXoO)
        (substring . g$13196$1LXXoO)
        (string? . g$13195$1LXXoO)
        (string>? . g$5566$1LXXoO)
        (string>=? . g$5568$1LXXoO)
        (string=? . g$5564$1LXXoO)
        (string<? . g$5565$1LXXoO)
        (string<=? . g$5567$1LXXoO)
        (string-ref . g$13194$1LXXoO)
        (string-length . g$13193$1LXXoO)
        (string-for-each . g$5586$1LXXoO)
        (string-copy . g$13192$1LXXoO)
        (string-append . g$13191$1LXXoO)
        (string->symbol . g$13190$1LXXoO)
        (string->number . g$13189$1LXXoO)
        (string->list . g$13188$1LXXoO)
        (string . g$13187$1LXXoO)
        (sqrt . g$13186$1LXXoO)
        (sin . g$5982$1LXXoO)
        (round . g$6003$1LXXoO)
        (reverse . g$5524$1LXXoO)
        (real? . g$5944$1LXXoO)
        (real-valued? . g$5947$1LXXoO)
        (real-part . g$5975$1LXXoO)
        (rationalize . g$5581$1LXXoO)
        (rational? . g$5945$1LXXoO)
        (rational-valued? . g$5948$1LXXoO)
        (procedure? . g$5509$1LXXoO)
        (positive? . g$5951$1LXXoO)
        (pair? . g$13185$1LXXoO)
        (odd? . g$5554$1LXXoO)
        (numerator . g$5973$1LXXoO)
        (number? . g$5937$1LXXoO)
        (number->string . g$13184$1LXXoO)
        (null? . g$13183$1LXXoO)
        (not . g$13182$1LXXoO)
        (negative? . g$5952$1LXXoO)
        (nan? . g$5938$1LXXoO)
        (min . g$5556$1LXXoO)
        (max . g$5555$1LXXoO)
        (map . g$5167$1LXXoO)
        (make-vector . g$13181$1LXXoO)
        (make-string . g$13180$1LXXoO)
        (make-rectangular . g$5968$1LXXoO)
        (make-polar . g$5969$1LXXoO)
        (magnitude . g$5971$1LXXoO)
        (log . g$5991$1LXXoO)
        (list? . g$13179$1LXXoO)
        (list-tail . g$5147$1LXXoO)
        (list-ref . g$5148$1LXXoO)
        (list->vector . g$5518$1LXXoO)
        (list->string . g$5519$1LXXoO)
        (list . g$13178$1LXXoO)
        (length . g$13177$1LXXoO)
        (lcm . g$5558$1LXXoO)
        (integer? . g$5946$1LXXoO)
        (integer-valued? . g$5949$1LXXoO)
        (integer->char . g$13176$1LXXoO)
        (infinite? . g$5940$1LXXoO)
        (inexact? . g$5942$1LXXoO)
        (inexact . g$13175$1LXXoO)
        (imag-part . g$5976$1LXXoO)
        (gcd . g$5557$1LXXoO)
        (for-each . g$5168$1LXXoO)
        (floor . g$6000$1LXXoO)
        (finite? . g$5939$1LXXoO)
        (expt . g$13174$1LXXoO)
        (exp . g$5981$1LXXoO)
        (exact? . g$5941$1LXXoO)
        (exact-integer-sqrt . g$13173$1LXXoO)
        (exact . g$13172$1LXXoO)
        (even? . g$5553$1LXXoO)
        (error . g$13171$1LXXoO)
        (eqv? . g$13170$1LXXoO)
        (equal? . g$13169$1LXXoO)
        (eq? . g$13168$1LXXoO)
        (dynamic-wind . g$13167$1LXXoO)
        (div0-and-mod0 . g$5517$1LXXoO)
        (mod0 . g$5515$1LXXoO)
        (div0 . g$5513$1LXXoO)
        (div-and-mod . g$5516$1LXXoO)
        (mod . g$5514$1LXXoO)
        (div . g$5992$1LXXoO)
        (denominator . g$5974$1LXXoO)
        (cos . g$5985$1LXXoO)
        (cons . g$13166$1LXXoO)
        (complex? . g$5943$1LXXoO)
        (char? . g$5504$1LXXoO)
        (char>? . g$5578$1LXXoO)
        (char>=? . g$5580$1LXXoO)
        (char=? . g$5576$1LXXoO)
        (char<? . g$5577$1LXXoO)
        (char<=? . g$5579$1LXXoO)
        (char->integer . g$13165$1LXXoO)
        (ceiling . g$6001$1LXXoO)
        (call-with-values . g$13164$1LXXoO)
        (call/cc . g$13163$1LXXoO)
        (call-with-current-continuation . g$13162$1LXXoO)
        (cddddr . g$5552$1LXXoO)
        (cdddar . g$5551$1LXXoO)
        (cddadr . g$5550$1LXXoO)
        (cddaar . g$5549$1LXXoO)
        (cdaddr . g$5548$1LXXoO)
        (cdadar . g$5547$1LXXoO)
        (cdaadr . g$5546$1LXXoO)
        (cdaaar . g$5545$1LXXoO)
        (cadddr . g$5544$1LXXoO)
        (caddar . g$5543$1LXXoO)
        (cadadr . g$5542$1LXXoO)
        (cadaar . g$5541$1LXXoO)
        (caaddr . g$5540$1LXXoO)
        (caadar . g$5539$1LXXoO)
        (caaadr . g$5538$1LXXoO)
        (caaaar . g$5537$1LXXoO)
        (cdddr . g$5536$1LXXoO)
        (cddar . g$5535$1LXXoO)
        (cdadr . g$5534$1LXXoO)
        (cdaar . g$5533$1LXXoO)
        (caddr . g$5532$1LXXoO)
        (cadar . g$5531$1LXXoO)
        (caadr . g$5530$1LXXoO)
        (caaar . g$5529$1LXXoO)
        (cddr . g$5528$1LXXoO)
        (cdar . g$5527$1LXXoO)
        (cadr . g$5526$1LXXoO)
        (caar . g$5525$1LXXoO)
        (cdr . g$13161$1LXXoO)
        (car . g$13160$1LXXoO)
        (boolean? . g$5508$1LXXoO)
        (boolean=? . g$5570$1LXXoO)
        (atan . g$5990$1LXXoO)
        (assertion-violation . g$13159$1LXXoO)
        (asin . g$5983$1LXXoO)
        (apply . g$13158$1LXXoO)
        (append . g$13157$1LXXoO)
        (angle . g$5970$1LXXoO)
        (acos . g$5986$1LXXoO)
        (abs . g$5993$1LXXoO)
        (/ . g$13156$1LXXoO)
        (* . g$13155$1LXXoO)
        (- . g$13154$1LXXoO)
        (+ . g$13153$1LXXoO)
        (>= . g$5967$1LXXoO)
        (> . g$5966$1LXXoO)
        (= . g$5963$1LXXoO)
        (<= . g$5965$1LXXoO)
        (< . g$5964$1LXXoO)
        ($fl>=? . g$13152$1LXXoO)
        ($fl>? . g$13151$1LXXoO)
        ($fl<=? . g$13150$1LXXoO)
        ($fl<? . g$13149$1LXXoO)
        ($fl- . g$13148$1LXXoO)
        ($fl/ . g$13147$1LXXoO)
        ($fl* . g$13146$1LXXoO)
        ($fl+ . g$13145$1LXXoO)
        ($fl=? . g$13144$1LXXoO)
        ($try . g$13143$1LXXoO)
        ($fxarithmetic-shift-right . g$13142$1LXXoO)
        ($fxarithmetic-shift-left . g$13141$1LXXoO)
        ($$fx- . g$13140$1LXXoO)
        ($$fx* . g$13139$1LXXoO)
        ($$fx+ . g$13138$1LXXoO)
        ($fxnot . g$13137$1LXXoO)
        ($fxxor . g$13136$1LXXoO)
        ($fxior . g$13135$1LXXoO)
        ($fxand . g$13134$1LXXoO)
        ($fx>=? . g$13133$1LXXoO)
        ($fx>? . g$13132$1LXXoO)
        ($fx<=? . g$13131$1LXXoO)
        ($fx<? . g$13130$1LXXoO)
        ($fx- . g$13129$1LXXoO)
        ($fxmod0 . g$13128$1LXXoO)
        ($fxdiv0 . g$13127$1LXXoO)
        ($fx* . g$13126$1LXXoO)
        ($fx+ . g$13125$1LXXoO)
        ($fx=? . g$13124$1LXXoO)
        ($vector-set! . g$13123$1LXXoO)
        ($vector-ref . g$13122$1LXXoO)
        ($cdr . g$13121$1LXXoO)
        ($car . g$13120$1LXXoO)
        (make-record-printer . g$13119$1LXXoO)
        (eqv-hash . g$13118$1LXXoO)
        (reverse! . g$13117$1LXXoO)
        (deserialize-port . g$13116$1LXXoO)
        (serialize-port . g$13115$1LXXoO)
        (enum-set? . g$8446$1LXXoO)
        (make-promise . g$6606$1LXXoO)
        (load/unload . g$12925$1LXXoO)
        (load/args . g$12924$1LXXoO)
        (printf . g$8555$1LXXoO)
        (fprintf . g$8556$1LXXoO)
        (format . g$8557$1LXXoO)
        (procedure-form . g$13114$1LXXoO)
        (procedure-environment . g$13113$1LXXoO)
        (procedure-name . g$13112$1LXXoO)
        (procedure-arity . g$13111$1LXXoO)
        (gc-collect . g$13110$1LXXoO)
        (typeof . g$13109$1LXXoO)
        (clr-type? . g$13108$1LXXoO)
        (get-clr-type . g$13107$1LXXoO)
        (get-command-line . g$13106$1LXXoO)
        (vector-append . g$13105$1LXXoO)
        (vector-filter . g$13104$1LXXoO)
        (vector-reverse! . g$13103$1LXXoO)
        (vector-contains? . g$13102$1LXXoO)
        (vector-index-of . g$13101$1LXXoO)
        (vector-copy . g$13100$1LXXoO)
        (vector-binary-search . g$13099$1LXXoO)
        (string-ci-compare . g$13098$1LXXoO)
        (string-compare . g$13097$1LXXoO)
        (string-format . g$13096$1LXXoO)
        (trace-printer . g$12921$1LXXoO)
        (make-traced-procedure . g$13095$1LXXoO)
        (make-traced-macro . g$8577$1LXXoO)
        (assertion-error . g$9899$1LXXoO)
        (time-it . g$13094$1LXXoO)
        (make-parameter . g$8584$1LXXoO)
        (library-locator . g$13093$1LXXoO)
        (get-library-paths . g$13092$1LXXoO)
        (open-tcp-input/output-port . g$13091$1LXXoO)
        (hashtable-for-each . g$13090$1LXXoO)
        (hashtable-map . g$13089$1LXXoO)
        (environment-bindings . g$9877$1LXXoO)
        (environment-symbols . g$9880$1LXXoO)
        (interaction-environment-symbols . g$9876$1LXXoO)
        (optimization-level . g$13088$1LXXoO)
        (library-path . g$9206$1LXXoO)
        (make-compile-time-value . g$9585$1LXXoO)
        (expand->core . g$9886$1LXXoO)
        (expand . g$9884$1LXXoO)
        (syntax-transpose . g$9823$1LXXoO)
        (convert->cps . g$8903$1LXXoO)
        (inexact=? . g$13087$1LXXoO)
        (inexact-compare . g$13086$1LXXoO)
        (exact-compare . g$13085$1LXXoO)
        (installed-libraries . g$9227$1LXXoO)
        (uninstall-library . g$9218$1LXXoO)
        (pretty-gensyms . g$8667$1LXXoO)
        (pretty-width . g$8664$1LXXoO)
        (pretty-print . g$8669$1LXXoO)
        (pointer+ . g$13084$1LXXoO)
        (&no-nans . g$13083$1LXXoO)
        (&no-infinities . g$13082$1LXXoO)
        (&i/o-encoding . g$13081$1LXXoO)
        (&i/o-decoding . g$13080$1LXXoO)
        (&i/o-port . g$13079$1LXXoO)
        (&i/o-file-does-not-exist . g$13078$1LXXoO)
        (&i/o-file-already-exists . g$13077$1LXXoO)
        (&i/o-file-is-read-only . g$13076$1LXXoO)
        (&i/o-file-protection . g$13075$1LXXoO)
        (&i/o-filename . g$13074$1LXXoO)
        (&i/o-invalid-position . g$13073$1LXXoO)
        (&i/o-write . g$13072$1LXXoO)
        (&i/o-read . g$13071$1LXXoO)
        (&i/o . g$13070$1LXXoO)
        (&non-continuable . g$13069$1LXXoO)
        (&undefined . g$13068$1LXXoO)
        (&syntax . g$13067$1LXXoO)
        (&lexical . g$13066$1LXXoO)
        (&implementation-restriction . g$13065$1LXXoO)
        (&who . g$13064$1LXXoO)
        (&irritants . g$13063$1LXXoO)
        (&assertion . g$13062$1LXXoO)
        (&violation . g$13061$1LXXoO)
        (&error . g$13060$1LXXoO)
        (&serious . g$13059$1LXXoO)
        (&warning . g$13058$1LXXoO)
        (&message . g$13057$1LXXoO)
        (&condition . g$13056$1LXXoO)
        (define-condition-type . g$13055$1LXXoO)
        (define-enumeration . g$13054$1LXXoO)
        (define-record-type . g$13053$1LXXoO)
        (parent-rtd . g$13052$1LXXoO)
        (nongenerative . g$13051$1LXXoO)
        (opaque . g$13050$1LXXoO)
        (sealed . g$13049$1LXXoO)
        (protocol . g$13048$1LXXoO)
        (parent . g$13047$1LXXoO)
        (immutable . g$13046$1LXXoO)
        (mutable . g$13045$1LXXoO)
        (fields . g$13044$1LXXoO)
        (error-handling-mode . g$13043$1LXXoO)
        (file-options . g$13042$1LXXoO)
        (buffer-mode . g$13041$1LXXoO)
        (eol-style . g$13040$1LXXoO)
        (guard . g$13039$1LXXoO)
        (trace-letrec-syntax . g$13038$1LXXoO)
        (trace-let-syntax . g$13037$1LXXoO)
        (trace-define-syntax . g$13036$1LXXoO)
        (trace-define . g$13035$1LXXoO)
        (trace-lambda . g$13034$1LXXoO)
        (unsyntax-splicing . g$13033$1LXXoO)
        (unsyntax . g$13032$1LXXoO)
        (unquote-splicing . g$13031$1LXXoO)
        (unquote . g$13030$1LXXoO)
        (_ . g$13029$1LXXoO)
        (else . g$13028$1LXXoO)
        (=> . g$13027$1LXXoO)
        (... . g$13026$1LXXoO)
        (assert . g$13025$1LXXoO)
        (endianness . g$13024$1LXXoO)
        (delay . g$13023$1LXXoO)
        (time . g$13022$1LXXoO)
        (or . g$13021$1LXXoO)
        (and . g$13020$1LXXoO)
        (do . g$13019$1LXXoO)
        (cond . g$13018$1LXXoO)
        (let* . g$13017$1LXXoO)
        (let . g$13016$1LXXoO)
        (identifier-syntax . g$13015$1LXXoO)
        (with-syntax . g$13014$1LXXoO)
        (quasisyntax . g$13013$1LXXoO)
        (quasiquote . g$13012$1LXXoO)
        (syntax-rules . g$13011$1LXXoO)
        (include-into . g$13010$1LXXoO)
        (include . g$13009$1LXXoO)
        (define-struct . g$13008$1LXXoO)
        (let-values . g$13007$1LXXoO)
        (let*-values . g$13006$1LXXoO)
        (record-constructor-descriptor . g$13005$1LXXoO)
        (record-type-descriptor . g$13004$1LXXoO)
        (fluid-let-syntax . g$13003$1LXXoO)
        (case . g$13002$1LXXoO)
        (parameterize . g$13001$1LXXoO)
        (unless . g$13000$1LXXoO)
        (when . g$12999$1LXXoO)
        (if . g$12998$1LXXoO)
        (letrec* . g$12997$1LXXoO)
        (letrec . g$12996$1LXXoO)
        (type-descriptor . g$12995$1LXXoO)
        (case-lambda . g$12994$1LXXoO)
        (lambda . g$12993$1LXXoO)
        (syntax . g$12992$1LXXoO)
        (syntax-case . g$12991$1LXXoO)
        (quote . g$12990$1LXXoO)
        (foreign-call . g$12989$1LXXoO)
        (letrec-syntax . g$12988$1LXXoO)
        (let-syntax . g$12987$1LXXoO)
        (set! . g$12986$1LXXoO)
        (export . g$12985$1LXXoO)
        (import . g$12984$1LXXoO)
        (library . g$12983$1LXXoO)
        (begin . g$12982$1LXXoO)
        (module . g$12981$1LXXoO)
        (define-syntax . g$12980$1LXXoO)
        (define . g$12979$1LXXoO))
      '((g$9780$1LXXoO core-prim . ellipsis-map)
        (g$6588$1LXXoO core-prim . &no-nans-rcd)
        (g$6587$1LXXoO core-prim . &no-nans-rtd)
        (g$6575$1LXXoO core-prim . &no-infinities-rcd)
        (g$6574$1LXXoO core-prim . &no-infinities-rtd)
        (g$6562$1LXXoO core-prim . &i/o-encoding-rcd)
        (g$6561$1LXXoO core-prim . &i/o-encoding-rtd)
        (g$6547$1LXXoO core-prim . &i/o-decoding-rcd)
        (g$6546$1LXXoO core-prim . &i/o-decoding-rtd)
        (g$6534$1LXXoO core-prim . &i/o-port-rcd)
        (g$6533$1LXXoO core-prim . &i/o-port-rtd)
        (g$6519$1LXXoO core-prim . &i/o-file-does-not-exist-rcd)
        (g$6518$1LXXoO core-prim . &i/o-file-does-not-exist-rtd)
        (g$6506$1LXXoO core-prim . &i/o-file-already-exists-rcd)
        (g$6505$1LXXoO core-prim . &i/o-file-already-exists-rtd)
        (g$6493$1LXXoO core-prim . &i/o-file-is-read-only-rcd)
        (g$6492$1LXXoO core-prim . &i/o-file-is-read-only-rtd)
        (g$6480$1LXXoO core-prim . &i/o-file-protection-rcd)
        (g$6479$1LXXoO core-prim . &i/o-file-protection-rtd)
        (g$6467$1LXXoO core-prim . &i/o-filename-rcd)
        (g$6466$1LXXoO core-prim . &i/o-filename-rtd)
        (g$6452$1LXXoO core-prim . &i/o-invalid-position-rcd)
        (g$6451$1LXXoO core-prim . &i/o-invalid-position-rtd)
        (g$6437$1LXXoO core-prim . &i/o-write-rcd)
        (g$6436$1LXXoO core-prim . &i/o-write-rtd)
        (g$6424$1LXXoO core-prim . &i/o-read-rcd)
        (g$6423$1LXXoO core-prim . &i/o-read-rtd)
        (g$6411$1LXXoO core-prim . &i/o-rcd)
        (g$6410$1LXXoO core-prim . &i/o-rtd)
        (g$6398$1LXXoO core-prim . &undefined-rcd)
        (g$6397$1LXXoO core-prim . &undefined-rtd)
        (g$6385$1LXXoO core-prim . &syntax-rcd)
        (g$6384$1LXXoO core-prim . &syntax-rtd)
        (g$6368$1LXXoO core-prim . &lexical-rcd)
        (g$6367$1LXXoO core-prim . &lexical-rtd)
        (g$6355$1LXXoO core-prim . &implementation-restriction-rcd)
        (g$6354$1LXXoO core-prim . &implementation-restriction-rtd)
        (g$6342$1LXXoO core-prim . &non-continuable-rcd)
        (g$6341$1LXXoO core-prim . &non-continuable-rtd)
        (g$6329$1LXXoO core-prim . &who-rcd)
        (g$6328$1LXXoO core-prim . &who-rtd)
        (g$6314$1LXXoO core-prim . &irritants-rcd)
        (g$6313$1LXXoO core-prim . &irritants-rtd)
        (g$6299$1LXXoO core-prim . &assertion-rcd)
        (g$6298$1LXXoO core-prim . &assertion-rtd)
        (g$6286$1LXXoO core-prim . &violation-rcd)
        (g$6285$1LXXoO core-prim . &violation-rtd)
        (g$6273$1LXXoO core-prim . &error-rcd)
        (g$6272$1LXXoO core-prim . &error-rtd)
        (g$6260$1LXXoO core-prim . &serious-rcd)
        (g$6259$1LXXoO core-prim . &serious-rtd)
        (g$6247$1LXXoO core-prim . &warning-rcd)
        (g$6246$1LXXoO core-prim . &warning-rtd)
        (g$6234$1LXXoO core-prim . &message-rcd)
        (g$6233$1LXXoO core-prim . &message-rtd)
        (g$6194$1LXXoO core-prim . &condition-rcd)
        (g$6193$1LXXoO core-prim . &condition-rtd)
        (g$13411$1LXXoO core-prim . library-letrec*)
        (g$13410$1LXXoO core-prim . annotation-stripped)
        (g$13409$1LXXoO core-prim . annotation-source)
        (g$13408$1LXXoO core-prim . annotation-expression)
        (g$13407$1LXXoO core-prim . annotation?)
        (g$13406$1LXXoO core-prim . read-annotated)
        (g$5989$1LXXoO core-prim . tanh)
        (g$5987$1LXXoO core-prim . cosh)
        (g$5984$1LXXoO core-prim . sinh)
        (g$13405$1LXXoO core-prim . make-guid)
        (g$13404$1LXXoO core-prim . unspecified?)
        (g$5150$1LXXoO core-prim . make-list)
        (g$5149$1LXXoO core-prim . last-pair)
        (g$13403$1LXXoO core-prim . load-r5rs)
        (g$13402$1LXXoO core-prim . license)
        (g$13401$1LXXoO core-prim . stacktrace)
        (g$12927$1LXXoO core-prim . ironscheme-build)
        (g$13400$1LXXoO core-prim . pinvoke-call-internal)
        (g$13399$1LXXoO core-prim . ffi-callback-internal)
        (g$13398$1LXXoO core-prim . ffi-callout-internal)
        (g$13397$1LXXoO core-prim . define-clr-class-internal)
        (g$13396$1LXXoO core-prim . clr-field-set!-internal)
        (g$13395$1LXXoO core-prim . clr-field-get-internal)
        (g$13394$1LXXoO core-prim . clr-cast-internal)
        (g$13393$1LXXoO core-prim . clr-call-internal)
        (g$13392$1LXXoO core-prim . clr-new-internal)
        (g$13391$1LXXoO core-prim . clr-new-array-internal)
        (g$13390$1LXXoO core-prim . clr-is-internal)
        (g$13389$1LXXoO core-prim . clr-reference-internal)
        (g$13388$1LXXoO core-prim . clr-using-internal)
        (g$9900$1LXXoO core-prim . syntax-error)
        (g$9775$1LXXoO core-prim . syntax-dispatch)
        (g$13387$1LXXoO core-prim . compile-core)
        (g$13386$1LXXoO core-prim . eval-core)
        (g$13385$1LXXoO core-prim . remove-location)
        (g$13384$1LXXoO core-prim . set-symbol-value!)
        (g$13383$1LXXoO core-prim . symbol-value)
        (g$13382$1LXXoO core-prim . symbol-bound?)
        (g$13381$1LXXoO core-prim . ungensym)
        (g$13380$1LXXoO core-prim . gensym)
        (g$13379$1LXXoO core-prim . void)
        (g$13378$1LXXoO core-prim . load-serialized-library)
        (g$13377$1LXXoO core-prim . serialize-library)
        (g$12931$1LXXoO core-prim . compile-system-libraries)
        (g$12933$1LXXoO core-prim . compile->closure)
        (g$12932$1LXXoO core-prim . compile)
        (g$12926$1LXXoO core-prim . load)
        (g$13376$1LXXoO core-prim . string-normalize)
        (g$9910$1LXXoO core-prim . interaction-environment)
        (g$13375$1LXXoO core-prim . char-ready?)
        (g$13374$1LXXoO core-prim . string-upcase)
        (g$13373$1LXXoO core-prim . string-titlecase)
        (g$6671$1LXXoO core-prim . string-normalize-nfkd)
        (g$6670$1LXXoO core-prim . string-normalize-nfkc)
        (g$6669$1LXXoO core-prim . string-normalize-nfd)
        (g$6668$1LXXoO core-prim . string-normalize-nfc)
        (g$13372$1LXXoO core-prim . string-foldcase)
        (g$13371$1LXXoO core-prim . string-downcase)
        (g$6655$1LXXoO core-prim . string-ci>?)
        (g$6657$1LXXoO core-prim . string-ci>=?)
        (g$6653$1LXXoO core-prim . string-ci=?)
        (g$6654$1LXXoO core-prim . string-ci<?)
        (g$6656$1LXXoO core-prim . string-ci<=?)
        (g$13370$1LXXoO core-prim . char-whitespace?)
        (g$13369$1LXXoO core-prim . char-upper-case?)
        (g$13368$1LXXoO core-prim . char-title-case?)
        (g$13367$1LXXoO core-prim . char-numeric?)
        (g$13366$1LXXoO core-prim . char-lower-case?)
        (g$13365$1LXXoO core-prim . char-general-category)
        (g$13364$1LXXoO core-prim . char-upcase)
        (g$13363$1LXXoO core-prim . char-titlecase)
        (g$13362$1LXXoO core-prim . char-foldcase)
        (g$13361$1LXXoO core-prim . char-downcase)
        (g$6665$1LXXoO core-prim . char-ci>?)
        (g$6667$1LXXoO core-prim . char-ci>=?)
        (g$6663$1LXXoO core-prim . char-ci=?)
        (g$6664$1LXXoO core-prim . char-ci<?)
        (g$6666$1LXXoO core-prim . char-ci<=?)
        (g$13360$1LXXoO core-prim . char-alphabetic?)
        (g$9587$1LXXoO core-prim . variable-transformer-procedure)
        (g$9586$1LXXoO core-prim . variable-transformer?)
        (g$9584$1LXXoO core-prim . make-variable-transformer)
        (g$9904$1LXXoO core-prim . identifier?)
        (g$9893$1LXXoO core-prim . generate-temporaries)
        (g$9894$1LXXoO core-prim . free-identifier=?)
        (g$9906$1LXXoO core-prim . syntax->datum)
        (g$9905$1LXXoO core-prim . datum->syntax)
        (g$9895$1LXXoO core-prim . bound-identifier=?)
        (g$13359$1LXXoO core-prim . record-type-descriptor?)
        (g$13358$1LXXoO core-prim . record-predicate)
        (g$13357$1LXXoO core-prim . record-mutator)
        (g$13356$1LXXoO core-prim . record-constructor)
        (g$13355$1LXXoO core-prim . record-accessor)
        (g$13354$1LXXoO core-prim . make-record-type-descriptor)
        (g$13353$1LXXoO core-prim . make-record-constructor-descriptor)
        (g$13352$1LXXoO core-prim . record?)
        (g$13351$1LXXoO core-prim . record-type-uid)
        (g$13350$1LXXoO core-prim . record-type-sealed?)
        (g$13349$1LXXoO core-prim . record-type-parent)
        (g$13348$1LXXoO core-prim . record-type-opaque?)
        (g$13347$1LXXoO core-prim . record-type-name)
        (g$13346$1LXXoO core-prim . record-type-generative?)
        (g$13345$1LXXoO core-prim . record-type-field-names)
        (g$13344$1LXXoO core-prim . record-rtd)
        (g$13343$1LXXoO core-prim . record-field-mutable?)
        (g$5810$1LXXoO core-prim . delete-file)
        (g$5809$1LXXoO core-prim . file-exists?)
        (g$13342$1LXXoO core-prim . vector-sort!)
        (g$13341$1LXXoO core-prim . vector-sort)
        (g$6624$1LXXoO core-prim . list-sort)
        (g$13340$1LXXoO core-prim . symbol-hash)
        (g$13339$1LXXoO core-prim . string-ci-hash)
        (g$13338$1LXXoO core-prim . string-hash)
        (g$13337$1LXXoO core-prim . equal-hash)
        (g$13336$1LXXoO core-prim . hashtable-equivalence-function)
        (g$13335$1LXXoO core-prim . make-hashtable)
        (g$13334$1LXXoO core-prim . hashtable-hash-function)
        (g$5777$1LXXoO core-prim . make-eqv-hashtable)
        (g$5776$1LXXoO core-prim . make-eq-hashtable)
        (g$13333$1LXXoO core-prim . hashtable?)
        (g$5783$1LXXoO core-prim . hashtable-update!)
        (g$5778$1LXXoO core-prim . hashtable-size)
        (g$5780$1LXXoO core-prim . hashtable-set!)
        (g$5779$1LXXoO core-prim . hashtable-ref)
        (g$13332$1LXXoO core-prim . hashtable-mutable?)
        (g$13331$1LXXoO core-prim . hashtable-keys)
        (g$13330$1LXXoO core-prim . hashtable-entries)
        (g$5781$1LXXoO core-prim . hashtable-delete!)
        (g$13329$1LXXoO core-prim . hashtable-copy)
        (g$5782$1LXXoO core-prim . hashtable-contains?)
        (g$5784$1LXXoO core-prim . hashtable-clear!)
        (g$8408$1LXXoO core-prim . call-with-output-file)
        (g$8407$1LXXoO core-prim . call-with-input-file)
        (g$8399$1LXXoO core-prim . write-char)
        (g$13328$1LXXoO core-prim . write)
        (g$8406$1LXXoO core-prim . with-output-to-file)
        (g$8405$1LXXoO core-prim . with-input-from-file)
        (g$8398$1LXXoO core-prim . read-char)
        (g$13327$1LXXoO core-prim . read)
        (g$8397$1LXXoO core-prim . peek-char)
        (g$13326$1LXXoO core-prim . open-output-file)
        (g$13325$1LXXoO core-prim . open-input-file)
        (g$8409$1LXXoO core-prim . newline)
        (g$13324$1LXXoO core-prim . display)
        (g$13323$1LXXoO core-prim . close-output-port)
        (g$13322$1LXXoO core-prim . close-input-port)
        (g$13321$1LXXoO core-prim . eof-object?)
        (g$13320$1LXXoO core-prim . eof-object)
        (g$13319$1LXXoO core-prim . current-error-port)
        (g$13318$1LXXoO core-prim . current-output-port)
        (g$13317$1LXXoO core-prim . current-input-port)
        (g$13316$1LXXoO core-prim . output-port?)
        (g$13315$1LXXoO core-prim . input-port?)
        (g$13314$1LXXoO core-prim . utf-8-codec)
        (g$13313$1LXXoO core-prim . utf-16-codec)
        (g$13312$1LXXoO core-prim . transcoder-error-handling-mode)
        (g$13311$1LXXoO core-prim . transcoder-eol-style)
        (g$13310$1LXXoO core-prim . transcoder-codec)
        (g$13309$1LXXoO core-prim . transcoded-port)
        (g$13308$1LXXoO core-prim . textual-port?)
        (g$13307$1LXXoO core-prim . string->bytevector)
        (g$13306$1LXXoO core-prim . standard-output-port)
        (g$13305$1LXXoO core-prim . standard-input-port)
        (g$13304$1LXXoO core-prim . standard-error-port)
        (g$13303$1LXXoO core-prim . set-port-position!)
        (g$13302$1LXXoO core-prim . put-u8)
        (g$13301$1LXXoO core-prim . put-string)
        (g$8377$1LXXoO core-prim . put-datum)
        (g$13300$1LXXoO core-prim . put-char)
        (g$13299$1LXXoO core-prim . put-bytevector)
        (g$8382$1LXXoO core-prim . port?)
        (g$13298$1LXXoO core-prim . port-transcoder)
        (g$13297$1LXXoO core-prim . port-position)
        (g$13296$1LXXoO core-prim . port-has-set-port-position!?)
        (g$13295$1LXXoO core-prim . port-has-port-position?)
        (g$13294$1LXXoO core-prim . port-eof?)
        (g$13293$1LXXoO core-prim . output-port-buffer-mode)
        (g$8381$1LXXoO core-prim . open-string-output-port)
        (g$13292$1LXXoO core-prim . open-string-input-port)
        (g$13291$1LXXoO core-prim . open-file-output-port)
        (g$13290$1LXXoO core-prim . open-file-input/output-port)
        (g$13289$1LXXoO core-prim . open-file-input-port)
        (g$13288$1LXXoO core-prim . open-bytevector-output-port)
        (g$13287$1LXXoO core-prim . open-bytevector-input-port)
        (g$13286$1LXXoO core-prim . native-transcoder)
        (g$13285$1LXXoO core-prim . native-eol-style)
        (g$13284$1LXXoO core-prim . make-transcoder)
        (g$13283$1LXXoO core-prim . latin-1-codec)
        (g$6434$1LXXoO core-prim . make-i/o-write-error)
        (g$6421$1LXXoO core-prim . make-i/o-read-error)
        (g$6529$1LXXoO core-prim . make-i/o-port-error)
        (g$6447$1LXXoO core-prim . make-i/o-invalid-position-error)
        (g$6462$1LXXoO core-prim . make-i/o-filename-error)
        (g$6477$1LXXoO core-prim . make-i/o-file-protection-error)
        (g$6490$1LXXoO core-prim . make-i/o-file-is-read-only-error)
        (g$6516$1LXXoO core-prim . make-i/o-file-does-not-exist-error)
        (g$6503$1LXXoO core-prim . make-i/o-file-already-exists-error)
        (g$6408$1LXXoO core-prim . make-i/o-error)
        (g$6557$1LXXoO core-prim . make-i/o-encoding-error)
        (g$6544$1LXXoO core-prim . make-i/o-decoding-error)
        (g$13282$1LXXoO core-prim . make-custom-textual-output-port)
        (g$13281$1LXXoO
          core-prim
          .
          make-custom-textual-input/output-port)
        (g$13280$1LXXoO core-prim . make-custom-textual-input-port)
        (g$13279$1LXXoO core-prim . make-custom-binary-output-port)
        (g$13278$1LXXoO
          core-prim
          .
          make-custom-binary-input/output-port)
        (g$13277$1LXXoO core-prim . make-custom-binary-input-port)
        (g$13276$1LXXoO core-prim . make-bytevector)
        (g$13275$1LXXoO core-prim . lookahead-u8)
        (g$13274$1LXXoO core-prim . lookahead-char)
        (g$6435$1LXXoO core-prim . i/o-write-error?)
        (g$6422$1LXXoO core-prim . i/o-read-error?)
        (g$6531$1LXXoO core-prim . i/o-port-error?)
        (g$6449$1LXXoO core-prim . i/o-invalid-position-error?)
        (g$6450$1LXXoO core-prim . i/o-error-position)
        (g$6464$1LXXoO core-prim . i/o-filename-error?)
        (g$6478$1LXXoO core-prim . i/o-file-protection-error?)
        (g$6491$1LXXoO core-prim . i/o-file-is-read-only-error?)
        (g$6517$1LXXoO core-prim . i/o-file-does-not-exist-error?)
        (g$6504$1LXXoO core-prim . i/o-file-already-exists-error?)
        (g$6409$1LXXoO core-prim . i/o-error?)
        (g$6532$1LXXoO core-prim . i/o-error-port)
        (g$6465$1LXXoO core-prim . i/o-error-filename)
        (g$6559$1LXXoO core-prim . i/o-encoding-error?)
        (g$6560$1LXXoO core-prim . i/o-encoding-error-char)
        (g$6545$1LXXoO core-prim . i/o-decoding-error?)
        (g$13273$1LXXoO core-prim . get-u8)
        (g$13272$1LXXoO core-prim . get-string-n!)
        (g$13271$1LXXoO core-prim . get-string-n)
        (g$13270$1LXXoO core-prim . get-string-all)
        (g$13269$1LXXoO core-prim . get-line)
        (g$8378$1LXXoO core-prim . get-datum)
        (g$13268$1LXXoO core-prim . get-char)
        (g$13267$1LXXoO core-prim . get-bytevector-some)
        (g$13266$1LXXoO core-prim . get-bytevector-n!)
        (g$13265$1LXXoO core-prim . get-bytevector-n)
        (g$13264$1LXXoO core-prim . get-bytevector-all)
        (g$13263$1LXXoO core-prim . flush-output-port)
        (g$13262$1LXXoO core-prim . close-port)
        (g$8383$1LXXoO core-prim . call-with-string-output-port)
        (g$8384$1LXXoO core-prim . call-with-port)
        (g$13261$1LXXoO core-prim . call-with-bytevector-output-port)
        (g$13260$1LXXoO core-prim . bytevector->string)
        (g$13259$1LXXoO core-prim . buffer-mode?)
        (g$13258$1LXXoO core-prim . binary-port?)
        (g$9883$1LXXoO core-prim . scheme-report-environment)
        (g$6603$1LXXoO core-prim . quotient)
        (g$9882$1LXXoO core-prim . null-environment)
        (g$6604$1LXXoO core-prim . remainder)
        (g$6605$1LXXoO core-prim . modulo)
        (g$6600$1LXXoO core-prim . inexact->exact)
        (g$6607$1LXXoO core-prim . force)
        (g$6601$1LXXoO core-prim . exact->inexact)
        (g$13257$1LXXoO core-prim . exit)
        (g$12922$1LXXoO core-prim . command-line)
        (g$13256$1LXXoO core-prim . string-fill!)
        (g$13255$1LXXoO core-prim . string-set!)
        (g$13254$1LXXoO core-prim . set-cdr!)
        (g$13253$1LXXoO core-prim . set-car!)
        (g$5172$1LXXoO core-prim . remove)
        (g$5173$1LXXoO core-prim . remv)
        (g$5153$1LXXoO core-prim . remp)
        (g$5174$1LXXoO core-prim . remq)
        (g$5152$1LXXoO core-prim . partition)
        (g$5160$1LXXoO core-prim . memv)
        (g$5159$1LXXoO core-prim . memq)
        (g$5162$1LXXoO core-prim . memp)
        (g$5161$1LXXoO core-prim . member)
        (g$5166$1LXXoO core-prim . exists)
        (g$5165$1LXXoO core-prim . for-all)
        (g$5171$1LXXoO core-prim . fold-right)
        (g$5170$1LXXoO core-prim . fold-left)
        (g$5151$1LXXoO core-prim . find)
        (g$5154$1LXXoO core-prim . filter)
        (g$5169$1LXXoO core-prim . cons*)
        (g$5156$1LXXoO core-prim . assv)
        (g$5155$1LXXoO core-prim . assq)
        (g$5158$1LXXoO core-prim . assp)
        (g$5157$1LXXoO core-prim . assoc)
        (g$13252$1LXXoO core-prim . with-exception-handler)
        (g$13251$1LXXoO core-prim . raise-continuable)
        (g$13250$1LXXoO core-prim . raise)
        (g$9885$1LXXoO core-prim . eval)
        (g$9881$1LXXoO core-prim . environment)
        (g$8469$1LXXoO core-prim . make-enumeration)
        (g$8476$1LXXoO core-prim . enum-set=?)
        (g$8470$1LXXoO core-prim . enum-set-universe)
        (g$8477$1LXXoO core-prim . enum-set-union)
        (g$8475$1LXXoO core-prim . enum-set-subset?)
        (g$8481$1LXXoO core-prim . enum-set-projection)
        (g$8474$1LXXoO core-prim . enum-set-member?)
        (g$8478$1LXXoO core-prim . enum-set-intersection)
        (g$8471$1LXXoO core-prim . enum-set-indexer)
        (g$8479$1LXXoO core-prim . enum-set-difference)
        (g$8472$1LXXoO core-prim . enum-set-constructor)
        (g$8480$1LXXoO core-prim . enum-set-complement)
        (g$8473$1LXXoO core-prim . enum-set->list)
        (g$6326$1LXXoO core-prim . who-condition?)
        (g$6245$1LXXoO core-prim . warning?)
        (g$6284$1LXXoO core-prim . violation?)
        (g$6396$1LXXoO core-prim . undefined-violation?)
        (g$6381$1LXXoO core-prim . syntax-violation?)
        (g$6383$1LXXoO core-prim . syntax-violation-subform)
        (g$6382$1LXXoO core-prim . syntax-violation-form)
        (g$9903$1LXXoO core-prim . syntax-violation)
        (g$13249$1LXXoO core-prim . simple-conditions)
        (g$6258$1LXXoO core-prim . serious-condition?)
        (g$6340$1LXXoO core-prim . non-continuable-violation?)
        (g$6231$1LXXoO core-prim . message-condition?)
        (g$6324$1LXXoO core-prim . make-who-condition)
        (g$6244$1LXXoO core-prim . make-warning)
        (g$6283$1LXXoO core-prim . make-violation)
        (g$6395$1LXXoO core-prim . make-undefined-violation)
        (g$6378$1LXXoO core-prim . make-syntax-violation)
        (g$6257$1LXXoO core-prim . make-serious-condition)
        (g$6339$1LXXoO core-prim . make-non-continuable-violation)
        (g$6229$1LXXoO core-prim . make-message-condition)
        (g$6365$1LXXoO core-prim . make-lexical-violation)
        (g$6309$1LXXoO core-prim . make-irritants-condition)
        (g$6352$1LXXoO
          core-prim
          .
          make-implementation-restriction-violation)
        (g$6270$1LXXoO core-prim . make-error)
        (g$6296$1LXXoO core-prim . make-assertion-violation)
        (g$6366$1LXXoO core-prim . lexical-violation?)
        (g$6311$1LXXoO core-prim . irritants-condition?)
        (g$6353$1LXXoO
          core-prim
          .
          implementation-restriction-violation?)
        (g$6271$1LXXoO core-prim . error?)
        (g$6327$1LXXoO core-prim . condition-who)
        (g$13248$1LXXoO core-prim . condition-predicate)
        (g$6232$1LXXoO core-prim . condition-message)
        (g$6312$1LXXoO core-prim . condition-irritants)
        (g$13247$1LXXoO core-prim . condition-accessor)
        (g$13246$1LXXoO core-prim . condition)
        (g$6297$1LXXoO core-prim . assertion-violation?)
        (g$13245$1LXXoO core-prim . condition?)
        (g$13244$1LXXoO core-prim . utf32->string)
        (g$13243$1LXXoO core-prim . utf16->string)
        (g$13242$1LXXoO core-prim . utf8->string)
        (g$13241$1LXXoO core-prim . uint-list->bytevector)
        (g$13240$1LXXoO core-prim . u8-list->bytevector)
        (g$13239$1LXXoO core-prim . string->utf8)
        (g$13238$1LXXoO core-prim . string->utf32)
        (g$13237$1LXXoO core-prim . string->utf16)
        (g$13236$1LXXoO core-prim . sint-list->bytevector)
        (g$5816$1LXXoO core-prim . native-endianness)
        (g$5506$1LXXoO core-prim . bytevector?)
        (g$13235$1LXXoO core-prim . bytevector=?)
        (g$13234$1LXXoO core-prim . bytevector-uint-set!)
        (g$13233$1LXXoO core-prim . bytevector-uint-ref)
        (g$13232$1LXXoO core-prim . bytevector-u8-set!)
        (g$13231$1LXXoO core-prim . bytevector-u8-ref)
        (g$5837$1LXXoO core-prim . bytevector-u64-set!)
        (g$5833$1LXXoO core-prim . bytevector-u64-ref)
        (g$5839$1LXXoO core-prim . bytevector-u64-native-set!)
        (g$5835$1LXXoO core-prim . bytevector-u64-native-ref)
        (g$5829$1LXXoO core-prim . bytevector-u32-set!)
        (g$5825$1LXXoO core-prim . bytevector-u32-ref)
        (g$5831$1LXXoO core-prim . bytevector-u32-native-set!)
        (g$5827$1LXXoO core-prim . bytevector-u32-native-ref)
        (g$5821$1LXXoO core-prim . bytevector-u16-set!)
        (g$5817$1LXXoO core-prim . bytevector-u16-ref)
        (g$5823$1LXXoO core-prim . bytevector-u16-native-set!)
        (g$5819$1LXXoO core-prim . bytevector-u16-native-ref)
        (g$13230$1LXXoO core-prim . bytevector-sint-set!)
        (g$13229$1LXXoO core-prim . bytevector-sint-ref)
        (g$13228$1LXXoO core-prim . bytevector-s8-set!)
        (g$13227$1LXXoO core-prim . bytevector-s8-ref)
        (g$5838$1LXXoO core-prim . bytevector-s64-set!)
        (g$5834$1LXXoO core-prim . bytevector-s64-ref)
        (g$5840$1LXXoO core-prim . bytevector-s64-native-set!)
        (g$5836$1LXXoO core-prim . bytevector-s64-native-ref)
        (g$5830$1LXXoO core-prim . bytevector-s32-set!)
        (g$5826$1LXXoO core-prim . bytevector-s32-ref)
        (g$5832$1LXXoO core-prim . bytevector-s32-native-set!)
        (g$5828$1LXXoO core-prim . bytevector-s32-native-ref)
        (g$5822$1LXXoO core-prim . bytevector-s16-set!)
        (g$5818$1LXXoO core-prim . bytevector-s16-ref)
        (g$5824$1LXXoO core-prim . bytevector-s16-native-set!)
        (g$5820$1LXXoO core-prim . bytevector-s16-native-ref)
        (g$13226$1LXXoO core-prim . bytevector-length)
        (g$13225$1LXXoO core-prim . bytevector-ieee-single-set!)
        (g$13224$1LXXoO core-prim . bytevector-ieee-single-ref)
        (g$5843$1LXXoO core-prim . bytevector-ieee-single-native-set!)
        (g$5841$1LXXoO core-prim . bytevector-ieee-single-native-ref)
        (g$13223$1LXXoO core-prim . bytevector-ieee-double-set!)
        (g$13222$1LXXoO core-prim . bytevector-ieee-double-ref)
        (g$5844$1LXXoO core-prim . bytevector-ieee-double-native-set!)
        (g$5842$1LXXoO core-prim . bytevector-ieee-double-native-ref)
        (g$13221$1LXXoO core-prim . bytevector-fill!)
        (g$13220$1LXXoO core-prim . bytevector-copy!)
        (g$13219$1LXXoO core-prim . bytevector-copy)
        (g$13218$1LXXoO core-prim . bytevector->uint-list)
        (g$13217$1LXXoO core-prim . bytevector->u8-list)
        (g$13216$1LXXoO core-prim . bytevector->sint-list)
        (g$6586$1LXXoO core-prim . no-nans-violation?)
        (g$6573$1LXXoO core-prim . no-infinities-violation?)
        (g$6585$1LXXoO core-prim . make-no-nans-violation)
        (g$6572$1LXXoO core-prim . make-no-infinities-violation)
        (g$13215$1LXXoO core-prim . real->flonum)
        (g$7823$1LXXoO core-prim . flzero?)
        (g$7818$1LXXoO core-prim . fltruncate)
        (g$7804$1LXXoO core-prim . fltan)
        (g$7809$1LXXoO core-prim . flsqrt)
        (g$7802$1LXXoO core-prim . flsin)
        (g$7819$1LXXoO core-prim . flround)
        (g$7821$1LXXoO core-prim . flpositive?)
        (g$5511$1LXXoO core-prim . flonum?)
        (g$7825$1LXXoO core-prim . flodd?)
        (g$13214$1LXXoO core-prim . flnumerator)
        (g$7822$1LXXoO core-prim . flnegative?)
        (g$7801$1LXXoO core-prim . flnan?)
        (g$7786$1LXXoO core-prim . flmod0)
        (g$7785$1LXXoO core-prim . flmod)
        (g$7827$1LXXoO core-prim . flmin)
        (g$7826$1LXXoO core-prim . flmax)
        (g$7808$1LXXoO core-prim . fllog)
        (g$7794$1LXXoO core-prim . flinteger?)
        (g$7800$1LXXoO core-prim . flinfinite?)
        (g$7817$1LXXoO core-prim . flfloor)
        (g$7795$1LXXoO core-prim . flfinite?)
        (g$7811$1LXXoO core-prim . flexpt)
        (g$7810$1LXXoO core-prim . flexp)
        (g$7824$1LXXoO core-prim . fleven?)
        (g$7793$1LXXoO core-prim . fldiv0-and-mod0)
        (g$7780$1LXXoO core-prim . fldiv0)
        (g$7787$1LXXoO core-prim . fldiv-and-mod)
        (g$7792$1LXXoO core-prim . fldiv)
        (g$13213$1LXXoO core-prim . fldenominator)
        (g$7803$1LXXoO core-prim . flcos)
        (g$7812$1LXXoO core-prim . flceiling)
        (g$7807$1LXXoO core-prim . flatan)
        (g$7805$1LXXoO core-prim . flasin)
        (g$7806$1LXXoO core-prim . flacos)
        (g$7820$1LXXoO core-prim . flabs)
        (g$7774$1LXXoO core-prim . fl>?)
        (g$7775$1LXXoO core-prim . fl>=?)
        (g$7771$1LXXoO core-prim . fl=?)
        (g$7772$1LXXoO core-prim . fl<?)
        (g$7773$1LXXoO core-prim . fl<=?)
        (g$7770$1LXXoO core-prim . fl/)
        (g$7769$1LXXoO core-prim . fl-)
        (g$7767$1LXXoO core-prim . fl+)
        (g$7768$1LXXoO core-prim . fl*)
        (g$13212$1LXXoO core-prim . fixnum->flonum)
        (g$6867$1LXXoO core-prim . fxzero?)
        (g$6830$1LXXoO core-prim . fxxor)
        (g$6905$1LXXoO core-prim . fxrotate-bit-field)
        (g$6906$1LXXoO core-prim . fxreverse-bit-field)
        (g$6857$1LXXoO core-prim . fxpositive?)
        (g$6877$1LXXoO core-prim . fxodd?)
        (g$6811$1LXXoO core-prim . fxnot)
        (g$6862$1LXXoO core-prim . fxnegative?)
        (g$6841$1LXXoO core-prim . fxmod0)
        (g$6840$1LXXoO core-prim . fxmod)
        (g$6879$1LXXoO core-prim . fxmin)
        (g$6878$1LXXoO core-prim . fxmax)
        (g$6808$1LXXoO core-prim . fxlength)
        (g$6829$1LXXoO core-prim . fxior)
        (g$6887$1LXXoO core-prim . fxif)
        (g$6809$1LXXoO core-prim . fxfirst-bit-set)
        (g$6872$1LXXoO core-prim . fxeven?)
        (g$6852$1LXXoO core-prim . fxdiv0-and-mod0)
        (g$6847$1LXXoO core-prim . fxdiv0)
        (g$6842$1LXXoO core-prim . fxdiv-and-mod)
        (g$6835$1LXXoO core-prim . fxdiv)
        (g$6902$1LXXoO core-prim . fxcopy-bit-field)
        (g$6892$1LXXoO core-prim . fxcopy-bit)
        (g$6810$1LXXoO core-prim . fxbit-set?)
        (g$6897$1LXXoO core-prim . fxbit-field)
        (g$6803$1LXXoO core-prim . fxbit-count)
        (g$6904$1LXXoO core-prim . fxarithmetic-shift-right)
        (g$6903$1LXXoO core-prim . fxarithmetic-shift-left)
        (g$6798$1LXXoO core-prim . fxarithmetic-shift)
        (g$6828$1LXXoO core-prim . fxand)
        (g$6820$1LXXoO core-prim . fx>?)
        (g$6821$1LXXoO core-prim . fx>=?)
        (g$6817$1LXXoO core-prim . fx=?)
        (g$6818$1LXXoO core-prim . fx<?)
        (g$6819$1LXXoO core-prim . fx<=?)
        (g$6881$1LXXoO core-prim . fx-/carry)
        (g$6792$1LXXoO core-prim . fx-)
        (g$6882$1LXXoO core-prim . fx+/carry)
        (g$6790$1LXXoO core-prim . fx+)
        (g$6880$1LXXoO core-prim . fx*/carry)
        (g$6791$1LXXoO core-prim . fx*)
        (g$6761$1LXXoO core-prim . greatest-fixnum)
        (g$6762$1LXXoO core-prim . least-fixnum)
        (g$5512$1LXXoO core-prim . fixnum-width)
        (g$5510$1LXXoO core-prim . fixnum?)
        (g$6735$1LXXoO core-prim . bitwise-rotate-bit-field)
        (g$13211$1LXXoO core-prim . bitwise-reverse-bit-field)
        (g$13210$1LXXoO core-prim . bitwise-length)
        (g$6729$1LXXoO core-prim . bitwise-if)
        (g$13209$1LXXoO core-prim . bitwise-first-bit-set)
        (g$6732$1LXXoO core-prim . bitwise-copy-bit-field)
        (g$6730$1LXXoO core-prim . bitwise-copy-bit)
        (g$13208$1LXXoO core-prim . bitwise-bit-set?)
        (g$6731$1LXXoO core-prim . bitwise-bit-field)
        (g$13207$1LXXoO core-prim . bitwise-bit-count)
        (g$13206$1LXXoO core-prim . bitwise-xor)
        (g$13205$1LXXoO core-prim . bitwise-ior)
        (g$13204$1LXXoO core-prim . bitwise-and)
        (g$13203$1LXXoO core-prim . bitwise-not)
        (g$6734$1LXXoO core-prim . bitwise-arithmetic-shift-right)
        (g$6733$1LXXoO core-prim . bitwise-arithmetic-shift-left)
        (g$13202$1LXXoO core-prim . bitwise-arithmetic-shift)
        (g$5950$1LXXoO core-prim . zero?)
        (g$5505$1LXXoO core-prim . vector?)
        (g$5521$1LXXoO core-prim . vector-set!)
        (g$5520$1LXXoO core-prim . vector-ref)
        (g$5584$1LXXoO core-prim . vector-map)
        (g$13201$1LXXoO core-prim . vector-length)
        (g$5585$1LXXoO core-prim . vector-for-each)
        (g$5522$1LXXoO core-prim . vector-fill!)
        (g$13200$1LXXoO core-prim . vector->list)
        (g$13199$1LXXoO core-prim . vector)
        (g$13198$1LXXoO core-prim . values)
        (g$6002$1LXXoO core-prim . truncate)
        (g$5988$1LXXoO core-prim . tan)
        (g$5507$1LXXoO core-prim . symbol?)
        (g$5569$1LXXoO core-prim . symbol=?)
        (g$13197$1LXXoO core-prim . symbol->string)
        (g$13196$1LXXoO core-prim . substring)
        (g$13195$1LXXoO core-prim . string?)
        (g$5566$1LXXoO core-prim . string>?)
        (g$5568$1LXXoO core-prim . string>=?)
        (g$5564$1LXXoO core-prim . string=?)
        (g$5565$1LXXoO core-prim . string<?)
        (g$5567$1LXXoO core-prim . string<=?)
        (g$13194$1LXXoO core-prim . string-ref)
        (g$13193$1LXXoO core-prim . string-length)
        (g$5586$1LXXoO core-prim . string-for-each)
        (g$13192$1LXXoO core-prim . string-copy)
        (g$13191$1LXXoO core-prim . string-append)
        (g$13190$1LXXoO core-prim . string->symbol)
        (g$13189$1LXXoO core-prim . string->number)
        (g$13188$1LXXoO core-prim . string->list)
        (g$13187$1LXXoO core-prim . string)
        (g$13186$1LXXoO core-prim . sqrt)
        (g$5982$1LXXoO core-prim . sin)
        (g$6003$1LXXoO core-prim . round)
        (g$5524$1LXXoO core-prim . reverse)
        (g$5944$1LXXoO core-prim . real?)
        (g$5947$1LXXoO core-prim . real-valued?)
        (g$5975$1LXXoO core-prim . real-part)
        (g$5581$1LXXoO core-prim . rationalize)
        (g$5945$1LXXoO core-prim . rational?)
        (g$5948$1LXXoO core-prim . rational-valued?)
        (g$5509$1LXXoO core-prim . procedure?)
        (g$5951$1LXXoO core-prim . positive?)
        (g$13185$1LXXoO core-prim . pair?)
        (g$5554$1LXXoO core-prim . odd?)
        (g$5973$1LXXoO core-prim . numerator)
        (g$5937$1LXXoO core-prim . number?)
        (g$13184$1LXXoO core-prim . number->string)
        (g$13183$1LXXoO core-prim . null?)
        (g$13182$1LXXoO core-prim . not)
        (g$5952$1LXXoO core-prim . negative?)
        (g$5938$1LXXoO core-prim . nan?)
        (g$5556$1LXXoO core-prim . min)
        (g$5555$1LXXoO core-prim . max)
        (g$5167$1LXXoO core-prim . map)
        (g$13181$1LXXoO core-prim . make-vector)
        (g$13180$1LXXoO core-prim . make-string)
        (g$5968$1LXXoO core-prim . make-rectangular)
        (g$5969$1LXXoO core-prim . make-polar)
        (g$5971$1LXXoO core-prim . magnitude)
        (g$5991$1LXXoO core-prim . log)
        (g$13179$1LXXoO core-prim . list?)
        (g$5147$1LXXoO core-prim . list-tail)
        (g$5148$1LXXoO core-prim . list-ref)
        (g$5518$1LXXoO core-prim . list->vector)
        (g$5519$1LXXoO core-prim . list->string)
        (g$13178$1LXXoO core-prim . list)
        (g$13177$1LXXoO core-prim . length)
        (g$5558$1LXXoO core-prim . lcm)
        (g$5946$1LXXoO core-prim . integer?)
        (g$5949$1LXXoO core-prim . integer-valued?)
        (g$13176$1LXXoO core-prim . integer->char)
        (g$5940$1LXXoO core-prim . infinite?)
        (g$5942$1LXXoO core-prim . inexact?)
        (g$13175$1LXXoO core-prim . inexact)
        (g$5976$1LXXoO core-prim . imag-part)
        (g$5557$1LXXoO core-prim . gcd)
        (g$5168$1LXXoO core-prim . for-each)
        (g$6000$1LXXoO core-prim . floor)
        (g$5939$1LXXoO core-prim . finite?)
        (g$13174$1LXXoO core-prim . expt)
        (g$5981$1LXXoO core-prim . exp)
        (g$5941$1LXXoO core-prim . exact?)
        (g$13173$1LXXoO core-prim . exact-integer-sqrt)
        (g$13172$1LXXoO core-prim . exact)
        (g$5553$1LXXoO core-prim . even?)
        (g$13171$1LXXoO core-prim . error)
        (g$13170$1LXXoO core-prim . eqv?)
        (g$13169$1LXXoO core-prim . equal?)
        (g$13168$1LXXoO core-prim . eq?)
        (g$13167$1LXXoO core-prim . dynamic-wind)
        (g$5517$1LXXoO core-prim . div0-and-mod0)
        (g$5515$1LXXoO core-prim . mod0)
        (g$5513$1LXXoO core-prim . div0)
        (g$5516$1LXXoO core-prim . div-and-mod)
        (g$5514$1LXXoO core-prim . mod)
        (g$5992$1LXXoO core-prim . div)
        (g$5974$1LXXoO core-prim . denominator)
        (g$5985$1LXXoO core-prim . cos)
        (g$13166$1LXXoO core-prim . cons)
        (g$5943$1LXXoO core-prim . complex?)
        (g$5504$1LXXoO core-prim . char?)
        (g$5578$1LXXoO core-prim . char>?)
        (g$5580$1LXXoO core-prim . char>=?)
        (g$5576$1LXXoO core-prim . char=?)
        (g$5577$1LXXoO core-prim . char<?)
        (g$5579$1LXXoO core-prim . char<=?)
        (g$13165$1LXXoO core-prim . char->integer)
        (g$6001$1LXXoO core-prim . ceiling)
        (g$13164$1LXXoO core-prim . call-with-values)
        (g$13163$1LXXoO core-prim . call/cc)
        (g$13162$1LXXoO core-prim . call-with-current-continuation)
        (g$5552$1LXXoO core-prim . cddddr)
        (g$5551$1LXXoO core-prim . cdddar)
        (g$5550$1LXXoO core-prim . cddadr)
        (g$5549$1LXXoO core-prim . cddaar)
        (g$5548$1LXXoO core-prim . cdaddr)
        (g$5547$1LXXoO core-prim . cdadar)
        (g$5546$1LXXoO core-prim . cdaadr)
        (g$5545$1LXXoO core-prim . cdaaar)
        (g$5544$1LXXoO core-prim . cadddr)
        (g$5543$1LXXoO core-prim . caddar)
        (g$5542$1LXXoO core-prim . cadadr)
        (g$5541$1LXXoO core-prim . cadaar)
        (g$5540$1LXXoO core-prim . caaddr)
        (g$5539$1LXXoO core-prim . caadar)
        (g$5538$1LXXoO core-prim . caaadr)
        (g$5537$1LXXoO core-prim . caaaar)
        (g$5536$1LXXoO core-prim . cdddr)
        (g$5535$1LXXoO core-prim . cddar)
        (g$5534$1LXXoO core-prim . cdadr)
        (g$5533$1LXXoO core-prim . cdaar)
        (g$5532$1LXXoO core-prim . caddr)
        (g$5531$1LXXoO core-prim . cadar)
        (g$5530$1LXXoO core-prim . caadr)
        (g$5529$1LXXoO core-prim . caaar)
        (g$5528$1LXXoO core-prim . cddr)
        (g$5527$1LXXoO core-prim . cdar)
        (g$5526$1LXXoO core-prim . cadr)
        (g$5525$1LXXoO core-prim . caar)
        (g$13161$1LXXoO core-prim . cdr)
        (g$13160$1LXXoO core-prim . car)
        (g$5508$1LXXoO core-prim . boolean?)
        (g$5570$1LXXoO core-prim . boolean=?)
        (g$5990$1LXXoO core-prim . atan)
        (g$13159$1LXXoO core-prim . assertion-violation)
        (g$5983$1LXXoO core-prim . asin)
        (g$13158$1LXXoO core-prim . apply)
        (g$13157$1LXXoO core-prim . append)
        (g$5970$1LXXoO core-prim . angle)
        (g$5986$1LXXoO core-prim . acos)
        (g$5993$1LXXoO core-prim . abs)
        (g$13156$1LXXoO core-prim . /)
        (g$13155$1LXXoO core-prim . *)
        (g$13154$1LXXoO core-prim . -)
        (g$13153$1LXXoO core-prim . +)
        (g$5967$1LXXoO core-prim . >=)
        (g$5966$1LXXoO core-prim . >)
        (g$5963$1LXXoO core-prim . =)
        (g$5965$1LXXoO core-prim . <=)
        (g$5964$1LXXoO core-prim . <)
        (g$13152$1LXXoO core-prim . $fl>=?)
        (g$13151$1LXXoO core-prim . $fl>?)
        (g$13150$1LXXoO core-prim . $fl<=?)
        (g$13149$1LXXoO core-prim . $fl<?)
        (g$13148$1LXXoO core-prim . $fl-)
        (g$13147$1LXXoO core-prim . $fl/)
        (g$13146$1LXXoO core-prim . $fl*)
        (g$13145$1LXXoO core-prim . $fl+)
        (g$13144$1LXXoO core-prim . $fl=?)
        (g$13143$1LXXoO core-prim . $try)
        (g$13142$1LXXoO core-prim . $fxarithmetic-shift-right)
        (g$13141$1LXXoO core-prim . $fxarithmetic-shift-left)
        (g$13140$1LXXoO core-prim . $$fx-)
        (g$13139$1LXXoO core-prim . $$fx*)
        (g$13138$1LXXoO core-prim . $$fx+)
        (g$13137$1LXXoO core-prim . $fxnot)
        (g$13136$1LXXoO core-prim . $fxxor)
        (g$13135$1LXXoO core-prim . $fxior)
        (g$13134$1LXXoO core-prim . $fxand)
        (g$13133$1LXXoO core-prim . $fx>=?)
        (g$13132$1LXXoO core-prim . $fx>?)
        (g$13131$1LXXoO core-prim . $fx<=?)
        (g$13130$1LXXoO core-prim . $fx<?)
        (g$13129$1LXXoO core-prim . $fx-)
        (g$13128$1LXXoO core-prim . $fxmod0)
        (g$13127$1LXXoO core-prim . $fxdiv0)
        (g$13126$1LXXoO core-prim . $fx*)
        (g$13125$1LXXoO core-prim . $fx+)
        (g$13124$1LXXoO core-prim . $fx=?)
        (g$13123$1LXXoO core-prim . $vector-set!)
        (g$13122$1LXXoO core-prim . $vector-ref)
        (g$13121$1LXXoO core-prim . $cdr)
        (g$13120$1LXXoO core-prim . $car)
        (g$13119$1LXXoO core-prim . make-record-printer)
        (g$13118$1LXXoO core-prim . eqv-hash)
        (g$13117$1LXXoO core-prim . reverse!)
        (g$13116$1LXXoO core-prim . deserialize-port)
        (g$13115$1LXXoO core-prim . serialize-port)
        (g$8446$1LXXoO core-prim . enum-set?)
        (g$6606$1LXXoO core-prim . make-promise)
        (g$12925$1LXXoO core-prim . load/unload)
        (g$12924$1LXXoO core-prim . load/args)
        (g$8555$1LXXoO core-prim . printf)
        (g$8556$1LXXoO core-prim . fprintf)
        (g$8557$1LXXoO core-prim . format)
        (g$13114$1LXXoO core-prim . procedure-form)
        (g$13113$1LXXoO core-prim . procedure-environment)
        (g$13112$1LXXoO core-prim . procedure-name)
        (g$13111$1LXXoO core-prim . procedure-arity)
        (g$13110$1LXXoO core-prim . gc-collect)
        (g$13109$1LXXoO core-prim . typeof)
        (g$13108$1LXXoO core-prim . clr-type?)
        (g$13107$1LXXoO core-prim . get-clr-type)
        (g$13106$1LXXoO core-prim . get-command-line)
        (g$13105$1LXXoO core-prim . vector-append)
        (g$13104$1LXXoO core-prim . vector-filter)
        (g$13103$1LXXoO core-prim . vector-reverse!)
        (g$13102$1LXXoO core-prim . vector-contains?)
        (g$13101$1LXXoO core-prim . vector-index-of)
        (g$13100$1LXXoO core-prim . vector-copy)
        (g$13099$1LXXoO core-prim . vector-binary-search)
        (g$13098$1LXXoO core-prim . string-ci-compare)
        (g$13097$1LXXoO core-prim . string-compare)
        (g$13096$1LXXoO core-prim . string-format)
        (g$12921$1LXXoO core-prim . trace-printer)
        (g$13095$1LXXoO core-prim . make-traced-procedure)
        (g$8577$1LXXoO core-prim . make-traced-macro)
        (g$9899$1LXXoO core-prim . assertion-error)
        (g$13094$1LXXoO core-prim . time-it)
        (g$8584$1LXXoO core-prim . make-parameter)
        (g$13093$1LXXoO core-prim . library-locator)
        (g$13092$1LXXoO core-prim . get-library-paths)
        (g$13091$1LXXoO core-prim . open-tcp-input/output-port)
        (g$13090$1LXXoO core-prim . hashtable-for-each)
        (g$13089$1LXXoO core-prim . hashtable-map)
        (g$9877$1LXXoO core-prim . environment-bindings)
        (g$9880$1LXXoO core-prim . environment-symbols)
        (g$9876$1LXXoO core-prim . interaction-environment-symbols)
        (g$13088$1LXXoO core-prim . optimization-level)
        (g$9206$1LXXoO core-prim . library-path)
        (g$9585$1LXXoO core-prim . make-compile-time-value)
        (g$9886$1LXXoO core-prim . expand->core)
        (g$9884$1LXXoO core-prim . expand)
        (g$9823$1LXXoO core-prim . syntax-transpose)
        (g$8903$1LXXoO core-prim . convert->cps)
        (g$13087$1LXXoO core-prim . inexact=?)
        (g$13086$1LXXoO core-prim . inexact-compare)
        (g$13085$1LXXoO core-prim . exact-compare)
        (g$9227$1LXXoO core-prim . installed-libraries)
        (g$9218$1LXXoO core-prim . uninstall-library)
        (g$8667$1LXXoO core-prim . pretty-gensyms)
        (g$8664$1LXXoO core-prim . pretty-width)
        (g$8669$1LXXoO core-prim . pretty-print)
        (g$13084$1LXXoO core-prim . pointer+)
        (g$13083$1LXXoO $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$13082$1LXXoO $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$13081$1LXXoO $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$13080$1LXXoO $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$13079$1LXXoO $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$13078$1LXXoO
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$13077$1LXXoO
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$13076$1LXXoO
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$13075$1LXXoO
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$13074$1LXXoO $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$13073$1LXXoO
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$13072$1LXXoO $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$13071$1LXXoO $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$13070$1LXXoO $core-rtd &i/o-rtd &i/o-rcd)
        (g$13069$1LXXoO
          $core-rtd
          &non-continuable-rtd
          &non-continuable-rcd)
        (g$13068$1LXXoO $core-rtd &undefined-rtd &undefined-rcd)
        (g$13067$1LXXoO $core-rtd &syntax-rtd &syntax-rcd)
        (g$13066$1LXXoO $core-rtd &lexical-rtd &lexical-rcd)
        (g$13065$1LXXoO
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$13064$1LXXoO $core-rtd &who-rtd &who-rcd)
        (g$13063$1LXXoO $core-rtd &irritants-rtd &irritants-rcd)
        (g$13062$1LXXoO $core-rtd &assertion-rtd &assertion-rcd)
        (g$13061$1LXXoO $core-rtd &violation-rtd &violation-rcd)
        (g$13060$1LXXoO $core-rtd &error-rtd &error-rcd)
        (g$13059$1LXXoO $core-rtd &serious-rtd &serious-rcd)
        (g$13058$1LXXoO $core-rtd &warning-rtd &warning-rcd)
        (g$13057$1LXXoO $core-rtd &message-rtd &message-rcd)
        (g$13056$1LXXoO $core-rtd &condition-rtd &condition-rcd)
        (g$13055$1LXXoO macro . define-condition-type)
        (g$13054$1LXXoO macro . define-enumeration)
        (g$13053$1LXXoO macro . define-record-type)
        (g$13052$1LXXoO macro . parent-rtd)
        (g$13051$1LXXoO macro . nongenerative)
        (g$13050$1LXXoO macro . opaque)
        (g$13049$1LXXoO macro . sealed)
        (g$13048$1LXXoO macro . protocol)
        (g$13047$1LXXoO macro . parent)
        (g$13046$1LXXoO macro . immutable)
        (g$13045$1LXXoO macro . mutable)
        (g$13044$1LXXoO macro . fields)
        (g$13043$1LXXoO macro . error-handling-mode)
        (g$13042$1LXXoO macro . file-options)
        (g$13041$1LXXoO macro . buffer-mode)
        (g$13040$1LXXoO macro . eol-style)
        (g$13039$1LXXoO macro . guard)
        (g$13038$1LXXoO macro . trace-letrec-syntax)
        (g$13037$1LXXoO macro . trace-let-syntax)
        (g$13036$1LXXoO macro . trace-define-syntax)
        (g$13035$1LXXoO macro . trace-define)
        (g$13034$1LXXoO macro . trace-lambda)
        (g$13033$1LXXoO macro . unsyntax-splicing)
        (g$13032$1LXXoO macro . unsyntax)
        (g$13031$1LXXoO macro . unquote-splicing)
        (g$13030$1LXXoO macro . unquote)
        (g$13029$1LXXoO macro . _)
        (g$13028$1LXXoO macro . else)
        (g$13027$1LXXoO macro . =>)
        (g$13026$1LXXoO macro . ...)
        (g$13025$1LXXoO macro . assert)
        (g$13024$1LXXoO macro . endianness)
        (g$13023$1LXXoO macro . delay)
        (g$13022$1LXXoO macro . time)
        (g$13021$1LXXoO macro . or)
        (g$13020$1LXXoO macro . and)
        (g$13019$1LXXoO macro . do)
        (g$13018$1LXXoO macro . cond)
        (g$13017$1LXXoO macro . let*)
        (g$13016$1LXXoO macro . let)
        (g$13015$1LXXoO macro . identifier-syntax)
        (g$13014$1LXXoO macro . with-syntax)
        (g$13013$1LXXoO macro . quasisyntax)
        (g$13012$1LXXoO macro . quasiquote)
        (g$13011$1LXXoO macro . syntax-rules)
        (g$13010$1LXXoO macro . include-into)
        (g$13009$1LXXoO macro . include)
        (g$13008$1LXXoO macro . define-struct)
        (g$13007$1LXXoO macro . let-values)
        (g$13006$1LXXoO macro . let*-values)
        (g$13005$1LXXoO core-macro . record-constructor-descriptor)
        (g$13004$1LXXoO core-macro . record-type-descriptor)
        (g$13003$1LXXoO core-macro . fluid-let-syntax)
        (g$13002$1LXXoO macro . case)
        (g$13001$1LXXoO macro . parameterize)
        (g$13000$1LXXoO macro . unless)
        (g$12999$1LXXoO macro . when)
        (g$12998$1LXXoO core-macro . if)
        (g$12997$1LXXoO core-macro . letrec*)
        (g$12996$1LXXoO core-macro . letrec)
        (g$12995$1LXXoO core-macro . type-descriptor)
        (g$12994$1LXXoO core-macro . case-lambda)
        (g$12993$1LXXoO core-macro . lambda)
        (g$12992$1LXXoO core-macro . syntax)
        (g$12991$1LXXoO core-macro . syntax-case)
        (g$12990$1LXXoO core-macro . quote)
        (g$12989$1LXXoO core-macro . foreign-call)
        (g$12988$1LXXoO letrec-syntax)
        (g$12987$1LXXoO let-syntax)
        (g$12986$1LXXoO set!)
        (g$12985$1LXXoO export)
        (g$12984$1LXXoO import)
        (g$12983$1LXXoO library)
        (g$12982$1LXXoO begin)
        (g$12981$1LXXoO module)
        (g$12980$1LXXoO define-syntax)
        (g$12979$1LXXoO define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$26797$1LXXoO
      'g$13449$1LXXoO
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$13387$1LXXoO)
        (eval-core . g$13386$1LXXoO)
        (set-symbol-value! . g$13384$1LXXoO)
        (symbol-value . g$13383$1LXXoO)
        (gensym . g$13380$1LXXoO)
        (void . g$13379$1LXXoO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$31309$1LXXoO
     g$trace-printer$31374$1LXXoO
     (g$make-parameter$25954$1LXXoO g$pretty-print$26164$1LXXoO))
   (g$command-line$31310$1LXXoO
     g$command-line$31375$1LXXoO
     (g$make-parameter$25954$1LXXoO (get-command-line)))
   (g$local-library-path$31311$1LXXoO
     g$local-library-path$31376$1LXXoO
     (case-lambda
       ((g$filename$31325$1LXXoO)
        (cons
          (g$get-directory-name$20184$1LXXoO g$filename$31325$1LXXoO)
          (g$library-path$26781$1LXXoO)))))
   (g$load/args$31312$1LXXoO
     g$load/args$31377$1LXXoO
     (case-lambda
       ((g$filename$31326$1LXXoO . g$args$31327$1LXXoO)
        (begin
          (apply
            g$load-r6rs-top-level$31322$1LXXoO
            g$filename$31326$1LXXoO
            'load
            g$args$31327$1LXXoO)
          (void)))))
   (g$load/unload$31313$1LXXoO
     g$load/unload$31378$1LXXoO
     (case-lambda
       ((g$filename$31328$1LXXoO)
        ((case-lambda
           ((g$libs$31329$1LXXoO)
            (begin
              (g$load$31314$1LXXoO g$filename$31328$1LXXoO)
              (g$for-each$19226$1LXXoO
                (case-lambda
                  ((g$lib$31330$1LXXoO)
                   (if (not (g$memq$19217$1LXXoO
                              g$lib$31330$1LXXoO
                              g$libs$31329$1LXXoO))
                     (g$uninstall-library$26793$1LXXoO
                       g$lib$31330$1LXXoO)
                     (void))))
                (g$installed-libraries$26802$1LXXoO)))))
         (g$installed-libraries$26802$1LXXoO)))))
   (g$load$31314$1LXXoO
     g$load$31379$1LXXoO
     (case-lambda
       ((g$filename$31331$1LXXoO)
        (begin
          (apply
            g$load-r6rs-top-level$31322$1LXXoO
            g$filename$31331$1LXXoO
            'load
            (cdr (g$command-line$31310$1LXXoO)))
          (void)))))
   (g$ironscheme-build$31315$1LXXoO
     g$ironscheme-build$31380$1LXXoO
     (case-lambda
       (() (g$ironscheme-build$31315$1LXXoO '#f))
       ((g$cps?$31332$1LXXoO)
        (begin
          (g$call-with-output-file$25570$1LXXoO
            '"build-options.ss"
            (case-lambda
              ((g$p$31333$1LXXoO)
               (begin
                 (write
                   (list 'define-option 'cps-mode g$cps?$31332$1LXXoO)
                   g$p$31333$1LXXoO)
                 (write
                   (list
                     'define-option
                     'if-wants-letrec*
                     (not g$cps?$31332$1LXXoO))
                   g$p$31333$1LXXoO)
                 (g$newline$25571$1LXXoO g$p$31333$1LXXoO)))))
          (g$load$31314$1LXXoO '"ironscheme-buildscript.ss")))))
   (g$foreground-color$31316$1LXXoO
     g$foreground-color$31381$1LXXoO
     (case-lambda
       (() (clr-call-internal 'console 'get_foregroundcolor '()))
       ((g$color$31334$1LXXoO)
        (clr-call-internal
          'console
          'set_foregroundcolor
          '()
          g$color$31334$1LXXoO))))
   (g$system-exception?$31317$1LXXoO
     g$system-exception?$31382$1LXXoO
     (case-lambda
       ((g$e$31335$1LXXoO)
        (clr-is-internal 'SystemException g$e$31335$1LXXoO))))
   (g$eval-top-level$31318$1LXXoO
     g$eval-top-level$31383$1LXXoO
     (case-lambda
       ((g$x$31336$1LXXoO)
        (call/cc
          (case-lambda
            ((g$k$31337$1LXXoO)
             (with-exception-handler
               (case-lambda
                 ((g$e$31338$1LXXoO)
                  ((case-lambda
                     ((g$serious?$31339$1LXXoO)
                      (begin
                        ((case-lambda
                           ((g$foreground-color$31344$1LXXoO
                              g$current-output-port$31345$1LXXoO
                              g$foreground-color$31346$1LXXoO
                              g$current-output-port$31347$1LXXoO)
                            ((case-lambda
                               ((g$swap$31348$1LXXoO)
                                (dynamic-wind
                                  g$swap$31348$1LXXoO
                                  (case-lambda
                                    (()
                                     (begin
                                       (if g$serious?$31339$1LXXoO
                                         (display
                                           '"Unhandled exception during evaluation:
")
                                         (void))
                                       (display g$e$31338$1LXXoO)
                                       (g$newline$25571$1LXXoO))))
                                  g$swap$31348$1LXXoO)))
                             (case-lambda
                               (()
                                (begin
                                  ((case-lambda
                                     ((g$t$31349$1LXXoO)
                                      (begin
                                        (g$foreground-color$31344$1LXXoO
                                          g$foreground-color$31346$1LXXoO)
                                        (set! g$foreground-color$31346$1LXXoO
                                          g$t$31349$1LXXoO))))
                                   (g$foreground-color$31344$1LXXoO))
                                  ((case-lambda
                                     ((g$t$31350$1LXXoO)
                                      (begin
                                        (g$current-output-port$31345$1LXXoO
                                          g$current-output-port$31347$1LXXoO)
                                        (set! g$current-output-port$31347$1LXXoO
                                          g$t$31350$1LXXoO))))
                                   (g$current-output-port$31345$1LXXoO))))))))
                         g$foreground-color$31316$1LXXoO
                         current-output-port
                         (if g$serious?$31339$1LXXoO 'red 'yellow)
                         (current-error-port))
                        (if g$serious?$31339$1LXXoO
                          (g$k$31337$1LXXoO)
                          (void)))))
                   ((case-lambda
                      ((g$t$31351$1LXXoO)
                       (if g$t$31351$1LXXoO
                         g$t$31351$1LXXoO
                         (begin
                           '#f
                           (g$system-exception?$31317$1LXXoO
                             g$e$31338$1LXXoO)))))
                    (g$serious-condition?$21183$1LXXoO
                      g$e$31338$1LXXoO)))))
               (case-lambda
                 (()
                  (g$eval$31282$1LXXoO
                    g$x$31336$1LXXoO
                    (g$interaction-environment$31307$1LXXoO)))))))))))
   (g$compile-system-libraries$31319$1LXXoO
     g$compile-system-libraries$31384$1LXXoO
     (case-lambda
       (()
        (g$eval-top-level$31318$1LXXoO
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$31320$1LXXoO
     g$compile$31385$1LXXoO
     (case-lambda
       ((g$filename$31352$1LXXoO)
        (g$load-r6rs-top-level$31322$1LXXoO
          g$filename$31352$1LXXoO
          'compile))))
   (g$compile->closure$31321$1LXXoO
     g$compile->closure$31386$1LXXoO
     (case-lambda
       ((g$filename$31353$1LXXoO)
        (g$load-r6rs-top-level$31322$1LXXoO
          g$filename$31353$1LXXoO
          'closure))))
   (g$load-r6rs-top-level$31322$1LXXoO
     g$load-r6rs-top-level$31387$1LXXoO
     (case-lambda
       ((g$filename$31354$1LXXoO
          g$how$31355$1LXXoO
          .
          g$args$31356$1LXXoO)
        ((case-lambda
           ((g$library-path$31359$1LXXoO g$library-path$31360$1LXXoO)
            ((case-lambda
               ((g$swap$31361$1LXXoO)
                (dynamic-wind
                  g$swap$31361$1LXXoO
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$31362$1LXXoO)
                         ((case-lambda
                            ((g$t$31363$1LXXoO)
                             (if (eqv? g$t$31363$1LXXoO 'closure)
                               (g$pre-compile-r6rs-top-level$31305$1LXXoO
                                 g$x*$31362$1LXXoO)
                               (if (eqv? g$t$31363$1LXXoO 'load)
                                 ((case-lambda
                                    ((g$command-line$31366$1LXXoO
                                       g$command-line$31367$1LXXoO)
                                     ((case-lambda
                                        ((g$swap$31368$1LXXoO)
                                         (dynamic-wind
                                           g$swap$31368$1LXXoO
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$31304$1LXXoO
                                                 g$x*$31362$1LXXoO))))
                                           g$swap$31368$1LXXoO)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$31369$1LXXoO)
                                             (begin
                                               (g$command-line$31366$1LXXoO
                                                 g$command-line$31367$1LXXoO)
                                               (set! g$command-line$31367$1LXXoO
                                                 g$t$31369$1LXXoO))))
                                          (g$command-line$31366$1LXXoO)))))))
                                  g$command-line$31310$1LXXoO
                                  (cons
                                    g$filename$31354$1LXXoO
                                    (g$map$19225$1LXXoO
                                      (case-lambda
                                        ((g$x$31370$1LXXoO)
                                         (g$format$25745$1LXXoO
                                           '"~a"
                                           g$x$31370$1LXXoO)))
                                      g$args$31356$1LXXoO)))
                                 (if (eqv? g$t$31363$1LXXoO 'compile)
                                   (begin
                                     (g$compile-r6rs-top-level$31304$1LXXoO
                                       g$x*$31362$1LXXoO)
                                     (g$serialize-all$26785$1LXXoO
                                       serialize-library
                                       g$compile-core-expr$26532$1LXXoO))
                                   (if '#f '#f (void)))))))
                          g$how$31355$1LXXoO)))
                      (g$with-input-from-file$25567$1LXXoO
                        g$filename$31354$1LXXoO
                        (case-lambda
                          (()
                           ((letrec ((g$f$31371$1LXXoO
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$31372$1LXXoO)
                                              (if (eof-object?
                                                    g$x$31372$1LXXoO)
                                                '()
                                                (cons
                                                  g$x$31372$1LXXoO
                                                  (g$f$31371$1LXXoO)))))
                                           (read-annotated))))))
                              g$f$31371$1LXXoO))))))))
                  g$swap$31361$1LXXoO)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$31373$1LXXoO)
                    (begin
                      (g$library-path$31359$1LXXoO
                        g$library-path$31360$1LXXoO)
                      (set! g$library-path$31360$1LXXoO
                        g$t$31373$1LXXoO))))
                 (g$library-path$31359$1LXXoO)))))))
         g$library-path$26781$1LXXoO
         (g$local-library-path$31311$1LXXoO g$filename$31354$1LXXoO)))))
   (g$fo$31323$1LXXoO
     g$fo$31388$1LXXoO
     (g$make-enumeration$25707$1LXXoO
       '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$26786$1LXXoO
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$31324$1LXXoO)
         (if (g$serious-condition?$21183$1LXXoO g$ex$31324$1LXXoO)
           (raise g$ex$31324$1LXXoO)
           (begin
             '#f
             (display g$ex$31324$1LXXoO)
             (g$newline$25571$1LXXoO))))))
    (set-symbol-value! 'load g$load$31314$1LXXoO)
    (set-symbol-value! 'compile g$compile$31320$1LXXoO)
    (set-symbol-value!
      'compile->closure
      g$compile->closure$31321$1LXXoO)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$31318$1LXXoO)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$31273$1LXXoO)
    (set-symbol-value! 'expanded2core g$expanded->core$26531$1LXXoO)
    (set-symbol-value! 'trace-printer g$trace-printer$31309$1LXXoO)
    (set-symbol-value! 'convert->cps g$convert->cps$26482$1LXXoO)
    (set-symbol-value! 'assertion-violation assertion-violation)
    (set-symbol-value! 'raise raise)
    (g$file-options-constructor$25955$1LXXoO
      (g$enum-set-constructor$25710$1LXXoO g$fo$31323$1LXXoO))
    (g$library-path$26781$1LXXoO (get-library-paths))
    (g$library-extensions$26782$1LXXoO
      (cons '".ironscheme.sls" (g$library-extensions$26782$1LXXoO)))))

