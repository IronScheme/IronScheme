;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (psyntax config) () (void))

(library-letrec* (ironscheme lists)
  ((g$list-tail$5589$DDDPb
     g$list-tail$5733$DDDPb
     (case-lambda
       ((g$lst$5617$DDDPb g$index$5618$DDDPb)
        (if ((case-lambda
               ((g$t$5619$DDDPb)
                (if g$t$5619$DDDPb
                  g$t$5619$DDDPb
                  (begin
                    '#f
                    (g$negative?$6461$DDDPb g$index$5618$DDDPb)))))
             (null? g$lst$5617$DDDPb))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$5617$DDDPb
            g$index$5618$DDDPb)
          (if (g$zero?$6462$DDDPb g$index$5618$DDDPb)
            g$lst$5617$DDDPb
            (g$list-tail$5589$DDDPb
              (cdr g$lst$5617$DDDPb)
              (- g$index$5618$DDDPb '1)))))))
   (g$list-ref$5590$DDDPb
     g$list-ref$5734$DDDPb
     (case-lambda
       ((g$lst$5620$DDDPb g$index$5621$DDDPb)
        (car (g$list-tail$5589$DDDPb
               g$lst$5620$DDDPb
               g$index$5621$DDDPb)))))
   (g$last-pair$5591$DDDPb
     g$last-pair$5735$DDDPb
     (case-lambda
       ((g$lst$5622$DDDPb)
        (if (null? g$lst$5622$DDDPb)
          g$lst$5622$DDDPb
          (if (null? (cdr g$lst$5622$DDDPb))
            g$lst$5622$DDDPb
            (g$last-pair$5591$DDDPb (cdr g$lst$5622$DDDPb)))))))
   (g$make-list$5592$DDDPb
     g$make-list$5736$DDDPb
     (case-lambda
       ((g$n$5623$DDDPb) (vector->list (make-vector g$n$5623$DDDPb)))
       ((g$n$5624$DDDPb g$fill$5625$DDDPb)
        (vector->list (make-vector g$n$5624$DDDPb g$fill$5625$DDDPb)))))
   (g$find$5593$DDDPb
     g$find$5737$DDDPb
     (case-lambda
       ((g$proc$5626$DDDPb g$l$5627$DDDPb)
        (if (null? g$l$5627$DDDPb)
          '#f
          ((case-lambda
             ((g$e$5628$DDDPb g$r$5629$DDDPb g$proc$5630$DDDPb)
              (if (g$proc$5630$DDDPb g$e$5628$DDDPb)
                g$e$5628$DDDPb
                (g$find$5593$DDDPb g$proc$5630$DDDPb g$r$5629$DDDPb))))
           (car g$l$5627$DDDPb)
           (cdr g$l$5627$DDDPb)
           g$proc$5626$DDDPb)))))
   (g$partition$5594$DDDPb
     g$partition$5738$DDDPb
     (case-lambda
       ((g$proc$5631$DDDPb g$l$5632$DDDPb)
        ((letrec ((g$f$5633$DDDPb
                    (case-lambda
                      ((g$l$5634$DDDPb g$a$5635$DDDPb g$b$5636$DDDPb)
                       (if (null? g$l$5634$DDDPb)
                         (values
                           (reverse! g$a$5635$DDDPb)
                           (reverse! g$b$5636$DDDPb))
                         ((case-lambda
                            ((g$e$5637$DDDPb)
                             (if (g$proc$5631$DDDPb g$e$5637$DDDPb)
                               (g$f$5633$DDDPb
                                 (cdr g$l$5634$DDDPb)
                                 (cons g$e$5637$DDDPb g$a$5635$DDDPb)
                                 g$b$5636$DDDPb)
                               (g$f$5633$DDDPb
                                 (cdr g$l$5634$DDDPb)
                                 g$a$5635$DDDPb
                                 (cons
                                   g$e$5637$DDDPb
                                   g$b$5636$DDDPb)))))
                          (car g$l$5634$DDDPb)))))))
           g$f$5633$DDDPb)
         g$l$5632$DDDPb
         '()
         '()))))
   (g$remp$5595$DDDPb
     g$remp$5739$DDDPb
     (case-lambda
       ((g$proc$5638$DDDPb g$l$5639$DDDPb)
        ((letrec ((g$f$5640$DDDPb
                    (case-lambda
                      ((g$l$5641$DDDPb g$a$5642$DDDPb)
                       (if (null? g$l$5641$DDDPb)
                         (reverse! g$a$5642$DDDPb)
                         ((case-lambda
                            ((g$e$5643$DDDPb)
                             (if (g$proc$5638$DDDPb g$e$5643$DDDPb)
                               (g$f$5640$DDDPb
                                 (cdr g$l$5641$DDDPb)
                                 g$a$5642$DDDPb)
                               (g$f$5640$DDDPb
                                 (cdr g$l$5641$DDDPb)
                                 (cons
                                   g$e$5643$DDDPb
                                   g$a$5642$DDDPb)))))
                          (car g$l$5641$DDDPb)))))))
           g$f$5640$DDDPb)
         g$l$5639$DDDPb
         '()))))
   (g$filter$5596$DDDPb
     g$filter$5740$DDDPb
     (case-lambda
       ((g$proc$5644$DDDPb g$l$5645$DDDPb)
        ((letrec ((g$f$5646$DDDPb
                    (case-lambda
                      ((g$l$5647$DDDPb g$a$5648$DDDPb)
                       (if (null? g$l$5647$DDDPb)
                         (reverse! g$a$5648$DDDPb)
                         ((case-lambda
                            ((g$e$5649$DDDPb)
                             (if (g$proc$5644$DDDPb g$e$5649$DDDPb)
                               (g$f$5646$DDDPb
                                 (cdr g$l$5647$DDDPb)
                                 (cons g$e$5649$DDDPb g$a$5648$DDDPb))
                               (g$f$5646$DDDPb
                                 (cdr g$l$5647$DDDPb)
                                 g$a$5648$DDDPb))))
                          (car g$l$5647$DDDPb)))))))
           g$f$5646$DDDPb)
         g$l$5645$DDDPb
         '()))))
   (g$assq$5597$DDDPb
     g$assq$5741$DDDPb
     (case-lambda
       ((g$obj$5650$DDDPb g$lst$5651$DDDPb)
        (if (null? g$lst$5651$DDDPb)
          '#f
          ((case-lambda
             ((g$obj$5652$DDDPb g$t$5653$DDDPb g$r$5654$DDDPb)
              (if (eq? g$obj$5652$DDDPb (car g$t$5653$DDDPb))
                g$t$5653$DDDPb
                (g$assq$5597$DDDPb g$obj$5652$DDDPb g$r$5654$DDDPb))))
           g$obj$5650$DDDPb
           (car g$lst$5651$DDDPb)
           (cdr g$lst$5651$DDDPb))))))
   (g$assv$5598$DDDPb
     g$assv$5742$DDDPb
     (case-lambda
       ((g$obj$5655$DDDPb g$lst$5656$DDDPb)
        (if (null? g$lst$5656$DDDPb)
          '#f
          ((case-lambda
             ((g$obj$5657$DDDPb g$t$5658$DDDPb g$r$5659$DDDPb)
              (if (eqv? g$obj$5657$DDDPb (car g$t$5658$DDDPb))
                g$t$5658$DDDPb
                (g$assv$5598$DDDPb g$obj$5657$DDDPb g$r$5659$DDDPb))))
           g$obj$5655$DDDPb
           (car g$lst$5656$DDDPb)
           (cdr g$lst$5656$DDDPb))))))
   (g$assoc$5599$DDDPb
     g$assoc$5743$DDDPb
     (case-lambda
       ((g$obj$5660$DDDPb g$lst$5661$DDDPb)
        (if (null? g$lst$5661$DDDPb)
          '#f
          ((case-lambda
             ((g$obj$5662$DDDPb g$t$5663$DDDPb g$r$5664$DDDPb)
              (if (equal? g$obj$5662$DDDPb (car g$t$5663$DDDPb))
                g$t$5663$DDDPb
                (g$assoc$5599$DDDPb g$obj$5662$DDDPb g$r$5664$DDDPb))))
           g$obj$5660$DDDPb
           (car g$lst$5661$DDDPb)
           (cdr g$lst$5661$DDDPb))))))
   (g$assp$5600$DDDPb
     g$assp$5744$DDDPb
     (case-lambda
       ((g$p?$5665$DDDPb g$lst$5666$DDDPb)
        (if (null? g$lst$5666$DDDPb)
          '#f
          ((case-lambda
             ((g$p?$5667$DDDPb g$t$5668$DDDPb g$r$5669$DDDPb)
              (if (g$p?$5667$DDDPb (car g$t$5668$DDDPb))
                g$t$5668$DDDPb
                (g$assp$5600$DDDPb g$p?$5667$DDDPb g$r$5669$DDDPb))))
           g$p?$5665$DDDPb
           (car g$lst$5666$DDDPb)
           (cdr g$lst$5666$DDDPb))))))
   (g$memq$5601$DDDPb
     g$memq$5745$DDDPb
     (case-lambda
       ((g$obj$5670$DDDPb g$lst$5671$DDDPb)
        (if (null? g$lst$5671$DDDPb)
          '#f
          (if (eq? g$obj$5670$DDDPb (car g$lst$5671$DDDPb))
            g$lst$5671$DDDPb
            (g$memq$5601$DDDPb
              g$obj$5670$DDDPb
              (cdr g$lst$5671$DDDPb)))))))
   (g$memv$5602$DDDPb
     g$memv$5746$DDDPb
     (case-lambda
       ((g$obj$5672$DDDPb g$lst$5673$DDDPb)
        (if (null? g$lst$5673$DDDPb)
          '#f
          (if (eqv? g$obj$5672$DDDPb (car g$lst$5673$DDDPb))
            g$lst$5673$DDDPb
            (g$memv$5602$DDDPb
              g$obj$5672$DDDPb
              (cdr g$lst$5673$DDDPb)))))))
   (g$member$5603$DDDPb
     g$member$5747$DDDPb
     (case-lambda
       ((g$obj$5674$DDDPb g$lst$5675$DDDPb)
        (if (null? g$lst$5675$DDDPb)
          '#f
          (if (equal? g$obj$5674$DDDPb (car g$lst$5675$DDDPb))
            g$lst$5675$DDDPb
            (g$member$5603$DDDPb
              g$obj$5674$DDDPb
              (cdr g$lst$5675$DDDPb)))))))
   (g$memp$5604$DDDPb
     g$memp$5748$DDDPb
     (case-lambda
       ((g$p?$5676$DDDPb g$lst$5677$DDDPb)
        (if (null? g$lst$5677$DDDPb)
          '#f
          (if (g$p?$5676$DDDPb (car g$lst$5677$DDDPb))
            g$lst$5677$DDDPb
            (g$memp$5604$DDDPb
              g$p?$5676$DDDPb
              (cdr g$lst$5677$DDDPb)))))))
   (g$all-empty?$5605$DDDPb
     g$all-empty?$5749$DDDPb
     (case-lambda
       ((g$ls$5678$DDDPb)
        ((case-lambda
           ((g$t$5679$DDDPb)
            (if g$t$5679$DDDPb
              g$t$5679$DDDPb
              (begin
                '#f
                (if (null? (car g$ls$5678$DDDPb))
                  (begin
                    '#f
                    (g$all-empty?$5605$DDDPb (cdr g$ls$5678$DDDPb)))
                  '#f)))))
         (null? g$ls$5678$DDDPb)))))
   (g$split$5606$DDDPb
     g$split$5750$DDDPb
     (case-lambda
       ((g$ls$5680$DDDPb)
        (if (null? g$ls$5680$DDDPb)
          (values '() '())
          (call-with-values
            (case-lambda
              (() (g$split$5606$DDDPb (cdr g$ls$5680$DDDPb))))
            (case-lambda
              ((g$cars$5681$DDDPb g$cdrs$5682$DDDPb)
               ((case-lambda
                  ((g$a$5683$DDDPb)
                   (values
                     (cons (car g$a$5683$DDDPb) g$cars$5681$DDDPb)
                     (cons (cdr g$a$5683$DDDPb) g$cdrs$5682$DDDPb))))
                (car g$ls$5680$DDDPb)))))))))
   (g$for-all$5607$DDDPb
     g$for-all$5751$DDDPb
     (case-lambda
       ((g$f$5684$DDDPb g$arg1$5685$DDDPb . g$args$5686$DDDPb)
        ((case-lambda
           ((g$args$5687$DDDPb)
            (if (g$all-empty?$5605$DDDPb g$args$5687$DDDPb)
              '#t
              (call-with-values
                (case-lambda
                  (() (g$split$5606$DDDPb g$args$5687$DDDPb)))
                (case-lambda
                  ((g$cars$5688$DDDPb g$cdrs$5689$DDDPb)
                   (if (g$all-empty?$5605$DDDPb g$cdrs$5689$DDDPb)
                     (apply g$f$5684$DDDPb g$cars$5688$DDDPb)
                     (if (apply g$f$5684$DDDPb g$cars$5688$DDDPb)
                       (begin
                         '#f
                         (apply
                           g$for-all$5607$DDDPb
                           g$f$5684$DDDPb
                           g$cdrs$5689$DDDPb))
                       '#f))))))))
         (cons g$arg1$5685$DDDPb g$args$5686$DDDPb)))))
   (g$exists$5608$DDDPb
     g$exists$5752$DDDPb
     (case-lambda
       ((g$f$5690$DDDPb g$arg1$5691$DDDPb . g$args$5692$DDDPb)
        ((case-lambda
           ((g$args$5693$DDDPb)
            (if (g$all-empty?$5605$DDDPb g$args$5693$DDDPb)
              '#f
              (call-with-values
                (case-lambda
                  (() (g$split$5606$DDDPb g$args$5693$DDDPb)))
                (case-lambda
                  ((g$cars$5694$DDDPb g$cdrs$5695$DDDPb)
                   ((case-lambda
                      ((g$t$5696$DDDPb)
                       (if g$t$5696$DDDPb
                         g$t$5696$DDDPb
                         (begin
                           '#f
                           (apply
                             g$exists$5608$DDDPb
                             g$f$5690$DDDPb
                             g$cdrs$5695$DDDPb)))))
                    (apply g$f$5690$DDDPb g$cars$5694$DDDPb))))))))
         (cons g$arg1$5691$DDDPb g$args$5692$DDDPb)))))
   (g$map$5609$DDDPb
     g$map$5753$DDDPb
     (case-lambda
       ((g$proc$5697$DDDPb g$list1$5698$DDDPb . g$lists$5699$DDDPb)
        ((letrec ((g$f$5700$DDDPb
                    (case-lambda
                      ((g$lists$5701$DDDPb g$a$5702$DDDPb)
                       (if (g$all-empty?$5605$DDDPb g$lists$5701$DDDPb)
                         (reverse! g$a$5702$DDDPb)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$split$5606$DDDPb g$lists$5701$DDDPb)))
                           (case-lambda
                             ((g$cars$5703$DDDPb g$cdrs$5704$DDDPb)
                              (g$f$5700$DDDPb
                                g$cdrs$5704$DDDPb
                                (cons
                                  (apply
                                    g$proc$5697$DDDPb
                                    g$cars$5703$DDDPb)
                                  g$a$5702$DDDPb))))))))))
           g$f$5700$DDDPb)
         (cons g$list1$5698$DDDPb g$lists$5699$DDDPb)
         '()))))
   (g$for-each$5610$DDDPb
     g$for-each$5754$DDDPb
     (case-lambda
       ((g$f$5705$DDDPb g$arg1$5706$DDDPb . g$args$5707$DDDPb)
        ((case-lambda
           ((g$args$5708$DDDPb)
            (if (not (g$all-empty?$5605$DDDPb g$args$5708$DDDPb))
              (call-with-values
                (case-lambda
                  (() (g$split$5606$DDDPb g$args$5708$DDDPb)))
                (case-lambda
                  ((g$cars$5709$DDDPb g$cdrs$5710$DDDPb)
                   (begin
                     (apply g$f$5705$DDDPb g$cars$5709$DDDPb)
                     (apply
                       g$for-each$5610$DDDPb
                       g$f$5705$DDDPb
                       g$cdrs$5710$DDDPb)))))
              (void))))
         (cons g$arg1$5706$DDDPb g$args$5707$DDDPb)))))
   (g$cons*$5611$DDDPb
     g$cons*$5755$DDDPb
     (case-lambda
       ((g$a$5711$DDDPb . g$rest$5712$DDDPb)
        ((letrec ((g$f$5713$DDDPb
                    (case-lambda
                      ((g$a$5714$DDDPb g$rest$5715$DDDPb)
                       (if (null? g$rest$5715$DDDPb)
                         g$a$5714$DDDPb
                         (cons
                           g$a$5714$DDDPb
                           (g$f$5713$DDDPb
                             (car g$rest$5715$DDDPb)
                             (cdr g$rest$5715$DDDPb))))))))
           g$f$5713$DDDPb)
         g$a$5711$DDDPb
         g$rest$5712$DDDPb))))
   (g$fold-left$5612$DDDPb
     g$fold-left$5756$DDDPb
     (case-lambda
       ((g$combine$5716$DDDPb
          g$nil$5717$DDDPb
          g$list1$5718$DDDPb
          .
          g$lists$5719$DDDPb)
        (if (null? g$list1$5718$DDDPb)
          g$nil$5717$DDDPb
          (apply
            g$fold-left$5612$DDDPb
            (g$cons*$5611$DDDPb
              g$combine$5716$DDDPb
              (apply
                g$combine$5716$DDDPb
                (g$cons*$5611$DDDPb
                  g$nil$5717$DDDPb
                  (car g$list1$5718$DDDPb)
                  (g$map$5609$DDDPb car g$lists$5719$DDDPb)))
              (cdr g$list1$5718$DDDPb)
              (g$map$5609$DDDPb cdr g$lists$5719$DDDPb)))))))
   (g$fold-right$5613$DDDPb
     g$fold-right$5757$DDDPb
     (case-lambda
       ((g$combine$5720$DDDPb
          g$nil$5721$DDDPb
          g$list1$5722$DDDPb
          .
          g$lists$5723$DDDPb)
        (if (null? g$list1$5722$DDDPb)
          g$nil$5721$DDDPb
          (apply
            g$combine$5720$DDDPb
            (append
              (list (car g$list1$5722$DDDPb))
              (g$map$5609$DDDPb car g$lists$5723$DDDPb)
              (list
                (apply
                  g$fold-right$5613$DDDPb
                  (g$cons*$5611$DDDPb
                    g$combine$5720$DDDPb
                    g$nil$5721$DDDPb
                    (cdr g$list1$5722$DDDPb)
                    (g$map$5609$DDDPb cdr g$lists$5723$DDDPb))))))))))
   (g$remove$5614$DDDPb
     g$remove$5758$DDDPb
     (case-lambda
       ((g$obj$5724$DDDPb g$list$5725$DDDPb)
        (g$remp$5595$DDDPb
          (case-lambda
            ((g$x$5726$DDDPb) (equal? g$obj$5724$DDDPb g$x$5726$DDDPb)))
          g$list$5725$DDDPb))))
   (g$remv$5615$DDDPb
     g$remv$5759$DDDPb
     (case-lambda
       ((g$obj$5727$DDDPb g$list$5728$DDDPb)
        (g$remp$5595$DDDPb
          (case-lambda
            ((g$x$5729$DDDPb) (eqv? g$obj$5727$DDDPb g$x$5729$DDDPb)))
          g$list$5728$DDDPb))))
   (g$remq$5616$DDDPb
     g$remq$5760$DDDPb
     (case-lambda
       ((g$obj$5730$DDDPb g$list$5731$DDDPb)
        (g$remp$5595$DDDPb
          (case-lambda
            ((g$x$5732$DDDPb) (eq? g$obj$5730$DDDPb g$x$5732$DDDPb)))
          g$list$5731$DDDPb)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$div$6069$DDDPb
     g$div$6415$DDDPb
     (case-lambda
       ((g$x1$6215$DDDPb g$x2$6216$DDDPb)
        (call-with-values
          (case-lambda
            (() (div-and-mod g$x1$6215$DDDPb g$x2$6216$DDDPb)))
          (case-lambda
            ((g$n$6219$DDDPb g$d$6220$DDDPb)
             ((case-lambda
                ((g$d$6221$DDDPb g$n$6222$DDDPb) g$n$6222$DDDPb))
              g$d$6220$DDDPb
              g$n$6219$DDDPb)))))))
   (g$div0$6070$DDDPb
     g$div0$6416$DDDPb
     (case-lambda
       ((g$x1$6223$DDDPb g$x2$6224$DDDPb)
        (call-with-values
          (case-lambda
            (() (div0-and-mod0 g$x1$6223$DDDPb g$x2$6224$DDDPb)))
          (case-lambda
            ((g$n$6227$DDDPb g$d$6228$DDDPb)
             ((case-lambda
                ((g$d$6229$DDDPb g$n$6230$DDDPb) g$n$6230$DDDPb))
              g$d$6228$DDDPb
              g$n$6227$DDDPb)))))))
   (g$mod$6071$DDDPb
     g$mod$6417$DDDPb
     (case-lambda
       ((g$x1$6231$DDDPb g$x2$6232$DDDPb)
        (call-with-values
          (case-lambda
            (() (div-and-mod g$x1$6231$DDDPb g$x2$6232$DDDPb)))
          (case-lambda
            ((g$n$6235$DDDPb g$d$6236$DDDPb)
             ((case-lambda
                ((g$d$6237$DDDPb g$n$6238$DDDPb) g$d$6237$DDDPb))
              g$d$6236$DDDPb
              g$n$6235$DDDPb)))))))
   (g$mod0$6072$DDDPb
     g$mod0$6418$DDDPb
     (case-lambda
       ((g$x1$6239$DDDPb g$x2$6240$DDDPb)
        (call-with-values
          (case-lambda
            (() (div0-and-mod0 g$x1$6239$DDDPb g$x2$6240$DDDPb)))
          (case-lambda
            ((g$n$6243$DDDPb g$d$6244$DDDPb)
             ((case-lambda
                ((g$d$6245$DDDPb g$n$6246$DDDPb) g$d$6245$DDDPb))
              g$d$6244$DDDPb
              g$n$6243$DDDPb)))))))
   (g$list->vector$6073$DDDPb
     g$list->vector$6419$DDDPb
     (case-lambda ((g$lst$6247$DDDPb) (apply vector g$lst$6247$DDDPb))))
   (g$list->string$6074$DDDPb
     g$list->string$6420$DDDPb
     (case-lambda ((g$lst$6248$DDDPb) (apply string g$lst$6248$DDDPb))))
   (g$char?$6075$DDDPb
     g$char?$6421$DDDPb
     (case-lambda
       ((g$obj$6249$DDDPb)
        (clr-is-internal 'system.char g$obj$6249$DDDPb))))
   (g$vector?$6076$DDDPb
     g$vector?$6422$DDDPb
     (case-lambda
       ((g$obj$6250$DDDPb)
        (clr-is-internal 'system.object[] g$obj$6250$DDDPb))))
   (g$bytevector?$6077$DDDPb
     g$bytevector?$6423$DDDPb
     (case-lambda
       ((g$obj$6251$DDDPb)
        (clr-is-internal 'system.byte[] g$obj$6251$DDDPb))))
   (g$symbol?$6078$DDDPb
     g$symbol?$6424$DDDPb
     (case-lambda
       ((g$obj$6252$DDDPb)
        (clr-is-internal
          'microsoft.scripting.symbolid
          g$obj$6252$DDDPb))))
   (g$boolean?$6079$DDDPb
     g$boolean?$6425$DDDPb
     (case-lambda
       ((g$obj$6253$DDDPb)
        (clr-is-internal 'system.boolean g$obj$6253$DDDPb))))
   (g$procedure?$6080$DDDPb
     g$procedure?$6426$DDDPb
     (case-lambda
       ((g$obj$6254$DDDPb)
        (clr-is-internal
          'ironscheme.runtime.icallable
          g$obj$6254$DDDPb))))
   (g$fixnum?$6081$DDDPb
     g$fixnum?$6427$DDDPb
     (case-lambda
       ((g$obj$6255$DDDPb)
        (clr-is-internal 'system.int32 g$obj$6255$DDDPb))))
   (g$flonum?$6082$DDDPb
     g$flonum?$6428$DDDPb
     (case-lambda
       ((g$obj$6256$DDDPb)
        (clr-is-internal 'system.double g$obj$6256$DDDPb))))
   (g$fixnum-width$6083$DDDPb
     g$fixnum-width$6429$DDDPb
     (case-lambda (() '32)))
   (g$vector-fill!$6084$DDDPb
     g$vector-fill!$6430$DDDPb
     (case-lambda
       ((g$vec$6257$DDDPb g$val$6258$DDDPb)
        ((case-lambda
           ((g$len$6259$DDDPb)
            (letrec ((g$loop$6260$DDDPb
                       (case-lambda
                         ((g$i$6261$DDDPb)
                          (if (fx=? g$i$6261$DDDPb g$len$6259$DDDPb)
                            (if '#f '#f (void))
                            (begin
                              (vector-set!
                                g$vec$6257$DDDPb
                                g$i$6261$DDDPb
                                g$val$6258$DDDPb)
                              (g$loop$6260$DDDPb
                                (fx+ g$i$6261$DDDPb '1))))))))
              (g$loop$6260$DDDPb '0))))
         (vector-length g$vec$6257$DDDPb)))))
   (g$reverse$6085$DDDPb
     g$reverse$6431$DDDPb
     (case-lambda
       ((g$lst$6262$DDDPb)
        (g$fold-left$5756$DDDPb
          (case-lambda
            ((g$x$6263$DDDPb g$y$6264$DDDPb)
             (cons g$y$6264$DDDPb g$x$6263$DDDPb)))
          '()
          g$lst$6262$DDDPb))))
   (g$caar$6086$DDDPb
     g$caar$6432$DDDPb
     (case-lambda ((g$x$6265$DDDPb) (car (car g$x$6265$DDDPb)))))
   (g$cadr$6087$DDDPb
     g$cadr$6433$DDDPb
     (case-lambda ((g$x$6266$DDDPb) (car (cdr g$x$6266$DDDPb)))))
   (g$cdar$6088$DDDPb
     g$cdar$6434$DDDPb
     (case-lambda ((g$x$6267$DDDPb) (cdr (car g$x$6267$DDDPb)))))
   (g$cddr$6089$DDDPb
     g$cddr$6435$DDDPb
     (case-lambda ((g$x$6268$DDDPb) (cdr (cdr g$x$6268$DDDPb)))))
   (g$caaar$6090$DDDPb
     g$caaar$6436$DDDPb
     (case-lambda
       ((g$x$6269$DDDPb) (g$caar$6086$DDDPb (car g$x$6269$DDDPb)))))
   (g$caadr$6091$DDDPb
     g$caadr$6437$DDDPb
     (case-lambda
       ((g$x$6270$DDDPb) (g$caar$6086$DDDPb (cdr g$x$6270$DDDPb)))))
   (g$cadar$6092$DDDPb
     g$cadar$6438$DDDPb
     (case-lambda
       ((g$x$6271$DDDPb) (g$cadr$6087$DDDPb (car g$x$6271$DDDPb)))))
   (g$caddr$6093$DDDPb
     g$caddr$6439$DDDPb
     (case-lambda
       ((g$x$6272$DDDPb) (g$cadr$6087$DDDPb (cdr g$x$6272$DDDPb)))))
   (g$cdaar$6094$DDDPb
     g$cdaar$6440$DDDPb
     (case-lambda
       ((g$x$6273$DDDPb) (g$cdar$6088$DDDPb (car g$x$6273$DDDPb)))))
   (g$cdadr$6095$DDDPb
     g$cdadr$6441$DDDPb
     (case-lambda
       ((g$x$6274$DDDPb) (g$cdar$6088$DDDPb (cdr g$x$6274$DDDPb)))))
   (g$cddar$6096$DDDPb
     g$cddar$6442$DDDPb
     (case-lambda
       ((g$x$6275$DDDPb) (g$cddr$6089$DDDPb (car g$x$6275$DDDPb)))))
   (g$cdddr$6097$DDDPb
     g$cdddr$6443$DDDPb
     (case-lambda
       ((g$x$6276$DDDPb) (g$cddr$6089$DDDPb (cdr g$x$6276$DDDPb)))))
   (g$caaaar$6098$DDDPb
     g$caaaar$6444$DDDPb
     (case-lambda
       ((g$x$6277$DDDPb) (g$caaar$6090$DDDPb (car g$x$6277$DDDPb)))))
   (g$caaadr$6099$DDDPb
     g$caaadr$6445$DDDPb
     (case-lambda
       ((g$x$6278$DDDPb) (g$caaar$6090$DDDPb (cdr g$x$6278$DDDPb)))))
   (g$caadar$6100$DDDPb
     g$caadar$6446$DDDPb
     (case-lambda
       ((g$x$6279$DDDPb) (g$caadr$6091$DDDPb (car g$x$6279$DDDPb)))))
   (g$caaddr$6101$DDDPb
     g$caaddr$6447$DDDPb
     (case-lambda
       ((g$x$6280$DDDPb) (g$caadr$6091$DDDPb (cdr g$x$6280$DDDPb)))))
   (g$cadaar$6102$DDDPb
     g$cadaar$6448$DDDPb
     (case-lambda
       ((g$x$6281$DDDPb) (g$cadar$6092$DDDPb (car g$x$6281$DDDPb)))))
   (g$cadadr$6103$DDDPb
     g$cadadr$6449$DDDPb
     (case-lambda
       ((g$x$6282$DDDPb) (g$cadar$6092$DDDPb (cdr g$x$6282$DDDPb)))))
   (g$caddar$6104$DDDPb
     g$caddar$6450$DDDPb
     (case-lambda
       ((g$x$6283$DDDPb) (g$caddr$6093$DDDPb (car g$x$6283$DDDPb)))))
   (g$cadddr$6105$DDDPb
     g$cadddr$6451$DDDPb
     (case-lambda
       ((g$x$6284$DDDPb) (g$caddr$6093$DDDPb (cdr g$x$6284$DDDPb)))))
   (g$cdaaar$6106$DDDPb
     g$cdaaar$6452$DDDPb
     (case-lambda
       ((g$x$6285$DDDPb) (g$cdaar$6094$DDDPb (car g$x$6285$DDDPb)))))
   (g$cdaadr$6107$DDDPb
     g$cdaadr$6453$DDDPb
     (case-lambda
       ((g$x$6286$DDDPb) (g$cdaar$6094$DDDPb (cdr g$x$6286$DDDPb)))))
   (g$cdadar$6108$DDDPb
     g$cdadar$6454$DDDPb
     (case-lambda
       ((g$x$6287$DDDPb) (g$cdadr$6095$DDDPb (car g$x$6287$DDDPb)))))
   (g$cdaddr$6109$DDDPb
     g$cdaddr$6455$DDDPb
     (case-lambda
       ((g$x$6288$DDDPb) (g$cdadr$6095$DDDPb (cdr g$x$6288$DDDPb)))))
   (g$cddaar$6110$DDDPb
     g$cddaar$6456$DDDPb
     (case-lambda
       ((g$x$6289$DDDPb) (g$cddar$6096$DDDPb (car g$x$6289$DDDPb)))))
   (g$cddadr$6111$DDDPb
     g$cddadr$6457$DDDPb
     (case-lambda
       ((g$x$6290$DDDPb) (g$cddar$6096$DDDPb (cdr g$x$6290$DDDPb)))))
   (g$cdddar$6112$DDDPb
     g$cdddar$6458$DDDPb
     (case-lambda
       ((g$x$6291$DDDPb) (g$cdddr$6097$DDDPb (car g$x$6291$DDDPb)))))
   (g$cddddr$6113$DDDPb
     g$cddddr$6459$DDDPb
     (case-lambda
       ((g$x$6292$DDDPb) (g$cdddr$6097$DDDPb (cdr g$x$6292$DDDPb)))))
   (g$positive?$6114$DDDPb
     g$positive?$6460$DDDPb
     (case-lambda
       ((g$r$6293$DDDPb)
        (begin
          (if (not (real-valued? g$r$6293$DDDPb))
            (assertion-violation
              'positive?
              '"not a real"
              g$r$6293$DDDPb)
            (void))
          (< '0 g$r$6293$DDDPb)))))
   (g$negative?$6115$DDDPb
     g$negative?$6461$DDDPb
     (case-lambda
       ((g$r$6294$DDDPb)
        (begin
          (if (not (real-valued? g$r$6294$DDDPb))
            (assertion-violation
              'negative?
              '"not a real"
              g$r$6294$DDDPb)
            (void))
          (> '0 g$r$6294$DDDPb)))))
   (g$zero?$6116$DDDPb
     g$zero?$6462$DDDPb
     (case-lambda
       ((g$z$6295$DDDPb)
        (begin
          (if (not (number? g$z$6295$DDDPb))
            (assertion-violation 'zero? '"not a number" g$z$6295$DDDPb)
            (void))
          (= '0 g$z$6295$DDDPb)))))
   (g$even?$6117$DDDPb
     g$even?$6463$DDDPb
     (case-lambda
       ((g$n$6296$DDDPb)
        (begin
          (if (not (integer-valued? g$n$6296$DDDPb))
            (assertion-violation 'even? '"not a integer" g$n$6296$DDDPb)
            (void))
          (= '0 (g$mod$6071$DDDPb g$n$6296$DDDPb '2))))))
   (g$odd?$6118$DDDPb
     g$odd?$6464$DDDPb
     (case-lambda
       ((g$n$6297$DDDPb)
        (begin
          (if (not (integer-valued? g$n$6297$DDDPb))
            (assertion-violation 'odd? '"not a integer" g$n$6297$DDDPb)
            (void))
          (= '1 (g$mod$6071$DDDPb g$n$6297$DDDPb '2))))))
   (g$max$6119$DDDPb
     g$max$6465$DDDPb
     (case-lambda
       ((g$a$6298$DDDPb . g$rest$6299$DDDPb)
        (begin
          (if (not (real-valued? g$a$6298$DDDPb))
            (assertion-violation 'max '"not a real" g$a$6298$DDDPb)
            (void))
          (g$fold-left$5756$DDDPb
            (case-lambda
              ((g$a$6300$DDDPb g$b$6301$DDDPb)
               ((case-lambda
                  ((g$r$6302$DDDPb)
                   (if ((case-lambda
                          ((g$t$6303$DDDPb)
                           (if g$t$6303$DDDPb
                             g$t$6303$DDDPb
                             (begin '#f (inexact? g$b$6301$DDDPb)))))
                        (inexact? g$a$6300$DDDPb))
                     (inexact g$r$6302$DDDPb)
                     g$r$6302$DDDPb)))
                (if (< g$a$6300$DDDPb g$b$6301$DDDPb)
                  g$b$6301$DDDPb
                  g$a$6300$DDDPb))))
            g$a$6298$DDDPb
            g$rest$6299$DDDPb)))))
   (g$min$6120$DDDPb
     g$min$6466$DDDPb
     (case-lambda
       ((g$a$6304$DDDPb . g$rest$6305$DDDPb)
        (begin
          (if (not (real-valued? g$a$6304$DDDPb))
            (assertion-violation 'min '"not a real" g$a$6304$DDDPb)
            (void))
          (g$fold-left$5756$DDDPb
            (case-lambda
              ((g$a$6306$DDDPb g$b$6307$DDDPb)
               ((case-lambda
                  ((g$r$6308$DDDPb)
                   (if ((case-lambda
                          ((g$t$6309$DDDPb)
                           (if g$t$6309$DDDPb
                             g$t$6309$DDDPb
                             (begin '#f (inexact? g$b$6307$DDDPb)))))
                        (inexact? g$a$6306$DDDPb))
                     (inexact g$r$6308$DDDPb)
                     g$r$6308$DDDPb)))
                (if (> g$a$6306$DDDPb g$b$6307$DDDPb)
                  g$b$6307$DDDPb
                  g$a$6306$DDDPb))))
            g$a$6304$DDDPb
            g$rest$6305$DDDPb)))))
   (g$gcd$6121$DDDPb
     g$gcd$6467$DDDPb
     (case-lambda
       (g$nums$6310$DDDPb
        ((case-lambda
           ((g$t$6311$DDDPb)
            (if (eqv? g$t$6311$DDDPb '0)
              '0
              (if (eqv? g$t$6311$DDDPb '1)
                ((case-lambda
                   ((g$n$6312$DDDPb)
                    (begin
                      (if (not (integer-valued? g$n$6312$DDDPb))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$6312$DDDPb)
                        (void))
                      (abs g$n$6312$DDDPb))))
                 (car g$nums$6310$DDDPb))
                (if (eqv? g$t$6311$DDDPb '2)
                  ((case-lambda
                     ((g$a$6313$DDDPb g$b$6314$DDDPb)
                      (begin
                        (if (not (integer-valued? g$a$6313$DDDPb))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$6313$DDDPb)
                          (void))
                        (if (not (integer-valued? g$b$6314$DDDPb))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$6314$DDDPb)
                          (void))
                        (if (g$zero?$6116$DDDPb g$b$6314$DDDPb)
                          (abs g$a$6313$DDDPb)
                          (abs (g$gcd$6121$DDDPb
                                 g$b$6314$DDDPb
                                 (g$mod$6071$DDDPb
                                   g$a$6313$DDDPb
                                   g$b$6314$DDDPb)))))))
                   (car g$nums$6310$DDDPb)
                   (g$cadr$6087$DDDPb g$nums$6310$DDDPb))
                  (g$fold-left$5756$DDDPb
                    g$gcd$6121$DDDPb
                    (abs (car g$nums$6310$DDDPb))
                    (cdr g$nums$6310$DDDPb)))))))
         (length g$nums$6310$DDDPb)))))
   (g$lcm$6122$DDDPb
     g$lcm$6468$DDDPb
     (case-lambda
       (g$nums$6315$DDDPb
        ((case-lambda
           ((g$t$6316$DDDPb)
            (if (eqv? g$t$6316$DDDPb '0)
              '1
              (if (eqv? g$t$6316$DDDPb '1)
                ((case-lambda
                   ((g$n$6317$DDDPb)
                    (begin
                      (if (not (integer-valued? g$n$6317$DDDPb))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$6317$DDDPb)
                        (void))
                      (abs g$n$6317$DDDPb))))
                 (car g$nums$6315$DDDPb))
                (if (eqv? g$t$6316$DDDPb '2)
                  ((case-lambda
                     ((g$a$6318$DDDPb g$b$6319$DDDPb)
                      (begin
                        (if (not (integer-valued? g$a$6318$DDDPb))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$6318$DDDPb)
                          (void))
                        (if (not (integer-valued? g$b$6319$DDDPb))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$6319$DDDPb)
                          (void))
                        (if ((case-lambda
                               ((g$t$6320$DDDPb)
                                (if g$t$6320$DDDPb
                                  g$t$6320$DDDPb
                                  (begin
                                    '#f
                                    (g$zero?$6116$DDDPb
                                      g$b$6319$DDDPb)))))
                             (g$zero?$6116$DDDPb g$a$6318$DDDPb))
                          '0
                          (abs (* (/ g$a$6318$DDDPb
                                     (g$gcd$6121$DDDPb
                                       g$a$6318$DDDPb
                                       g$b$6319$DDDPb))
                                  g$b$6319$DDDPb))))))
                   (car g$nums$6315$DDDPb)
                   (g$cadr$6087$DDDPb g$nums$6315$DDDPb))
                  (g$fold-left$5756$DDDPb
                    g$lcm$6122$DDDPb
                    (abs (car g$nums$6315$DDDPb))
                    (cdr g$nums$6315$DDDPb)))))))
         (length g$nums$6315$DDDPb)))))
   (g$string=?$6160$DDDPb
     g$string=?$6469$DDDPb
     (case-lambda
       ((g$a$6321$DDDPb g$b$6322$DDDPb . g$rest$6323$DDDPb)
        (begin
          (if (not (string? g$a$6321$DDDPb))
            (assertion-violation
              'string=?
              '"not a string"
              g$a$6321$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6324$DDDPb)
               (begin
                 (if (not (string? g$x$6324$DDDPb))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$6324$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$6325$DDDPb)
                     (begin
                       (set! g$a$6321$DDDPb g$x$6324$DDDPb)
                       g$r$6325$DDDPb)))
                  (fx=?
                    (string-compare g$a$6321$DDDPb g$x$6324$DDDPb)
                    '0)))))
            (cons g$b$6322$DDDPb g$rest$6323$DDDPb))))))
   (g$string<?$6161$DDDPb
     g$string<?$6470$DDDPb
     (case-lambda
       ((g$a$6326$DDDPb g$b$6327$DDDPb . g$rest$6328$DDDPb)
        (begin
          (if (not (string? g$a$6326$DDDPb))
            (assertion-violation
              'string<?
              '"not a string"
              g$a$6326$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6329$DDDPb)
               (begin
                 (if (not (string? g$x$6329$DDDPb))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$6329$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$6330$DDDPb)
                     (begin
                       (set! g$a$6326$DDDPb g$x$6329$DDDPb)
                       g$r$6330$DDDPb)))
                  (fx<?
                    (string-compare g$a$6326$DDDPb g$x$6329$DDDPb)
                    '0)))))
            (cons g$b$6327$DDDPb g$rest$6328$DDDPb))))))
   (g$string>?$6162$DDDPb
     g$string>?$6471$DDDPb
     (case-lambda
       ((g$a$6331$DDDPb g$b$6332$DDDPb . g$rest$6333$DDDPb)
        (begin
          (if (not (string? g$a$6331$DDDPb))
            (assertion-violation
              'string>?
              '"not a string"
              g$a$6331$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6334$DDDPb)
               (begin
                 (if (not (string? g$x$6334$DDDPb))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$6334$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$6335$DDDPb)
                     (begin
                       (set! g$a$6331$DDDPb g$x$6334$DDDPb)
                       g$r$6335$DDDPb)))
                  (fx>?
                    (string-compare g$a$6331$DDDPb g$x$6334$DDDPb)
                    '0)))))
            (cons g$b$6332$DDDPb g$rest$6333$DDDPb))))))
   (g$string<=?$6163$DDDPb
     g$string<=?$6472$DDDPb
     (case-lambda
       ((g$a$6336$DDDPb g$b$6337$DDDPb . g$rest$6338$DDDPb)
        (begin
          (if (not (string? g$a$6336$DDDPb))
            (assertion-violation
              'string<=?
              '"not a string"
              g$a$6336$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6339$DDDPb)
               (begin
                 (if (not (string? g$x$6339$DDDPb))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$6339$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$6340$DDDPb)
                     (begin
                       (set! g$a$6336$DDDPb g$x$6339$DDDPb)
                       g$r$6340$DDDPb)))
                  (fx<=?
                    (string-compare g$a$6336$DDDPb g$x$6339$DDDPb)
                    '0)))))
            (cons g$b$6337$DDDPb g$rest$6338$DDDPb))))))
   (g$string>=?$6164$DDDPb
     g$string>=?$6473$DDDPb
     (case-lambda
       ((g$a$6341$DDDPb g$b$6342$DDDPb . g$rest$6343$DDDPb)
        (begin
          (if (not (string? g$a$6341$DDDPb))
            (assertion-violation
              'string>=?
              '"not a string"
              g$a$6341$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6344$DDDPb)
               (begin
                 (if (not (string? g$x$6344$DDDPb))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$6344$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$6345$DDDPb)
                     (begin
                       (set! g$a$6341$DDDPb g$x$6344$DDDPb)
                       g$r$6345$DDDPb)))
                  (fx>=?
                    (string-compare g$a$6341$DDDPb g$x$6344$DDDPb)
                    '0)))))
            (cons g$b$6342$DDDPb g$rest$6343$DDDPb))))))
   (g$symbol=?$6165$DDDPb
     g$symbol=?$6474$DDDPb
     (case-lambda
       ((g$a$6346$DDDPb g$b$6347$DDDPb . g$rest$6348$DDDPb)
        (begin
          (if (not (g$symbol?$6078$DDDPb g$a$6346$DDDPb))
            (assertion-violation
              'symbol=?
              '"not a symbol"
              g$a$6346$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6349$DDDPb)
               (begin
                 (if (not (g$symbol?$6078$DDDPb g$x$6349$DDDPb))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$6349$DDDPb)
                   (void))
                 (eq? g$a$6346$DDDPb g$x$6349$DDDPb))))
            (cons g$b$6347$DDDPb g$rest$6348$DDDPb))))))
   (g$boolean=?$6166$DDDPb
     g$boolean=?$6475$DDDPb
     (case-lambda
       ((g$a$6350$DDDPb g$b$6351$DDDPb . g$rest$6352$DDDPb)
        (begin
          (if (not (g$boolean?$6079$DDDPb g$a$6350$DDDPb))
            (assertion-violation
              'boolean=?
              '"not a boolean"
              g$a$6350$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6353$DDDPb)
               (begin
                 (if (not (g$boolean?$6079$DDDPb g$x$6353$DDDPb))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$6353$DDDPb)
                   (void))
                 (eq? g$a$6350$DDDPb g$x$6353$DDDPb))))
            (cons g$b$6351$DDDPb g$rest$6352$DDDPb))))))
   (g$char=?$6204$DDDPb
     g$char=?$6476$DDDPb
     (case-lambda
       ((g$a$6354$DDDPb g$b$6355$DDDPb . g$rest$6356$DDDPb)
        (begin
          (if (not (g$char?$6075$DDDPb g$a$6354$DDDPb))
            (assertion-violation 'char=? '"not a char" g$a$6354$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6357$DDDPb)
               (begin
                 (if (not (g$char?$6075$DDDPb g$x$6357$DDDPb))
                   (assertion-violation
                     'char=?
                     '"not a char"
                     g$x$6357$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$6358$DDDPb)
                     (begin
                       (set! g$a$6354$DDDPb g$x$6357$DDDPb)
                       g$r$6358$DDDPb)))
                  (fx=?
                    (char->integer g$a$6354$DDDPb)
                    (char->integer g$x$6357$DDDPb))))))
            (cons g$b$6355$DDDPb g$rest$6356$DDDPb))))))
   (g$char<?$6205$DDDPb
     g$char<?$6477$DDDPb
     (case-lambda
       ((g$a$6359$DDDPb g$b$6360$DDDPb . g$rest$6361$DDDPb)
        (begin
          (if (not (g$char?$6075$DDDPb g$a$6359$DDDPb))
            (assertion-violation 'char<? '"not a char" g$a$6359$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6362$DDDPb)
               (begin
                 (if (not (g$char?$6075$DDDPb g$x$6362$DDDPb))
                   (assertion-violation
                     'char<?
                     '"not a char"
                     g$x$6362$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$6363$DDDPb)
                     (begin
                       (set! g$a$6359$DDDPb g$x$6362$DDDPb)
                       g$r$6363$DDDPb)))
                  (fx<?
                    (char->integer g$a$6359$DDDPb)
                    (char->integer g$x$6362$DDDPb))))))
            (cons g$b$6360$DDDPb g$rest$6361$DDDPb))))))
   (g$char>?$6206$DDDPb
     g$char>?$6478$DDDPb
     (case-lambda
       ((g$a$6364$DDDPb g$b$6365$DDDPb . g$rest$6366$DDDPb)
        (begin
          (if (not (g$char?$6075$DDDPb g$a$6364$DDDPb))
            (assertion-violation 'char>? '"not a char" g$a$6364$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6367$DDDPb)
               (begin
                 (if (not (g$char?$6075$DDDPb g$x$6367$DDDPb))
                   (assertion-violation
                     'char>?
                     '"not a char"
                     g$x$6367$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$6368$DDDPb)
                     (begin
                       (set! g$a$6364$DDDPb g$x$6367$DDDPb)
                       g$r$6368$DDDPb)))
                  (fx>?
                    (char->integer g$a$6364$DDDPb)
                    (char->integer g$x$6367$DDDPb))))))
            (cons g$b$6365$DDDPb g$rest$6366$DDDPb))))))
   (g$char<=?$6207$DDDPb
     g$char<=?$6479$DDDPb
     (case-lambda
       ((g$a$6369$DDDPb g$b$6370$DDDPb . g$rest$6371$DDDPb)
        (begin
          (if (not (g$char?$6075$DDDPb g$a$6369$DDDPb))
            (assertion-violation 'char<=? '"not a char" g$a$6369$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6372$DDDPb)
               (begin
                 (if (not (g$char?$6075$DDDPb g$x$6372$DDDPb))
                   (assertion-violation
                     'char<=?
                     '"not a char"
                     g$x$6372$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$6373$DDDPb)
                     (begin
                       (set! g$a$6369$DDDPb g$x$6372$DDDPb)
                       g$r$6373$DDDPb)))
                  (fx<=?
                    (char->integer g$a$6369$DDDPb)
                    (char->integer g$x$6372$DDDPb))))))
            (cons g$b$6370$DDDPb g$rest$6371$DDDPb))))))
   (g$char>=?$6208$DDDPb
     g$char>=?$6480$DDDPb
     (case-lambda
       ((g$a$6374$DDDPb g$b$6375$DDDPb . g$rest$6376$DDDPb)
        (begin
          (if (not (g$char?$6075$DDDPb g$a$6374$DDDPb))
            (assertion-violation 'char>=? '"not a char" g$a$6374$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$6377$DDDPb)
               (begin
                 (if (not (g$char?$6075$DDDPb g$x$6377$DDDPb))
                   (assertion-violation
                     'char>=?
                     '"not a char"
                     g$x$6377$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$6378$DDDPb)
                     (begin
                       (set! g$a$6374$DDDPb g$x$6377$DDDPb)
                       g$r$6378$DDDPb)))
                  (fx>=?
                    (char->integer g$a$6374$DDDPb)
                    (char->integer g$x$6377$DDDPb))))))
            (cons g$b$6375$DDDPb g$rest$6376$DDDPb))))))
   (g$rationalize$6209$DDDPb
     g$rationalize$6481$DDDPb
     (case-lambda
       ((g$x$6379$DDDPb g$e$6380$DDDPb)
        (if (if (infinite? g$x$6379$DDDPb)
              (begin '#f (infinite? g$e$6380$DDDPb))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$6381$DDDPb)
              (if (if (exact? g$x$6379$DDDPb)
                    (begin '#f (exact? g$e$6380$DDDPb))
                    '#f)
                g$r$6381$DDDPb
                (inexact g$r$6381$DDDPb))))
           (apply
             /
             (g$find-ratio$6210$DDDPb
               g$x$6379$DDDPb
               g$e$6380$DDDPb)))))))
   (g$find-ratio$6210$DDDPb
     g$find-ratio$6482$DDDPb
     (case-lambda
       ((g$x$6382$DDDPb g$e$6383$DDDPb)
        (g$find-ratio-between$6211$DDDPb
          (- g$x$6382$DDDPb g$e$6383$DDDPb)
          (+ g$x$6382$DDDPb g$e$6383$DDDPb)))))
   (g$find-ratio-between$6211$DDDPb
     g$find-ratio-between$6483$DDDPb
     (case-lambda
       ((g$x$6384$DDDPb g$y$6385$DDDPb)
        (letrec* ((g$sr$6386$DDDPb
                    (case-lambda
                      ((g$x$6388$DDDPb g$y$6389$DDDPb)
                       ((case-lambda
                          ((g$fx$6390$DDDPb g$fy$6391$DDDPb)
                           (if (>= g$fx$6390$DDDPb g$x$6388$DDDPb)
                             (list g$fx$6390$DDDPb '1)
                             (if (= g$fx$6390$DDDPb g$fy$6391$DDDPb)
                               ((case-lambda
                                  ((g$rat$6392$DDDPb)
                                   (list
                                     (+ (g$cadr$6087$DDDPb
                                          g$rat$6392$DDDPb)
                                        (* g$fx$6390$DDDPb
                                           (car g$rat$6392$DDDPb)))
                                     (car g$rat$6392$DDDPb))))
                                (g$sr$6386$DDDPb
                                  (/ (- g$y$6389$DDDPb g$fy$6391$DDDPb))
                                  (/ (- g$x$6388$DDDPb
                                        g$fx$6390$DDDPb))))
                               (list (+ '1 g$fx$6390$DDDPb) '1)))))
                        (exact (floor g$x$6388$DDDPb))
                        (exact (floor g$y$6389$DDDPb)))))))
          (if (< g$y$6385$DDDPb g$x$6384$DDDPb)
            (g$find-ratio-between$6211$DDDPb
              g$y$6385$DDDPb
              g$x$6384$DDDPb)
            (if (>= g$x$6384$DDDPb g$y$6385$DDDPb)
              (list g$x$6384$DDDPb '1)
              (if (g$positive?$6114$DDDPb g$x$6384$DDDPb)
                (g$sr$6386$DDDPb g$x$6384$DDDPb g$y$6385$DDDPb)
                (if (g$negative?$6115$DDDPb g$y$6385$DDDPb)
                  ((case-lambda
                     ((g$rat$6387$DDDPb)
                      (list
                        (- (car g$rat$6387$DDDPb))
                        (g$cadr$6087$DDDPb g$rat$6387$DDDPb))))
                   (g$sr$6386$DDDPb
                     (- g$y$6385$DDDPb)
                     (- g$x$6384$DDDPb)))
                  '(0 1)))))))))
   (g$vector-map$6212$DDDPb
     g$vector-map$6484$DDDPb
     (case-lambda
       ((g$p$6393$DDDPb g$vec1$6394$DDDPb . g$vecs$6395$DDDPb)
        ((case-lambda
           ((g$len$6396$DDDPb)
            ((case-lambda
               ((g$res$6397$DDDPb)
                (letrec ((g$loop$6398$DDDPb
                           (case-lambda
                             ((g$i$6399$DDDPb)
                              (if (fx=? g$i$6399$DDDPb g$len$6396$DDDPb)
                                (begin
                                  (if '#f '#f (void))
                                  g$res$6397$DDDPb)
                                (begin
                                  (vector-set!
                                    g$res$6397$DDDPb
                                    g$i$6399$DDDPb
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (apply
                                           values
                                           (g$map$5753$DDDPb
                                             (case-lambda
                                               ((g$x$6400$DDDPb)
                                                (vector-ref
                                                  g$x$6400$DDDPb
                                                  g$i$6399$DDDPb)))
                                             (cons
                                               g$vec1$6394$DDDPb
                                               g$vecs$6395$DDDPb)))))
                                      g$p$6393$DDDPb))
                                  (g$loop$6398$DDDPb
                                    (fx+ g$i$6399$DDDPb '1))))))))
                  (g$loop$6398$DDDPb '0))))
             (make-vector g$len$6396$DDDPb))))
         (vector-length g$vec1$6394$DDDPb)))))
   (g$vector-for-each$6213$DDDPb
     g$vector-for-each$6485$DDDPb
     (case-lambda
       ((g$p$6401$DDDPb g$vec1$6402$DDDPb . g$vecs$6403$DDDPb)
        ((case-lambda
           ((g$len$6404$DDDPb)
            (letrec ((g$loop$6405$DDDPb
                       (case-lambda
                         ((g$i$6406$DDDPb)
                          (if (fx=? g$i$6406$DDDPb g$len$6404$DDDPb)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$5753$DDDPb
                                       (case-lambda
                                         ((g$x$6407$DDDPb)
                                          (vector-ref
                                            g$x$6407$DDDPb
                                            g$i$6406$DDDPb)))
                                       (cons
                                         g$vec1$6402$DDDPb
                                         g$vecs$6403$DDDPb)))))
                                g$p$6401$DDDPb)
                              (g$loop$6405$DDDPb
                                (fx+ g$i$6406$DDDPb '1))))))))
              (g$loop$6405$DDDPb '0))))
         (vector-length g$vec1$6402$DDDPb)))))
   (g$string-for-each$6214$DDDPb
     g$string-for-each$6486$DDDPb
     (case-lambda
       ((g$p$6408$DDDPb g$str1$6409$DDDPb . g$strs$6410$DDDPb)
        ((case-lambda
           ((g$len$6411$DDDPb)
            (letrec ((g$loop$6412$DDDPb
                       (case-lambda
                         ((g$i$6413$DDDPb)
                          (if (fx=? g$i$6413$DDDPb g$len$6411$DDDPb)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$5753$DDDPb
                                       (case-lambda
                                         ((g$x$6414$DDDPb)
                                          (string-ref
                                            g$x$6414$DDDPb
                                            g$i$6413$DDDPb)))
                                       (cons
                                         g$str1$6409$DDDPb
                                         g$strs$6410$DDDPb)))))
                                g$p$6408$DDDPb)
                              (g$loop$6412$DDDPb
                                (fx+ g$i$6413$DDDPb '1))))))))
              (g$loop$6412$DDDPb '0))))
         (string-length g$str1$6409$DDDPb))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$6488$DDDPb g$using$6521$DDDPb (clr-using-internal 'system))
   (g$using$6490$DDDPb
     g$using$6522$DDDPb
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$6491$DDDPb
     g$make-eq-hashtable$6523$DDDPb
     (case-lambda
       (() (g$make-eq-hashtable$6491$DDDPb '32))
       ((g$k$6500$DDDPb)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$6500$DDDPb)))))
   (g$make-eqv-hashtable$6492$DDDPb
     g$make-eqv-hashtable$6524$DDDPb
     (case-lambda
       (() (g$make-eqv-hashtable$6492$DDDPb '32))
       ((g$k$6501$DDDPb)
        (make-hashtable eqv-hash eqv? g$k$6501$DDDPb))))
   (g$hashtable-size$6493$DDDPb
     g$hashtable-size$6525$DDDPb
     (case-lambda
       ((g$ht$6502$DDDPb)
        (clr-call-internal 'hashtable 'get_count g$ht$6502$DDDPb))))
   (g$hashtable-ref$6494$DDDPb
     g$hashtable-ref$6526$DDDPb
     (case-lambda
       ((g$ht$6503$DDDPb g$key$6504$DDDPb g$default$6505$DDDPb)
        (letrec* ((g$r$6506$DDDPb
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$6503$DDDPb
                      g$key$6504$DDDPb)))
          (if (not (null? g$r$6506$DDDPb))
            g$r$6506$DDDPb
            g$default$6505$DDDPb)))))
   (g$hashtable-set!$6495$DDDPb
     g$hashtable-set!$6527$DDDPb
     (case-lambda
       ((g$ht$6507$DDDPb g$key$6508$DDDPb g$obj$6509$DDDPb)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$6507$DDDPb
          g$key$6508$DDDPb
          g$obj$6509$DDDPb))))
   (g$hashtable-delete!$6496$DDDPb
     g$hashtable-delete!$6528$DDDPb
     (case-lambda
       ((g$ht$6510$DDDPb g$key$6511$DDDPb)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$6510$DDDPb
          g$key$6511$DDDPb))))
   (g$hashtable-contains?$6497$DDDPb
     g$hashtable-contains?$6529$DDDPb
     (case-lambda
       ((g$ht$6512$DDDPb g$key$6513$DDDPb)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$6512$DDDPb
          g$key$6513$DDDPb))))
   (g$hashtable-update!$6498$DDDPb
     g$hashtable-update!$6530$DDDPb
     (case-lambda
       ((g$ht$6514$DDDPb
          g$key$6515$DDDPb
          g$proc$6516$DDDPb
          g$default$6517$DDDPb)
        (g$hashtable-set!$6495$DDDPb
          g$ht$6514$DDDPb
          g$key$6515$DDDPb
          (g$proc$6516$DDDPb
            (g$hashtable-ref$6494$DDDPb
              g$ht$6514$DDDPb
              g$key$6515$DDDPb
              g$default$6517$DDDPb))))))
   (g$hashtable-clear!$6499$DDDPb
     g$hashtable-clear!$6531$DDDPb
     (case-lambda
       ((g$ht$6518$DDDPb)
        (g$hashtable-clear!$6499$DDDPb g$ht$6518$DDDPb '32))
       ((g$ht$6519$DDDPb g$k$6520$DDDPb)
        (clr-call-internal 'hashtable 'clear g$ht$6519$DDDPb)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$6533$DDDPb
     g$using$6540$DDDPb
     (clr-using-internal 'system.io))
   (g$file-exists?$6534$DDDPb
     g$file-exists?$6541$DDDPb
     (case-lambda
       ((g$fn$6537$DDDPb)
        (clr-call-internal 'file 'exists '() g$fn$6537$DDDPb))))
   (g$delete-file$6535$DDDPb
     g$delete-file$6542$DDDPb
     (case-lambda
       ((g$fn$6538$DDDPb)
        (clr-call-internal 'file 'delete '() g$fn$6538$DDDPb))))
   (g$get-directory-name$6536$DDDPb
     g$get-directory-name$6543$DDDPb
     (case-lambda
       ((g$path$6539$DDDPb)
        (clr-call-internal
          'path
          'getdirectoryname
          '()
          g$path$6539$DDDPb)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$6544$DDDPb
     g$native-endianness$6655$DDDPb
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$6545$DDDPb
     g$bytevector-u16-ref$6656$DDDPb
     (case-lambda
       ((g$bytevector$6573$DDDPb g$k$6574$DDDPb g$endianness$6575$DDDPb)
        (bytevector-uint-ref
          g$bytevector$6573$DDDPb
          g$k$6574$DDDPb
          g$endianness$6575$DDDPb
          '2))))
   (g$bytevector-s16-ref$6546$DDDPb
     g$bytevector-s16-ref$6657$DDDPb
     (case-lambda
       ((g$bytevector$6576$DDDPb g$k$6577$DDDPb g$endianness$6578$DDDPb)
        (bytevector-sint-ref
          g$bytevector$6576$DDDPb
          g$k$6577$DDDPb
          g$endianness$6578$DDDPb
          '2))))
   (g$bytevector-u16-native-ref$6547$DDDPb
     g$bytevector-u16-native-ref$6658$DDDPb
     (case-lambda
       ((g$bytevector$6579$DDDPb g$k$6580$DDDPb)
        (bytevector-uint-ref
          g$bytevector$6579$DDDPb
          g$k$6580$DDDPb
          (g$native-endianness$6544$DDDPb)
          '2))))
   (g$bytevector-s16-native-ref$6548$DDDPb
     g$bytevector-s16-native-ref$6659$DDDPb
     (case-lambda
       ((g$bytevector$6581$DDDPb g$k$6582$DDDPb)
        (bytevector-sint-ref
          g$bytevector$6581$DDDPb
          g$k$6582$DDDPb
          (g$native-endianness$6544$DDDPb)
          '2))))
   (g$bytevector-u16-set!$6549$DDDPb
     g$bytevector-u16-set!$6660$DDDPb
     (case-lambda
       ((g$bytevector$6583$DDDPb
          g$k$6584$DDDPb
          g$n$6585$DDDPb
          g$endianness$6586$DDDPb)
        (bytevector-uint-set!
          g$bytevector$6583$DDDPb
          g$k$6584$DDDPb
          g$n$6585$DDDPb
          g$endianness$6586$DDDPb
          '2))))
   (g$bytevector-s16-set!$6550$DDDPb
     g$bytevector-s16-set!$6661$DDDPb
     (case-lambda
       ((g$bytevector$6587$DDDPb
          g$k$6588$DDDPb
          g$n$6589$DDDPb
          g$endianness$6590$DDDPb)
        (bytevector-sint-set!
          g$bytevector$6587$DDDPb
          g$k$6588$DDDPb
          g$n$6589$DDDPb
          g$endianness$6590$DDDPb
          '2))))
   (g$bytevector-u16-native-set!$6551$DDDPb
     g$bytevector-u16-native-set!$6662$DDDPb
     (case-lambda
       ((g$bytevector$6591$DDDPb g$k$6592$DDDPb g$n$6593$DDDPb)
        (bytevector-uint-set!
          g$bytevector$6591$DDDPb
          g$k$6592$DDDPb
          g$n$6593$DDDPb
          (g$native-endianness$6544$DDDPb)
          '2))))
   (g$bytevector-s16-native-set!$6552$DDDPb
     g$bytevector-s16-native-set!$6663$DDDPb
     (case-lambda
       ((g$bytevector$6594$DDDPb g$k$6595$DDDPb g$n$6596$DDDPb)
        (bytevector-sint-set!
          g$bytevector$6594$DDDPb
          g$k$6595$DDDPb
          g$n$6596$DDDPb
          (g$native-endianness$6544$DDDPb)
          '2))))
   (g$bytevector-u32-ref$6553$DDDPb
     g$bytevector-u32-ref$6664$DDDPb
     (case-lambda
       ((g$bytevector$6597$DDDPb g$k$6598$DDDPb g$endianness$6599$DDDPb)
        (bytevector-uint-ref
          g$bytevector$6597$DDDPb
          g$k$6598$DDDPb
          g$endianness$6599$DDDPb
          '4))))
   (g$bytevector-s32-ref$6554$DDDPb
     g$bytevector-s32-ref$6665$DDDPb
     (case-lambda
       ((g$bytevector$6600$DDDPb g$k$6601$DDDPb g$endianness$6602$DDDPb)
        (bytevector-sint-ref
          g$bytevector$6600$DDDPb
          g$k$6601$DDDPb
          g$endianness$6602$DDDPb
          '4))))
   (g$bytevector-u32-native-ref$6555$DDDPb
     g$bytevector-u32-native-ref$6666$DDDPb
     (case-lambda
       ((g$bytevector$6603$DDDPb g$k$6604$DDDPb)
        (bytevector-uint-ref
          g$bytevector$6603$DDDPb
          g$k$6604$DDDPb
          (g$native-endianness$6544$DDDPb)
          '4))))
   (g$bytevector-s32-native-ref$6556$DDDPb
     g$bytevector-s32-native-ref$6667$DDDPb
     (case-lambda
       ((g$bytevector$6605$DDDPb g$k$6606$DDDPb)
        (bytevector-sint-ref
          g$bytevector$6605$DDDPb
          g$k$6606$DDDPb
          (g$native-endianness$6544$DDDPb)
          '4))))
   (g$bytevector-u32-set!$6557$DDDPb
     g$bytevector-u32-set!$6668$DDDPb
     (case-lambda
       ((g$bytevector$6607$DDDPb
          g$k$6608$DDDPb
          g$n$6609$DDDPb
          g$endianness$6610$DDDPb)
        (bytevector-uint-set!
          g$bytevector$6607$DDDPb
          g$k$6608$DDDPb
          g$n$6609$DDDPb
          g$endianness$6610$DDDPb
          '4))))
   (g$bytevector-s32-set!$6558$DDDPb
     g$bytevector-s32-set!$6669$DDDPb
     (case-lambda
       ((g$bytevector$6611$DDDPb
          g$k$6612$DDDPb
          g$n$6613$DDDPb
          g$endianness$6614$DDDPb)
        (bytevector-sint-set!
          g$bytevector$6611$DDDPb
          g$k$6612$DDDPb
          g$n$6613$DDDPb
          g$endianness$6614$DDDPb
          '4))))
   (g$bytevector-u32-native-set!$6559$DDDPb
     g$bytevector-u32-native-set!$6670$DDDPb
     (case-lambda
       ((g$bytevector$6615$DDDPb g$k$6616$DDDPb g$n$6617$DDDPb)
        (bytevector-uint-set!
          g$bytevector$6615$DDDPb
          g$k$6616$DDDPb
          g$n$6617$DDDPb
          (g$native-endianness$6544$DDDPb)
          '4))))
   (g$bytevector-s32-native-set!$6560$DDDPb
     g$bytevector-s32-native-set!$6671$DDDPb
     (case-lambda
       ((g$bytevector$6618$DDDPb g$k$6619$DDDPb g$n$6620$DDDPb)
        (bytevector-sint-set!
          g$bytevector$6618$DDDPb
          g$k$6619$DDDPb
          g$n$6620$DDDPb
          (g$native-endianness$6544$DDDPb)
          '4))))
   (g$bytevector-u64-ref$6561$DDDPb
     g$bytevector-u64-ref$6672$DDDPb
     (case-lambda
       ((g$bytevector$6621$DDDPb g$k$6622$DDDPb g$endianness$6623$DDDPb)
        (bytevector-uint-ref
          g$bytevector$6621$DDDPb
          g$k$6622$DDDPb
          g$endianness$6623$DDDPb
          '8))))
   (g$bytevector-s64-ref$6562$DDDPb
     g$bytevector-s64-ref$6673$DDDPb
     (case-lambda
       ((g$bytevector$6624$DDDPb g$k$6625$DDDPb g$endianness$6626$DDDPb)
        (bytevector-sint-ref
          g$bytevector$6624$DDDPb
          g$k$6625$DDDPb
          g$endianness$6626$DDDPb
          '8))))
   (g$bytevector-u64-native-ref$6563$DDDPb
     g$bytevector-u64-native-ref$6674$DDDPb
     (case-lambda
       ((g$bytevector$6627$DDDPb g$k$6628$DDDPb)
        (bytevector-uint-ref
          g$bytevector$6627$DDDPb
          g$k$6628$DDDPb
          (g$native-endianness$6544$DDDPb)
          '8))))
   (g$bytevector-s64-native-ref$6564$DDDPb
     g$bytevector-s64-native-ref$6675$DDDPb
     (case-lambda
       ((g$bytevector$6629$DDDPb g$k$6630$DDDPb)
        (bytevector-sint-ref
          g$bytevector$6629$DDDPb
          g$k$6630$DDDPb
          (g$native-endianness$6544$DDDPb)
          '8))))
   (g$bytevector-u64-set!$6565$DDDPb
     g$bytevector-u64-set!$6676$DDDPb
     (case-lambda
       ((g$bytevector$6631$DDDPb
          g$k$6632$DDDPb
          g$n$6633$DDDPb
          g$endianness$6634$DDDPb)
        (bytevector-uint-set!
          g$bytevector$6631$DDDPb
          g$k$6632$DDDPb
          g$n$6633$DDDPb
          g$endianness$6634$DDDPb
          '8))))
   (g$bytevector-s64-set!$6566$DDDPb
     g$bytevector-s64-set!$6677$DDDPb
     (case-lambda
       ((g$bytevector$6635$DDDPb
          g$k$6636$DDDPb
          g$n$6637$DDDPb
          g$endianness$6638$DDDPb)
        (bytevector-sint-set!
          g$bytevector$6635$DDDPb
          g$k$6636$DDDPb
          g$n$6637$DDDPb
          g$endianness$6638$DDDPb
          '8))))
   (g$bytevector-u64-native-set!$6567$DDDPb
     g$bytevector-u64-native-set!$6678$DDDPb
     (case-lambda
       ((g$bytevector$6639$DDDPb g$k$6640$DDDPb g$n$6641$DDDPb)
        (bytevector-uint-set!
          g$bytevector$6639$DDDPb
          g$k$6640$DDDPb
          g$n$6641$DDDPb
          (g$native-endianness$6544$DDDPb)
          '8))))
   (g$bytevector-s64-native-set!$6568$DDDPb
     g$bytevector-s64-native-set!$6679$DDDPb
     (case-lambda
       ((g$bytevector$6642$DDDPb g$k$6643$DDDPb g$n$6644$DDDPb)
        (bytevector-sint-set!
          g$bytevector$6642$DDDPb
          g$k$6643$DDDPb
          g$n$6644$DDDPb
          (g$native-endianness$6544$DDDPb)
          '8))))
   (g$bytevector-ieee-single-native-ref$6569$DDDPb
     g$bytevector-ieee-single-native-ref$6680$DDDPb
     (case-lambda
       ((g$bytevector$6645$DDDPb g$k$6646$DDDPb)
        (if (not (g$zero?$6462$DDDPb
                   (g$mod$6417$DDDPb g$k$6646$DDDPb '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$6646$DDDPb)
          (bytevector-ieee-single-ref
            g$bytevector$6645$DDDPb
            g$k$6646$DDDPb
            (g$native-endianness$6544$DDDPb))))))
   (g$bytevector-ieee-double-native-ref$6570$DDDPb
     g$bytevector-ieee-double-native-ref$6681$DDDPb
     (case-lambda
       ((g$bytevector$6647$DDDPb g$k$6648$DDDPb)
        (if (not (g$zero?$6462$DDDPb
                   (g$mod$6417$DDDPb g$k$6648$DDDPb '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$6648$DDDPb)
          (bytevector-ieee-double-ref
            g$bytevector$6647$DDDPb
            g$k$6648$DDDPb
            (g$native-endianness$6544$DDDPb))))))
   (g$bytevector-ieee-single-native-set!$6571$DDDPb
     g$bytevector-ieee-single-native-set!$6682$DDDPb
     (case-lambda
       ((g$bytevector$6649$DDDPb g$k$6650$DDDPb g$x$6651$DDDPb)
        (if (not (g$zero?$6462$DDDPb
                   (g$mod$6417$DDDPb g$k$6650$DDDPb '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$6650$DDDPb)
          (bytevector-ieee-single-set!
            g$bytevector$6649$DDDPb
            g$k$6650$DDDPb
            g$x$6651$DDDPb
            (g$native-endianness$6544$DDDPb))))))
   (g$bytevector-ieee-double-native-set!$6572$DDDPb
     g$bytevector-ieee-double-native-set!$6683$DDDPb
     (case-lambda
       ((g$bytevector$6652$DDDPb g$k$6653$DDDPb g$x$6654$DDDPb)
        (if (not (g$zero?$6462$DDDPb
                   (g$mod$6417$DDDPb g$k$6653$DDDPb '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$6653$DDDPb)
          (bytevector-ieee-double-set!
            g$bytevector$6652$DDDPb
            g$k$6653$DDDPb
            g$x$6654$DDDPb
            (g$native-endianness$6544$DDDPb)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$5788$6684$DDDPb
     g$5788$7062$DDDPb
     (make-record-type-descriptor
       '&condition
       '#f
       'g$5791$DDDPb
       '#f
       '#f
       '#()))
   (g$5790$6685$DDDPb g$5790$7063$DDDPb '#f)
   (g$5789$6686$DDDPb
     g$5789$7064$DDDPb
     (make-record-constructor-descriptor
       g$5788$6684$DDDPb
       '#f
       g$5790$6685$DDDPb))
   (g$&condition?$6689$DDDPb
     g$&condition?$7065$DDDPb
     (record-predicate g$5788$6684$DDDPb))
   (g$make-&condition$6690$DDDPb
     g$make-&condition$7066$DDDPb
     (record-constructor g$5789$6686$DDDPb))
   (g$&condition-rtd$6691$DDDPb
     g$&condition-rtd$7067$DDDPb
     g$5788$6684$DDDPb)
   (g$&condition-rcd$6692$DDDPb
     g$&condition-rcd$7068$DDDPb
     g$5789$6686$DDDPb)
   (g$5825$6766$DDDPb
     g$5825$7069$DDDPb
     (make-record-type-descriptor
       '&message
       g$5788$6684$DDDPb
       'g$5828$DDDPb
       '#f
       '#f
       '#((immutable message))))
   (g$5827$6767$DDDPb g$5827$7070$DDDPb '#f)
   (g$5826$6768$DDDPb
     g$5826$7071$DDDPb
     (make-record-constructor-descriptor
       g$5825$6766$DDDPb
       g$5789$6686$DDDPb
       g$5827$6767$DDDPb))
   (g$p?$6771$DDDPb
     g$p?$7072$DDDPb
     (record-predicate g$5825$6766$DDDPb))
   (g$make-message-condition$6772$DDDPb
     g$make-message-condition$7073$DDDPb
     (record-constructor g$5826$6768$DDDPb))
   (g$condition-message$6773$DDDPb
     g$condition-message$7074$DDDPb
     (record-accessor g$5825$6766$DDDPb '0))
   (g$message-condition?$6774$DDDPb
     g$message-condition?$7075$DDDPb
     (condition-predicate g$5825$6766$DDDPb))
   (g$condition-message$6775$DDDPb
     g$condition-message$7076$DDDPb
     (condition-accessor
       g$5825$6766$DDDPb
       g$condition-message$6773$DDDPb))
   (g$&message-rtd$6776$DDDPb
     g$&message-rtd$7077$DDDPb
     g$5825$6766$DDDPb)
   (g$&message-rcd$6777$DDDPb
     g$&message-rcd$7078$DDDPb
     g$5826$6768$DDDPb)
   (g$5840$6778$DDDPb
     g$5840$7079$DDDPb
     (make-record-type-descriptor
       '&warning
       g$5788$6684$DDDPb
       'g$5843$DDDPb
       '#f
       '#f
       '#()))
   (g$5842$6779$DDDPb g$5842$7080$DDDPb '#f)
   (g$5841$6780$DDDPb
     g$5841$7081$DDDPb
     (make-record-constructor-descriptor
       g$5840$6778$DDDPb
       g$5789$6686$DDDPb
       g$5842$6779$DDDPb))
   (g$p?$6783$DDDPb
     g$p?$7082$DDDPb
     (record-predicate g$5840$6778$DDDPb))
   (g$make-warning$6784$DDDPb
     g$make-warning$7083$DDDPb
     (record-constructor g$5841$6780$DDDPb))
   (g$warning?$6785$DDDPb
     g$warning?$7084$DDDPb
     (condition-predicate g$5840$6778$DDDPb))
   (g$&warning-rtd$6786$DDDPb
     g$&warning-rtd$7085$DDDPb
     g$5840$6778$DDDPb)
   (g$&warning-rcd$6787$DDDPb
     g$&warning-rcd$7086$DDDPb
     g$5841$6780$DDDPb)
   (g$5853$6788$DDDPb
     g$5853$7087$DDDPb
     (make-record-type-descriptor
       '&serious
       g$5788$6684$DDDPb
       'g$5856$DDDPb
       '#f
       '#f
       '#()))
   (g$5855$6789$DDDPb g$5855$7088$DDDPb '#f)
   (g$5854$6790$DDDPb
     g$5854$7089$DDDPb
     (make-record-constructor-descriptor
       g$5853$6788$DDDPb
       g$5789$6686$DDDPb
       g$5855$6789$DDDPb))
   (g$p?$6793$DDDPb
     g$p?$7090$DDDPb
     (record-predicate g$5853$6788$DDDPb))
   (g$make-serious-condition$6794$DDDPb
     g$make-serious-condition$7091$DDDPb
     (record-constructor g$5854$6790$DDDPb))
   (g$serious-condition?$6795$DDDPb
     g$serious-condition?$7092$DDDPb
     (condition-predicate g$5853$6788$DDDPb))
   (g$&serious-rtd$6796$DDDPb
     g$&serious-rtd$7093$DDDPb
     g$5853$6788$DDDPb)
   (g$&serious-rcd$6797$DDDPb
     g$&serious-rcd$7094$DDDPb
     g$5854$6790$DDDPb)
   (g$5866$6798$DDDPb
     g$5866$7095$DDDPb
     (make-record-type-descriptor
       '&error
       g$5853$6788$DDDPb
       'g$5869$DDDPb
       '#f
       '#f
       '#()))
   (g$5868$6799$DDDPb g$5868$7096$DDDPb '#f)
   (g$5867$6800$DDDPb
     g$5867$7097$DDDPb
     (make-record-constructor-descriptor
       g$5866$6798$DDDPb
       g$5854$6790$DDDPb
       g$5868$6799$DDDPb))
   (g$p?$6803$DDDPb
     g$p?$7098$DDDPb
     (record-predicate g$5866$6798$DDDPb))
   (g$make-error$6804$DDDPb
     g$make-error$7099$DDDPb
     (record-constructor g$5867$6800$DDDPb))
   (g$error?$6805$DDDPb
     g$error?$7100$DDDPb
     (condition-predicate g$5866$6798$DDDPb))
   (g$&error-rtd$6806$DDDPb g$&error-rtd$7101$DDDPb g$5866$6798$DDDPb)
   (g$&error-rcd$6807$DDDPb g$&error-rcd$7102$DDDPb g$5867$6800$DDDPb)
   (g$5879$6808$DDDPb
     g$5879$7103$DDDPb
     (make-record-type-descriptor
       '&violation
       g$5853$6788$DDDPb
       'g$5882$DDDPb
       '#f
       '#f
       '#()))
   (g$5881$6809$DDDPb g$5881$7104$DDDPb '#f)
   (g$5880$6810$DDDPb
     g$5880$7105$DDDPb
     (make-record-constructor-descriptor
       g$5879$6808$DDDPb
       g$5854$6790$DDDPb
       g$5881$6809$DDDPb))
   (g$p?$6813$DDDPb
     g$p?$7106$DDDPb
     (record-predicate g$5879$6808$DDDPb))
   (g$make-violation$6814$DDDPb
     g$make-violation$7107$DDDPb
     (record-constructor g$5880$6810$DDDPb))
   (g$violation?$6815$DDDPb
     g$violation?$7108$DDDPb
     (condition-predicate g$5879$6808$DDDPb))
   (g$&violation-rtd$6816$DDDPb
     g$&violation-rtd$7109$DDDPb
     g$5879$6808$DDDPb)
   (g$&violation-rcd$6817$DDDPb
     g$&violation-rcd$7110$DDDPb
     g$5880$6810$DDDPb)
   (g$5892$6818$DDDPb
     g$5892$7111$DDDPb
     (make-record-type-descriptor
       '&assertion
       g$5879$6808$DDDPb
       'g$5895$DDDPb
       '#f
       '#f
       '#()))
   (g$5894$6819$DDDPb g$5894$7112$DDDPb '#f)
   (g$5893$6820$DDDPb
     g$5893$7113$DDDPb
     (make-record-constructor-descriptor
       g$5892$6818$DDDPb
       g$5880$6810$DDDPb
       g$5894$6819$DDDPb))
   (g$p?$6823$DDDPb
     g$p?$7114$DDDPb
     (record-predicate g$5892$6818$DDDPb))
   (g$make-assertion-violation$6824$DDDPb
     g$make-assertion-violation$7115$DDDPb
     (record-constructor g$5893$6820$DDDPb))
   (g$assertion-violation?$6825$DDDPb
     g$assertion-violation?$7116$DDDPb
     (condition-predicate g$5892$6818$DDDPb))
   (g$&assertion-rtd$6826$DDDPb
     g$&assertion-rtd$7117$DDDPb
     g$5892$6818$DDDPb)
   (g$&assertion-rcd$6827$DDDPb
     g$&assertion-rcd$7118$DDDPb
     g$5893$6820$DDDPb)
   (g$5905$6829$DDDPb
     g$5905$7119$DDDPb
     (make-record-type-descriptor
       '&irritants
       g$5788$6684$DDDPb
       'g$5908$DDDPb
       '#f
       '#f
       '#((immutable irritants))))
   (g$5907$6830$DDDPb g$5907$7120$DDDPb '#f)
   (g$5906$6831$DDDPb
     g$5906$7121$DDDPb
     (make-record-constructor-descriptor
       g$5905$6829$DDDPb
       g$5789$6686$DDDPb
       g$5907$6830$DDDPb))
   (g$p?$6834$DDDPb
     g$p?$7122$DDDPb
     (record-predicate g$5905$6829$DDDPb))
   (g$make-irritants-condition$6835$DDDPb
     g$make-irritants-condition$7123$DDDPb
     (record-constructor g$5906$6831$DDDPb))
   (g$condition-irritants$6836$DDDPb
     g$condition-irritants$7124$DDDPb
     (record-accessor g$5905$6829$DDDPb '0))
   (g$irritants-condition?$6837$DDDPb
     g$irritants-condition?$7125$DDDPb
     (condition-predicate g$5905$6829$DDDPb))
   (g$condition-irritants$6838$DDDPb
     g$condition-irritants$7126$DDDPb
     (condition-accessor
       g$5905$6829$DDDPb
       g$condition-irritants$6836$DDDPb))
   (g$&irritants-rtd$6839$DDDPb
     g$&irritants-rtd$7127$DDDPb
     g$5905$6829$DDDPb)
   (g$&irritants-rcd$6840$DDDPb
     g$&irritants-rcd$7128$DDDPb
     g$5906$6831$DDDPb)
   (g$5920$6842$DDDPb
     g$5920$7129$DDDPb
     (make-record-type-descriptor
       '&who
       g$5788$6684$DDDPb
       'g$5923$DDDPb
       '#f
       '#f
       '#((immutable who))))
   (g$5922$6843$DDDPb g$5922$7130$DDDPb '#f)
   (g$5921$6844$DDDPb
     g$5921$7131$DDDPb
     (make-record-constructor-descriptor
       g$5920$6842$DDDPb
       g$5789$6686$DDDPb
       g$5922$6843$DDDPb))
   (g$p?$6847$DDDPb
     g$p?$7132$DDDPb
     (record-predicate g$5920$6842$DDDPb))
   (g$make-who-condition$6848$DDDPb
     g$make-who-condition$7133$DDDPb
     (record-constructor g$5921$6844$DDDPb))
   (g$condition-who$6849$DDDPb
     g$condition-who$7134$DDDPb
     (record-accessor g$5920$6842$DDDPb '0))
   (g$who-condition?$6850$DDDPb
     g$who-condition?$7135$DDDPb
     (condition-predicate g$5920$6842$DDDPb))
   (g$condition-who$6851$DDDPb
     g$condition-who$7136$DDDPb
     (condition-accessor g$5920$6842$DDDPb g$condition-who$6849$DDDPb))
   (g$&who-rtd$6852$DDDPb g$&who-rtd$7137$DDDPb g$5920$6842$DDDPb)
   (g$&who-rcd$6853$DDDPb g$&who-rcd$7138$DDDPb g$5921$6844$DDDPb)
   (g$5935$6854$DDDPb
     g$5935$7139$DDDPb
     (make-record-type-descriptor
       '&non-continuable
       g$5879$6808$DDDPb
       'g$5938$DDDPb
       '#f
       '#f
       '#()))
   (g$5937$6855$DDDPb g$5937$7140$DDDPb '#f)
   (g$5936$6856$DDDPb
     g$5936$7141$DDDPb
     (make-record-constructor-descriptor
       g$5935$6854$DDDPb
       g$5880$6810$DDDPb
       g$5937$6855$DDDPb))
   (g$p?$6859$DDDPb
     g$p?$7142$DDDPb
     (record-predicate g$5935$6854$DDDPb))
   (g$make-non-continuable-violation$6860$DDDPb
     g$make-non-continuable-violation$7143$DDDPb
     (record-constructor g$5936$6856$DDDPb))
   (g$non-continuable-violation?$6861$DDDPb
     g$non-continuable-violation?$7144$DDDPb
     (condition-predicate g$5935$6854$DDDPb))
   (g$&non-continuable-rtd$6862$DDDPb
     g$&non-continuable-rtd$7145$DDDPb
     g$5935$6854$DDDPb)
   (g$&non-continuable-rcd$6863$DDDPb
     g$&non-continuable-rcd$7146$DDDPb
     g$5936$6856$DDDPb)
   (g$5948$6864$DDDPb
     g$5948$7147$DDDPb
     (make-record-type-descriptor
       '&implementation-restriction
       g$5879$6808$DDDPb
       'g$5951$DDDPb
       '#f
       '#f
       '#()))
   (g$5950$6865$DDDPb g$5950$7148$DDDPb '#f)
   (g$5949$6866$DDDPb
     g$5949$7149$DDDPb
     (make-record-constructor-descriptor
       g$5948$6864$DDDPb
       g$5880$6810$DDDPb
       g$5950$6865$DDDPb))
   (g$p?$6869$DDDPb
     g$p?$7150$DDDPb
     (record-predicate g$5948$6864$DDDPb))
   (g$make-implementation-restriction-violation$6870$DDDPb
     g$make-implementation-restriction-violation$7151$DDDPb
     (record-constructor g$5949$6866$DDDPb))
   (g$implementation-restriction-violation?$6871$DDDPb
     g$implementation-restriction-violation?$7152$DDDPb
     (condition-predicate g$5948$6864$DDDPb))
   (g$&implementation-restriction-rtd$6872$DDDPb
     g$&implementation-restriction-rtd$7153$DDDPb
     g$5948$6864$DDDPb)
   (g$&implementation-restriction-rcd$6873$DDDPb
     g$&implementation-restriction-rcd$7154$DDDPb
     g$5949$6866$DDDPb)
   (g$5961$6874$DDDPb
     g$5961$7155$DDDPb
     (make-record-type-descriptor
       '&lexical
       g$5879$6808$DDDPb
       'g$5964$DDDPb
       '#f
       '#f
       '#()))
   (g$5963$6875$DDDPb g$5963$7156$DDDPb '#f)
   (g$5962$6876$DDDPb
     g$5962$7157$DDDPb
     (make-record-constructor-descriptor
       g$5961$6874$DDDPb
       g$5880$6810$DDDPb
       g$5963$6875$DDDPb))
   (g$p?$6879$DDDPb
     g$p?$7158$DDDPb
     (record-predicate g$5961$6874$DDDPb))
   (g$make-lexical-violation$6880$DDDPb
     g$make-lexical-violation$7159$DDDPb
     (record-constructor g$5962$6876$DDDPb))
   (g$lexical-violation?$6881$DDDPb
     g$lexical-violation?$7160$DDDPb
     (condition-predicate g$5961$6874$DDDPb))
   (g$&lexical-rtd$6882$DDDPb
     g$&lexical-rtd$7161$DDDPb
     g$5961$6874$DDDPb)
   (g$&lexical-rcd$6883$DDDPb
     g$&lexical-rcd$7162$DDDPb
     g$5962$6876$DDDPb)
   (g$5974$6886$DDDPb
     g$5974$7163$DDDPb
     (make-record-type-descriptor
       '&syntax
       g$5879$6808$DDDPb
       'g$5977$DDDPb
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$5976$6887$DDDPb g$5976$7164$DDDPb '#f)
   (g$5975$6888$DDDPb
     g$5975$7165$DDDPb
     (make-record-constructor-descriptor
       g$5974$6886$DDDPb
       g$5880$6810$DDDPb
       g$5976$6887$DDDPb))
   (g$p?$6891$DDDPb
     g$p?$7166$DDDPb
     (record-predicate g$5974$6886$DDDPb))
   (g$make-syntax-violation$6892$DDDPb
     g$make-syntax-violation$7167$DDDPb
     (record-constructor g$5975$6888$DDDPb))
   (g$syntax-violation-form$6893$DDDPb
     g$syntax-violation-form$7168$DDDPb
     (record-accessor g$5974$6886$DDDPb '0))
   (g$syntax-violation-subform$6894$DDDPb
     g$syntax-violation-subform$7169$DDDPb
     (record-accessor g$5974$6886$DDDPb '1))
   (g$syntax-violation?$6895$DDDPb
     g$syntax-violation?$7170$DDDPb
     (condition-predicate g$5974$6886$DDDPb))
   (g$syntax-violation-form$6896$DDDPb
     g$syntax-violation-form$7171$DDDPb
     (condition-accessor
       g$5974$6886$DDDPb
       g$syntax-violation-form$6893$DDDPb))
   (g$syntax-violation-subform$6897$DDDPb
     g$syntax-violation-subform$7172$DDDPb
     (condition-accessor
       g$5974$6886$DDDPb
       g$syntax-violation-subform$6894$DDDPb))
   (g$&syntax-rtd$6898$DDDPb g$&syntax-rtd$7173$DDDPb g$5974$6886$DDDPb)
   (g$&syntax-rcd$6899$DDDPb g$&syntax-rcd$7174$DDDPb g$5975$6888$DDDPb)
   (g$5991$6900$DDDPb
     g$5991$7175$DDDPb
     (make-record-type-descriptor
       '&undefined
       g$5879$6808$DDDPb
       'g$5994$DDDPb
       '#f
       '#f
       '#()))
   (g$5993$6901$DDDPb g$5993$7176$DDDPb '#f)
   (g$5992$6902$DDDPb
     g$5992$7177$DDDPb
     (make-record-constructor-descriptor
       g$5991$6900$DDDPb
       g$5880$6810$DDDPb
       g$5993$6901$DDDPb))
   (g$p?$6905$DDDPb
     g$p?$7178$DDDPb
     (record-predicate g$5991$6900$DDDPb))
   (g$make-undefined-violation$6906$DDDPb
     g$make-undefined-violation$7179$DDDPb
     (record-constructor g$5992$6902$DDDPb))
   (g$undefined-violation?$6907$DDDPb
     g$undefined-violation?$7180$DDDPb
     (condition-predicate g$5991$6900$DDDPb))
   (g$&undefined-rtd$6908$DDDPb
     g$&undefined-rtd$7181$DDDPb
     g$5991$6900$DDDPb)
   (g$&undefined-rcd$6909$DDDPb
     g$&undefined-rcd$7182$DDDPb
     g$5992$6902$DDDPb)
   (g$6004$6910$DDDPb
     g$6004$7183$DDDPb
     (make-record-type-descriptor
       '&i/o
       g$5866$6798$DDDPb
       'g$6007$DDDPb
       '#f
       '#f
       '#()))
   (g$6006$6911$DDDPb g$6006$7184$DDDPb '#f)
   (g$6005$6912$DDDPb
     g$6005$7185$DDDPb
     (make-record-constructor-descriptor
       g$6004$6910$DDDPb
       g$5867$6800$DDDPb
       g$6006$6911$DDDPb))
   (g$p?$6915$DDDPb
     g$p?$7186$DDDPb
     (record-predicate g$6004$6910$DDDPb))
   (g$make-i/o-error$6916$DDDPb
     g$make-i/o-error$7187$DDDPb
     (record-constructor g$6005$6912$DDDPb))
   (g$i/o-error?$6917$DDDPb
     g$i/o-error?$7188$DDDPb
     (condition-predicate g$6004$6910$DDDPb))
   (g$&i/o-rtd$6918$DDDPb g$&i/o-rtd$7189$DDDPb g$6004$6910$DDDPb)
   (g$&i/o-rcd$6919$DDDPb g$&i/o-rcd$7190$DDDPb g$6005$6912$DDDPb)
   (g$6017$6920$DDDPb
     g$6017$7191$DDDPb
     (make-record-type-descriptor
       '&i/o-read
       g$6004$6910$DDDPb
       'g$6020$DDDPb
       '#f
       '#f
       '#()))
   (g$6019$6921$DDDPb g$6019$7192$DDDPb '#f)
   (g$6018$6922$DDDPb
     g$6018$7193$DDDPb
     (make-record-constructor-descriptor
       g$6017$6920$DDDPb
       g$6005$6912$DDDPb
       g$6019$6921$DDDPb))
   (g$p?$6925$DDDPb
     g$p?$7194$DDDPb
     (record-predicate g$6017$6920$DDDPb))
   (g$make-i/o-read-error$6926$DDDPb
     g$make-i/o-read-error$7195$DDDPb
     (record-constructor g$6018$6922$DDDPb))
   (g$i/o-read-error?$6927$DDDPb
     g$i/o-read-error?$7196$DDDPb
     (condition-predicate g$6017$6920$DDDPb))
   (g$&i/o-read-rtd$6928$DDDPb
     g$&i/o-read-rtd$7197$DDDPb
     g$6017$6920$DDDPb)
   (g$&i/o-read-rcd$6929$DDDPb
     g$&i/o-read-rcd$7198$DDDPb
     g$6018$6922$DDDPb)
   (g$6030$6930$DDDPb
     g$6030$7199$DDDPb
     (make-record-type-descriptor
       '&i/o-write
       g$6004$6910$DDDPb
       'g$6033$DDDPb
       '#f
       '#f
       '#()))
   (g$6032$6931$DDDPb g$6032$7200$DDDPb '#f)
   (g$6031$6932$DDDPb
     g$6031$7201$DDDPb
     (make-record-constructor-descriptor
       g$6030$6930$DDDPb
       g$6005$6912$DDDPb
       g$6032$6931$DDDPb))
   (g$p?$6935$DDDPb
     g$p?$7202$DDDPb
     (record-predicate g$6030$6930$DDDPb))
   (g$make-i/o-write-error$6936$DDDPb
     g$make-i/o-write-error$7203$DDDPb
     (record-constructor g$6031$6932$DDDPb))
   (g$i/o-write-error?$6937$DDDPb
     g$i/o-write-error?$7204$DDDPb
     (condition-predicate g$6030$6930$DDDPb))
   (g$&i/o-write-rtd$6938$DDDPb
     g$&i/o-write-rtd$7205$DDDPb
     g$6030$6930$DDDPb)
   (g$&i/o-write-rcd$6939$DDDPb
     g$&i/o-write-rcd$7206$DDDPb
     g$6031$6932$DDDPb)
   (g$6043$6941$DDDPb
     g$6043$7207$DDDPb
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$6004$6910$DDDPb
       'g$6046$DDDPb
       '#f
       '#f
       '#((immutable position))))
   (g$6045$6942$DDDPb g$6045$7208$DDDPb '#f)
   (g$6044$6943$DDDPb
     g$6044$7209$DDDPb
     (make-record-constructor-descriptor
       g$6043$6941$DDDPb
       g$6005$6912$DDDPb
       g$6045$6942$DDDPb))
   (g$p?$6946$DDDPb
     g$p?$7210$DDDPb
     (record-predicate g$6043$6941$DDDPb))
   (g$make-i/o-invalid-position-error$6947$DDDPb
     g$make-i/o-invalid-position-error$7211$DDDPb
     (record-constructor g$6044$6943$DDDPb))
   (g$i/o-error-position$6948$DDDPb
     g$i/o-error-position$7212$DDDPb
     (record-accessor g$6043$6941$DDDPb '0))
   (g$i/o-invalid-position-error?$6949$DDDPb
     g$i/o-invalid-position-error?$7213$DDDPb
     (condition-predicate g$6043$6941$DDDPb))
   (g$i/o-error-position$6950$DDDPb
     g$i/o-error-position$7214$DDDPb
     (condition-accessor
       g$6043$6941$DDDPb
       g$i/o-error-position$6948$DDDPb))
   (g$&i/o-invalid-position-rtd$6951$DDDPb
     g$&i/o-invalid-position-rtd$7215$DDDPb
     g$6043$6941$DDDPb)
   (g$&i/o-invalid-position-rcd$6952$DDDPb
     g$&i/o-invalid-position-rcd$7216$DDDPb
     g$6044$6943$DDDPb)
   (g$6058$6954$DDDPb
     g$6058$7217$DDDPb
     (make-record-type-descriptor
       '&i/o-filename
       g$6004$6910$DDDPb
       'g$6061$DDDPb
       '#f
       '#f
       '#((immutable filename))))
   (g$6060$6955$DDDPb g$6060$7218$DDDPb '#f)
   (g$6059$6956$DDDPb
     g$6059$7219$DDDPb
     (make-record-constructor-descriptor
       g$6058$6954$DDDPb
       g$6005$6912$DDDPb
       g$6060$6955$DDDPb))
   (g$p?$6959$DDDPb
     g$p?$7220$DDDPb
     (record-predicate g$6058$6954$DDDPb))
   (g$make-i/o-filename-error$6960$DDDPb
     g$make-i/o-filename-error$7221$DDDPb
     (record-constructor g$6059$6956$DDDPb))
   (g$i/o-error-filename$6961$DDDPb
     g$i/o-error-filename$7222$DDDPb
     (record-accessor g$6058$6954$DDDPb '0))
   (g$i/o-filename-error?$6962$DDDPb
     g$i/o-filename-error?$7223$DDDPb
     (condition-predicate g$6058$6954$DDDPb))
   (g$i/o-error-filename$6963$DDDPb
     g$i/o-error-filename$7224$DDDPb
     (condition-accessor
       g$6058$6954$DDDPb
       g$i/o-error-filename$6961$DDDPb))
   (g$&i/o-filename-rtd$6964$DDDPb
     g$&i/o-filename-rtd$7225$DDDPb
     g$6058$6954$DDDPb)
   (g$&i/o-filename-rcd$6965$DDDPb
     g$&i/o-filename-rcd$7226$DDDPb
     g$6059$6956$DDDPb)
   (g$6073$6966$DDDPb
     g$6073$7227$DDDPb
     (make-record-type-descriptor
       '&i/o-file-protection
       g$6058$6954$DDDPb
       'g$6076$DDDPb
       '#f
       '#f
       '#()))
   (g$6075$6967$DDDPb g$6075$7228$DDDPb '#f)
   (g$6074$6968$DDDPb
     g$6074$7229$DDDPb
     (make-record-constructor-descriptor
       g$6073$6966$DDDPb
       g$6059$6956$DDDPb
       g$6075$6967$DDDPb))
   (g$p?$6971$DDDPb
     g$p?$7230$DDDPb
     (record-predicate g$6073$6966$DDDPb))
   (g$make-i/o-file-protection-error$6972$DDDPb
     g$make-i/o-file-protection-error$7231$DDDPb
     (record-constructor g$6074$6968$DDDPb))
   (g$i/o-file-protection-error?$6973$DDDPb
     g$i/o-file-protection-error?$7232$DDDPb
     (condition-predicate g$6073$6966$DDDPb))
   (g$&i/o-file-protection-rtd$6974$DDDPb
     g$&i/o-file-protection-rtd$7233$DDDPb
     g$6073$6966$DDDPb)
   (g$&i/o-file-protection-rcd$6975$DDDPb
     g$&i/o-file-protection-rcd$7234$DDDPb
     g$6074$6968$DDDPb)
   (g$6086$6976$DDDPb
     g$6086$7235$DDDPb
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$6073$6966$DDDPb
       'g$6089$DDDPb
       '#f
       '#f
       '#()))
   (g$6088$6977$DDDPb g$6088$7236$DDDPb '#f)
   (g$6087$6978$DDDPb
     g$6087$7237$DDDPb
     (make-record-constructor-descriptor
       g$6086$6976$DDDPb
       g$6074$6968$DDDPb
       g$6088$6977$DDDPb))
   (g$p?$6981$DDDPb
     g$p?$7238$DDDPb
     (record-predicate g$6086$6976$DDDPb))
   (g$make-i/o-file-is-read-only-error$6982$DDDPb
     g$make-i/o-file-is-read-only-error$7239$DDDPb
     (record-constructor g$6087$6978$DDDPb))
   (g$i/o-file-is-read-only-error?$6983$DDDPb
     g$i/o-file-is-read-only-error?$7240$DDDPb
     (condition-predicate g$6086$6976$DDDPb))
   (g$&i/o-file-is-read-only-rtd$6984$DDDPb
     g$&i/o-file-is-read-only-rtd$7241$DDDPb
     g$6086$6976$DDDPb)
   (g$&i/o-file-is-read-only-rcd$6985$DDDPb
     g$&i/o-file-is-read-only-rcd$7242$DDDPb
     g$6087$6978$DDDPb)
   (g$6099$6986$DDDPb
     g$6099$7243$DDDPb
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$6058$6954$DDDPb
       'g$6102$DDDPb
       '#f
       '#f
       '#()))
   (g$6101$6987$DDDPb g$6101$7244$DDDPb '#f)
   (g$6100$6988$DDDPb
     g$6100$7245$DDDPb
     (make-record-constructor-descriptor
       g$6099$6986$DDDPb
       g$6059$6956$DDDPb
       g$6101$6987$DDDPb))
   (g$p?$6991$DDDPb
     g$p?$7246$DDDPb
     (record-predicate g$6099$6986$DDDPb))
   (g$make-i/o-file-already-exists-error$6992$DDDPb
     g$make-i/o-file-already-exists-error$7247$DDDPb
     (record-constructor g$6100$6988$DDDPb))
   (g$i/o-file-already-exists-error?$6993$DDDPb
     g$i/o-file-already-exists-error?$7248$DDDPb
     (condition-predicate g$6099$6986$DDDPb))
   (g$&i/o-file-already-exists-rtd$6994$DDDPb
     g$&i/o-file-already-exists-rtd$7249$DDDPb
     g$6099$6986$DDDPb)
   (g$&i/o-file-already-exists-rcd$6995$DDDPb
     g$&i/o-file-already-exists-rcd$7250$DDDPb
     g$6100$6988$DDDPb)
   (g$6112$6996$DDDPb
     g$6112$7251$DDDPb
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$6058$6954$DDDPb
       'g$6115$DDDPb
       '#f
       '#f
       '#()))
   (g$6114$6997$DDDPb g$6114$7252$DDDPb '#f)
   (g$6113$6998$DDDPb
     g$6113$7253$DDDPb
     (make-record-constructor-descriptor
       g$6112$6996$DDDPb
       g$6059$6956$DDDPb
       g$6114$6997$DDDPb))
   (g$p?$7001$DDDPb
     g$p?$7254$DDDPb
     (record-predicate g$6112$6996$DDDPb))
   (g$make-i/o-file-does-not-exist-error$7002$DDDPb
     g$make-i/o-file-does-not-exist-error$7255$DDDPb
     (record-constructor g$6113$6998$DDDPb))
   (g$i/o-file-does-not-exist-error?$7003$DDDPb
     g$i/o-file-does-not-exist-error?$7256$DDDPb
     (condition-predicate g$6112$6996$DDDPb))
   (g$&i/o-file-does-not-exist-rtd$7004$DDDPb
     g$&i/o-file-does-not-exist-rtd$7257$DDDPb
     g$6112$6996$DDDPb)
   (g$&i/o-file-does-not-exist-rcd$7005$DDDPb
     g$&i/o-file-does-not-exist-rcd$7258$DDDPb
     g$6113$6998$DDDPb)
   (g$6125$7007$DDDPb
     g$6125$7259$DDDPb
     (make-record-type-descriptor
       '&i/o-port
       g$6004$6910$DDDPb
       'g$6128$DDDPb
       '#f
       '#f
       '#((immutable port))))
   (g$6127$7008$DDDPb g$6127$7260$DDDPb '#f)
   (g$6126$7009$DDDPb
     g$6126$7261$DDDPb
     (make-record-constructor-descriptor
       g$6125$7007$DDDPb
       g$6005$6912$DDDPb
       g$6127$7008$DDDPb))
   (g$p?$7012$DDDPb
     g$p?$7262$DDDPb
     (record-predicate g$6125$7007$DDDPb))
   (g$make-i/o-port-error$7013$DDDPb
     g$make-i/o-port-error$7263$DDDPb
     (record-constructor g$6126$7009$DDDPb))
   (g$i/o-error-port$7014$DDDPb
     g$i/o-error-port$7264$DDDPb
     (record-accessor g$6125$7007$DDDPb '0))
   (g$i/o-port-error?$7015$DDDPb
     g$i/o-port-error?$7265$DDDPb
     (condition-predicate g$6125$7007$DDDPb))
   (g$i/o-error-port$7016$DDDPb
     g$i/o-error-port$7266$DDDPb
     (condition-accessor g$6125$7007$DDDPb g$i/o-error-port$7014$DDDPb))
   (g$&i/o-port-rtd$7017$DDDPb
     g$&i/o-port-rtd$7267$DDDPb
     g$6125$7007$DDDPb)
   (g$&i/o-port-rcd$7018$DDDPb
     g$&i/o-port-rcd$7268$DDDPb
     g$6126$7009$DDDPb)
   (g$6140$7019$DDDPb
     g$6140$7269$DDDPb
     (make-record-type-descriptor
       '&i/o-decoding
       g$6125$7007$DDDPb
       'g$6143$DDDPb
       '#f
       '#f
       '#()))
   (g$6142$7020$DDDPb g$6142$7270$DDDPb '#f)
   (g$6141$7021$DDDPb
     g$6141$7271$DDDPb
     (make-record-constructor-descriptor
       g$6140$7019$DDDPb
       g$6126$7009$DDDPb
       g$6142$7020$DDDPb))
   (g$p?$7024$DDDPb
     g$p?$7272$DDDPb
     (record-predicate g$6140$7019$DDDPb))
   (g$make-i/o-decoding-error$7025$DDDPb
     g$make-i/o-decoding-error$7273$DDDPb
     (record-constructor g$6141$7021$DDDPb))
   (g$i/o-decoding-error?$7026$DDDPb
     g$i/o-decoding-error?$7274$DDDPb
     (condition-predicate g$6140$7019$DDDPb))
   (g$&i/o-decoding-rtd$7027$DDDPb
     g$&i/o-decoding-rtd$7275$DDDPb
     g$6140$7019$DDDPb)
   (g$&i/o-decoding-rcd$7028$DDDPb
     g$&i/o-decoding-rcd$7276$DDDPb
     g$6141$7021$DDDPb)
   (g$6153$7030$DDDPb
     g$6153$7277$DDDPb
     (make-record-type-descriptor
       '&i/o-encoding
       g$6125$7007$DDDPb
       'g$6156$DDDPb
       '#f
       '#f
       '#((immutable char))))
   (g$6155$7031$DDDPb g$6155$7278$DDDPb '#f)
   (g$6154$7032$DDDPb
     g$6154$7279$DDDPb
     (make-record-constructor-descriptor
       g$6153$7030$DDDPb
       g$6126$7009$DDDPb
       g$6155$7031$DDDPb))
   (g$p?$7035$DDDPb
     g$p?$7280$DDDPb
     (record-predicate g$6153$7030$DDDPb))
   (g$make-i/o-encoding-error$7036$DDDPb
     g$make-i/o-encoding-error$7281$DDDPb
     (record-constructor g$6154$7032$DDDPb))
   (g$i/o-encoding-error-char$7037$DDDPb
     g$i/o-encoding-error-char$7282$DDDPb
     (record-accessor g$6153$7030$DDDPb '0))
   (g$i/o-encoding-error?$7038$DDDPb
     g$i/o-encoding-error?$7283$DDDPb
     (condition-predicate g$6153$7030$DDDPb))
   (g$i/o-encoding-error-char$7039$DDDPb
     g$i/o-encoding-error-char$7284$DDDPb
     (condition-accessor
       g$6153$7030$DDDPb
       g$i/o-encoding-error-char$7037$DDDPb))
   (g$&i/o-encoding-rtd$7040$DDDPb
     g$&i/o-encoding-rtd$7285$DDDPb
     g$6153$7030$DDDPb)
   (g$&i/o-encoding-rcd$7041$DDDPb
     g$&i/o-encoding-rcd$7286$DDDPb
     g$6154$7032$DDDPb)
   (g$6168$7042$DDDPb
     g$6168$7287$DDDPb
     (make-record-type-descriptor
       '&no-infinities
       g$5948$6864$DDDPb
       'g$6171$DDDPb
       '#f
       '#f
       '#()))
   (g$6170$7043$DDDPb g$6170$7288$DDDPb '#f)
   (g$6169$7044$DDDPb
     g$6169$7289$DDDPb
     (make-record-constructor-descriptor
       g$6168$7042$DDDPb
       g$5949$6866$DDDPb
       g$6170$7043$DDDPb))
   (g$p?$7047$DDDPb
     g$p?$7290$DDDPb
     (record-predicate g$6168$7042$DDDPb))
   (g$make-no-infinities-violation$7048$DDDPb
     g$make-no-infinities-violation$7291$DDDPb
     (record-constructor g$6169$7044$DDDPb))
   (g$no-infinities-violation?$7049$DDDPb
     g$no-infinities-violation?$7292$DDDPb
     (condition-predicate g$6168$7042$DDDPb))
   (g$&no-infinities-rtd$7050$DDDPb
     g$&no-infinities-rtd$7293$DDDPb
     g$6168$7042$DDDPb)
   (g$&no-infinities-rcd$7051$DDDPb
     g$&no-infinities-rcd$7294$DDDPb
     g$6169$7044$DDDPb)
   (g$6181$7052$DDDPb
     g$6181$7295$DDDPb
     (make-record-type-descriptor
       '&no-nans
       g$5948$6864$DDDPb
       'g$6184$DDDPb
       '#f
       '#f
       '#()))
   (g$6183$7053$DDDPb g$6183$7296$DDDPb '#f)
   (g$6182$7054$DDDPb
     g$6182$7297$DDDPb
     (make-record-constructor-descriptor
       g$6181$7052$DDDPb
       g$5949$6866$DDDPb
       g$6183$7053$DDDPb))
   (g$p?$7057$DDDPb
     g$p?$7298$DDDPb
     (record-predicate g$6181$7052$DDDPb))
   (g$make-no-nans-violation$7058$DDDPb
     g$make-no-nans-violation$7299$DDDPb
     (record-constructor g$6182$7054$DDDPb))
   (g$no-nans-violation?$7059$DDDPb
     g$no-nans-violation?$7300$DDDPb
     (condition-predicate g$6181$7052$DDDPb))
   (g$&no-nans-rtd$7060$DDDPb
     g$&no-nans-rtd$7301$DDDPb
     g$6181$7052$DDDPb)
   (g$&no-nans-rcd$7061$DDDPb
     g$&no-nans-rcd$7302$DDDPb
     g$6182$7054$DDDPb))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$7303$DDDPb
     g$append!$7309$DDDPb
     (case-lambda
       ((g$a$7304$DDDPb . g$b$7305$DDDPb)
        (if (null? g$a$7304$DDDPb)
          g$b$7305$DDDPb
          (if (null? g$b$7305$DDDPb)
            g$a$7304$DDDPb
            (begin
              ((letrec ((g$f$7306$DDDPb
                          (case-lambda
                            ((g$a$7307$DDDPb)
                             ((case-lambda
                                ((g$n$7308$DDDPb)
                                 (if (null? g$n$7308$DDDPb)
                                   (set-cdr!
                                     g$a$7307$DDDPb
                                     g$b$7305$DDDPb)
                                   (g$f$7306$DDDPb g$n$7308$DDDPb))))
                              (cdr g$a$7307$DDDPb))))))
                 g$f$7306$DDDPb)
               g$a$7304$DDDPb)
              g$a$7304$DDDPb)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$7310$DDDPb g$inexact->exact$7330$DDDPb exact)
   (g$exact->inexact$7311$DDDPb g$exact->inexact$7331$DDDPb inexact)
   (g$sign$7312$DDDPb
     g$sign$7332$DDDPb
     (case-lambda
       ((g$n$7318$DDDPb)
        (if (> g$n$7318$DDDPb '0)
          '1
          (if (< g$n$7318$DDDPb '0) '-1 '0)))))
   (g$quotient$7313$DDDPb
     g$quotient$7333$DDDPb
     (case-lambda
       ((g$n1$7319$DDDPb g$n2$7320$DDDPb)
        (begin
          (if (not (integer-valued? g$n1$7319$DDDPb))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n1$7319$DDDPb)
            (void))
          (if (not (integer-valued? g$n2$7320$DDDPb))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n2$7320$DDDPb)
            (void))
          (* (g$sign$7312$DDDPb g$n1$7319$DDDPb)
             (g$sign$7312$DDDPb g$n2$7320$DDDPb)
             (g$div$6415$DDDPb
               (abs g$n1$7319$DDDPb)
               (abs g$n2$7320$DDDPb)))))))
   (g$remainder$7314$DDDPb
     g$remainder$7334$DDDPb
     (case-lambda
       ((g$n1$7321$DDDPb g$n2$7322$DDDPb)
        (begin
          (if (not (integer-valued? g$n1$7321$DDDPb))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n1$7321$DDDPb)
            (void))
          (if (not (integer-valued? g$n2$7322$DDDPb))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n2$7322$DDDPb)
            (void))
          (* (g$sign$7312$DDDPb g$n1$7321$DDDPb)
             (g$mod$6417$DDDPb
               (abs g$n1$7321$DDDPb)
               (abs g$n2$7322$DDDPb)))))))
   (g$modulo$7315$DDDPb
     g$modulo$7335$DDDPb
     (case-lambda
       ((g$n1$7323$DDDPb g$n2$7324$DDDPb)
        (begin
          (if (not (integer-valued? g$n1$7323$DDDPb))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n1$7323$DDDPb)
            (void))
          (if (not (integer-valued? g$n2$7324$DDDPb))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n2$7324$DDDPb)
            (void))
          (* (g$sign$7312$DDDPb g$n2$7324$DDDPb)
             (g$mod$6417$DDDPb
               (* (g$sign$7312$DDDPb g$n2$7324$DDDPb) g$n1$7323$DDDPb)
               (abs g$n2$7324$DDDPb)))))))
   (g$make-promise$7316$DDDPb
     g$make-promise$7336$DDDPb
     (case-lambda
       ((g$proc$7325$DDDPb)
        ((case-lambda
           ((g$result-ready?$7326$DDDPb g$result$7327$DDDPb)
            (case-lambda
              (()
               (if g$result-ready?$7326$DDDPb
                 g$result$7327$DDDPb
                 ((case-lambda
                    ((g$x$7328$DDDPb)
                     (if g$result-ready?$7326$DDDPb
                       g$result$7327$DDDPb
                       (begin
                         (set! g$result-ready?$7326$DDDPb '#t)
                         (set! g$result$7327$DDDPb g$x$7328$DDDPb)
                         g$result$7327$DDDPb))))
                  (g$proc$7325$DDDPb)))))))
         '#f
         '#f))))
   (g$force$7317$DDDPb
     g$force$7337$DDDPb
     (case-lambda ((g$object$7329$DDDPb) (g$object$7329$DDDPb)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$7338$DDDPb
     g$split$7363$DDDPb
     (case-lambda
       ((g$ls$7342$DDDPb)
        ((letrec ((g$loop$7343$DDDPb
                    (case-lambda
                      ((g$rest$7344$DDDPb
                         g$left$7345$DDDPb
                         g$right$7346$DDDPb)
                       (if (null? g$rest$7344$DDDPb)
                         (cons g$left$7345$DDDPb g$right$7346$DDDPb)
                         (if (null? (cdr g$rest$7344$DDDPb))
                           (cons
                             (cons
                               (car g$rest$7344$DDDPb)
                               g$left$7345$DDDPb)
                             g$right$7346$DDDPb)
                           (g$loop$7343$DDDPb
                             (g$cddr$6435$DDDPb g$rest$7344$DDDPb)
                             (cons
                               (car g$rest$7344$DDDPb)
                               g$left$7345$DDDPb)
                             (cons
                               (g$cadr$6433$DDDPb g$rest$7344$DDDPb)
                               g$right$7346$DDDPb))))))))
           g$loop$7343$DDDPb)
         g$ls$7342$DDDPb
         '()
         '()))))
   (g$reverse-it$7339$DDDPb
     g$reverse-it$7364$DDDPb
     (case-lambda
       ((g$head$7347$DDDPb g$tail$7348$DDDPb)
        (if (null? g$head$7347$DDDPb)
          g$tail$7348$DDDPb
          (g$reverse-it$7339$DDDPb
            (cdr g$head$7347$DDDPb)
            (cons (car g$head$7347$DDDPb) g$tail$7348$DDDPb))))))
   (g$merge$7340$DDDPb
     g$merge$7365$DDDPb
     (case-lambda
       ((g$list-1$7349$DDDPb g$list-2$7350$DDDPb g$precedes?$7351$DDDPb)
        ((letrec ((g$loop$7352$DDDPb
                    (case-lambda
                      ((g$source-1$7353$DDDPb
                         g$source-2$7354$DDDPb
                         g$so-far$7355$DDDPb)
                       (if (null? g$source-1$7353$DDDPb)
                         (g$reverse-it$7339$DDDPb
                           g$so-far$7355$DDDPb
                           g$source-2$7354$DDDPb)
                         (if (null? g$source-2$7354$DDDPb)
                           (g$reverse-it$7339$DDDPb
                             g$so-far$7355$DDDPb
                             g$source-1$7353$DDDPb)
                           ((case-lambda
                              ((g$car-1$7356$DDDPb g$car-2$7357$DDDPb)
                               (if (g$precedes?$7351$DDDPb
                                     g$car-2$7357$DDDPb
                                     g$car-1$7356$DDDPb)
                                 (g$loop$7352$DDDPb
                                   g$source-1$7353$DDDPb
                                   (cdr g$source-2$7354$DDDPb)
                                   (cons
                                     g$car-2$7357$DDDPb
                                     g$so-far$7355$DDDPb))
                                 (g$loop$7352$DDDPb
                                   g$source-2$7354$DDDPb
                                   (cdr g$source-1$7353$DDDPb)
                                   (cons
                                     g$car-1$7356$DDDPb
                                     g$so-far$7355$DDDPb)))))
                            (car g$source-1$7353$DDDPb)
                            (car g$source-2$7354$DDDPb))))))))
           g$loop$7352$DDDPb)
         g$list-1$7349$DDDPb
         g$list-2$7350$DDDPb
         '()))))
   (g$list-sort$7341$DDDPb
     g$list-sort$7366$DDDPb
     (case-lambda
       ((g$precedes?$7358$DDDPb g$ls$7359$DDDPb)
        (if (null? g$ls$7359$DDDPb)
          '()
          ((letrec ((g$helper$7360$DDDPb
                      (case-lambda
                        ((g$piece$7361$DDDPb)
                         (if (null? (cdr g$piece$7361$DDDPb))
                           g$piece$7361$DDDPb
                           ((case-lambda
                              ((g$parts$7362$DDDPb)
                               (g$merge$7340$DDDPb
                                 (g$helper$7360$DDDPb
                                   (car g$parts$7362$DDDPb))
                                 (g$helper$7360$DDDPb
                                   (cdr g$parts$7362$DDDPb))
                                 g$precedes?$7358$DDDPb)))
                            (g$split$7338$DDDPb
                              g$piece$7361$DDDPb)))))))
             g$helper$7360$DDDPb)
           g$ls$7359$DDDPb))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$7402$DDDPb
     g$string-ci=?$7505$DDDPb
     (case-lambda
       ((g$a$7451$DDDPb g$b$7452$DDDPb . g$rest$7453$DDDPb)
        (begin
          (if (not (string? g$a$7451$DDDPb))
            (assertion-violation
              'string-ci=?
              '"not a string"
              g$a$7451$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$7454$DDDPb)
               (begin
                 (if (not (string? g$x$7454$DDDPb))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$7454$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$7455$DDDPb)
                     (begin
                       (set! g$a$7451$DDDPb g$x$7454$DDDPb)
                       g$r$7455$DDDPb)))
                  (= (string-ci-compare g$a$7451$DDDPb g$x$7454$DDDPb)
                     '0)))))
            (cons g$b$7452$DDDPb g$rest$7453$DDDPb))))))
   (g$string-ci<?$7403$DDDPb
     g$string-ci<?$7506$DDDPb
     (case-lambda
       ((g$a$7456$DDDPb g$b$7457$DDDPb . g$rest$7458$DDDPb)
        (begin
          (if (not (string? g$a$7456$DDDPb))
            (assertion-violation
              'string-ci<?
              '"not a string"
              g$a$7456$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$7459$DDDPb)
               (begin
                 (if (not (string? g$x$7459$DDDPb))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$7459$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$7460$DDDPb)
                     (begin
                       (set! g$a$7456$DDDPb g$x$7459$DDDPb)
                       g$r$7460$DDDPb)))
                  (< (string-ci-compare g$a$7456$DDDPb g$x$7459$DDDPb)
                     '0)))))
            (cons g$b$7457$DDDPb g$rest$7458$DDDPb))))))
   (g$string-ci>?$7404$DDDPb
     g$string-ci>?$7507$DDDPb
     (case-lambda
       ((g$a$7461$DDDPb g$b$7462$DDDPb . g$rest$7463$DDDPb)
        (begin
          (if (not (string? g$a$7461$DDDPb))
            (assertion-violation
              'string-ci>?
              '"not a string"
              g$a$7461$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$7464$DDDPb)
               (begin
                 (if (not (string? g$x$7464$DDDPb))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$7464$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$7465$DDDPb)
                     (begin
                       (set! g$a$7461$DDDPb g$x$7464$DDDPb)
                       g$r$7465$DDDPb)))
                  (> (string-ci-compare g$a$7461$DDDPb g$x$7464$DDDPb)
                     '0)))))
            (cons g$b$7462$DDDPb g$rest$7463$DDDPb))))))
   (g$string-ci<=?$7405$DDDPb
     g$string-ci<=?$7508$DDDPb
     (case-lambda
       ((g$a$7466$DDDPb g$b$7467$DDDPb . g$rest$7468$DDDPb)
        (begin
          (if (not (string? g$a$7466$DDDPb))
            (assertion-violation
              'string-ci<=?
              '"not a string"
              g$a$7466$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$7469$DDDPb)
               (begin
                 (if (not (string? g$x$7469$DDDPb))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$7469$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$7470$DDDPb)
                     (begin
                       (set! g$a$7466$DDDPb g$x$7469$DDDPb)
                       g$r$7470$DDDPb)))
                  (<= (string-ci-compare g$a$7466$DDDPb g$x$7469$DDDPb)
                      '0)))))
            (cons g$b$7467$DDDPb g$rest$7468$DDDPb))))))
   (g$string-ci>=?$7406$DDDPb
     g$string-ci>=?$7509$DDDPb
     (case-lambda
       ((g$a$7471$DDDPb g$b$7472$DDDPb . g$rest$7473$DDDPb)
        (begin
          (if (not (string? g$a$7471$DDDPb))
            (assertion-violation
              'string-ci>=?
              '"not a string"
              g$a$7471$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$7474$DDDPb)
               (begin
                 (if (not (string? g$x$7474$DDDPb))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$7474$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$7475$DDDPb)
                     (begin
                       (set! g$a$7471$DDDPb g$x$7474$DDDPb)
                       g$r$7475$DDDPb)))
                  (>= (string-ci-compare g$a$7471$DDDPb g$x$7474$DDDPb)
                      '0)))))
            (cons g$b$7472$DDDPb g$rest$7473$DDDPb))))))
   (g$char-ci=?$7442$DDDPb
     g$char-ci=?$7510$DDDPb
     (case-lambda
       ((g$a$7476$DDDPb g$b$7477$DDDPb . g$rest$7478$DDDPb)
        (begin
          (if (not (g$char?$6421$DDDPb g$a$7476$DDDPb))
            (assertion-violation
              'char-ci=?
              '"not a char"
              g$a$7476$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$7479$DDDPb)
               (begin
                 (if (not (g$char?$6421$DDDPb g$x$7479$DDDPb))
                   (assertion-violation
                     'char-ci=?
                     '"not a char"
                     g$x$7479$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$7480$DDDPb)
                     (begin
                       (set! g$a$7476$DDDPb g$x$7479$DDDPb)
                       g$r$7480$DDDPb)))
                  (= (char->integer (char-upcase g$a$7476$DDDPb))
                     (char->integer (char-upcase g$x$7479$DDDPb)))))))
            (cons g$b$7477$DDDPb g$rest$7478$DDDPb))))))
   (g$char-ci<?$7443$DDDPb
     g$char-ci<?$7511$DDDPb
     (case-lambda
       ((g$a$7481$DDDPb g$b$7482$DDDPb . g$rest$7483$DDDPb)
        (begin
          (if (not (g$char?$6421$DDDPb g$a$7481$DDDPb))
            (assertion-violation
              'char-ci<?
              '"not a char"
              g$a$7481$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$7484$DDDPb)
               (begin
                 (if (not (g$char?$6421$DDDPb g$x$7484$DDDPb))
                   (assertion-violation
                     'char-ci<?
                     '"not a char"
                     g$x$7484$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$7485$DDDPb)
                     (begin
                       (set! g$a$7481$DDDPb g$x$7484$DDDPb)
                       g$r$7485$DDDPb)))
                  (< (char->integer (char-upcase g$a$7481$DDDPb))
                     (char->integer (char-upcase g$x$7484$DDDPb)))))))
            (cons g$b$7482$DDDPb g$rest$7483$DDDPb))))))
   (g$char-ci>?$7444$DDDPb
     g$char-ci>?$7512$DDDPb
     (case-lambda
       ((g$a$7486$DDDPb g$b$7487$DDDPb . g$rest$7488$DDDPb)
        (begin
          (if (not (g$char?$6421$DDDPb g$a$7486$DDDPb))
            (assertion-violation
              'char-ci>?
              '"not a char"
              g$a$7486$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$7489$DDDPb)
               (begin
                 (if (not (g$char?$6421$DDDPb g$x$7489$DDDPb))
                   (assertion-violation
                     'char-ci>?
                     '"not a char"
                     g$x$7489$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$7490$DDDPb)
                     (begin
                       (set! g$a$7486$DDDPb g$x$7489$DDDPb)
                       g$r$7490$DDDPb)))
                  (> (char->integer (char-upcase g$a$7486$DDDPb))
                     (char->integer (char-upcase g$x$7489$DDDPb)))))))
            (cons g$b$7487$DDDPb g$rest$7488$DDDPb))))))
   (g$char-ci<=?$7445$DDDPb
     g$char-ci<=?$7513$DDDPb
     (case-lambda
       ((g$a$7491$DDDPb g$b$7492$DDDPb . g$rest$7493$DDDPb)
        (begin
          (if (not (g$char?$6421$DDDPb g$a$7491$DDDPb))
            (assertion-violation
              'char-ci<=?
              '"not a char"
              g$a$7491$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$7494$DDDPb)
               (begin
                 (if (not (g$char?$6421$DDDPb g$x$7494$DDDPb))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$7494$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$7495$DDDPb)
                     (begin
                       (set! g$a$7491$DDDPb g$x$7494$DDDPb)
                       g$r$7495$DDDPb)))
                  (<= (char->integer (char-upcase g$a$7491$DDDPb))
                      (char->integer (char-upcase g$x$7494$DDDPb)))))))
            (cons g$b$7492$DDDPb g$rest$7493$DDDPb))))))
   (g$char-ci>=?$7446$DDDPb
     g$char-ci>=?$7514$DDDPb
     (case-lambda
       ((g$a$7496$DDDPb g$b$7497$DDDPb . g$rest$7498$DDDPb)
        (begin
          (if (not (g$char?$6421$DDDPb g$a$7496$DDDPb))
            (assertion-violation
              'char-ci>=?
              '"not a char"
              g$a$7496$DDDPb)
            (void))
          (g$for-all$5751$DDDPb
            (case-lambda
              ((g$x$7499$DDDPb)
               (begin
                 (if (not (g$char?$6421$DDDPb g$x$7499$DDDPb))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$7499$DDDPb)
                   (void))
                 ((case-lambda
                    ((g$r$7500$DDDPb)
                     (begin
                       (set! g$a$7496$DDDPb g$x$7499$DDDPb)
                       g$r$7500$DDDPb)))
                  (>= (char->integer (char-upcase g$a$7496$DDDPb))
                      (char->integer (char-upcase g$x$7499$DDDPb)))))))
            (cons g$b$7497$DDDPb g$rest$7498$DDDPb))))))
   (g$string-normalize-nfc$7447$DDDPb
     g$string-normalize-nfc$7515$DDDPb
     (case-lambda
       ((g$s$7501$DDDPb) (string-normalize g$s$7501$DDDPb 'formc))))
   (g$string-normalize-nfd$7448$DDDPb
     g$string-normalize-nfd$7516$DDDPb
     (case-lambda
       ((g$s$7502$DDDPb) (string-normalize g$s$7502$DDDPb 'formd))))
   (g$string-normalize-nfkc$7449$DDDPb
     g$string-normalize-nfkc$7517$DDDPb
     (case-lambda
       ((g$s$7503$DDDPb) (string-normalize g$s$7503$DDDPb 'formkc))))
   (g$string-normalize-nfkd$7450$DDDPb
     g$string-normalize-nfkd$7518$DDDPb
     (case-lambda
       ((g$s$7504$DDDPb) (string-normalize g$s$7504$DDDPb 'formkd)))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$7519$DDDPb
     g$bitwise-if$7550$DDDPb
     (case-lambda
       ((g$ei1$7526$DDDPb g$ei2$7527$DDDPb g$ei3$7528$DDDPb)
        (bitwise-ior
          (bitwise-and g$ei1$7526$DDDPb g$ei2$7527$DDDPb)
          (bitwise-and
            (bitwise-not g$ei1$7526$DDDPb)
            g$ei3$7528$DDDPb)))))
   (g$bitwise-copy-bit$7520$DDDPb
     g$bitwise-copy-bit$7551$DDDPb
     (case-lambda
       ((g$ei1$7529$DDDPb g$ei2$7530$DDDPb g$ei3$7531$DDDPb)
        (g$bitwise-if$7519$DDDPb
          (g$bitwise-arithmetic-shift-left$7523$DDDPb
            '1
            g$ei2$7530$DDDPb)
          (g$bitwise-arithmetic-shift-left$7523$DDDPb
            g$ei3$7531$DDDPb
            g$ei2$7530$DDDPb)
          g$ei1$7529$DDDPb))))
   (g$bitwise-bit-field$7521$DDDPb
     g$bitwise-bit-field$7552$DDDPb
     (case-lambda
       ((g$ei1$7532$DDDPb g$ei2$7533$DDDPb g$ei3$7534$DDDPb)
        (g$bitwise-arithmetic-shift-right$7524$DDDPb
          (bitwise-and
            g$ei1$7532$DDDPb
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$7523$DDDPb
                '-1
                g$ei3$7534$DDDPb)))
          g$ei2$7533$DDDPb))))
   (g$bitwise-copy-bit-field$7522$DDDPb
     g$bitwise-copy-bit-field$7553$DDDPb
     (case-lambda
       ((g$to$7535$DDDPb
          g$start$7536$DDDPb
          g$end$7537$DDDPb
          g$from$7538$DDDPb)
        (g$bitwise-if$7519$DDDPb
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$7523$DDDPb
              '-1
              g$start$7536$DDDPb)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$7523$DDDPb
                '-1
                g$end$7537$DDDPb)))
          (g$bitwise-arithmetic-shift-left$7523$DDDPb
            g$from$7538$DDDPb
            g$start$7536$DDDPb)
          g$to$7535$DDDPb))))
   (g$bitwise-arithmetic-shift-left$7523$DDDPb
     g$bitwise-arithmetic-shift-left$7554$DDDPb
     (case-lambda
       ((g$ei1$7539$DDDPb g$ei2$7540$DDDPb)
        (bitwise-arithmetic-shift g$ei1$7539$DDDPb g$ei2$7540$DDDPb))))
   (g$bitwise-arithmetic-shift-right$7524$DDDPb
     g$bitwise-arithmetic-shift-right$7555$DDDPb
     (case-lambda
       ((g$ei1$7541$DDDPb g$ei2$7542$DDDPb)
        (bitwise-arithmetic-shift
          g$ei1$7541$DDDPb
          (- g$ei2$7542$DDDPb)))))
   (g$bitwise-rotate-bit-field$7525$DDDPb
     g$bitwise-rotate-bit-field$7556$DDDPb
     (case-lambda
       ((g$n$7543$DDDPb
          g$start$7544$DDDPb
          g$end$7545$DDDPb
          g$count$7546$DDDPb)
        ((case-lambda
           ((g$width$7547$DDDPb)
            (if (g$positive?$6460$DDDPb g$width$7547$DDDPb)
              ((case-lambda
                 ((g$count$7548$DDDPb g$field$7549$DDDPb)
                  (g$bitwise-copy-bit-field$7522$DDDPb
                    g$n$7543$DDDPb
                    g$start$7544$DDDPb
                    g$end$7545$DDDPb
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$7523$DDDPb
                        g$field$7549$DDDPb
                        g$count$7548$DDDPb)
                      (g$bitwise-arithmetic-shift-right$7524$DDDPb
                        g$field$7549$DDDPb
                        (- g$width$7547$DDDPb g$count$7548$DDDPb))))))
               (g$mod$6417$DDDPb g$count$7546$DDDPb g$width$7547$DDDPb)
               (g$bitwise-bit-field$7521$DDDPb
                 g$n$7543$DDDPb
                 g$start$7544$DDDPb
                 g$end$7545$DDDPb))
              g$n$7543$DDDPb)))
         (- g$end$7545$DDDPb g$start$7544$DDDPb))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxdiv$7557$DDDPb
     g$fxdiv$7662$DDDPb
     (case-lambda
       ((g$fx1$7578$DDDPb g$fx2$7579$DDDPb)
        (call-with-values
          (case-lambda
            (() (fxdiv-and-mod g$fx1$7578$DDDPb g$fx2$7579$DDDPb)))
          (case-lambda
            ((g$n$7582$DDDPb g$d$7583$DDDPb)
             ((case-lambda
                ((g$d$7584$DDDPb g$n$7585$DDDPb) g$n$7585$DDDPb))
              g$d$7583$DDDPb
              g$n$7582$DDDPb)))))))
   (g$fxdiv0$7558$DDDPb
     g$fxdiv0$7663$DDDPb
     (case-lambda
       ((g$fx1$7586$DDDPb g$fx2$7587$DDDPb)
        (call-with-values
          (case-lambda
            (() (fxdiv0-and-mod0 g$fx1$7586$DDDPb g$fx2$7587$DDDPb)))
          (case-lambda
            ((g$n$7590$DDDPb g$d$7591$DDDPb)
             ((case-lambda
                ((g$d$7592$DDDPb g$n$7593$DDDPb) g$n$7593$DDDPb))
              g$d$7591$DDDPb
              g$n$7590$DDDPb)))))))
   (g$fxmod$7559$DDDPb
     g$fxmod$7664$DDDPb
     (case-lambda
       ((g$fx1$7594$DDDPb g$fx2$7595$DDDPb)
        (call-with-values
          (case-lambda
            (() (fxdiv-and-mod g$fx1$7594$DDDPb g$fx2$7595$DDDPb)))
          (case-lambda
            ((g$n$7598$DDDPb g$d$7599$DDDPb)
             ((case-lambda
                ((g$d$7600$DDDPb g$n$7601$DDDPb) g$d$7600$DDDPb))
              g$d$7599$DDDPb
              g$n$7598$DDDPb)))))))
   (g$fxmod0$7560$DDDPb
     g$fxmod0$7665$DDDPb
     (case-lambda
       ((g$fx1$7602$DDDPb g$fx2$7603$DDDPb)
        (call-with-values
          (case-lambda
            (() (fxdiv0-and-mod0 g$fx1$7602$DDDPb g$fx2$7603$DDDPb)))
          (case-lambda
            ((g$n$7606$DDDPb g$d$7607$DDDPb)
             ((case-lambda
                ((g$d$7608$DDDPb g$n$7609$DDDPb) g$d$7608$DDDPb))
              g$d$7607$DDDPb
              g$n$7606$DDDPb)))))))
   (g$fxpositive?$7561$DDDPb
     g$fxpositive?$7666$DDDPb
     (case-lambda
       ((g$r$7610$DDDPb)
        (begin
          (if (not (g$fixnum?$6427$DDDPb g$r$7610$DDDPb))
            (assertion-violation
              'fxpositive?
              '"not a fixnum"
              g$r$7610$DDDPb)
            (void))
          (fx<? '0 g$r$7610$DDDPb)))))
   (g$fxnegative?$7562$DDDPb
     g$fxnegative?$7667$DDDPb
     (case-lambda
       ((g$r$7611$DDDPb)
        (begin
          (if (not (g$fixnum?$6427$DDDPb g$r$7611$DDDPb))
            (assertion-violation
              'fxnegative?
              '"not a fixnum"
              g$r$7611$DDDPb)
            (void))
          (fx>? '0 g$r$7611$DDDPb)))))
   (g$fxzero?$7563$DDDPb
     g$fxzero?$7668$DDDPb
     (case-lambda
       ((g$r$7612$DDDPb)
        (begin
          (if (not (g$fixnum?$6427$DDDPb g$r$7612$DDDPb))
            (assertion-violation
              'fxzero?
              '"not a fixnum"
              g$r$7612$DDDPb)
            (void))
          (fx=? '0 g$r$7612$DDDPb)))))
   (g$fxeven?$7564$DDDPb
     g$fxeven?$7669$DDDPb
     (case-lambda
       ((g$n$7613$DDDPb)
        (begin
          (if (not (g$fixnum?$6427$DDDPb g$n$7613$DDDPb))
            (assertion-violation
              'fxeven?
              '"not a fixnum"
              g$n$7613$DDDPb)
            (void))
          (fx=? '0 (g$fxmod$7559$DDDPb g$n$7613$DDDPb '2))))))
   (g$fxodd?$7565$DDDPb
     g$fxodd?$7670$DDDPb
     (case-lambda
       ((g$n$7614$DDDPb)
        (begin
          (if (not (g$fixnum?$6427$DDDPb g$n$7614$DDDPb))
            (assertion-violation 'fxodd? '"not a fixnum" g$n$7614$DDDPb)
            (void))
          (fx=? '1 (g$fxmod$7559$DDDPb g$n$7614$DDDPb '2))))))
   (g$fxmax$7566$DDDPb
     g$fxmax$7671$DDDPb
     (case-lambda
       ((g$a$7615$DDDPb . g$rest$7616$DDDPb)
        (begin
          (if (not (g$fixnum?$6427$DDDPb g$a$7615$DDDPb))
            (assertion-violation 'fxmax '"not a fixnum" g$a$7615$DDDPb)
            (void))
          (g$fold-left$5756$DDDPb
            (case-lambda
              ((g$a$7617$DDDPb g$b$7618$DDDPb)
               (if (fx<? g$a$7617$DDDPb g$b$7618$DDDPb)
                 g$b$7618$DDDPb
                 g$a$7617$DDDPb)))
            g$a$7615$DDDPb
            g$rest$7616$DDDPb)))))
   (g$fxmin$7567$DDDPb
     g$fxmin$7672$DDDPb
     (case-lambda
       ((g$a$7619$DDDPb . g$rest$7620$DDDPb)
        (begin
          (if (not (g$fixnum?$6427$DDDPb g$a$7619$DDDPb))
            (assertion-violation 'fxmin '"not a fixnum" g$a$7619$DDDPb)
            (void))
          (g$fold-left$5756$DDDPb
            (case-lambda
              ((g$a$7621$DDDPb g$b$7622$DDDPb)
               (if (fx>? g$a$7621$DDDPb g$b$7622$DDDPb)
                 g$b$7622$DDDPb
                 g$a$7621$DDDPb)))
            g$a$7619$DDDPb
            g$rest$7620$DDDPb)))))
   (g$fx*/carry$7568$DDDPb
     g$fx*/carry$7673$DDDPb
     (case-lambda
       ((g$fx1$7623$DDDPb g$fx2$7624$DDDPb g$fx3$7625$DDDPb)
        ((case-lambda
           ((g$s$7626$DDDPb g$e$7627$DDDPb)
            (values
              (g$mod0$6418$DDDPb g$s$7626$DDDPb g$e$7627$DDDPb)
              (g$div0$6416$DDDPb g$s$7626$DDDPb g$e$7627$DDDPb))))
         (+ (* g$fx1$7623$DDDPb g$fx2$7624$DDDPb) g$fx3$7625$DDDPb)
         (expt '2 (g$fixnum-width$6429$DDDPb))))))
   (g$fx-/carry$7569$DDDPb
     g$fx-/carry$7674$DDDPb
     (case-lambda
       ((g$fx1$7628$DDDPb g$fx2$7629$DDDPb g$fx3$7630$DDDPb)
        ((case-lambda
           ((g$s$7631$DDDPb g$e$7632$DDDPb)
            (values
              (g$mod0$6418$DDDPb g$s$7631$DDDPb g$e$7632$DDDPb)
              (g$div0$6416$DDDPb g$s$7631$DDDPb g$e$7632$DDDPb))))
         (- g$fx1$7628$DDDPb g$fx2$7629$DDDPb g$fx3$7630$DDDPb)
         (expt '2 (g$fixnum-width$6429$DDDPb))))))
   (g$fx+/carry$7570$DDDPb
     g$fx+/carry$7675$DDDPb
     (case-lambda
       ((g$fx1$7633$DDDPb g$fx2$7634$DDDPb g$fx3$7635$DDDPb)
        ((case-lambda
           ((g$s$7636$DDDPb g$e$7637$DDDPb)
            (values
              (g$mod0$6418$DDDPb g$s$7636$DDDPb g$e$7637$DDDPb)
              (g$div0$6416$DDDPb g$s$7636$DDDPb g$e$7637$DDDPb))))
         (+ g$fx1$7633$DDDPb g$fx2$7634$DDDPb g$fx3$7635$DDDPb)
         (expt '2 (g$fixnum-width$6429$DDDPb))))))
   (g$fxif$7571$DDDPb
     g$fxif$7676$DDDPb
     (case-lambda
       ((g$fx1$7638$DDDPb g$fx2$7639$DDDPb g$fx3$7640$DDDPb)
        (fxior
          (fxand g$fx1$7638$DDDPb g$fx2$7639$DDDPb)
          (fxand (fxnot g$fx1$7638$DDDPb) g$fx3$7640$DDDPb)))))
   (g$fxcopy-bit$7572$DDDPb
     g$fxcopy-bit$7677$DDDPb
     (case-lambda
       ((g$fx1$7641$DDDPb g$fx2$7642$DDDPb g$fx3$7643$DDDPb)
        (g$fxif$7571$DDDPb
          (g$fxarithmetic-shift-left$7575$DDDPb '1 g$fx2$7642$DDDPb)
          (g$fxarithmetic-shift-left$7575$DDDPb
            g$fx3$7643$DDDPb
            g$fx2$7642$DDDPb)
          g$fx1$7641$DDDPb))))
   (g$fxbit-field$7573$DDDPb
     g$fxbit-field$7678$DDDPb
     (case-lambda
       ((g$fx1$7644$DDDPb g$fx2$7645$DDDPb g$fx3$7646$DDDPb)
        (g$fxarithmetic-shift-right$7576$DDDPb
          (fxand
            g$fx1$7644$DDDPb
            (fxnot
              (g$fxarithmetic-shift-left$7575$DDDPb
                '-1
                g$fx3$7646$DDDPb)))
          g$fx2$7645$DDDPb))))
   (g$fxcopy-bit-field$7574$DDDPb
     g$fxcopy-bit-field$7679$DDDPb
     (case-lambda
       ((g$to$7647$DDDPb
          g$start$7648$DDDPb
          g$end$7649$DDDPb
          g$from$7650$DDDPb)
        (g$fxif$7571$DDDPb
          (fxand
            (g$fxarithmetic-shift-left$7575$DDDPb
              '-1
              g$start$7648$DDDPb)
            (fxnot
              (g$fxarithmetic-shift-left$7575$DDDPb
                '-1
                g$end$7649$DDDPb)))
          (g$fxarithmetic-shift-left$7575$DDDPb
            g$from$7650$DDDPb
            g$start$7648$DDDPb)
          g$to$7647$DDDPb))))
   (g$fxarithmetic-shift-left$7575$DDDPb
     g$fxarithmetic-shift-left$7680$DDDPb
     (case-lambda
       ((g$fx1$7651$DDDPb g$fx2$7652$DDDPb)
        (fxarithmetic-shift g$fx1$7651$DDDPb g$fx2$7652$DDDPb))))
   (g$fxarithmetic-shift-right$7576$DDDPb
     g$fxarithmetic-shift-right$7681$DDDPb
     (case-lambda
       ((g$fx1$7653$DDDPb g$fx2$7654$DDDPb)
        (fxarithmetic-shift g$fx1$7653$DDDPb (fx- g$fx2$7654$DDDPb)))))
   (g$fxrotate-bit-field$7577$DDDPb
     g$fxrotate-bit-field$7682$DDDPb
     (case-lambda
       ((g$n$7655$DDDPb
          g$start$7656$DDDPb
          g$end$7657$DDDPb
          g$count$7658$DDDPb)
        ((case-lambda
           ((g$width$7659$DDDPb)
            (if (g$fxpositive?$7561$DDDPb g$width$7659$DDDPb)
              ((case-lambda
                 ((g$count$7660$DDDPb g$field$7661$DDDPb)
                  (g$fxcopy-bit-field$7574$DDDPb
                    g$n$7655$DDDPb
                    g$start$7656$DDDPb
                    g$end$7657$DDDPb
                    (fxior
                      (g$fxarithmetic-shift-left$7575$DDDPb
                        g$field$7661$DDDPb
                        g$count$7660$DDDPb)
                      (g$fxarithmetic-shift-right$7576$DDDPb
                        g$field$7661$DDDPb
                        (fx- g$width$7659$DDDPb g$count$7660$DDDPb))))))
               (g$fxmod$7559$DDDPb
                 g$count$7658$DDDPb
                 g$width$7659$DDDPb)
               (g$fxbit-field$7573$DDDPb
                 g$n$7655$DDDPb
                 g$start$7656$DDDPb
                 g$end$7657$DDDPb))
              g$n$7655$DDDPb)))
         (fx- g$end$7657$DDDPb g$start$7656$DDDPb))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$fldiv-and-mod$7683$DDDPb
     g$fldiv-and-mod$7800$DDDPb
     (case-lambda
       ((g$fl1$7715$DDDPb g$fl2$7716$DDDPb)
        (call-with-values
          (case-lambda
            (() (div-and-mod g$fl1$7715$DDDPb g$fl2$7716$DDDPb)))
          (case-lambda
            ((g$n$7719$DDDPb g$d$7720$DDDPb)
             ((case-lambda
                ((g$d$7721$DDDPb g$n$7722$DDDPb)
                 (values (real->flonum g$n$7722$DDDPb) g$d$7721$DDDPb)))
              g$d$7720$DDDPb
              g$n$7719$DDDPb)))))))
   (g$fldiv0-and-mod0$7684$DDDPb
     g$fldiv0-and-mod0$7801$DDDPb
     (case-lambda
       ((g$fl1$7723$DDDPb g$fl2$7724$DDDPb)
        (call-with-values
          (case-lambda
            (() (div0-and-mod0 g$fl1$7723$DDDPb g$fl2$7724$DDDPb)))
          (case-lambda
            ((g$n$7727$DDDPb g$d$7728$DDDPb)
             ((case-lambda
                ((g$d$7729$DDDPb g$n$7730$DDDPb)
                 (values (real->flonum g$n$7730$DDDPb) g$d$7729$DDDPb)))
              g$d$7728$DDDPb
              g$n$7727$DDDPb)))))))
   (g$fldiv$7685$DDDPb
     g$fldiv$7802$DDDPb
     (case-lambda
       ((g$fl1$7731$DDDPb g$fl2$7732$DDDPb)
        (call-with-values
          (case-lambda
            (()
             (g$fldiv-and-mod$7683$DDDPb
               g$fl1$7731$DDDPb
               g$fl2$7732$DDDPb)))
          (case-lambda
            ((g$n$7735$DDDPb g$d$7736$DDDPb)
             ((case-lambda
                ((g$d$7737$DDDPb g$n$7738$DDDPb) g$n$7738$DDDPb))
              g$d$7736$DDDPb
              g$n$7735$DDDPb)))))))
   (g$fldiv0$7686$DDDPb
     g$fldiv0$7803$DDDPb
     (case-lambda
       ((g$fl1$7739$DDDPb g$fl2$7740$DDDPb)
        (call-with-values
          (case-lambda
            (()
             (g$fldiv0-and-mod0$7684$DDDPb
               g$fl1$7739$DDDPb
               g$fl2$7740$DDDPb)))
          (case-lambda
            ((g$n$7743$DDDPb g$d$7744$DDDPb)
             ((case-lambda
                ((g$d$7745$DDDPb g$n$7746$DDDPb) g$n$7746$DDDPb))
              g$d$7744$DDDPb
              g$n$7743$DDDPb)))))))
   (g$flmod$7687$DDDPb
     g$flmod$7804$DDDPb
     (case-lambda
       ((g$fl1$7747$DDDPb g$fl2$7748$DDDPb)
        (call-with-values
          (case-lambda
            (()
             (g$fldiv-and-mod$7683$DDDPb
               g$fl1$7747$DDDPb
               g$fl2$7748$DDDPb)))
          (case-lambda
            ((g$n$7751$DDDPb g$d$7752$DDDPb)
             ((case-lambda
                ((g$d$7753$DDDPb g$n$7754$DDDPb) g$d$7753$DDDPb))
              g$d$7752$DDDPb
              g$n$7751$DDDPb)))))))
   (g$flmod0$7688$DDDPb
     g$flmod0$7805$DDDPb
     (case-lambda
       ((g$fl1$7755$DDDPb g$fl2$7756$DDDPb)
        (call-with-values
          (case-lambda
            (()
             (g$fldiv0-and-mod0$7684$DDDPb
               g$fl1$7755$DDDPb
               g$fl2$7756$DDDPb)))
          (case-lambda
            ((g$n$7759$DDDPb g$d$7760$DDDPb)
             ((case-lambda
                ((g$d$7761$DDDPb g$n$7762$DDDPb) g$d$7761$DDDPb))
              g$d$7760$DDDPb
              g$n$7759$DDDPb)))))))
   (g$flinteger?$7689$DDDPb
     g$flinteger?$7806$DDDPb
     (case-lambda
       ((g$fl$7763$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7763$DDDPb))
            (assertion-violation
              'flinteger?
              '"not a flonum"
              g$fl$7763$DDDPb)
            (void))
          (fl=? '0.0 (g$flmod$7687$DDDPb g$fl$7763$DDDPb '1.0))))))
   (g$flfinite?$7690$DDDPb
     g$flfinite?$7807$DDDPb
     (case-lambda
       ((g$fl$7764$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7764$DDDPb))
            (assertion-violation
              'flfinite?
              '"not a flonum"
              g$fl$7764$DDDPb)
            (void))
          (not (g$flinfinite?$7691$DDDPb g$fl$7764$DDDPb))))))
   (g$flinfinite?$7691$DDDPb
     g$flinfinite?$7808$DDDPb
     (case-lambda
       ((g$fl$7765$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7765$DDDPb))
            (assertion-violation
              'flinfinite?
              '"not a flonum"
              g$fl$7765$DDDPb)
            (void))
          (clr-call-internal
            'system.double
            'isinfinity
            '()
            g$fl$7765$DDDPb)))))
   (g$flnan?$7692$DDDPb
     g$flnan?$7809$DDDPb
     (case-lambda
       ((g$fl$7766$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7766$DDDPb))
            (assertion-violation
              'flnan?
              '"not a flonum"
              g$fl$7766$DDDPb)
            (void))
          (clr-call-internal
            'system.double
            'isnan
            '()
            g$fl$7766$DDDPb)))))
   (g$flsin$7693$DDDPb
     g$flsin$7810$DDDPb
     (case-lambda
       ((g$fl$7767$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7767$DDDPb))
            (assertion-violation 'flsin '"not a flonum" g$fl$7767$DDDPb)
            (void))
          (clr-call-internal 'system.math 'sin '() g$fl$7767$DDDPb)))))
   (g$flcos$7694$DDDPb
     g$flcos$7811$DDDPb
     (case-lambda
       ((g$fl$7768$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7768$DDDPb))
            (assertion-violation 'flcos '"not a flonum" g$fl$7768$DDDPb)
            (void))
          (clr-call-internal 'system.math 'cos '() g$fl$7768$DDDPb)))))
   (g$fltan$7695$DDDPb
     g$fltan$7812$DDDPb
     (case-lambda
       ((g$fl$7769$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7769$DDDPb))
            (assertion-violation 'fltan '"not a flonum" g$fl$7769$DDDPb)
            (void))
          (clr-call-internal 'system.math 'tan '() g$fl$7769$DDDPb)))))
   (g$flasin$7696$DDDPb
     g$flasin$7813$DDDPb
     (case-lambda
       ((g$fl$7770$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7770$DDDPb))
            (assertion-violation
              'flasin
              '"not a flonum"
              g$fl$7770$DDDPb)
            (void))
          (clr-call-internal 'system.math 'asin '() g$fl$7770$DDDPb)))))
   (g$flacos$7697$DDDPb
     g$flacos$7814$DDDPb
     (case-lambda
       ((g$fl$7771$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7771$DDDPb))
            (assertion-violation
              'flacos
              '"not a flonum"
              g$fl$7771$DDDPb)
            (void))
          (clr-call-internal 'system.math 'acos '() g$fl$7771$DDDPb)))))
   (g$flatan$7698$DDDPb
     g$flatan$7815$DDDPb
     (case-lambda
       ((g$fl$7772$DDDPb)
        (clr-call-internal 'system.math 'atan '() g$fl$7772$DDDPb))
       ((g$fl1$7773$DDDPb g$fl2$7774$DDDPb)
        (clr-call-internal
          'system.math
          'atan2
          '()
          g$fl1$7773$DDDPb
          g$fl2$7774$DDDPb))))
   (g$fllog$7699$DDDPb
     g$fllog$7816$DDDPb
     (case-lambda
       ((g$fl$7775$DDDPb)
        (clr-call-internal 'system.math 'log '() g$fl$7775$DDDPb))
       ((g$fl1$7776$DDDPb g$fl2$7777$DDDPb)
        (clr-call-internal
          'system.math
          'log
          '()
          g$fl1$7776$DDDPb
          g$fl2$7777$DDDPb))))
   (g$flsqrt$7700$DDDPb
     g$flsqrt$7817$DDDPb
     (case-lambda
       ((g$fl$7778$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7778$DDDPb))
            (assertion-violation
              'flsqrt
              '"not a flonum"
              g$fl$7778$DDDPb)
            (void))
          (clr-call-internal 'system.math 'sqrt '() g$fl$7778$DDDPb)))))
   (g$flexp$7701$DDDPb
     g$flexp$7818$DDDPb
     (case-lambda
       ((g$fl$7779$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7779$DDDPb))
            (assertion-violation 'flexp '"not a flonum" g$fl$7779$DDDPb)
            (void))
          (clr-call-internal 'system.math 'exp '() g$fl$7779$DDDPb)))))
   (g$flexpt$7702$DDDPb
     g$flexpt$7819$DDDPb
     (case-lambda
       ((g$fl$7780$DDDPb g$n$7781$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7780$DDDPb))
            (assertion-violation
              'flexpt
              '"not a flonum"
              g$fl$7780$DDDPb)
            (void))
          (clr-call-internal
            'system.math
            'pow
            '()
            g$fl$7780$DDDPb
            g$n$7781$DDDPb)))))
   (g$flceiling$7703$DDDPb
     g$flceiling$7820$DDDPb
     (case-lambda
       ((g$fl$7782$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7782$DDDPb))
            (assertion-violation
              'flceiling
              '"not a flonum"
              g$fl$7782$DDDPb)
            (void))
          (clr-call-internal
            'system.math
            '"ceiling(double)"
            '()
            g$fl$7782$DDDPb)))))
   (g$flfloor$7704$DDDPb
     g$flfloor$7821$DDDPb
     (case-lambda
       ((g$fl$7783$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7783$DDDPb))
            (assertion-violation
              'flfloor
              '"not a flonum"
              g$fl$7783$DDDPb)
            (void))
          (clr-call-internal
            'system.math
            '"floor(double)"
            '()
            g$fl$7783$DDDPb)))))
   (g$fltruncate$7705$DDDPb
     g$fltruncate$7822$DDDPb
     (case-lambda
       ((g$fl$7784$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7784$DDDPb))
            (assertion-violation
              'fltruncate
              '"not a flonum"
              g$fl$7784$DDDPb)
            (void))
          (clr-call-internal
            'system.math
            '"truncate(double)"
            '()
            g$fl$7784$DDDPb)))))
   (g$flround$7706$DDDPb
     g$flround$7823$DDDPb
     (case-lambda
       ((g$fl$7785$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7785$DDDPb))
            (assertion-violation
              'flround
              '"not a flonum"
              g$fl$7785$DDDPb)
            (void))
          (clr-call-internal
            'system.math
            '"round(double)"
            '()
            g$fl$7785$DDDPb)))))
   (g$flabs$7707$DDDPb
     g$flabs$7824$DDDPb
     (case-lambda
       ((g$fl$7786$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$fl$7786$DDDPb))
            (assertion-violation 'flabs '"not a flonum" g$fl$7786$DDDPb)
            (void))
          (clr-call-internal
            'system.math
            '"abs(double)"
            '()
            g$fl$7786$DDDPb)))))
   (g$flpositive?$7708$DDDPb
     g$flpositive?$7825$DDDPb
     (case-lambda
       ((g$r$7787$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$r$7787$DDDPb))
            (assertion-violation
              'flpositive?
              '"not a flonum"
              g$r$7787$DDDPb)
            (void))
          (fl<? '0.0 g$r$7787$DDDPb)))))
   (g$flnegative?$7709$DDDPb
     g$flnegative?$7826$DDDPb
     (case-lambda
       ((g$r$7788$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$r$7788$DDDPb))
            (assertion-violation
              'flnegative?
              '"not a flonum"
              g$r$7788$DDDPb)
            (void))
          (fl>? '0.0 g$r$7788$DDDPb)))))
   (g$flzero?$7710$DDDPb
     g$flzero?$7827$DDDPb
     (case-lambda
       ((g$r$7789$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$r$7789$DDDPb))
            (assertion-violation
              'flzero?
              '"not a flonum"
              g$r$7789$DDDPb)
            (void))
          (fl=? '0.0 g$r$7789$DDDPb)))))
   (g$fleven?$7711$DDDPb
     g$fleven?$7828$DDDPb
     (case-lambda
       ((g$n$7790$DDDPb)
        (begin
          (if (not (integer-valued? g$n$7790$DDDPb))
            (assertion-violation
              'fleven?
              '"not integer valued"
              g$n$7790$DDDPb)
            (void))
          (fl=? '0.0 (g$flmod$7687$DDDPb g$n$7790$DDDPb '2.0))))))
   (g$flodd?$7712$DDDPb
     g$flodd?$7829$DDDPb
     (case-lambda
       ((g$n$7791$DDDPb)
        (begin
          (if (not (integer-valued? g$n$7791$DDDPb))
            (assertion-violation
              'flodd?
              '"not integer valued"
              g$n$7791$DDDPb)
            (void))
          (fl=? '1.0 (g$flmod$7687$DDDPb g$n$7791$DDDPb '2.0))))))
   (g$flmax$7713$DDDPb
     g$flmax$7830$DDDPb
     (case-lambda
       ((g$a$7792$DDDPb . g$rest$7793$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$a$7792$DDDPb))
            (assertion-violation 'flmax '"not a flonum" g$a$7792$DDDPb)
            (void))
          (g$fold-left$5756$DDDPb
            (case-lambda
              ((g$a$7794$DDDPb g$b$7795$DDDPb)
               (if (fl<? g$a$7794$DDDPb g$b$7795$DDDPb)
                 g$b$7795$DDDPb
                 g$a$7794$DDDPb)))
            g$a$7792$DDDPb
            g$rest$7793$DDDPb)))))
   (g$flmin$7714$DDDPb
     g$flmin$7831$DDDPb
     (case-lambda
       ((g$a$7796$DDDPb . g$rest$7797$DDDPb)
        (begin
          (if (not (g$flonum?$6428$DDDPb g$a$7796$DDDPb))
            (assertion-violation 'flmin '"not a flonum" g$a$7796$DDDPb)
            (void))
          (g$fold-left$5756$DDDPb
            (case-lambda
              ((g$a$7798$DDDPb g$b$7799$DDDPb)
               (if (fl>? g$a$7798$DDDPb g$b$7799$DDDPb)
                 g$b$7799$DDDPb
                 g$a$7798$DDDPb)))
            g$a$7796$DDDPb
            g$rest$7797$DDDPb))))))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$7833$DDDPb
     g$using$7853$DDDPb
     (clr-using-internal 'ironscheme.runtime))
   (g$put-datum$7834$DDDPb
     g$put-datum$7854$DDDPb
     (case-lambda
       ((g$p$7842$DDDPb g$datum$7843$DDDPb)
        (write g$datum$7843$DDDPb g$p$7842$DDDPb))))
   (g$get-datum$7835$DDDPb g$get-datum$7855$DDDPb read)
   (g$get-output-string$7836$DDDPb
     g$get-output-string$7856$DDDPb
     (case-lambda
       ((g$port$7844$DDDPb)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$7844$DDDPb))))
   (g$open-output-string$7837$DDDPb
     g$open-output-string$7857$DDDPb
     (case-lambda
       (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$7838$DDDPb
     g$open-string-output-port$7858$DDDPb
     (case-lambda
       (()
        ((case-lambda
           ((g$p$7845$DDDPb)
            (values
              g$p$7845$DDDPb
              (case-lambda
                (() (g$get-output-string$7836$DDDPb g$p$7845$DDDPb))))))
         (g$open-output-string$7837$DDDPb)))))
   (g$port?$7839$DDDPb
     g$port?$7859$DDDPb
     (case-lambda
       ((g$obj$7846$DDDPb)
        ((case-lambda
           ((g$t$7847$DDDPb)
            (if g$t$7847$DDDPb
              g$t$7847$DDDPb
              (begin '#f (binary-port? g$obj$7846$DDDPb)))))
         (textual-port? g$obj$7846$DDDPb)))))
   (g$call-with-string-output-port$7840$DDDPb
     g$call-with-string-output-port$7860$DDDPb
     (case-lambda
       ((g$proc$7848$DDDPb)
        ((case-lambda
           ((g$p$7849$DDDPb)
            (begin
              (g$call-with-port$7841$DDDPb
                g$p$7849$DDDPb
                g$proc$7848$DDDPb)
              (g$get-output-string$7836$DDDPb g$p$7849$DDDPb))))
         (g$open-output-string$7837$DDDPb)))))
   (g$call-with-port$7841$DDDPb
     g$call-with-port$7861$DDDPb
     (case-lambda
       ((g$port$7850$DDDPb g$proc$7851$DDDPb)
        ((case-lambda
           ((g$r$7852$DDDPb)
            (begin (close-port g$port$7850$DDDPb) g$r$7852$DDDPb)))
         (g$proc$7851$DDDPb g$port$7850$DDDPb))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$7862$DDDPb
     g$peek-char$7914$DDDPb
     (case-lambda
       (() (g$peek-char$7862$DDDPb (current-input-port)))
       ((g$port$7886$DDDPb) (lookahead-char g$port$7886$DDDPb))))
   (g$read-char$7863$DDDPb
     g$read-char$7915$DDDPb
     (case-lambda
       (() (g$read-char$7863$DDDPb (current-input-port)))
       ((g$port$7887$DDDPb) (get-char g$port$7887$DDDPb))))
   (g$write-char$7864$DDDPb
     g$write-char$7916$DDDPb
     (case-lambda
       ((g$chr$7888$DDDPb)
        (g$write-char$7864$DDDPb
          g$chr$7888$DDDPb
          (current-output-port)))
       ((g$chr$7889$DDDPb g$port$7890$DDDPb)
        (put-char g$port$7890$DDDPb g$chr$7889$DDDPb))))
   (g$with-input-from-file$7881$DDDPb
     g$with-input-from-file$7917$DDDPb
     (case-lambda
       ((g$filename$7891$DDDPb g$thunk$7892$DDDPb)
        ((case-lambda
           ((g$current-input-port$7895$DDDPb g$t$7896$DDDPb)
            ((case-lambda
               ((g$swap$7897$DDDPb)
                (dynamic-wind
                  g$swap$7897$DDDPb
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$7892$DDDPb)))
                       (case-lambda
                         (()
                          (close-input-port (current-input-port)))))))
                  g$swap$7897$DDDPb)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$7898$DDDPb)
                    (begin
                      (g$current-input-port$7895$DDDPb g$t$7896$DDDPb)
                      (set! g$t$7896$DDDPb g$t$7898$DDDPb))))
                 (g$current-input-port$7895$DDDPb)))))))
         current-input-port
         (open-input-file g$filename$7891$DDDPb)))))
   (g$with-output-to-file$7882$DDDPb
     g$with-output-to-file$7918$DDDPb
     (case-lambda
       ((g$filename$7899$DDDPb g$thunk$7900$DDDPb)
        ((case-lambda
           ((g$current-output-port$7903$DDDPb g$t$7904$DDDPb)
            ((case-lambda
               ((g$swap$7905$DDDPb)
                (dynamic-wind
                  g$swap$7905$DDDPb
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$7900$DDDPb)))
                       (case-lambda
                         (()
                          (close-output-port (current-output-port)))))))
                  g$swap$7905$DDDPb)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$7906$DDDPb)
                    (begin
                      (g$current-output-port$7903$DDDPb g$t$7904$DDDPb)
                      (set! g$t$7904$DDDPb g$t$7906$DDDPb))))
                 (g$current-output-port$7903$DDDPb)))))))
         current-output-port
         (open-output-file g$filename$7899$DDDPb)))))
   (g$call-with-input-file$7883$DDDPb
     g$call-with-input-file$7919$DDDPb
     (case-lambda
       ((g$filename$7907$DDDPb g$proc$7908$DDDPb)
        ((case-lambda
           ((g$p$7909$DDDPb)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$7908$DDDPb g$p$7909$DDDPb)))
              (case-lambda (() (close-input-port g$p$7909$DDDPb))))))
         (open-input-file g$filename$7907$DDDPb)))))
   (g$call-with-output-file$7884$DDDPb
     g$call-with-output-file$7920$DDDPb
     (case-lambda
       ((g$filename$7910$DDDPb g$proc$7911$DDDPb)
        ((case-lambda
           ((g$p$7912$DDDPb)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$7911$DDDPb g$p$7912$DDDPb)))
              (case-lambda (() (close-output-port g$p$7912$DDDPb))))))
         (open-output-file g$filename$7910$DDDPb)))))
   (g$newline$7885$DDDPb
     g$newline$7921$DDDPb
     (case-lambda
       (() (g$newline$7885$DDDPb (current-output-port)))
       ((g$port$7913$DDDPb) (display '"
" g$port$7913$DDDPb)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$6633$7922$DDDPb
     g$6633$8035$DDDPb
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$6635$7923$DDDPb g$6635$8036$DDDPb '#f)
   (g$6634$7924$DDDPb
     g$6634$8037$DDDPb
     (make-record-constructor-descriptor
       g$6633$7922$DDDPb
       '#f
       g$6635$7923$DDDPb))
   (g$enum?$7927$DDDPb
     g$enum?$8038$DDDPb
     (record-predicate g$6633$7922$DDDPb))
   (g$make-enum$7928$DDDPb
     g$make-enum$8039$DDDPb
     (record-constructor g$6634$7924$DDDPb))
   (g$enum-value$7929$DDDPb
     g$enum-value$8040$DDDPb
     (record-accessor g$6633$7922$DDDPb '0))
   (g$enum-info$7930$DDDPb
     g$enum-info$8041$DDDPb
     (record-accessor g$6633$7922$DDDPb '1))
   (g$6644$7931$DDDPb
     g$6644$8042$DDDPb
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$6646$7932$DDDPb g$6646$8043$DDDPb '#f)
   (g$6645$7933$DDDPb
     g$6645$8044$DDDPb
     (make-record-constructor-descriptor
       g$6644$7931$DDDPb
       '#f
       g$6646$7932$DDDPb))
   (g$enum-universe?$7936$DDDPb
     g$enum-universe?$8045$DDDPb
     (record-predicate g$6644$7931$DDDPb))
   (g$make-enum-universe$7937$DDDPb
     g$make-enum-universe$8046$DDDPb
     (record-constructor g$6645$7933$DDDPb))
   (g$enum-universe-id$7938$DDDPb
     g$enum-universe-id$8047$DDDPb
     (record-accessor g$6644$7931$DDDPb '0))
   (g$enum-universe-symbols$7939$DDDPb
     g$enum-universe-symbols$8048$DDDPb
     (record-accessor g$6644$7931$DDDPb '1))
   (g$enum-universe-mapping$7940$DDDPb
     g$enum-universe-mapping$8049$DDDPb
     (record-accessor g$6644$7931$DDDPb '2))
   (g$enum-universe-value$7941$DDDPb
     g$enum-universe-value$8050$DDDPb
     (record-accessor g$6644$7931$DDDPb '3))
   (g$enum-type=?$7942$DDDPb
     g$enum-type=?$8051$DDDPb
     (case-lambda
       ((g$enumset1$7964$DDDPb g$enumset2$7965$DDDPb)
        (eq? (g$enum-universe-id$7938$DDDPb
               (g$enum-info$7930$DDDPb g$enumset1$7964$DDDPb))
             (g$enum-universe-id$7938$DDDPb
               (g$enum-info$7930$DDDPb g$enumset2$7965$DDDPb))))))
   (g$get-symbols$7943$DDDPb
     g$get-symbols$8052$DDDPb
     (case-lambda
       ((g$enumset$7966$DDDPb)
        (g$enum-universe-symbols$7939$DDDPb
          (g$enum-info$7930$DDDPb g$enumset$7966$DDDPb)))))
   (g$get-value$7944$DDDPb
     g$get-value$8053$DDDPb
     (case-lambda
       ((g$enumset$7967$DDDPb g$s$7968$DDDPb)
        (g$hashtable-ref$6526$DDDPb
          (g$enum-universe-mapping$7940$DDDPb
            (g$enum-info$7930$DDDPb g$enumset$7967$DDDPb))
          g$s$7968$DDDPb
          '#f))))
   (g$assert-enum$7945$DDDPb
     g$assert-enum$8054$DDDPb
     (case-lambda
       ((g$who$7969$DDDPb g$enumset$7970$DDDPb)
        (if (not (g$enum?$7927$DDDPb g$enumset$7970$DDDPb))
          (assertion-violation
            g$who$7969$DDDPb
            '"not an enumeration"
            g$enumset$7970$DDDPb)
          (void)))))
   (g$make-info$7946$DDDPb
     g$make-info$8055$DDDPb
     (case-lambda
       ((g$symbols$7971$DDDPb)
        ((case-lambda
           ((g$ht$7972$DDDPb)
            ((letrec ((g$f$7973$DDDPb
                        (case-lambda
                          ((g$s$7974$DDDPb
                             g$a$7975$DDDPb
                             g$mask$7976$DDDPb)
                           (if (null? g$s$7974$DDDPb)
                             (values
                               (reverse! g$a$7975$DDDPb)
                               g$ht$7972$DDDPb
                               (- g$mask$7976$DDDPb '1))
                             ((case-lambda
                                ((g$n$7977$DDDPb)
                                 (if (g$symbol?$6424$DDDPb
                                       g$n$7977$DDDPb)
                                   (if (g$hashtable-contains?$6529$DDDPb
                                         g$ht$7972$DDDPb
                                         g$n$7977$DDDPb)
                                     (g$f$7973$DDDPb
                                       (cdr g$s$7974$DDDPb)
                                       g$a$7975$DDDPb
                                       g$mask$7976$DDDPb)
                                     (begin
                                       (g$hashtable-set!$6527$DDDPb
                                         g$ht$7972$DDDPb
                                         g$n$7977$DDDPb
                                         g$mask$7976$DDDPb)
                                       (g$f$7973$DDDPb
                                         (cdr g$s$7974$DDDPb)
                                         (cons
                                           g$n$7977$DDDPb
                                           g$a$7975$DDDPb)
                                         (g$bitwise-arithmetic-shift-left$7554$DDDPb
                                           g$mask$7976$DDDPb
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$7977$DDDPb))))
                              (car g$s$7974$DDDPb)))))))
               g$f$7973$DDDPb)
             g$symbols$7971$DDDPb
             '()
             '1)))
         (g$make-eq-hashtable$6523$DDDPb)))))
   (g$make-name$7947$DDDPb
     g$make-name$8056$DDDPb
     (case-lambda
       ((g$symbols$7978$DDDPb)
        (string->symbol
          (g$format$8095$DDDPb '"~a" g$symbols$7978$DDDPb)))))
   (g$make-enumeration$7948$DDDPb
     g$make-enumeration$8057$DDDPb
     (case-lambda
       ((g$symbols$7979$DDDPb)
        (call-with-values
          (case-lambda
            (() (g$make-info$7946$DDDPb g$symbols$7979$DDDPb)))
          (case-lambda
            ((g$s$7983$DDDPb g$mapping$7984$DDDPb g$mask$7985$DDDPb)
             ((case-lambda
                ((g$mask$7986$DDDPb g$mapping$7987$DDDPb g$s$7988$DDDPb)
                 (g$make-enum$7928$DDDPb
                   g$mask$7986$DDDPb
                   (g$make-enum-universe$7937$DDDPb
                     (g$make-name$7947$DDDPb g$s$7988$DDDPb)
                     g$s$7988$DDDPb
                     g$mapping$7987$DDDPb
                     g$mask$7986$DDDPb))))
              g$mask$7985$DDDPb
              g$mapping$7984$DDDPb
              g$s$7983$DDDPb)))))))
   (g$enum-set-universe$7949$DDDPb
     g$enum-set-universe$8058$DDDPb
     (case-lambda
       ((g$enumset$7989$DDDPb)
        (begin
          (g$assert-enum$7945$DDDPb
            'enum-set-universe
            g$enumset$7989$DDDPb)
          ((case-lambda
             ((g$ei$7990$DDDPb)
              (g$make-enum$7928$DDDPb
                (g$enum-universe-value$7941$DDDPb g$ei$7990$DDDPb)
                g$ei$7990$DDDPb)))
           (g$enum-info$7930$DDDPb g$enumset$7989$DDDPb))))))
   (g$enum-set-indexer$7950$DDDPb
     g$enum-set-indexer$8059$DDDPb
     (case-lambda
       ((g$enumset$7991$DDDPb)
        (begin
          (g$assert-enum$7945$DDDPb
            'enum-set-indexer
            g$enumset$7991$DDDPb)
          (case-lambda
            ((g$symbol$7992$DDDPb)
             (begin
               (if (not (g$symbol?$6424$DDDPb g$symbol$7992$DDDPb))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$7992$DDDPb)
                 (void))
               ((case-lambda
                  ((g$v$7993$DDDPb)
                   (if g$v$7993$DDDPb
                     (- (bitwise-length g$v$7993$DDDPb) '1)
                     '#f)))
                (g$get-value$7944$DDDPb
                  g$enumset$7991$DDDPb
                  g$symbol$7992$DDDPb)))))))))
   (g$enum-set-constructor$7951$DDDPb
     g$enum-set-constructor$8060$DDDPb
     (case-lambda
       ((g$enumset$7994$DDDPb)
        (begin
          (g$assert-enum$7945$DDDPb
            'enum-set-constructor
            g$enumset$7994$DDDPb)
          (case-lambda
            ((g$symbols$7995$DDDPb)
             ((letrec ((g$f$7996$DDDPb
                         (case-lambda
                           ((g$v$7997$DDDPb g$s$7998$DDDPb)
                            (if (null? g$s$7998$DDDPb)
                              (g$make-enum$7928$DDDPb
                                g$v$7997$DDDPb
                                (g$enum-info$7930$DDDPb
                                  g$enumset$7994$DDDPb))
                              ((case-lambda
                                 ((g$n$7999$DDDPb)
                                  (if (g$symbol?$6424$DDDPb
                                        g$n$7999$DDDPb)
                                    ((case-lambda
                                       ((g$v*$8000$DDDPb)
                                        (if g$v*$8000$DDDPb
                                          (g$f$7996$DDDPb
                                            (bitwise-ior
                                              g$v$7997$DDDPb
                                              g$v*$8000$DDDPb)
                                            (cdr g$s$7998$DDDPb))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$7999$DDDPb))))
                                     (g$get-value$7944$DDDPb
                                       g$enumset$7994$DDDPb
                                       g$n$7999$DDDPb))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$7999$DDDPb))))
                               (car g$s$7998$DDDPb)))))))
                g$f$7996$DDDPb)
              '0
              g$symbols$7995$DDDPb)))))))
   (g$enum-set->list$7952$DDDPb
     g$enum-set->list$8061$DDDPb
     (case-lambda
       ((g$enumset$8001$DDDPb)
        (begin
          (g$assert-enum$7945$DDDPb
            'enum-set->list
            g$enumset$8001$DDDPb)
          ((case-lambda
             ((g$value$8002$DDDPb)
              ((letrec ((g$f$8003$DDDPb
                          (case-lambda
                            ((g$s$8004$DDDPb g$l$8005$DDDPb)
                             (if (null? g$s$8004$DDDPb)
                               (reverse! g$l$8005$DDDPb)
                               (if (g$zero?$6462$DDDPb
                                     (bitwise-and
                                       (g$get-value$7944$DDDPb
                                         g$enumset$8001$DDDPb
                                         (car g$s$8004$DDDPb))
                                       g$value$8002$DDDPb))
                                 (g$f$8003$DDDPb
                                   (cdr g$s$8004$DDDPb)
                                   g$l$8005$DDDPb)
                                 (g$f$8003$DDDPb
                                   (cdr g$s$8004$DDDPb)
                                   (cons
                                     (car g$s$8004$DDDPb)
                                     g$l$8005$DDDPb))))))))
                 g$f$8003$DDDPb)
               (g$get-symbols$7943$DDDPb g$enumset$8001$DDDPb)
               '())))
           (g$enum-value$7929$DDDPb g$enumset$8001$DDDPb))))))
   (g$enum-set-member?$7953$DDDPb
     g$enum-set-member?$8062$DDDPb
     (case-lambda
       ((g$symbol$8006$DDDPb g$enumset$8007$DDDPb)
        (begin
          (if (not (g$symbol?$6424$DDDPb g$symbol$8006$DDDPb))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$8006$DDDPb)
            (void))
          (g$assert-enum$7945$DDDPb
            'enum-set-member?
            g$enumset$8007$DDDPb)
          ((case-lambda
             ((g$v$8008$DDDPb)
              (if g$v$8008$DDDPb
                (not (g$zero?$6462$DDDPb
                       (bitwise-and
                         g$v$8008$DDDPb
                         (g$enum-value$7929$DDDPb
                           g$enumset$8007$DDDPb))))
                '#f)))
           (g$get-value$7944$DDDPb
             g$enumset$8007$DDDPb
             g$symbol$8006$DDDPb))))))
   (g$enum-set-subset?$7954$DDDPb
     g$enum-set-subset?$8063$DDDPb
     (case-lambda
       ((g$enumset1$8009$DDDPb g$enumset2$8010$DDDPb)
        (begin
          (g$assert-enum$7945$DDDPb
            'enum-set-subset?
            g$enumset1$8009$DDDPb)
          (g$assert-enum$7945$DDDPb
            'enum-set-subset?
            g$enumset2$8010$DDDPb)
          ((case-lambda
             ((g$v1$8011$DDDPb g$v2$8012$DDDPb)
              (if (g$enum-type=?$7942$DDDPb
                    g$enumset1$8009$DDDPb
                    g$enumset2$8010$DDDPb)
                (= (bitwise-and g$v1$8011$DDDPb g$v2$8012$DDDPb)
                   g$v1$8011$DDDPb)
                ((letrec ((g$f$8013$DDDPb
                            (case-lambda
                              ((g$s$8014$DDDPb)
                               (if (null? g$s$8014$DDDPb)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$8015$DDDPb g$v2*$8016$DDDPb)
                                     (if g$v2*$8016$DDDPb
                                       ((case-lambda
                                          ((g$has1$8017$DDDPb
                                             g$has2$8018$DDDPb)
                                           (if (if g$has1$8017$DDDPb
                                                 (begin
                                                   '#f
                                                   (not g$has2$8018$DDDPb))
                                                 '#f)
                                             '#f
                                             (g$f$8013$DDDPb
                                               (cdr g$s$8014$DDDPb)))))
                                        (not (g$zero?$6462$DDDPb
                                               (bitwise-and
                                                 g$v1$8011$DDDPb
                                                 g$v1*$8015$DDDPb)))
                                        (not (g$zero?$6462$DDDPb
                                               (bitwise-and
                                                 g$v2$8012$DDDPb
                                                 g$v2*$8016$DDDPb))))
                                       '#f)))
                                  (g$get-value$7944$DDDPb
                                    g$enumset1$8009$DDDPb
                                    (car g$s$8014$DDDPb))
                                  (g$get-value$7944$DDDPb
                                    g$enumset2$8010$DDDPb
                                    (car g$s$8014$DDDPb))))))))
                   g$f$8013$DDDPb)
                 (g$get-symbols$7943$DDDPb g$enumset1$8009$DDDPb)))))
           (g$enum-value$7929$DDDPb g$enumset1$8009$DDDPb)
           (g$enum-value$7929$DDDPb g$enumset2$8010$DDDPb))))))
   (g$enum-set=?$7955$DDDPb
     g$enum-set=?$8064$DDDPb
     (case-lambda
       ((g$enumset1$8019$DDDPb g$enumset2$8020$DDDPb)
        (begin
          (g$assert-enum$7945$DDDPb 'enum-set=? g$enumset1$8019$DDDPb)
          (g$assert-enum$7945$DDDPb 'enum-set=? g$enumset2$8020$DDDPb)
          (if (g$enum-set-subset?$7954$DDDPb
                g$enumset1$8019$DDDPb
                g$enumset2$8020$DDDPb)
            (begin
              '#f
              (g$enum-set-subset?$7954$DDDPb
                g$enumset2$8020$DDDPb
                g$enumset1$8019$DDDPb))
            '#f)))))
   (g$enum-set-union$7956$DDDPb
     g$enum-set-union$8065$DDDPb
     (case-lambda
       ((g$enumset1$8021$DDDPb g$enumset2$8022$DDDPb)
        (begin
          (g$assert-enum$7945$DDDPb
            'enum-set-union
            g$enumset1$8021$DDDPb)
          (g$assert-enum$7945$DDDPb
            'enum-set-union
            g$enumset2$8022$DDDPb)
          (if (g$enum-type=?$7942$DDDPb
                g$enumset1$8021$DDDPb
                g$enumset2$8022$DDDPb)
            (g$make-enum$7928$DDDPb
              (bitwise-ior
                (g$enum-value$7929$DDDPb g$enumset1$8021$DDDPb)
                (g$enum-value$7929$DDDPb g$enumset2$8022$DDDPb))
              (g$enum-info$7930$DDDPb g$enumset1$8021$DDDPb))
            '#f)))))
   (g$enum-set-intersection$7957$DDDPb
     g$enum-set-intersection$8066$DDDPb
     (case-lambda
       ((g$enumset1$8023$DDDPb g$enumset2$8024$DDDPb)
        (begin
          (g$assert-enum$7945$DDDPb
            'enum-set-intersection
            g$enumset1$8023$DDDPb)
          (g$assert-enum$7945$DDDPb
            'enum-set-intersection
            g$enumset2$8024$DDDPb)
          (if (g$enum-type=?$7942$DDDPb
                g$enumset1$8023$DDDPb
                g$enumset2$8024$DDDPb)
            (g$make-enum$7928$DDDPb
              (bitwise-and
                (g$enum-value$7929$DDDPb g$enumset1$8023$DDDPb)
                (g$enum-value$7929$DDDPb g$enumset2$8024$DDDPb))
              (g$enum-info$7930$DDDPb g$enumset1$8023$DDDPb))
            '#f)))))
   (g$enum-set-difference$7958$DDDPb
     g$enum-set-difference$8067$DDDPb
     (case-lambda
       ((g$enumset1$8025$DDDPb g$enumset2$8026$DDDPb)
        (begin
          (g$assert-enum$7945$DDDPb
            'enum-set-difference
            g$enumset1$8025$DDDPb)
          (g$assert-enum$7945$DDDPb
            'enum-set-difference
            g$enumset2$8026$DDDPb)
          (if (g$enum-type=?$7942$DDDPb
                g$enumset1$8025$DDDPb
                g$enumset2$8026$DDDPb)
            (g$make-enum$7928$DDDPb
              (bitwise-and
                (g$enum-value$7929$DDDPb g$enumset1$8025$DDDPb)
                (bitwise-not
                  (g$enum-value$7929$DDDPb g$enumset2$8026$DDDPb)))
              (g$enum-info$7930$DDDPb g$enumset1$8025$DDDPb))
            '#f)))))
   (g$enum-set-complement$7959$DDDPb
     g$enum-set-complement$8068$DDDPb
     (case-lambda
       ((g$enumset$8027$DDDPb)
        (begin
          (g$assert-enum$7945$DDDPb
            'enum-set-complement
            g$enumset$8027$DDDPb)
          (g$make-enum$7928$DDDPb
            (bitwise-not (g$enum-value$7929$DDDPb g$enumset$8027$DDDPb))
            (g$enum-info$7930$DDDPb g$enumset$8027$DDDPb))))))
   (g$enum-set-projection$7960$DDDPb
     g$enum-set-projection$8069$DDDPb
     (case-lambda
       ((g$enumset1$8028$DDDPb g$enumset2$8029$DDDPb)
        (begin
          (g$assert-enum$7945$DDDPb
            'enum-set-projection
            g$enumset1$8028$DDDPb)
          (g$assert-enum$7945$DDDPb
            'enum-set-projection
            g$enumset2$8029$DDDPb)
          ((case-lambda
             ((g$v1$8030$DDDPb)
              ((letrec ((g$f$8031$DDDPb
                          (case-lambda
                            ((g$s$8032$DDDPb g$v$8033$DDDPb)
                             (if (null? g$s$8032$DDDPb)
                               (g$make-enum$7928$DDDPb
                                 g$v$8033$DDDPb
                                 (g$enum-info$7930$DDDPb
                                   g$enumset2$8029$DDDPb))
                               (if (g$zero?$6462$DDDPb
                                     (bitwise-and
                                       g$v1$8030$DDDPb
                                       (g$get-value$7944$DDDPb
                                         g$enumset1$8028$DDDPb
                                         (car g$s$8032$DDDPb))))
                                 (g$f$8031$DDDPb
                                   (cdr g$s$8032$DDDPb)
                                   g$v$8033$DDDPb)
                                 ((case-lambda
                                    ((g$v2$8034$DDDPb)
                                     (if g$v2$8034$DDDPb
                                       (g$f$8031$DDDPb
                                         (cdr g$s$8032$DDDPb)
                                         (bitwise-ior
                                           g$v$8033$DDDPb
                                           g$v2$8034$DDDPb))
                                       (g$f$8031$DDDPb
                                         (cdr g$s$8032$DDDPb)
                                         g$v$8033$DDDPb))))
                                  (g$get-value$7944$DDDPb
                                    g$enumset2$8029$DDDPb
                                    (car g$s$8032$DDDPb)))))))))
                 g$f$8031$DDDPb)
               (g$get-symbols$7943$DDDPb g$enumset1$8028$DDDPb)
               '0)))
           (g$enum-value$7929$DDDPb g$enumset1$8028$DDDPb)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$7961$DDDPb g$p$7962$DDDPb g$wr$7963$DDDPb)
       (g$fprintf$8094$DDDPb
         g$p$7962$DDDPb
         '"#[enum-set ~a]"
         (g$enum-set->list$7952$DDDPb g$x$7961$DDDPb))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$8070$DDDPb
     g$dofmt$8092$DDDPb
     (case-lambda
       ((g$p$8074$DDDPb g$cntl$8075$DDDPb g$args$8076$DDDPb)
        ((case-lambda
           ((g$nmax$8077$DDDPb)
            ((letrec ((g$loop$8078$DDDPb
                        (case-lambda
                          ((g$n$8079$DDDPb g$a$8080$DDDPb)
                           (if (fx<=? g$n$8079$DDDPb g$nmax$8077$DDDPb)
                             ((case-lambda
                                ((g$c$8081$DDDPb)
                                 (if (if (g$char=?$6476$DDDPb
                                           g$c$8081$DDDPb
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$8079$DDDPb
                                           g$nmax$8077$DDDPb))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$8082$DDDPb)
                                       (if (eqv? g$t$8082$DDDPb '#\a)
                                         (begin
                                           (display
                                             (car g$a$8080$DDDPb)
                                             g$p$8074$DDDPb)
                                           (g$loop$8078$DDDPb
                                             (fx+ g$n$8079$DDDPb '2)
                                             (cdr g$a$8080$DDDPb)))
                                         (if (eqv? g$t$8082$DDDPb '#\s)
                                           (begin
                                             (write
                                               (car g$a$8080$DDDPb)
                                               g$p$8074$DDDPb)
                                             (g$loop$8078$DDDPb
                                               (fx+ g$n$8079$DDDPb '2)
                                               (cdr g$a$8080$DDDPb)))
                                           (if (eqv?
                                                 g$t$8082$DDDPb
                                                 '#\b)
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$8080$DDDPb)
                                                   '2)
                                                 g$p$8074$DDDPb)
                                               (g$loop$8078$DDDPb
                                                 (fx+ g$n$8079$DDDPb '2)
                                                 (cdr g$a$8080$DDDPb)))
                                             (if (eqv?
                                                   g$t$8082$DDDPb
                                                   '#\o)
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$8080$DDDPb)
                                                     '8)
                                                   g$p$8074$DDDPb)
                                                 (g$loop$8078$DDDPb
                                                   (fx+ g$n$8079$DDDPb
                                                        '2)
                                                   (cdr g$a$8080$DDDPb)))
                                               (if (eqv?
                                                     g$t$8082$DDDPb
                                                     '#\x)
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$8080$DDDPb)
                                                       '16)
                                                     g$p$8074$DDDPb)
                                                   (g$loop$8078$DDDPb
                                                     (fx+ g$n$8079$DDDPb
                                                          '2)
                                                     (cdr g$a$8080$DDDPb)))
                                                 (if (eqv?
                                                       g$t$8082$DDDPb
                                                       '#\d)
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$8080$DDDPb)
                                                         '10)
                                                       g$p$8074$DDDPb)
                                                     (g$loop$8078$DDDPb
                                                       (fx+ g$n$8079$DDDPb
                                                            '2)
                                                       (cdr g$a$8080$DDDPb)))
                                                   (if (eqv?
                                                         g$t$8082$DDDPb
                                                         '#\~)
                                                     (begin
                                                       (g$write-char$7916$DDDPb
                                                         '#\~
                                                         g$p$8074$DDDPb)
                                                       (g$loop$8078$DDDPb
                                                         (fx+ g$n$8079$DDDPb
                                                              '2)
                                                         g$a$8080$DDDPb))
                                                     (begin
                                                       (g$write-char$7916$DDDPb
                                                         g$c$8081$DDDPb
                                                         g$p$8074$DDDPb)
                                                       (g$loop$8078$DDDPb
                                                         (fx+ g$n$8079$DDDPb
                                                              '1)
                                                         g$a$8080$DDDPb)))))))))))
                                    (string-ref
                                      g$cntl$8075$DDDPb
                                      (fx+ g$n$8079$DDDPb '1)))
                                   (begin
                                     (g$write-char$7916$DDDPb
                                       g$c$8081$DDDPb
                                       g$p$8074$DDDPb)
                                     (g$loop$8078$DDDPb
                                       (fx+ g$n$8079$DDDPb '1)
                                       g$a$8080$DDDPb)))))
                              (string-ref
                                g$cntl$8075$DDDPb
                                g$n$8079$DDDPb))
                             (void))))))
               g$loop$8078$DDDPb)
             '0
             g$args$8076$DDDPb)))
         (fx- (string-length g$cntl$8075$DDDPb) '1)))))
   (g$printf$8071$DDDPb
     g$printf$8093$DDDPb
     (case-lambda
       ((g$control$8083$DDDPb . g$args$8084$DDDPb)
        (g$dofmt$8070$DDDPb
          (current-output-port)
          g$control$8083$DDDPb
          g$args$8084$DDDPb))))
   (g$fprintf$8072$DDDPb
     g$fprintf$8094$DDDPb
     (case-lambda
       ((g$p$8085$DDDPb g$control$8086$DDDPb . g$args$8087$DDDPb)
        (g$dofmt$8070$DDDPb
          g$p$8085$DDDPb
          g$control$8086$DDDPb
          g$args$8087$DDDPb))))
   (g$format$8073$DDDPb
     g$format$8095$DDDPb
     (case-lambda
       ((g$control$8088$DDDPb . g$args$8089$DDDPb)
        (call-with-values
          g$open-string-output-port$7858$DDDPb
          (case-lambda
            ((g$p$8090$DDDPb g$c$8091$DDDPb)
             (begin
               (g$dofmt$8070$DDDPb
                 g$p$8090$DDDPb
                 g$control$8088$DDDPb
                 g$args$8089$DDDPb)
               (g$c$8091$DDDPb)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$8096$DDDPb
     g$make-traced-macro$8099$DDDPb
     (case-lambda
       ((g$name$8097$DDDPb g$x$8098$DDDPb)
        (if (g$procedure?$6426$DDDPb g$x$8098$DDDPb)
          (make-traced-procedure
            g$name$8097$DDDPb
            g$x$8098$DDDPb
            g$syntax->datum$13373$DDDPb)
          (if (g$variable-transformer?$13195$DDDPb g$x$8098$DDDPb)
            (g$make-variable-transformer$13193$DDDPb
              (make-traced-procedure
                g$name$8097$DDDPb
                (g$variable-transformer-procedure$13196$DDDPb
                  g$x$8098$DDDPb)
                g$syntax->datum$13373$DDDPb))
            g$x$8098$DDDPb))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$8100$DDDPb
     g$library-version-mismatch-warning$8257$DDDPb
     (case-lambda
       ((g$name$8229$DDDPb g$depname$8230$DDDPb g$filename$8231$DDDPb)
        (g$fprintf$8094$DDDPb
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$8229$DDDPb
          g$depname$8230$DDDPb
          g$filename$8231$DDDPb))))
   (g$file-locator-resolution-error$8101$DDDPb
     g$file-locator-resolution-error$8258$DDDPb
     (case-lambda
       ((g$libname$8232$DDDPb g$failed-list$8233$DDDPb)
        (letrec* ((g$6822$8234$DDDPb
                    (make-record-type-descriptor
                      '&library-resolution
                      g$&condition-rtd$7067$DDDPb
                      'g$6825$DDDPb
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$6824$8235$DDDPb '#f)
                  (g$6823$8236$DDDPb
                    (make-record-constructor-descriptor
                      g$6822$8234$DDDPb
                      g$&condition-rcd$7068$DDDPb
                      g$6824$8235$DDDPb))
                  (g$6821$8239$DDDPb
                    (record-predicate g$6822$8234$DDDPb))
                  (g$make-library-resolution-condition$8240$DDDPb
                    (record-constructor g$6823$8236$DDDPb))
                  (g$6819$8241$DDDPb
                    (record-accessor g$6822$8234$DDDPb '0))
                  (g$6820$8242$DDDPb
                    (record-accessor g$6822$8234$DDDPb '1))
                  (g$library-resolution-condition?$8243$DDDPb
                    (condition-predicate g$6822$8234$DDDPb))
                  (g$condition-library$8244$DDDPb
                    (condition-accessor
                      g$6822$8234$DDDPb
                      g$6819$8241$DDDPb))
                  (g$condition-files$8245$DDDPb
                    (condition-accessor
                      g$6822$8234$DDDPb
                      g$6820$8242$DDDPb)))
          (raise
            (condition
              (g$make-error$7099$DDDPb)
              (g$make-who-condition$7133$DDDPb 'expander)
              (g$make-message-condition$7073$DDDPb
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$8240$DDDPb
                g$libname$8232$DDDPb
                g$failed-list$8233$DDDPb)))))))
   (g$read-library-source-file$8102$DDDPb
     g$read-library-source-file$8259$DDDPb
     (case-lambda
       ((g$file-name$8246$DDDPb)
        (g$with-input-from-file$7917$DDDPb
          g$file-name$8246$DDDPb
          read-annotated))))
   (g$make-parameter$8103$DDDPb
     g$make-parameter$8260$DDDPb
     (case-lambda
       ((g$x$8247$DDDPb)
        (g$make-parameter$8103$DDDPb
          g$x$8247$DDDPb
          (case-lambda ((g$x$8248$DDDPb) g$x$8248$DDDPb))))
       ((g$x$8249$DDDPb g$fender$8250$DDDPb)
        (begin
          (if (not (g$procedure?$6426$DDDPb g$fender$8250$DDDPb))
            (g$assertion-error$13366$DDDPb
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(90,8) - (90,36)"))
            (void))
          ((case-lambda
             ((g$x$8251$DDDPb)
              (case-lambda
                (() g$x$8251$DDDPb)
                ((g$v$8252$DDDPb)
                 (set! g$x$8251$DDDPb
                   (g$fender$8250$DDDPb g$v$8252$DDDPb))))))
           (g$fender$8250$DDDPb g$x$8249$DDDPb))))))
   (g$file-options-constructor$8225$DDDPb
     g$file-options-constructor$8261$DDDPb
     (g$make-parameter$8103$DDDPb '#f))
   (g$file-options-spec$8226$DDDPb
     g$file-options-spec$8262$DDDPb
     (case-lambda
       ((g$x$8253$DDDPb)
        ((g$file-options-constructor$8225$DDDPb) g$x$8253$DDDPb))))
   (g$set-label-binding!$8227$DDDPb
     g$set-label-binding!$8263$DDDPb
     (case-lambda
       ((g$label$8254$DDDPb g$binding$8255$DDDPb)
        (set-symbol-value! g$label$8254$DDDPb g$binding$8255$DDDPb))))
   (g$label-binding$8228$DDDPb
     g$label-binding$8264$DDDPb
     (case-lambda
       ((g$label$8256$DDDPb)
        (if (symbol-bound? g$label$8256$DDDPb)
          (begin '#f (symbol-value g$label$8256$DDDPb))
          '#f)))))
  (void))

(library-letrec* (ironscheme pretty-print)
  ((g$genwrite:newline-str$8265$DDDPb
     g$genwrite:newline-str$8455$DDDPb
     (make-string '1 '#\newline))
   (g$generic-write$8266$DDDPb
     g$generic-write$8456$DDDPb
     (case-lambda
       ((g$obj$8270$DDDPb
          g$display?$8271$DDDPb
          g$width$8272$DDDPb
          g$output$8273$DDDPb)
        (letrec* ((g$read-macro?$8274$DDDPb
                    (case-lambda
                      ((g$l$8435$DDDPb)
                       (letrec* ((g$length1?$8436$DDDPb
                                   (case-lambda
                                     ((g$l$8440$DDDPb)
                                      (if (pair? g$l$8440$DDDPb)
                                        (begin
                                          '#f
                                          (null? (cdr g$l$8440$DDDPb)))
                                        '#f)))))
                         ((case-lambda
                            ((g$head$8437$DDDPb g$tail$8438$DDDPb)
                             ((case-lambda
                                ((g$t$8439$DDDPb)
                                 (if (g$memv$5746$DDDPb
                                       g$t$8439$DDDPb
                                       '(quote
                                          quasiquote
                                          unquote
                                          unquote-splicing
                                          syntax
                                          quasisyntax
                                          unsyntax
                                          unsyntax-splicing))
                                   (g$length1?$8436$DDDPb
                                     g$tail$8438$DDDPb)
                                   '#f)))
                              g$head$8437$DDDPb)))
                          (car g$l$8435$DDDPb)
                          (cdr g$l$8435$DDDPb))))))
                  (g$read-macro-body$8275$DDDPb
                    (case-lambda
                      ((g$l$8434$DDDPb)
                       (g$cadr$6433$DDDPb g$l$8434$DDDPb))))
                  (g$read-macro-prefix$8276$DDDPb
                    (case-lambda
                      ((g$l$8430$DDDPb)
                       ((case-lambda
                          ((g$head$8431$DDDPb g$tail$8432$DDDPb)
                           ((case-lambda
                              ((g$t$8433$DDDPb)
                               (if (eqv? g$t$8433$DDDPb 'syntax)
                                 '"#'"
                                 (if (eqv? g$t$8433$DDDPb 'quasisyntax)
                                   '"#`"
                                   (if (eqv? g$t$8433$DDDPb 'unsyntax)
                                     '"#,"
                                     (if (eqv?
                                           g$t$8433$DDDPb
                                           'unsyntax-splicing)
                                       '"#,@"
                                       (if (eqv? g$t$8433$DDDPb 'quote)
                                         '"'"
                                         (if (eqv?
                                               g$t$8433$DDDPb
                                               'quasiquote)
                                           '"`"
                                           (if (eqv?
                                                 g$t$8433$DDDPb
                                                 'unquote)
                                             '","
                                             (if (eqv?
                                                   g$t$8433$DDDPb
                                                   'unquote-splicing)
                                               '",@"
                                               (if '#f
                                                 '#f
                                                 (void))))))))))))
                            g$head$8431$DDDPb)))
                        (car g$l$8430$DDDPb)
                        (cdr g$l$8430$DDDPb)))))
                  (g$out$8277$DDDPb
                    (case-lambda
                      ((g$str$8428$DDDPb g$col$8429$DDDPb)
                       (if g$col$8429$DDDPb
                         (if (g$output$8273$DDDPb g$str$8428$DDDPb)
                           (begin
                             '#f
                             (fx+ g$col$8429$DDDPb
                                  (string-length g$str$8428$DDDPb)))
                           '#f)
                         '#f))))
                  (g$wr$8278$DDDPb
                    (case-lambda
                      ((g$obj$8411$DDDPb g$col$8412$DDDPb)
                       (letrec* ((g$wr-expr$8413$DDDPb
                                   (case-lambda
                                     ((g$expr$8426$DDDPb
                                        g$col$8427$DDDPb)
                                      (if (g$read-macro?$8274$DDDPb
                                            g$expr$8426$DDDPb)
                                        (g$wr$8278$DDDPb
                                          (g$read-macro-body$8275$DDDPb
                                            g$expr$8426$DDDPb)
                                          (g$out$8277$DDDPb
                                            (g$read-macro-prefix$8276$DDDPb
                                              g$expr$8426$DDDPb)
                                            g$col$8427$DDDPb))
                                        (g$wr-lst$8414$DDDPb
                                          g$expr$8426$DDDPb
                                          g$col$8427$DDDPb)))))
                                 (g$wr-lst$8414$DDDPb
                                   (case-lambda
                                     ((g$l$8421$DDDPb g$col$8422$DDDPb)
                                      (if (pair? g$l$8421$DDDPb)
                                        ((letrec ((g$loop$8423$DDDPb
                                                    (case-lambda
                                                      ((g$l$8424$DDDPb
                                                         g$col$8425$DDDPb)
                                                       (if (not g$col$8425$DDDPb)
                                                         g$col$8425$DDDPb
                                                         (if (pair?
                                                               g$l$8424$DDDPb)
                                                           (g$loop$8423$DDDPb
                                                             (cdr g$l$8424$DDDPb)
                                                             (g$wr$8278$DDDPb
                                                               (car g$l$8424$DDDPb)
                                                               (g$out$8277$DDDPb
                                                                 '" "
                                                                 g$col$8425$DDDPb)))
                                                           (if (null?
                                                                 g$l$8424$DDDPb)
                                                             (g$out$8277$DDDPb
                                                               '")"
                                                               g$col$8425$DDDPb)
                                                             (g$out$8277$DDDPb
                                                               '")"
                                                               (g$wr$8278$DDDPb
                                                                 g$l$8424$DDDPb
                                                                 (g$out$8277$DDDPb
                                                                   '" . "
                                                                   g$col$8425$DDDPb))))))))))
                                           g$loop$8423$DDDPb)
                                         (cdr g$l$8421$DDDPb)
                                         (if g$col$8422$DDDPb
                                           (begin
                                             '#f
                                             (g$wr$8278$DDDPb
                                               (car g$l$8421$DDDPb)
                                               (g$out$8277$DDDPb
                                                 '"("
                                                 g$col$8422$DDDPb)))
                                           '#f))
                                        (g$out$8277$DDDPb
                                          '"()"
                                          g$col$8422$DDDPb))))))
                         (if (pair? g$obj$8411$DDDPb)
                           (g$wr-expr$8413$DDDPb
                             g$obj$8411$DDDPb
                             g$col$8412$DDDPb)
                           (if (null? g$obj$8411$DDDPb)
                             (g$wr-lst$8414$DDDPb
                               g$obj$8411$DDDPb
                               g$col$8412$DDDPb)
                             (if (g$vector?$6422$DDDPb g$obj$8411$DDDPb)
                               (g$wr-lst$8414$DDDPb
                                 (vector->list g$obj$8411$DDDPb)
                                 (g$out$8277$DDDPb
                                   '"#"
                                   g$col$8412$DDDPb))
                               (if (g$boolean?$6425$DDDPb
                                     g$obj$8411$DDDPb)
                                 (g$out$8277$DDDPb
                                   (if g$obj$8411$DDDPb '"#t" '"#f")
                                   g$col$8412$DDDPb)
                                 (if (number? g$obj$8411$DDDPb)
                                   (g$out$8277$DDDPb
                                     (number->string g$obj$8411$DDDPb)
                                     g$col$8412$DDDPb)
                                   (if (g$symbol?$6424$DDDPb
                                         g$obj$8411$DDDPb)
                                     (g$out$8277$DDDPb
                                       (symbol->string g$obj$8411$DDDPb)
                                       g$col$8412$DDDPb)
                                     (if (string? g$obj$8411$DDDPb)
                                       (if g$display?$8271$DDDPb
                                         (g$out$8277$DDDPb
                                           g$obj$8411$DDDPb
                                           g$col$8412$DDDPb)
                                         ((letrec ((g$loop$8415$DDDPb
                                                     (case-lambda
                                                       ((g$i$8416$DDDPb
                                                          g$j$8417$DDDPb
                                                          g$col$8418$DDDPb)
                                                        (if (if g$col$8418$DDDPb
                                                              (begin
                                                                '#f
                                                                (fx<?
                                                                  g$j$8417$DDDPb
                                                                  (string-length
                                                                    g$obj$8411$DDDPb)))
                                                              '#f)
                                                          ((case-lambda
                                                             ((g$c$8419$DDDPb)
                                                              (if ((case-lambda
                                                                     ((g$t$8420$DDDPb)
                                                                      (if g$t$8420$DDDPb
                                                                        g$t$8420$DDDPb
                                                                        (begin
                                                                          '#f
                                                                          (g$char=?$6476$DDDPb
                                                                            g$c$8419$DDDPb
                                                                            '#\")))))
                                                                   (g$char=?$6476$DDDPb
                                                                     g$c$8419$DDDPb
                                                                     '#\\))
                                                                (g$loop$8415$DDDPb
                                                                  g$j$8417$DDDPb
                                                                  (fx+ g$j$8417$DDDPb
                                                                       '1)
                                                                  (g$out$8277$DDDPb
                                                                    '"\\"
                                                                    (g$out$8277$DDDPb
                                                                      (substring
                                                                        g$obj$8411$DDDPb
                                                                        g$i$8416$DDDPb
                                                                        g$j$8417$DDDPb)
                                                                      g$col$8418$DDDPb)))
                                                                (g$loop$8415$DDDPb
                                                                  g$i$8416$DDDPb
                                                                  (fx+ g$j$8417$DDDPb
                                                                       '1)
                                                                  g$col$8418$DDDPb))))
                                                           (string-ref
                                                             g$obj$8411$DDDPb
                                                             g$j$8417$DDDPb))
                                                          (g$out$8277$DDDPb
                                                            '"\""
                                                            (g$out$8277$DDDPb
                                                              (substring
                                                                g$obj$8411$DDDPb
                                                                g$i$8416$DDDPb
                                                                g$j$8417$DDDPb)
                                                              g$col$8418$DDDPb)))))))
                                            g$loop$8415$DDDPb)
                                          '0
                                          '0
                                          (g$out$8277$DDDPb
                                            '"\""
                                            g$col$8412$DDDPb)))
                                       (g$out$8277$DDDPb
                                         (g$format$8095$DDDPb
                                           (if g$display?$8271$DDDPb
                                             '"~a"
                                             '"~s")
                                           g$obj$8411$DDDPb)
                                         g$col$8412$DDDPb))))))))))))
                  (g$pp$8279$DDDPb
                    (case-lambda
                      ((g$obj$8280$DDDPb g$col$8281$DDDPb)
                       (letrec* ((g$spaces$8282$DDDPb
                                   (case-lambda
                                     ((g$n$8409$DDDPb g$col$8410$DDDPb)
                                      (if (fx>? g$n$8409$DDDPb '0)
                                        (if (fx>? g$n$8409$DDDPb '7)
                                          (g$spaces$8282$DDDPb
                                            (fx- g$n$8409$DDDPb '8)
                                            (g$out$8277$DDDPb
                                              '"        "
                                              g$col$8410$DDDPb))
                                          (g$out$8277$DDDPb
                                            (substring
                                              '"        "
                                              '0
                                              g$n$8409$DDDPb)
                                            g$col$8410$DDDPb))
                                        g$col$8410$DDDPb))))
                                 (g$indent$8283$DDDPb
                                   (case-lambda
                                     ((g$to$8407$DDDPb g$col$8408$DDDPb)
                                      (if g$col$8408$DDDPb
                                        (begin
                                          '#f
                                          (if (fx<?
                                                g$to$8407$DDDPb
                                                g$col$8408$DDDPb)
                                            (if (g$out$8277$DDDPb
                                                  g$genwrite:newline-str$8265$DDDPb
                                                  g$col$8408$DDDPb)
                                              (begin
                                                '#f
                                                (g$spaces$8282$DDDPb
                                                  g$to$8407$DDDPb
                                                  '0))
                                              '#f)
                                            (g$spaces$8282$DDDPb
                                              (fx- g$to$8407$DDDPb
                                                   g$col$8408$DDDPb)
                                              g$col$8408$DDDPb)))
                                        '#f))))
                                 (g$pr$8284$DDDPb
                                   (case-lambda
                                     ((g$obj$8399$DDDPb
                                        g$col$8400$DDDPb
                                        g$extra$8401$DDDPb
                                        g$pp-pair$8402$DDDPb)
                                      (if ((case-lambda
                                             ((g$t$8403$DDDPb)
                                              (if g$t$8403$DDDPb
                                                g$t$8403$DDDPb
                                                (begin
                                                  '#f
                                                  (g$vector?$6422$DDDPb
                                                    g$obj$8399$DDDPb)))))
                                           (pair? g$obj$8399$DDDPb))
                                        ((case-lambda
                                           ((g$result$8404$DDDPb
                                              g$left$8405$DDDPb)
                                            (begin
                                              (g$generic-write$8266$DDDPb
                                                g$obj$8399$DDDPb
                                                g$display?$8271$DDDPb
                                                '#f
                                                (case-lambda
                                                  ((g$str$8406$DDDPb)
                                                   (begin
                                                     (set! g$result$8404$DDDPb
                                                       (cons
                                                         g$str$8406$DDDPb
                                                         g$result$8404$DDDPb))
                                                     (set! g$left$8405$DDDPb
                                                       (fx- g$left$8405$DDDPb
                                                            (string-length
                                                              g$str$8406$DDDPb)))
                                                     (fx>?
                                                       g$left$8405$DDDPb
                                                       '0)))))
                                              (if (fx>?
                                                    g$left$8405$DDDPb
                                                    '0)
                                                (g$out$8277$DDDPb
                                                  (g$reverse-string-append$8268$DDDPb
                                                    g$result$8404$DDDPb)
                                                  g$col$8400$DDDPb)
                                                (if (pair?
                                                      g$obj$8399$DDDPb)
                                                  (g$pp-pair$8402$DDDPb
                                                    g$obj$8399$DDDPb
                                                    g$col$8400$DDDPb
                                                    g$extra$8401$DDDPb)
                                                  (g$pp-list$8287$DDDPb
                                                    (vector->list
                                                      g$obj$8399$DDDPb)
                                                    (g$out$8277$DDDPb
                                                      '"#"
                                                      g$col$8400$DDDPb)
                                                    g$extra$8401$DDDPb
                                                    g$pp-expr$8285$DDDPb))))))
                                         '()
                                         (g$min$6466$DDDPb
                                           (fx+ (fx- (fx- g$width$8272$DDDPb
                                                          g$col$8400$DDDPb)
                                                     g$extra$8401$DDDPb)
                                                '1)
                                           (g$pretty-width$8267$DDDPb)))
                                        (g$wr$8278$DDDPb
                                          g$obj$8399$DDDPb
                                          g$col$8400$DDDPb)))))
                                 (g$pp-expr$8285$DDDPb
                                   (case-lambda
                                     ((g$expr$8394$DDDPb
                                        g$col$8395$DDDPb
                                        g$extra$8396$DDDPb)
                                      (if (g$read-macro?$8274$DDDPb
                                            g$expr$8394$DDDPb)
                                        (g$pr$8284$DDDPb
                                          (g$read-macro-body$8275$DDDPb
                                            g$expr$8394$DDDPb)
                                          (g$out$8277$DDDPb
                                            (g$read-macro-prefix$8276$DDDPb
                                              g$expr$8394$DDDPb)
                                            g$col$8395$DDDPb)
                                          g$extra$8396$DDDPb
                                          g$pp-expr$8285$DDDPb)
                                        ((case-lambda
                                           ((g$head$8397$DDDPb)
                                            (if (g$symbol?$6424$DDDPb
                                                  g$head$8397$DDDPb)
                                              ((case-lambda
                                                 ((g$proc$8398$DDDPb)
                                                  (if g$proc$8398$DDDPb
                                                    (g$proc$8398$DDDPb
                                                      g$expr$8394$DDDPb
                                                      g$col$8395$DDDPb
                                                      g$extra$8396$DDDPb)
                                                    (if (fx>?
                                                          (string-length
                                                            (symbol->string
                                                              g$head$8397$DDDPb))
                                                          g$max-call-head-width$8302$DDDPb)
                                                      (g$pp-general$8289$DDDPb
                                                        g$expr$8394$DDDPb
                                                        g$col$8395$DDDPb
                                                        g$extra$8396$DDDPb
                                                        '#f
                                                        '#f
                                                        '#f
                                                        g$pp-expr$8285$DDDPb)
                                                      (g$pp-call$8286$DDDPb
                                                        g$expr$8394$DDDPb
                                                        g$col$8395$DDDPb
                                                        g$extra$8396$DDDPb
                                                        g$pp-expr$8285$DDDPb)))))
                                               (g$style$8303$DDDPb
                                                 g$head$8397$DDDPb))
                                              (g$pp-list$8287$DDDPb
                                                g$expr$8394$DDDPb
                                                g$col$8395$DDDPb
                                                g$extra$8396$DDDPb
                                                g$pp-expr$8285$DDDPb))))
                                         (car g$expr$8394$DDDPb))))))
                                 (g$pp-call$8286$DDDPb
                                   (case-lambda
                                     ((g$expr$8389$DDDPb
                                        g$col$8390$DDDPb
                                        g$extra$8391$DDDPb
                                        g$pp-item$8392$DDDPb)
                                      ((case-lambda
                                         ((g$col*$8393$DDDPb)
                                          (if g$col$8390$DDDPb
                                            (begin
                                              '#f
                                              (g$pp-down$8288$DDDPb
                                                (cdr g$expr$8389$DDDPb)
                                                g$col*$8393$DDDPb
                                                (fx+ g$col*$8393$DDDPb
                                                     '1)
                                                g$extra$8391$DDDPb
                                                g$pp-item$8392$DDDPb))
                                            '#f)))
                                       (g$wr$8278$DDDPb
                                         (car g$expr$8389$DDDPb)
                                         (g$out$8277$DDDPb
                                           '"("
                                           g$col$8390$DDDPb))))))
                                 (g$pp-list$8287$DDDPb
                                   (case-lambda
                                     ((g$l$8384$DDDPb
                                        g$col$8385$DDDPb
                                        g$extra$8386$DDDPb
                                        g$pp-item$8387$DDDPb)
                                      ((case-lambda
                                         ((g$col$8388$DDDPb)
                                          (g$pp-down$8288$DDDPb
                                            g$l$8384$DDDPb
                                            g$col$8388$DDDPb
                                            g$col$8388$DDDPb
                                            g$extra$8386$DDDPb
                                            g$pp-item$8387$DDDPb)))
                                       (g$out$8277$DDDPb
                                         '"("
                                         g$col$8385$DDDPb)))))
                                 (g$pp-down$8288$DDDPb
                                   (case-lambda
                                     ((g$l$8374$DDDPb
                                        g$col1$8375$DDDPb
                                        g$col2$8376$DDDPb
                                        g$extra$8377$DDDPb
                                        g$pp-item$8378$DDDPb)
                                      ((letrec ((g$loop$8379$DDDPb
                                                  (case-lambda
                                                    ((g$l$8380$DDDPb
                                                       g$col$8381$DDDPb)
                                                     (if g$col$8381$DDDPb
                                                       (begin
                                                         '#f
                                                         (if (pair?
                                                               g$l$8380$DDDPb)
                                                           ((case-lambda
                                                              ((g$rest$8382$DDDPb)
                                                               ((case-lambda
                                                                  ((g$extra$8383$DDDPb)
                                                                   (g$loop$8379$DDDPb
                                                                     g$rest$8382$DDDPb
                                                                     (g$pr$8284$DDDPb
                                                                       (car g$l$8380$DDDPb)
                                                                       (g$indent$8283$DDDPb
                                                                         g$col2$8376$DDDPb
                                                                         g$col$8381$DDDPb)
                                                                       g$extra$8383$DDDPb
                                                                       g$pp-item$8378$DDDPb))))
                                                                (if (null?
                                                                      g$rest$8382$DDDPb)
                                                                  (fx+ g$extra$8377$DDDPb
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$l$8380$DDDPb))
                                                           (if (null?
                                                                 g$l$8380$DDDPb)
                                                             (g$out$8277$DDDPb
                                                               '")"
                                                               g$col$8381$DDDPb)
                                                             (g$out$8277$DDDPb
                                                               '")"
                                                               (g$pr$8284$DDDPb
                                                                 g$l$8380$DDDPb
                                                                 (g$indent$8283$DDDPb
                                                                   g$col2$8376$DDDPb
                                                                   (g$out$8277$DDDPb
                                                                     '"."
                                                                     (g$indent$8283$DDDPb
                                                                       g$col2$8376$DDDPb
                                                                       g$col$8381$DDDPb)))
                                                                 (fx+ g$extra$8377$DDDPb
                                                                      '1)
                                                                 g$pp-item$8378$DDDPb)))))
                                                       '#f)))))
                                         g$loop$8379$DDDPb)
                                       g$l$8374$DDDPb
                                       g$col1$8375$DDDPb))))
                                 (g$pp-general$8289$DDDPb
                                   (case-lambda
                                     ((g$expr$8341$DDDPb
                                        g$col$8342$DDDPb
                                        g$extra$8343$DDDPb
                                        g$named?$8344$DDDPb
                                        g$pp-1$8345$DDDPb
                                        g$pp-2$8346$DDDPb
                                        g$pp-3$8347$DDDPb)
                                      (letrec* ((g$tail1$8348$DDDPb
                                                  (case-lambda
                                                    ((g$rest$8367$DDDPb
                                                       g$col1$8368$DDDPb
                                                       g$col2$8369$DDDPb
                                                       g$col3$8370$DDDPb)
                                                     (if (if g$pp-1$8345$DDDPb
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$8367$DDDPb))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$8371$DDDPb)
                                                           ((case-lambda
                                                              ((g$rest$8372$DDDPb)
                                                               ((case-lambda
                                                                  ((g$extra$8373$DDDPb)
                                                                   (g$tail2$8349$DDDPb
                                                                     g$rest$8372$DDDPb
                                                                     g$col1$8368$DDDPb
                                                                     (g$pr$8284$DDDPb
                                                                       g$val1$8371$DDDPb
                                                                       (g$indent$8283$DDDPb
                                                                         g$col3$8370$DDDPb
                                                                         g$col2$8369$DDDPb)
                                                                       g$extra$8373$DDDPb
                                                                       g$pp-1$8345$DDDPb)
                                                                     g$col3$8370$DDDPb)))
                                                                (if (null?
                                                                      g$rest$8372$DDDPb)
                                                                  (fx+ g$extra$8343$DDDPb
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$rest$8367$DDDPb))))
                                                        (car g$rest$8367$DDDPb))
                                                       (g$tail2$8349$DDDPb
                                                         g$rest$8367$DDDPb
                                                         g$col1$8368$DDDPb
                                                         g$col2$8369$DDDPb
                                                         g$col3$8370$DDDPb)))))
                                                (g$tail2$8349$DDDPb
                                                  (case-lambda
                                                    ((g$rest$8360$DDDPb
                                                       g$col1$8361$DDDPb
                                                       g$col2$8362$DDDPb
                                                       g$col3$8363$DDDPb)
                                                     (if (if g$pp-2$8346$DDDPb
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$8360$DDDPb))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$8364$DDDPb)
                                                           ((case-lambda
                                                              ((g$rest$8365$DDDPb)
                                                               ((case-lambda
                                                                  ((g$extra$8366$DDDPb)
                                                                   (g$tail3$8350$DDDPb
                                                                     g$rest$8365$DDDPb
                                                                     g$col1$8361$DDDPb
                                                                     (g$pr$8284$DDDPb
                                                                       g$val1$8364$DDDPb
                                                                       (g$indent$8283$DDDPb
                                                                         g$col3$8363$DDDPb
                                                                         g$col2$8362$DDDPb)
                                                                       g$extra$8366$DDDPb
                                                                       g$pp-2$8346$DDDPb))))
                                                                (if (null?
                                                                      g$rest$8365$DDDPb)
                                                                  (fx+ g$extra$8343$DDDPb
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$rest$8360$DDDPb))))
                                                        (car g$rest$8360$DDDPb))
                                                       (g$tail3$8350$DDDPb
                                                         g$rest$8360$DDDPb
                                                         g$col1$8361$DDDPb
                                                         g$col2$8362$DDDPb)))))
                                                (g$tail3$8350$DDDPb
                                                  (case-lambda
                                                    ((g$rest$8357$DDDPb
                                                       g$col1$8358$DDDPb
                                                       g$col2$8359$DDDPb)
                                                     (g$pp-down$8288$DDDPb
                                                       g$rest$8357$DDDPb
                                                       g$col2$8359$DDDPb
                                                       g$col1$8358$DDDPb
                                                       g$extra$8343$DDDPb
                                                       g$pp-3$8347$DDDPb)))))
                                        ((case-lambda
                                           ((g$head$8351$DDDPb)
                                            ((case-lambda
                                               ((g$rest$8352$DDDPb)
                                                ((case-lambda
                                                   ((g$col*$8353$DDDPb)
                                                    (if (if g$named?$8344$DDDPb
                                                          (begin
                                                            '#f
                                                            (pair?
                                                              g$rest$8352$DDDPb))
                                                          '#f)
                                                      ((case-lambda
                                                         ((g$name$8354$DDDPb)
                                                          ((case-lambda
                                                             ((g$rest$8355$DDDPb)
                                                              ((case-lambda
                                                                 ((g$col**$8356$DDDPb)
                                                                  (g$tail1$8348$DDDPb
                                                                    g$rest$8355$DDDPb
                                                                    (fx+ g$col$8342$DDDPb
                                                                         g$indent-general$8301$DDDPb)
                                                                    g$col**$8356$DDDPb
                                                                    (fx+ g$col**$8356$DDDPb
                                                                         '1))))
                                                               (g$wr$8278$DDDPb
                                                                 g$name$8354$DDDPb
                                                                 (g$out$8277$DDDPb
                                                                   '" "
                                                                   g$col*$8353$DDDPb)))))
                                                           (cdr g$rest$8352$DDDPb))))
                                                       (car g$rest$8352$DDDPb))
                                                      (g$tail1$8348$DDDPb
                                                        g$rest$8352$DDDPb
                                                        (fx+ g$col$8342$DDDPb
                                                             g$indent-general$8301$DDDPb)
                                                        g$col*$8353$DDDPb
                                                        (fx+ g$col*$8353$DDDPb
                                                             '1)))))
                                                 (g$wr$8278$DDDPb
                                                   g$head$8351$DDDPb
                                                   (g$out$8277$DDDPb
                                                     '"("
                                                     g$col$8342$DDDPb)))))
                                             (cdr g$expr$8341$DDDPb))))
                                         (car g$expr$8341$DDDPb))))))
                                 (g$pp-expr-list$8290$DDDPb
                                   (case-lambda
                                     ((g$l$8338$DDDPb
                                        g$col$8339$DDDPb
                                        g$extra$8340$DDDPb)
                                      (g$pp-list$8287$DDDPb
                                        g$l$8338$DDDPb
                                        g$col$8339$DDDPb
                                        g$extra$8340$DDDPb
                                        g$pp-expr$8285$DDDPb))))
                                 (g$pp-SYNTAX-CASE$8291$DDDPb
                                   (case-lambda
                                     ((g$expr$8335$DDDPb
                                        g$col$8336$DDDPb
                                        g$extra$8337$DDDPb)
                                      (g$pp-general$8289$DDDPb
                                        g$expr$8335$DDDPb
                                        g$col$8336$DDDPb
                                        g$extra$8337$DDDPb
                                        '#t
                                        g$pp-expr-list$8290$DDDPb
                                        '#f
                                        g$pp-expr$8285$DDDPb))))
                                 (g$pp-LAMBDA$8292$DDDPb
                                   (case-lambda
                                     ((g$expr$8332$DDDPb
                                        g$col$8333$DDDPb
                                        g$extra$8334$DDDPb)
                                      (g$pp-general$8289$DDDPb
                                        g$expr$8332$DDDPb
                                        g$col$8333$DDDPb
                                        g$extra$8334$DDDPb
                                        '#f
                                        g$pp-expr-list$8290$DDDPb
                                        '#f
                                        g$pp-expr$8285$DDDPb))))
                                 (g$pp-IF$8293$DDDPb
                                   (case-lambda
                                     ((g$expr$8329$DDDPb
                                        g$col$8330$DDDPb
                                        g$extra$8331$DDDPb)
                                      (g$pp-general$8289$DDDPb
                                        g$expr$8329$DDDPb
                                        g$col$8330$DDDPb
                                        g$extra$8331$DDDPb
                                        '#f
                                        g$pp-expr$8285$DDDPb
                                        '#f
                                        g$pp-expr$8285$DDDPb))))
                                 (g$pp-COND$8294$DDDPb
                                   (case-lambda
                                     ((g$expr$8326$DDDPb
                                        g$col$8327$DDDPb
                                        g$extra$8328$DDDPb)
                                      (g$pp-call$8286$DDDPb
                                        g$expr$8326$DDDPb
                                        g$col$8327$DDDPb
                                        g$extra$8328$DDDPb
                                        g$pp-expr-list$8290$DDDPb))))
                                 (g$pp-CASE$8295$DDDPb
                                   (case-lambda
                                     ((g$expr$8323$DDDPb
                                        g$col$8324$DDDPb
                                        g$extra$8325$DDDPb)
                                      (g$pp-general$8289$DDDPb
                                        g$expr$8323$DDDPb
                                        g$col$8324$DDDPb
                                        g$extra$8325$DDDPb
                                        '#f
                                        g$pp-expr$8285$DDDPb
                                        '#f
                                        g$pp-expr-list$8290$DDDPb))))
                                 (g$pp-CASE-LAMBDA$8296$DDDPb
                                   (case-lambda
                                     ((g$expr$8320$DDDPb
                                        g$col$8321$DDDPb
                                        g$extra$8322$DDDPb)
                                      (g$pp-general$8289$DDDPb
                                        g$expr$8320$DDDPb
                                        g$col$8321$DDDPb
                                        g$extra$8322$DDDPb
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr-list$8290$DDDPb))))
                                 (g$pp-AND$8297$DDDPb
                                   (case-lambda
                                     ((g$expr$8317$DDDPb
                                        g$col$8318$DDDPb
                                        g$extra$8319$DDDPb)
                                      (g$pp-call$8286$DDDPb
                                        g$expr$8317$DDDPb
                                        g$col$8318$DDDPb
                                        g$extra$8319$DDDPb
                                        g$pp-expr$8285$DDDPb))))
                                 (g$pp-LET$8298$DDDPb
                                   (case-lambda
                                     ((g$expr$8312$DDDPb
                                        g$col$8313$DDDPb
                                        g$extra$8314$DDDPb)
                                      ((case-lambda
                                         ((g$rest$8315$DDDPb)
                                          ((case-lambda
                                             ((g$named?$8316$DDDPb)
                                              (g$pp-general$8289$DDDPb
                                                g$expr$8312$DDDPb
                                                g$col$8313$DDDPb
                                                g$extra$8314$DDDPb
                                                g$named?$8316$DDDPb
                                                g$pp-expr-list$8290$DDDPb
                                                '#f
                                                g$pp-expr$8285$DDDPb)))
                                           (if (pair? g$rest$8315$DDDPb)
                                             (begin
                                               '#f
                                               (g$symbol?$6424$DDDPb
                                                 (car g$rest$8315$DDDPb)))
                                             '#f))))
                                       (cdr g$expr$8312$DDDPb)))))
                                 (g$pp-BEGIN$8299$DDDPb
                                   (case-lambda
                                     ((g$expr$8309$DDDPb
                                        g$col$8310$DDDPb
                                        g$extra$8311$DDDPb)
                                      (g$pp-general$8289$DDDPb
                                        g$expr$8309$DDDPb
                                        g$col$8310$DDDPb
                                        g$extra$8311$DDDPb
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr$8285$DDDPb))))
                                 (g$pp-DO$8300$DDDPb
                                   (case-lambda
                                     ((g$expr$8306$DDDPb
                                        g$col$8307$DDDPb
                                        g$extra$8308$DDDPb)
                                      (g$pp-general$8289$DDDPb
                                        g$expr$8306$DDDPb
                                        g$col$8307$DDDPb
                                        g$extra$8308$DDDPb
                                        '#f
                                        g$pp-expr-list$8290$DDDPb
                                        g$pp-expr-list$8290$DDDPb
                                        g$pp-expr$8285$DDDPb))))
                                 (g$indent-general$8301$DDDPb '2)
                                 (g$max-call-head-width$8302$DDDPb '3)
                                 (g$style$8303$DDDPb
                                   (case-lambda
                                     ((g$head$8304$DDDPb)
                                      ((case-lambda
                                         ((g$t$8305$DDDPb)
                                          (if (g$memv$5746$DDDPb
                                                g$t$8305$DDDPb
                                                '(lambda let*
                                                   letrec
                                                   letrec*
                                                   define
                                                   define-syntax
                                                   syntax-rules
                                                   let-syntax
                                                   letrec-syntax
                                                   with-syntax
                                                   library
                                                   library-letrec*))
                                            g$pp-LAMBDA$8292$DDDPb
                                            (if (eqv?
                                                  g$t$8305$DDDPb
                                                  'syntax-case)
                                              g$pp-SYNTAX-CASE$8291$DDDPb
                                              (if (g$memv$5746$DDDPb
                                                    g$t$8305$DDDPb
                                                    '(if set!
                                                       when
                                                       unless))
                                                g$pp-IF$8293$DDDPb
                                                (if (eqv?
                                                      g$t$8305$DDDPb
                                                      'cond)
                                                  g$pp-COND$8294$DDDPb
                                                  (if (eqv?
                                                        g$t$8305$DDDPb
                                                        'case-lambda)
                                                    g$pp-CASE-LAMBDA$8296$DDDPb
                                                    (if (eqv?
                                                          g$t$8305$DDDPb
                                                          'case)
                                                      g$pp-CASE$8295$DDDPb
                                                      (if (g$memv$5746$DDDPb
                                                            g$t$8305$DDDPb
                                                            '(and or
                                                                  import
                                                                  export))
                                                        g$pp-AND$8297$DDDPb
                                                        (if (eqv?
                                                              g$t$8305$DDDPb
                                                              'let)
                                                          g$pp-LET$8298$DDDPb
                                                          (if (eqv?
                                                                g$t$8305$DDDPb
                                                                'begin)
                                                            g$pp-BEGIN$8299$DDDPb
                                                            (if (eqv?
                                                                  g$t$8305$DDDPb
                                                                  'do)
                                                              g$pp-DO$8300$DDDPb
                                                              '#f))))))))))))
                                       g$head$8304$DDDPb)))))
                         (g$pr$8284$DDDPb
                           g$obj$8280$DDDPb
                           g$col$8281$DDDPb
                           '0
                           g$pp-expr$8285$DDDPb))))))
          (if g$width$8272$DDDPb
            (g$out$8277$DDDPb
              g$genwrite:newline-str$8265$DDDPb
              (g$pp$8279$DDDPb g$obj$8270$DDDPb '0))
            (g$wr$8278$DDDPb g$obj$8270$DDDPb '0))))))
   (g$pretty-width$8267$DDDPb
     g$pretty-width$8457$DDDPb
     (g$make-parameter$8260$DDDPb '72))
   (g$reverse-string-append$8268$DDDPb
     g$reverse-string-append$8458$DDDPb
     (case-lambda
       ((g$l$8441$DDDPb)
        (letrec* ((g$rev-string-append$8442$DDDPb
                    (case-lambda
                      ((g$l$8443$DDDPb g$i$8444$DDDPb)
                       (if (pair? g$l$8443$DDDPb)
                         ((case-lambda
                            ((g$str$8445$DDDPb)
                             ((case-lambda
                                ((g$len$8446$DDDPb)
                                 ((case-lambda
                                    ((g$result$8447$DDDPb)
                                     ((letrec ((g$loop$8448$DDDPb
                                                 (case-lambda
                                                   ((g$j$8449$DDDPb
                                                      g$k$8450$DDDPb)
                                                    (if (fx<?
                                                          g$j$8449$DDDPb
                                                          g$len$8446$DDDPb)
                                                      (begin
                                                        (string-set!
                                                          g$result$8447$DDDPb
                                                          g$k$8450$DDDPb
                                                          (string-ref
                                                            g$str$8445$DDDPb
                                                            g$j$8449$DDDPb))
                                                        (g$loop$8448$DDDPb
                                                          (fx+ g$j$8449$DDDPb
                                                               '1)
                                                          (fx+ g$k$8450$DDDPb
                                                               '1)))
                                                      g$result$8447$DDDPb)))))
                                        g$loop$8448$DDDPb)
                                      '0
                                      (fx- (fx- (string-length
                                                  g$result$8447$DDDPb)
                                                g$i$8444$DDDPb)
                                           g$len$8446$DDDPb))))
                                  (g$rev-string-append$8442$DDDPb
                                    (cdr g$l$8443$DDDPb)
                                    (fx+ g$i$8444$DDDPb
                                         g$len$8446$DDDPb)))))
                              (string-length g$str$8445$DDDPb))))
                          (car g$l$8443$DDDPb))
                         (make-string g$i$8444$DDDPb))))))
          (g$rev-string-append$8442$DDDPb g$l$8441$DDDPb '0)))))
   (g$pretty-print$8269$DDDPb
     g$pretty-print$8459$DDDPb
     (case-lambda
       ((g$obj$8451$DDDPb . g$opt$8452$DDDPb)
        ((case-lambda
           ((g$port$8453$DDDPb)
            (g$generic-write$8266$DDDPb
              g$obj$8451$DDDPb
              '#f
              (g$pretty-width$8267$DDDPb)
              (case-lambda
                ((g$s$8454$DDDPb)
                 (begin
                   (display g$s$8454$DDDPb g$port$8453$DDDPb)
                   '#t))))))
         (if (pair? g$opt$8452$DDDPb)
           (car g$opt$8452$DDDPb)
           (current-output-port)))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$8460$DDDPb
     g$cps/generate-reference$8725$DDDPb
     (case-lambda
       ((g$variable$8513$DDDPb)
        (g$cps/generate-operand$8464$DDDPb
          (g$make-reference$8490$DDDPb g$variable$8513$DDDPb)))))
   (g$cps/generate-literal$8461$DDDPb
     g$cps/generate-literal$8726$DDDPb
     (case-lambda
       ((g$datum$8514$DDDPb)
        (g$cps/generate-operand$8464$DDDPb
          (g$make-literal$8489$DDDPb g$datum$8514$DDDPb)))))
   (g$cps/generate-abstraction$8462$DDDPb
     g$cps/generate-abstraction$8727$DDDPb
     (case-lambda
       ((g$bvl$8515$DDDPb g$body-generator$8516$DDDPb)
        (g$cps/generate-operand$8464$DDDPb
          (g$make-user-abstraction$8491$DDDPb
            g$bvl$8515$DDDPb
            (case-lambda
              ((g$continuation-variable$8517$DDDPb)
               (g$body-generator$8516$DDDPb
                 (g$variable-continuator$8477$DDDPb
                   g$continuation-variable$8517$DDDPb)))))))))
   (g$cps/generate-abstractions$8463$DDDPb
     g$cps/generate-abstractions$8728$DDDPb
     (case-lambda
       ((g$bvls$8518$DDDPb g$body-generators$8519$DDDPb)
        (g$cps/generate-operand$8464$DDDPb
          (g$make-user-abstractions$8492$DDDPb
            g$bvls$8518$DDDPb
            (g$map$5753$DDDPb
              (case-lambda
                ((g$body-generator$8520$DDDPb)
                 (case-lambda
                   ((g$continuation-variable$8521$DDDPb)
                    (g$body-generator$8520$DDDPb
                      (g$variable-continuator$8477$DDDPb
                        g$continuation-variable$8521$DDDPb))))))
              g$body-generators$8519$DDDPb))))))
   (g$cps/generate-operand$8464$DDDPb
     g$cps/generate-operand$8729$DDDPb
     (case-lambda
       ((g$operand$8522$DDDPb)
        (case-lambda
          ((g$continuator$8523$DDDPb)
           (g$continue-with-operand$8480$DDDPb
             g$continuator$8523$DDDPb
             g$operand$8522$DDDPb))))))
   (g$cps/generate-conditional$8465$DDDPb
     g$cps/generate-conditional$8730$DDDPb
     (case-lambda
       ((g$condition-generator$8524$DDDPb
          g$consequent-generator$8525$DDDPb
          g$alternative-generator$8526$DDDPb)
        (case-lambda
          ((g$continuator$8527$DDDPb)
           (letrec* ((g$if-variable$8528$DDDPb
                       (case-lambda
                         ((g$continuation-variable$8530$DDDPb)
                          ((case-lambda
                             ((g$continuator*$8531$DDDPb)
                              (g$condition-generator$8524$DDDPb
                                (g$conditional-continuator$8476$DDDPb
                                  (case-lambda
                                    ((g$condition$8532$DDDPb)
                                     (g$make-conditional$8499$DDDPb
                                       g$condition$8532$DDDPb
                                       (g$consequent-generator$8525$DDDPb
                                         g$continuator*$8531$DDDPb)
                                       (g$alternative-generator$8526$DDDPb
                                         g$continuator*$8531$DDDPb))))))))
                           (g$variable-continuator$8477$DDDPb
                             g$continuation-variable$8530$DDDPb))))))
             (g$reify-continuation*$8482$DDDPb
               g$continuator$8527$DDDPb
               g$if-variable$8528$DDDPb
               (case-lambda
                 ((g$continuation-abstraction$8529$DDDPb)
                  (g$make-conditional-join$8500$DDDPb
                    g$continuation-abstraction$8529$DDDPb
                    g$if-variable$8528$DDDPb))))))))))
   (g$cps/generate-recursive-bind$8466$DDDPb
     g$cps/generate-recursive-bind$8731$DDDPb
     (case-lambda
       ((g$variables$8533$DDDPb
          g$generators$8534$DDDPb
          g$body-generator$8535$DDDPb)
        (case-lambda
          ((g$continuator$8536$DDDPb)
           (g$make-recursive-bind$8494$DDDPb
             g$variables$8533$DDDPb
             (g$map$5753$DDDPb
               (case-lambda
                 ((g$generator$8537$DDDPb)
                  (case-lambda
                    ((g$continuation-variable$8538$DDDPb)
                     (g$generator$8537$DDDPb
                       (g$variable-continuator$8477$DDDPb
                         g$continuation-variable$8538$DDDPb))))))
               g$generators$8534$DDDPb)
             (g$body-generator$8535$DDDPb
               (g$reified-continuator$8479$DDDPb
                 g$continuator$8536$DDDPb))))))))
   (g$cps/generate-recursive*-bind$8467$DDDPb
     g$cps/generate-recursive*-bind$8732$DDDPb
     (case-lambda
       ((g$variables$8539$DDDPb
          g$generators$8540$DDDPb
          g$body-generator$8541$DDDPb)
        (case-lambda
          ((g$continuator$8542$DDDPb)
           (g$make-recursive*-bind$8495$DDDPb
             g$variables$8539$DDDPb
             (g$map$5753$DDDPb
               (case-lambda
                 ((g$generator$8543$DDDPb)
                  (case-lambda
                    ((g$continuation-variable$8544$DDDPb)
                     (g$generator$8543$DDDPb
                       (g$variable-continuator$8477$DDDPb
                         g$continuation-variable$8544$DDDPb))))))
               g$generators$8540$DDDPb)
             (g$body-generator$8541$DDDPb
               (g$reified-continuator$8479$DDDPb
                 g$continuator$8542$DDDPb))))))))
   (g$cps/generate-recursive*-library-bind$8468$DDDPb
     g$cps/generate-recursive*-library-bind$8733$DDDPb
     (case-lambda
       ((g$name$8545$DDDPb
          g$variables$8546$DDDPb
          g$variables*$8547$DDDPb
          g$generators$8548$DDDPb
          g$body-generator$8549$DDDPb)
        (case-lambda
          ((g$continuator$8550$DDDPb)
           (g$make-recursive*-library-bind$8496$DDDPb
             g$name$8545$DDDPb
             g$variables$8546$DDDPb
             g$variables*$8547$DDDPb
             (g$map$5753$DDDPb
               (case-lambda
                 ((g$generator$8551$DDDPb)
                  (case-lambda
                    ((g$continuation-variable$8552$DDDPb)
                     (g$generator$8551$DDDPb
                       (g$variable-continuator$8477$DDDPb
                         g$continuation-variable$8552$DDDPb))))))
               g$generators$8548$DDDPb)
             (g$body-generator$8549$DDDPb
               (g$reified-continuator$8479$DDDPb
                 g$continuator$8550$DDDPb))))))))
   (g$cps/generate-sequence$8469$DDDPb
     g$cps/generate-sequence$8734$DDDPb
     (case-lambda
       ((g$generators$8553$DDDPb)
        (case-lambda
          ((g$continuator$8554$DDDPb)
           ((letrec ((g$recur$8555$DDDPb
                       (case-lambda
                         ((g$generators$8556$DDDPb)
                          ((car g$generators$8556$DDDPb)
                           ((case-lambda
                              ((g$generators$8557$DDDPb)
                               (if (pair? g$generators$8557$DDDPb)
                                 (g$effect-continuator$8475$DDDPb
                                   (case-lambda
                                     (()
                                      (g$recur$8555$DDDPb
                                        g$generators$8557$DDDPb))))
                                 g$continuator$8554$DDDPb)))
                            (cdr g$generators$8556$DDDPb)))))))
              g$recur$8555$DDDPb)
            g$generators$8553$DDDPb))))))
   (g$cps/generate-assignment$8470$DDDPb
     g$cps/generate-assignment$8735$DDDPb
     (case-lambda
       ((g$location$8558$DDDPb g$expression-generator$8559$DDDPb)
        (case-lambda
          ((g$continuator$8560$DDDPb)
           (g$expression-generator$8559$DDDPb
             (g$operand-continuator$8474$DDDPb
               (case-lambda
                 ((g$operand$8561$DDDPb)
                  (g$make-assignment$8502$DDDPb
                    g$location$8558$DDDPb
                    g$operand$8561$DDDPb
                    (g$continue-with-operand$8480$DDDPb
                      g$continuator$8560$DDDPb
                      '(cps-void))))))))))))
   (g$cps/generate-declaration$8471$DDDPb
     g$cps/generate-declaration$8736$DDDPb
     (case-lambda
       ((g$location$8562$DDDPb g$expression-generator$8563$DDDPb)
        (case-lambda
          ((g$continuator$8564$DDDPb)
           (g$expression-generator$8563$DDDPb
             (g$operand-continuator$8474$DDDPb
               (case-lambda
                 ((g$operand$8565$DDDPb)
                  (g$make-declaration$8503$DDDPb
                    g$location$8562$DDDPb
                    g$operand$8565$DDDPb
                    (g$continue-with-operand$8480$DDDPb
                      g$continuator$8564$DDDPb
                      '(cps-void))))))))))))
   (g$cps/generate-combination$8472$DDDPb
     g$cps/generate-combination$8737$DDDPb
     (case-lambda
       ((g$operator-generator$8566$DDDPb
          g$operand-generators$8567$DDDPb)
        (g$cps/generate-subproblems$8473$DDDPb
          (g$reverse$6431$DDDPb
            (cons
              g$operator-generator$8566$DDDPb
              g$operand-generators$8567$DDDPb))
          (case-lambda
            ((g$operands$8568$DDDPb g$continuator$8569$DDDPb)
             (g$make-combination$8497$DDDPb
               (car g$operands$8568$DDDPb)
               (g$reify-continuation$8481$DDDPb
                 g$continuator$8569$DDDPb)
               (cdr g$operands$8568$DDDPb))))))))
   (g$cps/generate-subproblems$8473$DDDPb
     g$cps/generate-subproblems$8738$DDDPb
     (case-lambda
       ((g$generators$8570$DDDPb g$combiner$8571$DDDPb)
        (case-lambda
          ((g$continuator$8572$DDDPb)
           ((letrec ((g$recur$8573$DDDPb
                       (case-lambda
                         ((g$generators$8574$DDDPb
                            g$operands$8575$DDDPb)
                          (if (pair? g$generators$8574$DDDPb)
                            ((car g$generators$8574$DDDPb)
                             ((case-lambda
                                ((g$generators$8576$DDDPb)
                                 (g$operand-continuator$8474$DDDPb
                                   (case-lambda
                                     ((g$operand$8577$DDDPb)
                                      (g$recur$8573$DDDPb
                                        g$generators$8576$DDDPb
                                        (cons
                                          g$operand$8577$DDDPb
                                          g$operands$8575$DDDPb)))))))
                              (cdr g$generators$8574$DDDPb)))
                            (g$combiner$8571$DDDPb
                              g$operands$8575$DDDPb
                              g$continuator$8572$DDDPb))))))
              g$recur$8573$DDDPb)
            g$generators$8570$DDDPb
            '()))))))
   (g$operand-continuator$8474$DDDPb
     g$operand-continuator$8739$DDDPb
     (case-lambda
       ((g$generator$8578$DDDPb)
        (case-lambda
          ((g$if-operand$8579$DDDPb
             g$if-effect$8580$DDDPb
             g$if-conditional$8581$DDDPb
             g$if-variable$8582$DDDPb
             g$if-inline$8583$DDDPb)
           (begin
             g$if-effect$8580$DDDPb
             g$if-conditional$8581$DDDPb
             g$if-variable$8582$DDDPb
             g$if-inline$8583$DDDPb
             (g$if-operand$8579$DDDPb g$generator$8578$DDDPb)))))))
   (g$effect-continuator$8475$DDDPb
     g$effect-continuator$8740$DDDPb
     (case-lambda
       ((g$generator$8584$DDDPb)
        (case-lambda
          ((g$if-operand$8585$DDDPb
             g$if-effect$8586$DDDPb
             g$if-conditional$8587$DDDPb
             g$if-variable$8588$DDDPb
             g$if-inline$8589$DDDPb)
           (begin
             g$if-operand$8585$DDDPb
             g$if-conditional$8587$DDDPb
             g$if-variable$8588$DDDPb
             g$if-inline$8589$DDDPb
             (g$if-effect$8586$DDDPb g$generator$8584$DDDPb)))))))
   (g$conditional-continuator$8476$DDDPb
     g$conditional-continuator$8741$DDDPb
     (case-lambda
       ((g$generator$8590$DDDPb)
        (case-lambda
          ((g$if-operand$8591$DDDPb
             g$if-effect$8592$DDDPb
             g$if-conditional$8593$DDDPb
             g$if-variable$8594$DDDPb
             g$if-inline$8595$DDDPb)
           (begin
             g$if-operand$8591$DDDPb
             g$if-effect$8592$DDDPb
             g$if-variable$8594$DDDPb
             g$if-inline$8595$DDDPb
             (g$if-conditional$8593$DDDPb g$generator$8590$DDDPb)))))))
   (g$variable-continuator$8477$DDDPb
     g$variable-continuator$8742$DDDPb
     (case-lambda
       ((g$variable$8596$DDDPb)
        (case-lambda
          ((g$if-operand$8597$DDDPb
             g$if-effect$8598$DDDPb
             g$if-conditional$8599$DDDPb
             g$if-variable$8600$DDDPb
             g$if-inline$8601$DDDPb)
           (begin
             g$if-operand$8597$DDDPb
             g$if-effect$8598$DDDPb
             g$if-variable$8600$DDDPb
             g$if-inline$8601$DDDPb
             (g$if-variable$8600$DDDPb g$variable$8596$DDDPb)))))))
   (g$inline-continuator$8478$DDDPb
     g$inline-continuator$8743$DDDPb
     (case-lambda
       ((g$continuation$8602$DDDPb)
        (case-lambda
          ((g$if-operand$8603$DDDPb
             g$if-effect$8604$DDDPb
             g$if-conditional$8605$DDDPb
             g$if-variable$8606$DDDPb
             g$if-inline$8607$DDDPb)
           (begin
             g$if-operand$8603$DDDPb
             g$if-effect$8604$DDDPb
             g$if-conditional$8605$DDDPb
             g$if-variable$8606$DDDPb
             (g$if-inline$8607$DDDPb g$continuation$8602$DDDPb)))))))
   (g$reified-continuator$8479$DDDPb
     g$reified-continuator$8744$DDDPb
     (case-lambda
       ((g$continuator$8608$DDDPb)
        (case-lambda
          ((g$if-operand$8609$DDDPb
             g$if-effect$8610$DDDPb
             g$if-conditional$8611$DDDPb
             g$if-variable$8612$DDDPb
             g$if-inline$8613$DDDPb)
           (begin
             g$if-operand$8609$DDDPb
             g$if-effect$8610$DDDPb
             g$if-conditional$8611$DDDPb
             (g$reify-continuation*$8482$DDDPb
               g$continuator$8608$DDDPb
               g$if-variable$8612$DDDPb
               g$if-inline$8613$DDDPb)))))))
   (g$continue-with-operand$8480$DDDPb
     g$continue-with-operand$8745$DDDPb
     (case-lambda
       ((g$continuator$8614$DDDPb g$operand$8615$DDDPb)
        (g$continuator$8614$DDDPb
          (case-lambda
            ((g$generator$8616$DDDPb)
             (g$generator$8616$DDDPb g$operand$8615$DDDPb)))
          (case-lambda
            ((g$generator$8617$DDDPb) (g$generator$8617$DDDPb)))
          (case-lambda
            ((g$generator$8618$DDDPb)
             (g$generator$8618$DDDPb
               (g$make-truth-test$8504$DDDPb g$operand$8615$DDDPb))))
          (case-lambda
            ((g$continuation-variable$8619$DDDPb)
             (g$make-return$8498$DDDPb
               (g$make-reference$8490$DDDPb
                 g$continuation-variable$8619$DDDPb)
               (list g$operand$8615$DDDPb))))
          (case-lambda
            ((g$continuation-abstraction$8620$DDDPb)
             (g$make-return$8498$DDDPb
               g$continuation-abstraction$8620$DDDPb
               (list g$operand$8615$DDDPb))))))))
   (g$reify-continuation$8481$DDDPb
     g$reify-continuation$8746$DDDPb
     (case-lambda
       ((g$continuator$8621$DDDPb)
        (g$continuator$8621$DDDPb
          g$operand-continuation-reifier$8484$DDDPb
          g$effect-continuation-reifier$8486$DDDPb
          g$conditional-continuation-reifier$8488$DDDPb
          (case-lambda
            ((g$variable$8622$DDDPb)
             (g$make-reference$8490$DDDPb g$variable$8622$DDDPb)))
          (case-lambda
            ((g$continuation$8623$DDDPb) g$continuation$8623$DDDPb))))))
   (g$reify-continuation*$8482$DDDPb
     g$reify-continuation*$8747$DDDPb
     (case-lambda
       ((g$continuator$8624$DDDPb
          g$if-variable$8625$DDDPb
          g$if-inline$8626$DDDPb)
        (g$continuator$8624$DDDPb
          (g$operand-continuation-reifier*$8483$DDDPb
            g$if-inline$8626$DDDPb)
          (g$effect-continuation-reifier*$8485$DDDPb
            g$if-inline$8626$DDDPb)
          (g$conditional-continuation-reifier*$8487$DDDPb
            g$if-inline$8626$DDDPb)
          g$if-variable$8625$DDDPb
          g$if-inline$8626$DDDPb))))
   (g$operand-continuation-reifier*$8483$DDDPb
     g$operand-continuation-reifier*$8748$DDDPb
     (case-lambda
       ((g$receiver$8627$DDDPb)
        (case-lambda
          ((g$generator$8628$DDDPb)
           (g$receiver$8627$DDDPb
             ((case-lambda
                ((g$variable$8629$DDDPb)
                 (g$make-continuation-abstraction$8493$DDDPb
                   (list g$variable$8629$DDDPb)
                   (g$generator$8628$DDDPb
                     (g$make-reference$8490$DDDPb
                       g$variable$8629$DDDPb)))))
              (g$generate-variable$8505$DDDPb 'V))))))))
   (g$operand-continuation-reifier$8484$DDDPb
     g$operand-continuation-reifier$8749$DDDPb
     (g$operand-continuation-reifier*$8483$DDDPb values))
   (g$effect-continuation-reifier*$8485$DDDPb
     g$effect-continuation-reifier*$8750$DDDPb
     (case-lambda
       ((g$receiver$8630$DDDPb)
        (case-lambda
          ((g$generator$8631$DDDPb)
           (g$receiver$8630$DDDPb
             ((case-lambda
                ((g$variable$8632$DDDPb)
                 (g$make-continuation-abstraction$8493$DDDPb
                   g$variable$8632$DDDPb
                   (g$generator$8631$DDDPb))))
              (g$generate-variable$8505$DDDPb 'IGNORE))))))))
   (g$effect-continuation-reifier$8486$DDDPb
     g$effect-continuation-reifier$8751$DDDPb
     (g$effect-continuation-reifier*$8485$DDDPb values))
   (g$conditional-continuation-reifier*$8487$DDDPb
     g$conditional-continuation-reifier*$8752$DDDPb
     (case-lambda
       ((g$receiver$8633$DDDPb)
        (case-lambda
          ((g$generator$8634$DDDPb)
           (g$receiver$8633$DDDPb
             ((case-lambda
                ((g$variable$8635$DDDPb)
                 (g$make-continuation-abstraction$8493$DDDPb
                   (list g$variable$8635$DDDPb)
                   (g$generator$8634$DDDPb
                     (g$make-truth-test$8504$DDDPb
                       (g$make-reference$8490$DDDPb
                         g$variable$8635$DDDPb))))))
              (g$generate-variable$8505$DDDPb 'T))))))))
   (g$conditional-continuation-reifier$8488$DDDPb
     g$conditional-continuation-reifier$8753$DDDPb
     (g$conditional-continuation-reifier*$8487$DDDPb values))
   (g$make-literal$8489$DDDPb
     g$make-literal$8754$DDDPb
     (case-lambda
       ((g$datum$8636$DDDPb) (list 'quote g$datum$8636$DDDPb))))
   (g$make-reference$8490$DDDPb
     g$make-reference$8755$DDDPb
     (case-lambda ((g$variable$8637$DDDPb) g$variable$8637$DDDPb)))
   (g$make-user-abstraction$8491$DDDPb
     g$make-user-abstraction$8756$DDDPb
     (case-lambda
       ((g$bvl$8638$DDDPb g$body-constructor$8639$DDDPb)
        ((case-lambda
           ((g$continuation$8640$DDDPb)
            (list
              'case-lambda
              (list
                (cons g$continuation$8640$DDDPb g$bvl$8638$DDDPb)
                (g$body-constructor$8639$DDDPb
                  g$continuation$8640$DDDPb)))))
         (g$generate-variable$8505$DDDPb 'C)))))
   (g$make-user-abstractions$8492$DDDPb
     g$make-user-abstractions$8757$DDDPb
     (case-lambda
       ((g$bvls$8641$DDDPb g$body-constructors$8642$DDDPb)
        ((case-lambda
           ((g$continuation$8643$DDDPb)
            (cons
              'case-lambda
              (g$map$5753$DDDPb
                (case-lambda
                  ((g$bvl$8644$DDDPb g$body-constructor$8645$DDDPb)
                   (list
                     (cons g$continuation$8643$DDDPb g$bvl$8644$DDDPb)
                     (g$body-constructor$8645$DDDPb
                       g$continuation$8643$DDDPb))))
                g$bvls$8641$DDDPb
                g$body-constructors$8642$DDDPb))))
         (g$generate-variable$8505$DDDPb 'C)))))
   (g$make-continuation-abstraction$8493$DDDPb
     g$make-continuation-abstraction$8758$DDDPb
     (case-lambda
       ((g$bvl$8646$DDDPb g$body$8647$DDDPb)
        (list 'case-lambda (list g$bvl$8646$DDDPb g$body$8647$DDDPb)))))
   (g$make-recursive-bind$8494$DDDPb
     g$make-recursive-bind$8759$DDDPb
     (case-lambda
       ((g$variables$8648$DDDPb
          g$constructors$8649$DDDPb
          g$body$8650$DDDPb)
        (list
          'letrec
          (g$map$5753$DDDPb
            (case-lambda
              ((g$variable$8651$DDDPb g$constructor$8652$DDDPb)
               (list
                 g$variable$8651$DDDPb
                 (list
                   (g$make-user-abstraction$8491$DDDPb
                     '()
                     g$constructor$8652$DDDPb)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$8651$DDDPb))))))
            g$variables$8648$DDDPb
            g$constructors$8649$DDDPb)
          g$body$8650$DDDPb))))
   (g$make-recursive*-bind$8495$DDDPb
     g$make-recursive*-bind$8760$DDDPb
     (case-lambda
       ((g$variables$8653$DDDPb
          g$constructors$8654$DDDPb
          g$body$8655$DDDPb)
        (list
          'letrec*
          (g$map$5753$DDDPb
            (case-lambda
              ((g$variable$8656$DDDPb g$constructor$8657$DDDPb)
               (list
                 g$variable$8656$DDDPb
                 (list
                   (g$make-user-abstraction$8491$DDDPb
                     '()
                     g$constructor$8657$DDDPb)
                   (list
                     'letrec*-identity
                     (list 'quote g$variable$8656$DDDPb))))))
            g$variables$8653$DDDPb
            g$constructors$8654$DDDPb)
          g$body$8655$DDDPb))))
   (g$make-recursive*-library-bind$8496$DDDPb
     g$make-recursive*-library-bind$8761$DDDPb
     (case-lambda
       ((g$name$8658$DDDPb
          g$variables$8659$DDDPb
          g$variables*$8660$DDDPb
          g$constructors$8661$DDDPb
          g$body$8662$DDDPb)
        (list
          'library-letrec*
          g$name$8658$DDDPb
          (g$map$5753$DDDPb
            (case-lambda
              ((g$variable$8663$DDDPb
                 g$variable*$8664$DDDPb
                 g$constructor$8665$DDDPb)
               (list
                 g$variable$8663$DDDPb
                 g$variable*$8664$DDDPb
                 (list
                   (g$make-user-abstraction$8491$DDDPb
                     '()
                     g$constructor$8665$DDDPb)
                   (list
                     'library-letrec*-identity
                     (list 'quote g$variable$8663$DDDPb))))))
            g$variables$8659$DDDPb
            g$variables*$8660$DDDPb
            g$constructors$8661$DDDPb)
          g$body$8662$DDDPb))))
   (g$make-combination$8497$DDDPb
     g$make-combination$8762$DDDPb
     (case-lambda
       ((g$operator$8666$DDDPb
          g$continuation$8667$DDDPb
          g$operands$8668$DDDPb)
        (cons
          g$operator$8666$DDDPb
          (cons g$continuation$8667$DDDPb g$operands$8668$DDDPb)))))
   (g$make-return$8498$DDDPb
     g$make-return$8763$DDDPb
     (case-lambda
       ((g$continuation$8669$DDDPb g$operands$8670$DDDPb)
        (cons g$continuation$8669$DDDPb g$operands$8670$DDDPb))))
   (g$make-conditional$8499$DDDPb
     g$make-conditional$8764$DDDPb
     (case-lambda
       ((g$condition$8671$DDDPb
          g$consequent$8672$DDDPb
          g$alternative$8673$DDDPb)
        (list
          'if
          g$condition$8671$DDDPb
          g$consequent$8672$DDDPb
          g$alternative$8673$DDDPb))))
   (g$make-conditional-join$8500$DDDPb
     g$make-conditional-join$8765$DDDPb
     (case-lambda
       ((g$continuation$8674$DDDPb g$constructor$8675$DDDPb)
        ((case-lambda
           ((g$variable$8676$DDDPb)
            (g$make-let$8501$DDDPb
              (list g$variable$8676$DDDPb)
              (list g$continuation$8674$DDDPb)
              (g$constructor$8675$DDDPb g$variable$8676$DDDPb))))
         (g$generate-variable$8505$DDDPb 'J)))))
   (g$make-let$8501$DDDPb
     g$make-let$8766$DDDPb
     (case-lambda
       ((g$variables$8677$DDDPb
          g$expressions$8678$DDDPb
          g$body$8679$DDDPb)
        (cons
          (list
            'case-lambda
            (list g$variables$8677$DDDPb g$body$8679$DDDPb))
          g$expressions$8678$DDDPb))))
   (g$make-assignment$8502$DDDPb
     g$make-assignment$8767$DDDPb
     (case-lambda
       ((g$location$8680$DDDPb
          g$operand$8681$DDDPb
          g$expression$8682$DDDPb)
        (list
          'begin
          (list 'set! g$location$8680$DDDPb g$operand$8681$DDDPb)
          g$expression$8682$DDDPb))))
   (g$make-declaration$8503$DDDPb
     g$make-declaration$8768$DDDPb
     (case-lambda
       ((g$location$8683$DDDPb
          g$operand$8684$DDDPb
          g$expression$8685$DDDPb)
        (list
          'begin
          (list 'define g$location$8683$DDDPb g$operand$8684$DDDPb)
          g$expression$8685$DDDPb))))
   (g$make-truth-test$8504$DDDPb
     g$make-truth-test$8769$DDDPb
     (case-lambda ((g$operand$8686$DDDPb) g$operand$8686$DDDPb)))
   (g$generate-variable$8505$DDDPb
     g$generate-variable$8770$DDDPb
     (case-lambda ((g$name$8687$DDDPb) (gensym g$name$8687$DDDPb))))
   (g$parse$8506$DDDPb
     g$parse$8771$DDDPb
     (case-lambda
       ((g$x$8688$DDDPb)
        (if (pair? g$x$8688$DDDPb)
          ((case-lambda
             ((g$t$8689$DDDPb)
              (if (eqv? g$t$8689$DDDPb 'quote)
                (g$cps/generate-literal$8461$DDDPb
                  (g$cadr$6433$DDDPb g$x$8688$DDDPb))
                (if (eqv? g$t$8689$DDDPb 'if)
                  (g$cps/generate-conditional$8465$DDDPb
                    (g$parse$8506$DDDPb
                      (g$cadr$6433$DDDPb g$x$8688$DDDPb))
                    (g$parse$8506$DDDPb
                      (g$caddr$6439$DDDPb g$x$8688$DDDPb))
                    (g$parse$8506$DDDPb
                      (g$cadddr$6451$DDDPb g$x$8688$DDDPb)))
                  (if (eqv? g$t$8689$DDDPb 'case-lambda)
                    ((case-lambda
                       ((g$d$8690$DDDPb)
                        (g$cps/generate-abstractions$8463$DDDPb
                          (g$map$5753$DDDPb car g$d$8690$DDDPb)
                          (g$map$5753$DDDPb
                            (case-lambda
                              ((g$e$8691$DDDPb)
                               (g$cps/generate-sequence$8469$DDDPb
                                 (g$map$5753$DDDPb
                                   g$parse$8506$DDDPb
                                   (cdr g$e$8691$DDDPb)))))
                            g$d$8690$DDDPb))))
                     (cdr g$x$8688$DDDPb))
                    (if (eqv? g$t$8689$DDDPb 'letrec)
                      ((case-lambda
                         ((g$bindings$8692$DDDPb g$body*$8693$DDDPb)
                          ((case-lambda
                             ((g$lhs*$8694$DDDPb g$rhs*$8695$DDDPb)
                              ((case-lambda
                                 ((g$t*$8696$DDDPb g$tmps$8697$DDDPb)
                                  ((case-lambda
                                     ((g$s*$8698$DDDPb)
                                      (g$parse$8506$DDDPb
                                        (cons
                                          (list
                                            'case-lambda
                                            (list
                                              g$lhs*$8694$DDDPb
                                              (cons
                                                (list
                                                  'case-lambda
                                                  (cons
                                                    g$t*$8696$DDDPb
                                                    (append
                                                      g$s*$8698$DDDPb
                                                      g$body*$8693$DDDPb)))
                                                g$rhs*$8695$DDDPb)))
                                          g$tmps$8697$DDDPb))))
                                   (g$map$5753$DDDPb
                                     (case-lambda
                                       ((g$i$8699$DDDPb g$t$8700$DDDPb)
                                        (list
                                          'set!
                                          g$i$8699$DDDPb
                                          g$t$8700$DDDPb)))
                                     g$lhs*$8694$DDDPb
                                     g$t*$8696$DDDPb))))
                               (g$map$5753$DDDPb
                                 gensym
                                 g$lhs*$8694$DDDPb)
                               (g$map$5753$DDDPb
                                 (case-lambda
                                   ((g$x$8701$DDDPb) 'uninitialized))
                                 g$lhs*$8694$DDDPb))))
                           (g$map$5753$DDDPb car g$bindings$8692$DDDPb)
                           (g$map$5753$DDDPb
                             g$cadr$6433$DDDPb
                             g$bindings$8692$DDDPb))))
                       (g$cadr$6433$DDDPb g$x$8688$DDDPb)
                       (g$cddr$6435$DDDPb g$x$8688$DDDPb))
                      (if (eqv? g$t$8689$DDDPb 'letrec*)
                        ((case-lambda
                           ((g$bindings$8702$DDDPb g$body*$8703$DDDPb)
                            ((case-lambda
                               ((g$lhs*$8704$DDDPb g$rhs*$8705$DDDPb)
                                (g$cps/generate-recursive*-bind$8467$DDDPb
                                  g$lhs*$8704$DDDPb
                                  (g$map$5753$DDDPb
                                    g$parse$8506$DDDPb
                                    g$rhs*$8705$DDDPb)
                                  (g$parse$8506$DDDPb
                                    (cons 'begin g$body*$8703$DDDPb)))))
                             (g$map$5753$DDDPb
                               car
                               g$bindings$8702$DDDPb)
                             (g$map$5753$DDDPb
                               g$cadr$6433$DDDPb
                               g$bindings$8702$DDDPb))))
                         (g$cadr$6433$DDDPb g$x$8688$DDDPb)
                         (g$cddr$6435$DDDPb g$x$8688$DDDPb))
                        (if (eqv? g$t$8689$DDDPb 'library-letrec*)
                          ((case-lambda
                             ((g$name$8706$DDDPb g$x$8707$DDDPb)
                              ((case-lambda
                                 ((g$bindings$8708$DDDPb
                                    g$body*$8709$DDDPb)
                                  ((case-lambda
                                     ((g$lhs*$8710$DDDPb
                                        g$lhs**$8711$DDDPb
                                        g$rhs*$8712$DDDPb)
                                      (g$cps/generate-recursive*-library-bind$8468$DDDPb
                                        g$name$8706$DDDPb
                                        g$lhs*$8710$DDDPb
                                        g$lhs**$8711$DDDPb
                                        (g$map$5753$DDDPb
                                          g$parse$8506$DDDPb
                                          g$rhs*$8712$DDDPb)
                                        (g$parse$8506$DDDPb
                                          (cons
                                            'begin
                                            g$body*$8709$DDDPb)))))
                                   (g$map$5753$DDDPb
                                     car
                                     g$bindings$8708$DDDPb)
                                   (g$map$5753$DDDPb
                                     g$cadr$6433$DDDPb
                                     g$bindings$8708$DDDPb)
                                   (g$map$5753$DDDPb
                                     g$caddr$6439$DDDPb
                                     g$bindings$8708$DDDPb))))
                               (g$cadr$6433$DDDPb g$x$8707$DDDPb)
                               (g$cddr$6435$DDDPb g$x$8707$DDDPb))))
                           (g$cadr$6433$DDDPb g$x$8688$DDDPb)
                           (cdr g$x$8688$DDDPb))
                          (if (eqv? g$t$8689$DDDPb 'begin)
                            (g$cps/generate-sequence$8469$DDDPb
                              (g$map$5753$DDDPb
                                g$parse$8506$DDDPb
                                (cdr g$x$8688$DDDPb)))
                            (if (eqv? g$t$8689$DDDPb 'set!)
                              (g$cps/generate-assignment$8470$DDDPb
                                (g$cadr$6433$DDDPb g$x$8688$DDDPb)
                                (g$parse$8506$DDDPb
                                  (g$caddr$6439$DDDPb g$x$8688$DDDPb)))
                              (if (eqv? g$t$8689$DDDPb 'define)
                                (g$cps/generate-declaration$8471$DDDPb
                                  (g$cadr$6433$DDDPb g$x$8688$DDDPb)
                                  (g$parse$8506$DDDPb
                                    (g$caddr$6439$DDDPb
                                      g$x$8688$DDDPb)))
                                (if (list? g$x$8688$DDDPb)
                                  (g$cps/generate-combination$8472$DDDPb
                                    (g$parse$8506$DDDPb
                                      (car g$x$8688$DDDPb))
                                    (g$map$5753$DDDPb
                                      g$parse$8506$DDDPb
                                      (cdr g$x$8688$DDDPb)))
                                  (error
                                    'rewrite
                                    '"invalid form ~s ~s"
                                    g$x$8688$DDDPb
                                    (list? g$x$8688$DDDPb))))))))))))))
           (car g$x$8688$DDDPb))
          (if (g$symbol?$6424$DDDPb g$x$8688$DDDPb)
            (g$cps/generate-reference$8460$DDDPb g$x$8688$DDDPb)
            (g$cps/generate-literal$8461$DDDPb g$x$8688$DDDPb))))))
   (g$starts-with?$8507$DDDPb
     g$starts-with?$8772$DDDPb
     (case-lambda
       ((g$str$8713$DDDPb g$sub$8714$DDDPb)
        (clr-call-internal
          'system.string
          'startswith
          g$str$8713$DDDPb
          g$sub$8714$DDDPb))))
   (g$ends-with?$8508$DDDPb
     g$ends-with?$8773$DDDPb
     (case-lambda
       ((g$str$8715$DDDPb g$sub$8716$DDDPb)
        (clr-call-internal
          'system.string
          'endswith
          g$str$8715$DDDPb
          g$sub$8716$DDDPb))))
   (g$clr-generator?$8509$DDDPb
     g$clr-generator?$8774$DDDPb
     (case-lambda
       ((g$o$8717$DDDPb)
        (if (g$symbol?$6424$DDDPb g$o$8717$DDDPb)
          (begin
            '#f
            ((case-lambda
               ((g$o$8718$DDDPb)
                (if (g$starts-with?$8507$DDDPb g$o$8718$DDDPb '"clr-")
                  (begin
                    '#f
                    (g$ends-with?$8508$DDDPb
                      g$o$8718$DDDPb
                      '"-internal"))
                  '#f)))
             (symbol->string g$o$8717$DDDPb)))
          '#f))))
   (g$fix-primitives$8510$DDDPb
     g$fix-primitives$8775$DDDPb
     (case-lambda
       ((g$e$8719$DDDPb)
        (if (if (pair? g$e$8719$DDDPb)
              (begin '#f (list? g$e$8719$DDDPb))
              '#f)
          ((case-lambda
             ((g$o$8720$DDDPb)
              (if (eq? g$o$8720$DDDPb 'quote)
                g$e$8719$DDDPb
                (if (begin
                      '#f
                      (g$clr-generator?$8509$DDDPb g$o$8720$DDDPb))
                  (if (pair? (cdr g$e$8719$DDDPb))
                    (list
                      (g$fix-primitives$8510$DDDPb
                        (g$cadr$6433$DDDPb g$e$8719$DDDPb))
                      (cons
                        g$o$8720$DDDPb
                        (g$map$5753$DDDPb
                          g$fix-primitives$8510$DDDPb
                          (g$cddr$6435$DDDPb g$e$8719$DDDPb))))
                    g$e$8719$DDDPb)
                  (cons
                    (g$fix-primitives$8510$DDDPb g$o$8720$DDDPb)
                    (g$map$5753$DDDPb
                      g$fix-primitives$8510$DDDPb
                      (cdr g$e$8719$DDDPb)))))))
           (car g$e$8719$DDDPb))
          g$e$8719$DDDPb))))
   (g$parse->cps$8511$DDDPb
     g$parse->cps$8776$DDDPb
     (case-lambda
       ((g$e$8721$DDDPb g$var$8722$DDDPb)
        ((g$parse$8506$DDDPb g$e$8721$DDDPb)
         (g$variable-continuator$8477$DDDPb g$var$8722$DDDPb)))))
   (g$convert->cps$8512$DDDPb
     g$convert->cps$8777$DDDPb
     (case-lambda
       ((g$e$8723$DDDPb g$var$8724$DDDPb)
        (g$fix-primitives$8510$DDDPb
          (g$parse->cps$8511$DDDPb g$e$8723$DDDPb g$var$8724$DDDPb))))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$8778$DDDPb
     g$current-primitive-locations$8823$DDDPb
     (g$make-parameter$8260$DDDPb
       (case-lambda ((g$x$8784$DDDPb) '#f))
       (case-lambda
         ((g$p$8785$DDDPb)
          (begin
            (if (not (g$procedure?$6426$DDDPb g$p$8785$DDDPb))
              (g$assertion-error$13366$DDDPb
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$8785$DDDPb)))))
   (g$mutable?$8779$DDDPb
     g$mutable?$8824$DDDPb
     (case-lambda
       ((g$x$8786$DDDPb)
        (letrec* ((g$simple?$8787$DDDPb
                    (case-lambda
                      ((g$x$8788$DDDPb)
                       ((case-lambda
                          ((g$t$8789$DDDPb)
                           (if g$t$8789$DDDPb
                             g$t$8789$DDDPb
                             ((case-lambda
                                ((g$t$8790$DDDPb)
                                 (if g$t$8790$DDDPb
                                   g$t$8790$DDDPb
                                   ((case-lambda
                                      ((g$t$8791$DDDPb)
                                       (if g$t$8791$DDDPb
                                         g$t$8791$DDDPb
                                         ((case-lambda
                                            ((g$t$8792$DDDPb)
                                             (if g$t$8792$DDDPb
                                               g$t$8792$DDDPb
                                               ((case-lambda
                                                  ((g$t$8793$DDDPb)
                                                   (if g$t$8793$DDDPb
                                                     g$t$8793$DDDPb
                                                     ((case-lambda
                                                        ((g$t$8794$DDDPb)
                                                         (if g$t$8794$DDDPb
                                                           g$t$8794$DDDPb
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$8788$DDDPb)))))
                                                      (g$bytevector?$6423$DDDPb
                                                        g$x$8788$DDDPb)))))
                                                (string?
                                                  g$x$8788$DDDPb)))))
                                          (g$boolean?$6425$DDDPb
                                            g$x$8788$DDDPb)))))
                                    (g$symbol?$6424$DDDPb
                                      g$x$8788$DDDPb)))))
                              (g$char?$6421$DDDPb g$x$8788$DDDPb)))))
                        (null? g$x$8788$DDDPb))))))
          (not (g$simple?$8787$DDDPb g$x$8786$DDDPb))))))
   (g$rewriter$8780$DDDPb
     g$rewriter$8825$DDDPb
     (case-lambda
       ((g$quote-hack?$8795$DDDPb)
        (letrec* ((g$f$8796$DDDPb
                    (case-lambda
                      ((g$x$8797$DDDPb)
                       (if (pair? g$x$8797$DDDPb)
                         ((case-lambda
                            ((g$t$8798$DDDPb)
                             (if (eqv? g$t$8798$DDDPb 'quote)
                               (if (if g$quote-hack?$8795$DDDPb
                                     (begin
                                       '#f
                                       (g$mutable?$8779$DDDPb
                                         (g$cadr$6433$DDDPb
                                           g$x$8797$DDDPb)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$8799$DDDPb)
                                     (begin
                                       (set-symbol-value!
                                         g$g$8799$DDDPb
                                         (g$cadr$6433$DDDPb
                                           g$x$8797$DDDPb))
                                       g$g$8799$DDDPb)))
                                  (gensym 'weak-temp))
                                 g$x$8797$DDDPb)
                               (if (eqv? g$t$8798$DDDPb 'case-lambda)
                                 (cons
                                   'case-lambda
                                   (g$map$5753$DDDPb
                                     (case-lambda
                                       ((g$x$8800$DDDPb)
                                        (cons
                                          (car g$x$8800$DDDPb)
                                          (g$map$5753$DDDPb
                                            g$f$8796$DDDPb
                                            (cdr g$x$8800$DDDPb)))))
                                     (cdr g$x$8797$DDDPb)))
                                 (if (eqv? g$t$8798$DDDPb 'lambda)
                                   (g$cons*$5755$DDDPb
                                     'lambda
                                     (g$cadr$6433$DDDPb g$x$8797$DDDPb)
                                     (g$map$5753$DDDPb
                                       g$f$8796$DDDPb
                                       (g$cddr$6435$DDDPb
                                         g$x$8797$DDDPb)))
                                   (if (eqv? g$t$8798$DDDPb 'letrec)
                                     ((case-lambda
                                        ((g$bindings$8801$DDDPb
                                           g$body*$8802$DDDPb)
                                         ((case-lambda
                                            ((g$lhs*$8803$DDDPb
                                               g$rhs*$8804$DDDPb)
                                             (g$cons*$5755$DDDPb
                                               'letrec
                                               (g$map$5753$DDDPb
                                                 list
                                                 g$lhs*$8803$DDDPb
                                                 (g$map$5753$DDDPb
                                                   g$f$8796$DDDPb
                                                   g$rhs*$8804$DDDPb))
                                               (g$map$5753$DDDPb
                                                 g$f$8796$DDDPb
                                                 g$body*$8802$DDDPb))))
                                          (g$map$5753$DDDPb
                                            car
                                            g$bindings$8801$DDDPb)
                                          (g$map$5753$DDDPb
                                            g$cadr$6433$DDDPb
                                            g$bindings$8801$DDDPb))))
                                      (g$cadr$6433$DDDPb g$x$8797$DDDPb)
                                      (g$cddr$6435$DDDPb
                                        g$x$8797$DDDPb))
                                     (if (eqv? g$t$8798$DDDPb 'letrec*)
                                       ((case-lambda
                                          ((g$bindings$8805$DDDPb
                                             g$body*$8806$DDDPb)
                                           ((case-lambda
                                              ((g$lhs*$8807$DDDPb
                                                 g$rhs*$8808$DDDPb)
                                               (g$cons*$5755$DDDPb
                                                 'letrec*
                                                 (g$map$5753$DDDPb
                                                   list
                                                   g$lhs*$8807$DDDPb
                                                   (g$map$5753$DDDPb
                                                     g$f$8796$DDDPb
                                                     g$rhs*$8808$DDDPb))
                                                 (g$map$5753$DDDPb
                                                   g$f$8796$DDDPb
                                                   g$body*$8806$DDDPb))))
                                            (g$map$5753$DDDPb
                                              car
                                              g$bindings$8805$DDDPb)
                                            (g$map$5753$DDDPb
                                              g$cadr$6433$DDDPb
                                              g$bindings$8805$DDDPb))))
                                        (g$cadr$6433$DDDPb
                                          g$x$8797$DDDPb)
                                        (g$cddr$6435$DDDPb
                                          g$x$8797$DDDPb))
                                       (if (eqv?
                                             g$t$8798$DDDPb
                                             'library-letrec*)
                                         ((case-lambda
                                            ((g$name$8809$DDDPb
                                               g$x$8810$DDDPb)
                                             ((case-lambda
                                                ((g$bindings$8811$DDDPb
                                                   g$body*$8812$DDDPb)
                                                 ((case-lambda
                                                    ((g$lhs*$8813$DDDPb
                                                       g$lhs**$8814$DDDPb
                                                       g$rhs*$8815$DDDPb)
                                                     (g$cons*$5755$DDDPb
                                                       'library-letrec*
                                                       g$name$8809$DDDPb
                                                       (g$map$5753$DDDPb
                                                         list
                                                         g$lhs*$8813$DDDPb
                                                         g$lhs**$8814$DDDPb
                                                         (g$map$5753$DDDPb
                                                           g$f$8796$DDDPb
                                                           g$rhs*$8815$DDDPb))
                                                       (g$map$5753$DDDPb
                                                         g$f$8796$DDDPb
                                                         g$body*$8812$DDDPb))))
                                                  (g$map$5753$DDDPb
                                                    car
                                                    g$bindings$8811$DDDPb)
                                                  (g$map$5753$DDDPb
                                                    g$cadr$6433$DDDPb
                                                    g$bindings$8811$DDDPb)
                                                  (g$map$5753$DDDPb
                                                    g$caddr$6439$DDDPb
                                                    g$bindings$8811$DDDPb))))
                                              (g$cadr$6433$DDDPb
                                                g$x$8810$DDDPb)
                                              (g$cddr$6435$DDDPb
                                                g$x$8810$DDDPb))))
                                          (g$cadr$6433$DDDPb
                                            g$x$8797$DDDPb)
                                          (cdr g$x$8797$DDDPb))
                                         (if (eqv?
                                               g$t$8798$DDDPb
                                               'begin)
                                           (cons
                                             'begin
                                             (g$map$5753$DDDPb
                                               g$f$8796$DDDPb
                                               (cdr g$x$8797$DDDPb)))
                                           (if (eqv?
                                                 g$t$8798$DDDPb
                                                 'set!)
                                             (list
                                               'set!
                                               (g$cadr$6433$DDDPb
                                                 g$x$8797$DDDPb)
                                               (g$f$8796$DDDPb
                                                 (g$caddr$6439$DDDPb
                                                   g$x$8797$DDDPb)))
                                             (if (eqv?
                                                   g$t$8798$DDDPb
                                                   'primitive)
                                               ((case-lambda
                                                  ((g$op$8816$DDDPb)
                                                   ((case-lambda
                                                      ((g$t$8817$DDDPb)
                                                       (if g$t$8817$DDDPb
                                                         ((case-lambda
                                                            ((g$loc$8818$DDDPb)
                                                             g$loc$8818$DDDPb))
                                                          g$t$8817$DDDPb)
                                                         g$op$8816$DDDPb)))
                                                    ((g$current-primitive-locations$8778$DDDPb)
                                                     g$op$8816$DDDPb))))
                                                (g$cadr$6433$DDDPb
                                                  g$x$8797$DDDPb))
                                               (if (eqv?
                                                     g$t$8798$DDDPb
                                                     'define)
                                                 g$x$8797$DDDPb
                                                 (if (list?
                                                       g$x$8797$DDDPb)
                                                   (g$map$5753$DDDPb
                                                     g$f$8796$DDDPb
                                                     g$x$8797$DDDPb)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$8797$DDDPb
                                                     (list?
                                                       g$x$8797$DDDPb)))))))))))))))
                          (car g$x$8797$DDDPb))
                         g$x$8797$DDDPb)))))
          g$f$8796$DDDPb))))
   (g$expanded->core$8781$DDDPb
     g$expanded->core$8826$DDDPb
     (case-lambda
       ((g$x$8819$DDDPb) ((g$rewriter$8780$DDDPb '#t) g$x$8819$DDDPb))))
   (g$compile-core-expr$8782$DDDPb
     g$compile-core-expr$8827$DDDPb
     (case-lambda
       ((g$x$8820$DDDPb) ((g$rewriter$8780$DDDPb '#f) g$x$8820$DDDPb))))
   (g$compile-core-expr-to-port$8783$DDDPb
     g$compile-core-expr-to-port$8828$DDDPb
     (case-lambda
       ((g$x$8821$DDDPb g$p$8822$DDDPb)
        (g$pretty-print$8459$DDDPb
          ((g$rewriter$8780$DDDPb '#f) g$x$8821$DDDPb)
          g$p$8822$DDDPb)))))
  (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$8829$DDDPb
     g$make-collection$9037$DDDPb
     (case-lambda
       (()
        ((case-lambda
           ((g$set$8892$DDDPb)
            (letrec* ((g$set-cons$8893$DDDPb
                        (case-lambda
                          ((g$x$8897$DDDPb g$ls$8898$DDDPb)
                           (if (g$memq$5745$DDDPb
                                 g$x$8897$DDDPb
                                 g$ls$8898$DDDPb)
                             g$ls$8898$DDDPb
                             (cons g$x$8897$DDDPb g$ls$8898$DDDPb))))))
              (case-lambda
                (() g$set$8892$DDDPb)
                ((g$x$8894$DDDPb)
                 (set! g$set$8892$DDDPb
                   (g$set-cons$8893$DDDPb
                     g$x$8894$DDDPb
                     g$set$8892$DDDPb)))
                ((g$x$8895$DDDPb g$del?$8896$DDDPb)
                 (if g$del?$8896$DDDPb
                   (set! g$set$8892$DDDPb
                     (g$remq$5760$DDDPb
                       g$x$8895$DDDPb
                       g$set$8892$DDDPb))
                   (set! g$set$8892$DDDPb
                     (g$set-cons$8893$DDDPb
                       g$x$8895$DDDPb
                       g$set$8892$DDDPb))))))))
         '()))))
   (g$current-library-collection$8830$DDDPb
     g$current-library-collection$9038$DDDPb
     (g$make-parameter$8260$DDDPb
       (g$make-collection$8829$DDDPb)
       (case-lambda
         ((g$x$8899$DDDPb)
          (begin
            (if (not (g$procedure?$6426$DDDPb g$x$8899$DDDPb))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$8899$DDDPb)
              (void))
            g$x$8899$DDDPb)))))
   (g$7356$8831$DDDPb
     g$7356$9039$DDDPb
     (make-record-type-descriptor
       'library
       '#f
       'g$7359$DDDPb
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7358$8832$DDDPb g$7358$9040$DDDPb '#f)
   (g$7357$8833$DDDPb
     g$7357$9041$DDDPb
     (make-record-constructor-descriptor
       g$7356$8831$DDDPb
       '#f
       g$7358$8832$DDDPb))
   (g$library?$8836$DDDPb
     g$library?$9042$DDDPb
     (record-predicate g$7356$8831$DDDPb))
   (g$make-library$8837$DDDPb
     g$make-library$9043$DDDPb
     (record-constructor g$7357$8833$DDDPb))
   (g$library-id$8838$DDDPb
     g$library-id$9044$DDDPb
     (record-accessor g$7356$8831$DDDPb '0))
   (g$library-name$8839$DDDPb
     g$library-name$9045$DDDPb
     (record-accessor g$7356$8831$DDDPb '1))
   (g$library-version$8840$DDDPb
     g$library-version$9046$DDDPb
     (record-accessor g$7356$8831$DDDPb '2))
   (g$library-imp*$8841$DDDPb
     g$library-imp*$9047$DDDPb
     (record-accessor g$7356$8831$DDDPb '3))
   (g$library-vis*$8842$DDDPb
     g$library-vis*$9048$DDDPb
     (record-accessor g$7356$8831$DDDPb '4))
   (g$library-inv*$8843$DDDPb
     g$library-inv*$9049$DDDPb
     (record-accessor g$7356$8831$DDDPb '5))
   (g$library-subst$8844$DDDPb
     g$library-subst$9050$DDDPb
     (record-accessor g$7356$8831$DDDPb '6))
   (g$library-env$8845$DDDPb
     g$library-env$9051$DDDPb
     (record-accessor g$7356$8831$DDDPb '7))
   (g$library-visit-state$8846$DDDPb
     g$library-visit-state$9052$DDDPb
     (record-accessor g$7356$8831$DDDPb '8))
   (g$library-invoke-state$8847$DDDPb
     g$library-invoke-state$9053$DDDPb
     (record-accessor g$7356$8831$DDDPb '9))
   (g$library-visit-code$8848$DDDPb
     g$library-visit-code$9054$DDDPb
     (record-accessor g$7356$8831$DDDPb '10))
   (g$library-invoke-code$8849$DDDPb
     g$library-invoke-code$9055$DDDPb
     (record-accessor g$7356$8831$DDDPb '11))
   (g$library-visible?$8850$DDDPb
     g$library-visible?$9056$DDDPb
     (record-accessor g$7356$8831$DDDPb '12))
   (g$library-source-file-name$8851$DDDPb
     g$library-source-file-name$9057$DDDPb
     (record-accessor g$7356$8831$DDDPb '13))
   (g$set-library-id!$8852$DDDPb
     g$set-library-id!$9058$DDDPb
     (record-mutator g$7356$8831$DDDPb '0))
   (g$set-library-name!$8853$DDDPb
     g$set-library-name!$9059$DDDPb
     (record-mutator g$7356$8831$DDDPb '1))
   (g$set-library-version!$8854$DDDPb
     g$set-library-version!$9060$DDDPb
     (record-mutator g$7356$8831$DDDPb '2))
   (g$set-library-imp*!$8855$DDDPb
     g$set-library-imp*!$9061$DDDPb
     (record-mutator g$7356$8831$DDDPb '3))
   (g$set-library-vis*!$8856$DDDPb
     g$set-library-vis*!$9062$DDDPb
     (record-mutator g$7356$8831$DDDPb '4))
   (g$set-library-inv*!$8857$DDDPb
     g$set-library-inv*!$9063$DDDPb
     (record-mutator g$7356$8831$DDDPb '5))
   (g$set-library-subst!$8858$DDDPb
     g$set-library-subst!$9064$DDDPb
     (record-mutator g$7356$8831$DDDPb '6))
   (g$set-library-env!$8859$DDDPb
     g$set-library-env!$9065$DDDPb
     (record-mutator g$7356$8831$DDDPb '7))
   (g$set-library-visit-state!$8860$DDDPb
     g$set-library-visit-state!$9066$DDDPb
     (record-mutator g$7356$8831$DDDPb '8))
   (g$set-library-invoke-state!$8861$DDDPb
     g$set-library-invoke-state!$9067$DDDPb
     (record-mutator g$7356$8831$DDDPb '9))
   (g$set-library-visit-code!$8862$DDDPb
     g$set-library-visit-code!$9068$DDDPb
     (record-mutator g$7356$8831$DDDPb '10))
   (g$set-library-invoke-code!$8863$DDDPb
     g$set-library-invoke-code!$9069$DDDPb
     (record-mutator g$7356$8831$DDDPb '11))
   (g$set-library-visible?!$8864$DDDPb
     g$set-library-visible?!$9070$DDDPb
     (record-mutator g$7356$8831$DDDPb '12))
   (g$set-library-source-file-name!$8865$DDDPb
     g$set-library-source-file-name!$9071$DDDPb
     (record-mutator g$7356$8831$DDDPb '13))
   (g$rp$8866$DDDPb
     g$rp$9072$DDDPb
     (make-record-printer
       'library
       (case-lambda
         ((g$x$8900$DDDPb g$p$8901$DDDPb g$wr$8902$DDDPb)
          (begin
            (if (not (g$library?$8836$DDDPb g$x$8900$DDDPb))
              (assertion-violation
                'record-type-printer
                '"not a library")
              (void))
            (display
              (g$format$8095$DDDPb
                '"#<library ~s>"
                (if (null?
                      (g$library-version$8840$DDDPb g$x$8900$DDDPb))
                  (g$library-name$8839$DDDPb g$x$8900$DDDPb)
                  (append
                    (g$library-name$8839$DDDPb g$x$8900$DDDPb)
                    (list
                      (g$library-version$8840$DDDPb g$x$8900$DDDPb)))))
              g$p$8901$DDDPb))))))
   (g$find-dependencies$8867$DDDPb
     g$find-dependencies$9073$DDDPb
     (case-lambda
       ((g$ls$8903$DDDPb)
        (if (null? g$ls$8903$DDDPb)
          '()
          (assertion-violation
            'find-dependencies
            '"cannot handle deps yet")))))
   (g$find-library-by$8868$DDDPb
     g$find-library-by$9074$DDDPb
     (case-lambda
       ((g$pred$8904$DDDPb)
        ((letrec ((g$f$8905$DDDPb
                    (case-lambda
                      ((g$ls$8906$DDDPb)
                       (if (null? g$ls$8906$DDDPb)
                         '#f
                         (if (g$pred$8904$DDDPb (car g$ls$8906$DDDPb))
                           (car g$ls$8906$DDDPb)
                           (g$f$8905$DDDPb (cdr g$ls$8906$DDDPb))))))))
           g$f$8905$DDDPb)
         ((g$current-library-collection$8830$DDDPb))))))
   (g$library-path$8869$DDDPb
     g$library-path$9075$DDDPb
     (g$make-parameter$8260$DDDPb
       '(".")
       (case-lambda
         ((g$x$8907$DDDPb)
          (if (if (list? g$x$8907$DDDPb)
                (begin
                  '#f
                  (g$for-all$5751$DDDPb string? g$x$8907$DDDPb))
                '#f)
            (g$map$5753$DDDPb
              (case-lambda ((g$x$8908$DDDPb) g$x$8908$DDDPb))
              g$x$8907$DDDPb)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$8907$DDDPb))))))
   (g$library-extensions$8870$DDDPb
     g$library-extensions$9076$DDDPb
     (g$make-parameter$8260$DDDPb
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$8909$DDDPb)
          (if (if (list? g$x$8909$DDDPb)
                (begin
                  '#f
                  (g$for-all$5751$DDDPb string? g$x$8909$DDDPb))
                '#f)
            (g$map$5753$DDDPb
              (case-lambda ((g$x$8910$DDDPb) g$x$8910$DDDPb))
              g$x$8909$DDDPb)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$8909$DDDPb))))))
   (g$library-name->file-name$8871$DDDPb
     g$library-name->file-name$9077$DDDPb
     (case-lambda
       ((g$x$8911$DDDPb)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$7858$DDDPb)))
          (case-lambda
            ((g$p$8914$DDDPb g$extract$8915$DDDPb)
             ((case-lambda
                ((g$extract$8916$DDDPb g$p$8917$DDDPb)
                 (letrec* ((g$display-hex$8918$DDDPb
                             (case-lambda
                               ((g$n$8926$DDDPb)
                                (if (<= '0 g$n$8926$DDDPb '9)
                                  (display
                                    g$n$8926$DDDPb
                                    g$p$8917$DDDPb)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$8926$DDDPb '10)))
                                    g$p$8917$DDDPb))))))
                   (begin
                     ((letrec ((g$f$8919$DDDPb
                                 (case-lambda
                                   ((g$ls$8920$DDDPb)
                                    (if (not (null? g$ls$8920$DDDPb))
                                      (begin
                                        (display '"/" g$p$8917$DDDPb)
                                        (g$for-each$5754$DDDPb
                                          (case-lambda
                                            ((g$c$8921$DDDPb)
                                             (if ((case-lambda
                                                    ((g$t$8922$DDDPb)
                                                     (if g$t$8922$DDDPb
                                                       g$t$8922$DDDPb
                                                       ((case-lambda
                                                          ((g$t$8923$DDDPb)
                                                           (if g$t$8923$DDDPb
                                                             g$t$8923$DDDPb
                                                             ((case-lambda
                                                                ((g$t$8924$DDDPb)
                                                                 (if g$t$8924$DDDPb
                                                                   g$t$8924$DDDPb
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5746$DDDPb
                                                                       g$c$8921$DDDPb
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$6479$DDDPb
                                                                '#\0
                                                                g$c$8921$DDDPb
                                                                '#\9)))))
                                                        (g$char<=?$6479$DDDPb
                                                          '#\A
                                                          g$c$8921$DDDPb
                                                          '#\Z)))))
                                                  (g$char<=?$6479$DDDPb
                                                    '#\a
                                                    g$c$8921$DDDPb
                                                    '#\z))
                                               (display
                                                 g$c$8921$DDDPb
                                                 g$p$8917$DDDPb)
                                               (begin
                                                 (display
                                                   '"%"
                                                   g$p$8917$DDDPb)
                                                 ((case-lambda
                                                    ((g$n$8925$DDDPb)
                                                     (begin
                                                       (g$display-hex$8918$DDDPb
                                                         (g$quotient$7333$DDDPb
                                                           g$n$8925$DDDPb
                                                           '16))
                                                       (g$display-hex$8918$DDDPb
                                                         (g$remainder$7334$DDDPb
                                                           g$n$8925$DDDPb
                                                           '16)))))
                                                  (char->integer
                                                    g$c$8921$DDDPb))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$8920$DDDPb))))
                                        (g$f$8919$DDDPb
                                          (cdr g$ls$8920$DDDPb)))
                                      (void))))))
                        g$f$8919$DDDPb)
                      g$x$8911$DDDPb)
                     (g$extract$8916$DDDPb)))))
              g$extract$8915$DDDPb
              g$p$8914$DDDPb)))))))
   (g$file-locator$8872$DDDPb
     g$file-locator$9078$DDDPb
     (g$make-parameter$8260$DDDPb
       (case-lambda
         ((g$x$8927$DDDPb)
          ((case-lambda
             ((g$str$8928$DDDPb)
              ((letrec ((g$f$8929$DDDPb
                          (case-lambda
                            ((g$ls$8930$DDDPb
                               g$exts$8931$DDDPb
                               g$failed-list$8932$DDDPb)
                             (if (null? g$ls$8930$DDDPb)
                               (g$file-locator-resolution-error$8258$DDDPb
                                 g$x$8927$DDDPb
                                 (g$reverse$6431$DDDPb
                                   g$failed-list$8932$DDDPb))
                               (if (null? g$exts$8931$DDDPb)
                                 (g$f$8929$DDDPb
                                   (cdr g$ls$8930$DDDPb)
                                   (g$library-extensions$8870$DDDPb)
                                   g$failed-list$8932$DDDPb)
                                 ((case-lambda
                                    ((g$name$8933$DDDPb)
                                     (if (g$file-exists?$6541$DDDPb
                                           g$name$8933$DDDPb)
                                       g$name$8933$DDDPb
                                       (g$f$8929$DDDPb
                                         g$ls$8930$DDDPb
                                         (cdr g$exts$8931$DDDPb)
                                         (cons
                                           g$name$8933$DDDPb
                                           g$failed-list$8932$DDDPb)))))
                                  (string-append
                                    (car g$ls$8930$DDDPb)
                                    g$str$8928$DDDPb
                                    (car g$exts$8931$DDDPb)))))))))
                 g$f$8929$DDDPb)
               (g$library-path$8869$DDDPb)
               (g$library-extensions$8870$DDDPb)
               '())))
           (g$library-name->file-name$8871$DDDPb g$x$8927$DDDPb))))
       (case-lambda
         ((g$f$8934$DDDPb)
          (if (g$procedure?$6426$DDDPb g$f$8934$DDDPb)
            g$f$8934$DDDPb
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$8934$DDDPb))))))
   (g$serialize-all$8873$DDDPb
     g$serialize-all$9079$DDDPb
     (case-lambda
       ((g$serialize$8935$DDDPb g$compile$8936$DDDPb)
        (letrec* ((g$library-desc$8937$DDDPb
                    (case-lambda
                      ((g$x$8939$DDDPb)
                       (list
                         (g$library-id$8838$DDDPb g$x$8939$DDDPb)
                         (g$library-name$8839$DDDPb g$x$8939$DDDPb))))))
          (g$for-each$5754$DDDPb
            (case-lambda
              ((g$x$8938$DDDPb)
               (if (g$library-source-file-name$8851$DDDPb
                     g$x$8938$DDDPb)
                 (g$serialize$8935$DDDPb
                   (g$library-source-file-name$8851$DDDPb
                     g$x$8938$DDDPb)
                   (list
                     (g$library-id$8838$DDDPb g$x$8938$DDDPb)
                     (g$library-name$8839$DDDPb g$x$8938$DDDPb)
                     (g$library-version$8840$DDDPb g$x$8938$DDDPb)
                     (g$map$5753$DDDPb
                       g$library-desc$8937$DDDPb
                       (g$library-imp*$8841$DDDPb g$x$8938$DDDPb))
                     (g$map$5753$DDDPb
                       g$library-desc$8937$DDDPb
                       (g$library-vis*$8842$DDDPb g$x$8938$DDDPb))
                     (g$map$5753$DDDPb
                       g$library-desc$8937$DDDPb
                       (g$library-inv*$8843$DDDPb g$x$8938$DDDPb))
                     (g$library-subst$8844$DDDPb g$x$8938$DDDPb)
                     (g$library-env$8845$DDDPb g$x$8938$DDDPb)
                     (g$compile$8936$DDDPb
                       (g$library-visit-code$8848$DDDPb g$x$8938$DDDPb))
                     (g$compile$8936$DDDPb
                       (g$library-invoke-code$8849$DDDPb
                         g$x$8938$DDDPb))
                     (g$library-visible?$8850$DDDPb g$x$8938$DDDPb)))
                 (void))))
            ((g$current-library-collection$8830$DDDPb)))))))
   (g$current-precompiled-library-loader$8874$DDDPb
     g$current-precompiled-library-loader$9080$DDDPb
     (g$make-parameter$8260$DDDPb
       (case-lambda ((g$filename$8940$DDDPb g$sk$8941$DDDPb) '#f))))
   (g$try-load-from-file$8875$DDDPb
     g$try-load-from-file$9081$DDDPb
     (case-lambda
       ((g$filename$8942$DDDPb)
        ((g$current-precompiled-library-loader$8874$DDDPb)
         g$filename$8942$DDDPb
         (case-lambda
           ((g$id$8943$DDDPb
              g$name$8944$DDDPb
              g$ver$8945$DDDPb
              g$imp*$8946$DDDPb
              g$vis*$8947$DDDPb
              g$inv*$8948$DDDPb
              g$exp-subst$8949$DDDPb
              g$exp-env$8950$DDDPb
              g$visit-proc$8951$DDDPb
              g$invoke-proc$8952$DDDPb
              g$visible?$8953$DDDPb)
            ((letrec ((g$f$8954$DDDPb
                        (case-lambda
                          ((g$deps$8955$DDDPb)
                           (if (null? g$deps$8955$DDDPb)
                             (begin
                               (g$install-library$8885$DDDPb
                                 g$id$8943$DDDPb
                                 g$name$8944$DDDPb
                                 g$ver$8945$DDDPb
                                 g$imp*$8946$DDDPb
                                 g$vis*$8947$DDDPb
                                 g$inv*$8948$DDDPb
                                 g$exp-subst$8949$DDDPb
                                 g$exp-env$8950$DDDPb
                                 g$visit-proc$8951$DDDPb
                                 g$invoke-proc$8952$DDDPb
                                 '#f
                                 '#f
                                 g$visible?$8953$DDDPb
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$8956$DDDPb)
                                 ((case-lambda
                                    ((g$label$8957$DDDPb
                                       g$dname$8958$DDDPb)
                                     ((case-lambda
                                        ((g$l$8959$DDDPb)
                                         (if (if (g$library?$8836$DDDPb
                                                   g$l$8959$DDDPb)
                                               (begin
                                                 '#f
                                                 (eq? g$label$8957$DDDPb
                                                      (g$library-id$8838$DDDPb
                                                        g$l$8959$DDDPb)))
                                               '#f)
                                           (g$f$8954$DDDPb
                                             (cdr g$deps$8955$DDDPb))
                                           (begin
                                             (g$library-version-mismatch-warning$8257$DDDPb
                                               g$name$8944$DDDPb
                                               g$dname$8958$DDDPb
                                               g$filename$8942$DDDPb)
                                             '#f))))
                                      (g$find-library-by-name$8880$DDDPb
                                        g$dname$8958$DDDPb))))
                                  (car g$d$8956$DDDPb)
                                  (g$cadr$6433$DDDPb g$d$8956$DDDPb))))
                              (car g$deps$8955$DDDPb)))))))
               g$f$8954$DDDPb)
             (append
               g$imp*$8946$DDDPb
               g$vis*$8947$DDDPb
               g$inv*$8948$DDDPb)))
           (g$others$8960$DDDPb '#f))))))
   (g$library-loader$8876$DDDPb
     g$library-loader$9082$DDDPb
     (g$make-parameter$8260$DDDPb
       (case-lambda
         ((g$x$8961$DDDPb)
          ((case-lambda
             ((g$file-name$8962$DDDPb)
              (if (not g$file-name$8962$DDDPb)
                (assertion-violation
                  '#f
                  '"cannot find library"
                  g$x$8961$DDDPb)
                ((case-lambda
                   ((g$t$8963$DDDPb)
                    (if g$t$8963$DDDPb
                      g$t$8963$DDDPb
                      (begin
                        '#f
                        ((g$current-library-expander$8877$DDDPb)
                         (g$read-library-source-file$8259$DDDPb
                           g$file-name$8962$DDDPb)
                         g$file-name$8962$DDDPb
                         (case-lambda
                           ((g$name$8964$DDDPb)
                            (if (not (equal?
                                       g$name$8964$DDDPb
                                       g$x$8961$DDDPb))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$open-string-output-port$7858$DDDPb)))
                                  (case-lambda
                                    ((g$p$8967$DDDPb g$e$8968$DDDPb)
                                     ((case-lambda
                                        ((g$e$8969$DDDPb g$p$8970$DDDPb)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$8970$DDDPb)
                                           (write
                                             g$x$8961$DDDPb
                                             g$p$8970$DDDPb)
                                           (display
                                             '" in file "
                                             g$p$8970$DDDPb)
                                           (display
                                             g$file-name$8962$DDDPb
                                             g$p$8970$DDDPb)
                                           (display
                                             '", found "
                                             g$p$8970$DDDPb)
                                           (write
                                             g$name$8964$DDDPb
                                             g$p$8970$DDDPb)
                                           (display
                                             '" instead"
                                             g$p$8970$DDDPb)
                                           (g$e$8969$DDDPb))))
                                      g$e$8968$DDDPb
                                      g$p$8967$DDDPb)))))
                              (void)))))))))
                 (g$try-load-from-file$8875$DDDPb
                   g$file-name$8962$DDDPb)))))
           ((g$file-locator$8872$DDDPb) g$x$8961$DDDPb))))
       (case-lambda
         ((g$f$8971$DDDPb)
          (if (g$procedure?$6426$DDDPb g$f$8971$DDDPb)
            g$f$8971$DDDPb
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$8971$DDDPb))))))
   (g$current-library-expander$8877$DDDPb
     g$current-library-expander$9083$DDDPb
     (g$make-parameter$8260$DDDPb
       (case-lambda
         ((g$x$8972$DDDPb)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$8973$DDDPb)
          (if (g$procedure?$6426$DDDPb g$f$8973$DDDPb)
            g$f$8973$DDDPb
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$8973$DDDPb))))))
   (g$external-pending-libraries$8878$DDDPb
     g$external-pending-libraries$9084$DDDPb
     (g$make-parameter$8260$DDDPb '()))
   (g$find-external-library$8879$DDDPb
     g$find-external-library$9085$DDDPb
     (case-lambda
       ((g$name$8974$DDDPb)
        (begin
          (if (g$member$5747$DDDPb
                g$name$8974$DDDPb
                (g$external-pending-libraries$8878$DDDPb))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$8974$DDDPb)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$8977$DDDPb
                g$external-pending-libraries$8978$DDDPb)
              ((case-lambda
                 ((g$swap$8979$DDDPb)
                  (dynamic-wind
                    g$swap$8979$DDDPb
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$8876$DDDPb)
                          g$name$8974$DDDPb)
                         ((case-lambda
                            ((g$t$8980$DDDPb)
                             (if g$t$8980$DDDPb
                               g$t$8980$DDDPb
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$8974$DDDPb)))))
                          (g$find-library-by$8868$DDDPb
                            (case-lambda
                              ((g$x$8981$DDDPb)
                               (equal?
                                 (g$library-name$8839$DDDPb
                                   g$x$8981$DDDPb)
                                 g$name$8974$DDDPb))))))))
                    g$swap$8979$DDDPb)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$8982$DDDPb)
                      (begin
                        (g$external-pending-libraries$8977$DDDPb
                          g$external-pending-libraries$8978$DDDPb)
                        (set! g$external-pending-libraries$8978$DDDPb
                          g$t$8982$DDDPb))))
                   (g$external-pending-libraries$8977$DDDPb)))))))
           g$external-pending-libraries$8878$DDDPb
           (cons
             g$name$8974$DDDPb
             (g$external-pending-libraries$8878$DDDPb)))))))
   (g$find-library-by-name$8880$DDDPb
     g$find-library-by-name$9086$DDDPb
     (case-lambda
       ((g$name$8983$DDDPb)
        ((case-lambda
           ((g$t$8984$DDDPb)
            (if g$t$8984$DDDPb
              g$t$8984$DDDPb
              (begin
                '#f
                (g$find-external-library$8879$DDDPb
                  g$name$8983$DDDPb)))))
         (g$find-library-by$8868$DDDPb
           (case-lambda
             ((g$x$8985$DDDPb)
              (equal?
                (g$library-name$8839$DDDPb g$x$8985$DDDPb)
                g$name$8983$DDDPb))))))))
   (g$uninstall-library$8881$DDDPb
     g$uninstall-library$9087$DDDPb
     (case-lambda
       ((g$name$8986$DDDPb g$err?$8987$DDDPb)
        (letrec* ((g$who$8988$DDDPb 'uninstall-library))
          ((case-lambda
             ((g$lib$8989$DDDPb)
              (begin
                (if (if g$err?$8987$DDDPb
                      (begin '#f (not g$lib$8989$DDDPb))
                      '#f)
                  (assertion-violation
                    g$who$8988$DDDPb
                    '"library not installed"
                    g$name$8986$DDDPb)
                  (void))
                ((g$current-library-collection$8830$DDDPb)
                 g$lib$8989$DDDPb
                 '#t)
                (g$for-each$5754$DDDPb
                  (case-lambda
                    ((g$x$8990$DDDPb)
                     ((case-lambda
                        ((g$label$8991$DDDPb g$binding$8992$DDDPb)
                         (begin
                           (remove-location g$label$8991$DDDPb)
                           (if (g$memq$5745$DDDPb
                                 (car g$binding$8992$DDDPb)
                                 '(global
                                    global-macro
                                    global-macro!
                                    global-ctv))
                             (remove-location
                               (cdr g$binding$8992$DDDPb))
                             (void)))))
                      (car g$x$8990$DDDPb)
                      (cdr g$x$8990$DDDPb))))
                  (g$library-env$8845$DDDPb g$lib$8989$DDDPb)))))
           (g$find-library-by$8868$DDDPb
             (case-lambda
               ((g$x$8993$DDDPb)
                (equal?
                  (g$library-name$8839$DDDPb g$x$8993$DDDPb)
                  g$name$8986$DDDPb)))))))
       ((g$name$8994$DDDPb)
        (g$uninstall-library$8881$DDDPb g$name$8994$DDDPb '#t))))
   (g$library-exists?$8882$DDDPb
     g$library-exists?$9088$DDDPb
     (case-lambda
       ((g$name$8995$DDDPb)
        (if (g$find-library-by$8868$DDDPb
              (case-lambda
                ((g$x$8996$DDDPb)
                 (equal?
                   (g$library-name$8839$DDDPb g$x$8996$DDDPb)
                   g$name$8995$DDDPb))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$8883$DDDPb
     g$find-library-by-spec/die$9089$DDDPb
     (case-lambda
       ((g$spec$8997$DDDPb)
        ((case-lambda
           ((g$id$8998$DDDPb)
            ((case-lambda
               ((g$t$8999$DDDPb)
                (if g$t$8999$DDDPb
                  g$t$8999$DDDPb
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$8997$DDDPb)))))
             (g$find-library-by$8868$DDDPb
               (case-lambda
                 ((g$x$9000$DDDPb)
                  (eq? g$id$8998$DDDPb
                       (g$library-id$8838$DDDPb g$x$9000$DDDPb))))))))
         (car g$spec$8997$DDDPb)))))
   (g$install-library-record$8884$DDDPb
     g$install-library-record$9090$DDDPb
     (case-lambda
       ((g$lib$9001$DDDPb)
        (begin
          ((case-lambda
             ((g$exp-env$9002$DDDPb)
              (g$for-each$5754$DDDPb
                (case-lambda
                  ((g$x$9003$DDDPb)
                   ((case-lambda
                      ((g$label$9004$DDDPb g$binding$9005$DDDPb)
                       ((case-lambda
                          ((g$binding$9006$DDDPb)
                           (g$set-label-binding!$8263$DDDPb
                             g$label$9004$DDDPb
                             g$binding$9006$DDDPb)))
                        ((case-lambda
                           ((g$t$9007$DDDPb)
                            (if (eqv? g$t$9007$DDDPb 'global)
                              (cons
                                'global
                                (cons
                                  g$lib$9001$DDDPb
                                  (cdr g$binding$9005$DDDPb)))
                              (if (eqv? g$t$9007$DDDPb 'global-macro)
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$9001$DDDPb
                                    (cdr g$binding$9005$DDDPb)))
                                (if (eqv? g$t$9007$DDDPb 'global-macro!)
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$9001$DDDPb
                                      (cdr g$binding$9005$DDDPb)))
                                  (if (eqv? g$t$9007$DDDPb 'global-ctv)
                                    (cons
                                      'global-ctv
                                      (cons
                                        g$lib$9001$DDDPb
                                        (cdr g$binding$9005$DDDPb)))
                                    g$binding$9005$DDDPb))))))
                         (car g$binding$9005$DDDPb)))))
                    (car g$x$9003$DDDPb)
                    (cdr g$x$9003$DDDPb))))
                g$exp-env$9002$DDDPb)))
           (g$library-env$8845$DDDPb g$lib$9001$DDDPb))
          ((g$current-library-collection$8830$DDDPb)
           g$lib$9001$DDDPb)))))
   (g$install-library$8885$DDDPb
     g$install-library$9091$DDDPb
     (case-lambda
       ((g$id$9008$DDDPb
          g$name$9009$DDDPb
          g$ver$9010$DDDPb
          g$imp*$9011$DDDPb
          g$vis*$9012$DDDPb
          g$inv*$9013$DDDPb
          g$exp-subst$9014$DDDPb
          g$exp-env$9015$DDDPb
          g$visit-proc$9016$DDDPb
          g$invoke-proc$9017$DDDPb
          g$visit-code$9018$DDDPb
          g$invoke-code$9019$DDDPb
          g$visible?$9020$DDDPb
          g$source-file-name$9021$DDDPb)
        ((case-lambda
           ((g$imp-lib*$9022$DDDPb
              g$vis-lib*$9023$DDDPb
              g$inv-lib*$9024$DDDPb)
            (begin
              (if (not (if (g$symbol?$6424$DDDPb g$id$9008$DDDPb)
                         (if (list? g$name$9009$DDDPb)
                           (begin '#f (list? g$ver$9010$DDDPb))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$9008$DDDPb
                  g$name$9009$DDDPb
                  g$ver$9010$DDDPb)
                (void))
              (if (g$library-exists?$8882$DDDPb g$name$9009$DDDPb)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$9009$DDDPb)
                (void))
              ((case-lambda
                 ((g$lib$9025$DDDPb)
                  (g$install-library-record$8884$DDDPb
                    g$lib$9025$DDDPb)))
               (g$make-library$8837$DDDPb
                 g$id$9008$DDDPb
                 g$name$9009$DDDPb
                 g$ver$9010$DDDPb
                 g$imp-lib*$9022$DDDPb
                 g$vis-lib*$9023$DDDPb
                 g$inv-lib*$9024$DDDPb
                 g$exp-subst$9014$DDDPb
                 g$exp-env$9015$DDDPb
                 g$visit-proc$9016$DDDPb
                 g$invoke-proc$9017$DDDPb
                 g$visit-code$9018$DDDPb
                 g$invoke-code$9019$DDDPb
                 g$visible?$9020$DDDPb
                 g$source-file-name$9021$DDDPb)))))
         (g$map$5753$DDDPb
           g$find-library-by-spec/die$8883$DDDPb
           g$imp*$9011$DDDPb)
         (g$map$5753$DDDPb
           g$find-library-by-spec/die$8883$DDDPb
           g$vis*$9012$DDDPb)
         (g$map$5753$DDDPb
           g$find-library-by-spec/die$8883$DDDPb
           g$inv*$9013$DDDPb)))))
   (g$imported-label->binding$8886$DDDPb
     g$imported-label->binding$9092$DDDPb
     (case-lambda
       ((g$lab$9026$DDDPb)
        (g$label-binding$8264$DDDPb g$lab$9026$DDDPb))))
   (g$invoke-library$8887$DDDPb
     g$invoke-library$9093$DDDPb
     (case-lambda
       ((g$lib$9027$DDDPb)
        ((case-lambda
           ((g$invoke$9028$DDDPb)
            (if (g$procedure?$6426$DDDPb g$invoke$9028$DDDPb)
              (begin
                (g$set-library-invoke-state!$8861$DDDPb
                  g$lib$9027$DDDPb
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$9027$DDDPb))))
                (g$for-each$5754$DDDPb
                  g$invoke-library$8887$DDDPb
                  (g$library-inv*$8843$DDDPb g$lib$9027$DDDPb))
                (g$set-library-invoke-state!$8861$DDDPb
                  g$lib$9027$DDDPb
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$9027$DDDPb))))
                (g$invoke$9028$DDDPb)
                (g$set-library-invoke-state!$8861$DDDPb
                  g$lib$9027$DDDPb
                  '#t))
              (void))))
         (g$library-invoke-state$8847$DDDPb g$lib$9027$DDDPb)))))
   (g$visit-library$8888$DDDPb
     g$visit-library$9094$DDDPb
     (case-lambda
       ((g$lib$9029$DDDPb)
        ((case-lambda
           ((g$visit$9030$DDDPb)
            (if (g$procedure?$6426$DDDPb g$visit$9030$DDDPb)
              (begin
                (g$set-library-visit-state!$8860$DDDPb
                  g$lib$9029$DDDPb
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$9029$DDDPb))))
                (g$for-each$5754$DDDPb
                  g$invoke-library$8887$DDDPb
                  (g$library-vis*$8842$DDDPb g$lib$9029$DDDPb))
                (g$set-library-visit-state!$8860$DDDPb
                  g$lib$9029$DDDPb
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$9029$DDDPb))))
                (g$visit$9030$DDDPb)
                (g$set-library-visit-state!$8860$DDDPb
                  g$lib$9029$DDDPb
                  '#t))
              (void))))
         (g$library-visit-state$8846$DDDPb g$lib$9029$DDDPb)))))
   (g$invoke-library-by-spec$8889$DDDPb
     g$invoke-library-by-spec$9095$DDDPb
     (case-lambda
       ((g$spec$9031$DDDPb)
        (g$invoke-library$8887$DDDPb
          (g$find-library-by-spec/die$8883$DDDPb g$spec$9031$DDDPb)))))
   (g$installed-libraries$8890$DDDPb
     g$installed-libraries$9096$DDDPb
     (case-lambda
       ((g$all?$9032$DDDPb)
        ((letrec ((g$f$9033$DDDPb
                    (case-lambda
                      ((g$ls$9034$DDDPb)
                       (if (null? g$ls$9034$DDDPb)
                         '()
                         (if ((case-lambda
                                ((g$t$9035$DDDPb)
                                 (if g$t$9035$DDDPb
                                   g$t$9035$DDDPb
                                   (begin
                                     '#f
                                     (g$library-visible?$8850$DDDPb
                                       (car g$ls$9034$DDDPb))))))
                              g$all?$9032$DDDPb)
                           (cons
                             (g$library-name$8839$DDDPb
                               (car g$ls$9034$DDDPb))
                             (g$f$9033$DDDPb (cdr g$ls$9034$DDDPb)))
                           (g$f$9033$DDDPb (cdr g$ls$9034$DDDPb))))))))
           g$f$9033$DDDPb)
         ((g$current-library-collection$8830$DDDPb))))
       (() (g$installed-libraries$8890$DDDPb '#f))))
   (g$library-spec$8891$DDDPb
     g$library-spec$9097$DDDPb
     (case-lambda
       ((g$x$9036$DDDPb)
        (begin
          (if (not (g$library?$8836$DDDPb g$x$9036$DDDPb))
            (assertion-violation
              'library-spec
              '"not a library"
              g$x$9036$DDDPb)
            (void))
          (list
            (g$library-id$8838$DDDPb g$x$9036$DDDPb)
            (g$library-name$8839$DDDPb g$x$9036$DDDPb)
            (g$library-version$8840$DDDPb g$x$9036$DDDPb)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$9098$DDDPb
     g$build-global-define$9275$DDDPb
     (case-lambda ((g$x$9246$DDDPb) (g$build-void$9242$DDDPb))))
   (g$build-lambda$9188$DDDPb
     g$build-lambda$9276$DDDPb
     (case-lambda
       ((g$ae$9247$DDDPb g$vars$9248$DDDPb g$exp$9249$DDDPb)
        (list 'case-lambda (list g$vars$9248$DDDPb g$exp$9249$DDDPb)))))
   (g$build-case-lambda$9189$DDDPb
     g$build-case-lambda$9277$DDDPb
     (case-lambda
       ((g$ae$9250$DDDPb g$vars*$9251$DDDPb g$exp*$9252$DDDPb)
        (cons
          'case-lambda
          (g$map$5753$DDDPb
            list
            g$vars*$9251$DDDPb
            g$exp*$9252$DDDPb)))))
   (g$build-let$9190$DDDPb
     g$build-let$9278$DDDPb
     (case-lambda
       ((g$ae$9253$DDDPb
          g$lhs*$9254$DDDPb
          g$rhs*$9255$DDDPb
          g$body$9256$DDDPb)
        (cons
          (g$build-lambda$9188$DDDPb
            g$ae$9253$DDDPb
            g$lhs*$9254$DDDPb
            g$body$9256$DDDPb)
          g$rhs*$9255$DDDPb))))
   (g$build-sequence$9241$DDDPb
     g$build-sequence$9279$DDDPb
     (case-lambda
       ((g$ae$9257$DDDPb g$exps$9258$DDDPb)
        ((letrec ((g$loop$9259$DDDPb
                    (case-lambda
                      ((g$exps$9260$DDDPb)
                       (if (null? (cdr g$exps$9260$DDDPb))
                         (car g$exps$9260$DDDPb)
                         (if (equal?
                               (car g$exps$9260$DDDPb)
                               (g$build-void$9242$DDDPb))
                           (g$loop$9259$DDDPb (cdr g$exps$9260$DDDPb))
                           (cons 'begin g$exps$9260$DDDPb)))))))
           g$loop$9259$DDDPb)
         g$exps$9258$DDDPb))))
   (g$build-void$9242$DDDPb
     g$build-void$9280$DDDPb
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$9243$DDDPb
     g$build-letrec$9281$DDDPb
     (case-lambda
       ((g$ae$9261$DDDPb
          g$vars$9262$DDDPb
          g$val-exps$9263$DDDPb
          g$body-exp$9264$DDDPb)
        (if (null? g$vars$9262$DDDPb)
          g$body-exp$9264$DDDPb
          (list
            'letrec
            (g$map$5753$DDDPb
              list
              g$vars$9262$DDDPb
              g$val-exps$9263$DDDPb)
            g$body-exp$9264$DDDPb)))))
   (g$build-letrec*$9244$DDDPb
     g$build-letrec*$9282$DDDPb
     (case-lambda
       ((g$ae$9265$DDDPb
          g$vars$9266$DDDPb
          g$val-exps$9267$DDDPb
          g$body-exp$9268$DDDPb)
        (if (null? g$vars$9266$DDDPb)
          g$body-exp$9268$DDDPb
          (list
            'letrec*
            (g$map$5753$DDDPb
              list
              g$vars$9266$DDDPb
              g$val-exps$9267$DDDPb)
            g$body-exp$9268$DDDPb)))))
   (g$build-library-letrec*$9245$DDDPb
     g$build-library-letrec*$9283$DDDPb
     (case-lambda
       ((g$ae$9269$DDDPb
          g$name$9270$DDDPb
          g$vars$9271$DDDPb
          g$locs$9272$DDDPb
          g$val-exps$9273$DDDPb
          g$body-exp$9274$DDDPb)
        (list
          'library-letrec*
          g$name$9270$DDDPb
          (g$map$5753$DDDPb
            list
            g$vars$9271$DDDPb
            g$locs$9272$DDDPb
            g$val-exps$9273$DDDPb)
          g$body-exp$9274$DDDPb)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$9284$DDDPb
     g$set-cons$13106$DDDPb
     (case-lambda
       ((g$x$9844$DDDPb g$ls$9845$DDDPb)
        (if (g$memq$5745$DDDPb g$x$9844$DDDPb g$ls$9845$DDDPb)
          g$ls$9845$DDDPb
          (cons g$x$9844$DDDPb g$ls$9845$DDDPb)))))
   (g$set-union$9285$DDDPb
     g$set-union$13107$DDDPb
     (case-lambda
       ((g$ls1$9846$DDDPb g$ls2$9847$DDDPb)
        (if (null? g$ls1$9846$DDDPb)
          g$ls2$9847$DDDPb
          (if (g$memq$5745$DDDPb
                (car g$ls1$9846$DDDPb)
                g$ls2$9847$DDDPb)
            (g$set-union$9285$DDDPb
              (cdr g$ls1$9846$DDDPb)
              g$ls2$9847$DDDPb)
            (cons
              (car g$ls1$9846$DDDPb)
              (g$set-union$9285$DDDPb
                (cdr g$ls1$9846$DDDPb)
                g$ls2$9847$DDDPb)))))))
   (g$top-mark*$9287$DDDPb g$top-mark*$13108$DDDPb '(top))
   (g$top-marked?$9288$DDDPb
     g$top-marked?$13109$DDDPb
     (case-lambda
       ((g$m*$9848$DDDPb) (g$memq$5745$DDDPb 'top g$m*$9848$DDDPb))))
   (g$gen-lexical$9289$DDDPb
     g$gen-lexical$13110$DDDPb
     (case-lambda
       ((g$sym$9849$DDDPb)
        (if (g$symbol?$6424$DDDPb g$sym$9849$DDDPb)
          (gensym g$sym$9849$DDDPb)
          (if (g$stx?$9326$DDDPb g$sym$9849$DDDPb)
            (g$gen-lexical$9289$DDDPb
              (g$id->sym$9355$DDDPb g$sym$9849$DDDPb))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$9849$DDDPb))))))
   (g$gen-global$9290$DDDPb
     g$gen-global$13111$DDDPb
     (case-lambda
       ((g$x$9850$DDDPb) (g$gen-lexical$9289$DDDPb g$x$9850$DDDPb))))
   (g$gen-label$9291$DDDPb
     g$gen-label$13112$DDDPb
     (case-lambda ((g$_$9851$DDDPb) (gensym))))
   (g$gen-top-level-label$9292$DDDPb
     g$gen-top-level-label$13113$DDDPb
     (case-lambda
       ((g$id$9852$DDDPb g$rib$9853$DDDPb)
        (letrec* ((g$find$9854$DDDPb
                    (case-lambda
                      ((g$sym$9860$DDDPb
                         g$mark*$9861$DDDPb
                         g$sym*$9862$DDDPb
                         g$mark**$9863$DDDPb
                         g$label*$9864$DDDPb)
                       (if (pair? g$sym*$9862$DDDPb)
                         (begin
                           '#f
                           (if (if (eq? g$sym$9860$DDDPb
                                        (car g$sym*$9862$DDDPb))
                                 (begin
                                   '#f
                                   (g$same-marks?$9356$DDDPb
                                     g$mark*$9861$DDDPb
                                     (car g$mark**$9863$DDDPb)))
                                 '#f)
                             (car g$label*$9864$DDDPb)
                             (g$find$9854$DDDPb
                               g$sym$9860$DDDPb
                               g$mark*$9861$DDDPb
                               (cdr g$sym*$9862$DDDPb)
                               (cdr g$mark**$9863$DDDPb)
                               (cdr g$label*$9864$DDDPb))))
                         '#f)))))
          ((case-lambda
             ((g$sym$9855$DDDPb g$mark*$9856$DDDPb)
              ((case-lambda
                 ((g$sym*$9857$DDDPb)
                  ((case-lambda
                     ((g$t$9858$DDDPb)
                      (if g$t$9858$DDDPb
                        ((case-lambda
                           ((g$label$9859$DDDPb)
                            (if (g$imported-label->binding$9092$DDDPb
                                  g$label$9859$DDDPb)
                              (gensym)
                              g$label$9859$DDDPb)))
                         g$t$9858$DDDPb)
                        (gensym))))
                   (if (g$memq$5745$DDDPb
                         g$sym$9855$DDDPb
                         (g$rib-sym*$9302$DDDPb g$rib$9853$DDDPb))
                     (begin
                       '#f
                       (g$find$9854$DDDPb
                         g$sym$9855$DDDPb
                         g$mark*$9856$DDDPb
                         g$sym*$9857$DDDPb
                         (g$rib-mark**$9303$DDDPb g$rib$9853$DDDPb)
                         (g$rib-label*$9304$DDDPb g$rib$9853$DDDPb)))
                     '#f))))
               (g$rib-sym*$9302$DDDPb g$rib$9853$DDDPb))))
           (g$id->sym$9355$DDDPb g$id$9852$DDDPb)
           (g$stx-mark*$9329$DDDPb g$id$9852$DDDPb))))))
   (g$gen-define-label+loc$9293$DDDPb
     g$gen-define-label+loc$13114$DDDPb
     (case-lambda
       ((g$id$9865$DDDPb g$rib$9866$DDDPb g$sd?$9867$DDDPb)
        (if g$sd?$9867$DDDPb
          (values (gensym) (g$gen-lexical$9289$DDDPb g$id$9865$DDDPb))
          ((case-lambda
             ((g$env$9868$DDDPb)
              ((case-lambda
                 ((g$label$9869$DDDPb g$locs$9870$DDDPb)
                  (values
                    g$label$9869$DDDPb
                    ((case-lambda
                       ((g$t$9871$DDDPb)
                        (if g$t$9871$DDDPb
                          (cdr g$t$9871$DDDPb)
                          ((case-lambda
                             ((g$loc$9872$DDDPb)
                              (begin
                                (g$set-interaction-env-locs!$9806$DDDPb
                                  g$env$9868$DDDPb
                                  (cons
                                    (cons
                                      g$label$9869$DDDPb
                                      g$loc$9872$DDDPb)
                                    g$locs$9870$DDDPb))
                                g$loc$9872$DDDPb)))
                           (g$gen-lexical$9289$DDDPb
                             g$id$9865$DDDPb)))))
                     (g$assq$5741$DDDPb
                       g$label$9869$DDDPb
                       g$locs$9870$DDDPb)))))
               (g$gen-top-level-label$9292$DDDPb
                 g$id$9865$DDDPb
                 g$rib$9866$DDDPb)
               (g$interaction-env-locs$9803$DDDPb g$env$9868$DDDPb))))
           (g$top-level-context$9843$DDDPb))))))
   (g$gen-define-label$9294$DDDPb
     g$gen-define-label$13115$DDDPb
     (case-lambda
       ((g$id$9873$DDDPb g$rib$9874$DDDPb g$sd?$9875$DDDPb)
        (if g$sd?$9875$DDDPb
          (gensym)
          (g$gen-top-level-label$9292$DDDPb
            g$id$9873$DDDPb
            g$rib$9874$DDDPb)))))
   (g$7682$9295$DDDPb
     g$7682$13116$DDDPb
     (make-record-type-descriptor
       'rib
       '#f
       'g$7685$DDDPb
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$7684$9296$DDDPb g$7684$13117$DDDPb '#f)
   (g$7683$9297$DDDPb
     g$7683$13118$DDDPb
     (make-record-constructor-descriptor
       g$7682$9295$DDDPb
       '#f
       g$7684$9296$DDDPb))
   (g$rib?$9300$DDDPb
     g$rib?$13119$DDDPb
     (record-predicate g$7682$9295$DDDPb))
   (g$make-rib$9301$DDDPb
     g$make-rib$13120$DDDPb
     (record-constructor g$7683$9297$DDDPb))
   (g$rib-sym*$9302$DDDPb
     g$rib-sym*$13121$DDDPb
     (record-accessor g$7682$9295$DDDPb '0))
   (g$rib-mark**$9303$DDDPb
     g$rib-mark**$13122$DDDPb
     (record-accessor g$7682$9295$DDDPb '1))
   (g$rib-label*$9304$DDDPb
     g$rib-label*$13123$DDDPb
     (record-accessor g$7682$9295$DDDPb '2))
   (g$rib-sealed/freq$9305$DDDPb
     g$rib-sealed/freq$13124$DDDPb
     (record-accessor g$7682$9295$DDDPb '3))
   (g$rib-cache$9306$DDDPb
     g$rib-cache$13125$DDDPb
     (record-accessor g$7682$9295$DDDPb '4))
   (g$set-rib-sym*!$9307$DDDPb
     g$set-rib-sym*!$13126$DDDPb
     (record-mutator g$7682$9295$DDDPb '0))
   (g$set-rib-mark**!$9308$DDDPb
     g$set-rib-mark**!$13127$DDDPb
     (record-mutator g$7682$9295$DDDPb '1))
   (g$set-rib-label*!$9309$DDDPb
     g$set-rib-label*!$13128$DDDPb
     (record-mutator g$7682$9295$DDDPb '2))
   (g$set-rib-sealed/freq!$9310$DDDPb
     g$set-rib-sealed/freq!$13129$DDDPb
     (record-mutator g$7682$9295$DDDPb '3))
   (g$set-rib-cache!$9311$DDDPb
     g$set-rib-cache!$13130$DDDPb
     (record-mutator g$7682$9295$DDDPb '4))
   (g$make-empty-rib$9312$DDDPb
     g$make-empty-rib$13131$DDDPb
     (case-lambda (() (g$make-rib$9301$DDDPb '() '() '() '#f '#f))))
   (g$make-cache-rib$9313$DDDPb
     g$make-cache-rib$13132$DDDPb
     (case-lambda
       (()
        (g$make-rib$9301$DDDPb
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$6523$DDDPb)))))
   (g$find-label$9314$DDDPb
     g$find-label$13133$DDDPb
     (case-lambda
       ((g$rib$9876$DDDPb g$sym$9877$DDDPb g$mark*$9878$DDDPb)
        ((case-lambda
           ((g$ht$9879$DDDPb)
            (if g$ht$9879$DDDPb
              (begin
                '#f
                ((case-lambda
                   ((g$cv$9880$DDDPb)
                    ((case-lambda
                       ((g$t$9881$DDDPb)
                        (if g$t$9881$DDDPb (cdr g$t$9881$DDDPb) '#f)))
                     (if g$cv$9880$DDDPb
                       (begin
                         '#f
                         (g$assp$5744$DDDPb
                           (case-lambda
                             ((g$m$9882$DDDPb)
                              (g$same-marks?$9356$DDDPb
                                g$mark*$9878$DDDPb
                                g$m$9882$DDDPb)))
                           g$cv$9880$DDDPb))
                       '#f))))
                 (g$hashtable-ref$6526$DDDPb
                   g$ht$9879$DDDPb
                   g$sym$9877$DDDPb
                   '#f)))
              '#f)))
         (g$rib-cache$9306$DDDPb g$rib$9876$DDDPb)))))
   (g$extend-rib!$9315$DDDPb
     g$extend-rib!$13134$DDDPb
     (case-lambda
       ((g$rib$9883$DDDPb
          g$id$9884$DDDPb
          g$label$9885$DDDPb
          g$sd?$9886$DDDPb)
        (letrec* ((g$find$9887$DDDPb
                    (case-lambda
                      ((g$sym$9896$DDDPb
                         g$mark*$9897$DDDPb
                         g$sym*$9898$DDDPb
                         g$mark**$9899$DDDPb
                         g$label*$9900$DDDPb)
                       (if (pair? g$sym*$9898$DDDPb)
                         (begin
                           '#f
                           (if (if (eq? g$sym$9896$DDDPb
                                        (car g$sym*$9898$DDDPb))
                                 (begin
                                   '#f
                                   (g$same-marks?$9356$DDDPb
                                     g$mark*$9897$DDDPb
                                     (car g$mark**$9899$DDDPb)))
                                 '#f)
                             g$label*$9900$DDDPb
                             (g$find$9887$DDDPb
                               g$sym$9896$DDDPb
                               g$mark*$9897$DDDPb
                               (cdr g$sym*$9898$DDDPb)
                               (cdr g$mark**$9899$DDDPb)
                               (cdr g$label*$9900$DDDPb))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$9305$DDDPb g$rib$9883$DDDPb)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$9883$DDDPb)
              (void))
            ((case-lambda
               ((g$sym$9888$DDDPb g$mark*$9889$DDDPb)
                ((case-lambda
                   ((g$sym*$9890$DDDPb)
                    ((case-lambda
                       ((g$t$9891$DDDPb)
                        (if g$t$9891$DDDPb
                          ((case-lambda
                             ((g$p$9892$DDDPb)
                              (if (not (eq? g$label$9885$DDDPb
                                            g$p$9892$DDDPb))
                                (g$syntax-violation$9835$DDDPb
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$9884$DDDPb)
                                (void))))
                           g$t$9891$DDDPb)
                          ((case-lambda
                             ((g$t$9893$DDDPb)
                              (if g$t$9893$DDDPb
                                ((case-lambda
                                   ((g$p$9894$DDDPb)
                                    (if (not (eq? g$label$9885$DDDPb
                                                  (car g$p$9894$DDDPb)))
                                      (if (not g$sd?$9886$DDDPb)
                                        (set-car!
                                          g$p$9894$DDDPb
                                          g$label$9885$DDDPb)
                                        (g$syntax-violation$9835$DDDPb
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$9884$DDDPb))
                                      (void))))
                                 g$t$9893$DDDPb)
                                (begin
                                  (if (g$rib-cache$9306$DDDPb
                                        g$rib$9883$DDDPb)
                                    (g$hashtable-update!$6530$DDDPb
                                      (g$rib-cache$9306$DDDPb
                                        g$rib$9883$DDDPb)
                                      g$sym$9888$DDDPb
                                      (case-lambda
                                        ((g$e$9895$DDDPb)
                                         (cons
                                           (cons
                                             g$mark*$9889$DDDPb
                                             g$label$9885$DDDPb)
                                           g$e$9895$DDDPb)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$9307$DDDPb
                                    g$rib$9883$DDDPb
                                    (cons
                                      g$sym$9888$DDDPb
                                      g$sym*$9890$DDDPb))
                                  (g$set-rib-mark**!$9308$DDDPb
                                    g$rib$9883$DDDPb
                                    (cons
                                      g$mark*$9889$DDDPb
                                      (g$rib-mark**$9303$DDDPb
                                        g$rib$9883$DDDPb)))
                                  (g$set-rib-label*!$9309$DDDPb
                                    g$rib$9883$DDDPb
                                    (cons
                                      g$label$9885$DDDPb
                                      (g$rib-label*$9304$DDDPb
                                        g$rib$9883$DDDPb)))))))
                           (if (g$memq$5745$DDDPb
                                 g$sym$9888$DDDPb
                                 (g$rib-sym*$9302$DDDPb
                                   g$rib$9883$DDDPb))
                             (begin
                               '#f
                               (g$find$9887$DDDPb
                                 g$sym$9888$DDDPb
                                 g$mark*$9889$DDDPb
                                 g$sym*$9890$DDDPb
                                 (g$rib-mark**$9303$DDDPb
                                   g$rib$9883$DDDPb)
                                 (g$rib-label*$9304$DDDPb
                                   g$rib$9883$DDDPb)))
                             '#f)))))
                     (g$find-label$9314$DDDPb
                       g$rib$9883$DDDPb
                       g$sym$9888$DDDPb
                       g$mark*$9889$DDDPb))))
                 (g$rib-sym*$9302$DDDPb g$rib$9883$DDDPb))))
             (g$id->sym$9355$DDDPb g$id$9884$DDDPb)
             (g$stx-mark*$9329$DDDPb g$id$9884$DDDPb)))))))
   (g$extend-rib/nc!$9316$DDDPb
     g$extend-rib/nc!$13135$DDDPb
     (case-lambda
       ((g$rib$9901$DDDPb g$id$9902$DDDPb g$label$9903$DDDPb)
        ((case-lambda
           ((g$sym$9904$DDDPb g$mark*$9905$DDDPb)
            ((case-lambda
               ((g$sym*$9906$DDDPb)
                (begin
                  (if (g$rib-cache$9306$DDDPb g$rib$9901$DDDPb)
                    (g$hashtable-update!$6530$DDDPb
                      (g$rib-cache$9306$DDDPb g$rib$9901$DDDPb)
                      g$sym$9904$DDDPb
                      (case-lambda
                        ((g$e$9907$DDDPb)
                         (cons
                           (cons g$mark*$9905$DDDPb g$label$9903$DDDPb)
                           g$e$9907$DDDPb)))
                      '())
                    (void))
                  (g$set-rib-sym*!$9307$DDDPb
                    g$rib$9901$DDDPb
                    (cons g$sym$9904$DDDPb g$sym*$9906$DDDPb))
                  (g$set-rib-mark**!$9308$DDDPb
                    g$rib$9901$DDDPb
                    (cons
                      g$mark*$9905$DDDPb
                      (g$rib-mark**$9303$DDDPb g$rib$9901$DDDPb)))
                  (g$set-rib-label*!$9309$DDDPb
                    g$rib$9901$DDDPb
                    (cons
                      g$label$9903$DDDPb
                      (g$rib-label*$9304$DDDPb g$rib$9901$DDDPb))))))
             (g$rib-sym*$9302$DDDPb g$rib$9901$DDDPb))))
         (g$id->sym$9355$DDDPb g$id$9902$DDDPb)
         (g$stx-mark*$9329$DDDPb g$id$9902$DDDPb)))))
   (g$make-rib-map$9317$DDDPb
     g$make-rib-map$13136$DDDPb
     (case-lambda
       ((g$sym*$9908$DDDPb)
        ((case-lambda
           ((g$ht$9909$DDDPb)
            ((letrec ((g$f$9910$DDDPb
                        (case-lambda
                          ((g$i$9911$DDDPb g$sym*$9912$DDDPb)
                           (if (null? g$sym*$9912$DDDPb)
                             g$ht$9909$DDDPb
                             (begin
                               (g$hashtable-update!$6530$DDDPb
                                 g$ht$9909$DDDPb
                                 (car g$sym*$9912$DDDPb)
                                 (case-lambda
                                   ((g$x$9913$DDDPb)
                                    (cons
                                      g$i$9911$DDDPb
                                      g$x$9913$DDDPb)))
                                 '())
                               (g$f$9910$DDDPb
                                 (+ g$i$9911$DDDPb '1)
                                 (cdr g$sym*$9912$DDDPb))))))))
               g$f$9910$DDDPb)
             '0
             g$sym*$9908$DDDPb)))
         (g$make-eq-hashtable$6523$DDDPb)))))
   (g$seal-rib!$9318$DDDPb
     g$seal-rib!$13137$DDDPb
     (case-lambda
       ((g$rib$9914$DDDPb)
        ((case-lambda
           ((g$sym*$9915$DDDPb)
            (if (not (null? g$sym*$9915$DDDPb))
              (begin
                (g$set-rib-sym*!$9307$DDDPb
                  g$rib$9914$DDDPb
                  (g$list->vector$6419$DDDPb g$sym*$9915$DDDPb))
                (g$set-rib-mark**!$9308$DDDPb
                  g$rib$9914$DDDPb
                  (g$list->vector$6419$DDDPb
                    (g$rib-mark**$9303$DDDPb g$rib$9914$DDDPb)))
                (g$set-rib-label*!$9309$DDDPb
                  g$rib$9914$DDDPb
                  (g$list->vector$6419$DDDPb
                    (g$rib-label*$9304$DDDPb g$rib$9914$DDDPb)))
                (g$set-rib-sealed/freq!$9310$DDDPb
                  g$rib$9914$DDDPb
                  (g$make-rib-map$9317$DDDPb g$sym*$9915$DDDPb)))
              (void))))
         (g$rib-sym*$9302$DDDPb g$rib$9914$DDDPb)))))
   (g$unseal-rib!$9319$DDDPb
     g$unseal-rib!$13138$DDDPb
     (case-lambda
       ((g$rib$9916$DDDPb)
        (if (g$rib-sealed/freq$9305$DDDPb g$rib$9916$DDDPb)
          (begin
            (g$set-rib-sealed/freq!$9310$DDDPb g$rib$9916$DDDPb '#f)
            (g$set-rib-sym*!$9307$DDDPb
              g$rib$9916$DDDPb
              (vector->list (g$rib-sym*$9302$DDDPb g$rib$9916$DDDPb)))
            (g$set-rib-mark**!$9308$DDDPb
              g$rib$9916$DDDPb
              (vector->list (g$rib-mark**$9303$DDDPb g$rib$9916$DDDPb)))
            (g$set-rib-label*!$9309$DDDPb
              g$rib$9916$DDDPb
              (vector->list
                (g$rib-label*$9304$DDDPb g$rib$9916$DDDPb))))
          (void)))))
   (g$make-full-rib$9320$DDDPb
     g$make-full-rib$13139$DDDPb
     (case-lambda
       ((g$id*$9917$DDDPb g$label*$9918$DDDPb)
        ((case-lambda
           ((g$r$9919$DDDPb)
            (begin
              (g$seal-rib!$9318$DDDPb g$r$9919$DDDPb)
              g$r$9919$DDDPb)))
         (g$make-rib$9301$DDDPb
           (g$map$5753$DDDPb g$id->sym$9355$DDDPb g$id*$9917$DDDPb)
           (g$map$5753$DDDPb g$stx-mark*$9329$DDDPb g$id*$9917$DDDPb)
           g$label*$9918$DDDPb
           '#f
           '#f)))))
   (g$7711$9321$DDDPb
     g$7711$13140$DDDPb
     (make-record-type-descriptor
       'stx
       '#f
       'g$7714$DDDPb
       '#t
       '#t
       '#((mutable expr)
          (mutable mark*)
          (mutable subst*)
          (mutable ae*))))
   (g$7713$9322$DDDPb g$7713$13141$DDDPb '#f)
   (g$7712$9323$DDDPb
     g$7712$13142$DDDPb
     (make-record-constructor-descriptor
       g$7711$9321$DDDPb
       '#f
       g$7713$9322$DDDPb))
   (g$stx?$9326$DDDPb
     g$stx?$13143$DDDPb
     (record-predicate g$7711$9321$DDDPb))
   (g$make-stx$9327$DDDPb
     g$make-stx$13144$DDDPb
     (record-constructor g$7712$9323$DDDPb))
   (g$stx-expr$9328$DDDPb
     g$stx-expr$13145$DDDPb
     (record-accessor g$7711$9321$DDDPb '0))
   (g$stx-mark*$9329$DDDPb
     g$stx-mark*$13146$DDDPb
     (record-accessor g$7711$9321$DDDPb '1))
   (g$stx-subst*$9330$DDDPb
     g$stx-subst*$13147$DDDPb
     (record-accessor g$7711$9321$DDDPb '2))
   (g$stx-ae*$9331$DDDPb
     g$stx-ae*$13148$DDDPb
     (record-accessor g$7711$9321$DDDPb '3))
   (g$set-stx-expr!$9332$DDDPb
     g$set-stx-expr!$13149$DDDPb
     (record-mutator g$7711$9321$DDDPb '0))
   (g$set-stx-mark*!$9333$DDDPb
     g$set-stx-mark*!$13150$DDDPb
     (record-mutator g$7711$9321$DDDPb '1))
   (g$set-stx-subst*!$9334$DDDPb
     g$set-stx-subst*!$13151$DDDPb
     (record-mutator g$7711$9321$DDDPb '2))
   (g$set-stx-ae*!$9335$DDDPb
     g$set-stx-ae*!$13152$DDDPb
     (record-mutator g$7711$9321$DDDPb '3))
   (g$rp$9336$DDDPb
     g$rp$13153$DDDPb
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$9920$DDDPb g$p$9921$DDDPb g$wr$9922$DDDPb)
          (begin
            (display '"#<syntax " g$p$9921$DDDPb)
            (write
              (g$stx->datum$9365$DDDPb g$x$9920$DDDPb)
              g$p$9921$DDDPb)
            ((case-lambda
               ((g$expr$9923$DDDPb)
                (if (annotation? g$expr$9923$DDDPb)
                  ((case-lambda
                     ((g$src$9924$DDDPb)
                      (if (pair? g$src$9924$DDDPb)
                        (begin
                          (display '" (" g$p$9921$DDDPb)
                          (display
                            (cdr g$src$9924$DDDPb)
                            g$p$9921$DDDPb)
                          (display '" of " g$p$9921$DDDPb)
                          (display
                            (car g$src$9924$DDDPb)
                            g$p$9921$DDDPb)
                          (display '")" g$p$9921$DDDPb))
                        (void))))
                   (annotation-source g$expr$9923$DDDPb))
                  (void))))
             (g$stx-expr$9328$DDDPb g$x$9920$DDDPb))
            (display '">" g$p$9921$DDDPb))))))
   (g$datum->stx$9337$DDDPb
     g$datum->stx$13154$DDDPb
     (case-lambda
       ((g$id$9925$DDDPb g$datum$9926$DDDPb)
        (g$make-stx$9327$DDDPb
          g$datum$9926$DDDPb
          (g$stx-mark*$9329$DDDPb g$id$9925$DDDPb)
          (g$stx-subst*$9330$DDDPb g$id$9925$DDDPb)
          (g$stx-ae*$9331$DDDPb g$id$9925$DDDPb)))))
   (g$gen-mark$9338$DDDPb
     g$gen-mark$13155$DDDPb
     (case-lambda (() (string '#\m))))
   (g$anti-mark$9339$DDDPb g$anti-mark$13156$DDDPb '#f)
   (g$anti-mark?$9340$DDDPb g$anti-mark?$13157$DDDPb not)
   (g$join-wraps$9341$DDDPb
     g$join-wraps$13158$DDDPb
     (case-lambda
       ((g$m1*$9927$DDDPb
          g$s1*$9928$DDDPb
          g$ae1*$9929$DDDPb
          g$e$9930$DDDPb)
        (letrec* ((g$cancel$9931$DDDPb
                    (case-lambda
                      ((g$ls1$9935$DDDPb g$ls2$9936$DDDPb)
                       ((letrec ((g$f$9937$DDDPb
                                   (case-lambda
                                     ((g$x$9938$DDDPb g$ls1$9939$DDDPb)
                                      (if (null? g$ls1$9939$DDDPb)
                                        (cdr g$ls2$9936$DDDPb)
                                        (cons
                                          g$x$9938$DDDPb
                                          (g$f$9937$DDDPb
                                            (car g$ls1$9939$DDDPb)
                                            (cdr g$ls1$9939$DDDPb))))))))
                          g$f$9937$DDDPb)
                        (car g$ls1$9935$DDDPb)
                        (cdr g$ls1$9935$DDDPb))))))
          ((case-lambda
             ((g$m2*$9932$DDDPb g$s2*$9933$DDDPb g$ae2*$9934$DDDPb)
              (if (if (not (null? g$m1*$9927$DDDPb))
                    (if (not (null? g$m2*$9932$DDDPb))
                      (begin
                        '#f
                        (g$anti-mark?$9340$DDDPb
                          (car g$m2*$9932$DDDPb)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$9931$DDDPb
                    g$m1*$9927$DDDPb
                    g$m2*$9932$DDDPb)
                  (g$cancel$9931$DDDPb
                    g$s1*$9928$DDDPb
                    g$s2*$9933$DDDPb)
                  (g$cancel$9931$DDDPb
                    g$ae1*$9929$DDDPb
                    g$ae2*$9934$DDDPb))
                (values
                  (append g$m1*$9927$DDDPb g$m2*$9932$DDDPb)
                  (append g$s1*$9928$DDDPb g$s2*$9933$DDDPb)
                  (append g$ae1*$9929$DDDPb g$ae2*$9934$DDDPb)))))
           (g$stx-mark*$9329$DDDPb g$e$9930$DDDPb)
           (g$stx-subst*$9330$DDDPb g$e$9930$DDDPb)
           (g$stx-ae*$9331$DDDPb g$e$9930$DDDPb))))))
   (g$mkstx$9342$DDDPb
     g$mkstx$13159$DDDPb
     (case-lambda
       ((g$e$9940$DDDPb
          g$m*$9941$DDDPb
          g$s*$9942$DDDPb
          g$ae*$9943$DDDPb)
        (if (if (g$stx?$9326$DDDPb g$e$9940$DDDPb)
              (begin
                '#f
                (not (g$top-marked?$9288$DDDPb g$m*$9941$DDDPb)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$9341$DDDPb
                 g$m*$9941$DDDPb
                 g$s*$9942$DDDPb
                 g$ae*$9943$DDDPb
                 g$e$9940$DDDPb)))
            (case-lambda
              ((g$m*$9947$DDDPb g$s*$9948$DDDPb g$ae*$9949$DDDPb)
               ((case-lambda
                  ((g$ae*$9950$DDDPb g$s*$9951$DDDPb g$m*$9952$DDDPb)
                   (g$make-stx$9327$DDDPb
                     (g$stx-expr$9328$DDDPb g$e$9940$DDDPb)
                     g$m*$9952$DDDPb
                     g$s*$9951$DDDPb
                     g$ae*$9950$DDDPb)))
                g$ae*$9949$DDDPb
                g$s*$9948$DDDPb
                g$m*$9947$DDDPb))))
          (g$make-stx$9327$DDDPb
            g$e$9940$DDDPb
            g$m*$9941$DDDPb
            g$s*$9942$DDDPb
            g$ae*$9943$DDDPb)))))
   (g$add-mark$9343$DDDPb
     g$add-mark$13160$DDDPb
     (case-lambda
       ((g$m$9953$DDDPb g$e$9954$DDDPb g$ae$9955$DDDPb)
        (g$mkstx$9342$DDDPb
          g$e$9954$DDDPb
          (list g$m$9953$DDDPb)
          '(shift)
          (list g$ae$9955$DDDPb)))))
   (g$add-subst$9344$DDDPb
     g$add-subst$13161$DDDPb
     (case-lambda
       ((g$subst$9956$DDDPb g$e$9957$DDDPb)
        (g$mkstx$9342$DDDPb
          g$e$9957$DDDPb
          '()
          (list g$subst$9956$DDDPb)
          '()))))
   (g$syntax-kind?$9345$DDDPb
     g$syntax-kind?$13162$DDDPb
     (case-lambda
       ((g$x$9958$DDDPb g$p?$9959$DDDPb)
        (if (g$stx?$9326$DDDPb g$x$9958$DDDPb)
          (g$syntax-kind?$9345$DDDPb
            (g$stx-expr$9328$DDDPb g$x$9958$DDDPb)
            g$p?$9959$DDDPb)
          (if (annotation? g$x$9958$DDDPb)
            (g$syntax-kind?$9345$DDDPb
              (annotation-expression g$x$9958$DDDPb)
              g$p?$9959$DDDPb)
            (g$p?$9959$DDDPb g$x$9958$DDDPb))))))
   (g$syntax-vector->list$9346$DDDPb
     g$syntax-vector->list$13163$DDDPb
     (case-lambda
       ((g$x$9960$DDDPb)
        (if (g$stx?$9326$DDDPb g$x$9960$DDDPb)
          ((case-lambda
             ((g$ls$9961$DDDPb
                g$m*$9962$DDDPb
                g$s*$9963$DDDPb
                g$ae*$9964$DDDPb)
              (g$map$5753$DDDPb
                (case-lambda
                  ((g$x$9965$DDDPb)
                   (g$mkstx$9342$DDDPb
                     g$x$9965$DDDPb
                     g$m*$9962$DDDPb
                     g$s*$9963$DDDPb
                     g$ae*$9964$DDDPb)))
                g$ls$9961$DDDPb)))
           (g$syntax-vector->list$9346$DDDPb
             (g$stx-expr$9328$DDDPb g$x$9960$DDDPb))
           (g$stx-mark*$9329$DDDPb g$x$9960$DDDPb)
           (g$stx-subst*$9330$DDDPb g$x$9960$DDDPb)
           (g$stx-ae*$9331$DDDPb g$x$9960$DDDPb))
          (if (annotation? g$x$9960$DDDPb)
            (g$syntax-vector->list$9346$DDDPb
              (annotation-expression g$x$9960$DDDPb))
            (if (g$vector?$6422$DDDPb g$x$9960$DDDPb)
              (vector->list g$x$9960$DDDPb)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$9960$DDDPb)))))))
   (g$syntax-pair?$9347$DDDPb
     g$syntax-pair?$13164$DDDPb
     (case-lambda
       ((g$x$9966$DDDPb)
        (g$syntax-kind?$9345$DDDPb g$x$9966$DDDPb pair?))))
   (g$syntax-vector?$9348$DDDPb
     g$syntax-vector?$13165$DDDPb
     (case-lambda
       ((g$x$9967$DDDPb)
        (g$syntax-kind?$9345$DDDPb
          g$x$9967$DDDPb
          g$vector?$6422$DDDPb))))
   (g$syntax-null?$9349$DDDPb
     g$syntax-null?$13166$DDDPb
     (case-lambda
       ((g$x$9968$DDDPb)
        (g$syntax-kind?$9345$DDDPb g$x$9968$DDDPb null?))))
   (g$syntax-list?$9350$DDDPb
     g$syntax-list?$13167$DDDPb
     (case-lambda
       ((g$x$9969$DDDPb)
        ((case-lambda
           ((g$t$9970$DDDPb)
            (if g$t$9970$DDDPb
              g$t$9970$DDDPb
              (begin
                '#f
                (if (g$syntax-pair?$9347$DDDPb g$x$9969$DDDPb)
                  (begin
                    '#f
                    (g$syntax-list?$9350$DDDPb
                      (g$syntax-cdr$9352$DDDPb g$x$9969$DDDPb)))
                  '#f)))))
         (g$syntax-null?$9349$DDDPb g$x$9969$DDDPb)))))
   (g$syntax-car$9351$DDDPb
     g$syntax-car$13168$DDDPb
     (case-lambda
       ((g$x$9971$DDDPb)
        (if (g$stx?$9326$DDDPb g$x$9971$DDDPb)
          (g$mkstx$9342$DDDPb
            (g$syntax-car$9351$DDDPb
              (g$stx-expr$9328$DDDPb g$x$9971$DDDPb))
            (g$stx-mark*$9329$DDDPb g$x$9971$DDDPb)
            (g$stx-subst*$9330$DDDPb g$x$9971$DDDPb)
            (g$stx-ae*$9331$DDDPb g$x$9971$DDDPb))
          (if (annotation? g$x$9971$DDDPb)
            (g$syntax-car$9351$DDDPb
              (annotation-expression g$x$9971$DDDPb))
            (if (pair? g$x$9971$DDDPb)
              (car g$x$9971$DDDPb)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$9971$DDDPb)))))))
   (g$syntax-cdr$9352$DDDPb
     g$syntax-cdr$13169$DDDPb
     (case-lambda
       ((g$x$9972$DDDPb)
        (if (g$stx?$9326$DDDPb g$x$9972$DDDPb)
          (g$mkstx$9342$DDDPb
            (g$syntax-cdr$9352$DDDPb
              (g$stx-expr$9328$DDDPb g$x$9972$DDDPb))
            (g$stx-mark*$9329$DDDPb g$x$9972$DDDPb)
            (g$stx-subst*$9330$DDDPb g$x$9972$DDDPb)
            (g$stx-ae*$9331$DDDPb g$x$9972$DDDPb))
          (if (annotation? g$x$9972$DDDPb)
            (g$syntax-cdr$9352$DDDPb
              (annotation-expression g$x$9972$DDDPb))
            (if (pair? g$x$9972$DDDPb)
              (cdr g$x$9972$DDDPb)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$9972$DDDPb)))))))
   (g$syntax->list$9353$DDDPb
     g$syntax->list$13170$DDDPb
     (case-lambda
       ((g$x$9973$DDDPb)
        (if (g$syntax-pair?$9347$DDDPb g$x$9973$DDDPb)
          (cons
            (g$syntax-car$9351$DDDPb g$x$9973$DDDPb)
            (g$syntax->list$9353$DDDPb
              (g$syntax-cdr$9352$DDDPb g$x$9973$DDDPb)))
          (if (g$syntax-null?$9349$DDDPb g$x$9973$DDDPb)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$9973$DDDPb))))))
   (g$id?$9354$DDDPb
     g$id?$13171$DDDPb
     (case-lambda
       ((g$x$9974$DDDPb)
        (if (g$stx?$9326$DDDPb g$x$9974$DDDPb)
          (begin
            '#f
            ((case-lambda
               ((g$expr$9975$DDDPb)
                (g$symbol?$6424$DDDPb
                  (if (annotation? g$expr$9975$DDDPb)
                    (annotation-stripped g$expr$9975$DDDPb)
                    g$expr$9975$DDDPb))))
             (g$stx-expr$9328$DDDPb g$x$9974$DDDPb)))
          '#f))))
   (g$id->sym$9355$DDDPb
     g$id->sym$13172$DDDPb
     (case-lambda
       ((g$x$9976$DDDPb)
        (begin
          (if (not (g$stx?$9326$DDDPb g$x$9976$DDDPb))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$9976$DDDPb)
            (void))
          ((case-lambda
             ((g$expr$9977$DDDPb)
              ((case-lambda
                 ((g$sym$9978$DDDPb)
                  (if (g$symbol?$6424$DDDPb g$sym$9978$DDDPb)
                    g$sym$9978$DDDPb
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$9976$DDDPb))))
               (if (annotation? g$expr$9977$DDDPb)
                 (annotation-stripped g$expr$9977$DDDPb)
                 g$expr$9977$DDDPb))))
           (g$stx-expr$9328$DDDPb g$x$9976$DDDPb))))))
   (g$same-marks?$9356$DDDPb
     g$same-marks?$13173$DDDPb
     (case-lambda
       ((g$x$9979$DDDPb g$y$9980$DDDPb)
        ((case-lambda
           ((g$t$9981$DDDPb)
            (if g$t$9981$DDDPb
              g$t$9981$DDDPb
              (begin
                '#f
                (if (pair? g$x$9979$DDDPb)
                  (if (pair? g$y$9980$DDDPb)
                    (if (eq? (car g$x$9979$DDDPb) (car g$y$9980$DDDPb))
                      (begin
                        '#f
                        (g$same-marks?$9356$DDDPb
                          (cdr g$x$9979$DDDPb)
                          (cdr g$y$9980$DDDPb)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$9979$DDDPb)
           (begin '#f (null? g$y$9980$DDDPb))
           '#f)))))
   (g$bound-id=?$9357$DDDPb
     g$bound-id=?$13174$DDDPb
     (case-lambda
       ((g$x$9982$DDDPb g$y$9983$DDDPb)
        (if (eq? (g$id->sym$9355$DDDPb g$x$9982$DDDPb)
                 (g$id->sym$9355$DDDPb g$y$9983$DDDPb))
          (begin
            '#f
            (g$same-marks?$9356$DDDPb
              (g$stx-mark*$9329$DDDPb g$x$9982$DDDPb)
              (g$stx-mark*$9329$DDDPb g$y$9983$DDDPb)))
          '#f))))
   (g$free-id=?$9358$DDDPb
     g$free-id=?$13175$DDDPb
     (case-lambda
       ((g$i$9984$DDDPb g$j$9985$DDDPb)
        ((case-lambda
           ((g$t0$9986$DDDPb g$t1$9987$DDDPb)
            (if ((case-lambda
                   ((g$t$9988$DDDPb)
                    (if g$t$9988$DDDPb
                      g$t$9988$DDDPb
                      (begin '#f g$t1$9987$DDDPb))))
                 g$t0$9986$DDDPb)
              (eq? g$t0$9986$DDDPb g$t1$9987$DDDPb)
              (eq? (g$id->sym$9355$DDDPb g$i$9984$DDDPb)
                   (g$id->sym$9355$DDDPb g$j$9985$DDDPb)))))
         (g$id->real-label$9368$DDDPb g$i$9984$DDDPb)
         (g$id->real-label$9368$DDDPb g$j$9985$DDDPb)))))
   (g$valid-bound-ids?$9359$DDDPb
     g$valid-bound-ids?$13176$DDDPb
     (case-lambda
       ((g$id*$9989$DDDPb)
        (if (g$for-all$5751$DDDPb g$id?$9354$DDDPb g$id*$9989$DDDPb)
          (begin
            '#f
            (g$distinct-bound-ids?$9360$DDDPb g$id*$9989$DDDPb))
          '#f))))
   (g$distinct-bound-ids?$9360$DDDPb
     g$distinct-bound-ids?$13177$DDDPb
     (case-lambda
       ((g$id*$9990$DDDPb)
        ((case-lambda
           ((g$t$9991$DDDPb)
            (if g$t$9991$DDDPb
              g$t$9991$DDDPb
              (begin
                '#f
                (if (not (g$bound-id-member?$9361$DDDPb
                           (car g$id*$9990$DDDPb)
                           (cdr g$id*$9990$DDDPb)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$9360$DDDPb
                      (cdr g$id*$9990$DDDPb)))
                  '#f)))))
         (null? g$id*$9990$DDDPb)))))
   (g$bound-id-member?$9361$DDDPb
     g$bound-id-member?$13178$DDDPb
     (case-lambda
       ((g$id$9992$DDDPb g$id*$9993$DDDPb)
        (if (pair? g$id*$9993$DDDPb)
          (begin
            '#f
            ((case-lambda
               ((g$t$9994$DDDPb)
                (if g$t$9994$DDDPb
                  g$t$9994$DDDPb
                  (begin
                    '#f
                    (g$bound-id-member?$9361$DDDPb
                      g$id$9992$DDDPb
                      (cdr g$id*$9993$DDDPb))))))
             (g$bound-id=?$9357$DDDPb
               g$id$9992$DDDPb
               (car g$id*$9993$DDDPb))))
          '#f))))
   (g$self-evaluating?$9362$DDDPb
     g$self-evaluating?$13179$DDDPb
     (case-lambda
       ((g$x$9995$DDDPb)
        ((case-lambda
           ((g$t$9996$DDDPb)
            (if g$t$9996$DDDPb
              g$t$9996$DDDPb
              ((case-lambda
                 ((g$t$9997$DDDPb)
                  (if g$t$9997$DDDPb
                    g$t$9997$DDDPb
                    ((case-lambda
                       ((g$t$9998$DDDPb)
                        (if g$t$9998$DDDPb
                          g$t$9998$DDDPb
                          ((case-lambda
                             ((g$t$9999$DDDPb)
                              (if g$t$9999$DDDPb
                                g$t$9999$DDDPb
                                (begin
                                  '#f
                                  (g$bytevector?$6423$DDDPb
                                    g$x$9995$DDDPb)))))
                           (g$boolean?$6425$DDDPb g$x$9995$DDDPb)))))
                     (g$char?$6421$DDDPb g$x$9995$DDDPb)))))
               (string? g$x$9995$DDDPb)))))
         (number? g$x$9995$DDDPb)))))
   (g$strip-annotations$9363$DDDPb
     g$strip-annotations$13180$DDDPb
     (case-lambda
       ((g$x$10000$DDDPb)
        (if (pair? g$x$10000$DDDPb)
          (cons
            (g$strip-annotations$9363$DDDPb (car g$x$10000$DDDPb))
            (g$strip-annotations$9363$DDDPb (cdr g$x$10000$DDDPb)))
          (if (g$vector?$6422$DDDPb g$x$10000$DDDPb)
            (g$vector-map$6484$DDDPb
              g$strip-annotations$9363$DDDPb
              g$x$10000$DDDPb)
            (if (annotation? g$x$10000$DDDPb)
              (annotation-stripped g$x$10000$DDDPb)
              g$x$10000$DDDPb))))))
   (g$strip$9364$DDDPb
     g$strip$13181$DDDPb
     (case-lambda
       ((g$x$10001$DDDPb g$m*$10002$DDDPb)
        (if (g$top-marked?$9288$DDDPb g$m*$10002$DDDPb)
          (if ((case-lambda
                 ((g$t$10003$DDDPb)
                  (if g$t$10003$DDDPb
                    g$t$10003$DDDPb
                    ((case-lambda
                       ((g$t$10004$DDDPb)
                        (if g$t$10004$DDDPb
                          g$t$10004$DDDPb
                          (begin
                            '#f
                            (if (g$vector?$6422$DDDPb g$x$10001$DDDPb)
                              (if (> (vector-length g$x$10001$DDDPb) '0)
                                (begin
                                  '#f
                                  (annotation?
                                    (vector-ref g$x$10001$DDDPb '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$10001$DDDPb)
                       (begin '#f (annotation? (car g$x$10001$DDDPb)))
                       '#f)))))
               (annotation? g$x$10001$DDDPb))
            (g$strip-annotations$9363$DDDPb g$x$10001$DDDPb)
            g$x$10001$DDDPb)
          ((letrec ((g$f$10005$DDDPb
                      (case-lambda
                        ((g$x$10006$DDDPb)
                         (if (g$stx?$9326$DDDPb g$x$10006$DDDPb)
                           (g$strip$9364$DDDPb
                             (g$stx-expr$9328$DDDPb g$x$10006$DDDPb)
                             (g$stx-mark*$9329$DDDPb g$x$10006$DDDPb))
                           (if (annotation? g$x$10006$DDDPb)
                             (annotation-stripped g$x$10006$DDDPb)
                             (if (pair? g$x$10006$DDDPb)
                               ((case-lambda
                                  ((g$a$10007$DDDPb g$d$10008$DDDPb)
                                   (if (if (eq? g$a$10007$DDDPb
                                                (car g$x$10006$DDDPb))
                                         (begin
                                           '#f
                                           (eq? g$d$10008$DDDPb
                                                (cdr g$x$10006$DDDPb)))
                                         '#f)
                                     g$x$10006$DDDPb
                                     (cons
                                       g$a$10007$DDDPb
                                       g$d$10008$DDDPb))))
                                (g$f$10005$DDDPb (car g$x$10006$DDDPb))
                                (g$f$10005$DDDPb (cdr g$x$10006$DDDPb)))
                               (if (g$vector?$6422$DDDPb
                                     g$x$10006$DDDPb)
                                 ((case-lambda
                                    ((g$old$10009$DDDPb)
                                     ((case-lambda
                                        ((g$new$10010$DDDPb)
                                         (if (g$for-all$5751$DDDPb
                                               eq?
                                               g$old$10009$DDDPb
                                               g$new$10010$DDDPb)
                                           g$x$10006$DDDPb
                                           (g$list->vector$6419$DDDPb
                                             g$new$10010$DDDPb))))
                                      (g$map$5753$DDDPb
                                        g$f$10005$DDDPb
                                        g$old$10009$DDDPb))))
                                  (vector->list g$x$10006$DDDPb))
                                 g$x$10006$DDDPb))))))))
             g$f$10005$DDDPb)
           g$x$10001$DDDPb)))))
   (g$stx->datum$9365$DDDPb
     g$stx->datum$13182$DDDPb
     (case-lambda
       ((g$x$10011$DDDPb) (g$strip$9364$DDDPb g$x$10011$DDDPb '()))))
   (g$same-marks*?$9366$DDDPb
     g$same-marks*?$13183$DDDPb
     (case-lambda
       ((g$mark*$10012$DDDPb g$mark**$10013$DDDPb g$si$10014$DDDPb)
        (if (null? g$si$10014$DDDPb)
          '#f
          (if (g$same-marks?$9356$DDDPb
                g$mark*$10012$DDDPb
                (vector-ref
                  g$mark**$10013$DDDPb
                  (car g$si$10014$DDDPb)))
            (car g$si$10014$DDDPb)
            (g$same-marks*?$9366$DDDPb
              g$mark*$10012$DDDPb
              g$mark**$10013$DDDPb
              (cdr g$si$10014$DDDPb)))))))
   (g$id->label$9367$DDDPb
     g$id->label$13184$DDDPb
     (case-lambda
       ((g$id$10015$DDDPb)
        ((case-lambda
           ((g$t$10016$DDDPb)
            (if g$t$10016$DDDPb
              g$t$10016$DDDPb
              (begin
                '#f
                ((case-lambda
                   ((g$t$10017$DDDPb)
                    (if g$t$10017$DDDPb
                      ((case-lambda
                         ((g$env$10018$DDDPb)
                          ((case-lambda
                             ((g$rib$10019$DDDPb)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$9293$DDDPb
                                     g$id$10015$DDDPb
                                     g$rib$10019$DDDPb
                                     '#f)))
                                (case-lambda
                                  ((g$lab$10022$DDDPb
                                     g$_loc$10023$DDDPb)
                                   ((case-lambda
                                      ((g$_loc$10024$DDDPb
                                         g$lab$10025$DDDPb)
                                       (begin
                                         (g$extend-rib!$9315$DDDPb
                                           g$rib$10019$DDDPb
                                           g$id$10015$DDDPb
                                           g$lab$10025$DDDPb
                                           '#t)
                                         g$lab$10025$DDDPb)))
                                    g$_loc$10023$DDDPb
                                    g$lab$10022$DDDPb))))))
                           (g$interaction-env-rib$9801$DDDPb
                             g$env$10018$DDDPb))))
                       g$t$10017$DDDPb)
                      '#f)))
                 (g$top-level-context$9843$DDDPb))))))
         (g$id->real-label$9368$DDDPb g$id$10015$DDDPb)))))
   (g$id->real-label$9368$DDDPb
     g$id->real-label$13185$DDDPb
     (case-lambda
       ((g$id$10026$DDDPb)
        ((case-lambda
           ((g$sym$10027$DDDPb)
            ((letrec ((g$search$10028$DDDPb
                        (case-lambda
                          ((g$subst*$10029$DDDPb g$mark*$10030$DDDPb)
                           (if (null? g$subst*$10029$DDDPb)
                             '#f
                             (if (eq? (car g$subst*$10029$DDDPb) 'shift)
                               (g$search$10028$DDDPb
                                 (cdr g$subst*$10029$DDDPb)
                                 (cdr g$mark*$10030$DDDPb))
                               ((case-lambda
                                  ((g$rib$10031$DDDPb)
                                   ((case-lambda
                                      ((g$t$10032$DDDPb)
                                       (if g$t$10032$DDDPb
                                         ((case-lambda
                                            ((g$ht$10033$DDDPb)
                                             ((case-lambda
                                                ((g$si$10034$DDDPb)
                                                 ((case-lambda
                                                    ((g$i$10035$DDDPb)
                                                     (if g$i$10035$DDDPb
                                                       (vector-ref
                                                         (g$rib-label*$9304$DDDPb
                                                           g$rib$10031$DDDPb)
                                                         g$i$10035$DDDPb)
                                                       (g$search$10028$DDDPb
                                                         (cdr g$subst*$10029$DDDPb)
                                                         g$mark*$10030$DDDPb))))
                                                  (if g$si$10034$DDDPb
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$9366$DDDPb
                                                        g$mark*$10030$DDDPb
                                                        (g$rib-mark**$9303$DDDPb
                                                          g$rib$10031$DDDPb)
                                                        (g$reverse$6431$DDDPb
                                                          g$si$10034$DDDPb)))
                                                    '#f))))
                                              (g$hashtable-ref$6526$DDDPb
                                                g$ht$10033$DDDPb
                                                g$sym$10027$DDDPb
                                                '#f))))
                                          g$t$10032$DDDPb)
                                         ((case-lambda
                                            ((g$t$10036$DDDPb)
                                             (if g$t$10036$DDDPb
                                               g$t$10036$DDDPb
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$10037$DDDPb
                                                             (case-lambda
                                                               ((g$sym*$10038$DDDPb
                                                                  g$mark**$10039$DDDPb
                                                                  g$label*$10040$DDDPb)
                                                                (if (null?
                                                                      g$sym*$10038$DDDPb)
                                                                  (g$search$10028$DDDPb
                                                                    (cdr g$subst*$10029$DDDPb)
                                                                    g$mark*$10030$DDDPb)
                                                                  (if (if (eq? (car g$sym*$10038$DDDPb)
                                                                               g$sym$10027$DDDPb)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$9356$DDDPb
                                                                            (car g$mark**$10039$DDDPb)
                                                                            g$mark*$10030$DDDPb))
                                                                        '#f)
                                                                    (car g$label*$10040$DDDPb)
                                                                    (g$f$10037$DDDPb
                                                                      (cdr g$sym*$10038$DDDPb)
                                                                      (cdr g$mark**$10039$DDDPb)
                                                                      (cdr g$label*$10040$DDDPb))))))))
                                                    g$f$10037$DDDPb)
                                                  (g$rib-sym*$9302$DDDPb
                                                    g$rib$10031$DDDPb)
                                                  (g$rib-mark**$9303$DDDPb
                                                    g$rib$10031$DDDPb)
                                                  (g$rib-label*$9304$DDDPb
                                                    g$rib$10031$DDDPb))))))
                                          (g$find-label$9314$DDDPb
                                            g$rib$10031$DDDPb
                                            g$sym$10027$DDDPb
                                            g$mark*$10030$DDDPb)))))
                                    (g$rib-sealed/freq$9305$DDDPb
                                      g$rib$10031$DDDPb))))
                                (car g$subst*$10029$DDDPb))))))))
               g$search$10028$DDDPb)
             (g$stx-subst*$9330$DDDPb g$id$10026$DDDPb)
             (g$stx-mark*$9329$DDDPb g$id$10026$DDDPb))))
         (g$id->sym$9355$DDDPb g$id$10026$DDDPb)))))
   (g$label->binding$9369$DDDPb
     g$label->binding$13186$DDDPb
     (case-lambda
       ((g$x$10041$DDDPb g$r$10042$DDDPb)
        (if (not g$x$10041$DDDPb)
          '(displaced-lexical)
          ((case-lambda
             ((g$t$10043$DDDPb)
              (if g$t$10043$DDDPb
                ((case-lambda
                   ((g$b$10044$DDDPb)
                    (if (if (pair? g$b$10044$DDDPb)
                          (begin
                            '#f
                            (eq? (car g$b$10044$DDDPb) '$core-rtd))
                          '#f)
                      (cons
                        '$rtd
                        (g$map$5753$DDDPb
                          g$bless$9680$DDDPb
                          (cdr g$b$10044$DDDPb)))
                      (if (if (pair? g$b$10044$DDDPb)
                            (begin
                              '#f
                              (eq? (car g$b$10044$DDDPb) 'global-rtd))
                            '#f)
                        ((case-lambda
                           ((g$lib$10045$DDDPb g$loc$10046$DDDPb)
                            (cons
                              '$rtd
                              (symbol-value g$loc$10046$DDDPb))))
                         (g$cadr$6433$DDDPb g$b$10044$DDDPb)
                         (g$cddr$6435$DDDPb g$b$10044$DDDPb))
                        g$b$10044$DDDPb))))
                 g$t$10043$DDDPb)
                ((case-lambda
                   ((g$t$10047$DDDPb)
                    (if g$t$10047$DDDPb
                      (cdr g$t$10047$DDDPb)
                      ((case-lambda
                         ((g$t$10048$DDDPb)
                          (if g$t$10048$DDDPb
                            ((case-lambda
                               ((g$env$10049$DDDPb)
                                ((case-lambda
                                   ((g$t$10050$DDDPb)
                                    (if g$t$10050$DDDPb
                                      ((case-lambda
                                         ((g$p$10051$DDDPb)
                                          (g$cons*$5755$DDDPb
                                            'lexical
                                            (cdr g$p$10051$DDDPb)
                                            '#f)))
                                       g$t$10050$DDDPb)
                                      '(displaced-lexical . #f))))
                                 (g$assq$5741$DDDPb
                                   g$x$10041$DDDPb
                                   (g$interaction-env-locs$9803$DDDPb
                                     g$env$10049$DDDPb)))))
                             g$t$10048$DDDPb)
                            '(displaced-lexical . #f))))
                       (g$top-level-context$9843$DDDPb)))))
                 (g$assq$5741$DDDPb g$x$10041$DDDPb g$r$10042$DDDPb)))))
           (g$imported-label->binding$9092$DDDPb g$x$10041$DDDPb))))))
   (g$make-binding$9370$DDDPb g$make-binding$13187$DDDPb cons)
   (g$binding-type$9371$DDDPb g$binding-type$13188$DDDPb car)
   (g$binding-value$9372$DDDPb g$binding-value$13189$DDDPb cdr)
   (g$raise-unbound-error$9373$DDDPb
     g$raise-unbound-error$13190$DDDPb
     (case-lambda
       ((g$id$10052$DDDPb)
        (g$syntax-violation*$9834$DDDPb
          '#f
          '"unbound identifier"
          g$id$10052$DDDPb
          (g$make-undefined-violation$7179$DDDPb)))))
   (g$syntax-type$9374$DDDPb
     g$syntax-type$13191$DDDPb
     (case-lambda
       ((g$e$10053$DDDPb g$r$10054$DDDPb)
        (if (g$id?$9354$DDDPb g$e$10053$DDDPb)
          ((case-lambda
             ((g$id$10055$DDDPb)
              ((case-lambda
                 ((g$label$10056$DDDPb)
                  ((case-lambda
                     ((g$b$10057$DDDPb)
                      ((case-lambda
                         ((g$type$10058$DDDPb)
                          (begin
                            (if (not g$label$10056$DDDPb)
                              (g$raise-unbound-error$9373$DDDPb
                                g$id$10055$DDDPb)
                              (void))
                            ((case-lambda
                               ((g$t$10059$DDDPb)
                                (if (g$memv$5746$DDDPb
                                      g$t$10059$DDDPb
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable
                                         ctv
                                         local-ctv
                                         global-ctv))
                                  (values
                                    g$type$10058$DDDPb
                                    (g$binding-value$9372$DDDPb
                                      g$b$10057$DDDPb)
                                    g$id$10055$DDDPb)
                                  (values 'other '#f '#f))))
                             g$type$10058$DDDPb))))
                       (g$binding-type$9371$DDDPb g$b$10057$DDDPb))))
                   (g$label->binding$9369$DDDPb
                     g$label$10056$DDDPb
                     g$r$10054$DDDPb))))
               (g$id->label$9367$DDDPb g$id$10055$DDDPb))))
           g$e$10053$DDDPb)
          (if (g$syntax-pair?$9347$DDDPb g$e$10053$DDDPb)
            ((case-lambda
               ((g$id$10060$DDDPb)
                (if (g$id?$9354$DDDPb g$id$10060$DDDPb)
                  ((case-lambda
                     ((g$label$10061$DDDPb)
                      ((case-lambda
                         ((g$b$10062$DDDPb)
                          ((case-lambda
                             ((g$type$10063$DDDPb)
                              (begin
                                (if (not g$label$10061$DDDPb)
                                  (g$raise-unbound-error$9373$DDDPb
                                    g$id$10060$DDDPb)
                                  (void))
                                ((case-lambda
                                   ((g$t$10064$DDDPb)
                                    (if (g$memv$5746$DDDPb
                                          g$t$10064$DDDPb
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd
                                             ctv
                                             local-ctv
                                             global-ctv))
                                      (values
                                        g$type$10063$DDDPb
                                        (g$binding-value$9372$DDDPb
                                          g$b$10062$DDDPb)
                                        g$id$10060$DDDPb)
                                      (values 'call '#f '#f))))
                                 g$type$10063$DDDPb))))
                           (g$binding-type$9371$DDDPb
                             g$b$10062$DDDPb))))
                       (g$label->binding$9369$DDDPb
                         g$label$10061$DDDPb
                         g$r$10054$DDDPb))))
                   (g$id->label$9367$DDDPb g$id$10060$DDDPb))
                  (values 'call '#f '#f))))
             (g$syntax-car$9351$DDDPb g$e$10053$DDDPb))
            ((case-lambda
               ((g$d$10065$DDDPb)
                (if (g$self-evaluating?$9362$DDDPb g$d$10065$DDDPb)
                  (values 'constant g$d$10065$DDDPb '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$9365$DDDPb g$e$10053$DDDPb)))))))
   (g$sanitize-binding$9391$DDDPb
     g$sanitize-binding$13192$DDDPb
     (case-lambda
       ((g$x$10066$DDDPb g$src$10067$DDDPb)
        (if (g$procedure?$6426$DDDPb g$x$10066$DDDPb)
          (g$cons*$5755$DDDPb
            'local-macro
            g$x$10066$DDDPb
            g$src$10067$DDDPb)
          (if (if (pair? g$x$10066$DDDPb)
                (if (eq? (car g$x$10066$DDDPb) 'macro!)
                  (begin
                    '#f
                    (g$procedure?$6426$DDDPb (cdr g$x$10066$DDDPb)))
                  '#f)
                '#f)
            (g$cons*$5755$DDDPb
              'local-macro!
              (cdr g$x$10066$DDDPb)
              g$src$10067$DDDPb)
            (if (if (pair? g$x$10066$DDDPb)
                  (begin '#f (eq? (car g$x$10066$DDDPb) '$rtd))
                  '#f)
              g$x$10066$DDDPb
              (if (if (pair? g$x$10066$DDDPb)
                    (begin '#f (eq? (car g$x$10066$DDDPb) 'ctv))
                    '#f)
                (g$cons*$5755$DDDPb
                  'local-ctv
                  (cdr g$x$10066$DDDPb)
                  g$src$10067$DDDPb)
                (assertion-violation
                  'expand
                  '"invalid transformer"
                  g$x$10066$DDDPb))))))))
   (g$make-variable-transformer$9392$DDDPb
     g$make-variable-transformer$13193$DDDPb
     (case-lambda
       ((g$x$10068$DDDPb)
        (if (g$procedure?$6426$DDDPb g$x$10068$DDDPb)
          (cons 'macro! g$x$10068$DDDPb)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$10068$DDDPb)))))
   (g$make-compile-time-value$9393$DDDPb
     g$make-compile-time-value$13194$DDDPb
     (case-lambda ((g$x$10069$DDDPb) (cons 'ctv g$x$10069$DDDPb))))
   (g$variable-transformer?$9394$DDDPb
     g$variable-transformer?$13195$DDDPb
     (case-lambda
       ((g$x$10070$DDDPb)
        (if (pair? g$x$10070$DDDPb)
          (if (eq? (car g$x$10070$DDDPb) 'macro!)
            (begin '#f (g$procedure?$6426$DDDPb (cdr g$x$10070$DDDPb)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$9395$DDDPb
     g$variable-transformer-procedure$13196$DDDPb
     (case-lambda
       ((g$x$10071$DDDPb)
        (if (g$variable-transformer?$9394$DDDPb g$x$10071$DDDPb)
          (cdr g$x$10071$DDDPb)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$10071$DDDPb)))))
   (g$make-eval-transformer$9396$DDDPb
     g$make-eval-transformer$13197$DDDPb
     (case-lambda
       ((g$x$10072$DDDPb)
        (g$sanitize-binding$9391$DDDPb
          (eval-core (g$expanded->core$8826$DDDPb g$x$10072$DDDPb))
          g$x$10072$DDDPb))))
   (g$parse-define$9657$DDDPb
     g$parse-define$13198$DDDPb
     (case-lambda
       ((g$x$10073$DDDPb)
        ((case-lambda
           ((g$t$10074$DDDPb)
            ((case-lambda
               ((g$ls/false$10075$DDDPb)
                (if (if g$ls/false$10075$DDDPb
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10076$DDDPb
                               g$fmls$10077$DDDPb
                               g$b$10078$DDDPb
                               g$b*$10079$DDDPb)
                             (g$id?$9354$DDDPb g$id$10076$DDDPb)))
                          g$ls/false$10075$DDDPb))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10080$DDDPb
                         g$fmls$10081$DDDPb
                         g$b$10082$DDDPb
                         g$b*$10083$DDDPb)
                       (begin
                         (g$verify-formals$9737$DDDPb
                           g$fmls$10081$DDDPb
                           g$x$10073$DDDPb)
                         (values
                           g$id$10080$DDDPb
                           (cons
                             'defun
                             (cons
                               g$fmls$10081$DDDPb
                               (cons
                                 g$b$10082$DDDPb
                                 g$b*$10083$DDDPb)))))))
                    g$ls/false$10075$DDDPb)
                  ((case-lambda
                     ((g$t$10084$DDDPb)
                      ((case-lambda
                         ((g$ls/false$10085$DDDPb)
                          (if (if g$ls/false$10085$DDDPb
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$10086$DDDPb
                                         g$val$10087$DDDPb)
                                       (g$id?$9354$DDDPb
                                         g$id$10086$DDDPb)))
                                    g$ls/false$10085$DDDPb))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$10088$DDDPb g$val$10089$DDDPb)
                                 (values
                                   g$id$10088$DDDPb
                                   (cons 'expr g$val$10089$DDDPb))))
                              g$ls/false$10085$DDDPb)
                            ((case-lambda
                               ((g$t$10090$DDDPb)
                                ((case-lambda
                                   ((g$ls/false$10091$DDDPb)
                                    (if (if g$ls/false$10091$DDDPb
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$10092$DDDPb)
                                                 (g$id?$9354$DDDPb
                                                   g$id$10092$DDDPb)))
                                              g$ls/false$10091$DDDPb))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$10093$DDDPb)
                                           (values
                                             g$id$10093$DDDPb
                                             (cons
                                               'expr
                                               (g$bless$9680$DDDPb
                                                 '(void))))))
                                        g$ls/false$10091$DDDPb)
                                      (g$syntax-violation$9835$DDDPb
                                        '#f
                                        '"invalid syntax"
                                        g$t$10090$DDDPb))))
                                 (g$syntax-dispatch$9717$DDDPb
                                   g$t$10090$DDDPb
                                   '(_ any)))))
                             g$t$10084$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$10084$DDDPb
                         '(_ any any)))))
                   g$t$10074$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10074$DDDPb
               '(_ (any . any) any . each-any)))))
         g$x$10073$DDDPb))))
   (g$parse-define-syntax$9658$DDDPb
     g$parse-define-syntax$13199$DDDPb
     (case-lambda
       ((g$x$10094$DDDPb)
        ((case-lambda
           ((g$t$10095$DDDPb)
            ((case-lambda
               ((g$ls/false$10096$DDDPb)
                (if (if g$ls/false$10096$DDDPb
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10097$DDDPb g$val$10098$DDDPb)
                             (g$id?$9354$DDDPb g$id$10097$DDDPb)))
                          g$ls/false$10096$DDDPb))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10099$DDDPb g$val$10100$DDDPb)
                       (values g$id$10099$DDDPb g$val$10100$DDDPb)))
                    g$ls/false$10096$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10095$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10095$DDDPb
               '(_ any any)))))
         g$x$10094$DDDPb))))
   (g$scheme-stx-hashtable$9659$DDDPb
     g$scheme-stx-hashtable$13200$DDDPb
     (g$make-eq-hashtable$6523$DDDPb))
   (g$scheme-stx$9660$DDDPb
     g$scheme-stx$13201$DDDPb
     (case-lambda
       ((g$sym$10101$DDDPb)
        ((case-lambda
           ((g$t$10102$DDDPb)
            (if g$t$10102$DDDPb
              g$t$10102$DDDPb
              (begin
                '#f
                ((case-lambda
                   ((g$subst$10103$DDDPb)
                    ((case-lambda
                       ((g$stx$10104$DDDPb)
                        ((case-lambda
                           ((g$stx$10105$DDDPb)
                            (begin
                              (g$hashtable-set!$6527$DDDPb
                                g$scheme-stx-hashtable$9659$DDDPb
                                g$sym$10101$DDDPb
                                g$stx$10105$DDDPb)
                              g$stx$10105$DDDPb)))
                         ((case-lambda
                            ((g$t$10106$DDDPb)
                             (if g$t$10106$DDDPb
                               ((case-lambda
                                  ((g$x$10107$DDDPb)
                                   ((case-lambda
                                      ((g$name$10108$DDDPb
                                         g$label$10109$DDDPb)
                                       (g$add-subst$9344$DDDPb
                                         (g$make-rib$9301$DDDPb
                                           (list g$name$10108$DDDPb)
                                           (list g$top-mark*$9287$DDDPb)
                                           (list g$label$10109$DDDPb)
                                           '#f
                                           '#f)
                                         g$stx$10104$DDDPb)))
                                    (car g$x$10107$DDDPb)
                                    (cdr g$x$10107$DDDPb))))
                                g$t$10106$DDDPb)
                               g$stx$10104$DDDPb)))
                          (g$assq$5741$DDDPb
                            g$sym$10101$DDDPb
                            g$subst$10103$DDDPb)))))
                     (g$make-stx$9327$DDDPb
                       g$sym$10101$DDDPb
                       g$top-mark*$9287$DDDPb
                       '()
                       '()))))
                 (g$library-subst$9050$DDDPb
                   (g$find-library-by-name$9086$DDDPb
                     '(psyntax system $all))))))))
         (g$hashtable-ref$6526$DDDPb
           g$scheme-stx-hashtable$9659$DDDPb
           g$sym$10101$DDDPb
           '#f)))))
   (g$lexical-var$9661$DDDPb g$lexical-var$13202$DDDPb car)
   (g$lexical-mutable?$9662$DDDPb g$lexical-mutable?$13203$DDDPb cdr)
   (g$set-lexical-mutable!$9663$DDDPb
     g$set-lexical-mutable!$13204$DDDPb
     set-cdr!)
   (g$add-lexical$9664$DDDPb
     g$add-lexical$13205$DDDPb
     (case-lambda
       ((g$lab$10110$DDDPb g$lex$10111$DDDPb g$r$10112$DDDPb)
        (cons
          (g$cons*$5755$DDDPb
            g$lab$10110$DDDPb
            'lexical
            g$lex$10111$DDDPb
            '#f)
          g$r$10112$DDDPb))))
   (g$add-lexicals$9665$DDDPb
     g$add-lexicals$13206$DDDPb
     (case-lambda
       ((g$lab*$10113$DDDPb g$lex*$10114$DDDPb g$r$10115$DDDPb)
        (if (null? g$lab*$10113$DDDPb)
          g$r$10115$DDDPb
          (g$add-lexicals$9665$DDDPb
            (cdr g$lab*$10113$DDDPb)
            (cdr g$lex*$10114$DDDPb)
            (g$add-lexical$9664$DDDPb
              (car g$lab*$10113$DDDPb)
              (car g$lex*$10114$DDDPb)
              g$r$10115$DDDPb))))))
   (g$letrec-helper$9666$DDDPb
     g$letrec-helper$13207$DDDPb
     (case-lambda
       ((g$e$10116$DDDPb
          g$r$10117$DDDPb
          g$mr$10118$DDDPb
          g$build$10119$DDDPb)
        ((case-lambda
           ((g$t$10120$DDDPb)
            ((case-lambda
               ((g$ls/false$10121$DDDPb)
                (if g$ls/false$10121$DDDPb
                  (apply
                    (case-lambda
                      ((g$lhs*$10122$DDDPb
                         g$rhs*$10123$DDDPb
                         g$b$10124$DDDPb
                         g$b*$10125$DDDPb)
                       (if (not (g$valid-bound-ids?$9359$DDDPb
                                  g$lhs*$10122$DDDPb))
                         (g$invalid-fmls-error$9682$DDDPb
                           g$e$10116$DDDPb
                           g$lhs*$10122$DDDPb)
                         ((case-lambda
                            ((g$lex*$10126$DDDPb g$lab*$10127$DDDPb)
                             ((case-lambda
                                ((g$rib$10128$DDDPb g$r$10129$DDDPb)
                                 ((case-lambda
                                    ((g$body$10130$DDDPb
                                       g$rhs*$10131$DDDPb)
                                     (g$build$10119$DDDPb
                                       '#f
                                       g$lex*$10126$DDDPb
                                       g$rhs*$10131$DDDPb
                                       g$body$10130$DDDPb)))
                                  (g$chi-internal$9746$DDDPb
                                    (g$add-subst$9344$DDDPb
                                      g$rib$10128$DDDPb
                                      (cons
                                        g$b$10124$DDDPb
                                        g$b*$10125$DDDPb))
                                    g$r$10129$DDDPb
                                    g$mr$10118$DDDPb)
                                  (g$chi-expr*$9733$DDDPb
                                    (g$map$5753$DDDPb
                                      (case-lambda
                                        ((g$x$10132$DDDPb)
                                         (g$add-subst$9344$DDDPb
                                           g$rib$10128$DDDPb
                                           g$x$10132$DDDPb)))
                                      g$rhs*$10123$DDDPb)
                                    g$r$10129$DDDPb
                                    g$mr$10118$DDDPb))))
                              (g$make-full-rib$9320$DDDPb
                                g$lhs*$10122$DDDPb
                                g$lab*$10127$DDDPb)
                              (g$add-lexicals$9665$DDDPb
                                g$lab*$10127$DDDPb
                                g$lex*$10126$DDDPb
                                g$r$10117$DDDPb))))
                          (g$map$5753$DDDPb
                            g$gen-lexical$9289$DDDPb
                            g$lhs*$10122$DDDPb)
                          (g$map$5753$DDDPb
                            g$gen-label$9291$DDDPb
                            g$lhs*$10122$DDDPb)))))
                    g$ls/false$10121$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10120$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10120$DDDPb
               '(_ #(each (any any)) any . each-any)))))
         g$e$10116$DDDPb))))
   (g$letrec-transformer$9667$DDDPb
     g$letrec-transformer$13208$DDDPb
     (case-lambda
       ((g$e$10133$DDDPb g$r$10134$DDDPb g$mr$10135$DDDPb)
        (g$letrec-helper$9666$DDDPb
          g$e$10133$DDDPb
          g$r$10134$DDDPb
          g$mr$10135$DDDPb
          g$build-letrec$9281$DDDPb))))
   (g$letrec*-transformer$9668$DDDPb
     g$letrec*-transformer$13209$DDDPb
     (case-lambda
       ((g$e$10136$DDDPb g$r$10137$DDDPb g$mr$10138$DDDPb)
        (g$letrec-helper$9666$DDDPb
          g$e$10136$DDDPb
          g$r$10137$DDDPb
          g$mr$10138$DDDPb
          g$build-letrec*$9282$DDDPb))))
   (g$fluid-let-syntax-transformer$9669$DDDPb
     g$fluid-let-syntax-transformer$13210$DDDPb
     (case-lambda
       ((g$e$10139$DDDPb g$r$10140$DDDPb g$mr$10141$DDDPb)
        (letrec* ((g$lookup$10142$DDDPb
                    (case-lambda
                      ((g$x$10152$DDDPb)
                       ((case-lambda
                          ((g$t$10153$DDDPb)
                           (if g$t$10153$DDDPb
                             g$t$10153$DDDPb
                             (begin
                               '#f
                               (g$syntax-violation$9835$DDDPb
                                 '#f
                                 '"unbound identifier"
                                 g$e$10139$DDDPb
                                 g$x$10152$DDDPb)))))
                        (g$id->label$9367$DDDPb g$x$10152$DDDPb))))))
          ((case-lambda
             ((g$t$10143$DDDPb)
              ((case-lambda
                 ((g$ls/false$10144$DDDPb)
                  (if g$ls/false$10144$DDDPb
                    (apply
                      (case-lambda
                        ((g$lhs*$10145$DDDPb
                           g$rhs*$10146$DDDPb
                           g$b$10147$DDDPb
                           g$b*$10148$DDDPb)
                         (if (not (g$valid-bound-ids?$9359$DDDPb
                                    g$lhs*$10145$DDDPb))
                           (g$invalid-fmls-error$9682$DDDPb
                             g$e$10139$DDDPb
                             g$lhs*$10145$DDDPb)
                           ((case-lambda
                              ((g$lab*$10149$DDDPb g$rhs*$10150$DDDPb)
                               (g$chi-internal$9746$DDDPb
                                 (cons g$b$10147$DDDPb g$b*$10148$DDDPb)
                                 (append
                                   (g$map$5753$DDDPb
                                     cons
                                     g$lab*$10149$DDDPb
                                     g$rhs*$10150$DDDPb)
                                   g$r$10140$DDDPb)
                                 (append
                                   (g$map$5753$DDDPb
                                     cons
                                     g$lab*$10149$DDDPb
                                     g$rhs*$10150$DDDPb)
                                   g$mr$10141$DDDPb))))
                            (g$map$5753$DDDPb
                              g$lookup$10142$DDDPb
                              g$lhs*$10145$DDDPb)
                            (g$map$5753$DDDPb
                              (case-lambda
                                ((g$x$10151$DDDPb)
                                 (g$make-eval-transformer$9396$DDDPb
                                   (g$expand-transformer$9764$DDDPb
                                     g$x$10151$DDDPb
                                     g$mr$10141$DDDPb))))
                              g$rhs*$10146$DDDPb)))))
                      g$ls/false$10144$DDDPb)
                    (g$syntax-violation$9835$DDDPb
                      '#f
                      '"invalid syntax"
                      g$t$10143$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$10143$DDDPb
                 '(_ #(each (any any)) any . each-any)))))
           g$e$10139$DDDPb)))))
   (g$type-descriptor-transformer$9670$DDDPb
     g$type-descriptor-transformer$13211$DDDPb
     (case-lambda
       ((g$e$10154$DDDPb g$r$10155$DDDPb g$mr$10156$DDDPb)
        ((case-lambda
           ((g$t$10157$DDDPb)
            ((case-lambda
               ((g$ls/false$10158$DDDPb)
                (if (if g$ls/false$10158$DDDPb
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10159$DDDPb)
                             (g$id?$9354$DDDPb g$id$10159$DDDPb)))
                          g$ls/false$10158$DDDPb))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10160$DDDPb)
                       ((case-lambda
                          ((g$lab$10161$DDDPb)
                           ((case-lambda
                              ((g$b$10162$DDDPb)
                               ((case-lambda
                                  ((g$type$10163$DDDPb)
                                   (begin
                                     (if (not g$lab$10161$DDDPb)
                                       (g$raise-unbound-error$9373$DDDPb
                                         g$id$10160$DDDPb)
                                       (void))
                                     (if (not (if (eq? g$type$10163$DDDPb
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$9372$DDDPb
                                                           g$b$10162$DDDPb))))
                                                '#f))
                                       (g$syntax-violation$9835$DDDPb
                                         '#f
                                         '"not a record type"
                                         g$e$10154$DDDPb)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$9372$DDDPb
                                         g$b$10162$DDDPb)))))
                                (g$binding-type$9371$DDDPb
                                  g$b$10162$DDDPb))))
                            (g$label->binding$9369$DDDPb
                              g$lab$10161$DDDPb
                              g$r$10155$DDDPb))))
                        (g$id->label$9367$DDDPb g$id$10160$DDDPb))))
                    g$ls/false$10158$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10157$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$10157$DDDPb '(_ any)))))
         g$e$10154$DDDPb))))
   (g$record-type-descriptor-transformer$9671$DDDPb
     g$record-type-descriptor-transformer$13212$DDDPb
     (case-lambda
       ((g$e$10164$DDDPb g$r$10165$DDDPb g$mr$10166$DDDPb)
        ((case-lambda
           ((g$t$10167$DDDPb)
            ((case-lambda
               ((g$ls/false$10168$DDDPb)
                (if (if g$ls/false$10168$DDDPb
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10169$DDDPb)
                             (g$id?$9354$DDDPb g$id$10169$DDDPb)))
                          g$ls/false$10168$DDDPb))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10170$DDDPb)
                       ((case-lambda
                          ((g$lab$10171$DDDPb)
                           ((case-lambda
                              ((g$b$10172$DDDPb)
                               ((case-lambda
                                  ((g$type$10173$DDDPb)
                                   (begin
                                     (if (not g$lab$10171$DDDPb)
                                       (g$raise-unbound-error$9373$DDDPb
                                         g$id$10170$DDDPb)
                                       (void))
                                     (if (not (if (eq? g$type$10173$DDDPb
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$9372$DDDPb
                                                      g$b$10172$DDDPb)))
                                                '#f))
                                       (g$syntax-violation$9835$DDDPb
                                         '#f
                                         '"not a record type"
                                         g$e$10164$DDDPb)
                                       (void))
                                     (g$chi-expr$9735$DDDPb
                                       (car (g$binding-value$9372$DDDPb
                                              g$b$10172$DDDPb))
                                       g$r$10165$DDDPb
                                       g$mr$10166$DDDPb))))
                                (g$binding-type$9371$DDDPb
                                  g$b$10172$DDDPb))))
                            (g$label->binding$9369$DDDPb
                              g$lab$10171$DDDPb
                              g$r$10165$DDDPb))))
                        (g$id->label$9367$DDDPb g$id$10170$DDDPb))))
                    g$ls/false$10168$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10167$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$10167$DDDPb '(_ any)))))
         g$e$10164$DDDPb))))
   (g$record-constructor-descriptor-transformer$9672$DDDPb
     g$record-constructor-descriptor-transformer$13213$DDDPb
     (case-lambda
       ((g$e$10174$DDDPb g$r$10175$DDDPb g$mr$10176$DDDPb)
        ((case-lambda
           ((g$t$10177$DDDPb)
            ((case-lambda
               ((g$ls/false$10178$DDDPb)
                (if (if g$ls/false$10178$DDDPb
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10179$DDDPb)
                             (g$id?$9354$DDDPb g$id$10179$DDDPb)))
                          g$ls/false$10178$DDDPb))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10180$DDDPb)
                       ((case-lambda
                          ((g$lab$10181$DDDPb)
                           ((case-lambda
                              ((g$b$10182$DDDPb)
                               ((case-lambda
                                  ((g$type$10183$DDDPb)
                                   (begin
                                     (if (not g$lab$10181$DDDPb)
                                       (g$raise-unbound-error$9373$DDDPb
                                         g$id$10180$DDDPb)
                                       (void))
                                     (if (not (if (eq? g$type$10183$DDDPb
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$9372$DDDPb
                                                      g$b$10182$DDDPb)))
                                                '#f))
                                       (g$syntax-violation$9835$DDDPb
                                         '#f
                                         '"invalid type"
                                         g$e$10174$DDDPb)
                                       (void))
                                     (g$chi-expr$9735$DDDPb
                                       (g$cadr$6433$DDDPb
                                         (g$binding-value$9372$DDDPb
                                           g$b$10182$DDDPb))
                                       g$r$10175$DDDPb
                                       g$mr$10176$DDDPb))))
                                (g$binding-type$9371$DDDPb
                                  g$b$10182$DDDPb))))
                            (g$label->binding$9369$DDDPb
                              g$lab$10181$DDDPb
                              g$r$10175$DDDPb))))
                        (g$id->label$9367$DDDPb g$id$10180$DDDPb))))
                    g$ls/false$10178$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10177$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$10177$DDDPb '(_ any)))))
         g$e$10174$DDDPb))))
   (g$when-macro$9673$DDDPb
     g$when-macro$13214$DDDPb
     (case-lambda
       ((g$e$10184$DDDPb)
        ((case-lambda
           ((g$t$10185$DDDPb)
            ((case-lambda
               ((g$ls/false$10186$DDDPb)
                (if g$ls/false$10186$DDDPb
                  (apply
                    (case-lambda
                      ((g$test$10187$DDDPb
                         g$e$10188$DDDPb
                         g$e*$10189$DDDPb)
                       (g$bless$9680$DDDPb
                         (list
                           'if
                           g$test$10187$DDDPb
                           (cons
                             'begin
                             (cons
                               g$e$10188$DDDPb
                               g$e*$10189$DDDPb))))))
                    g$ls/false$10186$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10185$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10185$DDDPb
               '(_ any any . each-any)))))
         g$e$10184$DDDPb))))
   (g$unless-macro$9674$DDDPb
     g$unless-macro$13215$DDDPb
     (case-lambda
       ((g$e$10190$DDDPb)
        ((case-lambda
           ((g$t$10191$DDDPb)
            ((case-lambda
               ((g$ls/false$10192$DDDPb)
                (if g$ls/false$10192$DDDPb
                  (apply
                    (case-lambda
                      ((g$test$10193$DDDPb
                         g$e$10194$DDDPb
                         g$e*$10195$DDDPb)
                       (g$bless$9680$DDDPb
                         (list
                           'if
                           (list 'not g$test$10193$DDDPb)
                           (cons
                             'begin
                             (cons
                               g$e$10194$DDDPb
                               g$e*$10195$DDDPb))))))
                    g$ls/false$10192$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10191$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10191$DDDPb
               '(_ any any . each-any)))))
         g$e$10190$DDDPb))))
   (g$if-transformer$9675$DDDPb
     g$if-transformer$13216$DDDPb
     (case-lambda
       ((g$e$10196$DDDPb g$r$10197$DDDPb g$mr$10198$DDDPb)
        ((case-lambda
           ((g$t$10199$DDDPb)
            ((case-lambda
               ((g$ls/false$10200$DDDPb)
                (if g$ls/false$10200$DDDPb
                  (apply
                    (case-lambda
                      ((g$e0$10201$DDDPb
                         g$e1$10202$DDDPb
                         g$e2$10203$DDDPb)
                       (list
                         'if
                         (g$chi-expr$9735$DDDPb
                           g$e0$10201$DDDPb
                           g$r$10197$DDDPb
                           g$mr$10198$DDDPb)
                         (g$chi-expr$9735$DDDPb
                           g$e1$10202$DDDPb
                           g$r$10197$DDDPb
                           g$mr$10198$DDDPb)
                         (g$chi-expr$9735$DDDPb
                           g$e2$10203$DDDPb
                           g$r$10197$DDDPb
                           g$mr$10198$DDDPb))))
                    g$ls/false$10200$DDDPb)
                  ((case-lambda
                     ((g$t$10204$DDDPb)
                      ((case-lambda
                         ((g$ls/false$10205$DDDPb)
                          (if g$ls/false$10205$DDDPb
                            (apply
                              (case-lambda
                                ((g$e0$10206$DDDPb g$e1$10207$DDDPb)
                                 (list
                                   'if
                                   (g$chi-expr$9735$DDDPb
                                     g$e0$10206$DDDPb
                                     g$r$10197$DDDPb
                                     g$mr$10198$DDDPb)
                                   (g$chi-expr$9735$DDDPb
                                     g$e1$10207$DDDPb
                                     g$r$10197$DDDPb
                                     g$mr$10198$DDDPb)
                                   (g$build-void$9280$DDDPb))))
                              g$ls/false$10205$DDDPb)
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"invalid syntax"
                              g$t$10204$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$10204$DDDPb
                         '(_ any any)))))
                   g$t$10199$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10199$DDDPb
               '(_ any any any)))))
         g$e$10196$DDDPb))))
   (g$case-macro$9676$DDDPb
     g$case-macro$13217$DDDPb
     (case-lambda
       ((g$e$10208$DDDPb)
        (letrec* ((g$build-last$10209$DDDPb
                    (case-lambda
                      ((g$cls$10229$DDDPb)
                       ((case-lambda
                          ((g$t$10230$DDDPb)
                           ((case-lambda
                              ((g$ls/false$10231$DDDPb)
                               (if g$ls/false$10231$DDDPb
                                 (apply
                                   (case-lambda
                                     ((g$e$10232$DDDPb g$e*$10233$DDDPb)
                                      (cons
                                        'begin
                                        (cons
                                          g$e$10232$DDDPb
                                          g$e*$10233$DDDPb))))
                                   g$ls/false$10231$DDDPb)
                                 ((case-lambda
                                    ((g$t$10234$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$10235$DDDPb)
                                         (if g$ls/false$10235$DDDPb
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$10210$DDDPb
                                                  g$cls$10229$DDDPb
                                                  '(if #f #f))))
                                             g$ls/false$10235$DDDPb)
                                           (g$syntax-violation$9835$DDDPb
                                             '#f
                                             '"invalid syntax"
                                             g$t$10234$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$10234$DDDPb
                                        '_))))
                                  g$t$10230$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$10230$DDDPb
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$10229$DDDPb))))
                  (g$build-one$10210$DDDPb
                    (case-lambda
                      ((g$cls$10222$DDDPb g$k$10223$DDDPb)
                       ((case-lambda
                          ((g$t$10224$DDDPb)
                           ((case-lambda
                              ((g$ls/false$10225$DDDPb)
                               (if g$ls/false$10225$DDDPb
                                 (apply
                                   (case-lambda
                                     ((g$d*$10226$DDDPb
                                        g$e$10227$DDDPb
                                        g$e*$10228$DDDPb)
                                      (if (= '1
                                             (length g$d*$10226$DDDPb))
                                        (list
                                          'if
                                          (list
                                            'eqv?
                                            't
                                            (list
                                              'quote
                                              (car g$d*$10226$DDDPb)))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$10227$DDDPb
                                              g$e*$10228$DDDPb))
                                          g$k$10223$DDDPb)
                                        (list
                                          'if
                                          (list
                                            'memv
                                            't
                                            (list
                                              'quote
                                              g$d*$10226$DDDPb))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$10227$DDDPb
                                              g$e*$10228$DDDPb))
                                          g$k$10223$DDDPb))))
                                   g$ls/false$10225$DDDPb)
                                 (g$syntax-violation$9835$DDDPb
                                   '#f
                                   '"invalid syntax"
                                   g$t$10224$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$10224$DDDPb
                              '(each-any any . each-any)))))
                        g$cls$10222$DDDPb)))))
          ((case-lambda
             ((g$t$10211$DDDPb)
              ((case-lambda
                 ((g$ls/false$10212$DDDPb)
                  (if g$ls/false$10212$DDDPb
                    (apply
                      (case-lambda
                        ((g$expr$10213$DDDPb)
                         (g$bless$9680$DDDPb
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$10213$DDDPb))
                               '((if #f #f)))))))
                      g$ls/false$10212$DDDPb)
                    ((case-lambda
                       ((g$t$10214$DDDPb)
                        ((case-lambda
                           ((g$ls/false$10215$DDDPb)
                            (if g$ls/false$10215$DDDPb
                              (apply
                                (case-lambda
                                  ((g$expr$10216$DDDPb
                                     g$cls$10217$DDDPb
                                     g$cls*$10218$DDDPb)
                                   (g$bless$9680$DDDPb
                                     (list
                                       'let
                                       (list
                                         (list 't g$expr$10216$DDDPb))
                                       ((letrec ((g$f$10219$DDDPb
                                                   (case-lambda
                                                     ((g$cls$10220$DDDPb
                                                        g$cls*$10221$DDDPb)
                                                      (if (null?
                                                            g$cls*$10221$DDDPb)
                                                        (g$build-last$10209$DDDPb
                                                          g$cls$10220$DDDPb)
                                                        (g$build-one$10210$DDDPb
                                                          g$cls$10220$DDDPb
                                                          (g$f$10219$DDDPb
                                                            (car g$cls*$10221$DDDPb)
                                                            (cdr g$cls*$10221$DDDPb))))))))
                                          g$f$10219$DDDPb)
                                        g$cls$10217$DDDPb
                                        g$cls*$10218$DDDPb)))))
                                g$ls/false$10215$DDDPb)
                              (g$syntax-violation$9835$DDDPb
                                '#f
                                '"invalid syntax"
                                g$t$10214$DDDPb))))
                         (g$syntax-dispatch$9717$DDDPb
                           g$t$10214$DDDPb
                           '(_ any any . each-any)))))
                     g$t$10211$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$10211$DDDPb
                 '(_ any)))))
           g$e$10208$DDDPb)))))
   (g$quote-transformer$9677$DDDPb
     g$quote-transformer$13218$DDDPb
     (case-lambda
       ((g$e$10236$DDDPb g$r$10237$DDDPb g$mr$10238$DDDPb)
        ((case-lambda
           ((g$t$10239$DDDPb)
            ((case-lambda
               ((g$ls/false$10240$DDDPb)
                (if g$ls/false$10240$DDDPb
                  (apply
                    (case-lambda
                      ((g$datum$10241$DDDPb)
                       (list
                         'quote
                         (g$stx->datum$9365$DDDPb
                           g$datum$10241$DDDPb))))
                    g$ls/false$10240$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10239$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$10239$DDDPb '(_ any)))))
         g$e$10236$DDDPb))))
   (g$case-lambda-transformer$9678$DDDPb
     g$case-lambda-transformer$13219$DDDPb
     (case-lambda
       ((g$e$10242$DDDPb g$r$10243$DDDPb g$mr$10244$DDDPb)
        ((case-lambda
           ((g$t$10245$DDDPb)
            ((case-lambda
               ((g$ls/false$10246$DDDPb)
                (if g$ls/false$10246$DDDPb
                  (apply
                    (case-lambda
                      ((g$fmls*$10247$DDDPb
                         g$b*$10248$DDDPb
                         g$b**$10249$DDDPb)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$9739$DDDPb
                              g$e$10242$DDDPb
                              g$fmls*$10247$DDDPb
                              (g$map$5753$DDDPb
                                cons
                                g$b*$10248$DDDPb
                                g$b**$10249$DDDPb)
                              g$r$10243$DDDPb
                              g$mr$10244$DDDPb)))
                         (case-lambda
                           ((g$fmls*$10252$DDDPb g$body*$10253$DDDPb)
                            ((case-lambda
                               ((g$body*$10254$DDDPb
                                  g$fmls*$10255$DDDPb)
                                (g$build-case-lambda$9277$DDDPb
                                  '#f
                                  g$fmls*$10255$DDDPb
                                  g$body*$10254$DDDPb)))
                             g$body*$10253$DDDPb
                             g$fmls*$10252$DDDPb))))))
                    g$ls/false$10246$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10245$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10245$DDDPb
               '(_ . #(each (any any . each-any)))))))
         g$e$10242$DDDPb))))
   (g$lambda-transformer$9679$DDDPb
     g$lambda-transformer$13220$DDDPb
     (case-lambda
       ((g$e$10256$DDDPb g$r$10257$DDDPb g$mr$10258$DDDPb)
        ((case-lambda
           ((g$t$10259$DDDPb)
            ((case-lambda
               ((g$ls/false$10260$DDDPb)
                (if g$ls/false$10260$DDDPb
                  (apply
                    (case-lambda
                      ((g$fmls$10261$DDDPb
                         g$b$10262$DDDPb
                         g$b*$10263$DDDPb)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$9738$DDDPb
                              g$e$10256$DDDPb
                              g$fmls$10261$DDDPb
                              (cons g$b$10262$DDDPb g$b*$10263$DDDPb)
                              g$r$10257$DDDPb
                              g$mr$10258$DDDPb)))
                         (case-lambda
                           ((g$fmls$10266$DDDPb g$body$10267$DDDPb)
                            ((case-lambda
                               ((g$body$10268$DDDPb g$fmls$10269$DDDPb)
                                (g$build-lambda$9276$DDDPb
                                  '#f
                                  g$fmls$10269$DDDPb
                                  g$body$10268$DDDPb)))
                             g$body$10267$DDDPb
                             g$fmls$10266$DDDPb))))))
                    g$ls/false$10260$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10259$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10259$DDDPb
               '(_ any any . each-any)))))
         g$e$10256$DDDPb))))
   (g$bless$9680$DDDPb
     g$bless$13221$DDDPb
     (case-lambda
       ((g$x$10270$DDDPb)
        (g$mkstx$9342$DDDPb
          ((letrec ((g$f$10271$DDDPb
                      (case-lambda
                        ((g$x$10272$DDDPb)
                         (if (g$stx?$9326$DDDPb g$x$10272$DDDPb)
                           g$x$10272$DDDPb
                           (if (pair? g$x$10272$DDDPb)
                             (cons
                               (g$f$10271$DDDPb (car g$x$10272$DDDPb))
                               (g$f$10271$DDDPb (cdr g$x$10272$DDDPb)))
                             (if (g$symbol?$6424$DDDPb g$x$10272$DDDPb)
                               (g$scheme-stx$9660$DDDPb g$x$10272$DDDPb)
                               (if (g$vector?$6422$DDDPb
                                     g$x$10272$DDDPb)
                                 (g$vector-map$6484$DDDPb
                                   g$f$10271$DDDPb
                                   g$x$10272$DDDPb)
                                 g$x$10272$DDDPb))))))))
             g$f$10271$DDDPb)
           g$x$10270$DDDPb)
          '()
          '()
          '()))))
   (g$with-syntax-macro$9681$DDDPb
     g$with-syntax-macro$13222$DDDPb
     (case-lambda
       ((g$e$10273$DDDPb)
        ((case-lambda
           ((g$t$10274$DDDPb)
            ((case-lambda
               ((g$ls/false$10275$DDDPb)
                (if g$ls/false$10275$DDDPb
                  (apply
                    (case-lambda
                      ((g$pat*$10276$DDDPb
                         g$expr*$10277$DDDPb
                         g$b$10278$DDDPb
                         g$b*$10279$DDDPb)
                       ((case-lambda
                          ((g$idn*$10280$DDDPb)
                           (begin
                             (g$verify-formals$9737$DDDPb
                               (g$map$5753$DDDPb car g$idn*$10280$DDDPb)
                               g$e$10273$DDDPb)
                             ((case-lambda
                                ((g$t*$10281$DDDPb)
                                 (g$bless$9680$DDDPb
                                   (list
                                     'let
                                     (g$map$5753$DDDPb
                                       list
                                       g$t*$10281$DDDPb
                                       g$expr*$10277$DDDPb)
                                     ((letrec ((g$f$10282$DDDPb
                                                 (case-lambda
                                                   ((g$pat*$10283$DDDPb
                                                      g$t*$10284$DDDPb)
                                                    (if (null?
                                                          g$pat*$10283$DDDPb)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$10278$DDDPb
                                                            g$b*$10279$DDDPb)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$10284$DDDPb)
                                                        '()
                                                        (list
                                                          (car g$pat*$10283$DDDPb)
                                                          (g$f$10282$DDDPb
                                                            (cdr g$pat*$10283$DDDPb)
                                                            (cdr g$t*$10284$DDDPb)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$10283$DDDPb))
                                                            (car g$t*$10284$DDDPb)))))))))
                                        g$f$10282$DDDPb)
                                      g$pat*$10276$DDDPb
                                      g$t*$10281$DDDPb)))))
                              (g$generate-temporaries$9825$DDDPb
                                g$expr*$10277$DDDPb)))))
                        ((letrec ((g$f$10285$DDDPb
                                    (case-lambda
                                      ((g$pat*$10286$DDDPb)
                                       (if (null? g$pat*$10286$DDDPb)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$9716$DDDPb
                                                (car g$pat*$10286$DDDPb)
                                                '())))
                                           (case-lambda
                                             ((g$pat$10289$DDDPb
                                                g$idn*$10290$DDDPb)
                                              ((case-lambda
                                                 ((g$idn*$10291$DDDPb
                                                    g$pat$10292$DDDPb)
                                                  (append
                                                    g$idn*$10291$DDDPb
                                                    (g$f$10285$DDDPb
                                                      (cdr g$pat*$10286$DDDPb)))))
                                               g$idn*$10290$DDDPb
                                               g$pat$10289$DDDPb)))))))))
                           g$f$10285$DDDPb)
                         g$pat*$10276$DDDPb))))
                    g$ls/false$10275$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10274$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10274$DDDPb
               '(_ #(each (any any)) any . each-any)))))
         g$e$10273$DDDPb))))
   (g$invalid-fmls-error$9682$DDDPb
     g$invalid-fmls-error$13223$DDDPb
     (case-lambda
       ((g$stx$10293$DDDPb g$fmls$10294$DDDPb)
        ((case-lambda
           ((g$t$10295$DDDPb)
            ((case-lambda
               ((g$ls/false$10296$DDDPb)
                (if g$ls/false$10296$DDDPb
                  (apply
                    (case-lambda
                      ((g$id*$10297$DDDPb g$last$10298$DDDPb)
                       ((letrec ((g$f$10299$DDDPb
                                   (case-lambda
                                     ((g$id*$10300$DDDPb)
                                      (if (null? g$id*$10300$DDDPb)
                                        (values)
                                        (if (not (g$id?$9354$DDDPb
                                                   (car g$id*$10300$DDDPb)))
                                          (g$syntax-violation$9835$DDDPb
                                            '#f
                                            '"not an identifier"
                                            g$stx$10293$DDDPb
                                            (car g$id*$10300$DDDPb))
                                          (begin
                                            (g$f$10299$DDDPb
                                              (cdr g$id*$10300$DDDPb))
                                            (if (g$bound-id-member?$9361$DDDPb
                                                  (car g$id*$10300$DDDPb)
                                                  (cdr g$id*$10300$DDDPb))
                                              (g$syntax-violation$9835$DDDPb
                                                '#f
                                                '"duplicate binding"
                                                g$stx$10293$DDDPb
                                                (car g$id*$10300$DDDPb))
                                              (void)))))))))
                          g$f$10299$DDDPb)
                        (if (g$id?$9354$DDDPb g$last$10298$DDDPb)
                          (cons g$last$10298$DDDPb g$id*$10297$DDDPb)
                          (if (g$syntax-null?$9349$DDDPb
                                g$last$10298$DDDPb)
                            g$id*$10297$DDDPb
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"not an identifier"
                              g$stx$10293$DDDPb
                              g$last$10298$DDDPb))))))
                    g$ls/false$10296$DDDPb)
                  ((case-lambda
                     ((g$t$10301$DDDPb)
                      ((case-lambda
                         ((g$ls/false$10302$DDDPb)
                          (if g$ls/false$10302$DDDPb
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$9835$DDDPb
                                   '#f
                                   '"malformed binding form"
                                   g$stx$10293$DDDPb
                                   g$fmls$10294$DDDPb)))
                              g$ls/false$10302$DDDPb)
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"invalid syntax"
                              g$t$10301$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$10301$DDDPb
                         '_))))
                   g$t$10295$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10295$DDDPb
               '#(each+ any () any)))))
         g$fmls$10294$DDDPb))))
   (g$let-macro$9683$DDDPb
     g$let-macro$13224$DDDPb
     (case-lambda
       ((g$stx$10303$DDDPb)
        ((case-lambda
           ((g$t$10304$DDDPb)
            ((case-lambda
               ((g$ls/false$10305$DDDPb)
                (if g$ls/false$10305$DDDPb
                  (apply
                    (case-lambda
                      ((g$lhs*$10306$DDDPb
                         g$rhs*$10307$DDDPb
                         g$b$10308$DDDPb
                         g$b*$10309$DDDPb)
                       (if (g$valid-bound-ids?$9359$DDDPb
                             g$lhs*$10306$DDDPb)
                         (g$bless$9680$DDDPb
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$10306$DDDPb
                                 (cons
                                   g$b$10308$DDDPb
                                   g$b*$10309$DDDPb)))
                             g$rhs*$10307$DDDPb))
                         (g$invalid-fmls-error$9682$DDDPb
                           g$stx$10303$DDDPb
                           g$lhs*$10306$DDDPb))))
                    g$ls/false$10305$DDDPb)
                  ((case-lambda
                     ((g$t$10310$DDDPb)
                      ((case-lambda
                         ((g$ls/false$10311$DDDPb)
                          (if (if g$ls/false$10311$DDDPb
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$10312$DDDPb
                                         g$lhs*$10313$DDDPb
                                         g$rhs*$10314$DDDPb
                                         g$b$10315$DDDPb
                                         g$b*$10316$DDDPb)
                                       (g$id?$9354$DDDPb
                                         g$f$10312$DDDPb)))
                                    g$ls/false$10311$DDDPb))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$10317$DDDPb
                                   g$lhs*$10318$DDDPb
                                   g$rhs*$10319$DDDPb
                                   g$b$10320$DDDPb
                                   g$b*$10321$DDDPb)
                                 (if (g$valid-bound-ids?$9359$DDDPb
                                       g$lhs*$10318$DDDPb)
                                   (g$bless$9680$DDDPb
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$10317$DDDPb
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$10318$DDDPb
                                                 (cons
                                                   g$b$10320$DDDPb
                                                   g$b*$10321$DDDPb)))))
                                         g$f$10317$DDDPb)
                                       g$rhs*$10319$DDDPb))
                                   (g$invalid-fmls-error$9682$DDDPb
                                     g$stx$10303$DDDPb
                                     g$lhs*$10318$DDDPb))))
                              g$ls/false$10311$DDDPb)
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"invalid syntax"
                              g$t$10310$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$10310$DDDPb
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$10304$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10304$DDDPb
               '(_ #(each (any any)) any . each-any)))))
         g$stx$10303$DDDPb))))
   (g$let-values-macro$9684$DDDPb
     g$let-values-macro$13225$DDDPb
     (case-lambda
       ((g$stx$10322$DDDPb)
        (letrec* ((g$rename$10323$DDDPb
                    (case-lambda
                      ((g$x$10374$DDDPb
                         g$old*$10375$DDDPb
                         g$new*$10376$DDDPb)
                       (begin
                         (if (not (g$id?$9354$DDDPb g$x$10374$DDDPb))
                           (g$syntax-violation$9835$DDDPb
                             '#f
                             '"not an indentifier"
                             g$stx$10322$DDDPb
                             g$x$10374$DDDPb)
                           (void))
                         (if (g$bound-id-member?$9361$DDDPb
                               g$x$10374$DDDPb
                               g$old*$10375$DDDPb)
                           (g$syntax-violation$9835$DDDPb
                             '#f
                             '"duplicate binding"
                             g$stx$10322$DDDPb
                             g$x$10374$DDDPb)
                           (void))
                         ((case-lambda
                            ((g$y$10377$DDDPb)
                             (values
                               g$y$10377$DDDPb
                               (cons g$x$10374$DDDPb g$old*$10375$DDDPb)
                               (cons
                                 g$y$10377$DDDPb
                                 g$new*$10376$DDDPb))))
                          (gensym
                            (g$syntax->datum$9838$DDDPb
                              g$x$10374$DDDPb)))))))
                  (g$rename*$10324$DDDPb
                    (case-lambda
                      ((g$x*$10365$DDDPb
                         g$old*$10366$DDDPb
                         g$new*$10367$DDDPb)
                       (if (null? g$x*$10365$DDDPb)
                         (values
                           '()
                           g$old*$10366$DDDPb
                           g$new*$10367$DDDPb)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$10323$DDDPb
                                (car g$x*$10365$DDDPb)
                                g$old*$10366$DDDPb
                                g$new*$10367$DDDPb)))
                           (case-lambda
                             ((g$x$10368$DDDPb
                                g$old*$10369$DDDPb
                                g$new*$10370$DDDPb)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$10324$DDDPb
                                     (cdr g$x*$10365$DDDPb)
                                     g$old*$10369$DDDPb
                                     g$new*$10370$DDDPb)))
                                (case-lambda
                                  ((g$x*$10371$DDDPb
                                     g$old*$10372$DDDPb
                                     g$new*$10373$DDDPb)
                                   (values
                                     (cons
                                       g$x$10368$DDDPb
                                       g$x*$10371$DDDPb)
                                     g$old*$10372$DDDPb
                                     g$new*$10373$DDDPb))))))))))))
          ((case-lambda
             ((g$t$10325$DDDPb)
              ((case-lambda
                 ((g$ls/false$10326$DDDPb)
                  (if g$ls/false$10326$DDDPb
                    (apply
                      (case-lambda
                        ((g$b$10327$DDDPb g$b*$10328$DDDPb)
                         (g$cons*$5755$DDDPb
                           (g$bless$9680$DDDPb 'let)
                           '()
                           g$b$10327$DDDPb
                           g$b*$10328$DDDPb)))
                      g$ls/false$10326$DDDPb)
                    ((case-lambda
                       ((g$t$10329$DDDPb)
                        ((case-lambda
                           ((g$ls/false$10330$DDDPb)
                            (if g$ls/false$10330$DDDPb
                              (apply
                                (case-lambda
                                  ((g$lhs*$10331$DDDPb
                                     g$rhs*$10332$DDDPb
                                     g$b$10333$DDDPb
                                     g$b*$10334$DDDPb)
                                   (g$bless$9680$DDDPb
                                     ((letrec ((g$f$10335$DDDPb
                                                 (case-lambda
                                                   ((g$lhs*$10336$DDDPb
                                                      g$rhs*$10337$DDDPb
                                                      g$old*$10338$DDDPb
                                                      g$new*$10339$DDDPb)
                                                    (if (null?
                                                          g$lhs*$10336$DDDPb)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$5753$DDDPb
                                                            list
                                                            g$old*$10338$DDDPb
                                                            g$new*$10339$DDDPb)
                                                          (cons
                                                            g$b$10333$DDDPb
                                                            g$b*$10334$DDDPb)))
                                                      ((case-lambda
                                                         ((g$t$10340$DDDPb)
                                                          ((case-lambda
                                                             ((g$ls/false$10341$DDDPb)
                                                              (if g$ls/false$10341$DDDPb
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$10342$DDDPb)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$10324$DDDPb
                                                                            g$x*$10342$DDDPb
                                                                            g$old*$10338$DDDPb
                                                                            g$new*$10339$DDDPb)))
                                                                       (case-lambda
                                                                         ((g$y*$10346$DDDPb
                                                                            g$old*$10347$DDDPb
                                                                            g$new*$10348$DDDPb)
                                                                          ((case-lambda
                                                                             ((g$new*$10349$DDDPb
                                                                                g$old*$10350$DDDPb
                                                                                g$y*$10351$DDDPb)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$10337$DDDPb))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$10351$DDDPb
                                                                                  (g$f$10335$DDDPb
                                                                                    (cdr g$lhs*$10336$DDDPb)
                                                                                    (cdr g$rhs*$10337$DDDPb)
                                                                                    g$old*$10350$DDDPb
                                                                                    g$new*$10349$DDDPb)))))
                                                                           g$new*$10348$DDDPb
                                                                           g$old*$10347$DDDPb
                                                                           g$y*$10346$DDDPb))))))
                                                                  g$ls/false$10341$DDDPb)
                                                                ((case-lambda
                                                                   ((g$t$10352$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10353$DDDPb)
                                                                        (if g$ls/false$10353$DDDPb
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$10354$DDDPb
                                                                                 g$x$10355$DDDPb)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$10323$DDDPb
                                                                                      g$x$10355$DDDPb
                                                                                      g$old*$10338$DDDPb
                                                                                      g$new*$10339$DDDPb)))
                                                                                 (case-lambda
                                                                                   ((g$y$10356$DDDPb
                                                                                      g$old*$10357$DDDPb
                                                                                      g$new*$10358$DDDPb)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$10324$DDDPb
                                                                                           g$x*$10354$DDDPb
                                                                                           g$old*$10357$DDDPb
                                                                                           g$new*$10358$DDDPb)))
                                                                                      (case-lambda
                                                                                        ((g$y*$10359$DDDPb
                                                                                           g$old*$10360$DDDPb
                                                                                           g$new*$10361$DDDPb)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$10337$DDDPb))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$10359$DDDPb
                                                                                               g$y$10356$DDDPb)
                                                                                             (g$f$10335$DDDPb
                                                                                               (cdr g$lhs*$10336$DDDPb)
                                                                                               (cdr g$rhs*$10337$DDDPb)
                                                                                               g$old*$10360$DDDPb
                                                                                               g$new*$10361$DDDPb)))))))))))
                                                                            g$ls/false$10353$DDDPb)
                                                                          ((case-lambda
                                                                             ((g$t$10362$DDDPb)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10363$DDDPb)
                                                                                  (if g$ls/false$10363$DDDPb
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$10364$DDDPb)
                                                                                         (g$syntax-violation$9835$DDDPb
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$10322$DDDPb
                                                                                           g$others$10364$DDDPb)))
                                                                                      g$ls/false$10363$DDDPb)
                                                                                    (g$syntax-violation$9835$DDDPb
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$10362$DDDPb))))
                                                                               (g$syntax-dispatch$9717$DDDPb
                                                                                 g$t$10362$DDDPb
                                                                                 'any))))
                                                                           g$t$10352$DDDPb))))
                                                                     (g$syntax-dispatch$9717$DDDPb
                                                                       g$t$10352$DDDPb
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$10340$DDDPb))))
                                                           (g$syntax-dispatch$9717$DDDPb
                                                             g$t$10340$DDDPb
                                                             'each-any))))
                                                       (car g$lhs*$10336$DDDPb)))))))
                                        g$f$10335$DDDPb)
                                      g$lhs*$10331$DDDPb
                                      g$rhs*$10332$DDDPb
                                      '()
                                      '()))))
                                g$ls/false$10330$DDDPb)
                              (g$syntax-violation$9835$DDDPb
                                '#f
                                '"invalid syntax"
                                g$t$10329$DDDPb))))
                         (g$syntax-dispatch$9717$DDDPb
                           g$t$10329$DDDPb
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$10325$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$10325$DDDPb
                 '(_ () any . each-any)))))
           g$stx$10322$DDDPb)))))
   (g$let*-values-macro$9685$DDDPb
     g$let*-values-macro$13226$DDDPb
     (case-lambda
       ((g$stx$10378$DDDPb)
        (letrec* ((g$check$10379$DDDPb
                    (case-lambda
                      ((g$x*$10403$DDDPb)
                       (if (not (null? g$x*$10403$DDDPb))
                         ((case-lambda
                            ((g$x$10404$DDDPb)
                             (begin
                               (if (not (g$id?$9354$DDDPb
                                          g$x$10404$DDDPb))
                                 (g$syntax-violation$9835$DDDPb
                                   '#f
                                   '"not an identifier"
                                   g$stx$10378$DDDPb
                                   g$x$10404$DDDPb)
                                 (void))
                               (g$check$10379$DDDPb
                                 (cdr g$x*$10403$DDDPb))
                               (if (g$bound-id-member?$9361$DDDPb
                                     g$x$10404$DDDPb
                                     (cdr g$x*$10403$DDDPb))
                                 (g$syntax-violation$9835$DDDPb
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$10378$DDDPb
                                   g$x$10404$DDDPb)
                                 (void)))))
                          (car g$x*$10403$DDDPb))
                         (void))))))
          ((case-lambda
             ((g$t$10380$DDDPb)
              ((case-lambda
                 ((g$ls/false$10381$DDDPb)
                  (if g$ls/false$10381$DDDPb
                    (apply
                      (case-lambda
                        ((g$b$10382$DDDPb g$b*$10383$DDDPb)
                         (g$cons*$5755$DDDPb
                           (g$bless$9680$DDDPb 'let)
                           '()
                           g$b$10382$DDDPb
                           g$b*$10383$DDDPb)))
                      g$ls/false$10381$DDDPb)
                    ((case-lambda
                       ((g$t$10384$DDDPb)
                        ((case-lambda
                           ((g$ls/false$10385$DDDPb)
                            (if g$ls/false$10385$DDDPb
                              (apply
                                (case-lambda
                                  ((g$lhs*$10386$DDDPb
                                     g$rhs*$10387$DDDPb
                                     g$b$10388$DDDPb
                                     g$b*$10389$DDDPb)
                                   (g$bless$9680$DDDPb
                                     ((letrec ((g$f$10390$DDDPb
                                                 (case-lambda
                                                   ((g$lhs*$10391$DDDPb
                                                      g$rhs*$10392$DDDPb)
                                                    (if (null?
                                                          g$lhs*$10391$DDDPb)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$10388$DDDPb
                                                          g$b*$10389$DDDPb))
                                                      ((case-lambda
                                                         ((g$t$10393$DDDPb)
                                                          ((case-lambda
                                                             ((g$ls/false$10394$DDDPb)
                                                              (if g$ls/false$10394$DDDPb
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$10395$DDDPb)
                                                                     (begin
                                                                       (g$check$10379$DDDPb
                                                                         g$x*$10395$DDDPb)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$10392$DDDPb))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$10395$DDDPb
                                                                           (g$f$10390$DDDPb
                                                                             (cdr g$lhs*$10391$DDDPb)
                                                                             (cdr g$rhs*$10392$DDDPb)))))))
                                                                  g$ls/false$10394$DDDPb)
                                                                ((case-lambda
                                                                   ((g$t$10396$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10397$DDDPb)
                                                                        (if g$ls/false$10397$DDDPb
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$10398$DDDPb
                                                                                 g$x$10399$DDDPb)
                                                                               (begin
                                                                                 (g$check$10379$DDDPb
                                                                                   (cons
                                                                                     g$x$10399$DDDPb
                                                                                     g$x*$10398$DDDPb))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$10392$DDDPb))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$10398$DDDPb
                                                                                       g$x$10399$DDDPb)
                                                                                     (g$f$10390$DDDPb
                                                                                       (cdr g$lhs*$10391$DDDPb)
                                                                                       (cdr g$rhs*$10392$DDDPb)))))))
                                                                            g$ls/false$10397$DDDPb)
                                                                          ((case-lambda
                                                                             ((g$t$10400$DDDPb)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10401$DDDPb)
                                                                                  (if g$ls/false$10401$DDDPb
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$10402$DDDPb)
                                                                                         (g$syntax-violation$9835$DDDPb
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$10378$DDDPb
                                                                                           g$others$10402$DDDPb)))
                                                                                      g$ls/false$10401$DDDPb)
                                                                                    (g$syntax-violation$9835$DDDPb
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$10400$DDDPb))))
                                                                               (g$syntax-dispatch$9717$DDDPb
                                                                                 g$t$10400$DDDPb
                                                                                 'any))))
                                                                           g$t$10396$DDDPb))))
                                                                     (g$syntax-dispatch$9717$DDDPb
                                                                       g$t$10396$DDDPb
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$10393$DDDPb))))
                                                           (g$syntax-dispatch$9717$DDDPb
                                                             g$t$10393$DDDPb
                                                             'each-any))))
                                                       (car g$lhs*$10391$DDDPb)))))))
                                        g$f$10390$DDDPb)
                                      g$lhs*$10386$DDDPb
                                      g$rhs*$10387$DDDPb))))
                                g$ls/false$10385$DDDPb)
                              (g$syntax-violation$9835$DDDPb
                                '#f
                                '"invalid syntax"
                                g$t$10384$DDDPb))))
                         (g$syntax-dispatch$9717$DDDPb
                           g$t$10384$DDDPb
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$10380$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$10380$DDDPb
                 '(_ () any . each-any)))))
           g$stx$10378$DDDPb)))))
   (g$trace-lambda-macro$9686$DDDPb
     g$trace-lambda-macro$13227$DDDPb
     (case-lambda
       ((g$stx$10405$DDDPb)
        ((case-lambda
           ((g$t$10406$DDDPb)
            ((case-lambda
               ((g$ls/false$10407$DDDPb)
                (if g$ls/false$10407$DDDPb
                  (apply
                    (case-lambda
                      ((g$who$10408$DDDPb
                         g$fmls$10409$DDDPb
                         g$b$10410$DDDPb
                         g$b*$10411$DDDPb)
                       (if (g$valid-bound-ids?$9359$DDDPb
                             g$fmls$10409$DDDPb)
                         (g$bless$9680$DDDPb
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$10408$DDDPb)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$10409$DDDPb
                                 (cons
                                   g$b$10410$DDDPb
                                   g$b*$10411$DDDPb)))))
                         (g$invalid-fmls-error$9682$DDDPb
                           g$stx$10405$DDDPb
                           g$fmls$10409$DDDPb))))
                    g$ls/false$10407$DDDPb)
                  ((case-lambda
                     ((g$t$10412$DDDPb)
                      ((case-lambda
                         ((g$ls/false$10413$DDDPb)
                          (if g$ls/false$10413$DDDPb
                            (apply
                              (case-lambda
                                ((g$who$10414$DDDPb
                                   g$fmls$10415$DDDPb
                                   g$last$10416$DDDPb
                                   g$b$10417$DDDPb
                                   g$b*$10418$DDDPb)
                                 (if (g$valid-bound-ids?$9359$DDDPb
                                       (cons
                                         g$last$10416$DDDPb
                                         g$fmls$10415$DDDPb))
                                   (g$bless$9680$DDDPb
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$10414$DDDPb)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$10415$DDDPb
                                             g$last$10416$DDDPb)
                                           (cons
                                             g$b$10417$DDDPb
                                             g$b*$10418$DDDPb)))))
                                   (g$invalid-fmls-error$9682$DDDPb
                                     g$stx$10405$DDDPb
                                     (append
                                       g$fmls$10415$DDDPb
                                       g$last$10416$DDDPb)))))
                              g$ls/false$10413$DDDPb)
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"invalid syntax"
                              g$t$10412$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$10412$DDDPb
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$10406$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10406$DDDPb
               '(_ any each-any any . each-any)))))
         g$stx$10405$DDDPb))))
   (g$trace-define-macro$9687$DDDPb
     g$trace-define-macro$13228$DDDPb
     (case-lambda
       ((g$stx$10419$DDDPb)
        ((case-lambda
           ((g$t$10420$DDDPb)
            ((case-lambda
               ((g$ls/false$10421$DDDPb)
                (if g$ls/false$10421$DDDPb
                  (apply
                    (case-lambda
                      ((g$who$10422$DDDPb
                         g$fmls$10423$DDDPb
                         g$b$10424$DDDPb
                         g$b*$10425$DDDPb)
                       (if (g$valid-bound-ids?$9359$DDDPb
                             g$fmls$10423$DDDPb)
                         (g$bless$9680$DDDPb
                           (list
                             'define
                             g$who$10422$DDDPb
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$10422$DDDPb)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$10423$DDDPb
                                   (cons
                                     g$b$10424$DDDPb
                                     g$b*$10425$DDDPb))))))
                         (g$invalid-fmls-error$9682$DDDPb
                           g$stx$10419$DDDPb
                           g$fmls$10423$DDDPb))))
                    g$ls/false$10421$DDDPb)
                  ((case-lambda
                     ((g$t$10426$DDDPb)
                      ((case-lambda
                         ((g$ls/false$10427$DDDPb)
                          (if g$ls/false$10427$DDDPb
                            (apply
                              (case-lambda
                                ((g$who$10428$DDDPb
                                   g$fmls$10429$DDDPb
                                   g$last$10430$DDDPb
                                   g$b$10431$DDDPb
                                   g$b*$10432$DDDPb)
                                 (if (g$valid-bound-ids?$9359$DDDPb
                                       (cons
                                         g$last$10430$DDDPb
                                         g$fmls$10429$DDDPb))
                                   (g$bless$9680$DDDPb
                                     (list
                                       'define
                                       g$who$10428$DDDPb
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$10428$DDDPb)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$10429$DDDPb
                                               g$last$10430$DDDPb)
                                             (cons
                                               g$b$10431$DDDPb
                                               g$b*$10432$DDDPb))))))
                                   (g$invalid-fmls-error$9682$DDDPb
                                     g$stx$10419$DDDPb
                                     (append
                                       g$fmls$10429$DDDPb
                                       g$last$10430$DDDPb)))))
                              g$ls/false$10427$DDDPb)
                            ((case-lambda
                               ((g$t$10433$DDDPb)
                                ((case-lambda
                                   ((g$ls/false$10434$DDDPb)
                                    (if g$ls/false$10434$DDDPb
                                      (apply
                                        (case-lambda
                                          ((g$who$10435$DDDPb
                                             g$expr$10436$DDDPb)
                                           (if (g$id?$9354$DDDPb
                                                 g$who$10435$DDDPb)
                                             (g$bless$9680$DDDPb
                                               (list
                                                 'define
                                                 g$who$10435$DDDPb
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$10436$DDDPb))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$10435$DDDPb)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$9835$DDDPb
                                               '#f
                                               '"invalid name"
                                               g$stx$10419$DDDPb))))
                                        g$ls/false$10434$DDDPb)
                                      (g$syntax-violation$9835$DDDPb
                                        '#f
                                        '"invalid syntax"
                                        g$t$10433$DDDPb))))
                                 (g$syntax-dispatch$9717$DDDPb
                                   g$t$10433$DDDPb
                                   '(_ any any)))))
                             g$t$10426$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$10426$DDDPb
                         '(_ (any . #(each+ any () any))
                             any
                             .
                             each-any)))))
                   g$t$10420$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10420$DDDPb
               '(_ (any . each-any) any . each-any)))))
         g$stx$10419$DDDPb))))
   (g$trace-define-syntax-macro$9688$DDDPb
     g$trace-define-syntax-macro$13229$DDDPb
     (case-lambda
       ((g$stx$10437$DDDPb)
        ((case-lambda
           ((g$t$10438$DDDPb)
            ((case-lambda
               ((g$ls/false$10439$DDDPb)
                (if g$ls/false$10439$DDDPb
                  (apply
                    (case-lambda
                      ((g$who$10440$DDDPb g$expr$10441$DDDPb)
                       (if (g$id?$9354$DDDPb g$who$10440$DDDPb)
                         (g$bless$9680$DDDPb
                           (list
                             'define-syntax
                             g$who$10440$DDDPb
                             (list
                               'make-traced-macro
                               (list 'quote g$who$10440$DDDPb)
                               g$expr$10441$DDDPb)))
                         (g$syntax-violation$9835$DDDPb
                           '#f
                           '"invalid name"
                           g$stx$10437$DDDPb))))
                    g$ls/false$10439$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10438$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10438$DDDPb
               '(_ any any)))))
         g$stx$10437$DDDPb))))
   (g$trace-let/rec-syntax$9689$DDDPb
     g$trace-let/rec-syntax$13230$DDDPb
     (case-lambda
       ((g$who$10442$DDDPb)
        (case-lambda
          ((g$stx$10443$DDDPb)
           ((case-lambda
              ((g$t$10444$DDDPb)
               ((case-lambda
                  ((g$ls/false$10445$DDDPb)
                   (if g$ls/false$10445$DDDPb
                     (apply
                       (case-lambda
                         ((g$lhs*$10446$DDDPb
                            g$rhs*$10447$DDDPb
                            g$b$10448$DDDPb
                            g$b*$10449$DDDPb)
                          (if (g$valid-bound-ids?$9359$DDDPb
                                g$lhs*$10446$DDDPb)
                            ((case-lambda
                               ((g$rhs*$10450$DDDPb)
                                (g$bless$9680$DDDPb
                                  (cons
                                    g$who$10442$DDDPb
                                    (cons
                                      (g$map$5753$DDDPb
                                        list
                                        g$lhs*$10446$DDDPb
                                        g$rhs*$10450$DDDPb)
                                      (cons
                                        g$b$10448$DDDPb
                                        g$b*$10449$DDDPb))))))
                             (g$map$5753$DDDPb
                               (case-lambda
                                 ((g$lhs$10451$DDDPb g$rhs$10452$DDDPb)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$10451$DDDPb)
                                    g$rhs$10452$DDDPb)))
                               g$lhs*$10446$DDDPb
                               g$rhs*$10447$DDDPb))
                            (g$invalid-fmls-error$9682$DDDPb
                              g$stx$10443$DDDPb
                              g$lhs*$10446$DDDPb))))
                       g$ls/false$10445$DDDPb)
                     (g$syntax-violation$9835$DDDPb
                       '#f
                       '"invalid syntax"
                       g$t$10444$DDDPb))))
                (g$syntax-dispatch$9717$DDDPb
                  g$t$10444$DDDPb
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$10443$DDDPb))))))
   (g$trace-let-syntax-macro$9690$DDDPb
     g$trace-let-syntax-macro$13231$DDDPb
     (g$trace-let/rec-syntax$9689$DDDPb 'let-syntax))
   (g$trace-letrec-syntax-macro$9691$DDDPb
     g$trace-letrec-syntax-macro$13232$DDDPb
     (g$trace-let/rec-syntax$9689$DDDPb 'letrec-syntax))
   (g$guard-macro$9692$DDDPb
     g$guard-macro$13233$DDDPb
     (case-lambda
       ((g$x$10453$DDDPb)
        (letrec* ((g$gen-clauses$10454$DDDPb
                    (case-lambda
                      ((g$con$10466$DDDPb
                         g$outerk$10467$DDDPb
                         g$clause*$10468$DDDPb)
                       (letrec* ((g$f$10469$DDDPb
                                   (case-lambda
                                     ((g$x$10497$DDDPb g$k$10498$DDDPb)
                                      ((case-lambda
                                         ((g$t$10499$DDDPb)
                                          ((case-lambda
                                             ((g$ls/false$10500$DDDPb)
                                              (if g$ls/false$10500$DDDPb
                                                (apply
                                                  (case-lambda
                                                    ((g$e$10501$DDDPb
                                                       g$p$10502$DDDPb)
                                                     ((case-lambda
                                                        ((g$t$10503$DDDPb)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$10503$DDDPb
                                                               g$e$10501$DDDPb))
                                                           (list
                                                             'if
                                                             g$t$10503$DDDPb
                                                             (list
                                                               g$p$10502$DDDPb
                                                               g$t$10503$DDDPb)
                                                             g$k$10498$DDDPb))))
                                                      (gensym))))
                                                  g$ls/false$10500$DDDPb)
                                                ((case-lambda
                                                   ((g$t$10504$DDDPb)
                                                    ((case-lambda
                                                       ((g$ls/false$10505$DDDPb)
                                                        (if g$ls/false$10505$DDDPb
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$10506$DDDPb)
                                                               ((case-lambda
                                                                  ((g$t$10507$DDDPb)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$10507$DDDPb
                                                                         g$e$10506$DDDPb))
                                                                     (list
                                                                       'if
                                                                       g$t$10507$DDDPb
                                                                       g$t$10507$DDDPb
                                                                       g$k$10498$DDDPb))))
                                                                (gensym))))
                                                            g$ls/false$10505$DDDPb)
                                                          ((case-lambda
                                                             ((g$t$10508$DDDPb)
                                                              ((case-lambda
                                                                 ((g$ls/false$10509$DDDPb)
                                                                  (if g$ls/false$10509$DDDPb
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$10510$DDDPb
                                                                           g$v$10511$DDDPb
                                                                           g$v*$10512$DDDPb)
                                                                         (list
                                                                           'if
                                                                           g$e$10510$DDDPb
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$10511$DDDPb
                                                                               g$v*$10512$DDDPb))
                                                                           g$k$10498$DDDPb)))
                                                                      g$ls/false$10509$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$t$10513$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10514$DDDPb)
                                                                            (if g$ls/false$10514$DDDPb
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$9835$DDDPb
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$10497$DDDPb)))
                                                                                g$ls/false$10514$DDDPb)
                                                                              (g$syntax-violation$9835$DDDPb
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$10513$DDDPb))))
                                                                         (g$syntax-dispatch$9717$DDDPb
                                                                           g$t$10513$DDDPb
                                                                           '_))))
                                                                     g$t$10508$DDDPb))))
                                                               (g$syntax-dispatch$9717$DDDPb
                                                                 g$t$10508$DDDPb
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$10504$DDDPb))))
                                                     (g$syntax-dispatch$9717$DDDPb
                                                       g$t$10504$DDDPb
                                                       '(any)))))
                                                 g$t$10499$DDDPb))))
                                           (g$syntax-dispatch$9717$DDDPb
                                             g$t$10499$DDDPb
                                             '(any #(scheme-id =>)
                                                   any)))))
                                       g$x$10497$DDDPb))))
                                 (g$f*$10470$DDDPb
                                   (case-lambda
                                     ((g$x*$10477$DDDPb)
                                      ((case-lambda
                                         ((g$t$10478$DDDPb)
                                          ((case-lambda
                                             ((g$ls/false$10479$DDDPb)
                                              (if g$ls/false$10479$DDDPb
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$10466$DDDPb)
                                                       '#t)))
                                                  g$ls/false$10479$DDDPb)
                                                ((case-lambda
                                                   ((g$t$10480$DDDPb)
                                                    ((case-lambda
                                                       ((g$ls/false$10481$DDDPb)
                                                        (if g$ls/false$10481$DDDPb
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$10482$DDDPb
                                                                 g$e*$10483$DDDPb)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$10482$DDDPb
                                                                     g$e*$10483$DDDPb))
                                                                 '#f)))
                                                            g$ls/false$10481$DDDPb)
                                                          ((case-lambda
                                                             ((g$t$10484$DDDPb)
                                                              ((case-lambda
                                                                 ((g$ls/false$10485$DDDPb)
                                                                  (if g$ls/false$10485$DDDPb
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$10486$DDDPb
                                                                           g$cls*$10487$DDDPb)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$10470$DDDPb
                                                                                g$cls*$10487$DDDPb)))
                                                                           (case-lambda
                                                                             ((g$e$10490$DDDPb
                                                                                g$g$10491$DDDPb)
                                                                              ((case-lambda
                                                                                 ((g$g$10492$DDDPb
                                                                                    g$e$10493$DDDPb)
                                                                                  (values
                                                                                    (g$f$10469$DDDPb
                                                                                      g$cls$10486$DDDPb
                                                                                      g$e$10493$DDDPb)
                                                                                    g$g$10492$DDDPb)))
                                                                               g$g$10491$DDDPb
                                                                               g$e$10490$DDDPb))))))
                                                                      g$ls/false$10485$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$t$10494$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10495$DDDPb)
                                                                            (if g$ls/false$10495$DDDPb
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$10496$DDDPb)
                                                                                   (g$syntax-violation$9835$DDDPb
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$10496$DDDPb)))
                                                                                g$ls/false$10495$DDDPb)
                                                                              (g$syntax-violation$9835$DDDPb
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$10494$DDDPb))))
                                                                         (g$syntax-dispatch$9717$DDDPb
                                                                           g$t$10494$DDDPb
                                                                           'any))))
                                                                     g$t$10484$DDDPb))))
                                                               (g$syntax-dispatch$9717$DDDPb
                                                                 g$t$10484$DDDPb
                                                                 '(any .
                                                                       any)))))
                                                           g$t$10480$DDDPb))))
                                                     (g$syntax-dispatch$9717$DDDPb
                                                       g$t$10480$DDDPb
                                                       '((#(scheme-id
                                                            else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$10478$DDDPb))))
                                           (g$syntax-dispatch$9717$DDDPb
                                             g$t$10478$DDDPb
                                             '()))))
                                       g$x*$10477$DDDPb)))))
                         (call-with-values
                           (case-lambda
                             (()
                              (g$f*$10470$DDDPb g$clause*$10468$DDDPb)))
                           (case-lambda
                             ((g$code$10473$DDDPb g$raisek$10474$DDDPb)
                              ((case-lambda
                                 ((g$raisek$10475$DDDPb
                                    g$code$10476$DDDPb)
                                  (if g$raisek$10475$DDDPb
                                    (list
                                      g$outerk$10467$DDDPb
                                      g$code$10476$DDDPb)
                                    g$code$10476$DDDPb)))
                               g$raisek$10474$DDDPb
                               g$code$10473$DDDPb)))))))))
          ((case-lambda
             ((g$t$10455$DDDPb)
              ((case-lambda
                 ((g$ls/false$10456$DDDPb)
                  (if (if g$ls/false$10456$DDDPb
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$10457$DDDPb
                                 g$clause*$10458$DDDPb
                                 g$b$10459$DDDPb
                                 g$b*$10460$DDDPb)
                               (g$id?$9354$DDDPb g$con$10457$DDDPb)))
                            g$ls/false$10456$DDDPb))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$10461$DDDPb
                           g$clause*$10462$DDDPb
                           g$b$10463$DDDPb
                           g$b*$10464$DDDPb)
                         ((case-lambda
                            ((g$outerk$10465$DDDPb)
                             (g$bless$9680$DDDPb
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$10465$DDDPb)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$10461$DDDPb)
                                           (g$gen-clauses$10454$DDDPb
                                             g$con$10461$DDDPb
                                             g$outerk$10465$DDDPb
                                             g$clause*$10462$DDDPb))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$10463$DDDPb
                                                 g$b*$10464$DDDPb))))))))))))
                          (gensym))))
                      g$ls/false$10456$DDDPb)
                    (g$syntax-violation$9835$DDDPb
                      '#f
                      '"invalid syntax"
                      g$t$10455$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$10455$DDDPb
                 '(_ (any . each-any) any . each-any)))))
           g$x$10453$DDDPb)))))
   (g$define-enumeration-macro$9693$DDDPb
     g$define-enumeration-macro$13234$DDDPb
     (case-lambda
       ((g$stx$10515$DDDPb)
        (letrec* ((g$set?$10516$DDDPb
                    (case-lambda
                      ((g$x$10529$DDDPb)
                       ((case-lambda
                          ((g$t$10530$DDDPb)
                           (if g$t$10530$DDDPb
                             g$t$10530$DDDPb
                             (begin
                               '#f
                               (if (not (g$memq$5745$DDDPb
                                          (car g$x$10529$DDDPb)
                                          (cdr g$x$10529$DDDPb)))
                                 (begin
                                   '#f
                                   (g$set?$10516$DDDPb
                                     (cdr g$x$10529$DDDPb)))
                                 '#f)))))
                        (null? g$x$10529$DDDPb)))))
                  (g$remove-dups$10517$DDDPb
                    (case-lambda
                      ((g$ls$10528$DDDPb)
                       (if (null? g$ls$10528$DDDPb)
                         '()
                         (cons
                           (car g$ls$10528$DDDPb)
                           (g$remove-dups$10517$DDDPb
                             (g$remq$5760$DDDPb
                               (car g$ls$10528$DDDPb)
                               (cdr g$ls$10528$DDDPb)))))))))
          ((case-lambda
             ((g$t$10518$DDDPb)
              ((case-lambda
                 ((g$ls/false$10519$DDDPb)
                  (if (if g$ls/false$10519$DDDPb
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$10520$DDDPb
                                 g$id*$10521$DDDPb
                                 g$maker$10522$DDDPb)
                               (if (g$id?$9354$DDDPb g$name$10520$DDDPb)
                                 (if (g$id?$9354$DDDPb
                                       g$maker$10522$DDDPb)
                                   (begin
                                     '#f
                                     (g$for-all$5751$DDDPb
                                       g$id?$9354$DDDPb
                                       g$id*$10521$DDDPb))
                                   '#f)
                                 '#f)))
                            g$ls/false$10519$DDDPb))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$10523$DDDPb
                           g$id*$10524$DDDPb
                           g$maker$10525$DDDPb)
                         ((case-lambda
                            ((g$name*$10526$DDDPb g$mk$10527$DDDPb)
                             (g$bless$9680$DDDPb
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$10527$DDDPb
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list
                                         'quote
                                         g$name*$10526$DDDPb))))
                                 (list
                                   'define-syntax
                                   g$name$10523$DDDPb
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list
                                               'quote
                                               g$name*$10526$DDDPb))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list
                                                 'quote
                                                 g$name$10523$DDDPb)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$10525$DDDPb
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$10525$DDDPb)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$10526$DDDPb))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$10525$DDDPb)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$10527$DDDPb
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$10517$DDDPb
                            (g$syntax->datum$9838$DDDPb
                              g$id*$10524$DDDPb))
                          (gensym))))
                      g$ls/false$10519$DDDPb)
                    (g$syntax-violation$9835$DDDPb
                      '#f
                      '"invalid syntax"
                      g$t$10518$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$10518$DDDPb
                 '(_ any each-any any)))))
           g$stx$10515$DDDPb)))))
   (g$time-macro$9694$DDDPb
     g$time-macro$13235$DDDPb
     (case-lambda
       ((g$stx$10531$DDDPb)
        ((case-lambda
           ((g$t$10532$DDDPb)
            ((case-lambda
               ((g$ls/false$10533$DDDPb)
                (if g$ls/false$10533$DDDPb
                  (apply
                    (case-lambda
                      ((g$expr$10534$DDDPb)
                       ((case-lambda
                          ((g$str$10535$DDDPb)
                           (g$bless$9680$DDDPb
                             (list
                               'time-it
                               g$str$10535$DDDPb
                               (list 'lambda '() g$expr$10534$DDDPb)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$7858$DDDPb)))
                          (case-lambda
                            ((g$p$10538$DDDPb g$e$10539$DDDPb)
                             ((case-lambda
                                ((g$e$10540$DDDPb g$p$10541$DDDPb)
                                 (begin
                                   (write
                                     (g$syntax->datum$9838$DDDPb
                                       g$expr$10534$DDDPb)
                                     g$p$10541$DDDPb)
                                   (g$e$10540$DDDPb))))
                              g$e$10539$DDDPb
                              g$p$10538$DDDPb)))))))
                    g$ls/false$10533$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10532$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$10532$DDDPb '(_ any)))))
         g$stx$10531$DDDPb))))
   (g$delay-macro$9695$DDDPb
     g$delay-macro$13236$DDDPb
     (case-lambda
       ((g$stx$10542$DDDPb)
        ((case-lambda
           ((g$t$10543$DDDPb)
            ((case-lambda
               ((g$ls/false$10544$DDDPb)
                (if g$ls/false$10544$DDDPb
                  (apply
                    (case-lambda
                      ((g$expr$10545$DDDPb)
                       (g$bless$9680$DDDPb
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$10545$DDDPb)))))
                    g$ls/false$10544$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10543$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$10543$DDDPb '(_ any)))))
         g$stx$10542$DDDPb))))
   (g$assert-macro$9696$DDDPb
     g$assert-macro$13237$DDDPb
     (case-lambda
       ((g$stx$10546$DDDPb)
        ((case-lambda
           ((g$t$10547$DDDPb)
            ((case-lambda
               ((g$ls/false$10548$DDDPb)
                (if g$ls/false$10548$DDDPb
                  (apply
                    (case-lambda
                      ((g$expr$10549$DDDPb)
                       ((case-lambda
                          ((g$pos$10550$DDDPb)
                           (g$bless$9680$DDDPb
                             (list
                               'unless
                               g$expr$10549$DDDPb
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$10549$DDDPb)
                                 (list 'quote g$pos$10550$DDDPb))))))
                        ((case-lambda
                           ((g$t$10551$DDDPb)
                            (if g$t$10551$DDDPb
                              g$t$10551$DDDPb
                              (begin
                                '#f
                                (g$expression-position$9830$DDDPb
                                  g$expr$10549$DDDPb)))))
                         (g$expression-position$9830$DDDPb
                           g$stx$10546$DDDPb)))))
                    g$ls/false$10548$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10547$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$10547$DDDPb '(_ any)))))
         g$stx$10546$DDDPb))))
   (g$endianness-macro$9697$DDDPb
     g$endianness-macro$13238$DDDPb
     (case-lambda
       ((g$stx$10552$DDDPb)
        ((case-lambda
           ((g$t$10553$DDDPb)
            ((case-lambda
               ((g$ls/false$10554$DDDPb)
                (if g$ls/false$10554$DDDPb
                  (apply
                    (case-lambda
                      ((g$e$10555$DDDPb)
                       ((case-lambda
                          ((g$t$10556$DDDPb)
                           (if (eqv? g$t$10556$DDDPb 'little)
                             (g$bless$9680$DDDPb ''little)
                             (if (eqv? g$t$10556$DDDPb 'big)
                               (g$bless$9680$DDDPb ''big)
                               (g$syntax-violation$9835$DDDPb
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$10552$DDDPb)))))
                        (g$syntax->datum$9838$DDDPb g$e$10555$DDDPb))))
                    g$ls/false$10554$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10553$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$10553$DDDPb '(_ any)))))
         g$stx$10552$DDDPb))))
   (g$identifier-syntax-macro$9698$DDDPb
     g$identifier-syntax-macro$13239$DDDPb
     (case-lambda
       ((g$stx$10557$DDDPb)
        ((case-lambda
           ((g$t$10558$DDDPb)
            ((case-lambda
               ((g$ls/false$10559$DDDPb)
                (if g$ls/false$10559$DDDPb
                  (apply
                    (case-lambda
                      ((g$expr$10560$DDDPb)
                       (g$bless$9680$DDDPb
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$10560$DDDPb))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$10560$DDDPb)
                                   '(#'(e* ...))))))))))
                    g$ls/false$10559$DDDPb)
                  ((case-lambda
                     ((g$t$10561$DDDPb)
                      ((case-lambda
                         ((g$ls/false$10562$DDDPb)
                          (if (if g$ls/false$10562$DDDPb
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$10563$DDDPb
                                         g$expr1$10564$DDDPb
                                         g$id2$10565$DDDPb
                                         g$expr2$10566$DDDPb
                                         g$expr3$10567$DDDPb)
                                       (if (g$id?$9354$DDDPb
                                             g$id1$10563$DDDPb)
                                         (if (g$id?$9354$DDDPb
                                               g$id2$10565$DDDPb)
                                           (begin
                                             '#f
                                             (g$id?$9354$DDDPb
                                               g$expr2$10566$DDDPb))
                                           '#f)
                                         '#f)))
                                    g$ls/false$10562$DDDPb))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$10568$DDDPb
                                   g$expr1$10569$DDDPb
                                   g$id2$10570$DDDPb
                                   g$expr2$10571$DDDPb
                                   g$expr3$10572$DDDPb)
                                 (g$bless$9680$DDDPb
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             g$expr1$10569$DDDPb))
                                         (list
                                           (list
                                             'set!
                                             'id
                                             g$expr2$10571$DDDPb)
                                           (list
                                             'syntax
                                             g$expr3$10572$DDDPb))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$10569$DDDPb
                                               '(e* ...))))))))))
                              g$ls/false$10562$DDDPb)
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"invalid syntax"
                              g$t$10561$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$10561$DDDPb
                         '(_ (any any)
                             ((#(scheme-id set!) any any) any))))))
                   g$t$10558$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$10558$DDDPb '(_ any)))))
         g$stx$10557$DDDPb))))
   (g$do-macro$9699$DDDPb
     g$do-macro$13240$DDDPb
     (case-lambda
       ((g$stx$10573$DDDPb)
        (letrec* ((g$bind$10574$DDDPb
                    (case-lambda
                      ((g$x$10586$DDDPb)
                       ((case-lambda
                          ((g$t$10587$DDDPb)
                           ((case-lambda
                              ((g$ls/false$10588$DDDPb)
                               (if g$ls/false$10588$DDDPb
                                 (apply
                                   (case-lambda
                                     ((g$x$10589$DDDPb
                                        g$init$10590$DDDPb)
                                      (list
                                        g$x$10589$DDDPb
                                        g$init$10590$DDDPb
                                        g$x$10589$DDDPb)))
                                   g$ls/false$10588$DDDPb)
                                 ((case-lambda
                                    ((g$t$10591$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$10592$DDDPb)
                                         (if g$ls/false$10592$DDDPb
                                           (apply
                                             (case-lambda
                                               ((g$x$10593$DDDPb
                                                  g$init$10594$DDDPb
                                                  g$step$10595$DDDPb)
                                                (list
                                                  g$x$10593$DDDPb
                                                  g$init$10594$DDDPb
                                                  g$step$10595$DDDPb)))
                                             g$ls/false$10592$DDDPb)
                                           ((case-lambda
                                              ((g$t$10596$DDDPb)
                                               ((case-lambda
                                                  ((g$ls/false$10597$DDDPb)
                                                   (if g$ls/false$10597$DDDPb
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$9835$DDDPb
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$10573$DDDPb)))
                                                       g$ls/false$10597$DDDPb)
                                                     (g$syntax-violation$9835$DDDPb
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$10596$DDDPb))))
                                                (g$syntax-dispatch$9717$DDDPb
                                                  g$t$10596$DDDPb
                                                  '_))))
                                            g$t$10591$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$10591$DDDPb
                                        '(any any any)))))
                                  g$t$10587$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$10587$DDDPb
                              '(any any)))))
                        g$x$10586$DDDPb)))))
          ((case-lambda
             ((g$t$10575$DDDPb)
              ((case-lambda
                 ((g$ls/false$10576$DDDPb)
                  (if g$ls/false$10576$DDDPb
                    (apply
                      (case-lambda
                        ((g$binding*$10577$DDDPb
                           g$test$10578$DDDPb
                           g$expr*$10579$DDDPb
                           g$command*$10580$DDDPb)
                         ((case-lambda
                            ((g$t$10581$DDDPb)
                             ((case-lambda
                                ((g$ls/false$10582$DDDPb)
                                 (if g$ls/false$10582$DDDPb
                                   (apply
                                     (case-lambda
                                       ((g$x*$10583$DDDPb
                                          g$init*$10584$DDDPb
                                          g$step*$10585$DDDPb)
                                        (if (g$valid-bound-ids?$9359$DDDPb
                                              g$x*$10583$DDDPb)
                                          (g$bless$9680$DDDPb
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$10583$DDDPb
                                                    (list
                                                      'if
                                                      g$test$10578$DDDPb
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$10579$DDDPb))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$10580$DDDPb
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$10585$DDDPb))))))))
                                              (cons
                                                'loop
                                                g$init*$10584$DDDPb)))
                                          (g$syntax-violation$9835$DDDPb
                                            '#f
                                            '"invalid bindings"
                                            g$stx$10573$DDDPb))))
                                     g$ls/false$10582$DDDPb)
                                   (g$syntax-violation$9835$DDDPb
                                     '#f
                                     '"invalid syntax"
                                     g$t$10581$DDDPb))))
                              (g$syntax-dispatch$9717$DDDPb
                                g$t$10581$DDDPb
                                '#(each (any any any))))))
                          (g$map$5753$DDDPb
                            g$bind$10574$DDDPb
                            g$binding*$10577$DDDPb))))
                      g$ls/false$10576$DDDPb)
                    (g$syntax-violation$9835$DDDPb
                      '#f
                      '"invalid syntax"
                      g$t$10575$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$10575$DDDPb
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$10573$DDDPb)))))
   (g$let*-macro$9700$DDDPb
     g$let*-macro$13241$DDDPb
     (case-lambda
       ((g$stx$10598$DDDPb)
        ((case-lambda
           ((g$t$10599$DDDPb)
            ((case-lambda
               ((g$ls/false$10600$DDDPb)
                (if (if g$ls/false$10600$DDDPb
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$10601$DDDPb
                               g$rhs*$10602$DDDPb
                               g$b$10603$DDDPb
                               g$b*$10604$DDDPb)
                             (g$for-all$5751$DDDPb
                               g$id?$9354$DDDPb
                               g$lhs*$10601$DDDPb)))
                          g$ls/false$10600$DDDPb))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$10605$DDDPb
                         g$rhs*$10606$DDDPb
                         g$b$10607$DDDPb
                         g$b*$10608$DDDPb)
                       (g$bless$9680$DDDPb
                         ((letrec ((g$f$10609$DDDPb
                                     (case-lambda
                                       ((g$x*$10610$DDDPb)
                                        (if (null? g$x*$10610$DDDPb)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$10607$DDDPb
                                                g$b*$10608$DDDPb)))
                                          (if (null?
                                                (cdr g$x*$10610$DDDPb))
                                            (cons
                                              'let
                                              (cons
                                                (list
                                                  (car g$x*$10610$DDDPb))
                                                (cons
                                                  g$b$10607$DDDPb
                                                  g$b*$10608$DDDPb)))
                                            (list
                                              'let
                                              (list
                                                (car g$x*$10610$DDDPb))
                                              (g$f$10609$DDDPb
                                                (cdr g$x*$10610$DDDPb)))))))))
                            g$f$10609$DDDPb)
                          (g$map$5753$DDDPb
                            list
                            g$lhs*$10605$DDDPb
                            g$rhs*$10606$DDDPb)))))
                    g$ls/false$10600$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10599$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10599$DDDPb
               '(_ #(each (any any)) any . each-any)))))
         g$stx$10598$DDDPb))))
   (g$or-macro$9701$DDDPb
     g$or-macro$13242$DDDPb
     (case-lambda
       ((g$stx$10611$DDDPb)
        ((case-lambda
           ((g$t$10612$DDDPb)
            ((case-lambda
               ((g$ls/false$10613$DDDPb)
                (if g$ls/false$10613$DDDPb
                  (apply (case-lambda (() '#f)) g$ls/false$10613$DDDPb)
                  ((case-lambda
                     ((g$t$10614$DDDPb)
                      ((case-lambda
                         ((g$ls/false$10615$DDDPb)
                          (if g$ls/false$10615$DDDPb
                            (apply
                              (case-lambda
                                ((g$e$10616$DDDPb g$e*$10617$DDDPb)
                                 (g$bless$9680$DDDPb
                                   ((letrec ((g$f$10618$DDDPb
                                               (case-lambda
                                                 ((g$e$10619$DDDPb
                                                    g$e*$10620$DDDPb)
                                                  (if (null?
                                                        g$e*$10620$DDDPb)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$10619$DDDPb)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$10619$DDDPb))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$10618$DDDPb
                                                          (car g$e*$10620$DDDPb)
                                                          (cdr g$e*$10620$DDDPb)))))))))
                                      g$f$10618$DDDPb)
                                    g$e$10616$DDDPb
                                    g$e*$10617$DDDPb))))
                              g$ls/false$10615$DDDPb)
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"invalid syntax"
                              g$t$10614$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$10614$DDDPb
                         '(_ any . each-any)))))
                   g$t$10612$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$10612$DDDPb '(_)))))
         g$stx$10611$DDDPb))))
   (g$and-macro$9702$DDDPb
     g$and-macro$13243$DDDPb
     (case-lambda
       ((g$stx$10621$DDDPb)
        ((case-lambda
           ((g$t$10622$DDDPb)
            ((case-lambda
               ((g$ls/false$10623$DDDPb)
                (if g$ls/false$10623$DDDPb
                  (apply (case-lambda (() '#t)) g$ls/false$10623$DDDPb)
                  ((case-lambda
                     ((g$t$10624$DDDPb)
                      ((case-lambda
                         ((g$ls/false$10625$DDDPb)
                          (if g$ls/false$10625$DDDPb
                            (apply
                              (case-lambda
                                ((g$e$10626$DDDPb g$e*$10627$DDDPb)
                                 (g$bless$9680$DDDPb
                                   ((letrec ((g$f$10628$DDDPb
                                               (case-lambda
                                                 ((g$e$10629$DDDPb
                                                    g$e*$10630$DDDPb)
                                                  (if (null?
                                                        g$e*$10630$DDDPb)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$10629$DDDPb)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$10629$DDDPb
                                                        (cons
                                                          (g$f$10628$DDDPb
                                                            (car g$e*$10630$DDDPb)
                                                            (cdr g$e*$10630$DDDPb))
                                                          '(#f)))))))))
                                      g$f$10628$DDDPb)
                                    g$e$10626$DDDPb
                                    g$e*$10627$DDDPb))))
                              g$ls/false$10625$DDDPb)
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"invalid syntax"
                              g$t$10624$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$10624$DDDPb
                         '(_ any . each-any)))))
                   g$t$10622$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$10622$DDDPb '(_)))))
         g$stx$10621$DDDPb))))
   (g$cond-macro$9703$DDDPb
     g$cond-macro$13244$DDDPb
     (case-lambda
       ((g$stx$10631$DDDPb)
        ((case-lambda
           ((g$t$10632$DDDPb)
            ((case-lambda
               ((g$ls/false$10633$DDDPb)
                (if g$ls/false$10633$DDDPb
                  (apply
                    (case-lambda
                      ((g$cls$10634$DDDPb g$cls*$10635$DDDPb)
                       (g$bless$9680$DDDPb
                         ((letrec ((g$f$10636$DDDPb
                                     (case-lambda
                                       ((g$cls$10637$DDDPb
                                          g$cls*$10638$DDDPb)
                                        (if (null? g$cls*$10638$DDDPb)
                                          ((case-lambda
                                             ((g$t$10639$DDDPb)
                                              ((case-lambda
                                                 ((g$ls/false$10640$DDDPb)
                                                  (if g$ls/false$10640$DDDPb
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$10641$DDDPb
                                                           g$e*$10642$DDDPb)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$10641$DDDPb
                                                             g$e*$10642$DDDPb))))
                                                      g$ls/false$10640$DDDPb)
                                                    ((case-lambda
                                                       ((g$t$10643$DDDPb)
                                                        ((case-lambda
                                                           ((g$ls/false$10644$DDDPb)
                                                            (if g$ls/false$10644$DDDPb
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$10645$DDDPb
                                                                     g$p$10646$DDDPb)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$10645$DDDPb))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$10646$DDDPb
                                                                         '(t))))))
                                                                g$ls/false$10644$DDDPb)
                                                              ((case-lambda
                                                                 ((g$t$10647$DDDPb)
                                                                  ((case-lambda
                                                                     ((g$ls/false$10648$DDDPb)
                                                                      (if g$ls/false$10648$DDDPb
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$10649$DDDPb)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$10649$DDDPb
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$10648$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$t$10650$DDDPb)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10651$DDDPb)
                                                                                (if g$ls/false$10651$DDDPb
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$10652$DDDPb
                                                                                         g$e*$10653$DDDPb)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$10652$DDDPb
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$10653$DDDPb))))
                                                                                    g$ls/false$10651$DDDPb)
                                                                                  ((case-lambda
                                                                                     ((g$t$10654$DDDPb)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10655$DDDPb)
                                                                                          (if g$ls/false$10655$DDDPb
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$9835$DDDPb
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$10631$DDDPb)))
                                                                                              g$ls/false$10655$DDDPb)
                                                                                            (g$syntax-violation$9835$DDDPb
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10654$DDDPb))))
                                                                                       (g$syntax-dispatch$9717$DDDPb
                                                                                         g$t$10654$DDDPb
                                                                                         '_))))
                                                                                   g$t$10650$DDDPb))))
                                                                             (g$syntax-dispatch$9717$DDDPb
                                                                               g$t$10650$DDDPb
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$10647$DDDPb))))
                                                                   (g$syntax-dispatch$9717$DDDPb
                                                                     g$t$10647$DDDPb
                                                                     '(any)))))
                                                               g$t$10643$DDDPb))))
                                                         (g$syntax-dispatch$9717$DDDPb
                                                           g$t$10643$DDDPb
                                                           '(any #(scheme-id
                                                                   =>)
                                                                 any)))))
                                                     g$t$10639$DDDPb))))
                                               (g$syntax-dispatch$9717$DDDPb
                                                 g$t$10639$DDDPb
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$10637$DDDPb)
                                          ((case-lambda
                                             ((g$t$10656$DDDPb)
                                              ((case-lambda
                                                 ((g$ls/false$10657$DDDPb)
                                                  (if g$ls/false$10657$DDDPb
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$10658$DDDPb
                                                           g$e*$10659$DDDPb)
                                                         (g$syntax-violation$9835$DDDPb
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$10631$DDDPb)))
                                                      g$ls/false$10657$DDDPb)
                                                    ((case-lambda
                                                       ((g$t$10660$DDDPb)
                                                        ((case-lambda
                                                           ((g$ls/false$10661$DDDPb)
                                                            (if g$ls/false$10661$DDDPb
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$10662$DDDPb
                                                                     g$p$10663$DDDPb)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$10662$DDDPb))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$10663$DDDPb
                                                                         '(t))
                                                                       (g$f$10636$DDDPb
                                                                         (car g$cls*$10638$DDDPb)
                                                                         (cdr g$cls*$10638$DDDPb))))))
                                                                g$ls/false$10661$DDDPb)
                                                              ((case-lambda
                                                                 ((g$t$10664$DDDPb)
                                                                  ((case-lambda
                                                                     ((g$ls/false$10665$DDDPb)
                                                                      (if g$ls/false$10665$DDDPb
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$10666$DDDPb)
                                                                             (list
                                                                               'or
                                                                               g$e$10666$DDDPb
                                                                               (g$f$10636$DDDPb
                                                                                 (car g$cls*$10638$DDDPb)
                                                                                 (cdr g$cls*$10638$DDDPb)))))
                                                                          g$ls/false$10665$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$t$10667$DDDPb)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10668$DDDPb)
                                                                                (if g$ls/false$10668$DDDPb
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$10669$DDDPb
                                                                                         g$e*$10670$DDDPb)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$10669$DDDPb
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$10670$DDDPb)
                                                                                         (g$f$10636$DDDPb
                                                                                           (car g$cls*$10638$DDDPb)
                                                                                           (cdr g$cls*$10638$DDDPb)))))
                                                                                    g$ls/false$10668$DDDPb)
                                                                                  ((case-lambda
                                                                                     ((g$t$10671$DDDPb)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10672$DDDPb)
                                                                                          (if g$ls/false$10672$DDDPb
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$9835$DDDPb
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$10631$DDDPb)))
                                                                                              g$ls/false$10672$DDDPb)
                                                                                            (g$syntax-violation$9835$DDDPb
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10671$DDDPb))))
                                                                                       (g$syntax-dispatch$9717$DDDPb
                                                                                         g$t$10671$DDDPb
                                                                                         '_))))
                                                                                   g$t$10667$DDDPb))))
                                                                             (g$syntax-dispatch$9717$DDDPb
                                                                               g$t$10667$DDDPb
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$10664$DDDPb))))
                                                                   (g$syntax-dispatch$9717$DDDPb
                                                                     g$t$10664$DDDPb
                                                                     '(any)))))
                                                               g$t$10660$DDDPb))))
                                                         (g$syntax-dispatch$9717$DDDPb
                                                           g$t$10660$DDDPb
                                                           '(any #(scheme-id
                                                                   =>)
                                                                 any)))))
                                                     g$t$10656$DDDPb))))
                                               (g$syntax-dispatch$9717$DDDPb
                                                 g$t$10656$DDDPb
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$10637$DDDPb))))))
                            g$f$10636$DDDPb)
                          g$cls$10634$DDDPb
                          g$cls*$10635$DDDPb))))
                    g$ls/false$10633$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10632$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10632$DDDPb
               '(_ any . each-any)))))
         g$stx$10631$DDDPb))))
   (g$do-include$9704$DDDPb
     g$do-include$13245$DDDPb
     (case-lambda
       ((g$stx$10673$DDDPb g$id$10674$DDDPb g$filename$10675$DDDPb)
        ((case-lambda
           ((g$filename$10676$DDDPb)
            (begin
              (if (not (if (string? g$filename$10676$DDDPb)
                         (begin '#f (g$id?$9354$DDDPb g$id$10674$DDDPb))
                         '#f))
                (g$syntax-violation$9835$DDDPb
                  '#f
                  '"invalid syntax"
                  g$stx$10673$DDDPb)
                (void))
              (cons
                (g$bless$9680$DDDPb 'begin)
                (g$with-input-from-file$7917$DDDPb
                  g$filename$10676$DDDPb
                  (case-lambda
                    (()
                     ((letrec ((g$f$10677$DDDPb
                                 (case-lambda
                                   ((g$ls$10678$DDDPb)
                                    ((case-lambda
                                       ((g$x$10679$DDDPb)
                                        (if (eof-object?
                                              g$x$10679$DDDPb)
                                          (g$reverse$6431$DDDPb
                                            g$ls$10678$DDDPb)
                                          (g$f$10677$DDDPb
                                            (cons
                                              (g$datum->stx$9337$DDDPb
                                                g$id$10674$DDDPb
                                                g$x$10679$DDDPb)
                                              g$ls$10678$DDDPb)))))
                                     (read-annotated))))))
                        g$f$10677$DDDPb)
                      '()))))))))
         (g$stx->datum$9365$DDDPb g$filename$10675$DDDPb)))))
   (g$include-macro$9705$DDDPb
     g$include-macro$13246$DDDPb
     (case-lambda
       ((g$e$10680$DDDPb)
        ((case-lambda
           ((g$t$10681$DDDPb)
            ((case-lambda
               ((g$ls/false$10682$DDDPb)
                (if g$ls/false$10682$DDDPb
                  (apply
                    (case-lambda
                      ((g$id$10683$DDDPb g$filename$10684$DDDPb)
                       (g$do-include$9704$DDDPb
                         g$e$10680$DDDPb
                         g$id$10683$DDDPb
                         g$filename$10684$DDDPb)))
                    g$ls/false$10682$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10681$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10681$DDDPb
               '(any any)))))
         g$e$10680$DDDPb))))
   (g$include-into-macro$9706$DDDPb
     g$include-into-macro$13247$DDDPb
     (case-lambda
       ((g$e$10685$DDDPb)
        ((case-lambda
           ((g$t$10686$DDDPb)
            ((case-lambda
               ((g$ls/false$10687$DDDPb)
                (if g$ls/false$10687$DDDPb
                  (apply
                    (case-lambda
                      ((g$id$10688$DDDPb g$filename$10689$DDDPb)
                       (g$do-include$9704$DDDPb
                         g$e$10685$DDDPb
                         g$id$10688$DDDPb
                         g$filename$10689$DDDPb)))
                    g$ls/false$10687$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10686$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10686$DDDPb
               '(_ any any)))))
         g$e$10685$DDDPb))))
   (g$syntax-rules-macro$9707$DDDPb
     g$syntax-rules-macro$13248$DDDPb
     (case-lambda
       ((g$e$10690$DDDPb)
        ((case-lambda
           ((g$t$10691$DDDPb)
            ((case-lambda
               ((g$ls/false$10692$DDDPb)
                (if g$ls/false$10692$DDDPb
                  (apply
                    (case-lambda
                      ((g$lits$10693$DDDPb
                         g$pat*$10694$DDDPb
                         g$tmp*$10695$DDDPb)
                       (begin
                         (g$verify-literals$9720$DDDPb
                           g$lits$10693$DDDPb
                           g$e$10690$DDDPb)
                         (g$bless$9680$DDDPb
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$10693$DDDPb
                                   (g$map$5753$DDDPb
                                     (case-lambda
                                       ((g$pat$10696$DDDPb
                                          g$tmp$10697$DDDPb)
                                        ((case-lambda
                                           ((g$t$10698$DDDPb)
                                            ((case-lambda
                                               ((g$ls/false$10699$DDDPb)
                                                (if g$ls/false$10699$DDDPb
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$10700$DDDPb)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$10700$DDDPb)
                                                         (list
                                                           'syntax
                                                           g$tmp$10697$DDDPb))))
                                                    g$ls/false$10699$DDDPb)
                                                  ((case-lambda
                                                     ((g$t$10701$DDDPb)
                                                      ((case-lambda
                                                         ((g$ls/false$10702$DDDPb)
                                                          (if g$ls/false$10702$DDDPb
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$9835$DDDPb
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$10690$DDDPb
                                                                   g$pat$10696$DDDPb)))
                                                              g$ls/false$10702$DDDPb)
                                                            (g$syntax-violation$9835$DDDPb
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$10701$DDDPb))))
                                                       (g$syntax-dispatch$9717$DDDPb
                                                         g$t$10701$DDDPb
                                                         '_))))
                                                   g$t$10698$DDDPb))))
                                             (g$syntax-dispatch$9717$DDDPb
                                               g$t$10698$DDDPb
                                               '(_ . any)))))
                                         g$pat$10696$DDDPb)))
                                     g$pat*$10694$DDDPb
                                     g$tmp*$10695$DDDPb)))))))))
                    g$ls/false$10692$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$10691$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$10691$DDDPb
               '(_ each-any . #(each (any any)))))))
         g$e$10690$DDDPb))))
   (g$quasiquote-macro$9708$DDDPb
     g$quasiquote-macro$13249$DDDPb
     ((case-lambda
        (()
         (letrec* ((g$datum$10703$DDDPb
                     (case-lambda
                       ((g$x$10847$DDDPb)
                        (list
                          (g$scheme-stx$9660$DDDPb 'quote)
                          (g$mkstx$9342$DDDPb
                            g$x$10847$DDDPb
                            '()
                            '()
                            '())))))
                   (g$quasicons*$10732$DDDPb
                     (case-lambda
                       ((g$x$10843$DDDPb g$y$10844$DDDPb)
                        ((letrec ((g$f$10845$DDDPb
                                    (case-lambda
                                      ((g$x$10846$DDDPb)
                                       (if (null? g$x$10846$DDDPb)
                                         g$y$10844$DDDPb
                                         (g$quasicons$10733$DDDPb
                                           (car g$x$10846$DDDPb)
                                           (g$f$10845$DDDPb
                                             (cdr g$x$10846$DDDPb))))))))
                           g$f$10845$DDDPb)
                         g$x$10843$DDDPb))))
                   (g$quasicons$10733$DDDPb
                     (case-lambda
                       ((g$x$10824$DDDPb g$y$10825$DDDPb)
                        ((case-lambda
                           ((g$t$10826$DDDPb)
                            ((case-lambda
                               ((g$ls/false$10827$DDDPb)
                                (if g$ls/false$10827$DDDPb
                                  (apply
                                    (case-lambda
                                      ((g$dy$10828$DDDPb)
                                       ((case-lambda
                                          ((g$t$10829$DDDPb)
                                           ((case-lambda
                                              ((g$ls/false$10830$DDDPb)
                                               (if g$ls/false$10830$DDDPb
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$10831$DDDPb)
                                                      (list
                                                        (g$scheme-stx$9660$DDDPb
                                                          'quote)
                                                        (cons
                                                          g$dx$10831$DDDPb
                                                          g$dy$10828$DDDPb))))
                                                   g$ls/false$10830$DDDPb)
                                                 ((case-lambda
                                                    ((g$t$10832$DDDPb)
                                                     ((case-lambda
                                                        ((g$ls/false$10833$DDDPb)
                                                         (if g$ls/false$10833$DDDPb
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$10834$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10835$DDDPb)
                                                                        (if g$ls/false$10835$DDDPb
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$9660$DDDPb
                                                                                   'list)
                                                                                 g$x$10824$DDDPb)))
                                                                            g$ls/false$10835$DDDPb)
                                                                          ((case-lambda
                                                                             ((g$t$10836$DDDPb)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10837$DDDPb)
                                                                                  (if g$ls/false$10837$DDDPb
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$9660$DDDPb
                                                                                             'cons)
                                                                                           g$x$10824$DDDPb
                                                                                           g$y$10825$DDDPb)))
                                                                                      g$ls/false$10837$DDDPb)
                                                                                    (g$syntax-violation$9835$DDDPb
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$10836$DDDPb))))
                                                                               (g$syntax-dispatch$9717$DDDPb
                                                                                 g$t$10836$DDDPb
                                                                                 '_))))
                                                                           g$t$10834$DDDPb))))
                                                                     (g$syntax-dispatch$9717$DDDPb
                                                                       g$t$10834$DDDPb
                                                                       '()))))
                                                                 g$dy$10828$DDDPb)))
                                                             g$ls/false$10833$DDDPb)
                                                           (g$syntax-violation$9835$DDDPb
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$10832$DDDPb))))
                                                      (g$syntax-dispatch$9717$DDDPb
                                                        g$t$10832$DDDPb
                                                        '_))))
                                                  g$t$10829$DDDPb))))
                                            (g$syntax-dispatch$9717$DDDPb
                                              g$t$10829$DDDPb
                                              '(#(scheme-id quote)
                                                any)))))
                                        g$x$10824$DDDPb)))
                                    g$ls/false$10827$DDDPb)
                                  ((case-lambda
                                     ((g$t$10838$DDDPb)
                                      ((case-lambda
                                         ((g$ls/false$10839$DDDPb)
                                          (if g$ls/false$10839$DDDPb
                                            (apply
                                              (case-lambda
                                                ((g$stuff$10840$DDDPb)
                                                 (g$cons*$5755$DDDPb
                                                   (g$scheme-stx$9660$DDDPb
                                                     'list)
                                                   g$x$10824$DDDPb
                                                   g$stuff$10840$DDDPb)))
                                              g$ls/false$10839$DDDPb)
                                            ((case-lambda
                                               ((g$t$10841$DDDPb)
                                                ((case-lambda
                                                   ((g$ls/false$10842$DDDPb)
                                                    (if g$ls/false$10842$DDDPb
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$9660$DDDPb
                                                               'cons)
                                                             g$x$10824$DDDPb
                                                             g$y$10825$DDDPb)))
                                                        g$ls/false$10842$DDDPb)
                                                      (g$syntax-violation$9835$DDDPb
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$10841$DDDPb))))
                                                 (g$syntax-dispatch$9717$DDDPb
                                                   g$t$10841$DDDPb
                                                   '_))))
                                             g$t$10838$DDDPb))))
                                       (g$syntax-dispatch$9717$DDDPb
                                         g$t$10838$DDDPb
                                         '(#(scheme-id list)
                                           .
                                           each-any)))))
                                   g$t$10826$DDDPb))))
                             (g$syntax-dispatch$9717$DDDPb
                               g$t$10826$DDDPb
                               '(#(scheme-id quote) any)))))
                         g$y$10825$DDDPb))))
                   (g$quasiappend$10734$DDDPb
                     (case-lambda
                       ((g$x$10811$DDDPb g$y$10812$DDDPb)
                        ((case-lambda
                           ((g$ls$10813$DDDPb)
                            (if (null? g$ls$10813$DDDPb)
                              (list
                                (g$scheme-stx$9660$DDDPb 'quote)
                                '())
                              (if (null? (cdr g$ls$10813$DDDPb))
                                (car g$ls$10813$DDDPb)
                                (g$cons*$5755$DDDPb
                                  (g$scheme-stx$9660$DDDPb 'append)
                                  g$ls$10813$DDDPb)))))
                         ((letrec ((g$f$10814$DDDPb
                                     (case-lambda
                                       ((g$x$10815$DDDPb)
                                        (if (null? g$x$10815$DDDPb)
                                          ((case-lambda
                                             ((g$t$10816$DDDPb)
                                              ((case-lambda
                                                 ((g$ls/false$10817$DDDPb)
                                                  (if g$ls/false$10817$DDDPb
                                                    (apply
                                                      (case-lambda
                                                        (() '()))
                                                      g$ls/false$10817$DDDPb)
                                                    ((case-lambda
                                                       ((g$t$10818$DDDPb)
                                                        ((case-lambda
                                                           ((g$ls/false$10819$DDDPb)
                                                            (if g$ls/false$10819$DDDPb
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$10812$DDDPb)))
                                                                g$ls/false$10819$DDDPb)
                                                              (g$syntax-violation$9835$DDDPb
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$10818$DDDPb))))
                                                         (g$syntax-dispatch$9717$DDDPb
                                                           g$t$10818$DDDPb
                                                           '_))))
                                                     g$t$10816$DDDPb))))
                                               (g$syntax-dispatch$9717$DDDPb
                                                 g$t$10816$DDDPb
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           g$y$10812$DDDPb)
                                          ((case-lambda
                                             ((g$t$10820$DDDPb)
                                              ((case-lambda
                                                 ((g$ls/false$10821$DDDPb)
                                                  (if g$ls/false$10821$DDDPb
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$10814$DDDPb
                                                           (cdr g$x$10815$DDDPb))))
                                                      g$ls/false$10821$DDDPb)
                                                    ((case-lambda
                                                       ((g$t$10822$DDDPb)
                                                        ((case-lambda
                                                           ((g$ls/false$10823$DDDPb)
                                                            (if g$ls/false$10823$DDDPb
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$10815$DDDPb)
                                                                     (g$f$10814$DDDPb
                                                                       (cdr g$x$10815$DDDPb)))))
                                                                g$ls/false$10823$DDDPb)
                                                              (g$syntax-violation$9835$DDDPb
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$10822$DDDPb))))
                                                         (g$syntax-dispatch$9717$DDDPb
                                                           g$t$10822$DDDPb
                                                           '_))))
                                                     g$t$10820$DDDPb))))
                                               (g$syntax-dispatch$9717$DDDPb
                                                 g$t$10820$DDDPb
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           (car g$x$10815$DDDPb)))))))
                            g$f$10814$DDDPb)
                          g$x$10811$DDDPb)))))
                   (g$quasivector$10735$DDDPb
                     (case-lambda
                       ((g$x$10786$DDDPb)
                        ((case-lambda
                           ((g$pat-x$10787$DDDPb)
                            ((case-lambda
                               ((g$t$10788$DDDPb)
                                ((case-lambda
                                   ((g$ls/false$10789$DDDPb)
                                    (if g$ls/false$10789$DDDPb
                                      (apply
                                        (case-lambda
                                          ((g$x*$10790$DDDPb)
                                           (list
                                             (g$scheme-stx$9660$DDDPb
                                               'quote)
                                             (g$list->vector$6419$DDDPb
                                               g$x*$10790$DDDPb))))
                                        g$ls/false$10789$DDDPb)
                                      ((case-lambda
                                         ((g$t$10791$DDDPb)
                                          ((case-lambda
                                             ((g$ls/false$10792$DDDPb)
                                              (if g$ls/false$10792$DDDPb
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$10793$DDDPb
                                                                 (case-lambda
                                                                   ((g$x$10794$DDDPb
                                                                      g$k$10795$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$t$10796$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10797$DDDPb)
                                                                            (if g$ls/false$10797$DDDPb
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$10798$DDDPb)
                                                                                   (g$k$10795$DDDPb
                                                                                     (g$map$5753$DDDPb
                                                                                       (case-lambda
                                                                                         ((g$x$10799$DDDPb)
                                                                                          (list
                                                                                            (g$scheme-stx$9660$DDDPb
                                                                                              'quote)
                                                                                            g$x$10799$DDDPb)))
                                                                                       g$x*$10798$DDDPb))))
                                                                                g$ls/false$10797$DDDPb)
                                                                              ((case-lambda
                                                                                 ((g$t$10800$DDDPb)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10801$DDDPb)
                                                                                      (if g$ls/false$10801$DDDPb
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$10802$DDDPb)
                                                                                             (g$k$10795$DDDPb
                                                                                               g$x*$10802$DDDPb)))
                                                                                          g$ls/false$10801$DDDPb)
                                                                                        ((case-lambda
                                                                                           ((g$t$10803$DDDPb)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10804$DDDPb)
                                                                                                (if g$ls/false$10804$DDDPb
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$10805$DDDPb
                                                                                                         g$y$10806$DDDPb)
                                                                                                       (g$f$10793$DDDPb
                                                                                                         g$y$10806$DDDPb
                                                                                                         (case-lambda
                                                                                                           ((g$ls$10807$DDDPb)
                                                                                                            (g$k$10795$DDDPb
                                                                                                              (cons
                                                                                                                g$x$10805$DDDPb
                                                                                                                g$ls$10807$DDDPb)))))))
                                                                                                    g$ls/false$10804$DDDPb)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$10808$DDDPb)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$10809$DDDPb)
                                                                                                          (if g$ls/false$10809$DDDPb
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$9660$DDDPb
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$10787$DDDPb)))
                                                                                                              g$ls/false$10809$DDDPb)
                                                                                                            (g$syntax-violation$9835$DDDPb
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$10808$DDDPb))))
                                                                                                       (g$syntax-dispatch$9717$DDDPb
                                                                                                         g$t$10808$DDDPb
                                                                                                         '_))))
                                                                                                   g$t$10803$DDDPb))))
                                                                                             (g$syntax-dispatch$9717$DDDPb
                                                                                               g$t$10803$DDDPb
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$10800$DDDPb))))
                                                                                   (g$syntax-dispatch$9717$DDDPb
                                                                                     g$t$10800$DDDPb
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$10796$DDDPb))))
                                                                         (g$syntax-dispatch$9717$DDDPb
                                                                           g$t$10796$DDDPb
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$10794$DDDPb)))))
                                                        g$f$10793$DDDPb)
                                                      g$x$10786$DDDPb
                                                      (case-lambda
                                                        ((g$ls$10810$DDDPb)
                                                         (g$cons*$5755$DDDPb
                                                           (g$scheme-stx$9660$DDDPb
                                                             'vector)
                                                           g$ls$10810$DDDPb))))))
                                                  g$ls/false$10792$DDDPb)
                                                (g$syntax-violation$9835$DDDPb
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$10791$DDDPb))))
                                           (g$syntax-dispatch$9717$DDDPb
                                             g$t$10791$DDDPb
                                             '_))))
                                       g$t$10788$DDDPb))))
                                 (g$syntax-dispatch$9717$DDDPb
                                   g$t$10788$DDDPb
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$10787$DDDPb)))
                         g$x$10786$DDDPb))))
                   (g$vquasi$10736$DDDPb
                     (case-lambda
                       ((g$p$10769$DDDPb g$lev$10770$DDDPb)
                        ((case-lambda
                           ((g$t$10771$DDDPb)
                            ((case-lambda
                               ((g$ls/false$10772$DDDPb)
                                (if g$ls/false$10772$DDDPb
                                  (apply
                                    (case-lambda
                                      ((g$p$10773$DDDPb g$q$10774$DDDPb)
                                       ((case-lambda
                                          ((g$t$10775$DDDPb)
                                           ((case-lambda
                                              ((g$ls/false$10776$DDDPb)
                                               (if g$ls/false$10776$DDDPb
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$10777$DDDPb)
                                                      (if (= g$lev$10770$DDDPb
                                                             '0)
                                                        (g$quasicons*$10732$DDDPb
                                                          g$p$10777$DDDPb
                                                          (g$vquasi$10736$DDDPb
                                                            g$q$10774$DDDPb
                                                            g$lev$10770$DDDPb))
                                                        (g$quasicons$10733$DDDPb
                                                          (g$quasicons$10733$DDDPb
                                                            (g$datum$10703$DDDPb
                                                              'unquote)
                                                            (g$quasi$10737$DDDPb
                                                              g$p$10777$DDDPb
                                                              (- g$lev$10770$DDDPb
                                                                 '1)))
                                                          (g$vquasi$10736$DDDPb
                                                            g$q$10774$DDDPb
                                                            g$lev$10770$DDDPb)))))
                                                   g$ls/false$10776$DDDPb)
                                                 ((case-lambda
                                                    ((g$t$10778$DDDPb)
                                                     ((case-lambda
                                                        ((g$ls/false$10779$DDDPb)
                                                         (if g$ls/false$10779$DDDPb
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$10780$DDDPb)
                                                                (if (= g$lev$10770$DDDPb
                                                                       '0)
                                                                  (g$quasiappend$10734$DDDPb
                                                                    g$p$10780$DDDPb
                                                                    (g$vquasi$10736$DDDPb
                                                                      g$q$10774$DDDPb
                                                                      g$lev$10770$DDDPb))
                                                                  (g$quasicons$10733$DDDPb
                                                                    (g$quasicons$10733$DDDPb
                                                                      (g$datum$10703$DDDPb
                                                                        'unquote-splicing)
                                                                      (g$quasi$10737$DDDPb
                                                                        g$p$10780$DDDPb
                                                                        (- g$lev$10770$DDDPb
                                                                           '1)))
                                                                    (g$vquasi$10736$DDDPb
                                                                      g$q$10774$DDDPb
                                                                      g$lev$10770$DDDPb)))))
                                                             g$ls/false$10779$DDDPb)
                                                           ((case-lambda
                                                              ((g$t$10781$DDDPb)
                                                               ((case-lambda
                                                                  ((g$ls/false$10782$DDDPb)
                                                                   (if g$ls/false$10782$DDDPb
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$10783$DDDPb)
                                                                          (g$quasicons$10733$DDDPb
                                                                            (g$quasi$10737$DDDPb
                                                                              g$p$10783$DDDPb
                                                                              g$lev$10770$DDDPb)
                                                                            (g$vquasi$10736$DDDPb
                                                                              g$q$10774$DDDPb
                                                                              g$lev$10770$DDDPb))))
                                                                       g$ls/false$10782$DDDPb)
                                                                     (g$syntax-violation$9835$DDDPb
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$10781$DDDPb))))
                                                                (g$syntax-dispatch$9717$DDDPb
                                                                  g$t$10781$DDDPb
                                                                  'any))))
                                                            g$t$10778$DDDPb))))
                                                      (g$syntax-dispatch$9717$DDDPb
                                                        g$t$10778$DDDPb
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$10775$DDDPb))))
                                            (g$syntax-dispatch$9717$DDDPb
                                              g$t$10775$DDDPb
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$10773$DDDPb)))
                                    g$ls/false$10772$DDDPb)
                                  ((case-lambda
                                     ((g$t$10784$DDDPb)
                                      ((case-lambda
                                         ((g$ls/false$10785$DDDPb)
                                          (if g$ls/false$10785$DDDPb
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$9660$DDDPb
                                                     'quote)
                                                   '())))
                                              g$ls/false$10785$DDDPb)
                                            (g$syntax-violation$9835$DDDPb
                                              '#f
                                              '"invalid syntax"
                                              g$t$10784$DDDPb))))
                                       (g$syntax-dispatch$9717$DDDPb
                                         g$t$10784$DDDPb
                                         '()))))
                                   g$t$10771$DDDPb))))
                             (g$syntax-dispatch$9717$DDDPb
                               g$t$10771$DDDPb
                               '(any . any)))))
                         g$p$10769$DDDPb))))
                   (g$quasi$10737$DDDPb
                     (case-lambda
                       ((g$p$10742$DDDPb g$lev$10743$DDDPb)
                        ((case-lambda
                           ((g$t$10744$DDDPb)
                            ((case-lambda
                               ((g$ls/false$10745$DDDPb)
                                (if g$ls/false$10745$DDDPb
                                  (apply
                                    (case-lambda
                                      ((g$p$10746$DDDPb)
                                       (if (= g$lev$10743$DDDPb '0)
                                         g$p$10746$DDDPb
                                         (g$quasicons$10733$DDDPb
                                           (g$datum$10703$DDDPb
                                             'unquote)
                                           (g$quasi$10737$DDDPb
                                             (list g$p$10746$DDDPb)
                                             (- g$lev$10743$DDDPb
                                                '1))))))
                                    g$ls/false$10745$DDDPb)
                                  ((case-lambda
                                     ((g$t$10747$DDDPb)
                                      ((case-lambda
                                         ((g$ls/false$10748$DDDPb)
                                          (if g$ls/false$10748$DDDPb
                                            (apply
                                              (case-lambda
                                                ((g$p$10749$DDDPb
                                                   g$q$10750$DDDPb)
                                                 (if (= g$lev$10743$DDDPb
                                                        '0)
                                                   (g$quasicons*$10732$DDDPb
                                                     g$p$10749$DDDPb
                                                     (g$quasi$10737$DDDPb
                                                       g$q$10750$DDDPb
                                                       g$lev$10743$DDDPb))
                                                   (g$quasicons$10733$DDDPb
                                                     (g$quasicons$10733$DDDPb
                                                       (g$datum$10703$DDDPb
                                                         'unquote)
                                                       (g$quasi$10737$DDDPb
                                                         g$p$10749$DDDPb
                                                         (- g$lev$10743$DDDPb
                                                            '1)))
                                                     (g$quasi$10737$DDDPb
                                                       g$q$10750$DDDPb
                                                       g$lev$10743$DDDPb)))))
                                              g$ls/false$10748$DDDPb)
                                            ((case-lambda
                                               ((g$t$10751$DDDPb)
                                                ((case-lambda
                                                   ((g$ls/false$10752$DDDPb)
                                                    (if g$ls/false$10752$DDDPb
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$10753$DDDPb
                                                             g$q$10754$DDDPb)
                                                           (if (= g$lev$10743$DDDPb
                                                                  '0)
                                                             (g$quasiappend$10734$DDDPb
                                                               g$p$10753$DDDPb
                                                               (g$quasi$10737$DDDPb
                                                                 g$q$10754$DDDPb
                                                                 g$lev$10743$DDDPb))
                                                             (g$quasicons$10733$DDDPb
                                                               (g$quasicons$10733$DDDPb
                                                                 (g$datum$10703$DDDPb
                                                                   'unquote-splicing)
                                                                 (g$quasi$10737$DDDPb
                                                                   g$p$10753$DDDPb
                                                                   (- g$lev$10743$DDDPb
                                                                      '1)))
                                                               (g$quasi$10737$DDDPb
                                                                 g$q$10754$DDDPb
                                                                 g$lev$10743$DDDPb)))))
                                                        g$ls/false$10752$DDDPb)
                                                      ((case-lambda
                                                         ((g$t$10755$DDDPb)
                                                          ((case-lambda
                                                             ((g$ls/false$10756$DDDPb)
                                                              (if g$ls/false$10756$DDDPb
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$10757$DDDPb)
                                                                     (g$quasicons$10733$DDDPb
                                                                       (g$datum$10703$DDDPb
                                                                         'quasiquote)
                                                                       (g$quasi$10737$DDDPb
                                                                         (list
                                                                           g$p$10757$DDDPb)
                                                                         (+ g$lev$10743$DDDPb
                                                                            '1)))))
                                                                  g$ls/false$10756$DDDPb)
                                                                ((case-lambda
                                                                   ((g$t$10758$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10759$DDDPb)
                                                                        (if g$ls/false$10759$DDDPb
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$10760$DDDPb
                                                                                 g$q$10761$DDDPb)
                                                                               (g$quasicons$10733$DDDPb
                                                                                 (g$quasi$10737$DDDPb
                                                                                   g$p$10760$DDDPb
                                                                                   g$lev$10743$DDDPb)
                                                                                 (g$quasi$10737$DDDPb
                                                                                   g$q$10761$DDDPb
                                                                                   g$lev$10743$DDDPb))))
                                                                            g$ls/false$10759$DDDPb)
                                                                          ((case-lambda
                                                                             ((g$t$10762$DDDPb)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10763$DDDPb)
                                                                                  (if (if g$ls/false$10763$DDDPb
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$10764$DDDPb)
                                                                                               (not (g$stx?$9326$DDDPb
                                                                                                      g$x$10764$DDDPb))))
                                                                                            g$ls/false$10763$DDDPb))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$10765$DDDPb)
                                                                                         (g$quasivector$10735$DDDPb
                                                                                           (g$vquasi$10736$DDDPb
                                                                                             g$x$10765$DDDPb
                                                                                             g$lev$10743$DDDPb))))
                                                                                      g$ls/false$10763$DDDPb)
                                                                                    ((case-lambda
                                                                                       ((g$t$10766$DDDPb)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10767$DDDPb)
                                                                                            (if g$ls/false$10767$DDDPb
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$10768$DDDPb)
                                                                                                   (list
                                                                                                     (g$scheme-stx$9660$DDDPb
                                                                                                       'quote)
                                                                                                     g$p$10768$DDDPb)))
                                                                                                g$ls/false$10767$DDDPb)
                                                                                              (g$syntax-violation$9835$DDDPb
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$10766$DDDPb))))
                                                                                         (g$syntax-dispatch$9717$DDDPb
                                                                                           g$t$10766$DDDPb
                                                                                           'any))))
                                                                                     g$t$10762$DDDPb))))
                                                                               (g$syntax-dispatch$9717$DDDPb
                                                                                 g$t$10762$DDDPb
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$10758$DDDPb))))
                                                                     (g$syntax-dispatch$9717$DDDPb
                                                                       g$t$10758$DDDPb
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$10755$DDDPb))))
                                                           (g$syntax-dispatch$9717$DDDPb
                                                             g$t$10755$DDDPb
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$10751$DDDPb))))
                                                 (g$syntax-dispatch$9717$DDDPb
                                                   g$t$10751$DDDPb
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$10747$DDDPb))))
                                       (g$syntax-dispatch$9717$DDDPb
                                         g$t$10747$DDDPb
                                         '((#(scheme-id unquote)
                                            .
                                            each-any)
                                           .
                                           any)))))
                                   g$t$10744$DDDPb))))
                             (g$syntax-dispatch$9717$DDDPb
                               g$t$10744$DDDPb
                               '(#(scheme-id unquote) any)))))
                         g$p$10742$DDDPb)))))
           (case-lambda
             ((g$x$10738$DDDPb)
              ((case-lambda
                 ((g$t$10739$DDDPb)
                  ((case-lambda
                     ((g$ls/false$10740$DDDPb)
                      (if g$ls/false$10740$DDDPb
                        (apply
                          (case-lambda
                            ((g$e$10741$DDDPb)
                             (g$quasi$10737$DDDPb g$e$10741$DDDPb '0)))
                          g$ls/false$10740$DDDPb)
                        (g$syntax-violation$9835$DDDPb
                          '#f
                          '"invalid syntax"
                          g$t$10739$DDDPb))))
                   (g$syntax-dispatch$9717$DDDPb
                     g$t$10739$DDDPb
                     '(_ any)))))
               g$x$10738$DDDPb))))))))
   (g$quasisyntax-macro$9709$DDDPb
     g$quasisyntax-macro$13250$DDDPb
     ((case-lambda
        (()
         (letrec* ((g$quasi$10848$DDDPb
                     (case-lambda
                       ((g$p$10862$DDDPb g$lev$10863$DDDPb)
                        ((case-lambda
                           ((g$t$10864$DDDPb)
                            ((case-lambda
                               ((g$ls/false$10865$DDDPb)
                                (if g$ls/false$10865$DDDPb
                                  (apply
                                    (case-lambda
                                      ((g$p$10866$DDDPb)
                                       (if (= g$lev$10863$DDDPb '0)
                                         ((case-lambda
                                            ((g$g$10867$DDDPb)
                                             (values
                                               (list g$g$10867$DDDPb)
                                               (list g$p$10866$DDDPb)
                                               g$g$10867$DDDPb)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$10848$DDDPb
                                                g$p$10866$DDDPb
                                                (- g$lev$10863$DDDPb
                                                   '1))))
                                           (case-lambda
                                             ((g$lhs*$10871$DDDPb
                                                g$rhs*$10872$DDDPb
                                                g$p$10873$DDDPb)
                                              ((case-lambda
                                                 ((g$p$10874$DDDPb
                                                    g$rhs*$10875$DDDPb
                                                    g$lhs*$10876$DDDPb)
                                                  (values
                                                    g$lhs*$10876$DDDPb
                                                    g$rhs*$10875$DDDPb
                                                    (list
                                                      'unsyntax
                                                      g$p$10874$DDDPb))))
                                               g$p$10873$DDDPb
                                               g$rhs*$10872$DDDPb
                                               g$lhs*$10871$DDDPb)))))))
                                    g$ls/false$10865$DDDPb)
                                  ((case-lambda
                                     ((g$t$10877$DDDPb)
                                      ((case-lambda
                                         ((g$ls/false$10878$DDDPb)
                                          (if (if g$ls/false$10878$DDDPb
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$10863$DDDPb
                                                          '0)))
                                                    g$ls/false$10878$DDDPb))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$9835$DDDPb
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$10862$DDDPb)))
                                              g$ls/false$10878$DDDPb)
                                            ((case-lambda
                                               ((g$t$10879$DDDPb)
                                                ((case-lambda
                                                   ((g$ls/false$10880$DDDPb)
                                                    (if g$ls/false$10880$DDDPb
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$10881$DDDPb
                                                             g$q$10882$DDDPb)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$10848$DDDPb
                                                                  g$q$10882$DDDPb
                                                                  g$lev$10863$DDDPb)))
                                                             (case-lambda
                                                               ((g$lhs*$10886$DDDPb
                                                                  g$rhs*$10887$DDDPb
                                                                  g$q$10888$DDDPb)
                                                                ((case-lambda
                                                                   ((g$q$10889$DDDPb
                                                                      g$rhs*$10890$DDDPb
                                                                      g$lhs*$10891$DDDPb)
                                                                    (if (= g$lev$10863$DDDPb
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$10892$DDDPb)
                                                                          (values
                                                                            (append
                                                                              g$g*$10892$DDDPb
                                                                              g$lhs*$10891$DDDPb)
                                                                            (append
                                                                              g$p*$10881$DDDPb
                                                                              g$rhs*$10890$DDDPb)
                                                                            (append
                                                                              g$g*$10892$DDDPb
                                                                              g$q$10889$DDDPb))))
                                                                       (g$map$5753$DDDPb
                                                                         (case-lambda
                                                                           ((g$x$10893$DDDPb)
                                                                            (gensym)))
                                                                         g$p*$10881$DDDPb))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$10848$DDDPb
                                                                             g$p*$10881$DDDPb
                                                                             (- g$lev$10863$DDDPb
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$10897$DDDPb
                                                                             g$rhs2*$10898$DDDPb
                                                                             g$p*$10899$DDDPb)
                                                                           ((case-lambda
                                                                              ((g$p*$10900$DDDPb
                                                                                 g$rhs2*$10901$DDDPb
                                                                                 g$lhs2*$10902$DDDPb)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$10902$DDDPb
                                                                                   g$lhs*$10891$DDDPb)
                                                                                 (append
                                                                                   g$rhs2*$10901$DDDPb
                                                                                   g$rhs*$10890$DDDPb)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$10900$DDDPb)
                                                                                   g$q$10889$DDDPb))))
                                                                            g$p*$10899$DDDPb
                                                                            g$rhs2*$10898$DDDPb
                                                                            g$lhs2*$10897$DDDPb)))))))
                                                                 g$q$10888$DDDPb
                                                                 g$rhs*$10887$DDDPb
                                                                 g$lhs*$10886$DDDPb))))))
                                                        g$ls/false$10880$DDDPb)
                                                      ((case-lambda
                                                         ((g$t$10903$DDDPb)
                                                          ((case-lambda
                                                             ((g$ls/false$10904$DDDPb)
                                                              (if g$ls/false$10904$DDDPb
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$10905$DDDPb
                                                                       g$q$10906$DDDPb)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$10848$DDDPb
                                                                            g$q$10906$DDDPb
                                                                            g$lev$10863$DDDPb)))
                                                                       (case-lambda
                                                                         ((g$lhs*$10910$DDDPb
                                                                            g$rhs*$10911$DDDPb
                                                                            g$q$10912$DDDPb)
                                                                          ((case-lambda
                                                                             ((g$q$10913$DDDPb
                                                                                g$rhs*$10914$DDDPb
                                                                                g$lhs*$10915$DDDPb)
                                                                              (if (= g$lev$10863$DDDPb
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$10916$DDDPb)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$5753$DDDPb
                                                                                          (case-lambda
                                                                                            ((g$g$10917$DDDPb)
                                                                                             (cons
                                                                                               g$g$10917$DDDPb
                                                                                               '(...))))
                                                                                          g$g*$10916$DDDPb)
                                                                                        g$lhs*$10915$DDDPb)
                                                                                      (append
                                                                                        g$p*$10905$DDDPb
                                                                                        g$rhs*$10914$DDDPb)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$5753$DDDPb
                                                                                            (case-lambda
                                                                                              ((g$g$10918$DDDPb)
                                                                                               (cons
                                                                                                 g$g$10918$DDDPb
                                                                                                 '(...))))
                                                                                            g$g*$10916$DDDPb))
                                                                                        g$q$10913$DDDPb))))
                                                                                 (g$map$5753$DDDPb
                                                                                   (case-lambda
                                                                                     ((g$x$10919$DDDPb)
                                                                                      (gensym)))
                                                                                   g$p*$10905$DDDPb))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$10848$DDDPb
                                                                                       g$p*$10905$DDDPb
                                                                                       (- g$lev$10863$DDDPb
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$10923$DDDPb
                                                                                       g$rhs2*$10924$DDDPb
                                                                                       g$p*$10925$DDDPb)
                                                                                     ((case-lambda
                                                                                        ((g$p*$10926$DDDPb
                                                                                           g$rhs2*$10927$DDDPb
                                                                                           g$lhs2*$10928$DDDPb)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$10928$DDDPb
                                                                                             g$lhs*$10915$DDDPb)
                                                                                           (append
                                                                                             g$rhs2*$10927$DDDPb
                                                                                             g$rhs*$10914$DDDPb)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$10926$DDDPb)
                                                                                             g$q$10913$DDDPb))))
                                                                                      g$p*$10925$DDDPb
                                                                                      g$rhs2*$10924$DDDPb
                                                                                      g$lhs2*$10923$DDDPb)))))))
                                                                           g$q$10912$DDDPb
                                                                           g$rhs*$10911$DDDPb
                                                                           g$lhs*$10910$DDDPb))))))
                                                                  g$ls/false$10904$DDDPb)
                                                                ((case-lambda
                                                                   ((g$t$10929$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10930$DDDPb)
                                                                        (if (if g$ls/false$10930$DDDPb
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$10863$DDDPb
                                                                                        '0)))
                                                                                  g$ls/false$10930$DDDPb))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$9835$DDDPb
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$10862$DDDPb)))
                                                                            g$ls/false$10930$DDDPb)
                                                                          ((case-lambda
                                                                             ((g$t$10931$DDDPb)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10932$DDDPb)
                                                                                  (if g$ls/false$10932$DDDPb
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$10933$DDDPb)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$10848$DDDPb
                                                                                                g$p$10933$DDDPb
                                                                                                (+ g$lev$10863$DDDPb
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$10937$DDDPb
                                                                                                g$rhs*$10938$DDDPb
                                                                                                g$p$10939$DDDPb)
                                                                                              ((case-lambda
                                                                                                 ((g$p$10940$DDDPb
                                                                                                    g$rhs*$10941$DDDPb
                                                                                                    g$lhs*$10942$DDDPb)
                                                                                                  (values
                                                                                                    g$lhs*$10942$DDDPb
                                                                                                    g$rhs*$10941$DDDPb
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$10940$DDDPb))))
                                                                                               g$p$10939$DDDPb
                                                                                               g$rhs*$10938$DDDPb
                                                                                               g$lhs*$10937$DDDPb))))))
                                                                                      g$ls/false$10932$DDDPb)
                                                                                    ((case-lambda
                                                                                       ((g$t$10943$DDDPb)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10944$DDDPb)
                                                                                            (if g$ls/false$10944$DDDPb
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$10945$DDDPb
                                                                                                     g$q$10946$DDDPb)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$10848$DDDPb
                                                                                                          g$p$10945$DDDPb
                                                                                                          g$lev$10863$DDDPb)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$10953$DDDPb
                                                                                                          g$rhs*$10954$DDDPb
                                                                                                          g$p$10955$DDDPb)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$10848$DDDPb
                                                                                                               g$q$10946$DDDPb
                                                                                                               g$lev$10863$DDDPb)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$10956$DDDPb
                                                                                                               g$rhs2*$10957$DDDPb
                                                                                                               g$q$10958$DDDPb)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$10959$DDDPb
                                                                                                                   g$rhs2*$10960$DDDPb
                                                                                                                   g$lhs2*$10961$DDDPb
                                                                                                                   g$p$10962$DDDPb
                                                                                                                   g$rhs*$10963$DDDPb
                                                                                                                   g$lhs*$10964$DDDPb)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$10961$DDDPb
                                                                                                                     g$lhs*$10964$DDDPb)
                                                                                                                   (append
                                                                                                                     g$rhs2*$10960$DDDPb
                                                                                                                     g$rhs*$10963$DDDPb)
                                                                                                                   (cons
                                                                                                                     g$p$10962$DDDPb
                                                                                                                     g$q$10959$DDDPb))))
                                                                                                              g$q$10958$DDDPb
                                                                                                              g$rhs2*$10957$DDDPb
                                                                                                              g$lhs2*$10956$DDDPb
                                                                                                              g$p$10955$DDDPb
                                                                                                              g$rhs*$10954$DDDPb
                                                                                                              g$lhs*$10953$DDDPb)))))))))
                                                                                                g$ls/false$10944$DDDPb)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10965$DDDPb)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10966$DDDPb)
                                                                                                      (if g$ls/false$10966$DDDPb
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$10967$DDDPb)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$10848$DDDPb
                                                                                                                    g$x*$10967$DDDPb
                                                                                                                    g$lev$10863$DDDPb)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$10971$DDDPb
                                                                                                                    g$rhs*$10972$DDDPb
                                                                                                                    g$x*$10973$DDDPb)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$10974$DDDPb
                                                                                                                        g$rhs*$10975$DDDPb
                                                                                                                        g$lhs*$10976$DDDPb)
                                                                                                                      (values
                                                                                                                        g$lhs*$10976$DDDPb
                                                                                                                        g$rhs*$10975$DDDPb
                                                                                                                        (g$list->vector$6419$DDDPb
                                                                                                                          g$x*$10974$DDDPb))))
                                                                                                                   g$x*$10973$DDDPb
                                                                                                                   g$rhs*$10972$DDDPb
                                                                                                                   g$lhs*$10971$DDDPb))))))
                                                                                                          g$ls/false$10966$DDDPb)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$10977$DDDPb)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$10978$DDDPb)
                                                                                                                (if g$ls/false$10978$DDDPb
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$10862$DDDPb)))
                                                                                                                    g$ls/false$10978$DDDPb)
                                                                                                                  (g$syntax-violation$9835$DDDPb
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$10977$DDDPb))))
                                                                                                             (g$syntax-dispatch$9717$DDDPb
                                                                                                               g$t$10977$DDDPb
                                                                                                               '_))))
                                                                                                         g$t$10965$DDDPb))))
                                                                                                   (g$syntax-dispatch$9717$DDDPb
                                                                                                     g$t$10965$DDDPb
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$10943$DDDPb))))
                                                                                         (g$syntax-dispatch$9717$DDDPb
                                                                                           g$t$10943$DDDPb
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$10931$DDDPb))))
                                                                               (g$syntax-dispatch$9717$DDDPb
                                                                                 g$t$10931$DDDPb
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$10929$DDDPb))))
                                                                     (g$syntax-dispatch$9717$DDDPb
                                                                       g$t$10929$DDDPb
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$10903$DDDPb))))
                                                           (g$syntax-dispatch$9717$DDDPb
                                                             g$t$10903$DDDPb
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$10879$DDDPb))))
                                                 (g$syntax-dispatch$9717$DDDPb
                                                   g$t$10879$DDDPb
                                                   '((#(scheme-id
                                                        unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$10877$DDDPb))))
                                       (g$syntax-dispatch$9717$DDDPb
                                         g$t$10877$DDDPb
                                         '#(scheme-id unsyntax)))))
                                   g$t$10864$DDDPb))))
                             (g$syntax-dispatch$9717$DDDPb
                               g$t$10864$DDDPb
                               '(#(scheme-id unsyntax) any)))))
                         g$p$10862$DDDPb)))))
           (case-lambda
             ((g$x$10849$DDDPb)
              ((case-lambda
                 ((g$t$10850$DDDPb)
                  ((case-lambda
                     ((g$ls/false$10851$DDDPb)
                      (if g$ls/false$10851$DDDPb
                        (apply
                          (case-lambda
                            ((g$e$10852$DDDPb)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$quasi$10848$DDDPb
                                    g$e$10852$DDDPb
                                    '0)))
                               (case-lambda
                                 ((g$lhs*$10856$DDDPb
                                    g$rhs*$10857$DDDPb
                                    g$v$10858$DDDPb)
                                  ((case-lambda
                                     ((g$v$10859$DDDPb
                                        g$rhs*$10860$DDDPb
                                        g$lhs*$10861$DDDPb)
                                      (g$bless$9680$DDDPb
                                        (list
                                          'syntax-case
                                          (cons
                                            'list
                                            g$rhs*$10860$DDDPb)
                                          '()
                                          (list
                                            g$lhs*$10861$DDDPb
                                            (list
                                              'syntax
                                              g$v$10859$DDDPb))))))
                                   g$v$10858$DDDPb
                                   g$rhs*$10857$DDDPb
                                   g$lhs*$10856$DDDPb))))))
                          g$ls/false$10851$DDDPb)
                        (g$syntax-violation$9835$DDDPb
                          '#f
                          '"invalid syntax"
                          g$t$10850$DDDPb))))
                   (g$syntax-dispatch$9717$DDDPb
                     g$t$10850$DDDPb
                     '(_ any)))))
               g$x$10849$DDDPb))))))))
   (g$define-struct-macro$9710$DDDPb
     g$define-struct-macro$13251$DDDPb
     (case-lambda
       ((g$stx$10979$DDDPb)
        (g$syntax-violation$9835$DDDPb
          '#f
          '"define-struct not supported"
          g$stx$10979$DDDPb))))
   (g$define-record-type-macro$9711$DDDPb
     g$define-record-type-macro$13252$DDDPb
     (case-lambda
       ((g$x$10980$DDDPb)
        (letrec* ((g$id$10981$DDDPb
                    (case-lambda
                      ((g$ctxt$11233$DDDPb . g$str*$11234$DDDPb)
                       (g$datum->syntax$9837$DDDPb
                         g$ctxt$11233$DDDPb
                         (string->symbol
                           (apply
                             string-append
                             (g$map$5753$DDDPb
                               (case-lambda
                                 ((g$x$11235$DDDPb)
                                  (if (g$symbol?$6424$DDDPb
                                        g$x$11235$DDDPb)
                                    (symbol->string g$x$11235$DDDPb)
                                    (if (string? g$x$11235$DDDPb)
                                      g$x$11235$DDDPb
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$11234$DDDPb)))))))
                  (g$get-record-name$10982$DDDPb
                    (case-lambda
                      ((g$spec$11224$DDDPb)
                       ((case-lambda
                          ((g$t$11225$DDDPb)
                           ((case-lambda
                              ((g$ls/false$11226$DDDPb)
                               (if g$ls/false$11226$DDDPb
                                 (apply
                                   (case-lambda
                                     ((g$foo$11227$DDDPb
                                        g$make-foo$11228$DDDPb
                                        g$foo?$11229$DDDPb)
                                      g$foo$11227$DDDPb))
                                   g$ls/false$11226$DDDPb)
                                 ((case-lambda
                                    ((g$t$11230$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$11231$DDDPb)
                                         (if g$ls/false$11231$DDDPb
                                           (apply
                                             (case-lambda
                                               ((g$foo$11232$DDDPb)
                                                g$foo$11232$DDDPb))
                                             g$ls/false$11231$DDDPb)
                                           (g$syntax-violation$9835$DDDPb
                                             '#f
                                             '"invalid syntax"
                                             g$t$11230$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$11230$DDDPb
                                        'any))))
                                  g$t$11225$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$11225$DDDPb
                              '(any any any)))))
                        g$spec$11224$DDDPb))))
                  (g$get-record-constructor-name$10983$DDDPb
                    (case-lambda
                      ((g$spec$11214$DDDPb)
                       ((case-lambda
                          ((g$t$11215$DDDPb)
                           ((case-lambda
                              ((g$ls/false$11216$DDDPb)
                               (if g$ls/false$11216$DDDPb
                                 (apply
                                   (case-lambda
                                     ((g$foo$11217$DDDPb
                                        g$make-foo$11218$DDDPb
                                        g$foo?$11219$DDDPb)
                                      g$make-foo$11218$DDDPb))
                                   g$ls/false$11216$DDDPb)
                                 ((case-lambda
                                    ((g$t$11220$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$11221$DDDPb)
                                         (if (if g$ls/false$11221$DDDPb
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$11222$DDDPb)
                                                      (g$id?$9354$DDDPb
                                                        g$foo$11222$DDDPb)))
                                                   g$ls/false$11221$DDDPb))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$11223$DDDPb)
                                                (g$id$10981$DDDPb
                                                  g$foo$11223$DDDPb
                                                  '"make-"
                                                  (g$stx->datum$9365$DDDPb
                                                    g$foo$11223$DDDPb))))
                                             g$ls/false$11221$DDDPb)
                                           (g$syntax-violation$9835$DDDPb
                                             '#f
                                             '"invalid syntax"
                                             g$t$11220$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$11220$DDDPb
                                        'any))))
                                  g$t$11215$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$11215$DDDPb
                              '(any any any)))))
                        g$spec$11214$DDDPb))))
                  (g$get-record-predicate-name$10984$DDDPb
                    (case-lambda
                      ((g$spec$11204$DDDPb)
                       ((case-lambda
                          ((g$t$11205$DDDPb)
                           ((case-lambda
                              ((g$ls/false$11206$DDDPb)
                               (if g$ls/false$11206$DDDPb
                                 (apply
                                   (case-lambda
                                     ((g$foo$11207$DDDPb
                                        g$make-foo$11208$DDDPb
                                        g$foo?$11209$DDDPb)
                                      g$foo?$11209$DDDPb))
                                   g$ls/false$11206$DDDPb)
                                 ((case-lambda
                                    ((g$t$11210$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$11211$DDDPb)
                                         (if (if g$ls/false$11211$DDDPb
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$11212$DDDPb)
                                                      (g$id?$9354$DDDPb
                                                        g$foo$11212$DDDPb)))
                                                   g$ls/false$11211$DDDPb))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$11213$DDDPb)
                                                (g$id$10981$DDDPb
                                                  g$foo$11213$DDDPb
                                                  (g$stx->datum$9365$DDDPb
                                                    g$foo$11213$DDDPb)
                                                  '"?")))
                                             g$ls/false$11211$DDDPb)
                                           (g$syntax-violation$9835$DDDPb
                                             '#f
                                             '"invalid syntax"
                                             g$t$11210$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$11210$DDDPb
                                        'any))))
                                  g$t$11205$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$11205$DDDPb
                              '(any any any)))))
                        g$spec$11204$DDDPb))))
                  (g$get-clause$10985$DDDPb
                    (case-lambda
                      ((g$id$11195$DDDPb g$ls$11196$DDDPb)
                       ((case-lambda
                          ((g$t$11197$DDDPb)
                           ((case-lambda
                              ((g$ls/false$11198$DDDPb)
                               (if g$ls/false$11198$DDDPb
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$11198$DDDPb)
                                 ((case-lambda
                                    ((g$t$11199$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$11200$DDDPb)
                                         (if g$ls/false$11200$DDDPb
                                           (apply
                                             (case-lambda
                                               ((g$x$11201$DDDPb
                                                  g$rest$11202$DDDPb
                                                  g$ls$11203$DDDPb)
                                                (if (g$free-id=?$9358$DDDPb
                                                      (g$bless$9680$DDDPb
                                                        g$id$11195$DDDPb)
                                                      g$x$11201$DDDPb)
                                                  (cons
                                                    g$x$11201$DDDPb
                                                    g$rest$11202$DDDPb)
                                                  (g$get-clause$10985$DDDPb
                                                    g$id$11195$DDDPb
                                                    g$ls$11203$DDDPb))))
                                             g$ls/false$11200$DDDPb)
                                           (g$syntax-violation$9835$DDDPb
                                             '#f
                                             '"invalid syntax"
                                             g$t$11199$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$11199$DDDPb
                                        '((any . any) . any)))))
                                  g$t$11197$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$11197$DDDPb
                              '()))))
                        g$ls$11196$DDDPb))))
                  (g$foo-rtd-code$10986$DDDPb
                    (case-lambda
                      ((g$name$11154$DDDPb
                         g$clause*$11155$DDDPb
                         g$parent-rtd-code$11156$DDDPb)
                       (letrec* ((g$convert-field-spec*$11157$DDDPb
                                   (case-lambda
                                     ((g$ls$11182$DDDPb)
                                      (g$list->vector$6419$DDDPb
                                        (g$map$5753$DDDPb
                                          (case-lambda
                                            ((g$x$11183$DDDPb)
                                             ((case-lambda
                                                ((g$t$11184$DDDPb)
                                                 ((case-lambda
                                                    ((g$ls/false$11185$DDDPb)
                                                     (if g$ls/false$11185$DDDPb
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$11186$DDDPb
                                                              g$rest$11187$DDDPb)
                                                            (list
                                                              'mutable
                                                              g$name$11186$DDDPb)))
                                                         g$ls/false$11185$DDDPb)
                                                       ((case-lambda
                                                          ((g$t$11188$DDDPb)
                                                           ((case-lambda
                                                              ((g$ls/false$11189$DDDPb)
                                                               (if g$ls/false$11189$DDDPb
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$11190$DDDPb
                                                                        g$rest$11191$DDDPb)
                                                                      (list
                                                                        'immutable
                                                                        g$name$11190$DDDPb)))
                                                                   g$ls/false$11189$DDDPb)
                                                                 ((case-lambda
                                                                    ((g$t$11192$DDDPb)
                                                                     ((case-lambda
                                                                        ((g$ls/false$11193$DDDPb)
                                                                         (if g$ls/false$11193$DDDPb
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$11194$DDDPb)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$11194$DDDPb)))
                                                                             g$ls/false$11193$DDDPb)
                                                                           (g$syntax-violation$9835$DDDPb
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$11192$DDDPb))))
                                                                      (g$syntax-dispatch$9717$DDDPb
                                                                        g$t$11192$DDDPb
                                                                        'any))))
                                                                  g$t$11188$DDDPb))))
                                                            (g$syntax-dispatch$9717$DDDPb
                                                              g$t$11188$DDDPb
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$11184$DDDPb))))
                                                  (g$syntax-dispatch$9717$DDDPb
                                                    g$t$11184$DDDPb
                                                    '(#(scheme-id
                                                        mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$11183$DDDPb)))
                                          g$ls$11182$DDDPb))))))
                         ((case-lambda
                            ((g$uid-code$11158$DDDPb
                               g$sealed?$11159$DDDPb
                               g$opaque?$11160$DDDPb
                               g$fields$11161$DDDPb)
                             (g$bless$9680$DDDPb
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$11154$DDDPb)
                                 g$parent-rtd-code$11156$DDDPb
                                 g$uid-code$11158$DDDPb
                                 g$sealed?$11159$DDDPb
                                 g$opaque?$11160$DDDPb
                                 g$fields$11161$DDDPb))))
                          ((case-lambda
                             ((g$t$11162$DDDPb)
                              ((case-lambda
                                 ((g$ls/false$11163$DDDPb)
                                  (if g$ls/false$11163$DDDPb
                                    (apply
                                      (case-lambda
                                        (() (list 'quote (gensym))))
                                      g$ls/false$11163$DDDPb)
                                    ((case-lambda
                                       ((g$t$11164$DDDPb)
                                        ((case-lambda
                                           ((g$ls/false$11165$DDDPb)
                                            (if g$ls/false$11165$DDDPb
                                              (apply
                                                (case-lambda
                                                  ((g$uid$11166$DDDPb)
                                                   (list
                                                     'quote
                                                     g$uid$11166$DDDPb)))
                                                g$ls/false$11165$DDDPb)
                                              ((case-lambda
                                                 ((g$t$11167$DDDPb)
                                                  ((case-lambda
                                                     ((g$ls/false$11168$DDDPb)
                                                      (if g$ls/false$11168$DDDPb
                                                        (apply
                                                          (case-lambda
                                                            (() '#f))
                                                          g$ls/false$11168$DDDPb)
                                                        (g$syntax-violation$9835$DDDPb
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$11167$DDDPb))))
                                                   (g$syntax-dispatch$9717$DDDPb
                                                     g$t$11167$DDDPb
                                                     '_))))
                                               g$t$11164$DDDPb))))
                                         (g$syntax-dispatch$9717$DDDPb
                                           g$t$11164$DDDPb
                                           '(_ any)))))
                                     g$t$11162$DDDPb))))
                               (g$syntax-dispatch$9717$DDDPb
                                 g$t$11162$DDDPb
                                 '(_)))))
                           (g$get-clause$10985$DDDPb
                             'nongenerative
                             g$clause*$11155$DDDPb))
                          ((case-lambda
                             ((g$t$11169$DDDPb)
                              ((case-lambda
                                 ((g$ls/false$11170$DDDPb)
                                  (if g$ls/false$11170$DDDPb
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$11170$DDDPb)
                                    ((case-lambda
                                       ((g$t$11171$DDDPb)
                                        ((case-lambda
                                           ((g$ls/false$11172$DDDPb)
                                            (if g$ls/false$11172$DDDPb
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$11172$DDDPb)
                                              (g$syntax-violation$9835$DDDPb
                                                '#f
                                                '"invalid syntax"
                                                g$t$11171$DDDPb))))
                                         (g$syntax-dispatch$9717$DDDPb
                                           g$t$11171$DDDPb
                                           '_))))
                                     g$t$11169$DDDPb))))
                               (g$syntax-dispatch$9717$DDDPb
                                 g$t$11169$DDDPb
                                 '(_ #(atom #t))))))
                           (g$get-clause$10985$DDDPb
                             'sealed
                             g$clause*$11155$DDDPb))
                          ((case-lambda
                             ((g$t$11173$DDDPb)
                              ((case-lambda
                                 ((g$ls/false$11174$DDDPb)
                                  (if g$ls/false$11174$DDDPb
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$11174$DDDPb)
                                    ((case-lambda
                                       ((g$t$11175$DDDPb)
                                        ((case-lambda
                                           ((g$ls/false$11176$DDDPb)
                                            (if g$ls/false$11176$DDDPb
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$11176$DDDPb)
                                              (g$syntax-violation$9835$DDDPb
                                                '#f
                                                '"invalid syntax"
                                                g$t$11175$DDDPb))))
                                         (g$syntax-dispatch$9717$DDDPb
                                           g$t$11175$DDDPb
                                           '_))))
                                     g$t$11173$DDDPb))))
                               (g$syntax-dispatch$9717$DDDPb
                                 g$t$11173$DDDPb
                                 '(_ #(atom #t))))))
                           (g$get-clause$10985$DDDPb
                             'opaque
                             g$clause*$11155$DDDPb))
                          ((case-lambda
                             ((g$t$11177$DDDPb)
                              ((case-lambda
                                 ((g$ls/false$11178$DDDPb)
                                  (if g$ls/false$11178$DDDPb
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$11179$DDDPb)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$11157$DDDPb
                                             g$field-spec*$11179$DDDPb))))
                                      g$ls/false$11178$DDDPb)
                                    ((case-lambda
                                       ((g$t$11180$DDDPb)
                                        ((case-lambda
                                           ((g$ls/false$11181$DDDPb)
                                            (if g$ls/false$11181$DDDPb
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$11181$DDDPb)
                                              (g$syntax-violation$9835$DDDPb
                                                '#f
                                                '"invalid syntax"
                                                g$t$11180$DDDPb))))
                                         (g$syntax-dispatch$9717$DDDPb
                                           g$t$11180$DDDPb
                                           '_))))
                                     g$t$11177$DDDPb))))
                               (g$syntax-dispatch$9717$DDDPb
                                 g$t$11177$DDDPb
                                 '(_ . each-any)))))
                           (g$get-clause$10985$DDDPb
                             'fields
                             g$clause*$11155$DDDPb)))))))
                  (g$parent-rtd-code$10987$DDDPb
                    (case-lambda
                      ((g$clause*$11142$DDDPb)
                       ((case-lambda
                          ((g$t$11143$DDDPb)
                           ((case-lambda
                              ((g$ls/false$11144$DDDPb)
                               (if g$ls/false$11144$DDDPb
                                 (apply
                                   (case-lambda
                                     ((g$name$11145$DDDPb)
                                      (list
                                        'record-type-descriptor
                                        g$name$11145$DDDPb)))
                                   g$ls/false$11144$DDDPb)
                                 ((case-lambda
                                    ((g$t$11146$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$11147$DDDPb)
                                         (if g$ls/false$11147$DDDPb
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$11148$DDDPb)
                                                    ((case-lambda
                                                       ((g$ls/false$11149$DDDPb)
                                                        (if g$ls/false$11149$DDDPb
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$11150$DDDPb
                                                                 g$rcd$11151$DDDPb)
                                                               g$rtd$11150$DDDPb))
                                                            g$ls/false$11149$DDDPb)
                                                          ((case-lambda
                                                             ((g$t$11152$DDDPb)
                                                              ((case-lambda
                                                                 ((g$ls/false$11153$DDDPb)
                                                                  (if g$ls/false$11153$DDDPb
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$11153$DDDPb)
                                                                    (g$syntax-violation$9835$DDDPb
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$11152$DDDPb))))
                                                               (g$syntax-dispatch$9717$DDDPb
                                                                 g$t$11152$DDDPb
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$11148$DDDPb))))
                                                     (g$syntax-dispatch$9717$DDDPb
                                                       g$t$11148$DDDPb
                                                       '(_ any any)))))
                                                 (g$get-clause$10985$DDDPb
                                                   'parent-rtd
                                                   g$clause*$11142$DDDPb))))
                                             g$ls/false$11147$DDDPb)
                                           (g$syntax-violation$9835$DDDPb
                                             '#f
                                             '"invalid syntax"
                                             g$t$11146$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$11146$DDDPb
                                        '#(atom #f)))))
                                  g$t$11143$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$11143$DDDPb
                              '(_ any)))))
                        (g$get-clause$10985$DDDPb
                          'parent
                          g$clause*$11142$DDDPb)))))
                  (g$parent-rcd-code$10988$DDDPb
                    (case-lambda
                      ((g$clause*$11130$DDDPb)
                       ((case-lambda
                          ((g$t$11131$DDDPb)
                           ((case-lambda
                              ((g$ls/false$11132$DDDPb)
                               (if g$ls/false$11132$DDDPb
                                 (apply
                                   (case-lambda
                                     ((g$name$11133$DDDPb)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$11133$DDDPb)))
                                   g$ls/false$11132$DDDPb)
                                 ((case-lambda
                                    ((g$t$11134$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$11135$DDDPb)
                                         (if g$ls/false$11135$DDDPb
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$11136$DDDPb)
                                                    ((case-lambda
                                                       ((g$ls/false$11137$DDDPb)
                                                        (if g$ls/false$11137$DDDPb
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$11138$DDDPb
                                                                 g$rcd$11139$DDDPb)
                                                               g$rcd$11139$DDDPb))
                                                            g$ls/false$11137$DDDPb)
                                                          ((case-lambda
                                                             ((g$t$11140$DDDPb)
                                                              ((case-lambda
                                                                 ((g$ls/false$11141$DDDPb)
                                                                  (if g$ls/false$11141$DDDPb
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$11141$DDDPb)
                                                                    (g$syntax-violation$9835$DDDPb
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$11140$DDDPb))))
                                                               (g$syntax-dispatch$9717$DDDPb
                                                                 g$t$11140$DDDPb
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$11136$DDDPb))))
                                                     (g$syntax-dispatch$9717$DDDPb
                                                       g$t$11136$DDDPb
                                                       '(_ any any)))))
                                                 (g$get-clause$10985$DDDPb
                                                   'parent-rtd
                                                   g$clause*$11130$DDDPb))))
                                             g$ls/false$11135$DDDPb)
                                           (g$syntax-violation$9835$DDDPb
                                             '#f
                                             '"invalid syntax"
                                             g$t$11134$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$11134$DDDPb
                                        '#(atom #f)))))
                                  g$t$11131$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$11131$DDDPb
                              '(_ any)))))
                        (g$get-clause$10985$DDDPb
                          'parent
                          g$clause*$11130$DDDPb)))))
                  (g$foo-rcd-code$10989$DDDPb
                    (case-lambda
                      ((g$clause*$11126$DDDPb
                         g$foo-rtd$11127$DDDPb
                         g$protocol$11128$DDDPb
                         g$parent-rcd-code$11129$DDDPb)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$11127$DDDPb
                         g$parent-rcd-code$11129$DDDPb
                         g$protocol$11128$DDDPb))))
                  (g$get-protocol-code$10990$DDDPb
                    (case-lambda
                      ((g$clause*$11120$DDDPb)
                       ((case-lambda
                          ((g$t$11121$DDDPb)
                           ((case-lambda
                              ((g$ls/false$11122$DDDPb)
                               (if g$ls/false$11122$DDDPb
                                 (apply
                                   (case-lambda
                                     ((g$expr$11123$DDDPb)
                                      g$expr$11123$DDDPb))
                                   g$ls/false$11122$DDDPb)
                                 ((case-lambda
                                    ((g$t$11124$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$11125$DDDPb)
                                         (if g$ls/false$11125$DDDPb
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$11125$DDDPb)
                                           (g$syntax-violation$9835$DDDPb
                                             '#f
                                             '"invalid syntax"
                                             g$t$11124$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$11124$DDDPb
                                        '_))))
                                  g$t$11121$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$11121$DDDPb
                              '(_ any)))))
                        (g$get-clause$10985$DDDPb
                          'protocol
                          g$clause*$11120$DDDPb)))))
                  (g$get-fields$10991$DDDPb
                    (case-lambda
                      ((g$clause*$11111$DDDPb)
                       ((case-lambda
                          ((g$t$11112$DDDPb)
                           ((case-lambda
                              ((g$ls/false$11113$DDDPb)
                               (if g$ls/false$11113$DDDPb
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$11113$DDDPb)
                                 ((case-lambda
                                    ((g$t$11114$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$11115$DDDPb)
                                         (if g$ls/false$11115$DDDPb
                                           (apply
                                             (case-lambda
                                               ((g$f*$11116$DDDPb)
                                                g$f*$11116$DDDPb))
                                             g$ls/false$11115$DDDPb)
                                           ((case-lambda
                                              ((g$t$11117$DDDPb)
                                               ((case-lambda
                                                  ((g$ls/false$11118$DDDPb)
                                                   (if g$ls/false$11118$DDDPb
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$11119$DDDPb)
                                                          (g$get-fields$10991$DDDPb
                                                            g$rest$11119$DDDPb)))
                                                       g$ls/false$11118$DDDPb)
                                                     (g$syntax-violation$9835$DDDPb
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$11117$DDDPb))))
                                                (g$syntax-dispatch$9717$DDDPb
                                                  g$t$11117$DDDPb
                                                  '(_ . any)))))
                                            g$t$11114$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$11114$DDDPb
                                        '((#(scheme-id fields)
                                           .
                                           each-any)
                                          .
                                          _)))))
                                  g$t$11112$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$11112$DDDPb
                              '()))))
                        g$clause*$11111$DDDPb))))
                  (g$get-mutator-indices$10992$DDDPb
                    (case-lambda
                      ((g$fields$11099$DDDPb)
                       ((letrec ((g$f$11100$DDDPb
                                   (case-lambda
                                     ((g$fields$11101$DDDPb
                                        g$i$11102$DDDPb)
                                      ((case-lambda
                                         ((g$t$11103$DDDPb)
                                          ((case-lambda
                                             ((g$ls/false$11104$DDDPb)
                                              (if g$ls/false$11104$DDDPb
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$11104$DDDPb)
                                                ((case-lambda
                                                   ((g$t$11105$DDDPb)
                                                    ((case-lambda
                                                       ((g$ls/false$11106$DDDPb)
                                                        (if g$ls/false$11106$DDDPb
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$11107$DDDPb)
                                                               (cons
                                                                 g$i$11102$DDDPb
                                                                 (g$f$11100$DDDPb
                                                                   g$rest$11107$DDDPb
                                                                   (+ g$i$11102$DDDPb
                                                                      '1)))))
                                                            g$ls/false$11106$DDDPb)
                                                          ((case-lambda
                                                             ((g$t$11108$DDDPb)
                                                              ((case-lambda
                                                                 ((g$ls/false$11109$DDDPb)
                                                                  (if g$ls/false$11109$DDDPb
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$11110$DDDPb)
                                                                         (g$f$11100$DDDPb
                                                                           g$rest$11110$DDDPb
                                                                           (+ g$i$11102$DDDPb
                                                                              '1))))
                                                                      g$ls/false$11109$DDDPb)
                                                                    (g$syntax-violation$9835$DDDPb
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$11108$DDDPb))))
                                                               (g$syntax-dispatch$9717$DDDPb
                                                                 g$t$11108$DDDPb
                                                                 '(_ .
                                                                     any)))))
                                                           g$t$11105$DDDPb))))
                                                     (g$syntax-dispatch$9717$DDDPb
                                                       g$t$11105$DDDPb
                                                       '((#(scheme-id
                                                            mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$11103$DDDPb))))
                                           (g$syntax-dispatch$9717$DDDPb
                                             g$t$11103$DDDPb
                                             '()))))
                                       g$fields$11101$DDDPb)))))
                          g$f$11100$DDDPb)
                        g$fields$11099$DDDPb
                        '0))))
                  (g$get-mutators$10993$DDDPb
                    (case-lambda
                      ((g$foo$11078$DDDPb g$fields$11079$DDDPb)
                       (letrec* ((g$gen-name$11080$DDDPb
                                   (case-lambda
                                     ((g$x$11098$DDDPb)
                                      (g$datum->syntax$9837$DDDPb
                                        g$foo$11078$DDDPb
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$9838$DDDPb
                                                g$foo$11078$DDDPb))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$9838$DDDPb
                                                g$x$11098$DDDPb))
                                            '"-set!")))))))
                         ((letrec ((g$f$11081$DDDPb
                                     (case-lambda
                                       ((g$fields$11082$DDDPb)
                                        ((case-lambda
                                           ((g$t$11083$DDDPb)
                                            ((case-lambda
                                               ((g$ls/false$11084$DDDPb)
                                                (if g$ls/false$11084$DDDPb
                                                  (apply
                                                    (case-lambda
                                                      (() '()))
                                                    g$ls/false$11084$DDDPb)
                                                  ((case-lambda
                                                     ((g$t$11085$DDDPb)
                                                      ((case-lambda
                                                         ((g$ls/false$11086$DDDPb)
                                                          (if g$ls/false$11086$DDDPb
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$11087$DDDPb
                                                                   g$accessor$11088$DDDPb
                                                                   g$mutator$11089$DDDPb
                                                                   g$rest$11090$DDDPb)
                                                                 (cons
                                                                   g$mutator$11089$DDDPb
                                                                   (g$f$11081$DDDPb
                                                                     g$rest$11090$DDDPb))))
                                                              g$ls/false$11086$DDDPb)
                                                            ((case-lambda
                                                               ((g$t$11091$DDDPb)
                                                                ((case-lambda
                                                                   ((g$ls/false$11092$DDDPb)
                                                                    (if g$ls/false$11092$DDDPb
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$11093$DDDPb
                                                                             g$rest$11094$DDDPb)
                                                                           (cons
                                                                             (g$gen-name$11080$DDDPb
                                                                               g$name$11093$DDDPb)
                                                                             (g$f$11081$DDDPb
                                                                               g$rest$11094$DDDPb))))
                                                                        g$ls/false$11092$DDDPb)
                                                                      ((case-lambda
                                                                         ((g$t$11095$DDDPb)
                                                                          ((case-lambda
                                                                             ((g$ls/false$11096$DDDPb)
                                                                              (if g$ls/false$11096$DDDPb
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$11097$DDDPb)
                                                                                     (g$f$11081$DDDPb
                                                                                       g$rest$11097$DDDPb)))
                                                                                  g$ls/false$11096$DDDPb)
                                                                                (g$syntax-violation$9835$DDDPb
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$11095$DDDPb))))
                                                                           (g$syntax-dispatch$9717$DDDPb
                                                                             g$t$11095$DDDPb
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$11091$DDDPb))))
                                                                 (g$syntax-dispatch$9717$DDDPb
                                                                   g$t$11091$DDDPb
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$11085$DDDPb))))
                                                       (g$syntax-dispatch$9717$DDDPb
                                                         g$t$11085$DDDPb
                                                         '((#(scheme-id
                                                              mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$11083$DDDPb))))
                                             (g$syntax-dispatch$9717$DDDPb
                                               g$t$11083$DDDPb
                                               '()))))
                                         g$fields$11082$DDDPb)))))
                            g$f$11081$DDDPb)
                          g$fields$11079$DDDPb)))))
                  (g$get-accessors$10994$DDDPb
                    (case-lambda
                      ((g$foo$11044$DDDPb g$fields$11045$DDDPb)
                       (letrec* ((g$gen-name$11046$DDDPb
                                   (case-lambda
                                     ((g$x$11077$DDDPb)
                                      (g$datum->syntax$9837$DDDPb
                                        g$foo$11044$DDDPb
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$9838$DDDPb
                                                g$foo$11044$DDDPb))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$9838$DDDPb
                                                g$x$11077$DDDPb)))))))))
                         (g$map$5753$DDDPb
                           (case-lambda
                             ((g$field$11047$DDDPb)
                              ((case-lambda
                                 ((g$t$11048$DDDPb)
                                  ((case-lambda
                                     ((g$ls/false$11049$DDDPb)
                                      (if (if g$ls/false$11049$DDDPb
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$11050$DDDPb
                                                     g$accessor$11051$DDDPb
                                                     g$mutator$11052$DDDPb)
                                                   (g$id?$9354$DDDPb
                                                     g$accessor$11051$DDDPb)))
                                                g$ls/false$11049$DDDPb))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$11053$DDDPb
                                               g$accessor$11054$DDDPb
                                               g$mutator$11055$DDDPb)
                                             g$accessor$11054$DDDPb))
                                          g$ls/false$11049$DDDPb)
                                        ((case-lambda
                                           ((g$t$11056$DDDPb)
                                            ((case-lambda
                                               ((g$ls/false$11057$DDDPb)
                                                (if (if g$ls/false$11057$DDDPb
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$11058$DDDPb
                                                               g$accessor$11059$DDDPb)
                                                             (g$id?$9354$DDDPb
                                                               g$accessor$11059$DDDPb)))
                                                          g$ls/false$11057$DDDPb))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$11060$DDDPb
                                                         g$accessor$11061$DDDPb)
                                                       g$accessor$11061$DDDPb))
                                                    g$ls/false$11057$DDDPb)
                                                  ((case-lambda
                                                     ((g$t$11062$DDDPb)
                                                      ((case-lambda
                                                         ((g$ls/false$11063$DDDPb)
                                                          (if (if g$ls/false$11063$DDDPb
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$11064$DDDPb)
                                                                       (g$id?$9354$DDDPb
                                                                         g$name$11064$DDDPb)))
                                                                    g$ls/false$11063$DDDPb))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$11065$DDDPb)
                                                                 (g$gen-name$11046$DDDPb
                                                                   g$name$11065$DDDPb)))
                                                              g$ls/false$11063$DDDPb)
                                                            ((case-lambda
                                                               ((g$t$11066$DDDPb)
                                                                ((case-lambda
                                                                   ((g$ls/false$11067$DDDPb)
                                                                    (if (if g$ls/false$11067$DDDPb
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$11068$DDDPb)
                                                                                 (g$id?$9354$DDDPb
                                                                                   g$name$11068$DDDPb)))
                                                                              g$ls/false$11067$DDDPb))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$11069$DDDPb)
                                                                           (g$gen-name$11046$DDDPb
                                                                             g$name$11069$DDDPb)))
                                                                        g$ls/false$11067$DDDPb)
                                                                      ((case-lambda
                                                                         ((g$t$11070$DDDPb)
                                                                          ((case-lambda
                                                                             ((g$ls/false$11071$DDDPb)
                                                                              (if (if g$ls/false$11071$DDDPb
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$11072$DDDPb)
                                                                                           (g$id?$9354$DDDPb
                                                                                             g$name$11072$DDDPb)))
                                                                                        g$ls/false$11071$DDDPb))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$11073$DDDPb)
                                                                                     (g$gen-name$11046$DDDPb
                                                                                       g$name$11073$DDDPb)))
                                                                                  g$ls/false$11071$DDDPb)
                                                                                ((case-lambda
                                                                                   ((g$t$11074$DDDPb)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$11075$DDDPb)
                                                                                        (if g$ls/false$11075$DDDPb
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$11076$DDDPb)
                                                                                               (g$syntax-violation$9835$DDDPb
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$11047$DDDPb)))
                                                                                            g$ls/false$11075$DDDPb)
                                                                                          (g$syntax-violation$9835$DDDPb
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$11074$DDDPb))))
                                                                                     (g$syntax-dispatch$9717$DDDPb
                                                                                       g$t$11074$DDDPb
                                                                                       'any))))
                                                                                 g$t$11070$DDDPb))))
                                                                           (g$syntax-dispatch$9717$DDDPb
                                                                             g$t$11070$DDDPb
                                                                             'any))))
                                                                       g$t$11066$DDDPb))))
                                                                 (g$syntax-dispatch$9717$DDDPb
                                                                   g$t$11066$DDDPb
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$11062$DDDPb))))
                                                       (g$syntax-dispatch$9717$DDDPb
                                                         g$t$11062$DDDPb
                                                         '(#(scheme-id
                                                             mutable)
                                                           any)))))
                                                   g$t$11056$DDDPb))))
                                             (g$syntax-dispatch$9717$DDDPb
                                               g$t$11056$DDDPb
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$11048$DDDPb))))
                                   (g$syntax-dispatch$9717$DDDPb
                                     g$t$11048$DDDPb
                                     '(#(scheme-id mutable)
                                       any
                                       any
                                       any)))))
                               g$field$11047$DDDPb)))
                           g$fields$11045$DDDPb)))))
                  (g$enumerate$10995$DDDPb
                    (case-lambda
                      ((g$ls$11040$DDDPb)
                       ((letrec ((g$f$11041$DDDPb
                                   (case-lambda
                                     ((g$ls$11042$DDDPb g$i$11043$DDDPb)
                                      (if (null? g$ls$11042$DDDPb)
                                        '()
                                        (cons
                                          g$i$11043$DDDPb
                                          (g$f$11041$DDDPb
                                            (cdr g$ls$11042$DDDPb)
                                            (+ g$i$11043$DDDPb
                                               '1))))))))
                          g$f$11041$DDDPb)
                        g$ls$11040$DDDPb
                        '0))))
                  (g$do-define-record$10996$DDDPb
                    (case-lambda
                      ((g$namespec$11020$DDDPb g$clause*$11021$DDDPb)
                       ((case-lambda
                          ((g$foo$11022$DDDPb)
                           ((case-lambda
                              ((g$foo-rtd$11023$DDDPb)
                               ((case-lambda
                                  ((g$foo-rcd$11024$DDDPb)
                                   ((case-lambda
                                      ((g$protocol$11025$DDDPb)
                                       ((case-lambda
                                          ((g$make-foo$11026$DDDPb)
                                           ((case-lambda
                                              ((g$fields$11027$DDDPb)
                                               ((case-lambda
                                                  ((g$idx*$11028$DDDPb)
                                                   ((case-lambda
                                                      ((g$foo-x*$11029$DDDPb)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$11030$DDDPb)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$11031$DDDPb)
                                                               ((case-lambda
                                                                  ((g$foo?$11032$DDDPb)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$11033$DDDPb)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$11034$DDDPb)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$11035$DDDPb)
                                                                               (g$bless$9680$DDDPb
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$11023$DDDPb
                                                                                       g$foo-rtd-code$11033$DDDPb)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$11025$DDDPb
                                                                                         g$protocol-code$11035$DDDPb)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$11024$DDDPb
                                                                                           g$foo-rcd-code$11034$DDDPb)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$11022$DDDPb
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$11023$DDDPb)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$11024$DDDPb)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$11032$DDDPb
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$11023$DDDPb))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$11026$DDDPb
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$11024$DDDPb))
                                                                                               (append
                                                                                                 (g$map$5753$DDDPb
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$11036$DDDPb
                                                                                                        g$idx$11037$DDDPb)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$11036$DDDPb
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$11023$DDDPb
                                                                                                          g$idx$11037$DDDPb))))
                                                                                                   g$foo-x*$11029$DDDPb
                                                                                                   g$idx*$11028$DDDPb)
                                                                                                 (g$map$5753$DDDPb
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$11038$DDDPb
                                                                                                        g$idx$11039$DDDPb)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$11038$DDDPb
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$11023$DDDPb
                                                                                                          g$idx$11039$DDDPb))))
                                                                                                   g$set-foo-x!*$11030$DDDPb
                                                                                                   g$set-foo-idx*$11031$DDDPb))))))))))))
                                                                            (g$get-protocol-code$10990$DDDPb
                                                                              g$clause*$11021$DDDPb))))
                                                                        (g$foo-rcd-code$10989$DDDPb
                                                                          g$clause*$11021$DDDPb
                                                                          g$foo-rtd$11023$DDDPb
                                                                          g$protocol$11025$DDDPb
                                                                          (g$parent-rcd-code$10988$DDDPb
                                                                            g$clause*$11021$DDDPb)))))
                                                                    (g$foo-rtd-code$10986$DDDPb
                                                                      g$foo$11022$DDDPb
                                                                      g$clause*$11021$DDDPb
                                                                      (g$parent-rtd-code$10987$DDDPb
                                                                        g$clause*$11021$DDDPb)))))
                                                                (g$get-record-predicate-name$10984$DDDPb
                                                                  g$namespec$11020$DDDPb))))
                                                            (g$get-mutator-indices$10992$DDDPb
                                                              g$fields$11027$DDDPb))))
                                                        (g$get-mutators$10993$DDDPb
                                                          g$foo$11022$DDDPb
                                                          g$fields$11027$DDDPb))))
                                                    (g$get-accessors$10994$DDDPb
                                                      g$foo$11022$DDDPb
                                                      g$fields$11027$DDDPb))))
                                                (g$enumerate$10995$DDDPb
                                                  g$fields$11027$DDDPb))))
                                            (g$get-fields$10991$DDDPb
                                              g$clause*$11021$DDDPb))))
                                        (g$get-record-constructor-name$10983$DDDPb
                                          g$namespec$11020$DDDPb))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$10982$DDDPb
                          g$namespec$11020$DDDPb)))))
                  (g$verify-clauses$10997$DDDPb
                    (case-lambda
                      ((g$x$11002$DDDPb g$cls*$11003$DDDPb)
                       (letrec* ((g$valid-kwds$11004$DDDPb
                                   (g$map$5753$DDDPb
                                     g$bless$9680$DDDPb
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$11005$DDDPb
                                   (case-lambda
                                     ((g$x$11017$DDDPb g$ls$11018$DDDPb)
                                      (if (pair? g$ls$11018$DDDPb)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$11019$DDDPb)
                                              (if g$t$11019$DDDPb
                                                g$t$11019$DDDPb
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$11005$DDDPb
                                                    g$x$11017$DDDPb
                                                    (cdr g$ls$11018$DDDPb))))))
                                           (g$free-id=?$9358$DDDPb
                                             g$x$11017$DDDPb
                                             (car g$ls$11018$DDDPb))))
                                        '#f)))))
                         ((letrec ((g$f$11006$DDDPb
                                     (case-lambda
                                       ((g$cls*$11007$DDDPb
                                          g$seen*$11008$DDDPb)
                                        (if (not (null?
                                                   g$cls*$11007$DDDPb))
                                          ((case-lambda
                                             ((g$t$11009$DDDPb)
                                              ((case-lambda
                                                 ((g$ls/false$11010$DDDPb)
                                                  (if g$ls/false$11010$DDDPb
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$11011$DDDPb
                                                           g$rest$11012$DDDPb)
                                                         (if ((case-lambda
                                                                ((g$t$11013$DDDPb)
                                                                 (if g$t$11013$DDDPb
                                                                   g$t$11013$DDDPb
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$11005$DDDPb
                                                                            g$kwd$11011$DDDPb
                                                                            g$valid-kwds$11004$DDDPb))))))
                                                              (not (g$id?$9354$DDDPb
                                                                     g$kwd$11011$DDDPb)))
                                                           (g$syntax-violation$9835$DDDPb
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$11011$DDDPb)
                                                           (if (g$bound-id-member?$9361$DDDPb
                                                                 g$kwd$11011$DDDPb
                                                                 g$seen*$11008$DDDPb)
                                                             (g$syntax-violation$9835$DDDPb
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$11002$DDDPb
                                                               g$kwd$11011$DDDPb)
                                                             (g$f$11006$DDDPb
                                                               (cdr g$cls*$11007$DDDPb)
                                                               (cons
                                                                 g$kwd$11011$DDDPb
                                                                 g$seen*$11008$DDDPb))))))
                                                      g$ls/false$11010$DDDPb)
                                                    ((case-lambda
                                                       ((g$t$11014$DDDPb)
                                                        ((case-lambda
                                                           ((g$ls/false$11015$DDDPb)
                                                            (if g$ls/false$11015$DDDPb
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$11016$DDDPb)
                                                                   (g$syntax-violation$9835$DDDPb
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$11016$DDDPb)))
                                                                g$ls/false$11015$DDDPb)
                                                              (g$syntax-violation$9835$DDDPb
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$11014$DDDPb))))
                                                         (g$syntax-dispatch$9717$DDDPb
                                                           g$t$11014$DDDPb
                                                           'any))))
                                                     g$t$11009$DDDPb))))
                                               (g$syntax-dispatch$9717$DDDPb
                                                 g$t$11009$DDDPb
                                                 '(any . any)))))
                                           (car g$cls*$11007$DDDPb))
                                          (void))))))
                            g$f$11006$DDDPb)
                          g$cls*$11003$DDDPb
                          '()))))))
          ((case-lambda
             ((g$t$10998$DDDPb)
              ((case-lambda
                 ((g$ls/false$10999$DDDPb)
                  (if g$ls/false$10999$DDDPb
                    (apply
                      (case-lambda
                        ((g$namespec$11000$DDDPb g$clause*$11001$DDDPb)
                         (begin
                           (g$verify-clauses$10997$DDDPb
                             g$x$10980$DDDPb
                             g$clause*$11001$DDDPb)
                           (g$do-define-record$10996$DDDPb
                             g$namespec$11000$DDDPb
                             g$clause*$11001$DDDPb))))
                      g$ls/false$10999$DDDPb)
                    (g$syntax-violation$9835$DDDPb
                      '#f
                      '"invalid syntax"
                      g$t$10998$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$10998$DDDPb
                 '(_ any . each-any)))))
           g$x$10980$DDDPb)))))
   (g$define-condition-type-macro$9712$DDDPb
     g$define-condition-type-macro$13253$DDDPb
     (case-lambda
       ((g$x$11236$DDDPb)
        (letrec* ((g$mkname$11237$DDDPb
                    (case-lambda
                      ((g$name$11260$DDDPb g$suffix$11261$DDDPb)
                       (g$datum->syntax$9837$DDDPb
                         g$name$11260$DDDPb
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$9838$DDDPb
                                 g$name$11260$DDDPb))
                             g$suffix$11261$DDDPb)))))))
          ((case-lambda
             ((g$t$11238$DDDPb)
              ((case-lambda
                 ((g$ls/false$11239$DDDPb)
                  (if (if g$ls/false$11239$DDDPb
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$11240$DDDPb
                                 g$name$11241$DDDPb
                                 g$super$11242$DDDPb
                                 g$constructor$11243$DDDPb
                                 g$predicate$11244$DDDPb
                                 g$field*$11245$DDDPb
                                 g$accessor*$11246$DDDPb)
                               (if (g$id?$9354$DDDPb g$name$11241$DDDPb)
                                 (if (g$id?$9354$DDDPb
                                       g$super$11242$DDDPb)
                                   (if (g$id?$9354$DDDPb
                                         g$constructor$11243$DDDPb)
                                     (if (g$id?$9354$DDDPb
                                           g$predicate$11244$DDDPb)
                                       (if (g$for-all$5751$DDDPb
                                             g$id?$9354$DDDPb
                                             g$field*$11245$DDDPb)
                                         (begin
                                           '#f
                                           (g$for-all$5751$DDDPb
                                             g$id?$9354$DDDPb
                                             g$accessor*$11246$DDDPb))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$11239$DDDPb))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$11247$DDDPb
                           g$name$11248$DDDPb
                           g$super$11249$DDDPb
                           g$constructor$11250$DDDPb
                           g$predicate$11251$DDDPb
                           g$field*$11252$DDDPb
                           g$accessor*$11253$DDDPb)
                         ((case-lambda
                            ((g$aux-accessor*$11254$DDDPb)
                             (g$bless$9680$DDDPb
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$11248$DDDPb
                                         g$constructor$11250$DDDPb
                                         (gensym))
                                       (cons
                                         (list
                                           'parent
                                           g$super$11249$DDDPb)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$5753$DDDPb
                                               (case-lambda
                                                 ((g$field$11255$DDDPb
                                                    g$aux$11256$DDDPb)
                                                  (list
                                                    'immutable
                                                    g$field$11255$DDDPb
                                                    g$aux$11256$DDDPb)))
                                               g$field*$11252$DDDPb
                                               g$aux-accessor*$11254$DDDPb))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$11251$DDDPb
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$11248$DDDPb)))
                                     (g$map$5753$DDDPb
                                       (case-lambda
                                         ((g$accessor$11257$DDDPb
                                            g$aux$11258$DDDPb)
                                          (list
                                            'define
                                            g$accessor$11257$DDDPb
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$11248$DDDPb)
                                              g$aux$11258$DDDPb))))
                                       g$accessor*$11253$DDDPb
                                       g$aux-accessor*$11254$DDDPb)))))))
                          (g$map$5753$DDDPb
                            (case-lambda ((g$x$11259$DDDPb) (gensym)))
                            g$accessor*$11253$DDDPb))))
                      g$ls/false$11239$DDDPb)
                    (g$syntax-violation$9835$DDDPb
                      '#f
                      '"invalid syntax"
                      g$t$11238$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$11238$DDDPb
                 '(any any any any any . #(each (any any)))))))
           g$x$11236$DDDPb)))))
   (g$incorrect-usage-macro$9713$DDDPb
     g$incorrect-usage-macro$13254$DDDPb
     (case-lambda
       ((g$e$11262$DDDPb)
        (g$syntax-violation$9835$DDDPb
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$11262$DDDPb))))
   (g$parameterize-macro$9714$DDDPb
     g$parameterize-macro$13255$DDDPb
     (case-lambda
       ((g$e$11263$DDDPb)
        ((case-lambda
           ((g$t$11264$DDDPb)
            ((case-lambda
               ((g$ls/false$11265$DDDPb)
                (if g$ls/false$11265$DDDPb
                  (apply
                    (case-lambda
                      ((g$b$11266$DDDPb g$b*$11267$DDDPb)
                       (g$bless$9680$DDDPb
                         (cons
                           'let
                           (cons
                             '()
                             (cons
                               g$b$11266$DDDPb
                               g$b*$11267$DDDPb))))))
                    g$ls/false$11265$DDDPb)
                  ((case-lambda
                     ((g$t$11268$DDDPb)
                      ((case-lambda
                         ((g$ls/false$11269$DDDPb)
                          (if g$ls/false$11269$DDDPb
                            (apply
                              (case-lambda
                                ((g$olhs*$11270$DDDPb
                                   g$orhs*$11271$DDDPb
                                   g$b$11272$DDDPb
                                   g$b*$11273$DDDPb)
                                 ((case-lambda
                                    ((g$lhs*$11274$DDDPb
                                       g$rhs*$11275$DDDPb)
                                     (g$bless$9680$DDDPb
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$11274$DDDPb
                                             g$rhs*$11275$DDDPb)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$5753$DDDPb
                                                       (case-lambda
                                                         ((g$lhs$11276$DDDPb
                                                            g$rhs$11277$DDDPb)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$11276$DDDPb)))
                                                            (list
                                                              g$lhs$11276$DDDPb
                                                              g$rhs$11277$DDDPb)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$11277$DDDPb
                                                                '(t))))))
                                                       g$lhs*$11274$DDDPb
                                                       g$rhs*$11275$DDDPb)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$11272$DDDPb
                                                         g$b*$11273$DDDPb)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$11270$DDDPb
                                           g$orhs*$11271$DDDPb)))))
                                  (g$generate-temporaries$9825$DDDPb
                                    g$olhs*$11270$DDDPb)
                                  (g$generate-temporaries$9825$DDDPb
                                    g$orhs*$11271$DDDPb))))
                              g$ls/false$11269$DDDPb)
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"invalid syntax"
                              g$t$11268$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$11268$DDDPb
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$11264$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$11264$DDDPb
               '(_ () any . each-any)))))
         g$e$11263$DDDPb))))
   (g$foreign-call-transformer$9715$DDDPb
     g$foreign-call-transformer$13256$DDDPb
     (case-lambda
       ((g$e$11278$DDDPb g$r$11279$DDDPb g$mr$11280$DDDPb)
        ((case-lambda
           ((g$t$11281$DDDPb)
            ((case-lambda
               ((g$ls/false$11282$DDDPb)
                (if g$ls/false$11282$DDDPb
                  (apply
                    (case-lambda
                      ((g$name$11283$DDDPb g$arg*$11284$DDDPb)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$9735$DDDPb
                             g$name$11283$DDDPb
                             g$r$11279$DDDPb
                             g$mr$11280$DDDPb)
                           (g$chi-expr*$9733$DDDPb
                             g$arg*$11284$DDDPb
                             g$r$11279$DDDPb
                             g$mr$11280$DDDPb)))))
                    g$ls/false$11282$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$11281$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$11281$DDDPb
               '(_ any . each-any)))))
         g$e$11278$DDDPb))))
   (g$convert-pattern$9716$DDDPb
     g$convert-pattern$13257$DDDPb
     (case-lambda
       ((g$pattern$11285$DDDPb g$keys$11286$DDDPb)
        (letrec* ((g$cvt*$11287$DDDPb
                    (case-lambda
                      ((g$p*$11367$DDDPb
                         g$n$11368$DDDPb
                         g$ids$11369$DDDPb)
                       (if (null? g$p*$11367$DDDPb)
                         (values '() g$ids$11369$DDDPb)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$11287$DDDPb
                                (cdr g$p*$11367$DDDPb)
                                g$n$11368$DDDPb
                                g$ids$11369$DDDPb)))
                           (case-lambda
                             ((g$y$11372$DDDPb g$ids$11373$DDDPb)
                              ((case-lambda
                                 ((g$ids$11374$DDDPb g$y$11375$DDDPb)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$11288$DDDPb
                                         (car g$p*$11367$DDDPb)
                                         g$n$11368$DDDPb
                                         g$ids$11374$DDDPb)))
                                    (case-lambda
                                      ((g$x$11378$DDDPb
                                         g$ids$11379$DDDPb)
                                       ((case-lambda
                                          ((g$ids$11380$DDDPb
                                             g$x$11381$DDDPb)
                                           (values
                                             (cons
                                               g$x$11381$DDDPb
                                               g$y$11375$DDDPb)
                                             g$ids$11380$DDDPb)))
                                        g$ids$11379$DDDPb
                                        g$x$11378$DDDPb))))))
                               g$ids$11373$DDDPb
                               g$y$11372$DDDPb))))))))
                  (g$cvt$11288$DDDPb
                    (case-lambda
                      ((g$p$11289$DDDPb
                         g$n$11290$DDDPb
                         g$ids$11291$DDDPb)
                       ((case-lambda
                          ((g$t$11292$DDDPb)
                           ((case-lambda
                              ((g$ls/false$11293$DDDPb)
                               (if (if g$ls/false$11293$DDDPb
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$11294$DDDPb)
                                            (g$id?$9354$DDDPb
                                              g$id$11294$DDDPb)))
                                         g$ls/false$11293$DDDPb))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$11295$DDDPb)
                                      (if (g$bound-id-member?$9361$DDDPb
                                            g$p$11289$DDDPb
                                            g$keys$11286$DDDPb)
                                        (values
                                          (vector
                                            'free-id
                                            g$p$11289$DDDPb)
                                          g$ids$11291$DDDPb)
                                        (if (g$free-id=?$9358$DDDPb
                                              g$p$11289$DDDPb
                                              (g$scheme-stx$9660$DDDPb
                                                '_))
                                          (values '_ g$ids$11291$DDDPb)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$11289$DDDPb
                                                g$n$11290$DDDPb)
                                              g$ids$11291$DDDPb))))))
                                   g$ls/false$11293$DDDPb)
                                 ((case-lambda
                                    ((g$t$11296$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$11297$DDDPb)
                                         (if (if g$ls/false$11297$DDDPb
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$11298$DDDPb
                                                        g$dots$11299$DDDPb)
                                                      (g$ellipsis?$9718$DDDPb
                                                        g$dots$11299$DDDPb)))
                                                   g$ls/false$11297$DDDPb))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$11300$DDDPb
                                                  g$dots$11301$DDDPb)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$11288$DDDPb
                                                       g$p$11300$DDDPb
                                                       (+ g$n$11290$DDDPb
                                                          '1)
                                                       g$ids$11291$DDDPb)))
                                                  (case-lambda
                                                    ((g$p$11304$DDDPb
                                                       g$ids$11305$DDDPb)
                                                     ((case-lambda
                                                        ((g$ids$11306$DDDPb
                                                           g$p$11307$DDDPb)
                                                         (values
                                                           (if (eq? g$p$11307$DDDPb
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$11307$DDDPb))
                                                           g$ids$11306$DDDPb)))
                                                      g$ids$11305$DDDPb
                                                      g$p$11304$DDDPb))))))
                                             g$ls/false$11297$DDDPb)
                                           ((case-lambda
                                              ((g$t$11308$DDDPb)
                                               ((case-lambda
                                                  ((g$ls/false$11309$DDDPb)
                                                   (if (if g$ls/false$11309$DDDPb
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$11310$DDDPb
                                                                  g$dots$11311$DDDPb
                                                                  g$ys$11312$DDDPb
                                                                  g$z$11313$DDDPb)
                                                                (g$ellipsis?$9718$DDDPb
                                                                  g$dots$11311$DDDPb)))
                                                             g$ls/false$11309$DDDPb))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$11314$DDDPb
                                                            g$dots$11315$DDDPb
                                                            g$ys$11316$DDDPb
                                                            g$z$11317$DDDPb)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$11288$DDDPb
                                                                 g$z$11317$DDDPb
                                                                 g$n$11290$DDDPb
                                                                 g$ids$11291$DDDPb)))
                                                            (case-lambda
                                                              ((g$z$11320$DDDPb
                                                                 g$ids$11321$DDDPb)
                                                               ((case-lambda
                                                                  ((g$ids$11322$DDDPb
                                                                     g$z$11323$DDDPb)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$11287$DDDPb
                                                                          g$ys$11316$DDDPb
                                                                          g$n$11290$DDDPb
                                                                          g$ids$11322$DDDPb)))
                                                                     (case-lambda
                                                                       ((g$ys$11326$DDDPb
                                                                          g$ids$11327$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$ids$11328$DDDPb
                                                                              g$ys$11329$DDDPb)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$11288$DDDPb
                                                                                   g$x$11314$DDDPb
                                                                                   (+ g$n$11290$DDDPb
                                                                                      '1)
                                                                                   g$ids$11328$DDDPb)))
                                                                              (case-lambda
                                                                                ((g$x$11332$DDDPb
                                                                                   g$ids$11333$DDDPb)
                                                                                 ((case-lambda
                                                                                    ((g$ids$11334$DDDPb
                                                                                       g$x$11335$DDDPb)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$11335$DDDPb
                                                                                         (g$reverse$6431$DDDPb
                                                                                           g$ys$11329$DDDPb)
                                                                                         g$z$11323$DDDPb)
                                                                                       g$ids$11334$DDDPb)))
                                                                                  g$ids$11333$DDDPb
                                                                                  g$x$11332$DDDPb))))))
                                                                         g$ids$11327$DDDPb
                                                                         g$ys$11326$DDDPb))))))
                                                                g$ids$11321$DDDPb
                                                                g$z$11320$DDDPb))))))
                                                       g$ls/false$11309$DDDPb)
                                                     ((case-lambda
                                                        ((g$t$11336$DDDPb)
                                                         ((case-lambda
                                                            ((g$ls/false$11337$DDDPb)
                                                             (if g$ls/false$11337$DDDPb
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$11338$DDDPb
                                                                      g$y$11339$DDDPb)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$11288$DDDPb
                                                                           g$y$11339$DDDPb
                                                                           g$n$11290$DDDPb
                                                                           g$ids$11291$DDDPb)))
                                                                      (case-lambda
                                                                        ((g$y$11342$DDDPb
                                                                           g$ids$11343$DDDPb)
                                                                         ((case-lambda
                                                                            ((g$ids$11344$DDDPb
                                                                               g$y$11345$DDDPb)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$11288$DDDPb
                                                                                    g$x$11338$DDDPb
                                                                                    g$n$11290$DDDPb
                                                                                    g$ids$11344$DDDPb)))
                                                                               (case-lambda
                                                                                 ((g$x$11348$DDDPb
                                                                                    g$ids$11349$DDDPb)
                                                                                  ((case-lambda
                                                                                     ((g$ids$11350$DDDPb
                                                                                        g$x$11351$DDDPb)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$11351$DDDPb
                                                                                          g$y$11345$DDDPb)
                                                                                        g$ids$11350$DDDPb)))
                                                                                   g$ids$11349$DDDPb
                                                                                   g$x$11348$DDDPb))))))
                                                                          g$ids$11343$DDDPb
                                                                          g$y$11342$DDDPb))))))
                                                                 g$ls/false$11337$DDDPb)
                                                               ((case-lambda
                                                                  ((g$t$11352$DDDPb)
                                                                   ((case-lambda
                                                                      ((g$ls/false$11353$DDDPb)
                                                                       (if g$ls/false$11353$DDDPb
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$11291$DDDPb)))
                                                                           g$ls/false$11353$DDDPb)
                                                                         ((case-lambda
                                                                            ((g$t$11354$DDDPb)
                                                                             ((case-lambda
                                                                                ((g$ls/false$11355$DDDPb)
                                                                                 (if (if g$ls/false$11355$DDDPb
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$11356$DDDPb)
                                                                                              (not (g$stx?$9326$DDDPb
                                                                                                     g$p$11356$DDDPb))))
                                                                                           g$ls/false$11355$DDDPb))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$11357$DDDPb)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$11288$DDDPb
                                                                                               g$p$11357$DDDPb
                                                                                               g$n$11290$DDDPb
                                                                                               g$ids$11291$DDDPb)))
                                                                                          (case-lambda
                                                                                            ((g$p$11360$DDDPb
                                                                                               g$ids$11361$DDDPb)
                                                                                             ((case-lambda
                                                                                                ((g$ids$11362$DDDPb
                                                                                                   g$p$11363$DDDPb)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$11363$DDDPb)
                                                                                                   g$ids$11362$DDDPb)))
                                                                                              g$ids$11361$DDDPb
                                                                                              g$p$11360$DDDPb))))))
                                                                                     g$ls/false$11355$DDDPb)
                                                                                   ((case-lambda
                                                                                      ((g$t$11364$DDDPb)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$11365$DDDPb)
                                                                                           (if g$ls/false$11365$DDDPb
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$11366$DDDPb)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$9365$DDDPb
                                                                                                        g$datum$11366$DDDPb))
                                                                                                    g$ids$11291$DDDPb)))
                                                                                               g$ls/false$11365$DDDPb)
                                                                                             (g$syntax-violation$9835$DDDPb
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$11364$DDDPb))))
                                                                                        (g$syntax-dispatch$9717$DDDPb
                                                                                          g$t$11364$DDDPb
                                                                                          'any))))
                                                                                    g$t$11354$DDDPb))))
                                                                              (g$syntax-dispatch$9717$DDDPb
                                                                                g$t$11354$DDDPb
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$11352$DDDPb))))
                                                                    (g$syntax-dispatch$9717$DDDPb
                                                                      g$t$11352$DDDPb
                                                                      '()))))
                                                                g$t$11336$DDDPb))))
                                                          (g$syntax-dispatch$9717$DDDPb
                                                            g$t$11336$DDDPb
                                                            '(any .
                                                                  any)))))
                                                      g$t$11308$DDDPb))))
                                                (g$syntax-dispatch$9717$DDDPb
                                                  g$t$11308$DDDPb
                                                  '(any any
                                                        .
                                                        #(each+
                                                          any
                                                          ()
                                                          any))))))
                                            g$t$11296$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$11296$DDDPb
                                        '(any any)))))
                                  g$t$11292$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$11292$DDDPb
                              'any))))
                        g$p$11289$DDDPb)))))
          (g$cvt$11288$DDDPb g$pattern$11285$DDDPb '0 '())))))
   (g$syntax-dispatch$9717$DDDPb
     g$syntax-dispatch$13258$DDDPb
     (case-lambda
       ((g$e$11382$DDDPb g$p$11383$DDDPb)
        (letrec* ((g$stx^$11384$DDDPb
                    (case-lambda
                      ((g$e$11492$DDDPb
                         g$m*$11493$DDDPb
                         g$s*$11494$DDDPb
                         g$ae*$11495$DDDPb)
                       (if (if (null? g$m*$11493$DDDPb)
                             (if (null? g$s*$11494$DDDPb)
                               (begin '#f (null? g$ae*$11495$DDDPb))
                               '#f)
                             '#f)
                         g$e$11492$DDDPb
                         (g$mkstx$9342$DDDPb
                           g$e$11492$DDDPb
                           g$m*$11493$DDDPb
                           g$s*$11494$DDDPb
                           g$ae*$11495$DDDPb)))))
                  (g$match-each$11385$DDDPb
                    (case-lambda
                      ((g$e$11476$DDDPb
                         g$p$11477$DDDPb
                         g$m*$11478$DDDPb
                         g$s*$11479$DDDPb
                         g$ae*$11480$DDDPb)
                       (if (pair? g$e$11476$DDDPb)
                         ((case-lambda
                            ((g$first$11481$DDDPb)
                             (if g$first$11481$DDDPb
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$11482$DDDPb)
                                     (if g$rest$11482$DDDPb
                                       (begin
                                         '#f
                                         (cons
                                           g$first$11481$DDDPb
                                           g$rest$11482$DDDPb))
                                       '#f)))
                                  (g$match-each$11385$DDDPb
                                    (cdr g$e$11476$DDDPb)
                                    g$p$11477$DDDPb
                                    g$m*$11478$DDDPb
                                    g$s*$11479$DDDPb
                                    g$ae*$11480$DDDPb)))
                               '#f)))
                          (g$match$11391$DDDPb
                            (car g$e$11476$DDDPb)
                            g$p$11477$DDDPb
                            g$m*$11478$DDDPb
                            g$s*$11479$DDDPb
                            g$ae*$11480$DDDPb
                            '()))
                         (if (null? g$e$11476$DDDPb)
                           '()
                           (if (g$stx?$9326$DDDPb g$e$11476$DDDPb)
                             (if (not (g$top-marked?$9288$DDDPb
                                        g$m*$11478$DDDPb))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$9341$DDDPb
                                        g$m*$11478$DDDPb
                                        g$s*$11479$DDDPb
                                        g$ae*$11480$DDDPb
                                        g$e$11476$DDDPb)))
                                   (case-lambda
                                     ((g$m*$11486$DDDPb
                                        g$s*$11487$DDDPb
                                        g$ae*$11488$DDDPb)
                                      ((case-lambda
                                         ((g$ae*$11489$DDDPb
                                            g$s*$11490$DDDPb
                                            g$m*$11491$DDDPb)
                                          (g$match-each$11385$DDDPb
                                            (g$stx-expr$9328$DDDPb
                                              g$e$11476$DDDPb)
                                            g$p$11477$DDDPb
                                            g$m*$11491$DDDPb
                                            g$s*$11490$DDDPb
                                            g$ae*$11489$DDDPb)))
                                       g$ae*$11488$DDDPb
                                       g$s*$11487$DDDPb
                                       g$m*$11486$DDDPb)))))
                               '#f)
                             (if (annotation? g$e$11476$DDDPb)
                               (g$match-each$11385$DDDPb
                                 (annotation-expression g$e$11476$DDDPb)
                                 g$p$11477$DDDPb
                                 g$m*$11478$DDDPb
                                 g$s*$11479$DDDPb
                                 g$ae*$11480$DDDPb)
                               '#f)))))))
                  (g$match-each+$11386$DDDPb
                    (case-lambda
                      ((g$e$11444$DDDPb
                         g$x-pat$11445$DDDPb
                         g$y-pat$11446$DDDPb
                         g$z-pat$11447$DDDPb
                         g$m*$11448$DDDPb
                         g$s*$11449$DDDPb
                         g$ae*$11450$DDDPb
                         g$r$11451$DDDPb)
                       ((letrec ((g$f$11452$DDDPb
                                   (case-lambda
                                     ((g$e$11453$DDDPb
                                        g$m*$11454$DDDPb
                                        g$s*$11455$DDDPb
                                        g$ae*$11456$DDDPb)
                                      (if (pair? g$e$11453$DDDPb)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$11452$DDDPb
                                               (cdr g$e$11453$DDDPb)
                                               g$m*$11454$DDDPb
                                               g$s*$11455$DDDPb
                                               g$ae*$11456$DDDPb)))
                                          (case-lambda
                                            ((g$xr*$11460$DDDPb
                                               g$y-pat$11461$DDDPb
                                               g$r$11462$DDDPb)
                                             ((case-lambda
                                                ((g$r$11463$DDDPb
                                                   g$y-pat$11464$DDDPb
                                                   g$xr*$11465$DDDPb)
                                                 (if g$r$11463$DDDPb
                                                   (if (null?
                                                         g$y-pat$11464$DDDPb)
                                                     ((case-lambda
                                                        ((g$xr$11466$DDDPb)
                                                         (if g$xr$11466$DDDPb
                                                           (values
                                                             (cons
                                                               g$xr$11466$DDDPb
                                                               g$xr*$11465$DDDPb)
                                                             g$y-pat$11464$DDDPb
                                                             g$r$11463$DDDPb)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$11391$DDDPb
                                                        (car g$e$11453$DDDPb)
                                                        g$x-pat$11445$DDDPb
                                                        g$m*$11454$DDDPb
                                                        g$s*$11455$DDDPb
                                                        g$ae*$11456$DDDPb
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$11464$DDDPb)
                                                       (g$match$11391$DDDPb
                                                         (car g$e$11453$DDDPb)
                                                         (car g$y-pat$11464$DDDPb)
                                                         g$m*$11454$DDDPb
                                                         g$s*$11455$DDDPb
                                                         g$ae*$11456$DDDPb
                                                         g$r$11463$DDDPb)))
                                                   (values
                                                     '#f
                                                     '#f
                                                     '#f))))
                                              g$r$11462$DDDPb
                                              g$y-pat$11461$DDDPb
                                              g$xr*$11460$DDDPb))))
                                        (if (g$stx?$9326$DDDPb
                                              g$e$11453$DDDPb)
                                          (if (g$top-marked?$9288$DDDPb
                                                g$m*$11454$DDDPb)
                                            (values
                                              '()
                                              g$y-pat$11446$DDDPb
                                              (g$match$11391$DDDPb
                                                g$e$11453$DDDPb
                                                g$z-pat$11447$DDDPb
                                                g$m*$11454$DDDPb
                                                g$s*$11455$DDDPb
                                                g$ae*$11456$DDDPb
                                                g$r$11451$DDDPb))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$9341$DDDPb
                                                   g$m*$11454$DDDPb
                                                   g$s*$11455$DDDPb
                                                   g$ae*$11456$DDDPb
                                                   g$e$11453$DDDPb)))
                                              (case-lambda
                                                ((g$m*$11470$DDDPb
                                                   g$s*$11471$DDDPb
                                                   g$ae*$11472$DDDPb)
                                                 ((case-lambda
                                                    ((g$ae*$11473$DDDPb
                                                       g$s*$11474$DDDPb
                                                       g$m*$11475$DDDPb)
                                                     (g$f$11452$DDDPb
                                                       (g$stx-expr$9328$DDDPb
                                                         g$e$11453$DDDPb)
                                                       g$m*$11475$DDDPb
                                                       g$s*$11474$DDDPb
                                                       g$ae*$11473$DDDPb)))
                                                  g$ae*$11472$DDDPb
                                                  g$s*$11471$DDDPb
                                                  g$m*$11470$DDDPb)))))
                                          (if (annotation?
                                                g$e$11453$DDDPb)
                                            (g$f$11452$DDDPb
                                              (annotation-expression
                                                g$e$11453$DDDPb)
                                              g$m*$11454$DDDPb
                                              g$s*$11455$DDDPb
                                              g$ae*$11456$DDDPb)
                                            (values
                                              '()
                                              g$y-pat$11446$DDDPb
                                              (g$match$11391$DDDPb
                                                g$e$11453$DDDPb
                                                g$z-pat$11447$DDDPb
                                                g$m*$11454$DDDPb
                                                g$s*$11455$DDDPb
                                                g$ae*$11456$DDDPb
                                                g$r$11451$DDDPb)))))))))
                          g$f$11452$DDDPb)
                        g$e$11444$DDDPb
                        g$m*$11448$DDDPb
                        g$s*$11449$DDDPb
                        g$ae*$11450$DDDPb))))
                  (g$match-each-any$11387$DDDPb
                    (case-lambda
                      ((g$e$11430$DDDPb
                         g$m*$11431$DDDPb
                         g$s*$11432$DDDPb
                         g$ae*$11433$DDDPb)
                       (if (pair? g$e$11430$DDDPb)
                         ((case-lambda
                            ((g$l$11434$DDDPb)
                             (if g$l$11434$DDDPb
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$11384$DDDPb
                                     (car g$e$11430$DDDPb)
                                     g$m*$11431$DDDPb
                                     g$s*$11432$DDDPb
                                     g$ae*$11433$DDDPb)
                                   g$l$11434$DDDPb))
                               '#f)))
                          (g$match-each-any$11387$DDDPb
                            (cdr g$e$11430$DDDPb)
                            g$m*$11431$DDDPb
                            g$s*$11432$DDDPb
                            g$ae*$11433$DDDPb))
                         (if (null? g$e$11430$DDDPb)
                           '()
                           (if (g$stx?$9326$DDDPb g$e$11430$DDDPb)
                             (if (not (g$top-marked?$9288$DDDPb
                                        g$m*$11431$DDDPb))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$9341$DDDPb
                                        g$m*$11431$DDDPb
                                        g$s*$11432$DDDPb
                                        g$ae*$11433$DDDPb
                                        g$e$11430$DDDPb)))
                                   (case-lambda
                                     ((g$m*$11438$DDDPb
                                        g$s*$11439$DDDPb
                                        g$ae*$11440$DDDPb)
                                      ((case-lambda
                                         ((g$ae*$11441$DDDPb
                                            g$s*$11442$DDDPb
                                            g$m*$11443$DDDPb)
                                          (g$match-each-any$11387$DDDPb
                                            (g$stx-expr$9328$DDDPb
                                              g$e$11430$DDDPb)
                                            g$m*$11443$DDDPb
                                            g$s*$11442$DDDPb
                                            g$ae*$11441$DDDPb)))
                                       g$ae*$11440$DDDPb
                                       g$s*$11439$DDDPb
                                       g$m*$11438$DDDPb)))))
                               '#f)
                             (if (annotation? g$e$11430$DDDPb)
                               (g$match-each-any$11387$DDDPb
                                 (annotation-expression g$e$11430$DDDPb)
                                 g$m*$11431$DDDPb
                                 g$s*$11432$DDDPb
                                 g$ae*$11433$DDDPb)
                               '#f)))))))
                  (g$match-empty$11388$DDDPb
                    (case-lambda
                      ((g$p$11427$DDDPb g$r$11428$DDDPb)
                       (if (null? g$p$11427$DDDPb)
                         g$r$11428$DDDPb
                         (if (eq? g$p$11427$DDDPb '_)
                           g$r$11428$DDDPb
                           (if (eq? g$p$11427$DDDPb 'any)
                             (cons '() g$r$11428$DDDPb)
                             (if (pair? g$p$11427$DDDPb)
                               (g$match-empty$11388$DDDPb
                                 (car g$p$11427$DDDPb)
                                 (g$match-empty$11388$DDDPb
                                   (cdr g$p$11427$DDDPb)
                                   g$r$11428$DDDPb))
                               (if (eq? g$p$11427$DDDPb 'each-any)
                                 (cons '() g$r$11428$DDDPb)
                                 ((case-lambda
                                    ((g$t$11429$DDDPb)
                                     (if (eqv? g$t$11429$DDDPb 'each)
                                       (g$match-empty$11388$DDDPb
                                         (vector-ref g$p$11427$DDDPb '1)
                                         g$r$11428$DDDPb)
                                       (if (eqv? g$t$11429$DDDPb 'each+)
                                         (g$match-empty$11388$DDDPb
                                           (vector-ref
                                             g$p$11427$DDDPb
                                             '1)
                                           (g$match-empty$11388$DDDPb
                                             (g$reverse$6431$DDDPb
                                               (vector-ref
                                                 g$p$11427$DDDPb
                                                 '2))
                                             (g$match-empty$11388$DDDPb
                                               (vector-ref
                                                 g$p$11427$DDDPb
                                                 '3)
                                               g$r$11428$DDDPb)))
                                         (if (g$memv$5746$DDDPb
                                               g$t$11429$DDDPb
                                               '(free-id atom))
                                           g$r$11428$DDDPb
                                           (if (g$memv$5746$DDDPb
                                                 g$t$11429$DDDPb
                                                 '(scheme-id atom))
                                             g$r$11428$DDDPb
                                             (if (eqv?
                                                   g$t$11429$DDDPb
                                                   'vector)
                                               (g$match-empty$11388$DDDPb
                                                 (vector-ref
                                                   g$p$11427$DDDPb
                                                   '1)
                                                 g$r$11428$DDDPb)
                                               (assertion-violation
                                                 'syntax-dispatch
                                                 '"invalid pattern"
                                                 g$p$11427$DDDPb))))))))
                                  (vector-ref
                                    g$p$11427$DDDPb
                                    '0))))))))))
                  (g$combine$11389$DDDPb
                    (case-lambda
                      ((g$r*$11425$DDDPb g$r$11426$DDDPb)
                       (if (null? (car g$r*$11425$DDDPb))
                         g$r$11426$DDDPb
                         (cons
                           (g$map$5753$DDDPb car g$r*$11425$DDDPb)
                           (g$combine$11389$DDDPb
                             (g$map$5753$DDDPb cdr g$r*$11425$DDDPb)
                             g$r$11426$DDDPb))))))
                  (g$match*$11390$DDDPb
                    (case-lambda
                      ((g$e$11407$DDDPb
                         g$p$11408$DDDPb
                         g$m*$11409$DDDPb
                         g$s*$11410$DDDPb
                         g$ae*$11411$DDDPb
                         g$r$11412$DDDPb)
                       (if (null? g$p$11408$DDDPb)
                         (if (null? g$e$11407$DDDPb)
                           (begin '#f g$r$11412$DDDPb)
                           '#f)
                         (if (pair? g$p$11408$DDDPb)
                           (if (pair? g$e$11407$DDDPb)
                             (begin
                               '#f
                               (g$match$11391$DDDPb
                                 (car g$e$11407$DDDPb)
                                 (car g$p$11408$DDDPb)
                                 g$m*$11409$DDDPb
                                 g$s*$11410$DDDPb
                                 g$ae*$11411$DDDPb
                                 (g$match$11391$DDDPb
                                   (cdr g$e$11407$DDDPb)
                                   (cdr g$p$11408$DDDPb)
                                   g$m*$11409$DDDPb
                                   g$s*$11410$DDDPb
                                   g$ae*$11411$DDDPb
                                   g$r$11412$DDDPb)))
                             '#f)
                           (if (eq? g$p$11408$DDDPb 'each-any)
                             ((case-lambda
                                ((g$l$11413$DDDPb)
                                 (if g$l$11413$DDDPb
                                   (begin
                                     '#f
                                     (cons
                                       g$l$11413$DDDPb
                                       g$r$11412$DDDPb))
                                   '#f)))
                              (g$match-each-any$11387$DDDPb
                                g$e$11407$DDDPb
                                g$m*$11409$DDDPb
                                g$s*$11410$DDDPb
                                g$ae*$11411$DDDPb))
                             ((case-lambda
                                ((g$t$11414$DDDPb)
                                 (if (eqv? g$t$11414$DDDPb 'each)
                                   (if (null? g$e$11407$DDDPb)
                                     (g$match-empty$11388$DDDPb
                                       (vector-ref g$p$11408$DDDPb '1)
                                       g$r$11412$DDDPb)
                                     ((case-lambda
                                        ((g$r*$11415$DDDPb)
                                         (if g$r*$11415$DDDPb
                                           (begin
                                             '#f
                                             (g$combine$11389$DDDPb
                                               g$r*$11415$DDDPb
                                               g$r$11412$DDDPb))
                                           '#f)))
                                      (g$match-each$11385$DDDPb
                                        g$e$11407$DDDPb
                                        (vector-ref g$p$11408$DDDPb '1)
                                        g$m*$11409$DDDPb
                                        g$s*$11410$DDDPb
                                        g$ae*$11411$DDDPb)))
                                   (if (eqv? g$t$11414$DDDPb 'free-id)
                                     (if (g$symbol?$6424$DDDPb
                                           g$e$11407$DDDPb)
                                       (if (g$top-marked?$9288$DDDPb
                                             g$m*$11409$DDDPb)
                                         (if (g$free-id=?$9358$DDDPb
                                               (g$stx^$11384$DDDPb
                                                 g$e$11407$DDDPb
                                                 g$m*$11409$DDDPb
                                                 g$s*$11410$DDDPb
                                                 g$ae*$11411$DDDPb)
                                               (vector-ref
                                                 g$p$11408$DDDPb
                                                 '1))
                                           (begin '#f g$r$11412$DDDPb)
                                           '#f)
                                         '#f)
                                       '#f)
                                     (if (eqv?
                                           g$t$11414$DDDPb
                                           'scheme-id)
                                       (if (g$symbol?$6424$DDDPb
                                             g$e$11407$DDDPb)
                                         (if (g$top-marked?$9288$DDDPb
                                               g$m*$11409$DDDPb)
                                           (if (g$free-id=?$9358$DDDPb
                                                 (g$stx^$11384$DDDPb
                                                   g$e$11407$DDDPb
                                                   g$m*$11409$DDDPb
                                                   g$s*$11410$DDDPb
                                                   g$ae*$11411$DDDPb)
                                                 (g$scheme-stx$9660$DDDPb
                                                   (vector-ref
                                                     g$p$11408$DDDPb
                                                     '1)))
                                             (begin '#f g$r$11412$DDDPb)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (eqv? g$t$11414$DDDPb 'each+)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$match-each+$11386$DDDPb
                                                g$e$11407$DDDPb
                                                (vector-ref
                                                  g$p$11408$DDDPb
                                                  '1)
                                                (vector-ref
                                                  g$p$11408$DDDPb
                                                  '2)
                                                (vector-ref
                                                  g$p$11408$DDDPb
                                                  '3)
                                                g$m*$11409$DDDPb
                                                g$s*$11410$DDDPb
                                                g$ae*$11411$DDDPb
                                                g$r$11412$DDDPb)))
                                           (case-lambda
                                             ((g$xr*$11419$DDDPb
                                                g$y-pat$11420$DDDPb
                                                g$r$11421$DDDPb)
                                              ((case-lambda
                                                 ((g$r$11422$DDDPb
                                                    g$y-pat$11423$DDDPb
                                                    g$xr*$11424$DDDPb)
                                                  (if g$r$11422$DDDPb
                                                    (if (null?
                                                          g$y-pat$11423$DDDPb)
                                                      (begin
                                                        '#f
                                                        (if (null?
                                                              g$xr*$11424$DDDPb)
                                                          (g$match-empty$11388$DDDPb
                                                            (vector-ref
                                                              g$p$11408$DDDPb
                                                              '1)
                                                            g$r$11422$DDDPb)
                                                          (g$combine$11389$DDDPb
                                                            g$xr*$11424$DDDPb
                                                            g$r$11422$DDDPb)))
                                                      '#f)
                                                    '#f)))
                                               g$r$11421$DDDPb
                                               g$y-pat$11420$DDDPb
                                               g$xr*$11419$DDDPb))))
                                         (if (eqv?
                                               g$t$11414$DDDPb
                                               'atom)
                                           (if (equal?
                                                 (vector-ref
                                                   g$p$11408$DDDPb
                                                   '1)
                                                 (g$strip$9364$DDDPb
                                                   g$e$11407$DDDPb
                                                   g$m*$11409$DDDPb))
                                             (begin '#f g$r$11412$DDDPb)
                                             '#f)
                                           (if (eqv?
                                                 g$t$11414$DDDPb
                                                 'vector)
                                             (if (g$vector?$6422$DDDPb
                                                   g$e$11407$DDDPb)
                                               (begin
                                                 '#f
                                                 (g$match$11391$DDDPb
                                                   (vector->list
                                                     g$e$11407$DDDPb)
                                                   (vector-ref
                                                     g$p$11408$DDDPb
                                                     '1)
                                                   g$m*$11409$DDDPb
                                                   g$s*$11410$DDDPb
                                                   g$ae*$11411$DDDPb
                                                   g$r$11412$DDDPb))
                                               '#f)
                                             (assertion-violation
                                               'syntax-dispatch
                                               '"invalid pattern"
                                               g$p$11408$DDDPb)))))))))
                              (vector-ref g$p$11408$DDDPb '0))))))))
                  (g$match$11391$DDDPb
                    (case-lambda
                      ((g$e$11392$DDDPb
                         g$p$11393$DDDPb
                         g$m*$11394$DDDPb
                         g$s*$11395$DDDPb
                         g$ae*$11396$DDDPb
                         g$r$11397$DDDPb)
                       (if (not g$r$11397$DDDPb)
                         '#f
                         (if (eq? g$p$11393$DDDPb '_)
                           g$r$11397$DDDPb
                           (if (eq? g$p$11393$DDDPb 'any)
                             (cons
                               (g$stx^$11384$DDDPb
                                 g$e$11392$DDDPb
                                 g$m*$11394$DDDPb
                                 g$s*$11395$DDDPb
                                 g$ae*$11396$DDDPb)
                               g$r$11397$DDDPb)
                             (if (g$stx?$9326$DDDPb g$e$11392$DDDPb)
                               (if (not (g$top-marked?$9288$DDDPb
                                          g$m*$11394$DDDPb))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$9341$DDDPb
                                          g$m*$11394$DDDPb
                                          g$s*$11395$DDDPb
                                          g$ae*$11396$DDDPb
                                          g$e$11392$DDDPb)))
                                     (case-lambda
                                       ((g$m*$11401$DDDPb
                                          g$s*$11402$DDDPb
                                          g$ae*$11403$DDDPb)
                                        ((case-lambda
                                           ((g$ae*$11404$DDDPb
                                              g$s*$11405$DDDPb
                                              g$m*$11406$DDDPb)
                                            (g$match$11391$DDDPb
                                              (g$stx-expr$9328$DDDPb
                                                g$e$11392$DDDPb)
                                              g$p$11393$DDDPb
                                              g$m*$11406$DDDPb
                                              g$s*$11405$DDDPb
                                              g$ae*$11404$DDDPb
                                              g$r$11397$DDDPb)))
                                         g$ae*$11403$DDDPb
                                         g$s*$11402$DDDPb
                                         g$m*$11401$DDDPb)))))
                                 '#f)
                               (if (annotation? g$e$11392$DDDPb)
                                 (g$match$11391$DDDPb
                                   (annotation-expression
                                     g$e$11392$DDDPb)
                                   g$p$11393$DDDPb
                                   g$m*$11394$DDDPb
                                   g$s*$11395$DDDPb
                                   g$ae*$11396$DDDPb
                                   g$r$11397$DDDPb)
                                 (g$match*$11390$DDDPb
                                   g$e$11392$DDDPb
                                   g$p$11393$DDDPb
                                   g$m*$11394$DDDPb
                                   g$s*$11395$DDDPb
                                   g$ae*$11396$DDDPb
                                   g$r$11397$DDDPb))))))))))
          (g$match$11391$DDDPb
            g$e$11382$DDDPb
            g$p$11383$DDDPb
            '()
            '()
            '()
            '())))))
   (g$ellipsis?$9718$DDDPb
     g$ellipsis?$13259$DDDPb
     (case-lambda
       ((g$x$11496$DDDPb)
        (if (g$id?$9354$DDDPb g$x$11496$DDDPb)
          (begin
            '#f
            (g$free-id=?$9358$DDDPb
              g$x$11496$DDDPb
              (g$scheme-stx$9660$DDDPb '...)))
          '#f))))
   (g$underscore?$9719$DDDPb
     g$underscore?$13260$DDDPb
     (case-lambda
       ((g$x$11497$DDDPb)
        (if (g$id?$9354$DDDPb g$x$11497$DDDPb)
          (begin
            '#f
            (g$free-id=?$9358$DDDPb
              g$x$11497$DDDPb
              (g$scheme-stx$9660$DDDPb '_)))
          '#f))))
   (g$verify-literals$9720$DDDPb
     g$verify-literals$13261$DDDPb
     (case-lambda
       ((g$lits$11498$DDDPb g$expr$11499$DDDPb)
        (g$for-each$5754$DDDPb
          (case-lambda
            ((g$x$11500$DDDPb)
             (if ((case-lambda
                    ((g$t$11501$DDDPb)
                     (if g$t$11501$DDDPb
                       g$t$11501$DDDPb
                       ((case-lambda
                          ((g$t$11502$DDDPb)
                           (if g$t$11502$DDDPb
                             g$t$11502$DDDPb
                             (begin
                               '#f
                               (g$underscore?$9719$DDDPb
                                 g$x$11500$DDDPb)))))
                        (g$ellipsis?$9718$DDDPb g$x$11500$DDDPb)))))
                  (not (g$id?$9354$DDDPb g$x$11500$DDDPb)))
               (g$syntax-violation$9835$DDDPb
                 '#f
                 '"invalid literal"
                 g$expr$11499$DDDPb
                 g$x$11500$DDDPb)
               (void))))
          g$lits$11498$DDDPb))))
   (g$syntax-case-transformer$9721$DDDPb
     g$syntax-case-transformer$13262$DDDPb
     (case-lambda
       ((g$e$11503$DDDPb g$r$11504$DDDPb g$mr$11505$DDDPb)
        (letrec* ((g$build-dispatch-call$11506$DDDPb
                    (case-lambda
                      ((g$pvars$11560$DDDPb
                         g$expr$11561$DDDPb
                         g$y$11562$DDDPb
                         g$r$11563$DDDPb
                         g$mr$11564$DDDPb)
                       ((case-lambda
                          ((g$ids$11565$DDDPb g$levels$11566$DDDPb)
                           ((case-lambda
                              ((g$labels$11567$DDDPb
                                 g$new-vars$11568$DDDPb)
                               ((case-lambda
                                  ((g$body$11569$DDDPb)
                                   (list
                                     '(primitive apply)
                                     (g$build-lambda$9276$DDDPb
                                       '#f
                                       g$new-vars$11568$DDDPb
                                       g$body$11569$DDDPb)
                                     g$y$11562$DDDPb)))
                                (g$chi-expr$9735$DDDPb
                                  (g$add-subst$9344$DDDPb
                                    (g$make-full-rib$9320$DDDPb
                                      g$ids$11565$DDDPb
                                      g$labels$11567$DDDPb)
                                    g$expr$11561$DDDPb)
                                  (append
                                    (g$map$5753$DDDPb
                                      (case-lambda
                                        ((g$label$11570$DDDPb
                                           g$var$11571$DDDPb
                                           g$level$11572$DDDPb)
                                         (cons
                                           g$label$11570$DDDPb
                                           (g$make-binding$9370$DDDPb
                                             'syntax
                                             (cons
                                               g$var$11571$DDDPb
                                               g$level$11572$DDDPb)))))
                                      g$labels$11567$DDDPb
                                      g$new-vars$11568$DDDPb
                                      (g$map$5753$DDDPb
                                        cdr
                                        g$pvars$11560$DDDPb))
                                    g$r$11563$DDDPb)
                                  g$mr$11564$DDDPb))))
                            (g$map$5753$DDDPb
                              g$gen-label$9291$DDDPb
                              g$ids$11565$DDDPb)
                            (g$map$5753$DDDPb
                              g$gen-lexical$9289$DDDPb
                              g$ids$11565$DDDPb))))
                        (g$map$5753$DDDPb car g$pvars$11560$DDDPb)
                        (g$map$5753$DDDPb cdr g$pvars$11560$DDDPb)))))
                  (g$invalid-ids-error$11507$DDDPb
                    (case-lambda
                      ((g$id*$11554$DDDPb
                         g$e$11555$DDDPb
                         g$class$11556$DDDPb)
                       ((letrec ((g$find$11557$DDDPb
                                   (case-lambda
                                     ((g$id*$11558$DDDPb
                                        g$ok*$11559$DDDPb)
                                      (if (null? g$id*$11558$DDDPb)
                                        (g$syntax-violation$9835$DDDPb
                                          '#f
                                          '"invalid syntax"
                                          g$e$11555$DDDPb)
                                        (if (g$id?$9354$DDDPb
                                              (car g$id*$11558$DDDPb))
                                          (if (g$bound-id-member?$9361$DDDPb
                                                (car g$id*$11558$DDDPb)
                                                g$ok*$11559$DDDPb)
                                            (g$syntax-error$9832$DDDPb
                                              (car g$id*$11558$DDDPb)
                                              '"duplicate "
                                              g$class$11556$DDDPb)
                                            (g$find$11557$DDDPb
                                              (cdr g$id*$11558$DDDPb)
                                              (cons
                                                (car g$id*$11558$DDDPb)
                                                g$ok*$11559$DDDPb)))
                                          (g$syntax-error$9832$DDDPb
                                            (car g$id*$11558$DDDPb)
                                            '"invalid "
                                            g$class$11556$DDDPb)))))))
                          g$find$11557$DDDPb)
                        g$id*$11554$DDDPb
                        '()))))
                  (g$gen-clause$11508$DDDPb
                    (case-lambda
                      ((g$x$11534$DDDPb
                         g$keys$11535$DDDPb
                         g$clauses$11536$DDDPb
                         g$r$11537$DDDPb
                         g$mr$11538$DDDPb
                         g$pat$11539$DDDPb
                         g$fender$11540$DDDPb
                         g$expr$11541$DDDPb)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$convert-pattern$9716$DDDPb
                              g$pat$11539$DDDPb
                              g$keys$11535$DDDPb)))
                         (case-lambda
                           ((g$p$11544$DDDPb g$pvars$11545$DDDPb)
                            ((case-lambda
                               ((g$pvars$11546$DDDPb g$p$11547$DDDPb)
                                (if (not (g$distinct-bound-ids?$9360$DDDPb
                                           (g$map$5753$DDDPb
                                             car
                                             g$pvars$11546$DDDPb)))
                                  (g$invalid-ids-error$11507$DDDPb
                                    (g$map$5753$DDDPb
                                      car
                                      g$pvars$11546$DDDPb)
                                    g$pat$11539$DDDPb
                                    '"pattern variable")
                                  (if (not (g$for-all$5751$DDDPb
                                             (case-lambda
                                               ((g$x$11548$DDDPb)
                                                (not (g$ellipsis?$9718$DDDPb
                                                       (car g$x$11548$DDDPb)))))
                                             g$pvars$11546$DDDPb))
                                    (g$syntax-violation$9835$DDDPb
                                      '#f
                                      '"misplaced ellipsis in syntax-case pattern"
                                      g$pat$11539$DDDPb)
                                    ((case-lambda
                                       ((g$y$11549$DDDPb)
                                        ((case-lambda
                                           ((g$test$11550$DDDPb)
                                            ((case-lambda
                                               ((g$conseq$11551$DDDPb)
                                                ((case-lambda
                                                   ((g$altern$11552$DDDPb)
                                                    (list
                                                      (g$build-lambda$9276$DDDPb
                                                        '#f
                                                        (list
                                                          g$y$11549$DDDPb)
                                                        (list
                                                          'if
                                                          g$test$11550$DDDPb
                                                          g$conseq$11551$DDDPb
                                                          g$altern$11552$DDDPb))
                                                      (list
                                                        '(primitive
                                                           syntax-dispatch)
                                                        g$x$11534$DDDPb
                                                        (list
                                                          'quote
                                                          g$p$11547$DDDPb)))))
                                                 (g$gen-syntax-case$11509$DDDPb
                                                   g$x$11534$DDDPb
                                                   g$keys$11535$DDDPb
                                                   g$clauses$11536$DDDPb
                                                   g$r$11537$DDDPb
                                                   g$mr$11538$DDDPb))))
                                             (g$build-dispatch-call$11506$DDDPb
                                               g$pvars$11546$DDDPb
                                               g$expr$11541$DDDPb
                                               g$y$11549$DDDPb
                                               g$r$11537$DDDPb
                                               g$mr$11538$DDDPb))))
                                         (if (eq? g$fender$11540$DDDPb
                                                  '#t)
                                           g$y$11549$DDDPb
                                           ((case-lambda
                                              ((g$call$11553$DDDPb)
                                               (list
                                                 'if
                                                 g$y$11549$DDDPb
                                                 g$call$11553$DDDPb
                                                 (list 'quote '#f))))
                                            (g$build-dispatch-call$11506$DDDPb
                                              g$pvars$11546$DDDPb
                                              g$fender$11540$DDDPb
                                              g$y$11549$DDDPb
                                              g$r$11537$DDDPb
                                              g$mr$11538$DDDPb))))))
                                     (g$gen-lexical$9289$DDDPb
                                       'tmp))))))
                             g$pvars$11545$DDDPb
                             g$p$11544$DDDPb)))))))
                  (g$gen-syntax-case$11509$DDDPb
                    (case-lambda
                      ((g$x$11517$DDDPb
                         g$keys$11518$DDDPb
                         g$clauses$11519$DDDPb
                         g$r$11520$DDDPb
                         g$mr$11521$DDDPb)
                       (if (null? g$clauses$11519$DDDPb)
                         (list
                           '(primitive syntax-error)
                           g$x$11517$DDDPb)
                         ((case-lambda
                            ((g$t$11522$DDDPb)
                             ((case-lambda
                                ((g$ls/false$11523$DDDPb)
                                 (if g$ls/false$11523$DDDPb
                                   (apply
                                     (case-lambda
                                       ((g$pat$11524$DDDPb
                                          g$expr$11525$DDDPb)
                                        (if (if (g$id?$9354$DDDPb
                                                  g$pat$11524$DDDPb)
                                              (if (not (g$bound-id-member?$9361$DDDPb
                                                         g$pat$11524$DDDPb
                                                         g$keys$11518$DDDPb))
                                                (begin
                                                  '#f
                                                  (not (g$ellipsis?$9718$DDDPb
                                                         g$pat$11524$DDDPb)))
                                                '#f)
                                              '#f)
                                          (if (g$free-id=?$9358$DDDPb
                                                g$pat$11524$DDDPb
                                                (g$scheme-stx$9660$DDDPb
                                                  '_))
                                            (g$chi-expr$9735$DDDPb
                                              g$expr$11525$DDDPb
                                              g$r$11520$DDDPb
                                              g$mr$11521$DDDPb)
                                            ((case-lambda
                                               ((g$lab$11526$DDDPb
                                                  g$lex$11527$DDDPb)
                                                ((case-lambda
                                                   ((g$body$11528$DDDPb)
                                                    (list
                                                      (g$build-lambda$9276$DDDPb
                                                        '#f
                                                        (list
                                                          g$lex$11527$DDDPb)
                                                        g$body$11528$DDDPb)
                                                      g$x$11517$DDDPb)))
                                                 (g$chi-expr$9735$DDDPb
                                                   (g$add-subst$9344$DDDPb
                                                     (g$make-full-rib$9320$DDDPb
                                                       (list
                                                         g$pat$11524$DDDPb)
                                                       (list
                                                         g$lab$11526$DDDPb))
                                                     g$expr$11525$DDDPb)
                                                   (cons
                                                     (cons
                                                       g$lab$11526$DDDPb
                                                       (g$make-binding$9370$DDDPb
                                                         'syntax
                                                         (cons
                                                           g$lex$11527$DDDPb
                                                           '0)))
                                                     g$r$11520$DDDPb)
                                                   g$mr$11521$DDDPb))))
                                             (g$gen-label$9291$DDDPb
                                               g$pat$11524$DDDPb)
                                             (g$gen-lexical$9289$DDDPb
                                               g$pat$11524$DDDPb)))
                                          (g$gen-clause$11508$DDDPb
                                            g$x$11517$DDDPb
                                            g$keys$11518$DDDPb
                                            (cdr g$clauses$11519$DDDPb)
                                            g$r$11520$DDDPb
                                            g$mr$11521$DDDPb
                                            g$pat$11524$DDDPb
                                            '#t
                                            g$expr$11525$DDDPb))))
                                     g$ls/false$11523$DDDPb)
                                   ((case-lambda
                                      ((g$t$11529$DDDPb)
                                       ((case-lambda
                                          ((g$ls/false$11530$DDDPb)
                                           (if g$ls/false$11530$DDDPb
                                             (apply
                                               (case-lambda
                                                 ((g$pat$11531$DDDPb
                                                    g$fender$11532$DDDPb
                                                    g$expr$11533$DDDPb)
                                                  (g$gen-clause$11508$DDDPb
                                                    g$x$11517$DDDPb
                                                    g$keys$11518$DDDPb
                                                    (cdr g$clauses$11519$DDDPb)
                                                    g$r$11520$DDDPb
                                                    g$mr$11521$DDDPb
                                                    g$pat$11531$DDDPb
                                                    g$fender$11532$DDDPb
                                                    g$expr$11533$DDDPb)))
                                               g$ls/false$11530$DDDPb)
                                             (g$syntax-violation$9835$DDDPb
                                               '#f
                                               '"invalid syntax"
                                               g$t$11529$DDDPb))))
                                        (g$syntax-dispatch$9717$DDDPb
                                          g$t$11529$DDDPb
                                          '(any any any)))))
                                    g$t$11522$DDDPb))))
                              (g$syntax-dispatch$9717$DDDPb
                                g$t$11522$DDDPb
                                '(any any)))))
                          (car g$clauses$11519$DDDPb)))))))
          ((case-lambda
             ((g$t$11510$DDDPb)
              ((case-lambda
                 ((g$ls/false$11511$DDDPb)
                  (if g$ls/false$11511$DDDPb
                    (apply
                      (case-lambda
                        ((g$expr$11512$DDDPb
                           g$keys$11513$DDDPb
                           g$clauses$11514$DDDPb)
                         (begin
                           (g$verify-literals$9720$DDDPb
                             g$keys$11513$DDDPb
                             g$e$11503$DDDPb)
                           ((case-lambda
                              ((g$x$11515$DDDPb)
                               ((case-lambda
                                  ((g$body$11516$DDDPb)
                                   (list
                                     (g$build-lambda$9276$DDDPb
                                       '#f
                                       (list g$x$11515$DDDPb)
                                       g$body$11516$DDDPb)
                                     (g$chi-expr$9735$DDDPb
                                       g$expr$11512$DDDPb
                                       g$r$11504$DDDPb
                                       g$mr$11505$DDDPb))))
                                (g$gen-syntax-case$11509$DDDPb
                                  g$x$11515$DDDPb
                                  g$keys$11513$DDDPb
                                  g$clauses$11514$DDDPb
                                  g$r$11504$DDDPb
                                  g$mr$11505$DDDPb))))
                            (g$gen-lexical$9289$DDDPb 'tmp)))))
                      g$ls/false$11511$DDDPb)
                    (g$syntax-violation$9835$DDDPb
                      '#f
                      '"invalid syntax"
                      g$t$11510$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$11510$DDDPb
                 '(_ any each-any . each-any)))))
           g$e$11503$DDDPb)))))
   (g$ellipsis-map$9722$DDDPb
     g$ellipsis-map$13263$DDDPb
     (case-lambda
       ((g$proc$11573$DDDPb g$ls$11574$DDDPb . g$ls*$11575$DDDPb)
        (letrec* ((g$who$11576$DDDPb '...))
          (begin
            (if (not (list? g$ls$11574$DDDPb))
              (assertion-violation
                g$who$11576$DDDPb
                '"not a list"
                g$ls$11574$DDDPb)
              (void))
            (if (not (null? g$ls*$11575$DDDPb))
              ((case-lambda
                 ((g$n$11577$DDDPb)
                  (g$for-each$5754$DDDPb
                    (case-lambda
                      ((g$x$11578$DDDPb)
                       (begin
                         (if (not (list? g$x$11578$DDDPb))
                           (assertion-violation
                             g$who$11576$DDDPb
                             '"not a list"
                             g$x$11578$DDDPb)
                           (void))
                         (if (not (= (length g$x$11578$DDDPb)
                                     g$n$11577$DDDPb))
                           (assertion-violation
                             g$who$11576$DDDPb
                             '"length mismatch"
                             g$ls$11574$DDDPb
                             g$x$11578$DDDPb)
                           (void)))))
                    g$ls*$11575$DDDPb)))
               (length g$ls$11574$DDDPb))
              (void))
            (apply
              g$map$5753$DDDPb
              g$proc$11573$DDDPb
              g$ls$11574$DDDPb
              g$ls*$11575$DDDPb))))))
   (g$syntax-transformer$9723$DDDPb
     g$syntax-transformer$13264$DDDPb
     (case-lambda
       ((g$e$11579$DDDPb g$r$11580$DDDPb g$mr$11581$DDDPb)
        (letrec* ((g$gen-syntax$11582$DDDPb
                    (case-lambda
                      ((g$src$11639$DDDPb
                         g$e$11640$DDDPb
                         g$r$11641$DDDPb
                         g$maps$11642$DDDPb
                         g$ellipsis?$11643$DDDPb
                         g$vec?$11644$DDDPb)
                       ((case-lambda
                          ((g$t$11645$DDDPb)
                           ((case-lambda
                              ((g$ls/false$11646$DDDPb)
                               (if (if g$ls/false$11646$DDDPb
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$dots$11647$DDDPb)
                                            (g$ellipsis?$11643$DDDPb
                                              g$dots$11647$DDDPb)))
                                         g$ls/false$11646$DDDPb))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$dots$11648$DDDPb)
                                      (g$syntax-violation$9835$DDDPb
                                        '#f
                                        '"misplaced ellipsis in syntax form"
                                        g$src$11639$DDDPb)))
                                   g$ls/false$11646$DDDPb)
                                 ((case-lambda
                                    ((g$t$11649$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$11650$DDDPb)
                                         (if (if g$ls/false$11650$DDDPb
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$id$11651$DDDPb)
                                                      (g$id?$9354$DDDPb
                                                        g$id$11651$DDDPb)))
                                                   g$ls/false$11650$DDDPb))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$id$11652$DDDPb)
                                                ((case-lambda
                                                   ((g$label$11653$DDDPb)
                                                    ((case-lambda
                                                       ((g$b$11654$DDDPb)
                                                        (if (eq? (g$binding-type$9371$DDDPb
                                                                   g$b$11654$DDDPb)
                                                                 'syntax)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               ((case-lambda
                                                                  ((g$var.lev$11657$DDDPb)
                                                                   (g$gen-ref$11583$DDDPb
                                                                     g$src$11639$DDDPb
                                                                     (car g$var.lev$11657$DDDPb)
                                                                     (cdr g$var.lev$11657$DDDPb)
                                                                     g$maps$11642$DDDPb)))
                                                                (g$binding-value$9372$DDDPb
                                                                  g$b$11654$DDDPb))))
                                                            (case-lambda
                                                              ((g$var$11658$DDDPb
                                                                 g$maps$11659$DDDPb)
                                                               ((case-lambda
                                                                  ((g$maps$11660$DDDPb
                                                                     g$var$11661$DDDPb)
                                                                   (values
                                                                     (list
                                                                       'ref
                                                                       g$var$11661$DDDPb)
                                                                     g$maps$11660$DDDPb)))
                                                                g$maps$11659$DDDPb
                                                                g$var$11658$DDDPb))))
                                                          (values
                                                            (list
                                                              'quote
                                                              g$e$11640$DDDPb)
                                                            g$maps$11642$DDDPb))))
                                                     (g$label->binding$9369$DDDPb
                                                       g$label$11653$DDDPb
                                                       g$r$11641$DDDPb))))
                                                 (g$id->label$9367$DDDPb
                                                   g$e$11640$DDDPb))))
                                             g$ls/false$11650$DDDPb)
                                           ((case-lambda
                                              ((g$t$11662$DDDPb)
                                               ((case-lambda
                                                  ((g$ls/false$11663$DDDPb)
                                                   (if (if g$ls/false$11663$DDDPb
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$dots$11664$DDDPb
                                                                  g$e$11665$DDDPb)
                                                                (g$ellipsis?$11643$DDDPb
                                                                  g$dots$11664$DDDPb)))
                                                             g$ls/false$11663$DDDPb))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$dots$11666$DDDPb
                                                            g$e$11667$DDDPb)
                                                          (if g$vec?$11644$DDDPb
                                                            (g$syntax-violation$9835$DDDPb
                                                              '#f
                                                              '"misplaced ellipsis in syntax form"
                                                              g$src$11639$DDDPb)
                                                            (g$gen-syntax$11582$DDDPb
                                                              g$src$11639$DDDPb
                                                              g$e$11667$DDDPb
                                                              g$r$11641$DDDPb
                                                              g$maps$11642$DDDPb
                                                              (case-lambda
                                                                ((g$x$11668$DDDPb)
                                                                 '#f))
                                                              '#f))))
                                                       g$ls/false$11663$DDDPb)
                                                     ((case-lambda
                                                        ((g$t$11669$DDDPb)
                                                         ((case-lambda
                                                            ((g$ls/false$11670$DDDPb)
                                                             (if (if g$ls/false$11670$DDDPb
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$x$11671$DDDPb
                                                                            g$dots$11672$DDDPb
                                                                            g$y$11673$DDDPb)
                                                                          (g$ellipsis?$11643$DDDPb
                                                                            g$dots$11672$DDDPb)))
                                                                       g$ls/false$11670$DDDPb))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$11674$DDDPb
                                                                      g$dots$11675$DDDPb
                                                                      g$y$11676$DDDPb)
                                                                    ((letrec ((g$f$11677$DDDPb
                                                                                (case-lambda
                                                                                  ((g$y$11678$DDDPb
                                                                                     g$k$11679$DDDPb)
                                                                                   ((case-lambda
                                                                                      ((g$t$11680$DDDPb)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$11681$DDDPb)
                                                                                           (if g$ls/false$11681$DDDPb
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 (()
                                                                                                  (g$k$11679$DDDPb
                                                                                                    g$maps$11642$DDDPb)))
                                                                                               g$ls/false$11681$DDDPb)
                                                                                             ((case-lambda
                                                                                                ((g$t$11682$DDDPb)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$11683$DDDPb)
                                                                                                     (if (if g$ls/false$11683$DDDPb
                                                                                                           (begin
                                                                                                             '#f
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 ((g$dots$11684$DDDPb
                                                                                                                    g$y$11685$DDDPb)
                                                                                                                  (g$ellipsis?$11643$DDDPb
                                                                                                                    g$dots$11684$DDDPb)))
                                                                                                               g$ls/false$11683$DDDPb))
                                                                                                           '#f)
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$dots$11686$DDDPb
                                                                                                              g$y$11687$DDDPb)
                                                                                                            (g$f$11677$DDDPb
                                                                                                              g$y$11687$DDDPb
                                                                                                              (case-lambda
                                                                                                                ((g$maps$11688$DDDPb)
                                                                                                                 (call-with-values
                                                                                                                   (case-lambda
                                                                                                                     (()
                                                                                                                      (g$k$11679$DDDPb
                                                                                                                        (cons
                                                                                                                          '()
                                                                                                                          g$maps$11688$DDDPb))))
                                                                                                                   (case-lambda
                                                                                                                     ((g$x$11691$DDDPb
                                                                                                                        g$maps$11692$DDDPb)
                                                                                                                      ((case-lambda
                                                                                                                         ((g$maps$11693$DDDPb
                                                                                                                            g$x$11694$DDDPb)
                                                                                                                          (if (null?
                                                                                                                                (car g$maps$11693$DDDPb))
                                                                                                                            (g$syntax-violation$9835$DDDPb
                                                                                                                              '#f
                                                                                                                              '"extra ellipsis in syntax form"
                                                                                                                              g$src$11639$DDDPb)
                                                                                                                            (values
                                                                                                                              (g$gen-mappend$11585$DDDPb
                                                                                                                                g$x$11694$DDDPb
                                                                                                                                (car g$maps$11693$DDDPb))
                                                                                                                              (cdr g$maps$11693$DDDPb)))))
                                                                                                                       g$maps$11692$DDDPb
                                                                                                                       g$x$11691$DDDPb)))))))))
                                                                                                         g$ls/false$11683$DDDPb)
                                                                                                       ((case-lambda
                                                                                                          ((g$t$11695$DDDPb)
                                                                                                           ((case-lambda
                                                                                                              ((g$ls/false$11696$DDDPb)
                                                                                                               (if g$ls/false$11696$DDDPb
                                                                                                                 (apply
                                                                                                                   (case-lambda
                                                                                                                     (()
                                                                                                                      (call-with-values
                                                                                                                        (case-lambda
                                                                                                                          (()
                                                                                                                           (g$gen-syntax$11582$DDDPb
                                                                                                                             g$src$11639$DDDPb
                                                                                                                             g$y$11678$DDDPb
                                                                                                                             g$r$11641$DDDPb
                                                                                                                             g$maps$11642$DDDPb
                                                                                                                             g$ellipsis?$11643$DDDPb
                                                                                                                             g$vec?$11644$DDDPb)))
                                                                                                                        (case-lambda
                                                                                                                          ((g$y$11699$DDDPb
                                                                                                                             g$maps$11700$DDDPb)
                                                                                                                           ((case-lambda
                                                                                                                              ((g$maps$11701$DDDPb
                                                                                                                                 g$y$11702$DDDPb)
                                                                                                                               (call-with-values
                                                                                                                                 (case-lambda
                                                                                                                                   (()
                                                                                                                                    (g$k$11679$DDDPb
                                                                                                                                      g$maps$11701$DDDPb)))
                                                                                                                                 (case-lambda
                                                                                                                                   ((g$x$11705$DDDPb
                                                                                                                                      g$maps$11706$DDDPb)
                                                                                                                                    ((case-lambda
                                                                                                                                       ((g$maps$11707$DDDPb
                                                                                                                                          g$x$11708$DDDPb)
                                                                                                                                        (values
                                                                                                                                          (g$gen-append$11584$DDDPb
                                                                                                                                            g$x$11708$DDDPb
                                                                                                                                            g$y$11702$DDDPb)
                                                                                                                                          g$maps$11707$DDDPb)))
                                                                                                                                     g$maps$11706$DDDPb
                                                                                                                                     g$x$11705$DDDPb))))))
                                                                                                                            g$maps$11700$DDDPb
                                                                                                                            g$y$11699$DDDPb))))))
                                                                                                                   g$ls/false$11696$DDDPb)
                                                                                                                 (g$syntax-violation$9835$DDDPb
                                                                                                                   '#f
                                                                                                                   '"invalid syntax"
                                                                                                                   g$t$11695$DDDPb))))
                                                                                                            (g$syntax-dispatch$9717$DDDPb
                                                                                                              g$t$11695$DDDPb
                                                                                                              '_))))
                                                                                                        g$t$11682$DDDPb))))
                                                                                                  (g$syntax-dispatch$9717$DDDPb
                                                                                                    g$t$11682$DDDPb
                                                                                                    '(any .
                                                                                                          any)))))
                                                                                              g$t$11680$DDDPb))))
                                                                                        (g$syntax-dispatch$9717$DDDPb
                                                                                          g$t$11680$DDDPb
                                                                                          '()))))
                                                                                    g$y$11678$DDDPb)))))
                                                                       g$f$11677$DDDPb)
                                                                     g$y$11676$DDDPb
                                                                     (case-lambda
                                                                       ((g$maps$11709$DDDPb)
                                                                        (call-with-values
                                                                          (case-lambda
                                                                            (()
                                                                             (g$gen-syntax$11582$DDDPb
                                                                               g$src$11639$DDDPb
                                                                               g$x$11674$DDDPb
                                                                               g$r$11641$DDDPb
                                                                               (cons
                                                                                 '()
                                                                                 g$maps$11709$DDDPb)
                                                                               g$ellipsis?$11643$DDDPb
                                                                               '#f)))
                                                                          (case-lambda
                                                                            ((g$x$11712$DDDPb
                                                                               g$maps$11713$DDDPb)
                                                                             ((case-lambda
                                                                                ((g$maps$11714$DDDPb
                                                                                   g$x$11715$DDDPb)
                                                                                 (if (null?
                                                                                       (car g$maps$11714$DDDPb))
                                                                                   (g$syntax-violation$9835$DDDPb
                                                                                     '#f
                                                                                     '"extra ellipsis in syntax form"
                                                                                     g$src$11639$DDDPb)
                                                                                   (values
                                                                                     (g$gen-map$11586$DDDPb
                                                                                       g$x$11715$DDDPb
                                                                                       (car g$maps$11714$DDDPb))
                                                                                     (cdr g$maps$11714$DDDPb)))))
                                                                              g$maps$11713$DDDPb
                                                                              g$x$11712$DDDPb)))))))))
                                                                 g$ls/false$11670$DDDPb)
                                                               ((case-lambda
                                                                  ((g$t$11716$DDDPb)
                                                                   ((case-lambda
                                                                      ((g$ls/false$11717$DDDPb)
                                                                       (if g$ls/false$11717$DDDPb
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$x$11718$DDDPb
                                                                                g$y$11719$DDDPb)
                                                                              (call-with-values
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$gen-syntax$11582$DDDPb
                                                                                     g$src$11639$DDDPb
                                                                                     g$x$11718$DDDPb
                                                                                     g$r$11641$DDDPb
                                                                                     g$maps$11642$DDDPb
                                                                                     g$ellipsis?$11643$DDDPb
                                                                                     '#f)))
                                                                                (case-lambda
                                                                                  ((g$xnew$11722$DDDPb
                                                                                     g$maps$11723$DDDPb)
                                                                                   ((case-lambda
                                                                                      ((g$maps$11724$DDDPb
                                                                                         g$xnew$11725$DDDPb)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$gen-syntax$11582$DDDPb
                                                                                              g$src$11639$DDDPb
                                                                                              g$y$11719$DDDPb
                                                                                              g$r$11641$DDDPb
                                                                                              g$maps$11724$DDDPb
                                                                                              g$ellipsis?$11643$DDDPb
                                                                                              g$vec?$11644$DDDPb)))
                                                                                         (case-lambda
                                                                                           ((g$ynew$11728$DDDPb
                                                                                              g$maps$11729$DDDPb)
                                                                                            ((case-lambda
                                                                                               ((g$maps$11730$DDDPb
                                                                                                  g$ynew$11731$DDDPb)
                                                                                                (values
                                                                                                  (g$gen-cons$11587$DDDPb
                                                                                                    g$e$11640$DDDPb
                                                                                                    g$x$11718$DDDPb
                                                                                                    g$y$11719$DDDPb
                                                                                                    g$xnew$11725$DDDPb
                                                                                                    g$ynew$11731$DDDPb)
                                                                                                  g$maps$11730$DDDPb)))
                                                                                             g$maps$11729$DDDPb
                                                                                             g$ynew$11728$DDDPb))))))
                                                                                    g$maps$11723$DDDPb
                                                                                    g$xnew$11722$DDDPb))))))
                                                                           g$ls/false$11717$DDDPb)
                                                                         ((case-lambda
                                                                            ((g$t$11732$DDDPb)
                                                                             ((case-lambda
                                                                                ((g$ls/false$11733$DDDPb)
                                                                                 (if g$ls/false$11733$DDDPb
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$ls$11734$DDDPb)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$11582$DDDPb
                                                                                               g$src$11639$DDDPb
                                                                                               g$ls$11734$DDDPb
                                                                                               g$r$11641$DDDPb
                                                                                               g$maps$11642$DDDPb
                                                                                               g$ellipsis?$11643$DDDPb
                                                                                               '#t)))
                                                                                          (case-lambda
                                                                                            ((g$lsnew$11737$DDDPb
                                                                                               g$maps$11738$DDDPb)
                                                                                             ((case-lambda
                                                                                                ((g$maps$11739$DDDPb
                                                                                                   g$lsnew$11740$DDDPb)
                                                                                                 (values
                                                                                                   (g$gen-vector$11588$DDDPb
                                                                                                     g$e$11640$DDDPb
                                                                                                     g$ls$11734$DDDPb
                                                                                                     g$lsnew$11740$DDDPb)
                                                                                                   g$maps$11739$DDDPb)))
                                                                                              g$maps$11738$DDDPb
                                                                                              g$lsnew$11737$DDDPb))))))
                                                                                     g$ls/false$11733$DDDPb)
                                                                                   ((case-lambda
                                                                                      ((g$t$11741$DDDPb)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$11742$DDDPb)
                                                                                           (if g$ls/false$11742$DDDPb
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 (()
                                                                                                  (values
                                                                                                    (list
                                                                                                      'quote
                                                                                                      g$e$11640$DDDPb)
                                                                                                    g$maps$11642$DDDPb)))
                                                                                               g$ls/false$11742$DDDPb)
                                                                                             (g$syntax-violation$9835$DDDPb
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$11741$DDDPb))))
                                                                                        (g$syntax-dispatch$9717$DDDPb
                                                                                          g$t$11741$DDDPb
                                                                                          '_))))
                                                                                    g$t$11732$DDDPb))))
                                                                              (g$syntax-dispatch$9717$DDDPb
                                                                                g$t$11732$DDDPb
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$11716$DDDPb))))
                                                                    (g$syntax-dispatch$9717$DDDPb
                                                                      g$t$11716$DDDPb
                                                                      '(any .
                                                                            any)))))
                                                                g$t$11669$DDDPb))))
                                                          (g$syntax-dispatch$9717$DDDPb
                                                            g$t$11669$DDDPb
                                                            '(any any
                                                                  .
                                                                  any)))))
                                                      g$t$11662$DDDPb))))
                                                (g$syntax-dispatch$9717$DDDPb
                                                  g$t$11662$DDDPb
                                                  '(any any)))))
                                            g$t$11649$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$11649$DDDPb
                                        'any))))
                                  g$t$11645$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$11645$DDDPb
                              'any))))
                        g$e$11640$DDDPb))))
                  (g$gen-ref$11583$DDDPb
                    (case-lambda
                      ((g$src$11626$DDDPb
                         g$var$11627$DDDPb
                         g$level$11628$DDDPb
                         g$maps$11629$DDDPb)
                       (if (= g$level$11628$DDDPb '0)
                         (values g$var$11627$DDDPb g$maps$11629$DDDPb)
                         (if (null? g$maps$11629$DDDPb)
                           (g$syntax-violation$9835$DDDPb
                             '#f
                             '"missing ellipsis in syntax form"
                             g$src$11626$DDDPb)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$gen-ref$11583$DDDPb
                                  g$src$11626$DDDPb
                                  g$var$11627$DDDPb
                                  (- g$level$11628$DDDPb '1)
                                  (cdr g$maps$11629$DDDPb))))
                             (case-lambda
                               ((g$outer-var$11632$DDDPb
                                  g$outer-maps$11633$DDDPb)
                                ((case-lambda
                                   ((g$outer-maps$11634$DDDPb
                                      g$outer-var$11635$DDDPb)
                                    ((case-lambda
                                       ((g$t$11636$DDDPb)
                                        (if g$t$11636$DDDPb
                                          ((case-lambda
                                             ((g$b$11637$DDDPb)
                                              (values
                                                (cdr g$b$11637$DDDPb)
                                                g$maps$11629$DDDPb)))
                                           g$t$11636$DDDPb)
                                          ((case-lambda
                                             ((g$inner-var$11638$DDDPb)
                                              (values
                                                g$inner-var$11638$DDDPb
                                                (cons
                                                  (cons
                                                    (cons
                                                      g$outer-var$11635$DDDPb
                                                      g$inner-var$11638$DDDPb)
                                                    (car g$maps$11629$DDDPb))
                                                  g$outer-maps$11634$DDDPb))))
                                           (g$gen-lexical$9289$DDDPb
                                             'tmp)))))
                                     (g$assq$5741$DDDPb
                                       g$outer-var$11635$DDDPb
                                       (car g$maps$11629$DDDPb)))))
                                 g$outer-maps$11633$DDDPb
                                 g$outer-var$11632$DDDPb)))))))))
                  (g$gen-append$11584$DDDPb
                    (case-lambda
                      ((g$x$11624$DDDPb g$y$11625$DDDPb)
                       (if (equal? g$y$11625$DDDPb ''())
                         g$x$11624$DDDPb
                         (list
                           'append
                           g$x$11624$DDDPb
                           g$y$11625$DDDPb)))))
                  (g$gen-mappend$11585$DDDPb
                    (case-lambda
                      ((g$e$11622$DDDPb g$map-env$11623$DDDPb)
                       (list
                         'apply
                         '(primitive append)
                         (g$gen-map$11586$DDDPb
                           g$e$11622$DDDPb
                           g$map-env$11623$DDDPb)))))
                  (g$gen-map$11586$DDDPb
                    (case-lambda
                      ((g$e$11613$DDDPb g$map-env$11614$DDDPb)
                       ((case-lambda
                          ((g$formals$11615$DDDPb g$actuals$11616$DDDPb)
                           (if (eq? (car g$e$11613$DDDPb) 'ref)
                             (car g$actuals$11616$DDDPb)
                             (if (g$for-all$5751$DDDPb
                                   (case-lambda
                                     ((g$x$11617$DDDPb)
                                      (if (eq? (car g$x$11617$DDDPb)
                                               'ref)
                                        (begin
                                          '#f
                                          (g$memq$5745$DDDPb
                                            (g$cadr$6433$DDDPb
                                              g$x$11617$DDDPb)
                                            g$formals$11615$DDDPb))
                                        '#f)))
                                   (cdr g$e$11613$DDDPb))
                               ((case-lambda
                                  ((g$args$11618$DDDPb)
                                   (cons
                                     'map
                                     (cons
                                       (list
                                         'primitive
                                         (car g$e$11613$DDDPb))
                                       g$args$11618$DDDPb))))
                                (g$map$5753$DDDPb
                                  ((case-lambda
                                     ((g$r$11619$DDDPb)
                                      (case-lambda
                                        ((g$x$11620$DDDPb)
                                         (cdr (g$assq$5741$DDDPb
                                                (g$cadr$6433$DDDPb
                                                  g$x$11620$DDDPb)
                                                g$r$11619$DDDPb))))))
                                   (g$map$5753$DDDPb
                                     cons
                                     g$formals$11615$DDDPb
                                     g$actuals$11616$DDDPb))
                                  (cdr g$e$11613$DDDPb)))
                               (g$cons*$5755$DDDPb
                                 'map
                                 (list
                                   'lambda
                                   g$formals$11615$DDDPb
                                   g$e$11613$DDDPb)
                                 g$actuals$11616$DDDPb)))))
                        (g$map$5753$DDDPb cdr g$map-env$11614$DDDPb)
                        (g$map$5753$DDDPb
                          (case-lambda
                            ((g$x$11621$DDDPb)
                             (list 'ref (car g$x$11621$DDDPb))))
                          g$map-env$11614$DDDPb)))))
                  (g$gen-cons$11587$DDDPb
                    (case-lambda
                      ((g$e$11605$DDDPb
                         g$x$11606$DDDPb
                         g$y$11607$DDDPb
                         g$xnew$11608$DDDPb
                         g$ynew$11609$DDDPb)
                       ((case-lambda
                          ((g$t$11610$DDDPb)
                           (if (eqv? g$t$11610$DDDPb 'quote)
                             (if (eq? (car g$xnew$11608$DDDPb) 'quote)
                               ((case-lambda
                                  ((g$xnew$11611$DDDPb
                                     g$ynew$11612$DDDPb)
                                   (if (if (eq? g$xnew$11611$DDDPb
                                                g$x$11606$DDDPb)
                                         (begin
                                           '#f
                                           (eq? g$ynew$11612$DDDPb
                                                g$y$11607$DDDPb))
                                         '#f)
                                     (list 'quote g$e$11605$DDDPb)
                                     (list
                                       'quote
                                       (cons
                                         g$xnew$11611$DDDPb
                                         g$ynew$11612$DDDPb)))))
                                (g$cadr$6433$DDDPb g$xnew$11608$DDDPb)
                                (g$cadr$6433$DDDPb g$ynew$11609$DDDPb))
                               (if (null?
                                     (g$cadr$6433$DDDPb
                                       g$ynew$11609$DDDPb))
                                 (list 'list g$xnew$11608$DDDPb)
                                 (list
                                   'cons
                                   g$xnew$11608$DDDPb
                                   g$ynew$11609$DDDPb)))
                             (if (eqv? g$t$11610$DDDPb 'list)
                               (cons
                                 'list
                                 (cons
                                   g$xnew$11608$DDDPb
                                   (cdr g$ynew$11609$DDDPb)))
                               (list
                                 'cons
                                 g$xnew$11608$DDDPb
                                 g$ynew$11609$DDDPb)))))
                        (car g$ynew$11609$DDDPb)))))
                  (g$gen-vector$11588$DDDPb
                    (case-lambda
                      ((g$e$11602$DDDPb
                         g$ls$11603$DDDPb
                         g$lsnew$11604$DDDPb)
                       (if (eq? (car g$lsnew$11604$DDDPb) 'quote)
                         (if (eq? (g$cadr$6433$DDDPb
                                    g$lsnew$11604$DDDPb)
                                  g$ls$11603$DDDPb)
                           (list 'quote g$e$11602$DDDPb)
                           (list
                             'quote
                             (g$list->vector$6419$DDDPb
                               (g$cadr$6433$DDDPb
                                 g$lsnew$11604$DDDPb))))
                         (if (eq? (car g$lsnew$11604$DDDPb) 'list)
                           (cons 'vector (cdr g$lsnew$11604$DDDPb))
                           (list 'list->vector g$lsnew$11604$DDDPb))))))
                  (g$regen$11589$DDDPb
                    (case-lambda
                      ((g$x$11599$DDDPb)
                       ((case-lambda
                          ((g$t$11600$DDDPb)
                           (if (eqv? g$t$11600$DDDPb 'ref)
                             (g$cadr$6433$DDDPb g$x$11599$DDDPb)
                             (if (eqv? g$t$11600$DDDPb 'primitive)
                               (list
                                 'primitive
                                 (g$cadr$6433$DDDPb g$x$11599$DDDPb))
                               (if (eqv? g$t$11600$DDDPb 'quote)
                                 (list
                                   'quote
                                   (g$cadr$6433$DDDPb g$x$11599$DDDPb))
                                 (if (eqv? g$t$11600$DDDPb 'lambda)
                                   (g$build-lambda$9276$DDDPb
                                     '#f
                                     (g$cadr$6433$DDDPb g$x$11599$DDDPb)
                                     (g$regen$11589$DDDPb
                                       (g$caddr$6439$DDDPb
                                         g$x$11599$DDDPb)))
                                   (if (eqv? g$t$11600$DDDPb 'map)
                                     ((case-lambda
                                        ((g$ls$11601$DDDPb)
                                         (cons
                                           '(primitive ellipsis-map)
                                           g$ls$11601$DDDPb)))
                                      (g$map$5753$DDDPb
                                        g$regen$11589$DDDPb
                                        (cdr g$x$11599$DDDPb)))
                                     (cons
                                       (list
                                         'primitive
                                         (car g$x$11599$DDDPb))
                                       (g$map$5753$DDDPb
                                         g$regen$11589$DDDPb
                                         (cdr g$x$11599$DDDPb))))))))))
                        (car g$x$11599$DDDPb))))))
          ((case-lambda
             ((g$t$11590$DDDPb)
              ((case-lambda
                 ((g$ls/false$11591$DDDPb)
                  (if g$ls/false$11591$DDDPb
                    (apply
                      (case-lambda
                        ((g$x$11592$DDDPb)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$gen-syntax$11582$DDDPb
                                g$e$11579$DDDPb
                                g$x$11592$DDDPb
                                g$r$11580$DDDPb
                                '()
                                g$ellipsis?$9718$DDDPb
                                '#f)))
                           (case-lambda
                             ((g$e$11595$DDDPb g$maps$11596$DDDPb)
                              ((case-lambda
                                 ((g$maps$11597$DDDPb g$e$11598$DDDPb)
                                  (g$regen$11589$DDDPb
                                    g$e$11598$DDDPb)))
                               g$maps$11596$DDDPb
                               g$e$11595$DDDPb))))))
                      g$ls/false$11591$DDDPb)
                    (g$syntax-violation$9835$DDDPb
                      '#f
                      '"invalid syntax"
                      g$t$11590$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$11590$DDDPb
                 '(_ any)))))
           g$e$11579$DDDPb)))))
   (g$core-macro-transformer$9724$DDDPb
     g$core-macro-transformer$13265$DDDPb
     (case-lambda
       ((g$name$11743$DDDPb)
        ((case-lambda
           ((g$t$11744$DDDPb)
            (if (eqv? g$t$11744$DDDPb 'quote)
              g$quote-transformer$9677$DDDPb
              (if (eqv? g$t$11744$DDDPb 'lambda)
                g$lambda-transformer$9679$DDDPb
                (if (eqv? g$t$11744$DDDPb 'case-lambda)
                  g$case-lambda-transformer$9678$DDDPb
                  (if (eqv? g$t$11744$DDDPb 'letrec)
                    g$letrec-transformer$9667$DDDPb
                    (if (eqv? g$t$11744$DDDPb 'letrec*)
                      g$letrec*-transformer$9668$DDDPb
                      (if (eqv? g$t$11744$DDDPb 'if)
                        g$if-transformer$9675$DDDPb
                        (if (eqv? g$t$11744$DDDPb 'foreign-call)
                          g$foreign-call-transformer$9715$DDDPb
                          (if (eqv? g$t$11744$DDDPb 'syntax-case)
                            g$syntax-case-transformer$9721$DDDPb
                            (if (eqv? g$t$11744$DDDPb 'syntax)
                              g$syntax-transformer$9723$DDDPb
                              (if (eqv?
                                    g$t$11744$DDDPb
                                    'type-descriptor)
                                g$type-descriptor-transformer$9670$DDDPb
                                (if (eqv?
                                      g$t$11744$DDDPb
                                      'record-type-descriptor)
                                  g$record-type-descriptor-transformer$9671$DDDPb
                                  (if (eqv?
                                        g$t$11744$DDDPb
                                        'record-constructor-descriptor)
                                    g$record-constructor-descriptor-transformer$9672$DDDPb
                                    (if (eqv?
                                          g$t$11744$DDDPb
                                          'fluid-let-syntax)
                                      g$fluid-let-syntax-transformer$9669$DDDPb
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$11743$DDDPb))))))))))))))))
         g$name$11743$DDDPb))))
   (g$file-options-macro$9725$DDDPb
     g$file-options-macro$13266$DDDPb
     (case-lambda
       ((g$x$11745$DDDPb)
        (letrec* ((g$valid-option?$11746$DDDPb
                    (case-lambda
                      ((g$x$11751$DDDPb)
                       (if (g$id?$9354$DDDPb g$x$11751$DDDPb)
                         (begin
                           '#f
                           (g$memq$5745$DDDPb
                             (g$id->sym$9355$DDDPb g$x$11751$DDDPb)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$11747$DDDPb)
              ((case-lambda
                 ((g$ls/false$11748$DDDPb)
                  (if (if g$ls/false$11748$DDDPb
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$11749$DDDPb)
                               (if (g$for-all$5751$DDDPb
                                     g$valid-option?$11746$DDDPb
                                     g$opt*$11749$DDDPb)
                                 (begin
                                   '#f
                                   (g$file-options-spec$8262$DDDPb
                                     (g$map$5753$DDDPb
                                       g$id->sym$9355$DDDPb
                                       g$opt*$11749$DDDPb)))
                                 '#f)))
                            g$ls/false$11748$DDDPb))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$11750$DDDPb)
                         (g$bless$9680$DDDPb
                           (list
                             'quote
                             (g$file-options-spec$8262$DDDPb
                               (g$map$5753$DDDPb
                                 g$id->sym$9355$DDDPb
                                 g$opt*$11750$DDDPb))))))
                      g$ls/false$11748$DDDPb)
                    (g$syntax-violation$9835$DDDPb
                      '#f
                      '"invalid syntax"
                      g$t$11747$DDDPb))))
               (g$syntax-dispatch$9717$DDDPb
                 g$t$11747$DDDPb
                 '(_ . each-any)))))
           g$x$11745$DDDPb)))))
   (g$symbol-macro$9726$DDDPb
     g$symbol-macro$13267$DDDPb
     (case-lambda
       ((g$x$11752$DDDPb g$set$11753$DDDPb)
        ((case-lambda
           ((g$t$11754$DDDPb)
            ((case-lambda
               ((g$ls/false$11755$DDDPb)
                (if (if g$ls/false$11755$DDDPb
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$11756$DDDPb)
                             (if (g$id?$9354$DDDPb g$name$11756$DDDPb)
                               (begin
                                 '#f
                                 (g$memq$5745$DDDPb
                                   (g$id->sym$9355$DDDPb
                                     g$name$11756$DDDPb)
                                   g$set$11753$DDDPb))
                               '#f)))
                          g$ls/false$11755$DDDPb))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$11757$DDDPb)
                       (g$bless$9680$DDDPb
                         (list 'quote g$name$11757$DDDPb))))
                    g$ls/false$11755$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$11754$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$11754$DDDPb '(_ any)))))
         g$x$11752$DDDPb))))
   (g$macro-transformer$9727$DDDPb
     g$macro-transformer$13268$DDDPb
     (case-lambda
       ((g$x$11758$DDDPb)
        (if (g$procedure?$6426$DDDPb g$x$11758$DDDPb)
          g$x$11758$DDDPb
          (if (g$symbol?$6424$DDDPb g$x$11758$DDDPb)
            ((case-lambda
               ((g$t$11759$DDDPb)
                (if (eqv? g$t$11759$DDDPb 'define-record-type)
                  g$define-record-type-macro$9711$DDDPb
                  (if (eqv? g$t$11759$DDDPb 'define-struct)
                    g$define-struct-macro$9710$DDDPb
                    (if (eqv? g$t$11759$DDDPb 'include)
                      g$include-macro$9705$DDDPb
                      (if (eqv? g$t$11759$DDDPb 'cond)
                        g$cond-macro$9703$DDDPb
                        (if (eqv? g$t$11759$DDDPb 'let)
                          g$let-macro$9683$DDDPb
                          (if (eqv? g$t$11759$DDDPb 'do)
                            g$do-macro$9699$DDDPb
                            (if (eqv? g$t$11759$DDDPb 'or)
                              g$or-macro$9701$DDDPb
                              (if (eqv? g$t$11759$DDDPb 'and)
                                g$and-macro$9702$DDDPb
                                (if (eqv? g$t$11759$DDDPb 'let*)
                                  g$let*-macro$9700$DDDPb
                                  (if (eqv? g$t$11759$DDDPb 'let-values)
                                    g$let-values-macro$9684$DDDPb
                                    (if (eqv?
                                          g$t$11759$DDDPb
                                          'let*-values)
                                      g$let*-values-macro$9685$DDDPb
                                      (if (eqv?
                                            g$t$11759$DDDPb
                                            'syntax-rules)
                                        g$syntax-rules-macro$9707$DDDPb
                                        (if (eqv?
                                              g$t$11759$DDDPb
                                              'quasiquote)
                                          g$quasiquote-macro$9708$DDDPb
                                          (if (eqv?
                                                g$t$11759$DDDPb
                                                'quasisyntax)
                                            g$quasisyntax-macro$9709$DDDPb
                                            (if (eqv?
                                                  g$t$11759$DDDPb
                                                  'with-syntax)
                                              g$with-syntax-macro$9681$DDDPb
                                              (if (eqv?
                                                    g$t$11759$DDDPb
                                                    'when)
                                                g$when-macro$9673$DDDPb
                                                (if (eqv?
                                                      g$t$11759$DDDPb
                                                      'unless)
                                                  g$unless-macro$9674$DDDPb
                                                  (if (eqv?
                                                        g$t$11759$DDDPb
                                                        'case)
                                                    g$case-macro$9676$DDDPb
                                                    (if (eqv?
                                                          g$t$11759$DDDPb
                                                          'identifier-syntax)
                                                      g$identifier-syntax-macro$9698$DDDPb
                                                      (if (eqv?
                                                            g$t$11759$DDDPb
                                                            'time)
                                                        g$time-macro$9694$DDDPb
                                                        (if (eqv?
                                                              g$t$11759$DDDPb
                                                              'delay)
                                                          g$delay-macro$9695$DDDPb
                                                          (if (eqv?
                                                                g$t$11759$DDDPb
                                                                'assert)
                                                            g$assert-macro$9696$DDDPb
                                                            (if (eqv?
                                                                  g$t$11759$DDDPb
                                                                  'endianness)
                                                              g$endianness-macro$9697$DDDPb
                                                              (if (eqv?
                                                                    g$t$11759$DDDPb
                                                                    'guard)
                                                                g$guard-macro$9692$DDDPb
                                                                (if (eqv?
                                                                      g$t$11759$DDDPb
                                                                      'define-enumeration)
                                                                  g$define-enumeration-macro$9693$DDDPb
                                                                  (if (eqv?
                                                                        g$t$11759$DDDPb
                                                                        'trace-lambda)
                                                                    g$trace-lambda-macro$9686$DDDPb
                                                                    (if (eqv?
                                                                          g$t$11759$DDDPb
                                                                          'trace-define)
                                                                      g$trace-define-macro$9687$DDDPb
                                                                      (if (eqv?
                                                                            g$t$11759$DDDPb
                                                                            'trace-define-syntax)
                                                                        g$trace-define-syntax-macro$9688$DDDPb
                                                                        (if (eqv?
                                                                              g$t$11759$DDDPb
                                                                              'trace-let-syntax)
                                                                          g$trace-let-syntax-macro$9690$DDDPb
                                                                          (if (eqv?
                                                                                g$t$11759$DDDPb
                                                                                'trace-letrec-syntax)
                                                                            g$trace-letrec-syntax-macro$9691$DDDPb
                                                                            (if (eqv?
                                                                                  g$t$11759$DDDPb
                                                                                  'define-condition-type)
                                                                              g$define-condition-type-macro$9712$DDDPb
                                                                              (if (eqv?
                                                                                    g$t$11759$DDDPb
                                                                                    'parameterize)
                                                                                g$parameterize-macro$9714$DDDPb
                                                                                (if (eqv?
                                                                                      g$t$11759$DDDPb
                                                                                      'include-into)
                                                                                  g$include-into-macro$9706$DDDPb
                                                                                  (if (eqv?
                                                                                        g$t$11759$DDDPb
                                                                                        'eol-style)
                                                                                    (case-lambda
                                                                                      ((g$x$11760$DDDPb)
                                                                                       (g$symbol-macro$9726$DDDPb
                                                                                         g$x$11760$DDDPb
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (eqv?
                                                                                          g$t$11759$DDDPb
                                                                                          'error-handling-mode)
                                                                                      (case-lambda
                                                                                        ((g$x$11761$DDDPb)
                                                                                         (g$symbol-macro$9726$DDDPb
                                                                                           g$x$11761$DDDPb
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (eqv?
                                                                                            g$t$11759$DDDPb
                                                                                            'buffer-mode)
                                                                                        (case-lambda
                                                                                          ((g$x$11762$DDDPb)
                                                                                           (g$symbol-macro$9726$DDDPb
                                                                                             g$x$11762$DDDPb
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (eqv?
                                                                                              g$t$11759$DDDPb
                                                                                              'file-options)
                                                                                          g$file-options-macro$9725$DDDPb
                                                                                          (if (g$memv$5746$DDDPb
                                                                                                g$t$11759$DDDPb
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$9713$DDDPb
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$11758$DDDPb)))))))))))))))))))))))))))))))))))))))))
             g$x$11758$DDDPb)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$11758$DDDPb))))))
   (g$local-macro-transformer$9728$DDDPb
     g$local-macro-transformer$13269$DDDPb
     (case-lambda ((g$x$11763$DDDPb) (car g$x$11763$DDDPb))))
   (g$do-macro-call$9729$DDDPb
     g$do-macro-call$13270$DDDPb
     (case-lambda
       ((g$transformer$11764$DDDPb g$expr$11765$DDDPb g$r$11766$DDDPb)
        (letrec* ((g$return$11767$DDDPb
                    (case-lambda
                      ((g$x$11775$DDDPb)
                       (begin
                         ((letrec ((g$f$11776$DDDPb
                                     (case-lambda
                                       ((g$x$11777$DDDPb)
                                        (if (not (g$stx?$9326$DDDPb
                                                   g$x$11777$DDDPb))
                                          (if (pair? g$x$11777$DDDPb)
                                            (begin
                                              (g$f$11776$DDDPb
                                                (car g$x$11777$DDDPb))
                                              (g$f$11776$DDDPb
                                                (cdr g$x$11777$DDDPb)))
                                            (if (g$vector?$6422$DDDPb
                                                  g$x$11777$DDDPb)
                                              (g$vector-for-each$6485$DDDPb
                                                g$f$11776$DDDPb
                                                g$x$11777$DDDPb)
                                              (if (g$symbol?$6424$DDDPb
                                                    g$x$11777$DDDPb)
                                                (g$syntax-violation$9835$DDDPb
                                                  '#f
                                                  '"raw symbol encountered in output of macro"
                                                  g$expr$11765$DDDPb
                                                  g$x$11777$DDDPb)
                                                (void))))
                                          (void))))))
                            g$f$11776$DDDPb)
                          g$x$11775$DDDPb)
                         (g$add-mark$9343$DDDPb
                           (g$gen-mark$9338$DDDPb)
                           g$x$11775$DDDPb
                           g$expr$11765$DDDPb))))))
          ((case-lambda
             ((g$x$11768$DDDPb)
              (if (g$procedure?$6426$DDDPb g$x$11768$DDDPb)
                (g$return$11767$DDDPb
                  (g$x$11768$DDDPb
                    (case-lambda
                      ((g$id$11769$DDDPb)
                       (begin
                         (if (not (g$id?$9354$DDDPb g$id$11769$DDDPb))
                           (assertion-violation
                             'rho
                             '"not an identifier"
                             g$id$11769$DDDPb)
                           (void))
                         ((case-lambda
                            ((g$label$11770$DDDPb)
                             ((case-lambda
                                ((g$binding$11771$DDDPb)
                                 ((case-lambda
                                    ((g$t$11772$DDDPb)
                                     (if (eqv?
                                           g$t$11772$DDDPb
                                           'local-ctv)
                                       (g$cadr$6433$DDDPb
                                         g$binding$11771$DDDPb)
                                       (if (eqv?
                                             g$t$11772$DDDPb
                                             'global-ctv)
                                         ((case-lambda
                                            ((g$lib$11773$DDDPb
                                               g$loc$11774$DDDPb)
                                             (begin
                                               (g$visit-library$9094$DDDPb
                                                 g$lib$11773$DDDPb)
                                               (symbol-value
                                                 g$loc$11774$DDDPb))))
                                          (g$cadr$6433$DDDPb
                                            g$binding$11771$DDDPb)
                                          (g$cddr$6435$DDDPb
                                            g$binding$11771$DDDPb))
                                         '#f))))
                                  (car g$binding$11771$DDDPb))))
                              (g$label->binding$9369$DDDPb
                                g$label$11770$DDDPb
                                g$r$11766$DDDPb))))
                          (g$id->label$9367$DDDPb
                            g$id$11769$DDDPb)))))))
                (g$return$11767$DDDPb g$x$11768$DDDPb))))
           (g$transformer$11764$DDDPb
             (g$add-mark$9343$DDDPb
               g$anti-mark$9339$DDDPb
               g$expr$11765$DDDPb
               '#f)))))))
   (g$chi-macro$9730$DDDPb
     g$chi-macro$13271$DDDPb
     (case-lambda
       ((g$p$11778$DDDPb g$e$11779$DDDPb g$r$11780$DDDPb)
        (g$do-macro-call$9729$DDDPb
          (g$macro-transformer$9727$DDDPb g$p$11778$DDDPb)
          g$e$11779$DDDPb
          g$r$11780$DDDPb))))
   (g$chi-local-macro$9731$DDDPb
     g$chi-local-macro$13272$DDDPb
     (case-lambda
       ((g$p$11781$DDDPb g$e$11782$DDDPb g$r$11783$DDDPb)
        (g$do-macro-call$9729$DDDPb
          (g$local-macro-transformer$9728$DDDPb g$p$11781$DDDPb)
          g$e$11782$DDDPb
          g$r$11783$DDDPb))))
   (g$chi-global-macro$9732$DDDPb
     g$chi-global-macro$13273$DDDPb
     (case-lambda
       ((g$p$11784$DDDPb g$e$11785$DDDPb g$r$11786$DDDPb)
        ((case-lambda
           ((g$lib$11787$DDDPb g$loc$11788$DDDPb)
            (begin
              (g$visit-library$9094$DDDPb g$lib$11787$DDDPb)
              ((case-lambda
                 ((g$x$11789$DDDPb)
                  ((case-lambda
                     ((g$transformer$11790$DDDPb)
                      (g$do-macro-call$9729$DDDPb
                        g$transformer$11790$DDDPb
                        g$e$11785$DDDPb
                        g$r$11786$DDDPb)))
                   (if (g$procedure?$6426$DDDPb g$x$11789$DDDPb)
                     g$x$11789$DDDPb
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$11789$DDDPb)))))
               (symbol-value g$loc$11788$DDDPb)))))
         (car g$p$11784$DDDPb)
         (cdr g$p$11784$DDDPb)))))
   (g$chi-expr*$9733$DDDPb
     g$chi-expr*$13274$DDDPb
     (case-lambda
       ((g$e*$11791$DDDPb g$r$11792$DDDPb g$mr$11793$DDDPb)
        (if (null? g$e*$11791$DDDPb)
          '()
          ((case-lambda
             ((g$e$11794$DDDPb)
              (cons
                g$e$11794$DDDPb
                (g$chi-expr*$9733$DDDPb
                  (cdr g$e*$11791$DDDPb)
                  g$r$11792$DDDPb
                  g$mr$11793$DDDPb))))
           (g$chi-expr$9735$DDDPb
             (car g$e*$11791$DDDPb)
             g$r$11792$DDDPb
             g$mr$11793$DDDPb))))))
   (g$chi-application$9734$DDDPb
     g$chi-application$13275$DDDPb
     (case-lambda
       ((g$e$11795$DDDPb g$r$11796$DDDPb g$mr$11797$DDDPb)
        ((case-lambda
           ((g$t$11798$DDDPb)
            ((case-lambda
               ((g$ls/false$11799$DDDPb)
                (if g$ls/false$11799$DDDPb
                  (apply
                    (case-lambda
                      ((g$rator$11800$DDDPb g$rands$11801$DDDPb)
                       ((case-lambda
                          ((g$rator$11802$DDDPb)
                           (cons
                             g$rator$11802$DDDPb
                             (g$chi-expr*$9733$DDDPb
                               g$rands$11801$DDDPb
                               g$r$11796$DDDPb
                               g$mr$11797$DDDPb))))
                        (g$chi-expr$9735$DDDPb
                          g$rator$11800$DDDPb
                          g$r$11796$DDDPb
                          g$mr$11797$DDDPb))))
                    g$ls/false$11799$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$11798$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$11798$DDDPb
               '(any . each-any)))))
         g$e$11795$DDDPb))))
   (g$chi-expr$9735$DDDPb
     g$chi-expr$13276$DDDPb
     (case-lambda
       ((g$e$11803$DDDPb g$r$11804$DDDPb g$mr$11805$DDDPb)
        (call-with-values
          (case-lambda
            (()
             (g$syntax-type$9374$DDDPb
               g$e$11803$DDDPb
               g$r$11804$DDDPb)))
          (case-lambda
            ((g$type$11809$DDDPb g$value$11810$DDDPb g$kwd$11811$DDDPb)
             ((case-lambda
                ((g$kwd$11812$DDDPb
                   g$value$11813$DDDPb
                   g$type$11814$DDDPb)
                 ((case-lambda
                    ((g$t$11815$DDDPb)
                     (if (eqv? g$t$11815$DDDPb 'core-macro)
                       ((case-lambda
                          ((g$transformer$11816$DDDPb)
                           (g$transformer$11816$DDDPb
                             g$e$11803$DDDPb
                             g$r$11804$DDDPb
                             g$mr$11805$DDDPb)))
                        (g$core-macro-transformer$9724$DDDPb
                          g$value$11813$DDDPb))
                       (if (eqv? g$t$11815$DDDPb 'global)
                         ((case-lambda
                            ((g$lib$11817$DDDPb)
                             ((case-lambda
                                ((g$loc$11818$DDDPb)
                                 (begin
                                   ((g$inv-collector$9771$DDDPb)
                                    g$lib$11817$DDDPb)
                                   g$loc$11818$DDDPb)))
                              (cdr g$value$11813$DDDPb))))
                          (car g$value$11813$DDDPb))
                         (if (eqv? g$t$11815$DDDPb 'core-prim)
                           ((case-lambda
                              ((g$name$11819$DDDPb)
                               (list 'primitive g$name$11819$DDDPb)))
                            g$value$11813$DDDPb)
                           (if (eqv? g$t$11815$DDDPb 'call)
                             (g$chi-application$9734$DDDPb
                               g$e$11803$DDDPb
                               g$r$11804$DDDPb
                               g$mr$11805$DDDPb)
                             (if (eqv? g$t$11815$DDDPb 'lexical)
                               ((case-lambda
                                  ((g$lex$11820$DDDPb)
                                   g$lex$11820$DDDPb))
                                (g$lexical-var$9661$DDDPb
                                  g$value$11813$DDDPb))
                               (if (g$memv$5746$DDDPb
                                     g$t$11815$DDDPb
                                     '(global-macro global-macro!))
                                 (g$chi-expr$9735$DDDPb
                                   (g$chi-global-macro$9732$DDDPb
                                     g$value$11813$DDDPb
                                     g$e$11803$DDDPb
                                     g$r$11804$DDDPb)
                                   g$r$11804$DDDPb
                                   g$mr$11805$DDDPb)
                                 (if (g$memv$5746$DDDPb
                                       g$t$11815$DDDPb
                                       '(local-macro local-macro!))
                                   (g$chi-expr$9735$DDDPb
                                     (g$chi-local-macro$9731$DDDPb
                                       g$value$11813$DDDPb
                                       g$e$11803$DDDPb
                                       g$r$11804$DDDPb)
                                     g$r$11804$DDDPb
                                     g$mr$11805$DDDPb)
                                   (if (g$memv$5746$DDDPb
                                         g$t$11815$DDDPb
                                         '(macro macro!))
                                     (g$chi-expr$9735$DDDPb
                                       (g$chi-macro$9730$DDDPb
                                         g$value$11813$DDDPb
                                         g$e$11803$DDDPb
                                         g$r$11804$DDDPb)
                                       g$r$11804$DDDPb
                                       g$mr$11805$DDDPb)
                                     (if (eqv?
                                           g$t$11815$DDDPb
                                           'constant)
                                       ((case-lambda
                                          ((g$datum$11821$DDDPb)
                                           (list
                                             'quote
                                             g$datum$11821$DDDPb)))
                                        g$value$11813$DDDPb)
                                       (if (eqv? g$t$11815$DDDPb 'set!)
                                         (g$chi-set!$9736$DDDPb
                                           g$e$11803$DDDPb
                                           g$r$11804$DDDPb
                                           g$mr$11805$DDDPb)
                                         (if (eqv?
                                               g$t$11815$DDDPb
                                               'begin)
                                           ((case-lambda
                                              ((g$t$11822$DDDPb)
                                               ((case-lambda
                                                  ((g$ls/false$11823$DDDPb)
                                                   (if g$ls/false$11823$DDDPb
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$11824$DDDPb
                                                            g$x*$11825$DDDPb)
                                                          (g$build-sequence$9279$DDDPb
                                                            '#f
                                                            (g$chi-expr*$9733$DDDPb
                                                              (cons
                                                                g$x$11824$DDDPb
                                                                g$x*$11825$DDDPb)
                                                              g$r$11804$DDDPb
                                                              g$mr$11805$DDDPb))))
                                                       g$ls/false$11823$DDDPb)
                                                     (g$syntax-violation$9835$DDDPb
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$11822$DDDPb))))
                                                (g$syntax-dispatch$9717$DDDPb
                                                  g$t$11822$DDDPb
                                                  '(_ any
                                                      .
                                                      each-any)))))
                                            g$e$11803$DDDPb)
                                           (if (g$memv$5746$DDDPb
                                                 g$t$11815$DDDPb
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$11826$DDDPb)
                                                 ((case-lambda
                                                    ((g$ls/false$11827$DDDPb)
                                                     (if (if g$ls/false$11827$DDDPb
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$11828$DDDPb
                                                                    g$xrhs*$11829$DDDPb
                                                                    g$xbody$11830$DDDPb
                                                                    g$xbody*$11831$DDDPb)
                                                                  (if (not (g$valid-bound-ids?$9359$DDDPb
                                                                             g$xlhs*$11828$DDDPb))
                                                                    (g$syntax-violation$9835$DDDPb
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$11803$DDDPb)
                                                                    (void))))
                                                               g$ls/false$11827$DDDPb))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$11832$DDDPb
                                                              g$xrhs*$11833$DDDPb
                                                              g$xbody$11834$DDDPb
                                                              g$xbody*$11835$DDDPb)
                                                            ((case-lambda
                                                               ((g$xlab*$11836$DDDPb)
                                                                ((case-lambda
                                                                   ((g$xrib$11837$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$xb*$11838$DDDPb)
                                                                        (g$build-sequence$9279$DDDPb
                                                                          '#f
                                                                          (g$chi-expr*$9733$DDDPb
                                                                            (g$map$5753$DDDPb
                                                                              (case-lambda
                                                                                ((g$x$11839$DDDPb)
                                                                                 (g$add-subst$9344$DDDPb
                                                                                   g$xrib$11837$DDDPb
                                                                                   g$x$11839$DDDPb)))
                                                                              (cons
                                                                                g$xbody$11834$DDDPb
                                                                                g$xbody*$11835$DDDPb))
                                                                            (append
                                                                              (g$map$5753$DDDPb
                                                                                cons
                                                                                g$xlab*$11836$DDDPb
                                                                                g$xb*$11838$DDDPb)
                                                                              g$r$11804$DDDPb)
                                                                            (append
                                                                              (g$map$5753$DDDPb
                                                                                cons
                                                                                g$xlab*$11836$DDDPb
                                                                                g$xb*$11838$DDDPb)
                                                                              g$mr$11805$DDDPb)))))
                                                                     (g$map$5753$DDDPb
                                                                       (case-lambda
                                                                         ((g$x$11840$DDDPb)
                                                                          (g$make-eval-transformer$9396$DDDPb
                                                                            (g$expand-transformer$9764$DDDPb
                                                                              (if (eq? g$type$11814$DDDPb
                                                                                       'let-syntax)
                                                                                g$x$11840$DDDPb
                                                                                (g$add-subst$9344$DDDPb
                                                                                  g$xrib$11837$DDDPb
                                                                                  g$x$11840$DDDPb))
                                                                              g$mr$11805$DDDPb))))
                                                                       g$xrhs*$11833$DDDPb))))
                                                                 (g$make-full-rib$9320$DDDPb
                                                                   g$xlhs*$11832$DDDPb
                                                                   g$xlab*$11836$DDDPb))))
                                                             (g$map$5753$DDDPb
                                                               g$gen-label$9291$DDDPb
                                                               g$xlhs*$11832$DDDPb))))
                                                         g$ls/false$11827$DDDPb)
                                                       (g$syntax-violation$9835$DDDPb
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$11826$DDDPb))))
                                                  (g$syntax-dispatch$9717$DDDPb
                                                    g$t$11826$DDDPb
                                                    '(_ #(each
                                                          (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$11803$DDDPb)
                                             (if (eqv?
                                                   g$t$11815$DDDPb
                                                   'displaced-lexical)
                                               (g$syntax-violation$9835$DDDPb
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$11803$DDDPb)
                                               (if (eqv?
                                                     g$t$11815$DDDPb
                                                     'syntax)
                                                 (g$syntax-violation$9835$DDDPb
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$11803$DDDPb)
                                                 (if (g$memv$5746$DDDPb
                                                       g$t$11815$DDDPb
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$9835$DDDPb
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$11841$DDDPb)
                                                           (if (eqv?
                                                                 g$t$11841$DDDPb
                                                                 'define)
                                                             '"a definition"
                                                             (if (eqv?
                                                                   g$t$11841$DDDPb
                                                                   'define-syntax)
                                                               '"a define-syntax"
                                                               (if (eqv?
                                                                     g$t$11841$DDDPb
                                                                     'module)
                                                                 '"a module definition"
                                                                 (if (eqv?
                                                                       g$t$11841$DDDPb
                                                                       'library)
                                                                   '"a library definition"
                                                                   (if (eqv?
                                                                         g$t$11841$DDDPb
                                                                         'import)
                                                                     '"an import declaration"
                                                                     (if (eqv?
                                                                           g$t$11841$DDDPb
                                                                           'export)
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$11814$DDDPb)
                                                       '" was found where an expression was expected")
                                                     g$e$11803$DDDPb)
                                                   (if (eqv?
                                                         g$t$11815$DDDPb
                                                         'mutable)
                                                     (g$syntax-violation$9835$DDDPb
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$11803$DDDPb)
                                                     (g$syntax-violation$9835$DDDPb
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$11803$DDDPb)))))))))))))))))))
                  g$type$11814$DDDPb)))
              g$kwd$11811$DDDPb
              g$value$11810$DDDPb
              g$type$11809$DDDPb)))))))
   (g$chi-set!$9736$DDDPb
     g$chi-set!$13277$DDDPb
     (case-lambda
       ((g$e$11842$DDDPb g$r$11843$DDDPb g$mr$11844$DDDPb)
        ((case-lambda
           ((g$t$11845$DDDPb)
            ((case-lambda
               ((g$ls/false$11846$DDDPb)
                (if (if g$ls/false$11846$DDDPb
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$11847$DDDPb g$v$11848$DDDPb)
                             (g$id?$9354$DDDPb g$x$11847$DDDPb)))
                          g$ls/false$11846$DDDPb))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$11849$DDDPb g$v$11850$DDDPb)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$9374$DDDPb
                              g$x$11849$DDDPb
                              g$r$11843$DDDPb)))
                         (case-lambda
                           ((g$type$11854$DDDPb
                              g$value$11855$DDDPb
                              g$kwd$11856$DDDPb)
                            ((case-lambda
                               ((g$kwd$11857$DDDPb
                                  g$value$11858$DDDPb
                                  g$type$11859$DDDPb)
                                ((case-lambda
                                   ((g$t$11860$DDDPb)
                                    (if (eqv? g$t$11860$DDDPb 'lexical)
                                      (begin
                                        (g$set-lexical-mutable!$9663$DDDPb
                                          g$value$11858$DDDPb
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$9661$DDDPb
                                            g$value$11858$DDDPb)
                                          (g$chi-expr$9735$DDDPb
                                            g$v$11850$DDDPb
                                            g$r$11843$DDDPb
                                            g$mr$11844$DDDPb)))
                                      (if (eqv?
                                            g$t$11860$DDDPb
                                            'core-prim)
                                        (g$syntax-violation$9835$DDDPb
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$11842$DDDPb)
                                        (if (eqv?
                                              g$t$11860$DDDPb
                                              'global)
                                          (g$syntax-violation$9835$DDDPb
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$11842$DDDPb)
                                          (if (eqv?
                                                g$t$11860$DDDPb
                                                'global-macro!)
                                            (g$chi-expr$9735$DDDPb
                                              (g$chi-global-macro$9732$DDDPb
                                                g$value$11858$DDDPb
                                                g$e$11842$DDDPb
                                                g$r$11843$DDDPb)
                                              g$r$11843$DDDPb
                                              g$mr$11844$DDDPb)
                                            (if (eqv?
                                                  g$t$11860$DDDPb
                                                  'local-macro!)
                                              (g$chi-expr$9735$DDDPb
                                                (g$chi-local-macro$9731$DDDPb
                                                  g$value$11858$DDDPb
                                                  g$e$11842$DDDPb
                                                  g$r$11843$DDDPb)
                                                g$r$11843$DDDPb
                                                g$mr$11844$DDDPb)
                                              (if (eqv?
                                                    g$t$11860$DDDPb
                                                    'mutable)
                                                (g$syntax-violation$9835$DDDPb
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$11842$DDDPb)
                                                (g$syntax-violation$9835$DDDPb
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$11842$DDDPb)))))))))
                                 g$type$11859$DDDPb)))
                             g$kwd$11856$DDDPb
                             g$value$11855$DDDPb
                             g$type$11854$DDDPb))))))
                    g$ls/false$11846$DDDPb)
                  (g$syntax-violation$9835$DDDPb
                    '#f
                    '"invalid syntax"
                    g$t$11845$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$11845$DDDPb
               '(_ any any)))))
         g$e$11842$DDDPb))))
   (g$verify-formals$9737$DDDPb
     g$verify-formals$13278$DDDPb
     (case-lambda
       ((g$fmls$11861$DDDPb g$stx$11862$DDDPb)
        ((case-lambda
           ((g$t$11863$DDDPb)
            ((case-lambda
               ((g$ls/false$11864$DDDPb)
                (if g$ls/false$11864$DDDPb
                  (apply
                    (case-lambda
                      ((g$x*$11865$DDDPb)
                       (if (not (g$valid-bound-ids?$9359$DDDPb
                                  g$x*$11865$DDDPb))
                         (g$invalid-fmls-error$9682$DDDPb
                           g$stx$11862$DDDPb
                           g$fmls$11861$DDDPb)
                         (void))))
                    g$ls/false$11864$DDDPb)
                  ((case-lambda
                     ((g$t$11866$DDDPb)
                      ((case-lambda
                         ((g$ls/false$11867$DDDPb)
                          (if g$ls/false$11867$DDDPb
                            (apply
                              (case-lambda
                                ((g$x*$11868$DDDPb g$x$11869$DDDPb)
                                 (if (not (g$valid-bound-ids?$9359$DDDPb
                                            (cons
                                              g$x$11869$DDDPb
                                              g$x*$11868$DDDPb)))
                                   (g$invalid-fmls-error$9682$DDDPb
                                     g$stx$11862$DDDPb
                                     g$fmls$11861$DDDPb)
                                   (void))))
                              g$ls/false$11867$DDDPb)
                            ((case-lambda
                               ((g$t$11870$DDDPb)
                                ((case-lambda
                                   ((g$ls/false$11871$DDDPb)
                                    (if g$ls/false$11871$DDDPb
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$9835$DDDPb
                                             '#f
                                             '"invalid syntax"
                                             g$stx$11862$DDDPb)))
                                        g$ls/false$11871$DDDPb)
                                      (g$syntax-violation$9835$DDDPb
                                        '#f
                                        '"invalid syntax"
                                        g$t$11870$DDDPb))))
                                 (g$syntax-dispatch$9717$DDDPb
                                   g$t$11870$DDDPb
                                   '_))))
                             g$t$11866$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$11866$DDDPb
                         '#(each+ any () any)))))
                   g$t$11863$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$11863$DDDPb 'each-any))))
         g$fmls$11861$DDDPb))))
   (g$chi-lambda-clause$9738$DDDPb
     g$chi-lambda-clause$13279$DDDPb
     (case-lambda
       ((g$stx$11872$DDDPb
          g$fmls$11873$DDDPb
          g$body*$11874$DDDPb
          g$r$11875$DDDPb
          g$mr$11876$DDDPb)
        ((case-lambda
           ((g$t$11877$DDDPb)
            ((case-lambda
               ((g$ls/false$11878$DDDPb)
                (if g$ls/false$11878$DDDPb
                  (apply
                    (case-lambda
                      ((g$x*$11879$DDDPb)
                       (begin
                         (g$verify-formals$9737$DDDPb
                           g$fmls$11873$DDDPb
                           g$stx$11872$DDDPb)
                         ((case-lambda
                            ((g$lex*$11880$DDDPb g$lab*$11881$DDDPb)
                             (values
                               g$lex*$11880$DDDPb
                               (g$chi-internal$9746$DDDPb
                                 (g$add-subst$9344$DDDPb
                                   (g$make-full-rib$9320$DDDPb
                                     g$x*$11879$DDDPb
                                     g$lab*$11881$DDDPb)
                                   g$body*$11874$DDDPb)
                                 (g$add-lexicals$9665$DDDPb
                                   g$lab*$11881$DDDPb
                                   g$lex*$11880$DDDPb
                                   g$r$11875$DDDPb)
                                 g$mr$11876$DDDPb))))
                          (g$map$5753$DDDPb
                            g$gen-lexical$9289$DDDPb
                            g$x*$11879$DDDPb)
                          (g$map$5753$DDDPb
                            g$gen-label$9291$DDDPb
                            g$x*$11879$DDDPb)))))
                    g$ls/false$11878$DDDPb)
                  ((case-lambda
                     ((g$t$11882$DDDPb)
                      ((case-lambda
                         ((g$ls/false$11883$DDDPb)
                          (if g$ls/false$11883$DDDPb
                            (apply
                              (case-lambda
                                ((g$x*$11884$DDDPb g$x$11885$DDDPb)
                                 (begin
                                   (g$verify-formals$9737$DDDPb
                                     g$fmls$11873$DDDPb
                                     g$stx$11872$DDDPb)
                                   ((case-lambda
                                      ((g$lex*$11886$DDDPb
                                         g$lab*$11887$DDDPb
                                         g$lex$11888$DDDPb
                                         g$lab$11889$DDDPb)
                                       (values
                                         (append
                                           g$lex*$11886$DDDPb
                                           g$lex$11888$DDDPb)
                                         (g$chi-internal$9746$DDDPb
                                           (g$add-subst$9344$DDDPb
                                             (g$make-full-rib$9320$DDDPb
                                               (cons
                                                 g$x$11885$DDDPb
                                                 g$x*$11884$DDDPb)
                                               (cons
                                                 g$lab$11889$DDDPb
                                                 g$lab*$11887$DDDPb))
                                             g$body*$11874$DDDPb)
                                           (g$add-lexicals$9665$DDDPb
                                             (cons
                                               g$lab$11889$DDDPb
                                               g$lab*$11887$DDDPb)
                                             (cons
                                               g$lex$11888$DDDPb
                                               g$lex*$11886$DDDPb)
                                             g$r$11875$DDDPb)
                                           g$mr$11876$DDDPb))))
                                    (g$map$5753$DDDPb
                                      g$gen-lexical$9289$DDDPb
                                      g$x*$11884$DDDPb)
                                    (g$map$5753$DDDPb
                                      g$gen-label$9291$DDDPb
                                      g$x*$11884$DDDPb)
                                    (g$gen-lexical$9289$DDDPb
                                      g$x$11885$DDDPb)
                                    (g$gen-label$9291$DDDPb
                                      g$x$11885$DDDPb)))))
                              g$ls/false$11883$DDDPb)
                            ((case-lambda
                               ((g$t$11890$DDDPb)
                                ((case-lambda
                                   ((g$ls/false$11891$DDDPb)
                                    (if g$ls/false$11891$DDDPb
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$9835$DDDPb
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$11873$DDDPb)))
                                        g$ls/false$11891$DDDPb)
                                      (g$syntax-violation$9835$DDDPb
                                        '#f
                                        '"invalid syntax"
                                        g$t$11890$DDDPb))))
                                 (g$syntax-dispatch$9717$DDDPb
                                   g$t$11890$DDDPb
                                   '_))))
                             g$t$11882$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$11882$DDDPb
                         '#(each+ any () any)))))
                   g$t$11877$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$11877$DDDPb 'each-any))))
         g$fmls$11873$DDDPb))))
   (g$chi-lambda-clause*$9739$DDDPb
     g$chi-lambda-clause*$13280$DDDPb
     (case-lambda
       ((g$stx$11892$DDDPb
          g$fmls*$11893$DDDPb
          g$body**$11894$DDDPb
          g$r$11895$DDDPb
          g$mr$11896$DDDPb)
        (if (null? g$fmls*$11893$DDDPb)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$9738$DDDPb
                 g$stx$11892$DDDPb
                 (car g$fmls*$11893$DDDPb)
                 (car g$body**$11894$DDDPb)
                 g$r$11895$DDDPb
                 g$mr$11896$DDDPb)))
            (case-lambda
              ((g$a$11899$DDDPb g$b$11900$DDDPb)
               ((case-lambda
                  ((g$b$11901$DDDPb g$a$11902$DDDPb)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$9739$DDDPb
                          g$stx$11892$DDDPb
                          (cdr g$fmls*$11893$DDDPb)
                          (cdr g$body**$11894$DDDPb)
                          g$r$11895$DDDPb
                          g$mr$11896$DDDPb)))
                     (case-lambda
                       ((g$a*$11905$DDDPb g$b*$11906$DDDPb)
                        ((case-lambda
                           ((g$b*$11907$DDDPb g$a*$11908$DDDPb)
                            (values
                              (cons g$a$11902$DDDPb g$a*$11908$DDDPb)
                              (cons g$b$11901$DDDPb g$b*$11907$DDDPb))))
                         g$b*$11906$DDDPb
                         g$a*$11905$DDDPb))))))
                g$b$11900$DDDPb
                g$a$11899$DDDPb))))))))
   (g$chi-defun$9740$DDDPb
     g$chi-defun$13281$DDDPb
     (case-lambda
       ((g$x$11909$DDDPb g$r$11910$DDDPb g$mr$11911$DDDPb)
        ((case-lambda
           ((g$fmls$11912$DDDPb g$body*$11913$DDDPb)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$9738$DDDPb
                   g$fmls$11912$DDDPb
                   g$fmls$11912$DDDPb
                   g$body*$11913$DDDPb
                   g$r$11910$DDDPb
                   g$mr$11911$DDDPb)))
              (case-lambda
                ((g$fmls$11916$DDDPb g$body$11917$DDDPb)
                 ((case-lambda
                    ((g$body$11918$DDDPb g$fmls$11919$DDDPb)
                     (g$build-lambda$9276$DDDPb
                       '#f
                       g$fmls$11919$DDDPb
                       g$body$11918$DDDPb)))
                  g$body$11917$DDDPb
                  g$fmls$11916$DDDPb))))))
         (car g$x$11909$DDDPb)
         (cdr g$x$11909$DDDPb)))))
   (g$chi-rhs$9741$DDDPb
     g$chi-rhs$13282$DDDPb
     (case-lambda
       ((g$rhs$11920$DDDPb g$r$11921$DDDPb g$mr$11922$DDDPb)
        ((case-lambda
           ((g$t$11923$DDDPb)
            (if (eqv? g$t$11923$DDDPb 'defun)
              (g$chi-defun$9740$DDDPb
                (cdr g$rhs$11920$DDDPb)
                g$r$11921$DDDPb
                g$mr$11922$DDDPb)
              (if (eqv? g$t$11923$DDDPb 'expr)
                ((case-lambda
                   ((g$expr$11924$DDDPb)
                    (g$chi-expr$9735$DDDPb
                      g$expr$11924$DDDPb
                      g$r$11921$DDDPb
                      g$mr$11922$DDDPb)))
                 (cdr g$rhs$11920$DDDPb))
                (if (eqv? g$t$11923$DDDPb 'top-expr)
                  ((case-lambda
                     ((g$expr$11925$DDDPb)
                      (g$build-sequence$9279$DDDPb
                        '#f
                        (list
                          (g$chi-expr$9735$DDDPb
                            g$expr$11925$DDDPb
                            g$r$11921$DDDPb
                            g$mr$11922$DDDPb)
                          (g$build-void$9280$DDDPb)))))
                   (cdr g$rhs$11920$DDDPb))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$11920$DDDPb))))))
         (car g$rhs$11920$DDDPb)))))
   (g$expand-interaction-rhs*/init*$9742$DDDPb
     g$expand-interaction-rhs*/init*$13283$DDDPb
     (case-lambda
       ((g$lhs*$11926$DDDPb
          g$rhs*$11927$DDDPb
          g$init*$11928$DDDPb
          g$r$11929$DDDPb
          g$mr$11930$DDDPb)
        ((letrec ((g$f$11931$DDDPb
                    (case-lambda
                      ((g$lhs*$11932$DDDPb g$rhs*$11933$DDDPb)
                       (if (null? g$lhs*$11932$DDDPb)
                         (g$map$5753$DDDPb
                           (case-lambda
                             ((g$x$11934$DDDPb)
                              (g$chi-expr$9735$DDDPb
                                g$x$11934$DDDPb
                                g$r$11929$DDDPb
                                g$mr$11930$DDDPb)))
                           g$init*$11928$DDDPb)
                         ((case-lambda
                            ((g$lhs$11935$DDDPb g$rhs$11936$DDDPb)
                             ((case-lambda
                                ((g$t$11937$DDDPb)
                                 (if (eqv? g$t$11937$DDDPb 'defun)
                                   ((case-lambda
                                      ((g$rhs$11938$DDDPb)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$11935$DDDPb
                                           g$rhs$11938$DDDPb)
                                         (g$f$11931$DDDPb
                                           (cdr g$lhs*$11932$DDDPb)
                                           (cdr g$rhs*$11933$DDDPb)))))
                                    (g$chi-defun$9740$DDDPb
                                      (cdr g$rhs$11936$DDDPb)
                                      g$r$11929$DDDPb
                                      g$mr$11930$DDDPb))
                                   (if (eqv? g$t$11937$DDDPb 'expr)
                                     ((case-lambda
                                        ((g$rhs$11939$DDDPb)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$11935$DDDPb
                                             g$rhs$11939$DDDPb)
                                           (g$f$11931$DDDPb
                                             (cdr g$lhs*$11932$DDDPb)
                                             (cdr g$rhs*$11933$DDDPb)))))
                                      (g$chi-expr$9735$DDDPb
                                        (cdr g$rhs$11936$DDDPb)
                                        g$r$11929$DDDPb
                                        g$mr$11930$DDDPb))
                                     (if (eqv?
                                           g$t$11937$DDDPb
                                           'top-expr)
                                       ((case-lambda
                                          ((g$e$11940$DDDPb)
                                           (cons
                                             g$e$11940$DDDPb
                                             (g$f$11931$DDDPb
                                               (cdr g$lhs*$11932$DDDPb)
                                               (cdr g$rhs*$11933$DDDPb)))))
                                        (g$chi-expr$9735$DDDPb
                                          (cdr g$rhs$11936$DDDPb)
                                          g$r$11929$DDDPb
                                          g$mr$11930$DDDPb))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$11936$DDDPb))))))
                              (car g$rhs$11936$DDDPb))))
                          (car g$lhs*$11932$DDDPb)
                          (car g$rhs*$11933$DDDPb)))))))
           g$f$11931$DDDPb)
         g$lhs*$11926$DDDPb
         g$rhs*$11927$DDDPb))))
   (g$chi-rhs*$9743$DDDPb
     g$chi-rhs*$13284$DDDPb
     (case-lambda
       ((g$rhs*$11941$DDDPb g$r$11942$DDDPb g$mr$11943$DDDPb)
        ((letrec ((g$f$11944$DDDPb
                    (case-lambda
                      ((g$ls$11945$DDDPb)
                       (if (null? g$ls$11945$DDDPb)
                         '()
                         ((case-lambda
                            ((g$a$11946$DDDPb)
                             (cons
                               g$a$11946$DDDPb
                               (g$f$11944$DDDPb
                                 (cdr g$ls$11945$DDDPb)))))
                          (g$chi-rhs$9741$DDDPb
                            (car g$ls$11945$DDDPb)
                            g$r$11942$DDDPb
                            g$mr$11943$DDDPb)))))))
           g$f$11944$DDDPb)
         g$rhs*$11941$DDDPb))))
   (g$find-bound=?$9744$DDDPb
     g$find-bound=?$13285$DDDPb
     (case-lambda
       ((g$x$11947$DDDPb g$lhs*$11948$DDDPb g$rhs*$11949$DDDPb)
        (if (null? g$lhs*$11948$DDDPb)
          '#f
          (if (g$bound-id=?$9357$DDDPb
                g$x$11947$DDDPb
                (car g$lhs*$11948$DDDPb))
            (car g$rhs*$11949$DDDPb)
            (g$find-bound=?$9744$DDDPb
              g$x$11947$DDDPb
              (cdr g$lhs*$11948$DDDPb)
              (cdr g$rhs*$11949$DDDPb)))))))
   (g$find-dups$9745$DDDPb
     g$find-dups$13286$DDDPb
     (case-lambda
       ((g$ls$11950$DDDPb)
        ((letrec ((g$f$11951$DDDPb
                    (case-lambda
                      ((g$ls$11952$DDDPb g$dups$11953$DDDPb)
                       (if (null? g$ls$11952$DDDPb)
                         g$dups$11953$DDDPb
                         ((case-lambda
                            ((g$t$11954$DDDPb)
                             (if g$t$11954$DDDPb
                               ((case-lambda
                                  ((g$x$11955$DDDPb)
                                   (g$f$11951$DDDPb
                                     (cdr g$ls$11952$DDDPb)
                                     (cons
                                       (list
                                         (car g$ls$11952$DDDPb)
                                         g$x$11955$DDDPb)
                                       g$dups$11953$DDDPb))))
                                g$t$11954$DDDPb)
                               (g$f$11951$DDDPb
                                 (cdr g$ls$11952$DDDPb)
                                 g$dups$11953$DDDPb))))
                          (g$find-bound=?$9744$DDDPb
                            (car g$ls$11952$DDDPb)
                            (cdr g$ls$11952$DDDPb)
                            (cdr g$ls$11952$DDDPb))))))))
           g$f$11951$DDDPb)
         g$ls$11950$DDDPb
         '()))))
   (g$chi-internal$9746$DDDPb
     g$chi-internal$13287$DDDPb
     (case-lambda
       ((g$e*$11956$DDDPb g$r$11957$DDDPb g$mr$11958$DDDPb)
        ((case-lambda
           ((g$rib$11959$DDDPb)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$9763$DDDPb
                   (g$map$5753$DDDPb
                     (case-lambda
                       ((g$x$11968$DDDPb)
                        (g$add-subst$9344$DDDPb
                          g$rib$11959$DDDPb
                          g$x$11968$DDDPb)))
                     (g$syntax->list$9353$DDDPb g$e*$11956$DDDPb))
                   g$r$11957$DDDPb
                   g$mr$11958$DDDPb
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$11959$DDDPb
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$11969$DDDPb
                   g$r$11970$DDDPb
                   g$mr$11971$DDDPb
                   g$lex*$11972$DDDPb
                   g$rhs*$11973$DDDPb
                   g$mod**$11974$DDDPb
                   g$kwd*$11975$DDDPb
                   g$_exp*$11976$DDDPb)
                 ((case-lambda
                    ((g$_exp*$11977$DDDPb
                       g$kwd*$11978$DDDPb
                       g$mod**$11979$DDDPb
                       g$rhs*$11980$DDDPb
                       g$lex*$11981$DDDPb
                       g$mr$11982$DDDPb
                       g$r$11983$DDDPb
                       g$e*$11984$DDDPb)
                     (begin
                       (if (null? g$e*$11984$DDDPb)
                         (g$syntax-violation$9835$DDDPb
                           '#f
                           '"no expression in body"
                           g$e*$11984$DDDPb)
                         (void))
                       ((case-lambda
                          ((g$init*$11985$DDDPb)
                           ((case-lambda
                              ((g$rhs*$11986$DDDPb)
                               (g$build-letrec*$9282$DDDPb
                                 '#f
                                 (g$reverse$6431$DDDPb
                                   g$lex*$11981$DDDPb)
                                 (g$reverse$6431$DDDPb
                                   g$rhs*$11986$DDDPb)
                                 (g$build-sequence$9279$DDDPb
                                   '#f
                                   g$init*$11985$DDDPb))))
                            (g$chi-rhs*$9743$DDDPb
                              g$rhs*$11980$DDDPb
                              g$r$11983$DDDPb
                              g$mr$11982$DDDPb))))
                        (g$chi-expr*$9733$DDDPb
                          (append
                            (apply
                              append
                              (g$reverse$6431$DDDPb
                                g$mod**$11979$DDDPb))
                            g$e*$11984$DDDPb)
                          g$r$11983$DDDPb
                          g$mr$11982$DDDPb)))))
                  g$_exp*$11976$DDDPb
                  g$kwd*$11975$DDDPb
                  g$mod**$11974$DDDPb
                  g$rhs*$11973$DDDPb
                  g$lex*$11972$DDDPb
                  g$mr$11971$DDDPb
                  g$r$11970$DDDPb
                  g$e*$11969$DDDPb))))))
         (g$make-empty-rib$9312$DDDPb)))))
   (g$parse-module$9747$DDDPb
     g$parse-module$13288$DDDPb
     (case-lambda
       ((g$e$11987$DDDPb)
        ((case-lambda
           ((g$t$11988$DDDPb)
            ((case-lambda
               ((g$ls/false$11989$DDDPb)
                (if g$ls/false$11989$DDDPb
                  (apply
                    (case-lambda
                      ((g$export*$11990$DDDPb g$b*$11991$DDDPb)
                       (begin
                         (if (not (g$for-all$5751$DDDPb
                                    g$id?$9354$DDDPb
                                    g$export*$11990$DDDPb))
                           (g$syntax-violation$9835$DDDPb
                             '#f
                             '"module exports must be identifiers"
                             g$e$11987$DDDPb)
                           (void))
                         (values
                           '#f
                           (g$list->vector$6419$DDDPb
                             g$export*$11990$DDDPb)
                           g$b*$11991$DDDPb))))
                    g$ls/false$11989$DDDPb)
                  ((case-lambda
                     ((g$t$11992$DDDPb)
                      ((case-lambda
                         ((g$ls/false$11993$DDDPb)
                          (if g$ls/false$11993$DDDPb
                            (apply
                              (case-lambda
                                ((g$name$11994$DDDPb
                                   g$export*$11995$DDDPb
                                   g$b*$11996$DDDPb)
                                 (begin
                                   (if (not (g$id?$9354$DDDPb
                                              g$name$11994$DDDPb))
                                     (g$syntax-violation$9835$DDDPb
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$11987$DDDPb)
                                     (void))
                                   (if (not (g$for-all$5751$DDDPb
                                              g$id?$9354$DDDPb
                                              g$export*$11995$DDDPb))
                                     (g$syntax-violation$9835$DDDPb
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$11987$DDDPb)
                                     (void))
                                   (values
                                     g$name$11994$DDDPb
                                     (g$list->vector$6419$DDDPb
                                       g$export*$11995$DDDPb)
                                     g$b*$11996$DDDPb))))
                              g$ls/false$11993$DDDPb)
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"invalid syntax"
                              g$t$11992$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$11992$DDDPb
                         '(_ any each-any . each-any)))))
                   g$t$11988$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$11988$DDDPb
               '(_ each-any . each-any)))))
         g$e$11987$DDDPb))))
   (g$7996$9748$DDDPb
     g$7996$13289$DDDPb
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$7999$DDDPb
       '#t
       '#t
       '#((mutable first-mark)
          (mutable exp-id-vec)
          (mutable exp-lab-vec))))
   (g$7998$9749$DDDPb g$7998$13290$DDDPb '#f)
   (g$7997$9750$DDDPb
     g$7997$13291$DDDPb
     (make-record-constructor-descriptor
       g$7996$9748$DDDPb
       '#f
       g$7998$9749$DDDPb))
   (g$module-interface?$9753$DDDPb
     g$module-interface?$13292$DDDPb
     (record-predicate g$7996$9748$DDDPb))
   (g$make-module-interface$9754$DDDPb
     g$make-module-interface$13293$DDDPb
     (record-constructor g$7997$9750$DDDPb))
   (g$module-interface-first-mark$9755$DDDPb
     g$module-interface-first-mark$13294$DDDPb
     (record-accessor g$7996$9748$DDDPb '0))
   (g$module-interface-exp-id-vec$9756$DDDPb
     g$module-interface-exp-id-vec$13295$DDDPb
     (record-accessor g$7996$9748$DDDPb '1))
   (g$module-interface-exp-lab-vec$9757$DDDPb
     g$module-interface-exp-lab-vec$13296$DDDPb
     (record-accessor g$7996$9748$DDDPb '2))
   (g$set-module-interface-first-mark!$9758$DDDPb
     g$set-module-interface-first-mark!$13297$DDDPb
     (record-mutator g$7996$9748$DDDPb '0))
   (g$set-module-interface-exp-id-vec!$9759$DDDPb
     g$set-module-interface-exp-id-vec!$13298$DDDPb
     (record-mutator g$7996$9748$DDDPb '1))
   (g$set-module-interface-exp-lab-vec!$9760$DDDPb
     g$set-module-interface-exp-lab-vec!$13299$DDDPb
     (record-mutator g$7996$9748$DDDPb '2))
   (g$module-interface-exp-id*$9761$DDDPb
     g$module-interface-exp-id*$13300$DDDPb
     (case-lambda
       ((g$iface$11997$DDDPb g$id$11998$DDDPb)
        (letrec* ((g$diff-marks$11999$DDDPb
                    (case-lambda
                      ((g$ls$12003$DDDPb g$x$12004$DDDPb)
                       (begin
                         (if (null? g$ls$12003$DDDPb)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$12005$DDDPb)
                             (if (eq? g$a$12005$DDDPb g$x$12004$DDDPb)
                               '()
                               (cons
                                 g$a$12005$DDDPb
                                 (g$diff-marks$11999$DDDPb
                                   (cdr g$ls$12003$DDDPb)
                                   g$x$12004$DDDPb)))))
                          (car g$ls$12003$DDDPb)))))))
          ((case-lambda
             ((g$diff$12000$DDDPb g$id-vec$12001$DDDPb)
              (if (null? g$diff$12000$DDDPb)
                g$id-vec$12001$DDDPb
                (g$vector-map$6484$DDDPb
                  (case-lambda
                    ((g$x$12002$DDDPb)
                     (g$make-stx$9327$DDDPb
                       (g$stx-expr$9328$DDDPb g$x$12002$DDDPb)
                       (append
                         g$diff$12000$DDDPb
                         (g$stx-mark*$9329$DDDPb g$x$12002$DDDPb))
                       '()
                       '())))
                  g$id-vec$12001$DDDPb))))
           (g$diff-marks$11999$DDDPb
             (g$stx-mark*$9329$DDDPb g$id$11998$DDDPb)
             (g$module-interface-first-mark$9755$DDDPb
               g$iface$11997$DDDPb))
           (g$module-interface-exp-id-vec$9756$DDDPb
             g$iface$11997$DDDPb))))))
   (g$chi-internal-module$9762$DDDPb
     g$chi-internal-module$13301$DDDPb
     (case-lambda
       ((g$e$12006$DDDPb
          g$r$12007$DDDPb
          g$mr$12008$DDDPb
          g$lex*$12009$DDDPb
          g$rhs*$12010$DDDPb
          g$mod**$12011$DDDPb
          g$kwd*$12012$DDDPb)
        (call-with-values
          (case-lambda (() (g$parse-module$9747$DDDPb g$e$12006$DDDPb)))
          (case-lambda
            ((g$name$12016$DDDPb g$exp-id*$12017$DDDPb g$e*$12018$DDDPb)
             ((case-lambda
                ((g$e*$12019$DDDPb
                   g$exp-id*$12020$DDDPb
                   g$name$12021$DDDPb)
                 ((case-lambda
                    ((g$rib$12022$DDDPb)
                     ((case-lambda
                        ((g$e*$12023$DDDPb)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$9763$DDDPb
                                g$e*$12023$DDDPb
                                g$r$12007$DDDPb
                                g$mr$12008$DDDPb
                                g$lex*$12009$DDDPb
                                g$rhs*$12010$DDDPb
                                g$mod**$12011$DDDPb
                                g$kwd*$12012$DDDPb
                                '()
                                g$rib$12022$DDDPb
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$12032$DDDPb
                                g$r$12033$DDDPb
                                g$mr$12034$DDDPb
                                g$lex*$12035$DDDPb
                                g$rhs*$12036$DDDPb
                                g$mod**$12037$DDDPb
                                g$kwd*$12038$DDDPb
                                g$_exp*$12039$DDDPb)
                              ((case-lambda
                                 ((g$_exp*$12040$DDDPb
                                    g$kwd*$12041$DDDPb
                                    g$mod**$12042$DDDPb
                                    g$rhs*$12043$DDDPb
                                    g$lex*$12044$DDDPb
                                    g$mr$12045$DDDPb
                                    g$r$12046$DDDPb
                                    g$e*$12047$DDDPb)
                                  ((case-lambda
                                     ((g$exp-lab*$12048$DDDPb
                                        g$mod**$12049$DDDPb)
                                      (if (not g$name$12021$DDDPb)
                                        (values
                                          g$lex*$12044$DDDPb
                                          g$rhs*$12043$DDDPb
                                          g$exp-id*$12020$DDDPb
                                          g$exp-lab*$12048$DDDPb
                                          g$r$12046$DDDPb
                                          g$mr$12045$DDDPb
                                          g$mod**$12049$DDDPb
                                          g$kwd*$12041$DDDPb)
                                        ((case-lambda
                                           ((g$lab$12050$DDDPb
                                              g$iface$12051$DDDPb)
                                            (values
                                              g$lex*$12044$DDDPb
                                              g$rhs*$12043$DDDPb
                                              (vector
                                                g$name$12021$DDDPb)
                                              (vector g$lab$12050$DDDPb)
                                              (cons
                                                (cons
                                                  g$lab$12050$DDDPb
                                                  (cons
                                                    '$module
                                                    g$iface$12051$DDDPb))
                                                g$r$12046$DDDPb)
                                              (cons
                                                (cons
                                                  g$lab$12050$DDDPb
                                                  (cons
                                                    '$module
                                                    g$iface$12051$DDDPb))
                                                g$mr$12045$DDDPb)
                                              g$mod**$12049$DDDPb
                                              g$kwd*$12041$DDDPb)))
                                         (g$gen-label$9291$DDDPb
                                           'module)
                                         (g$make-module-interface$9754$DDDPb
                                           (car (g$stx-mark*$9329$DDDPb
                                                  g$name$12021$DDDPb))
                                           (g$vector-map$6484$DDDPb
                                             (case-lambda
                                               ((g$x$12052$DDDPb)
                                                (g$make-stx$9327$DDDPb
                                                  (g$stx-expr$9328$DDDPb
                                                    g$x$12052$DDDPb)
                                                  (g$stx-mark*$9329$DDDPb
                                                    g$x$12052$DDDPb)
                                                  '()
                                                  '())))
                                             g$exp-id*$12020$DDDPb)
                                           g$exp-lab*$12048$DDDPb)))))
                                   (g$vector-map$6484$DDDPb
                                     (case-lambda
                                       ((g$x$12053$DDDPb)
                                        ((case-lambda
                                           ((g$t$12054$DDDPb)
                                            (if g$t$12054$DDDPb
                                              g$t$12054$DDDPb
                                              (begin
                                                '#f
                                                (g$syntax-violation$9835$DDDPb
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$12053$DDDPb)))))
                                         (g$id->label$9367$DDDPb
                                           (g$make-stx$9327$DDDPb
                                             (g$id->sym$9355$DDDPb
                                               g$x$12053$DDDPb)
                                             (g$stx-mark*$9329$DDDPb
                                               g$x$12053$DDDPb)
                                             (list g$rib$12022$DDDPb)
                                             '())))))
                                     g$exp-id*$12020$DDDPb)
                                   (cons
                                     g$e*$12047$DDDPb
                                     g$mod**$12042$DDDPb))))
                               g$_exp*$12039$DDDPb
                               g$kwd*$12038$DDDPb
                               g$mod**$12037$DDDPb
                               g$rhs*$12036$DDDPb
                               g$lex*$12035$DDDPb
                               g$mr$12034$DDDPb
                               g$r$12033$DDDPb
                               g$e*$12032$DDDPb))))))
                      (g$map$5753$DDDPb
                        (case-lambda
                          ((g$x$12055$DDDPb)
                           (g$add-subst$9344$DDDPb
                             g$rib$12022$DDDPb
                             g$x$12055$DDDPb)))
                        (g$syntax->list$9353$DDDPb g$e*$12019$DDDPb)))))
                  (g$make-empty-rib$9312$DDDPb))))
              g$e*$12018$DDDPb
              g$exp-id*$12017$DDDPb
              g$name$12016$DDDPb)))))))
   (g$chi-body*$9763$DDDPb
     g$chi-body*$13302$DDDPb
     (case-lambda
       ((g$e*$12056$DDDPb
          g$r$12057$DDDPb
          g$mr$12058$DDDPb
          g$lex*$12059$DDDPb
          g$rhs*$12060$DDDPb
          g$mod**$12061$DDDPb
          g$kwd*$12062$DDDPb
          g$exp*$12063$DDDPb
          g$rib$12064$DDDPb
          g$mix?$12065$DDDPb
          g$sd?$12066$DDDPb)
        (if (null? g$e*$12056$DDDPb)
          (values
            g$e*$12056$DDDPb
            g$r$12057$DDDPb
            g$mr$12058$DDDPb
            g$lex*$12059$DDDPb
            g$rhs*$12060$DDDPb
            g$mod**$12061$DDDPb
            g$kwd*$12062$DDDPb
            g$exp*$12063$DDDPb)
          ((case-lambda
             ((g$e$12067$DDDPb)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$9374$DDDPb
                     g$e$12067$DDDPb
                     g$r$12057$DDDPb)))
                (case-lambda
                  ((g$type$12071$DDDPb
                     g$value$12072$DDDPb
                     g$kwd$12073$DDDPb)
                   ((case-lambda
                      ((g$kwd$12074$DDDPb
                         g$value$12075$DDDPb
                         g$type$12076$DDDPb)
                       ((case-lambda
                          ((g$kwd*$12077$DDDPb)
                           ((case-lambda
                              ((g$t$12078$DDDPb)
                               (if (eqv? g$t$12078$DDDPb 'define)
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$9657$DDDPb
                                        g$e$12067$DDDPb)))
                                   (case-lambda
                                     ((g$id$12081$DDDPb
                                        g$rhs$12082$DDDPb)
                                      ((case-lambda
                                         ((g$rhs$12083$DDDPb
                                            g$id$12084$DDDPb)
                                          (begin
                                            (if (g$bound-id-member?$9361$DDDPb
                                                  g$id$12084$DDDPb
                                                  g$kwd*$12077$DDDPb)
                                              (g$syntax-violation$9835$DDDPb
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$12067$DDDPb)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$9293$DDDPb
                                                   g$id$12084$DDDPb
                                                   g$rib$12064$DDDPb
                                                   g$sd?$12066$DDDPb)))
                                              (case-lambda
                                                ((g$lab$12087$DDDPb
                                                   g$lex$12088$DDDPb)
                                                 ((case-lambda
                                                    ((g$lex$12089$DDDPb
                                                       g$lab$12090$DDDPb)
                                                     (begin
                                                       (g$extend-rib!$9315$DDDPb
                                                         g$rib$12064$DDDPb
                                                         g$id$12084$DDDPb
                                                         g$lab$12090$DDDPb
                                                         g$sd?$12066$DDDPb)
                                                       (g$chi-body*$9763$DDDPb
                                                         (cdr g$e*$12056$DDDPb)
                                                         (g$add-lexical$9664$DDDPb
                                                           g$lab$12090$DDDPb
                                                           g$lex$12089$DDDPb
                                                           g$r$12057$DDDPb)
                                                         g$mr$12058$DDDPb
                                                         (cons
                                                           g$lex$12089$DDDPb
                                                           g$lex*$12059$DDDPb)
                                                         (cons
                                                           g$rhs$12083$DDDPb
                                                           g$rhs*$12060$DDDPb)
                                                         g$mod**$12061$DDDPb
                                                         g$kwd*$12077$DDDPb
                                                         g$exp*$12063$DDDPb
                                                         g$rib$12064$DDDPb
                                                         g$mix?$12065$DDDPb
                                                         g$sd?$12066$DDDPb))))
                                                  g$lex$12088$DDDPb
                                                  g$lab$12087$DDDPb)))))))
                                       g$rhs$12082$DDDPb
                                       g$id$12081$DDDPb))))
                                 (if (eqv?
                                       g$t$12078$DDDPb
                                       'define-syntax)
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$9658$DDDPb
                                          g$e$12067$DDDPb)))
                                     (case-lambda
                                       ((g$id$12093$DDDPb
                                          g$rhs$12094$DDDPb)
                                        ((case-lambda
                                           ((g$rhs$12095$DDDPb
                                              g$id$12096$DDDPb)
                                            (begin
                                              (if (g$bound-id-member?$9361$DDDPb
                                                    g$id$12096$DDDPb
                                                    g$kwd*$12077$DDDPb)
                                                (g$syntax-violation$9835$DDDPb
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$12067$DDDPb)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$12097$DDDPb)
                                                  ((case-lambda
                                                     ((g$expanded-rhs$12098$DDDPb)
                                                      (begin
                                                        (g$extend-rib!$9315$DDDPb
                                                          g$rib$12064$DDDPb
                                                          g$id$12096$DDDPb
                                                          g$lab$12097$DDDPb
                                                          g$sd?$12066$DDDPb)
                                                        ((case-lambda
                                                           ((g$b$12099$DDDPb)
                                                            (g$chi-body*$9763$DDDPb
                                                              (cdr g$e*$12056$DDDPb)
                                                              (cons
                                                                (cons
                                                                  g$lab$12097$DDDPb
                                                                  g$b$12099$DDDPb)
                                                                g$r$12057$DDDPb)
                                                              (cons
                                                                (cons
                                                                  g$lab$12097$DDDPb
                                                                  g$b$12099$DDDPb)
                                                                g$mr$12058$DDDPb)
                                                              g$lex*$12059$DDDPb
                                                              g$rhs*$12060$DDDPb
                                                              g$mod**$12061$DDDPb
                                                              g$kwd*$12077$DDDPb
                                                              g$exp*$12063$DDDPb
                                                              g$rib$12064$DDDPb
                                                              g$mix?$12065$DDDPb
                                                              g$sd?$12066$DDDPb)))
                                                         (g$make-eval-transformer$9396$DDDPb
                                                           g$expanded-rhs$12098$DDDPb)))))
                                                   (g$expand-transformer$9764$DDDPb
                                                     g$rhs$12095$DDDPb
                                                     g$mr$12058$DDDPb))))
                                               (g$gen-define-label$9294$DDDPb
                                                 g$id$12096$DDDPb
                                                 g$rib$12064$DDDPb
                                                 g$sd?$12066$DDDPb)))))
                                         g$rhs$12094$DDDPb
                                         g$id$12093$DDDPb))))
                                   (if (g$memv$5746$DDDPb
                                         g$t$12078$DDDPb
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$12100$DDDPb)
                                         ((case-lambda
                                            ((g$ls/false$12101$DDDPb)
                                             (if (if g$ls/false$12101$DDDPb
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$12102$DDDPb
                                                            g$xrhs*$12103$DDDPb
                                                            g$xbody*$12104$DDDPb)
                                                          (if (not (g$valid-bound-ids?$9359$DDDPb
                                                                     g$xlhs*$12102$DDDPb))
                                                            (g$syntax-violation$9835$DDDPb
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$12067$DDDPb)
                                                            (void))))
                                                       g$ls/false$12101$DDDPb))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$12105$DDDPb
                                                      g$xrhs*$12106$DDDPb
                                                      g$xbody*$12107$DDDPb)
                                                    ((case-lambda
                                                       ((g$xlab*$12108$DDDPb)
                                                        ((case-lambda
                                                           ((g$xrib$12109$DDDPb)
                                                            ((case-lambda
                                                               ((g$xb*$12110$DDDPb)
                                                                (g$chi-body*$9763$DDDPb
                                                                  (append
                                                                    (g$map$5753$DDDPb
                                                                      (case-lambda
                                                                        ((g$x$12111$DDDPb)
                                                                         (g$add-subst$9344$DDDPb
                                                                           g$xrib$12109$DDDPb
                                                                           g$x$12111$DDDPb)))
                                                                      g$xbody*$12107$DDDPb)
                                                                    (cdr g$e*$12056$DDDPb))
                                                                  (append
                                                                    (g$map$5753$DDDPb
                                                                      cons
                                                                      g$xlab*$12108$DDDPb
                                                                      g$xb*$12110$DDDPb)
                                                                    g$r$12057$DDDPb)
                                                                  (append
                                                                    (g$map$5753$DDDPb
                                                                      cons
                                                                      g$xlab*$12108$DDDPb
                                                                      g$xb*$12110$DDDPb)
                                                                    g$mr$12058$DDDPb)
                                                                  g$lex*$12059$DDDPb
                                                                  g$rhs*$12060$DDDPb
                                                                  g$mod**$12061$DDDPb
                                                                  g$kwd*$12077$DDDPb
                                                                  g$exp*$12063$DDDPb
                                                                  g$rib$12064$DDDPb
                                                                  g$mix?$12065$DDDPb
                                                                  g$sd?$12066$DDDPb)))
                                                             (g$map$5753$DDDPb
                                                               (case-lambda
                                                                 ((g$x$12112$DDDPb)
                                                                  (g$make-eval-transformer$9396$DDDPb
                                                                    (g$expand-transformer$9764$DDDPb
                                                                      (if (eq? g$type$12076$DDDPb
                                                                               'let-syntax)
                                                                        g$x$12112$DDDPb
                                                                        (g$add-subst$9344$DDDPb
                                                                          g$xrib$12109$DDDPb
                                                                          g$x$12112$DDDPb))
                                                                      g$mr$12058$DDDPb))))
                                                               g$xrhs*$12106$DDDPb))))
                                                         (g$make-full-rib$9320$DDDPb
                                                           g$xlhs*$12105$DDDPb
                                                           g$xlab*$12108$DDDPb))))
                                                     (g$map$5753$DDDPb
                                                       g$gen-label$9291$DDDPb
                                                       g$xlhs*$12105$DDDPb))))
                                                 g$ls/false$12101$DDDPb)
                                               (g$syntax-violation$9835$DDDPb
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$12100$DDDPb))))
                                          (g$syntax-dispatch$9717$DDDPb
                                            g$t$12100$DDDPb
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$12067$DDDPb)
                                     (if (eqv? g$t$12078$DDDPb 'begin)
                                       ((case-lambda
                                          ((g$t$12113$DDDPb)
                                           ((case-lambda
                                              ((g$ls/false$12114$DDDPb)
                                               (if g$ls/false$12114$DDDPb
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$12115$DDDPb)
                                                      (g$chi-body*$9763$DDDPb
                                                        (append
                                                          g$x*$12115$DDDPb
                                                          (cdr g$e*$12056$DDDPb))
                                                        g$r$12057$DDDPb
                                                        g$mr$12058$DDDPb
                                                        g$lex*$12059$DDDPb
                                                        g$rhs*$12060$DDDPb
                                                        g$mod**$12061$DDDPb
                                                        g$kwd*$12077$DDDPb
                                                        g$exp*$12063$DDDPb
                                                        g$rib$12064$DDDPb
                                                        g$mix?$12065$DDDPb
                                                        g$sd?$12066$DDDPb)))
                                                   g$ls/false$12114$DDDPb)
                                                 (g$syntax-violation$9835$DDDPb
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$12113$DDDPb))))
                                            (g$syntax-dispatch$9717$DDDPb
                                              g$t$12113$DDDPb
                                              '(_ . each-any)))))
                                        g$e$12067$DDDPb)
                                       (if (g$memv$5746$DDDPb
                                             g$t$12078$DDDPb
                                             '(global-macro
                                                global-macro!))
                                         (g$chi-body*$9763$DDDPb
                                           (cons
                                             (g$add-subst$9344$DDDPb
                                               g$rib$12064$DDDPb
                                               (g$chi-global-macro$9732$DDDPb
                                                 g$value$12075$DDDPb
                                                 g$e$12067$DDDPb
                                                 g$r$12057$DDDPb))
                                             (cdr g$e*$12056$DDDPb))
                                           g$r$12057$DDDPb
                                           g$mr$12058$DDDPb
                                           g$lex*$12059$DDDPb
                                           g$rhs*$12060$DDDPb
                                           g$mod**$12061$DDDPb
                                           g$kwd*$12077$DDDPb
                                           g$exp*$12063$DDDPb
                                           g$rib$12064$DDDPb
                                           g$mix?$12065$DDDPb
                                           g$sd?$12066$DDDPb)
                                         (if (g$memv$5746$DDDPb
                                               g$t$12078$DDDPb
                                               '(local-macro
                                                  local-macro!))
                                           (g$chi-body*$9763$DDDPb
                                             (cons
                                               (g$add-subst$9344$DDDPb
                                                 g$rib$12064$DDDPb
                                                 (g$chi-local-macro$9731$DDDPb
                                                   g$value$12075$DDDPb
                                                   g$e$12067$DDDPb
                                                   g$r$12057$DDDPb))
                                               (cdr g$e*$12056$DDDPb))
                                             g$r$12057$DDDPb
                                             g$mr$12058$DDDPb
                                             g$lex*$12059$DDDPb
                                             g$rhs*$12060$DDDPb
                                             g$mod**$12061$DDDPb
                                             g$kwd*$12077$DDDPb
                                             g$exp*$12063$DDDPb
                                             g$rib$12064$DDDPb
                                             g$mix?$12065$DDDPb
                                             g$sd?$12066$DDDPb)
                                           (if (g$memv$5746$DDDPb
                                                 g$t$12078$DDDPb
                                                 '(macro macro!))
                                             (g$chi-body*$9763$DDDPb
                                               (cons
                                                 (g$add-subst$9344$DDDPb
                                                   g$rib$12064$DDDPb
                                                   (g$chi-macro$9730$DDDPb
                                                     g$value$12075$DDDPb
                                                     g$e$12067$DDDPb
                                                     g$r$12057$DDDPb))
                                                 (cdr g$e*$12056$DDDPb))
                                               g$r$12057$DDDPb
                                               g$mr$12058$DDDPb
                                               g$lex*$12059$DDDPb
                                               g$rhs*$12060$DDDPb
                                               g$mod**$12061$DDDPb
                                               g$kwd*$12077$DDDPb
                                               g$exp*$12063$DDDPb
                                               g$rib$12064$DDDPb
                                               g$mix?$12065$DDDPb
                                               g$sd?$12066$DDDPb)
                                             (if (eqv?
                                                   g$t$12078$DDDPb
                                                   'module)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$9762$DDDPb
                                                      g$e$12067$DDDPb
                                                      g$r$12057$DDDPb
                                                      g$mr$12058$DDDPb
                                                      g$lex*$12059$DDDPb
                                                      g$rhs*$12060$DDDPb
                                                      g$mod**$12061$DDDPb
                                                      g$kwd*$12077$DDDPb)))
                                                 (case-lambda
                                                   ((g$lex*$12124$DDDPb
                                                      g$rhs*$12125$DDDPb
                                                      g$m-exp-id*$12126$DDDPb
                                                      g$m-exp-lab*$12127$DDDPb
                                                      g$r$12128$DDDPb
                                                      g$mr$12129$DDDPb
                                                      g$mod**$12130$DDDPb
                                                      g$kwd*$12131$DDDPb)
                                                    ((case-lambda
                                                       ((g$kwd*$12132$DDDPb
                                                          g$mod**$12133$DDDPb
                                                          g$mr$12134$DDDPb
                                                          g$r$12135$DDDPb
                                                          g$m-exp-lab*$12136$DDDPb
                                                          g$m-exp-id*$12137$DDDPb
                                                          g$rhs*$12138$DDDPb
                                                          g$lex*$12139$DDDPb)
                                                        (begin
                                                          (g$vector-for-each$6485$DDDPb
                                                            (case-lambda
                                                              ((g$id$12140$DDDPb
                                                                 g$lab$12141$DDDPb)
                                                               (g$extend-rib!$9315$DDDPb
                                                                 g$rib$12064$DDDPb
                                                                 g$id$12140$DDDPb
                                                                 g$lab$12141$DDDPb
                                                                 g$sd?$12066$DDDPb)))
                                                            g$m-exp-id*$12137$DDDPb
                                                            g$m-exp-lab*$12136$DDDPb)
                                                          (g$chi-body*$9763$DDDPb
                                                            (cdr g$e*$12056$DDDPb)
                                                            g$r$12135$DDDPb
                                                            g$mr$12134$DDDPb
                                                            g$lex*$12139$DDDPb
                                                            g$rhs*$12138$DDDPb
                                                            g$mod**$12133$DDDPb
                                                            g$kwd*$12132$DDDPb
                                                            g$exp*$12063$DDDPb
                                                            g$rib$12064$DDDPb
                                                            g$mix?$12065$DDDPb
                                                            g$sd?$12066$DDDPb))))
                                                     g$kwd*$12131$DDDPb
                                                     g$mod**$12130$DDDPb
                                                     g$mr$12129$DDDPb
                                                     g$r$12128$DDDPb
                                                     g$m-exp-lab*$12127$DDDPb
                                                     g$m-exp-id*$12126$DDDPb
                                                     g$rhs*$12125$DDDPb
                                                     g$lex*$12124$DDDPb))))
                                               (if (eqv?
                                                     g$t$12078$DDDPb
                                                     'library)
                                                 (begin
                                                   (g$library-expander$9819$DDDPb
                                                     (g$stx->datum$9365$DDDPb
                                                       g$e$12067$DDDPb))
                                                   (g$chi-body*$9763$DDDPb
                                                     (cdr g$e*$12056$DDDPb)
                                                     g$r$12057$DDDPb
                                                     g$mr$12058$DDDPb
                                                     g$lex*$12059$DDDPb
                                                     g$rhs*$12060$DDDPb
                                                     g$mod**$12061$DDDPb
                                                     g$kwd*$12077$DDDPb
                                                     g$exp*$12063$DDDPb
                                                     g$rib$12064$DDDPb
                                                     g$mix?$12065$DDDPb
                                                     g$sd?$12066$DDDPb))
                                                 (if (eqv?
                                                       g$t$12078$DDDPb
                                                       'export)
                                                   ((case-lambda
                                                      ((g$t$12142$DDDPb)
                                                       ((case-lambda
                                                          ((g$ls/false$12143$DDDPb)
                                                           (if g$ls/false$12143$DDDPb
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$12144$DDDPb)
                                                                  (g$chi-body*$9763$DDDPb
                                                                    (cdr g$e*$12056$DDDPb)
                                                                    g$r$12057$DDDPb
                                                                    g$mr$12058$DDDPb
                                                                    g$lex*$12059$DDDPb
                                                                    g$rhs*$12060$DDDPb
                                                                    g$mod**$12061$DDDPb
                                                                    g$kwd*$12077$DDDPb
                                                                    (append
                                                                      g$exp-decl*$12144$DDDPb
                                                                      g$exp*$12063$DDDPb)
                                                                    g$rib$12064$DDDPb
                                                                    g$mix?$12065$DDDPb
                                                                    g$sd?$12066$DDDPb)))
                                                               g$ls/false$12143$DDDPb)
                                                             (g$syntax-violation$9835$DDDPb
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$12142$DDDPb))))
                                                        (g$syntax-dispatch$9717$DDDPb
                                                          g$t$12142$DDDPb
                                                          '(_ .
                                                              each-any)))))
                                                    g$e$12067$DDDPb)
                                                   (if (eqv?
                                                         g$t$12078$DDDPb
                                                         'import)
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$12145$DDDPb
                                                                     (case-lambda
                                                                       ((g$e$12187$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$t$12188$DDDPb)
                                                                            ((case-lambda
                                                                               ((g$ls/false$12189$DDDPb)
                                                                                (if (if g$ls/false$12189$DDDPb
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$12190$DDDPb)
                                                                                             (g$id?$9354$DDDPb
                                                                                               g$id$12190$DDDPb)))
                                                                                          g$ls/false$12189$DDDPb))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$12191$DDDPb)
                                                                                       '#t))
                                                                                    g$ls/false$12189$DDDPb)
                                                                                  ((case-lambda
                                                                                     ((g$t$12192$DDDPb)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$12193$DDDPb)
                                                                                          (if g$ls/false$12193$DDDPb
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$12194$DDDPb)
                                                                                                 '#f))
                                                                                              g$ls/false$12193$DDDPb)
                                                                                            ((case-lambda
                                                                                               ((g$t$12195$DDDPb)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$12196$DDDPb)
                                                                                                    (if g$ls/false$12196$DDDPb
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$9835$DDDPb
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$12187$DDDPb)))
                                                                                                        g$ls/false$12196$DDDPb)
                                                                                                      (g$syntax-violation$9835$DDDPb
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$12195$DDDPb))))
                                                                                                 (g$syntax-dispatch$9717$DDDPb
                                                                                                   g$t$12195$DDDPb
                                                                                                   '_))))
                                                                                             g$t$12192$DDDPb))))
                                                                                       (g$syntax-dispatch$9717$DDDPb
                                                                                         g$t$12192$DDDPb
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$12188$DDDPb))))
                                                                             (g$syntax-dispatch$9717$DDDPb
                                                                               g$t$12188$DDDPb
                                                                               '(_ any)))))
                                                                         g$e$12187$DDDPb))))
                                                                   (g$module-import$12146$DDDPb
                                                                     (case-lambda
                                                                       ((g$e$12170$DDDPb
                                                                          g$r$12171$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$t$12172$DDDPb)
                                                                            ((case-lambda
                                                                               ((g$ls/false$12173$DDDPb)
                                                                                (if (if g$ls/false$12173$DDDPb
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$12174$DDDPb)
                                                                                             (g$id?$9354$DDDPb
                                                                                               g$id$12174$DDDPb)))
                                                                                          g$ls/false$12173$DDDPb))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$12175$DDDPb)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$9374$DDDPb
                                                                                              g$id$12175$DDDPb
                                                                                              g$r$12171$DDDPb)))
                                                                                         (case-lambda
                                                                                           ((g$type$12179$DDDPb
                                                                                              g$value$12180$DDDPb
                                                                                              g$kwd$12181$DDDPb)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$12182$DDDPb
                                                                                                  g$value$12183$DDDPb
                                                                                                  g$type$12184$DDDPb)
                                                                                                ((case-lambda
                                                                                                   ((g$t$12185$DDDPb)
                                                                                                    (if (eqv?
                                                                                                          g$t$12185$DDDPb
                                                                                                          '$module)
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$12186$DDDPb)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$9761$DDDPb
                                                                                                              g$iface$12186$DDDPb
                                                                                                              g$id$12175$DDDPb)
                                                                                                            (g$module-interface-exp-lab-vec$9757$DDDPb
                                                                                                              g$iface$12186$DDDPb))))
                                                                                                       g$value$12183$DDDPb)
                                                                                                      (g$syntax-violation$9835$DDDPb
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$12170$DDDPb))))
                                                                                                 g$type$12184$DDDPb)))
                                                                                             g$kwd$12181$DDDPb
                                                                                             g$value$12180$DDDPb
                                                                                             g$type$12179$DDDPb))))))
                                                                                    g$ls/false$12173$DDDPb)
                                                                                  (g$syntax-violation$9835$DDDPb
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$12172$DDDPb))))
                                                                             (g$syntax-dispatch$9717$DDDPb
                                                                               g$t$12172$DDDPb
                                                                               '(_ any)))))
                                                                         g$e$12170$DDDPb))))
                                                                   (g$library-import$12147$DDDPb
                                                                     (case-lambda
                                                                       ((g$e$12156$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$t$12157$DDDPb)
                                                                            ((case-lambda
                                                                               ((g$ls/false$12158$DDDPb)
                                                                                (if g$ls/false$12158$DDDPb
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$12159$DDDPb
                                                                                         g$imp*$12160$DDDPb)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$9768$DDDPb
                                                                                              (g$syntax->datum$9838$DDDPb
                                                                                                g$imp*$12160$DDDPb))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$12163$DDDPb
                                                                                              g$subst-labels$12164$DDDPb)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$12165$DDDPb
                                                                                                  g$subst-names$12166$DDDPb)
                                                                                                (values
                                                                                                  (g$vector-map$6484$DDDPb
                                                                                                    (case-lambda
                                                                                                      ((g$name$12167$DDDPb)
                                                                                                       (g$datum->stx$9337$DDDPb
                                                                                                         g$ctxt$12159$DDDPb
                                                                                                         g$name$12167$DDDPb)))
                                                                                                    g$subst-names$12166$DDDPb)
                                                                                                  g$subst-labels$12165$DDDPb)))
                                                                                             g$subst-labels$12164$DDDPb
                                                                                             g$subst-names$12163$DDDPb))))))
                                                                                    g$ls/false$12158$DDDPb)
                                                                                  ((case-lambda
                                                                                     ((g$t$12168$DDDPb)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$12169$DDDPb)
                                                                                          (if g$ls/false$12169$DDDPb
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$9835$DDDPb
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$12156$DDDPb)))
                                                                                              g$ls/false$12169$DDDPb)
                                                                                            (g$syntax-violation$9835$DDDPb
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$12168$DDDPb))))
                                                                                       (g$syntax-dispatch$9717$DDDPb
                                                                                         g$t$12168$DDDPb
                                                                                         '_))))
                                                                                   g$t$12157$DDDPb))))
                                                                             (g$syntax-dispatch$9717$DDDPb
                                                                               g$t$12157$DDDPb
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$12156$DDDPb)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$12145$DDDPb
                                                                        g$e$12067$DDDPb)
                                                                    (g$module-import$12146$DDDPb
                                                                      g$e$12067$DDDPb
                                                                      g$r$12057$DDDPb)
                                                                    (g$library-import$12147$DDDPb
                                                                      g$e$12067$DDDPb))))
                                                               (case-lambda
                                                                 ((g$id*$12150$DDDPb
                                                                    g$lab*$12151$DDDPb)
                                                                  ((case-lambda
                                                                     ((g$lab*$12152$DDDPb
                                                                        g$id*$12153$DDDPb)
                                                                      (g$vector-for-each$6485$DDDPb
                                                                        (case-lambda
                                                                          ((g$id$12154$DDDPb
                                                                             g$lab$12155$DDDPb)
                                                                           (g$extend-rib!$9315$DDDPb
                                                                             g$rib$12064$DDDPb
                                                                             g$id$12154$DDDPb
                                                                             g$lab$12155$DDDPb
                                                                             g$sd?$12066$DDDPb)))
                                                                        g$id*$12153$DDDPb
                                                                        g$lab*$12152$DDDPb)))
                                                                   g$lab*$12151$DDDPb
                                                                   g$id*$12150$DDDPb))))
                                                             (g$chi-body*$9763$DDDPb
                                                               (cdr g$e*$12056$DDDPb)
                                                               g$r$12057$DDDPb
                                                               g$mr$12058$DDDPb
                                                               g$lex*$12059$DDDPb
                                                               g$rhs*$12060$DDDPb
                                                               g$mod**$12061$DDDPb
                                                               g$kwd*$12077$DDDPb
                                                               g$exp*$12063$DDDPb
                                                               g$rib$12064$DDDPb
                                                               g$mix?$12065$DDDPb
                                                               g$sd?$12066$DDDPb))))))
                                                     (if g$mix?$12065$DDDPb
                                                       (g$chi-body*$9763$DDDPb
                                                         (cdr g$e*$12056$DDDPb)
                                                         g$r$12057$DDDPb
                                                         g$mr$12058$DDDPb
                                                         (cons
                                                           (g$gen-lexical$9289$DDDPb
                                                             'dummy)
                                                           g$lex*$12059$DDDPb)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$12067$DDDPb)
                                                           g$rhs*$12060$DDDPb)
                                                         g$mod**$12061$DDDPb
                                                         g$kwd*$12077$DDDPb
                                                         g$exp*$12063$DDDPb
                                                         g$rib$12064$DDDPb
                                                         '#t
                                                         g$sd?$12066$DDDPb)
                                                       (values
                                                         g$e*$12056$DDDPb
                                                         g$r$12057$DDDPb
                                                         g$mr$12058$DDDPb
                                                         g$lex*$12059$DDDPb
                                                         g$rhs*$12060$DDDPb
                                                         g$mod**$12061$DDDPb
                                                         g$kwd*$12077$DDDPb
                                                         g$exp*$12063$DDDPb)))))))))))))))
                            g$type$12076$DDDPb)))
                        (if (g$id?$9354$DDDPb g$kwd$12074$DDDPb)
                          (cons g$kwd$12074$DDDPb g$kwd*$12062$DDDPb)
                          g$kwd*$12062$DDDPb))))
                    g$kwd$12073$DDDPb
                    g$value$12072$DDDPb
                    g$type$12071$DDDPb))))))
           (car g$e*$12056$DDDPb))))))
   (g$expand-transformer$9764$DDDPb
     g$expand-transformer$13303$DDDPb
     (case-lambda
       ((g$expr$12197$DDDPb g$r$12198$DDDPb)
        ((case-lambda
           ((g$rtc$12199$DDDPb)
            ((case-lambda
               ((g$expanded-rhs$12200$DDDPb)
                (begin
                  (g$for-each$5754$DDDPb
                    ((case-lambda
                       ((g$mark-visit$12201$DDDPb)
                        (case-lambda
                          ((g$x$12202$DDDPb)
                           (begin
                             (g$invoke-library$9093$DDDPb
                               g$x$12202$DDDPb)
                             (g$mark-visit$12201$DDDPb
                               g$x$12202$DDDPb))))))
                     (g$vis-collector$9772$DDDPb))
                    (g$rtc$12199$DDDPb))
                  g$expanded-rhs$12200$DDDPb)))
             ((case-lambda
                ((g$inv-collector$12207$DDDPb
                   g$vis-collector$12208$DDDPb
                   g$inv-collector$12209$DDDPb
                   g$vis-collector$12210$DDDPb)
                 ((case-lambda
                    ((g$swap$12211$DDDPb)
                     (dynamic-wind
                       g$swap$12211$DDDPb
                       (case-lambda
                         (()
                          (g$chi-expr$9735$DDDPb
                            g$expr$12197$DDDPb
                            g$r$12198$DDDPb
                            g$r$12198$DDDPb)))
                       g$swap$12211$DDDPb)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$12212$DDDPb)
                           (begin
                             (g$inv-collector$12207$DDDPb
                               g$inv-collector$12209$DDDPb)
                             (set! g$inv-collector$12209$DDDPb
                               g$t$12212$DDDPb))))
                        (g$inv-collector$12207$DDDPb))
                       ((case-lambda
                          ((g$t$12213$DDDPb)
                           (begin
                             (g$vis-collector$12208$DDDPb
                               g$vis-collector$12210$DDDPb)
                             (set! g$vis-collector$12210$DDDPb
                               g$t$12213$DDDPb))))
                        (g$vis-collector$12208$DDDPb))))))))
              g$inv-collector$9771$DDDPb
              g$vis-collector$9772$DDDPb
              g$rtc$12199$DDDPb
              (case-lambda ((g$x$12214$DDDPb) (values)))))))
         (g$make-collector$9770$DDDPb)))))
   (g$parse-exports$9765$DDDPb
     g$parse-exports$13304$DDDPb
     (case-lambda
       ((g$exp*$12215$DDDPb)
        ((letrec ((g$f$12216$DDDPb
                    (case-lambda
                      ((g$exp*$12217$DDDPb
                         g$int*$12218$DDDPb
                         g$ext*$12219$DDDPb)
                       (if (null? g$exp*$12217$DDDPb)
                         (begin
                           (if (not (g$valid-bound-ids?$9359$DDDPb
                                      g$ext*$12219$DDDPb))
                             (g$syntax-violation$9835$DDDPb
                               'export
                               '"invalid exports"
                               (g$find-dups$9745$DDDPb
                                 g$ext*$12219$DDDPb))
                             (void))
                           (values
                             (g$map$5753$DDDPb
                               g$syntax->datum$9838$DDDPb
                               g$ext*$12219$DDDPb)
                             g$int*$12218$DDDPb))
                         ((case-lambda
                            ((g$t$12220$DDDPb)
                             ((case-lambda
                                ((g$ls/false$12221$DDDPb)
                                 (if g$ls/false$12221$DDDPb
                                   (apply
                                     (case-lambda
                                       ((g$rename$12222$DDDPb
                                          g$i*$12223$DDDPb
                                          g$e*$12224$DDDPb)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$9838$DDDPb
                                                              g$rename$12222$DDDPb)
                                                            'rename)
                                                     (if (g$for-all$5751$DDDPb
                                                           g$id?$9354$DDDPb
                                                           g$i*$12223$DDDPb)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5751$DDDPb
                                                           g$id?$9354$DDDPb
                                                           g$e*$12224$DDDPb))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$9835$DDDPb
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$12217$DDDPb))
                                            (void))
                                          (g$f$12216$DDDPb
                                            (cdr g$exp*$12217$DDDPb)
                                            (append
                                              g$i*$12223$DDDPb
                                              g$int*$12218$DDDPb)
                                            (append
                                              g$e*$12224$DDDPb
                                              g$ext*$12219$DDDPb)))))
                                     g$ls/false$12221$DDDPb)
                                   ((case-lambda
                                      ((g$t$12225$DDDPb)
                                       ((case-lambda
                                          ((g$ls/false$12226$DDDPb)
                                           (if g$ls/false$12226$DDDPb
                                             (apply
                                               (case-lambda
                                                 ((g$ie$12227$DDDPb)
                                                  (begin
                                                    (if (not (g$id?$9354$DDDPb
                                                               g$ie$12227$DDDPb))
                                                      (g$syntax-violation$9835$DDDPb
                                                        'export
                                                        '"invalid export"
                                                        g$ie$12227$DDDPb)
                                                      (void))
                                                    (g$f$12216$DDDPb
                                                      (cdr g$exp*$12217$DDDPb)
                                                      (cons
                                                        g$ie$12227$DDDPb
                                                        g$int*$12218$DDDPb)
                                                      (cons
                                                        g$ie$12227$DDDPb
                                                        g$ext*$12219$DDDPb)))))
                                               g$ls/false$12226$DDDPb)
                                             (g$syntax-violation$9835$DDDPb
                                               '#f
                                               '"invalid syntax"
                                               g$t$12225$DDDPb))))
                                        (g$syntax-dispatch$9717$DDDPb
                                          g$t$12225$DDDPb
                                          'any))))
                                    g$t$12220$DDDPb))))
                              (g$syntax-dispatch$9717$DDDPb
                                g$t$12220$DDDPb
                                '(any . #(each (any any)))))))
                          (car g$exp*$12217$DDDPb)))))))
           g$f$12216$DDDPb)
         g$exp*$12215$DDDPb
         '()
         '()))))
   (g$parse-library-name$9766$DDDPb
     g$parse-library-name$13305$DDDPb
     (case-lambda
       ((g$spec$12228$DDDPb)
        (letrec* ((g$parse$12229$DDDPb
                    (case-lambda
                      ((g$x$12236$DDDPb)
                       ((case-lambda
                          ((g$t$12237$DDDPb)
                           ((case-lambda
                              ((g$ls/false$12238$DDDPb)
                               (if (if g$ls/false$12238$DDDPb
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$12239$DDDPb)
                                            (g$for-all$5751$DDDPb
                                              (case-lambda
                                                ((g$x$12240$DDDPb)
                                                 ((case-lambda
                                                    ((g$x$12241$DDDPb)
                                                     (if (integer?
                                                           g$x$12241$DDDPb)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$12241$DDDPb))
                                                       '#f)))
                                                  (g$syntax->datum$9838$DDDPb
                                                    g$x$12240$DDDPb))))
                                              g$v*$12239$DDDPb)))
                                         g$ls/false$12238$DDDPb))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$12242$DDDPb)
                                      (values
                                        '()
                                        (g$map$5753$DDDPb
                                          g$syntax->datum$9838$DDDPb
                                          g$v*$12242$DDDPb))))
                                   g$ls/false$12238$DDDPb)
                                 ((case-lambda
                                    ((g$t$12243$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$12244$DDDPb)
                                         (if (if g$ls/false$12244$DDDPb
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$12245$DDDPb
                                                        g$rest$12246$DDDPb)
                                                      (g$symbol?$6424$DDDPb
                                                        (g$syntax->datum$9838$DDDPb
                                                          g$x$12245$DDDPb))))
                                                   g$ls/false$12244$DDDPb))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$12247$DDDPb
                                                  g$rest$12248$DDDPb)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$12229$DDDPb
                                                       g$rest$12248$DDDPb)))
                                                  (case-lambda
                                                    ((g$x*$12251$DDDPb
                                                       g$v*$12252$DDDPb)
                                                     ((case-lambda
                                                        ((g$v*$12253$DDDPb
                                                           g$x*$12254$DDDPb)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$9838$DDDPb
                                                               g$x$12247$DDDPb)
                                                             g$x*$12254$DDDPb)
                                                           g$v*$12253$DDDPb)))
                                                      g$v*$12252$DDDPb
                                                      g$x*$12251$DDDPb))))))
                                             g$ls/false$12244$DDDPb)
                                           ((case-lambda
                                              ((g$t$12255$DDDPb)
                                               ((case-lambda
                                                  ((g$ls/false$12256$DDDPb)
                                                   (if g$ls/false$12256$DDDPb
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (values
                                                            '()
                                                            '())))
                                                       g$ls/false$12256$DDDPb)
                                                     ((case-lambda
                                                        ((g$t$12257$DDDPb)
                                                         ((case-lambda
                                                            ((g$ls/false$12258$DDDPb)
                                                             (if g$ls/false$12258$DDDPb
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$9835$DDDPb
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$12228$DDDPb)))
                                                                 g$ls/false$12258$DDDPb)
                                                               (g$syntax-violation$9835$DDDPb
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$12257$DDDPb))))
                                                          (g$syntax-dispatch$9717$DDDPb
                                                            g$t$12257$DDDPb
                                                            '_))))
                                                      g$t$12255$DDDPb))))
                                                (g$syntax-dispatch$9717$DDDPb
                                                  g$t$12255$DDDPb
                                                  '()))))
                                            g$t$12243$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$12243$DDDPb
                                        '(any . any)))))
                                  g$t$12237$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$12237$DDDPb
                              '(each-any)))))
                        g$x$12236$DDDPb)))))
          (call-with-values
            (case-lambda (() (g$parse$12229$DDDPb g$spec$12228$DDDPb)))
            (case-lambda
              ((g$name*$12232$DDDPb g$ver*$12233$DDDPb)
               ((case-lambda
                  ((g$ver*$12234$DDDPb g$name*$12235$DDDPb)
                   (begin
                     (if (null? g$name*$12235$DDDPb)
                       (g$syntax-violation$9835$DDDPb
                         '#f
                         '"empty library name"
                         g$spec$12228$DDDPb)
                       (void))
                     (values g$name*$12235$DDDPb g$ver*$12234$DDDPb))))
                g$ver*$12233$DDDPb
                g$name*$12232$DDDPb))))))))
   (g$parse-library$9767$DDDPb
     g$parse-library$13306$DDDPb
     (case-lambda
       ((g$e$12259$DDDPb)
        ((case-lambda
           ((g$t$12260$DDDPb)
            ((case-lambda
               ((g$ls/false$12261$DDDPb)
                (if (if g$ls/false$12261$DDDPb
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$12262$DDDPb
                               g$name*$12263$DDDPb
                               g$export$12264$DDDPb
                               g$exp*$12265$DDDPb
                               g$import$12266$DDDPb
                               g$imp*$12267$DDDPb
                               g$b*$12268$DDDPb)
                             (if (eq? (g$syntax->datum$9838$DDDPb
                                        g$export$12264$DDDPb)
                                      'export)
                               (if (eq? (g$syntax->datum$9838$DDDPb
                                          g$import$12266$DDDPb)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$9838$DDDPb
                                          g$library$12262$DDDPb)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$12261$DDDPb))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$12269$DDDPb
                         g$name*$12270$DDDPb
                         g$export$12271$DDDPb
                         g$exp*$12272$DDDPb
                         g$import$12273$DDDPb
                         g$imp*$12274$DDDPb
                         g$b*$12275$DDDPb)
                       (values
                         g$name*$12270$DDDPb
                         g$exp*$12272$DDDPb
                         g$imp*$12274$DDDPb
                         g$b*$12275$DDDPb)))
                    g$ls/false$12261$DDDPb)
                  ((case-lambda
                     ((g$t$12276$DDDPb)
                      ((case-lambda
                         ((g$ls/false$12277$DDDPb)
                          (if g$ls/false$12277$DDDPb
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$9835$DDDPb
                                   '#f
                                   '"malformed library"
                                   g$e$12259$DDDPb)))
                              g$ls/false$12277$DDDPb)
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"invalid syntax"
                              g$t$12276$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$12276$DDDPb
                         '_))))
                   g$t$12260$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$12260$DDDPb
               '(any each-any
                     (any . each-any)
                     (any . each-any)
                     .
                     each-any)))))
         g$e$12259$DDDPb))))
   (g$parse-import-spec*$9768$DDDPb
     g$parse-import-spec*$13307$DDDPb
     (case-lambda
       ((g$imp*$12278$DDDPb)
        (letrec* ((g$idsyn?$12279$DDDPb
                    (case-lambda
                      ((g$x$12539$DDDPb)
                       (g$symbol?$6424$DDDPb
                         (g$syntax->datum$9838$DDDPb
                           g$x$12539$DDDPb)))))
                  (g$dup-error$12280$DDDPb
                    (case-lambda
                      ((g$name$12538$DDDPb)
                       (g$syntax-violation$9835$DDDPb
                         'import
                         '"two imports with different bindings"
                         g$name$12538$DDDPb))))
                  (g$merge-substs$12281$DDDPb
                    (case-lambda
                      ((g$s$12529$DDDPb g$subst$12530$DDDPb)
                       (letrec* ((g$insert-to-subst$12531$DDDPb
                                   (case-lambda
                                     ((g$a$12532$DDDPb
                                        g$subst$12533$DDDPb)
                                      ((case-lambda
                                         ((g$name$12534$DDDPb
                                            g$label$12535$DDDPb)
                                          ((case-lambda
                                             ((g$t$12536$DDDPb)
                                              (if g$t$12536$DDDPb
                                                ((case-lambda
                                                   ((g$x$12537$DDDPb)
                                                    (if (eq? (cdr g$x$12537$DDDPb)
                                                             g$label$12535$DDDPb)
                                                      g$subst$12533$DDDPb
                                                      (g$dup-error$12280$DDDPb
                                                        g$name$12534$DDDPb))))
                                                 g$t$12536$DDDPb)
                                                (cons
                                                  g$a$12532$DDDPb
                                                  g$subst$12533$DDDPb))))
                                           (g$assq$5741$DDDPb
                                             g$name$12534$DDDPb
                                             g$subst$12533$DDDPb))))
                                       (car g$a$12532$DDDPb)
                                       (cdr g$a$12532$DDDPb))))))
                         (if (null? g$s$12529$DDDPb)
                           g$subst$12530$DDDPb
                           (g$insert-to-subst$12531$DDDPb
                             (car g$s$12529$DDDPb)
                             (g$merge-substs$12281$DDDPb
                               (cdr g$s$12529$DDDPb)
                               g$subst$12530$DDDPb)))))))
                  (g$exclude*$12282$DDDPb
                    (case-lambda
                      ((g$sym*$12505$DDDPb g$subst$12506$DDDPb)
                       (letrec* ((g$exclude$12507$DDDPb
                                   (case-lambda
                                     ((g$sym$12520$DDDPb
                                        g$subst$12521$DDDPb)
                                      (if (null? g$subst$12521$DDDPb)
                                        (g$syntax-violation$9835$DDDPb
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$12520$DDDPb)
                                        (if (eq? g$sym$12520$DDDPb
                                                 (g$caar$6432$DDDPb
                                                   g$subst$12521$DDDPb))
                                          (values
                                            (g$cdar$6434$DDDPb
                                              g$subst$12521$DDDPb)
                                            (cdr g$subst$12521$DDDPb))
                                          ((case-lambda
                                             ((g$a$12522$DDDPb)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$12507$DDDPb
                                                     g$sym$12520$DDDPb
                                                     (cdr g$subst$12521$DDDPb))))
                                                (case-lambda
                                                  ((g$old$12525$DDDPb
                                                     g$subst$12526$DDDPb)
                                                   ((case-lambda
                                                      ((g$subst$12527$DDDPb
                                                         g$old$12528$DDDPb)
                                                       (values
                                                         g$old$12528$DDDPb
                                                         (cons
                                                           g$a$12522$DDDPb
                                                           g$subst$12527$DDDPb))))
                                                    g$subst$12526$DDDPb
                                                    g$old$12525$DDDPb))))))
                                           (car g$subst$12521$DDDPb))))))))
                         (if (null? g$sym*$12505$DDDPb)
                           (values '() g$subst$12506$DDDPb)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$12507$DDDPb
                                  (car g$sym*$12505$DDDPb)
                                  g$subst$12506$DDDPb)))
                             (case-lambda
                               ((g$old$12510$DDDPb g$subst$12511$DDDPb)
                                ((case-lambda
                                   ((g$subst$12512$DDDPb
                                      g$old$12513$DDDPb)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$12282$DDDPb
                                           (cdr g$sym*$12505$DDDPb)
                                           g$subst$12512$DDDPb)))
                                      (case-lambda
                                        ((g$old*$12516$DDDPb
                                           g$subst$12517$DDDPb)
                                         ((case-lambda
                                            ((g$subst$12518$DDDPb
                                               g$old*$12519$DDDPb)
                                             (values
                                               (cons
                                                 g$old$12513$DDDPb
                                                 g$old*$12519$DDDPb)
                                               g$subst$12518$DDDPb)))
                                          g$subst$12517$DDDPb
                                          g$old*$12516$DDDPb))))))
                                 g$subst$12511$DDDPb
                                 g$old$12510$DDDPb)))))))))
                  (g$find*$12283$DDDPb
                    (case-lambda
                      ((g$sym*$12501$DDDPb g$subst$12502$DDDPb)
                       (g$map$5753$DDDPb
                         (case-lambda
                           ((g$x$12503$DDDPb)
                            ((case-lambda
                               ((g$t$12504$DDDPb)
                                (if g$t$12504$DDDPb
                                  (cdr g$t$12504$DDDPb)
                                  (g$syntax-violation$9835$DDDPb
                                    'import
                                    '"cannot find identifier"
                                    g$x$12503$DDDPb))))
                             (g$assq$5741$DDDPb
                               g$x$12503$DDDPb
                               g$subst$12502$DDDPb))))
                         g$sym*$12501$DDDPb))))
                  (g$rem*$12284$DDDPb
                    (case-lambda
                      ((g$sym*$12497$DDDPb g$subst$12498$DDDPb)
                       ((letrec ((g$f$12499$DDDPb
                                   (case-lambda
                                     ((g$subst$12500$DDDPb)
                                      (if (null? g$subst$12500$DDDPb)
                                        '()
                                        (if (g$memq$5745$DDDPb
                                              (g$caar$6432$DDDPb
                                                g$subst$12500$DDDPb)
                                              g$sym*$12497$DDDPb)
                                          (g$f$12499$DDDPb
                                            (cdr g$subst$12500$DDDPb))
                                          (cons
                                            (car g$subst$12500$DDDPb)
                                            (g$f$12499$DDDPb
                                              (cdr g$subst$12500$DDDPb)))))))))
                          g$f$12499$DDDPb)
                        g$subst$12498$DDDPb))))
                  (g$remove-dups$12285$DDDPb
                    (case-lambda
                      ((g$ls$12496$DDDPb)
                       (if (null? g$ls$12496$DDDPb)
                         '()
                         (if (g$memq$5745$DDDPb
                               (car g$ls$12496$DDDPb)
                               (cdr g$ls$12496$DDDPb))
                           (g$remove-dups$12285$DDDPb
                             (cdr g$ls$12496$DDDPb))
                           (cons
                             (car g$ls$12496$DDDPb)
                             (g$remove-dups$12285$DDDPb
                               (cdr g$ls$12496$DDDPb))))))))
                  (g$parse-library-name$12286$DDDPb
                    (case-lambda
                      ((g$spec$12380$DDDPb)
                       (letrec* ((g$subversion?$12381$DDDPb
                                   (case-lambda
                                     ((g$x$12494$DDDPb)
                                      ((case-lambda
                                         ((g$x$12495$DDDPb)
                                          (if (integer? g$x$12495$DDDPb)
                                            (if (exact? g$x$12495$DDDPb)
                                              (begin
                                                '#f
                                                (>= g$x$12495$DDDPb '0))
                                              '#f)
                                            '#f)))
                                       (g$syntax->datum$9838$DDDPb
                                         g$x$12494$DDDPb)))))
                                 (g$subversion-pred$12382$DDDPb
                                   (case-lambda
                                     ((g$x*$12446$DDDPb)
                                      ((case-lambda
                                         ((g$t$12447$DDDPb)
                                          ((case-lambda
                                             ((g$ls/false$12448$DDDPb)
                                              (if (if g$ls/false$12448$DDDPb
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$12449$DDDPb)
                                                           (g$subversion?$12381$DDDPb
                                                             g$n$12449$DDDPb)))
                                                        g$ls/false$12448$DDDPb))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$12450$DDDPb)
                                                     (case-lambda
                                                       ((g$x$12451$DDDPb)
                                                        (= g$x$12451$DDDPb
                                                           (g$syntax->datum$9838$DDDPb
                                                             g$n$12450$DDDPb))))))
                                                  g$ls/false$12448$DDDPb)
                                                ((case-lambda
                                                   ((g$t$12452$DDDPb)
                                                    ((case-lambda
                                                       ((g$ls/false$12453$DDDPb)
                                                        (if (if g$ls/false$12453$DDDPb
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$12454$DDDPb
                                                                       g$sub*$12455$DDDPb)
                                                                     (eq? (g$syntax->datum$9838$DDDPb
                                                                            g$p?$12454$DDDPb)
                                                                          'and)))
                                                                  g$ls/false$12453$DDDPb))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$12456$DDDPb
                                                                 g$sub*$12457$DDDPb)
                                                               ((case-lambda
                                                                  ((g$p*$12458$DDDPb)
                                                                   (case-lambda
                                                                     ((g$x$12459$DDDPb)
                                                                      (g$for-all$5751$DDDPb
                                                                        (case-lambda
                                                                          ((g$p$12460$DDDPb)
                                                                           (g$p$12460$DDDPb
                                                                             g$x$12459$DDDPb)))
                                                                        g$p*$12458$DDDPb)))))
                                                                (g$map$5753$DDDPb
                                                                  g$subversion-pred$12382$DDDPb
                                                                  g$sub*$12457$DDDPb))))
                                                            g$ls/false$12453$DDDPb)
                                                          ((case-lambda
                                                             ((g$t$12461$DDDPb)
                                                              ((case-lambda
                                                                 ((g$ls/false$12462$DDDPb)
                                                                  (if (if g$ls/false$12462$DDDPb
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$12463$DDDPb
                                                                                 g$sub*$12464$DDDPb)
                                                                               (eq? (g$syntax->datum$9838$DDDPb
                                                                                      g$p?$12463$DDDPb)
                                                                                    'or)))
                                                                            g$ls/false$12462$DDDPb))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$12465$DDDPb
                                                                           g$sub*$12466$DDDPb)
                                                                         ((case-lambda
                                                                            ((g$p*$12467$DDDPb)
                                                                             (case-lambda
                                                                               ((g$x$12468$DDDPb)
                                                                                (g$exists$5752$DDDPb
                                                                                  (case-lambda
                                                                                    ((g$p$12469$DDDPb)
                                                                                     (g$p$12469$DDDPb
                                                                                       g$x$12468$DDDPb)))
                                                                                  g$p*$12467$DDDPb)))))
                                                                          (g$map$5753$DDDPb
                                                                            g$subversion-pred$12382$DDDPb
                                                                            g$sub*$12466$DDDPb))))
                                                                      g$ls/false$12462$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$t$12470$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$ls/false$12471$DDDPb)
                                                                            (if (if g$ls/false$12471$DDDPb
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$12472$DDDPb
                                                                                           g$sub$12473$DDDPb)
                                                                                         (eq? (g$syntax->datum$9838$DDDPb
                                                                                                g$p?$12472$DDDPb)
                                                                                              'not)))
                                                                                      g$ls/false$12471$DDDPb))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$12474$DDDPb
                                                                                     g$sub$12475$DDDPb)
                                                                                   ((case-lambda
                                                                                      ((g$p$12476$DDDPb)
                                                                                       (case-lambda
                                                                                         ((g$x$12477$DDDPb)
                                                                                          (not (g$p$12476$DDDPb
                                                                                                 g$x$12477$DDDPb))))))
                                                                                    (g$subversion-pred$12382$DDDPb
                                                                                      g$sub$12475$DDDPb))))
                                                                                g$ls/false$12471$DDDPb)
                                                                              ((case-lambda
                                                                                 ((g$t$12478$DDDPb)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$12479$DDDPb)
                                                                                      (if (if g$ls/false$12479$DDDPb
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$12480$DDDPb
                                                                                                     g$n$12481$DDDPb)
                                                                                                   (if (eq? (g$syntax->datum$9838$DDDPb
                                                                                                              g$p?$12480$DDDPb)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$12381$DDDPb
                                                                                                         g$n$12481$DDDPb))
                                                                                                     '#f)))
                                                                                                g$ls/false$12479$DDDPb))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$12482$DDDPb
                                                                                               g$n$12483$DDDPb)
                                                                                             (case-lambda
                                                                                               ((g$x$12484$DDDPb)
                                                                                                (<= g$x$12484$DDDPb
                                                                                                    (g$syntax->datum$9838$DDDPb
                                                                                                      g$n$12483$DDDPb))))))
                                                                                          g$ls/false$12479$DDDPb)
                                                                                        ((case-lambda
                                                                                           ((g$t$12485$DDDPb)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$12486$DDDPb)
                                                                                                (if (if g$ls/false$12486$DDDPb
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$12487$DDDPb
                                                                                                               g$n$12488$DDDPb)
                                                                                                             (if (eq? (g$syntax->datum$9838$DDDPb
                                                                                                                        g$p?$12487$DDDPb)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$12381$DDDPb
                                                                                                                   g$n$12488$DDDPb))
                                                                                                               '#f)))
                                                                                                          g$ls/false$12486$DDDPb))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$12489$DDDPb
                                                                                                         g$n$12490$DDDPb)
                                                                                                       (case-lambda
                                                                                                         ((g$x$12491$DDDPb)
                                                                                                          (>= g$x$12491$DDDPb
                                                                                                              (g$syntax->datum$9838$DDDPb
                                                                                                                g$n$12490$DDDPb))))))
                                                                                                    g$ls/false$12486$DDDPb)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$12492$DDDPb)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$12493$DDDPb)
                                                                                                          (if g$ls/false$12493$DDDPb
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$9835$DDDPb
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$12380$DDDPb
                                                                                                                   g$x*$12446$DDDPb)))
                                                                                                              g$ls/false$12493$DDDPb)
                                                                                                            (g$syntax-violation$9835$DDDPb
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$12492$DDDPb))))
                                                                                                       (g$syntax-dispatch$9717$DDDPb
                                                                                                         g$t$12492$DDDPb
                                                                                                         '_))))
                                                                                                   g$t$12485$DDDPb))))
                                                                                             (g$syntax-dispatch$9717$DDDPb
                                                                                               g$t$12485$DDDPb
                                                                                               '(any any)))))
                                                                                         g$t$12478$DDDPb))))
                                                                                   (g$syntax-dispatch$9717$DDDPb
                                                                                     g$t$12478$DDDPb
                                                                                     '(any any)))))
                                                                               g$t$12470$DDDPb))))
                                                                         (g$syntax-dispatch$9717$DDDPb
                                                                           g$t$12470$DDDPb
                                                                           '(any any)))))
                                                                     g$t$12461$DDDPb))))
                                                               (g$syntax-dispatch$9717$DDDPb
                                                                 g$t$12461$DDDPb
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$12452$DDDPb))))
                                                     (g$syntax-dispatch$9717$DDDPb
                                                       g$t$12452$DDDPb
                                                       '(any .
                                                             each-any)))))
                                                 g$t$12447$DDDPb))))
                                           (g$syntax-dispatch$9717$DDDPb
                                             g$t$12447$DDDPb
                                             'any))))
                                       g$x*$12446$DDDPb))))
                                 (g$version-pred$12383$DDDPb
                                   (case-lambda
                                     ((g$x*$12406$DDDPb)
                                      ((case-lambda
                                         ((g$t$12407$DDDPb)
                                          ((case-lambda
                                             ((g$ls/false$12408$DDDPb)
                                              (if g$ls/false$12408$DDDPb
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$12409$DDDPb)
                                                        '#t))))
                                                  g$ls/false$12408$DDDPb)
                                                ((case-lambda
                                                   ((g$t$12410$DDDPb)
                                                    ((case-lambda
                                                       ((g$ls/false$12411$DDDPb)
                                                        (if (if g$ls/false$12411$DDDPb
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$12412$DDDPb
                                                                       g$ver*$12413$DDDPb)
                                                                     (eq? (g$syntax->datum$9838$DDDPb
                                                                            g$c$12412$DDDPb)
                                                                          'and)))
                                                                  g$ls/false$12411$DDDPb))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$12414$DDDPb
                                                                 g$ver*$12415$DDDPb)
                                                               ((case-lambda
                                                                  ((g$p*$12416$DDDPb)
                                                                   (case-lambda
                                                                     ((g$x$12417$DDDPb)
                                                                      (g$for-all$5751$DDDPb
                                                                        (case-lambda
                                                                          ((g$p$12418$DDDPb)
                                                                           (g$p$12418$DDDPb
                                                                             g$x$12417$DDDPb)))
                                                                        g$p*$12416$DDDPb)))))
                                                                (g$map$5753$DDDPb
                                                                  g$version-pred$12383$DDDPb
                                                                  g$ver*$12415$DDDPb))))
                                                            g$ls/false$12411$DDDPb)
                                                          ((case-lambda
                                                             ((g$t$12419$DDDPb)
                                                              ((case-lambda
                                                                 ((g$ls/false$12420$DDDPb)
                                                                  (if (if g$ls/false$12420$DDDPb
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$12421$DDDPb
                                                                                 g$ver*$12422$DDDPb)
                                                                               (eq? (g$syntax->datum$9838$DDDPb
                                                                                      g$c$12421$DDDPb)
                                                                                    'or)))
                                                                            g$ls/false$12420$DDDPb))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$12423$DDDPb
                                                                           g$ver*$12424$DDDPb)
                                                                         ((case-lambda
                                                                            ((g$p*$12425$DDDPb)
                                                                             (case-lambda
                                                                               ((g$x$12426$DDDPb)
                                                                                (g$exists$5752$DDDPb
                                                                                  (case-lambda
                                                                                    ((g$p$12427$DDDPb)
                                                                                     (g$p$12427$DDDPb
                                                                                       g$x$12426$DDDPb)))
                                                                                  g$p*$12425$DDDPb)))))
                                                                          (g$map$5753$DDDPb
                                                                            g$version-pred$12383$DDDPb
                                                                            g$ver*$12424$DDDPb))))
                                                                      g$ls/false$12420$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$t$12428$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$ls/false$12429$DDDPb)
                                                                            (if (if g$ls/false$12429$DDDPb
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$12430$DDDPb
                                                                                           g$ver$12431$DDDPb)
                                                                                         (eq? (g$syntax->datum$9838$DDDPb
                                                                                                g$c$12430$DDDPb)
                                                                                              'not)))
                                                                                      g$ls/false$12429$DDDPb))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$12432$DDDPb
                                                                                     g$ver$12433$DDDPb)
                                                                                   ((case-lambda
                                                                                      ((g$p$12434$DDDPb)
                                                                                       (case-lambda
                                                                                         ((g$x$12435$DDDPb)
                                                                                          (not (g$p$12434$DDDPb
                                                                                                 g$x$12435$DDDPb))))))
                                                                                    (g$version-pred$12383$DDDPb
                                                                                      g$ver$12433$DDDPb))))
                                                                                g$ls/false$12429$DDDPb)
                                                                              ((case-lambda
                                                                                 ((g$t$12436$DDDPb)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$12437$DDDPb)
                                                                                      (if g$ls/false$12437$DDDPb
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$12438$DDDPb)
                                                                                             ((case-lambda
                                                                                                ((g$p*$12439$DDDPb)
                                                                                                 (case-lambda
                                                                                                   ((g$x$12440$DDDPb)
                                                                                                    ((letrec ((g$f$12441$DDDPb
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$12442$DDDPb
                                                                                                                     g$x$12443$DDDPb)
                                                                                                                   (if (null?
                                                                                                                         g$p*$12442$DDDPb)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$12443$DDDPb)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$12442$DDDPb)
                                                                                                                            (car g$x$12443$DDDPb))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$12441$DDDPb
                                                                                                                             (cdr g$p*$12442$DDDPb)
                                                                                                                             (cdr g$x$12443$DDDPb)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$12441$DDDPb)
                                                                                                     g$p*$12439$DDDPb
                                                                                                     g$x$12440$DDDPb)))))
                                                                                              (g$map$5753$DDDPb
                                                                                                g$subversion-pred$12382$DDDPb
                                                                                                g$sub*$12438$DDDPb))))
                                                                                          g$ls/false$12437$DDDPb)
                                                                                        ((case-lambda
                                                                                           ((g$t$12444$DDDPb)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$12445$DDDPb)
                                                                                                (if g$ls/false$12445$DDDPb
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$9835$DDDPb
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$12380$DDDPb
                                                                                                         g$x*$12406$DDDPb)))
                                                                                                    g$ls/false$12445$DDDPb)
                                                                                                  (g$syntax-violation$9835$DDDPb
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$12444$DDDPb))))
                                                                                             (g$syntax-dispatch$9717$DDDPb
                                                                                               g$t$12444$DDDPb
                                                                                               '_))))
                                                                                         g$t$12436$DDDPb))))
                                                                                   (g$syntax-dispatch$9717$DDDPb
                                                                                     g$t$12436$DDDPb
                                                                                     'each-any))))
                                                                               g$t$12428$DDDPb))))
                                                                         (g$syntax-dispatch$9717$DDDPb
                                                                           g$t$12428$DDDPb
                                                                           '(any any)))))
                                                                     g$t$12419$DDDPb))))
                                                               (g$syntax-dispatch$9717$DDDPb
                                                                 g$t$12419$DDDPb
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$12410$DDDPb))))
                                                     (g$syntax-dispatch$9717$DDDPb
                                                       g$t$12410$DDDPb
                                                       '(any .
                                                             each-any)))))
                                                 g$t$12407$DDDPb))))
                                           (g$syntax-dispatch$9717$DDDPb
                                             g$t$12407$DDDPb
                                             '()))))
                                       g$x*$12406$DDDPb)))))
                         ((letrec ((g$f$12384$DDDPb
                                     (case-lambda
                                       ((g$x$12385$DDDPb)
                                        ((case-lambda
                                           ((g$t$12386$DDDPb)
                                            ((case-lambda
                                               ((g$ls/false$12387$DDDPb)
                                                (if g$ls/false$12387$DDDPb
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$12388$DDDPb)
                                                       (values
                                                         '()
                                                         (g$version-pred$12383$DDDPb
                                                           g$version-spec*$12388$DDDPb))))
                                                    g$ls/false$12387$DDDPb)
                                                  ((case-lambda
                                                     ((g$t$12389$DDDPb)
                                                      ((case-lambda
                                                         ((g$ls/false$12390$DDDPb)
                                                          (if (if g$ls/false$12390$DDDPb
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$12391$DDDPb
                                                                         g$x*$12392$DDDPb)
                                                                       (g$idsyn?$12279$DDDPb
                                                                         g$x$12391$DDDPb)))
                                                                    g$ls/false$12390$DDDPb))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$12393$DDDPb
                                                                   g$x*$12394$DDDPb)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$12384$DDDPb
                                                                        g$x*$12394$DDDPb)))
                                                                   (case-lambda
                                                                     ((g$name$12397$DDDPb
                                                                        g$pred$12398$DDDPb)
                                                                      ((case-lambda
                                                                         ((g$pred$12399$DDDPb
                                                                            g$name$12400$DDDPb)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$9838$DDDPb
                                                                                g$x$12393$DDDPb)
                                                                              g$name$12400$DDDPb)
                                                                            g$pred$12399$DDDPb)))
                                                                       g$pred$12398$DDDPb
                                                                       g$name$12397$DDDPb))))))
                                                              g$ls/false$12390$DDDPb)
                                                            ((case-lambda
                                                               ((g$t$12401$DDDPb)
                                                                ((case-lambda
                                                                   ((g$ls/false$12402$DDDPb)
                                                                    (if g$ls/false$12402$DDDPb
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$12403$DDDPb)
                                                                                '#t)))))
                                                                        g$ls/false$12402$DDDPb)
                                                                      ((case-lambda
                                                                         ((g$t$12404$DDDPb)
                                                                          ((case-lambda
                                                                             ((g$ls/false$12405$DDDPb)
                                                                              (if g$ls/false$12405$DDDPb
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$9835$DDDPb
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$12380$DDDPb)))
                                                                                  g$ls/false$12405$DDDPb)
                                                                                (g$syntax-violation$9835$DDDPb
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$12404$DDDPb))))
                                                                           (g$syntax-dispatch$9717$DDDPb
                                                                             g$t$12404$DDDPb
                                                                             '_))))
                                                                       g$t$12401$DDDPb))))
                                                                 (g$syntax-dispatch$9717$DDDPb
                                                                   g$t$12401$DDDPb
                                                                   '()))))
                                                             g$t$12389$DDDPb))))
                                                       (g$syntax-dispatch$9717$DDDPb
                                                         g$t$12389$DDDPb
                                                         '(any .
                                                               any)))))
                                                   g$t$12386$DDDPb))))
                                             (g$syntax-dispatch$9717$DDDPb
                                               g$t$12386$DDDPb
                                               '(each-any)))))
                                         g$x$12385$DDDPb)))))
                            g$f$12384$DDDPb)
                          g$spec$12380$DDDPb)))))
                  (g$import-library$12287$DDDPb
                    (case-lambda
                      ((g$spec*$12372$DDDPb)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$12286$DDDPb
                              g$spec*$12372$DDDPb)))
                         (case-lambda
                           ((g$name$12375$DDDPb g$pred$12376$DDDPb)
                            ((case-lambda
                               ((g$pred$12377$DDDPb g$name$12378$DDDPb)
                                (begin
                                  (if (null? g$name$12378$DDDPb)
                                    (g$syntax-violation$9835$DDDPb
                                      'import
                                      '"empty library name"
                                      g$spec*$12372$DDDPb)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$12379$DDDPb)
                                      (begin
                                        (if (not g$lib$12379$DDDPb)
                                          (g$syntax-violation$9835$DDDPb
                                            'import
                                            '"cannot find library with required name"
                                            g$name$12378$DDDPb)
                                          (void))
                                        (if (not (g$pred$12377$DDDPb
                                                   (g$library-version$9046$DDDPb
                                                     g$lib$12379$DDDPb)))
                                          (g$syntax-violation$9835$DDDPb
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$12372$DDDPb
                                            g$lib$12379$DDDPb)
                                          (void))
                                        ((g$imp-collector$9773$DDDPb)
                                         g$lib$12379$DDDPb)
                                        (g$library-subst$9050$DDDPb
                                          g$lib$12379$DDDPb))))
                                   (g$find-library-by-name$9086$DDDPb
                                     g$name$12378$DDDPb)))))
                             g$pred$12376$DDDPb
                             g$name$12375$DDDPb)))))))
                  (g$get-import$12288$DDDPb
                    (case-lambda
                      ((g$spec$12301$DDDPb)
                       ((case-lambda
                          ((g$t$12302$DDDPb)
                           ((case-lambda
                              ((g$ls/false$12303$DDDPb)
                               (if (if g$ls/false$12303$DDDPb
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$12304$DDDPb
                                              g$x*$12305$DDDPb)
                                            (not (g$memq$5745$DDDPb
                                                   (g$syntax->datum$9838$DDDPb
                                                     g$x$12304$DDDPb)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$12303$DDDPb))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$12306$DDDPb g$x*$12307$DDDPb)
                                      (g$import-library$12287$DDDPb
                                        (cons
                                          g$x$12306$DDDPb
                                          g$x*$12307$DDDPb))))
                                   g$ls/false$12303$DDDPb)
                                 ((case-lambda
                                    ((g$t$12308$DDDPb)
                                     ((case-lambda
                                        ((g$ls/false$12309$DDDPb)
                                         (if (if g$ls/false$12309$DDDPb
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$12310$DDDPb
                                                        g$isp$12311$DDDPb
                                                        g$old*$12312$DDDPb
                                                        g$new*$12313$DDDPb)
                                                      (if (eq? (g$syntax->datum$9838$DDDPb
                                                                 g$rename$12310$DDDPb)
                                                               'rename)
                                                        (if (g$for-all$5751$DDDPb
                                                              g$idsyn?$12279$DDDPb
                                                              g$old*$12312$DDDPb)
                                                          (begin
                                                            '#f
                                                            (g$for-all$5751$DDDPb
                                                              g$idsyn?$12279$DDDPb
                                                              g$new*$12313$DDDPb))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$12309$DDDPb))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$12314$DDDPb
                                                  g$isp$12315$DDDPb
                                                  g$old*$12316$DDDPb
                                                  g$new*$12317$DDDPb)
                                                ((case-lambda
                                                   ((g$subst$12318$DDDPb
                                                      g$old*$12319$DDDPb
                                                      g$new*$12320$DDDPb)
                                                    ((case-lambda
                                                       ((g$old-label*$12321$DDDPb)
                                                        ((case-lambda
                                                           ((g$subst$12322$DDDPb)
                                                            (g$merge-substs$12281$DDDPb
                                                              (g$map$5753$DDDPb
                                                                cons
                                                                g$new*$12320$DDDPb
                                                                g$old-label*$12321$DDDPb)
                                                              g$subst$12322$DDDPb)))
                                                         (g$rem*$12284$DDDPb
                                                           g$old*$12319$DDDPb
                                                           g$subst$12318$DDDPb))))
                                                     (g$find*$12283$DDDPb
                                                       g$old*$12319$DDDPb
                                                       g$subst$12318$DDDPb))))
                                                 (g$get-import$12288$DDDPb
                                                   g$isp$12315$DDDPb)
                                                 (g$map$5753$DDDPb
                                                   g$syntax->datum$9838$DDDPb
                                                   g$old*$12316$DDDPb)
                                                 (g$map$5753$DDDPb
                                                   g$syntax->datum$9838$DDDPb
                                                   g$new*$12317$DDDPb))))
                                             g$ls/false$12309$DDDPb)
                                           ((case-lambda
                                              ((g$t$12323$DDDPb)
                                               ((case-lambda
                                                  ((g$ls/false$12324$DDDPb)
                                                   (if (if g$ls/false$12324$DDDPb
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$12325$DDDPb
                                                                  g$isp$12326$DDDPb
                                                                  g$sym*$12327$DDDPb)
                                                                (if (eq? (g$syntax->datum$9838$DDDPb
                                                                           g$except$12325$DDDPb)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$5751$DDDPb
                                                                      g$idsyn?$12279$DDDPb
                                                                      g$sym*$12327$DDDPb))
                                                                  '#f)))
                                                             g$ls/false$12324$DDDPb))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$12328$DDDPb
                                                            g$isp$12329$DDDPb
                                                            g$sym*$12330$DDDPb)
                                                          ((case-lambda
                                                             ((g$subst$12331$DDDPb)
                                                              (g$rem*$12284$DDDPb
                                                                (g$map$5753$DDDPb
                                                                  g$syntax->datum$9838$DDDPb
                                                                  g$sym*$12330$DDDPb)
                                                                g$subst$12331$DDDPb)))
                                                           (g$get-import$12288$DDDPb
                                                             g$isp$12329$DDDPb))))
                                                       g$ls/false$12324$DDDPb)
                                                     ((case-lambda
                                                        ((g$t$12332$DDDPb)
                                                         ((case-lambda
                                                            ((g$ls/false$12333$DDDPb)
                                                             (if (if g$ls/false$12333$DDDPb
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$12334$DDDPb
                                                                            g$isp$12335$DDDPb
                                                                            g$sym*$12336$DDDPb)
                                                                          (if (eq? (g$syntax->datum$9838$DDDPb
                                                                                     g$only$12334$DDDPb)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$5751$DDDPb
                                                                                g$idsyn?$12279$DDDPb
                                                                                g$sym*$12336$DDDPb))
                                                                            '#f)))
                                                                       g$ls/false$12333$DDDPb))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$12337$DDDPb
                                                                      g$isp$12338$DDDPb
                                                                      g$sym*$12339$DDDPb)
                                                                    ((case-lambda
                                                                       ((g$subst$12340$DDDPb
                                                                          g$sym*$12341$DDDPb)
                                                                        ((case-lambda
                                                                           ((g$sym*$12342$DDDPb)
                                                                            ((case-lambda
                                                                               ((g$lab*$12343$DDDPb)
                                                                                (g$map$5753$DDDPb
                                                                                  cons
                                                                                  g$sym*$12342$DDDPb
                                                                                  g$lab*$12343$DDDPb)))
                                                                             (g$find*$12283$DDDPb
                                                                               g$sym*$12342$DDDPb
                                                                               g$subst$12340$DDDPb))))
                                                                         (g$remove-dups$12285$DDDPb
                                                                           g$sym*$12341$DDDPb))))
                                                                     (g$get-import$12288$DDDPb
                                                                       g$isp$12338$DDDPb)
                                                                     (g$map$5753$DDDPb
                                                                       g$syntax->datum$9838$DDDPb
                                                                       g$sym*$12339$DDDPb))))
                                                                 g$ls/false$12333$DDDPb)
                                                               ((case-lambda
                                                                  ((g$t$12344$DDDPb)
                                                                   ((case-lambda
                                                                      ((g$ls/false$12345$DDDPb)
                                                                       (if (if g$ls/false$12345$DDDPb
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$12346$DDDPb
                                                                                      g$isp$12347$DDDPb
                                                                                      g$p$12348$DDDPb)
                                                                                    (if (eq? (g$syntax->datum$9838$DDDPb
                                                                                               g$prefix$12346$DDDPb)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$12279$DDDPb
                                                                                          g$p$12348$DDDPb))
                                                                                      '#f)))
                                                                                 g$ls/false$12345$DDDPb))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$12349$DDDPb
                                                                                g$isp$12350$DDDPb
                                                                                g$p$12351$DDDPb)
                                                                              ((case-lambda
                                                                                 ((g$subst$12352$DDDPb
                                                                                    g$prefix$12353$DDDPb)
                                                                                  (g$map$5753$DDDPb
                                                                                    (case-lambda
                                                                                      ((g$x$12354$DDDPb)
                                                                                       (cons
                                                                                         (string->symbol
                                                                                           (string-append
                                                                                             g$prefix$12353$DDDPb
                                                                                             (symbol->string
                                                                                               (car g$x$12354$DDDPb))))
                                                                                         (cdr g$x$12354$DDDPb))))
                                                                                    g$subst$12352$DDDPb)))
                                                                               (g$get-import$12288$DDDPb
                                                                                 g$isp$12350$DDDPb)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$9838$DDDPb
                                                                                   g$p$12351$DDDPb)))))
                                                                           g$ls/false$12345$DDDPb)
                                                                         ((case-lambda
                                                                            ((g$t$12355$DDDPb)
                                                                             ((case-lambda
                                                                                ((g$ls/false$12356$DDDPb)
                                                                                 (if (if g$ls/false$12356$DDDPb
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$12357$DDDPb
                                                                                                g$spec*$12358$DDDPb)
                                                                                              (eq? (g$syntax->datum$9838$DDDPb
                                                                                                     g$library$12357$DDDPb)
                                                                                                   'library)))
                                                                                           g$ls/false$12356$DDDPb))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$12359$DDDPb
                                                                                          g$spec*$12360$DDDPb)
                                                                                        (g$import-library$12287$DDDPb
                                                                                          g$spec*$12360$DDDPb)))
                                                                                     g$ls/false$12356$DDDPb)
                                                                                   ((case-lambda
                                                                                      ((g$t$12361$DDDPb)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$12362$DDDPb)
                                                                                           (if (if g$ls/false$12362$DDDPb
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$12363$DDDPb
                                                                                                          g$isp$12364$DDDPb
                                                                                                          g$rest$12365$DDDPb)
                                                                                                        (eq? (g$syntax->datum$9838$DDDPb
                                                                                                               g$for$12363$DDDPb)
                                                                                                             'for)))
                                                                                                     g$ls/false$12362$DDDPb))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$12366$DDDPb
                                                                                                    g$isp$12367$DDDPb
                                                                                                    g$rest$12368$DDDPb)
                                                                                                  (g$get-import$12288$DDDPb
                                                                                                    g$isp$12367$DDDPb)))
                                                                                               g$ls/false$12362$DDDPb)
                                                                                             ((case-lambda
                                                                                                ((g$t$12369$DDDPb)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$12370$DDDPb)
                                                                                                     (if g$ls/false$12370$DDDPb
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$12371$DDDPb)
                                                                                                            (g$syntax-violation$9835$DDDPb
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$12371$DDDPb)))
                                                                                                         g$ls/false$12370$DDDPb)
                                                                                                       (g$syntax-violation$9835$DDDPb
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$12369$DDDPb))))
                                                                                                  (g$syntax-dispatch$9717$DDDPb
                                                                                                    g$t$12369$DDDPb
                                                                                                    'any))))
                                                                                              g$t$12361$DDDPb))))
                                                                                        (g$syntax-dispatch$9717$DDDPb
                                                                                          g$t$12361$DDDPb
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$12355$DDDPb))))
                                                                              (g$syntax-dispatch$9717$DDDPb
                                                                                g$t$12355$DDDPb
                                                                                '(any each-any)))))
                                                                          g$t$12344$DDDPb))))
                                                                    (g$syntax-dispatch$9717$DDDPb
                                                                      g$t$12344$DDDPb
                                                                      '(any any
                                                                            any)))))
                                                                g$t$12332$DDDPb))))
                                                          (g$syntax-dispatch$9717$DDDPb
                                                            g$t$12332$DDDPb
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$12323$DDDPb))))
                                                (g$syntax-dispatch$9717$DDDPb
                                                  g$t$12323$DDDPb
                                                  '(any any
                                                        .
                                                        each-any)))))
                                            g$t$12308$DDDPb))))
                                      (g$syntax-dispatch$9717$DDDPb
                                        g$t$12308$DDDPb
                                        '(any any
                                              .
                                              #(each (any any)))))))
                                  g$t$12302$DDDPb))))
                            (g$syntax-dispatch$9717$DDDPb
                              g$t$12302$DDDPb
                              '(any . each-any)))))
                        g$spec$12301$DDDPb))))
                  (g$add-imports!$12289$DDDPb
                    (case-lambda
                      ((g$imp$12293$DDDPb g$h$12294$DDDPb)
                       ((case-lambda
                          ((g$subst$12295$DDDPb)
                           (g$for-each$5754$DDDPb
                             (case-lambda
                               ((g$x$12296$DDDPb)
                                ((case-lambda
                                   ((g$name$12297$DDDPb
                                      g$label$12298$DDDPb)
                                    ((case-lambda
                                       ((g$t$12299$DDDPb)
                                        (if g$t$12299$DDDPb
                                          ((case-lambda
                                             ((g$l$12300$DDDPb)
                                              (if (not (eq? g$l$12300$DDDPb
                                                            g$label$12298$DDDPb))
                                                (g$dup-error$12280$DDDPb
                                                  g$name$12297$DDDPb)
                                                (void))))
                                           g$t$12299$DDDPb)
                                          (g$hashtable-set!$6527$DDDPb
                                            g$h$12294$DDDPb
                                            g$name$12297$DDDPb
                                            g$label$12298$DDDPb))))
                                     (g$hashtable-ref$6526$DDDPb
                                       g$h$12294$DDDPb
                                       g$name$12297$DDDPb
                                       '#f))))
                                 (car g$x$12296$DDDPb)
                                 (cdr g$x$12296$DDDPb))))
                             g$subst$12295$DDDPb)))
                        (g$get-import$12288$DDDPb
                          g$imp$12293$DDDPb))))))
          ((letrec ((g$f$12290$DDDPb
                      (case-lambda
                        ((g$imp*$12291$DDDPb g$h$12292$DDDPb)
                         (if (null? g$imp*$12291$DDDPb)
                           (hashtable-entries g$h$12292$DDDPb)
                           (begin
                             (g$add-imports!$12289$DDDPb
                               (car g$imp*$12291$DDDPb)
                               g$h$12292$DDDPb)
                             (g$f$12290$DDDPb
                               (cdr g$imp*$12291$DDDPb)
                               g$h$12292$DDDPb)))))))
             g$f$12290$DDDPb)
           g$imp*$12278$DDDPb
           (g$make-eq-hashtable$6523$DDDPb))))))
   (g$make-top-rib$9769$DDDPb
     g$make-top-rib$13308$DDDPb
     (case-lambda
       ((g$names$12540$DDDPb g$labels$12541$DDDPb)
        ((case-lambda
           ((g$rib$12542$DDDPb)
            (begin
              (g$vector-for-each$6485$DDDPb
                (case-lambda
                  ((g$name$12543$DDDPb g$label$12544$DDDPb)
                   (begin
                     (if (not (g$symbol?$6424$DDDPb g$name$12543$DDDPb))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$12543$DDDPb)
                       (void))
                     (g$extend-rib/nc!$9316$DDDPb
                       g$rib$12542$DDDPb
                       (g$make-stx$9327$DDDPb
                         g$name$12543$DDDPb
                         g$top-mark*$9287$DDDPb
                         '()
                         '())
                       g$label$12544$DDDPb))))
                g$names$12540$DDDPb
                g$labels$12541$DDDPb)
              g$rib$12542$DDDPb)))
         (g$make-cache-rib$9313$DDDPb)))))
   (g$make-collector$9770$DDDPb
     g$make-collector$13309$DDDPb
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$12545$DDDPb)
            (case-lambda
              (() g$ls$12545$DDDPb)
              ((g$x$12546$DDDPb)
               (set! g$ls$12545$DDDPb
                 (g$set-cons$9284$DDDPb
                   g$x$12546$DDDPb
                   g$ls$12545$DDDPb))))))
         '()))))
   (g$inv-collector$9771$DDDPb
     g$inv-collector$13310$DDDPb
     (g$make-parameter$8260$DDDPb
       (case-lambda
         (g$args$12547$DDDPb
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$12548$DDDPb)
          (begin
            (if (not (g$procedure?$6426$DDDPb g$x$12548$DDDPb))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$12548$DDDPb)
              (void))
            g$x$12548$DDDPb)))))
   (g$vis-collector$9772$DDDPb
     g$vis-collector$13311$DDDPb
     (g$make-parameter$8260$DDDPb
       (case-lambda
         (g$args$12549$DDDPb
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$12550$DDDPb)
          (begin
            (if (not (g$procedure?$6426$DDDPb g$x$12550$DDDPb))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$12550$DDDPb)
              (void))
            g$x$12550$DDDPb)))))
   (g$imp-collector$9773$DDDPb
     g$imp-collector$13312$DDDPb
     (g$make-parameter$8260$DDDPb
       (case-lambda
         (g$args$12551$DDDPb
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$12552$DDDPb)
          (begin
            (if (not (g$procedure?$6426$DDDPb g$x$12552$DDDPb))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$12552$DDDPb)
              (void))
            g$x$12552$DDDPb)))))
   (g$chi-library-internal$9774$DDDPb
     g$chi-library-internal$13313$DDDPb
     (case-lambda
       ((g$e*$12553$DDDPb g$rib$12554$DDDPb g$mix?$12555$DDDPb)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$9763$DDDPb
               g$e*$12553$DDDPb
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$12554$DDDPb
               g$mix?$12555$DDDPb
               '#t)))
          (case-lambda
            ((g$e*$12564$DDDPb
               g$r$12565$DDDPb
               g$mr$12566$DDDPb
               g$lex*$12567$DDDPb
               g$rhs*$12568$DDDPb
               g$mod**$12569$DDDPb
               g$_kwd*$12570$DDDPb
               g$exp*$12571$DDDPb)
             ((case-lambda
                ((g$exp*$12572$DDDPb
                   g$_kwd*$12573$DDDPb
                   g$mod**$12574$DDDPb
                   g$rhs*$12575$DDDPb
                   g$lex*$12576$DDDPb
                   g$mr$12577$DDDPb
                   g$r$12578$DDDPb
                   g$e*$12579$DDDPb)
                 (values
                   (append
                     (apply
                       append
                       (g$reverse$6431$DDDPb g$mod**$12574$DDDPb))
                     g$e*$12579$DDDPb)
                   g$r$12578$DDDPb
                   g$mr$12577$DDDPb
                   (g$reverse$6431$DDDPb g$lex*$12576$DDDPb)
                   (g$reverse$6431$DDDPb g$rhs*$12575$DDDPb)
                   g$exp*$12572$DDDPb)))
              g$exp*$12571$DDDPb
              g$_kwd*$12570$DDDPb
              g$mod**$12569$DDDPb
              g$rhs*$12568$DDDPb
              g$lex*$12567$DDDPb
              g$mr$12566$DDDPb
              g$r$12565$DDDPb
              g$e*$12564$DDDPb)))))))
   (g$chi-interaction-expr$9775$DDDPb
     g$chi-interaction-expr$13314$DDDPb
     (case-lambda
       ((g$e$12580$DDDPb g$rib$12581$DDDPb g$r$12582$DDDPb)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$9763$DDDPb
               (list g$e$12580$DDDPb)
               g$r$12582$DDDPb
               g$r$12582$DDDPb
               '()
               '()
               '()
               '()
               '()
               g$rib$12581$DDDPb
               '#t
               '#f)))
          (case-lambda
            ((g$e*$12591$DDDPb
               g$r$12592$DDDPb
               g$mr$12593$DDDPb
               g$lex*$12594$DDDPb
               g$rhs*$12595$DDDPb
               g$mod**$12596$DDDPb
               g$_kwd*$12597$DDDPb
               g$_exp*$12598$DDDPb)
             ((case-lambda
                ((g$_exp*$12599$DDDPb
                   g$_kwd*$12600$DDDPb
                   g$mod**$12601$DDDPb
                   g$rhs*$12602$DDDPb
                   g$lex*$12603$DDDPb
                   g$mr$12604$DDDPb
                   g$r$12605$DDDPb
                   g$e*$12606$DDDPb)
                 ((case-lambda
                    ((g$e*$12607$DDDPb)
                     ((case-lambda
                        ((g$e$12608$DDDPb)
                         (values g$e$12608$DDDPb g$r$12605$DDDPb)))
                      (if (null? g$e*$12607$DDDPb)
                        (g$build-void$9280$DDDPb)
                        (if (null? (cdr g$e*$12607$DDDPb))
                          (car g$e*$12607$DDDPb)
                          (g$build-sequence$9279$DDDPb
                            '#f
                            g$e*$12607$DDDPb))))))
                  (g$expand-interaction-rhs*/init*$9742$DDDPb
                    (g$reverse$6431$DDDPb g$lex*$12603$DDDPb)
                    (g$reverse$6431$DDDPb g$rhs*$12602$DDDPb)
                    (append
                      (apply
                        append
                        (g$reverse$6431$DDDPb g$mod**$12601$DDDPb))
                      g$e*$12606$DDDPb)
                    g$r$12605$DDDPb
                    g$mr$12604$DDDPb))))
              g$_exp*$12598$DDDPb
              g$_kwd*$12597$DDDPb
              g$mod**$12596$DDDPb
              g$rhs*$12595$DDDPb
              g$lex*$12594$DDDPb
              g$mr$12593$DDDPb
              g$r$12592$DDDPb
              g$e*$12591$DDDPb)))))))
   (g$library-body-expander$9776$DDDPb
     g$library-body-expander$13315$DDDPb
     (case-lambda
       ((g$name$12609$DDDPb
          g$main-exp*$12610$DDDPb
          g$imp*$12611$DDDPb
          g$b*$12612$DDDPb
          g$mix?$12613$DDDPb)
        (letrec* ((g$itc$12614$DDDPb (g$make-collector$9770$DDDPb)))
          ((case-lambda
             ((g$imp-collector$12619$DDDPb
                g$top-level-context$12620$DDDPb
                g$imp-collector$12621$DDDPb
                g$top-level-context$12622$DDDPb)
              ((case-lambda
                 ((g$swap$12623$DDDPb)
                  (dynamic-wind
                    g$swap$12623$DDDPb
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$9768$DDDPb
                              g$imp*$12611$DDDPb)))
                         (case-lambda
                           ((g$subst-names$12626$DDDPb
                              g$subst-labels$12627$DDDPb)
                            ((case-lambda
                               ((g$subst-labels$12628$DDDPb
                                  g$subst-names$12629$DDDPb)
                                ((case-lambda
                                   ((g$rib$12630$DDDPb)
                                    (letrec* ((g$wrap$12631$DDDPb
                                                (case-lambda
                                                  ((g$x$12693$DDDPb)
                                                   (g$make-stx$9327$DDDPb
                                                     g$x$12693$DDDPb
                                                     g$top-mark*$9287$DDDPb
                                                     (list
                                                       g$rib$12630$DDDPb)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$12632$DDDPb
                                            g$main-exp*$12633$DDDPb
                                            g$rtc$12634$DDDPb
                                            g$vtc$12635$DDDPb)
                                          ((case-lambda
                                             ((g$inv-collector$12640$DDDPb
                                                g$vis-collector$12641$DDDPb
                                                g$inv-collector$12642$DDDPb
                                                g$vis-collector$12643$DDDPb)
                                              ((case-lambda
                                                 ((g$swap$12644$DDDPb)
                                                  (dynamic-wind
                                                    g$swap$12644$DDDPb
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$9774$DDDPb
                                                              g$b*$12632$DDDPb
                                                              g$rib$12630$DDDPb
                                                              g$mix?$12613$DDDPb)))
                                                         (case-lambda
                                                           ((g$init*$12651$DDDPb
                                                              g$r$12652$DDDPb
                                                              g$mr$12653$DDDPb
                                                              g$lex*$12654$DDDPb
                                                              g$rhs*$12655$DDDPb
                                                              g$internal-exp*$12656$DDDPb)
                                                            ((case-lambda
                                                               ((g$internal-exp*$12657$DDDPb
                                                                  g$rhs*$12658$DDDPb
                                                                  g$lex*$12659$DDDPb
                                                                  g$mr$12660$DDDPb
                                                                  g$r$12661$DDDPb
                                                                  g$init*$12662$DDDPb)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$9765$DDDPb
                                                                       (append
                                                                         g$main-exp*$12633$DDDPb
                                                                         g$internal-exp*$12657$DDDPb))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$12665$DDDPb
                                                                       g$exp-id*$12666$DDDPb)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$12667$DDDPb
                                                                           g$exp-name*$12668$DDDPb)
                                                                         (begin
                                                                           (g$seal-rib!$9318$DDDPb
                                                                             g$rib$12630$DDDPb)
                                                                           ((case-lambda
                                                                              ((g$init*$12669$DDDPb)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$12670$DDDPb)
                                                                                   (begin
                                                                                     (g$unseal-rib!$9319$DDDPb
                                                                                       g$rib$12630$DDDPb)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$12671$DDDPb
                                                                                           g$export-subst$12672$DDDPb)
                                                                                         (letrec* ((g$errstr$12673$DDDPb
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$9824$DDDPb
                                                                                                  g$lex*$12659$DDDPb
                                                                                                  g$loc*$12671$DDDPb
                                                                                                  g$r$12661$DDDPb)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$12677$DDDPb
                                                                                                  g$global*$12678$DDDPb
                                                                                                  g$macro*$12679$DDDPb)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$12680$DDDPb
                                                                                                      g$global*$12681$DDDPb
                                                                                                      g$export-env$12682$DDDPb)
                                                                                                    (begin
                                                                                                      (g$for-each$5754$DDDPb
                                                                                                        (case-lambda
                                                                                                          ((g$s$12683$DDDPb)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$12684$DDDPb
                                                                                                                 g$label$12685$DDDPb)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$12686$DDDPb)
                                                                                                                   (if g$p$12686$DDDPb
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$12687$DDDPb)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$12688$DDDPb)
                                                                                                                             (if (eq? g$type$12688$DDDPb
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$9835$DDDPb
                                                                                                                                 'export
                                                                                                                                 g$errstr$12673$DDDPb
                                                                                                                                 g$name$12684$DDDPb)
                                                                                                                               (void))))
                                                                                                                          (car g$b$12687$DDDPb))))
                                                                                                                      (cdr g$p$12686$DDDPb))
                                                                                                                     (void))))
                                                                                                                (g$assq$5741$DDDPb
                                                                                                                  g$label$12685$DDDPb
                                                                                                                  g$export-env$12682$DDDPb))))
                                                                                                            (car g$s$12683$DDDPb)
                                                                                                            (cdr g$s$12683$DDDPb))))
                                                                                                        g$export-subst$12672$DDDPb)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$12689$DDDPb
                                                                                                            g$invoke-definitions$12690$DDDPb)
                                                                                                          (values
                                                                                                            (g$itc$12614$DDDPb)
                                                                                                            (g$rtc$12634$DDDPb)
                                                                                                            (g$vtc$12635$DDDPb)
                                                                                                            (g$build-sequence$9279$DDDPb
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$12690$DDDPb
                                                                                                                (list
                                                                                                                  g$invoke-body$12689$DDDPb)))
                                                                                                            g$macro*$12680$DDDPb
                                                                                                            g$export-subst$12672$DDDPb
                                                                                                            g$export-env$12682$DDDPb)))
                                                                                                       (g$build-library-letrec*$9283$DDDPb
                                                                                                         '#f
                                                                                                         g$name$12609$DDDPb
                                                                                                         g$lex*$12659$DDDPb
                                                                                                         g$loc*$12671$DDDPb
                                                                                                         g$rhs*$12670$DDDPb
                                                                                                         (if (null?
                                                                                                               g$init*$12669$DDDPb)
                                                                                                           (g$build-void$9280$DDDPb)
                                                                                                           (g$build-sequence$9279$DDDPb
                                                                                                             '#f
                                                                                                             g$init*$12669$DDDPb)))
                                                                                                       (g$map$5753$DDDPb
                                                                                                         g$build-global-define$9275$DDDPb
                                                                                                         (g$map$5753$DDDPb
                                                                                                           cdr
                                                                                                           g$global*$12681$DDDPb))))))
                                                                                                 g$macro*$12679$DDDPb
                                                                                                 g$global*$12678$DDDPb
                                                                                                 g$export-env$12677$DDDPb)))))))
                                                                                      (g$map$5753$DDDPb
                                                                                        g$gen-global$9290$DDDPb
                                                                                        g$lex*$12659$DDDPb)
                                                                                      (g$make-export-subst$9823$DDDPb
                                                                                        g$exp-name*$12668$DDDPb
                                                                                        g$exp-id*$12667$DDDPb)))))
                                                                                (g$chi-rhs*$9743$DDDPb
                                                                                  g$rhs*$12658$DDDPb
                                                                                  g$r$12661$DDDPb
                                                                                  g$mr$12660$DDDPb))))
                                                                            (g$chi-expr*$9733$DDDPb
                                                                              g$init*$12662$DDDPb
                                                                              g$r$12661$DDDPb
                                                                              g$mr$12660$DDDPb)))))
                                                                      g$exp-id*$12666$DDDPb
                                                                      g$exp-name*$12665$DDDPb))))))
                                                             g$internal-exp*$12656$DDDPb
                                                             g$rhs*$12655$DDDPb
                                                             g$lex*$12654$DDDPb
                                                             g$mr$12653$DDDPb
                                                             g$r$12652$DDDPb
                                                             g$init*$12651$DDDPb))))))
                                                    g$swap$12644$DDDPb)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$12691$DDDPb)
                                                        (begin
                                                          (g$inv-collector$12640$DDDPb
                                                            g$inv-collector$12642$DDDPb)
                                                          (set! g$inv-collector$12642$DDDPb
                                                            g$t$12691$DDDPb))))
                                                     (g$inv-collector$12640$DDDPb))
                                                    ((case-lambda
                                                       ((g$t$12692$DDDPb)
                                                        (begin
                                                          (g$vis-collector$12641$DDDPb
                                                            g$vis-collector$12643$DDDPb)
                                                          (set! g$vis-collector$12643$DDDPb
                                                            g$t$12692$DDDPb))))
                                                     (g$vis-collector$12641$DDDPb))))))))
                                           g$inv-collector$9771$DDDPb
                                           g$vis-collector$9772$DDDPb
                                           g$rtc$12634$DDDPb
                                           g$vtc$12635$DDDPb)))
                                       (g$map$5753$DDDPb
                                         g$wrap$12631$DDDPb
                                         g$b*$12612$DDDPb)
                                       (g$map$5753$DDDPb
                                         g$wrap$12631$DDDPb
                                         g$main-exp*$12610$DDDPb)
                                       (g$make-collector$9770$DDDPb)
                                       (g$make-collector$9770$DDDPb)))))
                                 (g$make-top-rib$9769$DDDPb
                                   g$subst-names$12629$DDDPb
                                   g$subst-labels$12628$DDDPb))))
                             g$subst-labels$12627$DDDPb
                             g$subst-names$12626$DDDPb))))))
                    g$swap$12623$DDDPb)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$12694$DDDPb)
                        (begin
                          (g$imp-collector$12619$DDDPb
                            g$imp-collector$12621$DDDPb)
                          (set! g$imp-collector$12621$DDDPb
                            g$t$12694$DDDPb))))
                     (g$imp-collector$12619$DDDPb))
                    ((case-lambda
                       ((g$t$12695$DDDPb)
                        (begin
                          (g$top-level-context$12620$DDDPb
                            g$top-level-context$12622$DDDPb)
                          (set! g$top-level-context$12622$DDDPb
                            g$t$12695$DDDPb))))
                     (g$top-level-context$12620$DDDPb))))))))
           g$imp-collector$9773$DDDPb
           g$top-level-context$9843$DDDPb
           g$itc$12614$DDDPb
           '#f)))))
   (g$core-library-expander$9777$DDDPb
     g$core-library-expander$13316$DDDPb
     (case-lambda
       ((g$e$12696$DDDPb g$verify-name$12697$DDDPb)
        (call-with-values
          (case-lambda
            (() (g$parse-library$9767$DDDPb g$e$12696$DDDPb)))
          (case-lambda
            ((g$name*$12702$DDDPb
               g$exp*$12703$DDDPb
               g$imp*$12704$DDDPb
               g$b*$12705$DDDPb)
             ((case-lambda
                ((g$b*$12706$DDDPb
                   g$imp*$12707$DDDPb
                   g$exp*$12708$DDDPb
                   g$name*$12709$DDDPb)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$parse-library-name$9766$DDDPb
                        g$name*$12709$DDDPb)))
                   (case-lambda
                     ((g$name$12712$DDDPb g$ver$12713$DDDPb)
                      ((case-lambda
                         ((g$ver$12714$DDDPb g$name$12715$DDDPb)
                          (begin
                            (g$verify-name$12697$DDDPb
                              g$name$12715$DDDPb)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$9776$DDDPb
                                   g$name$12715$DDDPb
                                   g$exp*$12708$DDDPb
                                   g$imp*$12707$DDDPb
                                   g$b*$12706$DDDPb
                                   '#f)))
                              (case-lambda
                                ((g$imp*$12723$DDDPb
                                   g$invoke-req*$12724$DDDPb
                                   g$visit-req*$12725$DDDPb
                                   g$invoke-code$12726$DDDPb
                                   g$visit-code$12727$DDDPb
                                   g$export-subst$12728$DDDPb
                                   g$export-env$12729$DDDPb)
                                 ((case-lambda
                                    ((g$export-env$12730$DDDPb
                                       g$export-subst$12731$DDDPb
                                       g$visit-code$12732$DDDPb
                                       g$invoke-code$12733$DDDPb
                                       g$visit-req*$12734$DDDPb
                                       g$invoke-req*$12735$DDDPb
                                       g$imp*$12736$DDDPb)
                                     (values
                                       g$name$12715$DDDPb
                                       g$ver$12714$DDDPb
                                       g$imp*$12736$DDDPb
                                       g$invoke-req*$12735$DDDPb
                                       g$visit-req*$12734$DDDPb
                                       g$invoke-code$12733$DDDPb
                                       g$visit-code$12732$DDDPb
                                       g$export-subst$12731$DDDPb
                                       g$export-env$12730$DDDPb)))
                                  g$export-env$12729$DDDPb
                                  g$export-subst$12728$DDDPb
                                  g$visit-code$12727$DDDPb
                                  g$invoke-code$12726$DDDPb
                                  g$visit-req*$12725$DDDPb
                                  g$invoke-req*$12724$DDDPb
                                  g$imp*$12723$DDDPb)))))))
                       g$ver$12713$DDDPb
                       g$name$12712$DDDPb))))))
              g$b*$12705$DDDPb
              g$imp*$12704$DDDPb
              g$exp*$12703$DDDPb
              g$name*$12702$DDDPb)))))))
   (g$parse-top-level-program$9778$DDDPb
     g$parse-top-level-program$13317$DDDPb
     (case-lambda
       ((g$e*$12737$DDDPb)
        ((case-lambda
           ((g$t$12738$DDDPb)
            ((case-lambda
               ((g$ls/false$12739$DDDPb)
                (if (if g$ls/false$12739$DDDPb
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$12740$DDDPb
                               g$imp*$12741$DDDPb
                               g$b*$12742$DDDPb)
                             (eq? (g$syntax->datum$9838$DDDPb
                                    g$import$12740$DDDPb)
                                  'import)))
                          g$ls/false$12739$DDDPb))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$12743$DDDPb
                         g$imp*$12744$DDDPb
                         g$b*$12745$DDDPb)
                       (values g$imp*$12744$DDDPb g$b*$12745$DDDPb)))
                    g$ls/false$12739$DDDPb)
                  ((case-lambda
                     ((g$t$12746$DDDPb)
                      ((case-lambda
                         ((g$ls/false$12747$DDDPb)
                          (if (if g$ls/false$12747$DDDPb
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$12748$DDDPb
                                         g$x$12749$DDDPb
                                         g$y$12750$DDDPb)
                                       (eq? (g$syntax->datum$9838$DDDPb
                                              g$import$12748$DDDPb)
                                            'import)))
                                    g$ls/false$12747$DDDPb))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$12751$DDDPb
                                   g$x$12752$DDDPb
                                   g$y$12753$DDDPb)
                                 (g$syntax-violation$9835$DDDPb
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$9351$DDDPb
                                     g$e*$12737$DDDPb))))
                              g$ls/false$12747$DDDPb)
                            ((case-lambda
                               ((g$t$12754$DDDPb)
                                ((case-lambda
                                   ((g$ls/false$12755$DDDPb)
                                    (if g$ls/false$12755$DDDPb
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$12755$DDDPb)
                                      (g$syntax-violation$9835$DDDPb
                                        '#f
                                        '"invalid syntax"
                                        g$t$12754$DDDPb))))
                                 (g$syntax-dispatch$9717$DDDPb
                                   g$t$12754$DDDPb
                                   '_))))
                             g$t$12746$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$12746$DDDPb
                         '((any . any) . any)))))
                   g$t$12738$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb
               g$t$12738$DDDPb
               '((any . each-any) . each-any)))))
         g$e*$12737$DDDPb))))
   (g$top-level-expander$9779$DDDPb
     g$top-level-expander$13318$DDDPb
     (case-lambda
       ((g$e*$12756$DDDPb)
        (call-with-values
          (case-lambda
            (()
             (g$parse-top-level-program$9778$DDDPb g$e*$12756$DDDPb)))
          (case-lambda
            ((g$imp*$12759$DDDPb g$b*$12760$DDDPb)
             ((case-lambda
                ((g$b*$12761$DDDPb g$imp*$12762$DDDPb)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$9776$DDDPb
                        '()
                        '()
                        g$imp*$12762$DDDPb
                        g$b*$12761$DDDPb
                        '#t)))
                   (case-lambda
                     ((g$imp*$12770$DDDPb
                        g$invoke-req*$12771$DDDPb
                        g$visit-req*$12772$DDDPb
                        g$invoke-code$12773$DDDPb
                        g$visit-code$12774$DDDPb
                        g$export-subst$12775$DDDPb
                        g$export-env$12776$DDDPb)
                      ((case-lambda
                         ((g$export-env$12777$DDDPb
                            g$export-subst$12778$DDDPb
                            g$visit-code$12779$DDDPb
                            g$invoke-code$12780$DDDPb
                            g$visit-req*$12781$DDDPb
                            g$invoke-req*$12782$DDDPb
                            g$imp*$12783$DDDPb)
                          (values
                            g$invoke-req*$12782$DDDPb
                            g$invoke-code$12780$DDDPb)))
                       g$export-env$12776$DDDPb
                       g$export-subst$12775$DDDPb
                       g$visit-code$12774$DDDPb
                       g$invoke-code$12773$DDDPb
                       g$visit-req*$12772$DDDPb
                       g$invoke-req*$12771$DDDPb
                       g$imp*$12770$DDDPb))))))
              g$b*$12760$DDDPb
              g$imp*$12759$DDDPb)))))))
   (g$8031$9780$DDDPb
     g$8031$13319$DDDPb
     (make-record-type-descriptor
       'env
       '#f
       'g$8034$DDDPb
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8033$9781$DDDPb g$8033$13320$DDDPb '#f)
   (g$8032$9782$DDDPb
     g$8032$13321$DDDPb
     (make-record-constructor-descriptor
       g$8031$9780$DDDPb
       '#f
       g$8033$9781$DDDPb))
   (g$env?$9785$DDDPb
     g$env?$13322$DDDPb
     (record-predicate g$8031$9780$DDDPb))
   (g$make-env$9786$DDDPb
     g$make-env$13323$DDDPb
     (record-constructor g$8032$9782$DDDPb))
   (g$env-names$9787$DDDPb
     g$env-names$13324$DDDPb
     (record-accessor g$8031$9780$DDDPb '0))
   (g$env-labels$9788$DDDPb
     g$env-labels$13325$DDDPb
     (record-accessor g$8031$9780$DDDPb '1))
   (g$env-itc$9789$DDDPb
     g$env-itc$13326$DDDPb
     (record-accessor g$8031$9780$DDDPb '2))
   (g$set-env-names!$9790$DDDPb
     g$set-env-names!$13327$DDDPb
     (record-mutator g$8031$9780$DDDPb '0))
   (g$set-env-labels!$9791$DDDPb
     g$set-env-labels!$13328$DDDPb
     (record-mutator g$8031$9780$DDDPb '1))
   (g$set-env-itc!$9792$DDDPb
     g$set-env-itc!$13329$DDDPb
     (record-mutator g$8031$9780$DDDPb '2))
   (g$rp$9793$DDDPb
     g$rp$13330$DDDPb
     (make-record-printer
       'env
       (case-lambda
         ((g$x$12784$DDDPb g$p$12785$DDDPb g$wr$12786$DDDPb)
          (display '"#<environment>" g$p$12785$DDDPb)))))
   (g$8048$9794$DDDPb
     g$8048$13331$DDDPb
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8051$DDDPb
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8050$9795$DDDPb g$8050$13332$DDDPb '#f)
   (g$8049$9796$DDDPb
     g$8049$13333$DDDPb
     (make-record-constructor-descriptor
       g$8048$9794$DDDPb
       '#f
       g$8050$9795$DDDPb))
   (g$interaction-env?$9799$DDDPb
     g$interaction-env?$13334$DDDPb
     (record-predicate g$8048$9794$DDDPb))
   (g$make-interaction-env$9800$DDDPb
     g$make-interaction-env$13335$DDDPb
     (record-constructor g$8049$9796$DDDPb))
   (g$interaction-env-rib$9801$DDDPb
     g$interaction-env-rib$13336$DDDPb
     (record-accessor g$8048$9794$DDDPb '0))
   (g$interaction-env-r$9802$DDDPb
     g$interaction-env-r$13337$DDDPb
     (record-accessor g$8048$9794$DDDPb '1))
   (g$interaction-env-locs$9803$DDDPb
     g$interaction-env-locs$13338$DDDPb
     (record-accessor g$8048$9794$DDDPb '2))
   (g$set-interaction-env-rib!$9804$DDDPb
     g$set-interaction-env-rib!$13339$DDDPb
     (record-mutator g$8048$9794$DDDPb '0))
   (g$set-interaction-env-r!$9805$DDDPb
     g$set-interaction-env-r!$13340$DDDPb
     (record-mutator g$8048$9794$DDDPb '1))
   (g$set-interaction-env-locs!$9806$DDDPb
     g$set-interaction-env-locs!$13341$DDDPb
     (record-mutator g$8048$9794$DDDPb '2))
   (g$rp$9807$DDDPb
     g$rp$13342$DDDPb
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$12787$DDDPb g$p$12788$DDDPb g$wr$12789$DDDPb)
          (display '"#<environment>" g$p$12788$DDDPb)))))
   (g$interaction-environment-symbols$9808$DDDPb
     g$interaction-environment-symbols$13343$DDDPb
     (case-lambda
       (()
        (g$environment-symbols$9812$DDDPb
          (g$interaction-environment$9842$DDDPb)))))
   (g$environment-bindings$9809$DDDPb
     g$environment-bindings$13344$DDDPb
     (case-lambda
       ((g$e$12790$DDDPb)
        (vector->list
          (g$vector-map$6484$DDDPb
            (case-lambda
              ((g$name$12791$DDDPb g$label$12792$DDDPb)
               (g$parse-binding$9810$DDDPb
                 (cons
                   g$name$12791$DDDPb
                   (g$imported-label->binding$9092$DDDPb
                     g$label$12792$DDDPb)))))
            (g$env-names$9787$DDDPb g$e$12790$DDDPb)
            (g$env-labels$9788$DDDPb g$e$12790$DDDPb))))))
   (g$parse-binding$9810$DDDPb
     g$parse-binding$13345$DDDPb
     (case-lambda
       ((g$b$12793$DDDPb)
        (cons
          (car g$b$12793$DDDPb)
          ((case-lambda
             ((g$t$12794$DDDPb)
              (if (g$memv$5746$DDDPb
                    g$t$12794$DDDPb
                    '(core-prim global))
                'procedure
                (if (g$memv$5746$DDDPb
                      g$t$12794$DDDPb
                      '(core-macro macro global-macro))
                  'syntax
                  (if (eqv? g$t$12794$DDDPb '$core-rtd)
                    'record
                    (if (eq? (car g$b$12793$DDDPb)
                             (g$cadr$6433$DDDPb g$b$12793$DDDPb))
                      'syntax
                      'unknown))))))
           (g$cadr$6433$DDDPb g$b$12793$DDDPb))))))
   (g$environment?$9811$DDDPb
     g$environment?$13346$DDDPb
     (case-lambda
       ((g$x$12795$DDDPb)
        ((case-lambda
           ((g$t$12796$DDDPb)
            (if g$t$12796$DDDPb
              g$t$12796$DDDPb
              (begin
                '#f
                (g$interaction-env?$9799$DDDPb g$x$12795$DDDPb)))))
         (g$env?$9785$DDDPb g$x$12795$DDDPb)))))
   (g$environment-symbols$9812$DDDPb
     g$environment-symbols$13347$DDDPb
     (case-lambda
       ((g$x$12797$DDDPb)
        (if (g$env?$9785$DDDPb g$x$12797$DDDPb)
          (vector->list (g$env-names$9787$DDDPb g$x$12797$DDDPb))
          (if (g$interaction-env?$9799$DDDPb g$x$12797$DDDPb)
            (g$map$5753$DDDPb
              values
              (g$rib-sym*$9302$DDDPb
                (g$interaction-env-rib$9801$DDDPb g$x$12797$DDDPb)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$12797$DDDPb))))))
   (g$environment$9813$DDDPb
     g$environment$13348$DDDPb
     (case-lambda
       (g$imp*$12798$DDDPb
        ((case-lambda
           ((g$itc$12799$DDDPb)
            ((case-lambda
               ((g$imp-collector$12802$DDDPb
                  g$imp-collector$12803$DDDPb)
                ((case-lambda
                   ((g$swap$12804$DDDPb)
                    (dynamic-wind
                      g$swap$12804$DDDPb
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$9768$DDDPb
                                g$imp*$12798$DDDPb)))
                           (case-lambda
                             ((g$subst-names$12807$DDDPb
                                g$subst-labels$12808$DDDPb)
                              ((case-lambda
                                 ((g$subst-labels$12809$DDDPb
                                    g$subst-names$12810$DDDPb)
                                  (g$make-env$9786$DDDPb
                                    g$subst-names$12810$DDDPb
                                    g$subst-labels$12809$DDDPb
                                    g$itc$12799$DDDPb)))
                               g$subst-labels$12808$DDDPb
                               g$subst-names$12807$DDDPb))))))
                      g$swap$12804$DDDPb)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$12811$DDDPb)
                        (begin
                          (g$imp-collector$12802$DDDPb
                            g$imp-collector$12803$DDDPb)
                          (set! g$imp-collector$12803$DDDPb
                            g$t$12811$DDDPb))))
                     (g$imp-collector$12802$DDDPb)))))))
             g$imp-collector$9773$DDDPb
             g$itc$12799$DDDPb)))
         (g$make-collector$9770$DDDPb)))))
   (g$null-environment$9814$DDDPb
     g$null-environment$13349$DDDPb
     (case-lambda
       ((g$n$12812$DDDPb)
        (begin
          (if (not (eqv? g$n$12812$DDDPb '5))
            (assertion-violation
              'null-environment
              '"not 5"
              g$n$12812$DDDPb)
            (void))
          (g$environment$9813$DDDPb '(psyntax null-environment-5))))))
   (g$scheme-report-environment$9815$DDDPb
     g$scheme-report-environment$13350$DDDPb
     (case-lambda
       ((g$n$12813$DDDPb)
        (begin
          (if (not (eqv? g$n$12813$DDDPb '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$12813$DDDPb)
            (void))
          (g$environment$9813$DDDPb
            '(psyntax scheme-report-environment-5))))))
   (g$expand$9816$DDDPb
     g$expand$13351$DDDPb
     (case-lambda
       ((g$x$12814$DDDPb g$env$12815$DDDPb)
        (if (g$env?$9785$DDDPb g$env$12815$DDDPb)
          ((case-lambda
             ((g$rib$12816$DDDPb)
              ((case-lambda
                 ((g$x$12817$DDDPb
                    g$itc$12818$DDDPb
                    g$rtc$12819$DDDPb
                    g$vtc$12820$DDDPb)
                  ((case-lambda
                     ((g$x$12821$DDDPb)
                      (begin
                        (g$seal-rib!$9318$DDDPb g$rib$12816$DDDPb)
                        (values g$x$12821$DDDPb (g$rtc$12819$DDDPb)))))
                   ((case-lambda
                      ((g$top-level-context$12830$DDDPb
                         g$inv-collector$12831$DDDPb
                         g$vis-collector$12832$DDDPb
                         g$imp-collector$12833$DDDPb
                         g$top-level-context$12834$DDDPb
                         g$inv-collector$12835$DDDPb
                         g$vis-collector$12836$DDDPb
                         g$imp-collector$12837$DDDPb)
                       ((case-lambda
                          ((g$swap$12838$DDDPb)
                           (dynamic-wind
                             g$swap$12838$DDDPb
                             (case-lambda
                               (()
                                (g$chi-expr$9735$DDDPb
                                  g$x$12817$DDDPb
                                  '()
                                  '())))
                             g$swap$12838$DDDPb)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$12839$DDDPb)
                                 (begin
                                   (g$top-level-context$12830$DDDPb
                                     g$top-level-context$12834$DDDPb)
                                   (set! g$top-level-context$12834$DDDPb
                                     g$t$12839$DDDPb))))
                              (g$top-level-context$12830$DDDPb))
                             ((case-lambda
                                ((g$t$12840$DDDPb)
                                 (begin
                                   (g$inv-collector$12831$DDDPb
                                     g$inv-collector$12835$DDDPb)
                                   (set! g$inv-collector$12835$DDDPb
                                     g$t$12840$DDDPb))))
                              (g$inv-collector$12831$DDDPb))
                             ((case-lambda
                                ((g$t$12841$DDDPb)
                                 (begin
                                   (g$vis-collector$12832$DDDPb
                                     g$vis-collector$12836$DDDPb)
                                   (set! g$vis-collector$12836$DDDPb
                                     g$t$12841$DDDPb))))
                              (g$vis-collector$12832$DDDPb))
                             ((case-lambda
                                ((g$t$12842$DDDPb)
                                 (begin
                                   (g$imp-collector$12833$DDDPb
                                     g$imp-collector$12837$DDDPb)
                                   (set! g$imp-collector$12837$DDDPb
                                     g$t$12842$DDDPb))))
                              (g$imp-collector$12833$DDDPb))))))))
                    g$top-level-context$9843$DDDPb
                    g$inv-collector$9771$DDDPb
                    g$vis-collector$9772$DDDPb
                    g$imp-collector$9773$DDDPb
                    '#f
                    g$rtc$12819$DDDPb
                    g$vtc$12820$DDDPb
                    g$itc$12818$DDDPb))))
               (g$make-stx$9327$DDDPb
                 g$x$12814$DDDPb
                 g$top-mark*$9287$DDDPb
                 (list g$rib$12816$DDDPb)
                 '())
               (g$env-itc$9789$DDDPb g$env$12815$DDDPb)
               (g$make-collector$9770$DDDPb)
               (g$make-collector$9770$DDDPb))))
           (g$make-top-rib$9769$DDDPb
             (g$env-names$9787$DDDPb g$env$12815$DDDPb)
             (g$env-labels$9788$DDDPb g$env$12815$DDDPb)))
          (if (g$interaction-env?$9799$DDDPb g$env$12815$DDDPb)
            ((case-lambda
               ((g$rib$12843$DDDPb g$r$12844$DDDPb g$rtc$12845$DDDPb)
                ((case-lambda
                   ((g$x$12846$DDDPb)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$12857$DDDPb
                               g$inv-collector$12858$DDDPb
                               g$vis-collector$12859$DDDPb
                               g$imp-collector$12860$DDDPb
                               g$top-level-context$12861$DDDPb
                               g$inv-collector$12862$DDDPb
                               g$vis-collector$12863$DDDPb
                               g$imp-collector$12864$DDDPb)
                             ((case-lambda
                                ((g$swap$12865$DDDPb)
                                 (dynamic-wind
                                   g$swap$12865$DDDPb
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$9775$DDDPb
                                        g$x$12846$DDDPb
                                        g$rib$12843$DDDPb
                                        g$r$12844$DDDPb)))
                                   g$swap$12865$DDDPb)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$12866$DDDPb)
                                       (begin
                                         (g$top-level-context$12857$DDDPb
                                           g$top-level-context$12861$DDDPb)
                                         (set! g$top-level-context$12861$DDDPb
                                           g$t$12866$DDDPb))))
                                    (g$top-level-context$12857$DDDPb))
                                   ((case-lambda
                                      ((g$t$12867$DDDPb)
                                       (begin
                                         (g$inv-collector$12858$DDDPb
                                           g$inv-collector$12862$DDDPb)
                                         (set! g$inv-collector$12862$DDDPb
                                           g$t$12867$DDDPb))))
                                    (g$inv-collector$12858$DDDPb))
                                   ((case-lambda
                                      ((g$t$12868$DDDPb)
                                       (begin
                                         (g$vis-collector$12859$DDDPb
                                           g$vis-collector$12863$DDDPb)
                                         (set! g$vis-collector$12863$DDDPb
                                           g$t$12868$DDDPb))))
                                    (g$vis-collector$12859$DDDPb))
                                   ((case-lambda
                                      ((g$t$12869$DDDPb)
                                       (begin
                                         (g$imp-collector$12860$DDDPb
                                           g$imp-collector$12864$DDDPb)
                                         (set! g$imp-collector$12864$DDDPb
                                           g$t$12869$DDDPb))))
                                    (g$imp-collector$12860$DDDPb))))))))
                          g$top-level-context$9843$DDDPb
                          g$inv-collector$9771$DDDPb
                          g$vis-collector$9772$DDDPb
                          g$imp-collector$9773$DDDPb
                          g$env$12815$DDDPb
                          g$rtc$12845$DDDPb
                          (g$make-collector$9770$DDDPb)
                          (g$make-collector$9770$DDDPb))))
                      (case-lambda
                        ((g$e$12870$DDDPb g$r^$12871$DDDPb)
                         ((case-lambda
                            ((g$r^$12872$DDDPb g$e$12873$DDDPb)
                             (begin
                               (g$set-interaction-env-r!$9805$DDDPb
                                 g$env$12815$DDDPb
                                 g$r^$12872$DDDPb)
                               (values
                                 g$e$12873$DDDPb
                                 (g$rtc$12845$DDDPb)))))
                          g$r^$12871$DDDPb
                          g$e$12870$DDDPb))))))
                 (g$make-stx$9327$DDDPb
                   g$x$12814$DDDPb
                   g$top-mark*$9287$DDDPb
                   (list g$rib$12843$DDDPb)
                   '()))))
             (g$interaction-env-rib$9801$DDDPb g$env$12815$DDDPb)
             (g$interaction-env-r$9802$DDDPb g$env$12815$DDDPb)
             (g$make-collector$9770$DDDPb))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$12815$DDDPb))))))
   (g$eval$9817$DDDPb
     g$eval$13352$DDDPb
     (case-lambda
       ((g$x$12874$DDDPb g$env$12875$DDDPb)
        (begin
          (if (not (g$environment?$9811$DDDPb g$env$12875$DDDPb))
            (error 'eval '"not an environment" g$env$12875$DDDPb)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$9816$DDDPb g$x$12874$DDDPb g$env$12875$DDDPb)))
            (case-lambda
              ((g$x$12878$DDDPb g$invoke-req*$12879$DDDPb)
               ((case-lambda
                  ((g$invoke-req*$12880$DDDPb g$x$12881$DDDPb)
                   (begin
                     (g$for-each$5754$DDDPb
                       g$invoke-library$9093$DDDPb
                       g$invoke-req*$12880$DDDPb)
                     (eval-core
                       (g$expanded->core$8826$DDDPb g$x$12881$DDDPb)))))
                g$invoke-req*$12879$DDDPb
                g$x$12878$DDDPb))))))))
   (g$expand->core$9818$DDDPb
     g$expand->core$13353$DDDPb
     (case-lambda
       ((g$x$12882$DDDPb g$env$12883$DDDPb)
        (begin
          (if (not (g$environment?$9811$DDDPb g$env$12883$DDDPb))
            (error 'eval '"not an environment" g$env$12883$DDDPb)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$9816$DDDPb g$x$12882$DDDPb g$env$12883$DDDPb)))
            (case-lambda
              ((g$x$12886$DDDPb g$invoke-req*$12887$DDDPb)
               ((case-lambda
                  ((g$invoke-req*$12888$DDDPb g$x$12889$DDDPb)
                   (begin
                     (g$for-each$5754$DDDPb
                       g$invoke-library$9093$DDDPb
                       g$invoke-req*$12888$DDDPb)
                     (g$expanded->core$8826$DDDPb g$x$12889$DDDPb))))
                g$invoke-req*$12887$DDDPb
                g$x$12886$DDDPb))))))))
   (g$library-expander$9819$DDDPb
     g$library-expander$13354$DDDPb
     (case-lambda
       ((g$x$12890$DDDPb
          g$filename$12891$DDDPb
          g$verify-name$12892$DDDPb)
        (letrec* ((g$build-visit-code$12893$DDDPb
                    (case-lambda
                      ((g$macro*$12936$DDDPb)
                       (if (null? g$macro*$12936$DDDPb)
                         (g$build-void$9280$DDDPb)
                         (g$build-sequence$9279$DDDPb
                           '#f
                           (g$map$5753$DDDPb
                             (case-lambda
                               ((g$x$12937$DDDPb)
                                ((case-lambda
                                   ((g$loc$12938$DDDPb
                                      g$src$12939$DDDPb)
                                    (list
                                      'set!
                                      g$loc$12938$DDDPb
                                      g$src$12939$DDDPb)))
                                 (car g$x$12937$DDDPb)
                                 (g$cddr$6435$DDDPb g$x$12937$DDDPb))))
                             g$macro*$12936$DDDPb))))))
                  (g$visit!$12894$DDDPb
                    (case-lambda
                      ((g$macro*$12932$DDDPb)
                       (g$for-each$5754$DDDPb
                         (case-lambda
                           ((g$x$12933$DDDPb)
                            ((case-lambda
                               ((g$loc$12934$DDDPb g$proc$12935$DDDPb)
                                (set-symbol-value!
                                  g$loc$12934$DDDPb
                                  g$proc$12935$DDDPb)))
                             (car g$x$12933$DDDPb)
                             (g$cadr$6433$DDDPb g$x$12933$DDDPb))))
                         g$macro*$12932$DDDPb)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$9777$DDDPb
                 g$x$12890$DDDPb
                 g$verify-name$12892$DDDPb)))
            (case-lambda
              ((g$name$12904$DDDPb
                 g$ver$12905$DDDPb
                 g$imp*$12906$DDDPb
                 g$inv*$12907$DDDPb
                 g$vis*$12908$DDDPb
                 g$invoke-code$12909$DDDPb
                 g$macro*$12910$DDDPb
                 g$export-subst$12911$DDDPb
                 g$export-env$12912$DDDPb)
               ((case-lambda
                  ((g$export-env$12913$DDDPb
                     g$export-subst$12914$DDDPb
                     g$macro*$12915$DDDPb
                     g$invoke-code$12916$DDDPb
                     g$vis*$12917$DDDPb
                     g$inv*$12918$DDDPb
                     g$imp*$12919$DDDPb
                     g$ver$12920$DDDPb
                     g$name$12921$DDDPb)
                   ((case-lambda
                      ((g$id$12922$DDDPb
                         g$name$12923$DDDPb
                         g$ver$12924$DDDPb
                         g$imp*$12925$DDDPb
                         g$vis*$12926$DDDPb
                         g$inv*$12927$DDDPb
                         g$visit-proc$12928$DDDPb
                         g$invoke-proc$12929$DDDPb
                         g$visit-code$12930$DDDPb
                         g$invoke-code$12931$DDDPb)
                       (begin
                         (g$install-library$9091$DDDPb
                           g$id$12922$DDDPb
                           g$name$12923$DDDPb
                           g$ver$12924$DDDPb
                           g$imp*$12925$DDDPb
                           g$vis*$12926$DDDPb
                           g$inv*$12927$DDDPb
                           g$export-subst$12914$DDDPb
                           g$export-env$12913$DDDPb
                           g$visit-proc$12928$DDDPb
                           g$invoke-proc$12929$DDDPb
                           g$visit-code$12930$DDDPb
                           g$invoke-code$12931$DDDPb
                           '#t
                           g$filename$12891$DDDPb)
                         (values
                           g$id$12922$DDDPb
                           g$name$12923$DDDPb
                           g$ver$12924$DDDPb
                           g$imp*$12925$DDDPb
                           g$vis*$12926$DDDPb
                           g$inv*$12927$DDDPb
                           g$invoke-code$12931$DDDPb
                           g$visit-code$12930$DDDPb
                           g$export-subst$12914$DDDPb
                           g$export-env$12913$DDDPb))))
                    (gensym)
                    g$name$12921$DDDPb
                    g$ver$12920$DDDPb
                    (g$map$5753$DDDPb
                      g$library-spec$9097$DDDPb
                      g$imp*$12919$DDDPb)
                    (g$map$5753$DDDPb
                      g$library-spec$9097$DDDPb
                      g$vis*$12917$DDDPb)
                    (g$map$5753$DDDPb
                      g$library-spec$9097$DDDPb
                      g$inv*$12918$DDDPb)
                    (case-lambda
                      (() (g$visit!$12894$DDDPb g$macro*$12915$DDDPb)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$8826$DDDPb
                           g$invoke-code$12916$DDDPb))))
                    (g$build-visit-code$12893$DDDPb
                      g$macro*$12915$DDDPb)
                    g$invoke-code$12916$DDDPb)))
                g$export-env$12912$DDDPb
                g$export-subst$12911$DDDPb
                g$macro*$12910$DDDPb
                g$invoke-code$12909$DDDPb
                g$vis*$12908$DDDPb
                g$inv*$12907$DDDPb
                g$imp*$12906$DDDPb
                g$ver$12905$DDDPb
                g$name$12904$DDDPb))))))
       ((g$x$12940$DDDPb g$filename$12941$DDDPb)
        (g$library-expander$9819$DDDPb
          g$x$12940$DDDPb
          g$filename$12941$DDDPb
          (case-lambda ((g$x$12942$DDDPb) (values)))))
       ((g$x$12943$DDDPb)
        (g$library-expander$9819$DDDPb
          g$x$12943$DDDPb
          '#f
          (case-lambda ((g$x$12944$DDDPb) (values)))))))
   (g$boot-library-expand$9820$DDDPb
     g$boot-library-expand$13355$DDDPb
     (case-lambda
       ((g$x$12945$DDDPb)
        (call-with-values
          (case-lambda
            (() (g$library-expander$9819$DDDPb g$x$12945$DDDPb)))
          (case-lambda
            ((g$id$12956$DDDPb
               g$name$12957$DDDPb
               g$ver$12958$DDDPb
               g$imp*$12959$DDDPb
               g$vis*$12960$DDDPb
               g$inv*$12961$DDDPb
               g$invoke-code$12962$DDDPb
               g$visit-code$12963$DDDPb
               g$export-subst$12964$DDDPb
               g$export-env$12965$DDDPb)
             ((case-lambda
                ((g$export-env$12966$DDDPb
                   g$export-subst$12967$DDDPb
                   g$visit-code$12968$DDDPb
                   g$invoke-code$12969$DDDPb
                   g$inv*$12970$DDDPb
                   g$vis*$12971$DDDPb
                   g$imp*$12972$DDDPb
                   g$ver$12973$DDDPb
                   g$name$12974$DDDPb
                   g$id$12975$DDDPb)
                 (values
                   g$name$12974$DDDPb
                   g$invoke-code$12969$DDDPb
                   g$export-subst$12967$DDDPb
                   g$export-env$12966$DDDPb)))
              g$export-env$12965$DDDPb
              g$export-subst$12964$DDDPb
              g$visit-code$12963$DDDPb
              g$invoke-code$12962$DDDPb
              g$inv*$12961$DDDPb
              g$vis*$12960$DDDPb
              g$imp*$12959$DDDPb
              g$ver$12958$DDDPb
              g$name$12957$DDDPb
              g$id$12956$DDDPb)))))))
   (g$rev-map-append$9821$DDDPb
     g$rev-map-append$13356$DDDPb
     (case-lambda
       ((g$f$12976$DDDPb g$ls$12977$DDDPb g$ac$12978$DDDPb)
        (if (null? g$ls$12977$DDDPb)
          g$ac$12978$DDDPb
          (g$rev-map-append$9821$DDDPb
            g$f$12976$DDDPb
            (cdr g$ls$12977$DDDPb)
            (cons
              (g$f$12976$DDDPb (car g$ls$12977$DDDPb))
              g$ac$12978$DDDPb))))))
   (g$build-exports$9822$DDDPb
     g$build-exports$13357$DDDPb
     (case-lambda
       ((g$lex*+loc*$12979$DDDPb g$init*$12980$DDDPb)
        (g$build-sequence$9279$DDDPb
          '#f
          (cons
            (g$build-void$9280$DDDPb)
            (g$rev-map-append$9821$DDDPb
              (case-lambda
                ((g$x$12981$DDDPb)
                 (list
                   'set!
                   (cdr g$x$12981$DDDPb)
                   (car g$x$12981$DDDPb))))
              g$lex*+loc*$12979$DDDPb
              g$init*$12980$DDDPb))))))
   (g$make-export-subst$9823$DDDPb
     g$make-export-subst$13358$DDDPb
     (case-lambda
       ((g$name*$12982$DDDPb g$id*$12983$DDDPb)
        (g$map$5753$DDDPb
          (case-lambda
            ((g$name$12984$DDDPb g$id$12985$DDDPb)
             ((case-lambda
                ((g$label$12986$DDDPb)
                 (begin
                   (if (not g$label$12986$DDDPb)
                     (g$syntax-violation$9835$DDDPb
                       '#f
                       '"cannot export unbound identifier"
                       g$id$12985$DDDPb)
                     (void))
                   (cons g$name$12984$DDDPb g$label$12986$DDDPb))))
              (g$id->label$9367$DDDPb g$id$12985$DDDPb))))
          g$name*$12982$DDDPb
          g$id*$12983$DDDPb))))
   (g$make-export-env/macros$9824$DDDPb
     g$make-export-env/macros$13359$DDDPb
     (case-lambda
       ((g$lex*$12987$DDDPb g$loc*$12988$DDDPb g$r$12989$DDDPb)
        (letrec* ((g$lookup$12990$DDDPb
                    (case-lambda
                      ((g$x$13006$DDDPb)
                       ((letrec ((g$f$13007$DDDPb
                                   (case-lambda
                                     ((g$x$13008$DDDPb
                                        g$lex*$13009$DDDPb
                                        g$loc*$13010$DDDPb)
                                      (if (pair? g$lex*$13009$DDDPb)
                                        (if (eq? g$x$13008$DDDPb
                                                 (car g$lex*$13009$DDDPb))
                                          (car g$loc*$13010$DDDPb)
                                          (g$f$13007$DDDPb
                                            g$x$13008$DDDPb
                                            (cdr g$lex*$13009$DDDPb)
                                            (cdr g$loc*$13010$DDDPb)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$13007$DDDPb)
                        g$x$13006$DDDPb
                        g$lex*$12987$DDDPb
                        g$loc*$12988$DDDPb)))))
          ((letrec ((g$f$12991$DDDPb
                      (case-lambda
                        ((g$r$12992$DDDPb
                           g$env$12993$DDDPb
                           g$global*$12994$DDDPb
                           g$macro*$12995$DDDPb)
                         (if (null? g$r$12992$DDDPb)
                           (values
                             g$env$12993$DDDPb
                             g$global*$12994$DDDPb
                             g$macro*$12995$DDDPb)
                           ((case-lambda
                              ((g$x$12996$DDDPb)
                               ((case-lambda
                                  ((g$label$12997$DDDPb g$b$12998$DDDPb)
                                   ((case-lambda
                                      ((g$t$12999$DDDPb)
                                       (if (eqv?
                                             g$t$12999$DDDPb
                                             'lexical)
                                         ((case-lambda
                                            ((g$v$13000$DDDPb)
                                             ((case-lambda
                                                ((g$loc$13001$DDDPb
                                                   g$type$13002$DDDPb)
                                                 (g$f$12991$DDDPb
                                                   (cdr g$r$12992$DDDPb)
                                                   (cons
                                                     (g$cons*$5755$DDDPb
                                                       g$label$12997$DDDPb
                                                       g$type$13002$DDDPb
                                                       g$loc$13001$DDDPb)
                                                     g$env$12993$DDDPb)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$9661$DDDPb
                                                         g$v$13000$DDDPb)
                                                       g$loc$13001$DDDPb)
                                                     g$global*$12994$DDDPb)
                                                   g$macro*$12995$DDDPb)))
                                              (g$lookup$12990$DDDPb
                                                (g$lexical-var$9661$DDDPb
                                                  g$v$13000$DDDPb))
                                              (if (g$lexical-mutable?$9662$DDDPb
                                                    g$v$13000$DDDPb)
                                                'mutable
                                                'global))))
                                          (g$binding-value$9372$DDDPb
                                            g$b$12998$DDDPb))
                                         (if (eqv?
                                               g$t$12999$DDDPb
                                               'local-macro)
                                           ((case-lambda
                                              ((g$loc$13003$DDDPb)
                                               (g$f$12991$DDDPb
                                                 (cdr g$r$12992$DDDPb)
                                                 (cons
                                                   (g$cons*$5755$DDDPb
                                                     g$label$12997$DDDPb
                                                     'global-macro
                                                     g$loc$13003$DDDPb)
                                                   g$env$12993$DDDPb)
                                                 g$global*$12994$DDDPb
                                                 (cons
                                                   (cons
                                                     g$loc$13003$DDDPb
                                                     (g$binding-value$9372$DDDPb
                                                       g$b$12998$DDDPb))
                                                   g$macro*$12995$DDDPb))))
                                            (gensym))
                                           (if (eqv?
                                                 g$t$12999$DDDPb
                                                 'local-macro!)
                                             ((case-lambda
                                                ((g$loc$13004$DDDPb)
                                                 (g$f$12991$DDDPb
                                                   (cdr g$r$12992$DDDPb)
                                                   (cons
                                                     (g$cons*$5755$DDDPb
                                                       g$label$12997$DDDPb
                                                       'global-macro!
                                                       g$loc$13004$DDDPb)
                                                     g$env$12993$DDDPb)
                                                   g$global*$12994$DDDPb
                                                   (cons
                                                     (cons
                                                       g$loc$13004$DDDPb
                                                       (g$binding-value$9372$DDDPb
                                                         g$b$12998$DDDPb))
                                                     g$macro*$12995$DDDPb))))
                                              (gensym))
                                             (if (eqv?
                                                   g$t$12999$DDDPb
                                                   'local-ctv)
                                               ((case-lambda
                                                  ((g$loc$13005$DDDPb)
                                                   (g$f$12991$DDDPb
                                                     (cdr g$r$12992$DDDPb)
                                                     (cons
                                                       (g$cons*$5755$DDDPb
                                                         g$label$12997$DDDPb
                                                         'global-ctv
                                                         g$loc$13005$DDDPb)
                                                       g$env$12993$DDDPb)
                                                     g$global*$12994$DDDPb
                                                     (cons
                                                       (cons
                                                         g$loc$13005$DDDPb
                                                         (g$binding-value$9372$DDDPb
                                                           g$b$12998$DDDPb))
                                                       g$macro*$12995$DDDPb))))
                                                (gensym))
                                               (if (g$memv$5746$DDDPb
                                                     g$t$12999$DDDPb
                                                     '($rtd $module))
                                                 (g$f$12991$DDDPb
                                                   (cdr g$r$12992$DDDPb)
                                                   (cons
                                                     g$x$12996$DDDPb
                                                     g$env$12993$DDDPb)
                                                   g$global*$12994$DDDPb
                                                   g$macro*$12995$DDDPb)
                                                 (assertion-violation
                                                   'expander
                                                   '"BUG: do not know how to export"
                                                   (g$binding-type$9371$DDDPb
                                                     g$b$12998$DDDPb)
                                                   (g$binding-value$9372$DDDPb
                                                     g$b$12998$DDDPb)))))))))
                                    (g$binding-type$9371$DDDPb
                                      g$b$12998$DDDPb))))
                                (car g$x$12996$DDDPb)
                                (cdr g$x$12996$DDDPb))))
                            (car g$r$12992$DDDPb)))))))
             g$f$12991$DDDPb)
           g$r$12989$DDDPb
           '()
           '()
           '())))))
   (g$generate-temporaries$9825$DDDPb
     g$generate-temporaries$13360$DDDPb
     (case-lambda
       ((g$ls$13011$DDDPb)
        ((case-lambda
           ((g$t$13012$DDDPb)
            ((case-lambda
               ((g$ls/false$13013$DDDPb)
                (if g$ls/false$13013$DDDPb
                  (apply
                    (case-lambda
                      ((g$ls$13014$DDDPb)
                       (g$map$5753$DDDPb
                         (case-lambda
                           ((g$x$13015$DDDPb)
                            (g$make-stx$9327$DDDPb
                              ((case-lambda
                                 ((g$x$13016$DDDPb)
                                  (if ((case-lambda
                                         ((g$t$13017$DDDPb)
                                          (if g$t$13017$DDDPb
                                            g$t$13017$DDDPb
                                            (begin
                                              '#f
                                              (string?
                                                g$x$13016$DDDPb)))))
                                       (g$symbol?$6424$DDDPb
                                         g$x$13016$DDDPb))
                                    (gensym g$x$13016$DDDPb)
                                    (gensym 't))))
                               (g$syntax->datum$9838$DDDPb
                                 g$x$13015$DDDPb))
                              g$top-mark*$9287$DDDPb
                              '()
                              '())))
                         g$ls$13014$DDDPb)))
                    g$ls/false$13013$DDDPb)
                  ((case-lambda
                     ((g$t$13018$DDDPb)
                      ((case-lambda
                         ((g$ls/false$13019$DDDPb)
                          (if g$ls/false$13019$DDDPb
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$13019$DDDPb)
                            (g$syntax-violation$9835$DDDPb
                              '#f
                              '"invalid syntax"
                              g$t$13018$DDDPb))))
                       (g$syntax-dispatch$9717$DDDPb
                         g$t$13018$DDDPb
                         '_))))
                   g$t$13012$DDDPb))))
             (g$syntax-dispatch$9717$DDDPb g$t$13012$DDDPb 'each-any))))
         g$ls$13011$DDDPb))))
   (g$free-identifier=?$9826$DDDPb
     g$free-identifier=?$13361$DDDPb
     (case-lambda
       ((g$x$13020$DDDPb g$y$13021$DDDPb)
        (if (g$id?$9354$DDDPb g$x$13020$DDDPb)
          (if (g$id?$9354$DDDPb g$y$13021$DDDPb)
            (g$free-id=?$9358$DDDPb g$x$13020$DDDPb g$y$13021$DDDPb)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$13021$DDDPb))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$13020$DDDPb)))))
   (g$bound-identifier=?$9827$DDDPb
     g$bound-identifier=?$13362$DDDPb
     (case-lambda
       ((g$x$13022$DDDPb g$y$13023$DDDPb)
        (if (g$id?$9354$DDDPb g$x$13022$DDDPb)
          (if (g$id?$9354$DDDPb g$y$13023$DDDPb)
            (g$bound-id=?$9357$DDDPb g$x$13022$DDDPb g$y$13023$DDDPb)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$13023$DDDPb))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$13022$DDDPb)))))
   (g$make-source-condition$9828$DDDPb
     g$make-source-condition$13363$DDDPb
     (case-lambda
       ((g$x$13024$DDDPb)
        (letrec* ((g$10983$13025$DDDPb
                    (make-record-type-descriptor
                      '&source-information
                      g$&condition-rtd$7067$DDDPb
                      'g$10986$DDDPb
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$10985$13026$DDDPb '#f)
                  (g$10984$13027$DDDPb
                    (make-record-constructor-descriptor
                      g$10983$13025$DDDPb
                      g$&condition-rcd$7068$DDDPb
                      g$10985$13026$DDDPb))
                  (g$10982$13030$DDDPb
                    (record-predicate g$10983$13025$DDDPb))
                  (g$make-source-condition$13031$DDDPb
                    (record-constructor g$10984$13027$DDDPb))
                  (g$10980$13032$DDDPb
                    (record-accessor g$10983$13025$DDDPb '0))
                  (g$10981$13033$DDDPb
                    (record-accessor g$10983$13025$DDDPb '1))
                  (g$source-condition?$13034$DDDPb
                    (condition-predicate g$10983$13025$DDDPb))
                  (g$source-filename$13035$DDDPb
                    (condition-accessor
                      g$10983$13025$DDDPb
                      g$10980$13032$DDDPb))
                  (g$source-character$13036$DDDPb
                    (condition-accessor
                      g$10983$13025$DDDPb
                      g$10981$13033$DDDPb)))
          (if (pair? g$x$13024$DDDPb)
            (g$make-source-condition$13031$DDDPb
              (car g$x$13024$DDDPb)
              (cdr g$x$13024$DDDPb))
            (condition))))))
   (g$extract-position-condition$9829$DDDPb
     g$extract-position-condition$13364$DDDPb
     (case-lambda
       ((g$x$13037$DDDPb)
        (g$make-source-condition$9828$DDDPb
          (g$expression-position$9830$DDDPb g$x$13037$DDDPb)))))
   (g$expression-position$9830$DDDPb
     g$expression-position$13365$DDDPb
     (case-lambda
       ((g$x$13038$DDDPb)
        (if (g$stx?$9326$DDDPb g$x$13038$DDDPb)
          (begin
            '#f
            ((case-lambda
               ((g$x$13039$DDDPb)
                (if (annotation? g$x$13039$DDDPb)
                  (begin '#f (annotation-source g$x$13039$DDDPb))
                  '#f)))
             (g$stx-expr$9328$DDDPb g$x$13038$DDDPb)))
          '#f))))
   (g$assertion-error$9831$DDDPb
     g$assertion-error$13366$DDDPb
     (case-lambda
       ((g$expr$13040$DDDPb g$pos$13041$DDDPb)
        (raise
          (condition
            (g$make-assertion-violation$7115$DDDPb)
            (g$make-who-condition$7133$DDDPb 'assert)
            (g$make-message-condition$7073$DDDPb '"assertion failed")
            (g$make-irritants-condition$7123$DDDPb
              (list g$expr$13040$DDDPb))
            (g$make-source-condition$9828$DDDPb g$pos$13041$DDDPb))))))
   (g$syntax-error$9832$DDDPb
     g$syntax-error$13367$DDDPb
     (case-lambda
       ((g$x$13042$DDDPb . g$args$13043$DDDPb)
        (begin
          (if (not (g$for-all$5751$DDDPb string? g$args$13043$DDDPb))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$13043$DDDPb)
            (void))
          (raise
            (condition
              (g$make-message-condition$7073$DDDPb
                (if (null? g$args$13043$DDDPb)
                  '"invalid syntax"
                  (apply string-append g$args$13043$DDDPb)))
              (g$make-syntax-violation$7167$DDDPb
                (g$syntax->datum$9838$DDDPb g$x$13042$DDDPb)
                '#f)
              (g$extract-position-condition$9829$DDDPb g$x$13042$DDDPb)
              (g$extract-trace$9833$DDDPb g$x$13042$DDDPb)))))))
   (g$extract-trace$9833$DDDPb
     g$extract-trace$13368$DDDPb
     (case-lambda
       ((g$x$13044$DDDPb)
        (letrec* ((g$11008$13045$DDDPb
                    (make-record-type-descriptor
                      '&trace
                      g$&condition-rtd$7067$DDDPb
                      'g$11011$DDDPb
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11010$13046$DDDPb '#f)
                  (g$11009$13047$DDDPb
                    (make-record-constructor-descriptor
                      g$11008$13045$DDDPb
                      g$&condition-rcd$7068$DDDPb
                      g$11010$13046$DDDPb))
                  (g$11007$13050$DDDPb
                    (record-predicate g$11008$13045$DDDPb))
                  (g$make-trace$13051$DDDPb
                    (record-constructor g$11009$13047$DDDPb))
                  (g$11006$13052$DDDPb
                    (record-accessor g$11008$13045$DDDPb '0))
                  (g$trace?$13053$DDDPb
                    (condition-predicate g$11008$13045$DDDPb))
                  (g$trace-form$13054$DDDPb
                    (condition-accessor
                      g$11008$13045$DDDPb
                      g$11006$13052$DDDPb)))
          ((letrec ((g$f$13055$DDDPb
                      (case-lambda
                        ((g$x$13056$DDDPb)
                         (if (g$stx?$9326$DDDPb g$x$13056$DDDPb)
                           (apply
                             condition
                             (g$make-trace$13051$DDDPb g$x$13056$DDDPb)
                             (g$map$5753$DDDPb
                               g$f$13055$DDDPb
                               (g$stx-ae*$9331$DDDPb g$x$13056$DDDPb)))
                           (if (annotation? g$x$13056$DDDPb)
                             (g$make-trace$13051$DDDPb
                               (g$make-stx$9327$DDDPb
                                 g$x$13056$DDDPb
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$13055$DDDPb)
           g$x$13044$DDDPb)))))
   (g$syntax-violation*$9834$DDDPb
     g$syntax-violation*$13369$DDDPb
     (case-lambda
       ((g$who$13057$DDDPb
          g$msg$13058$DDDPb
          g$form$13059$DDDPb
          g$condition-object$13060$DDDPb)
        (begin
          (if (not (string? g$msg$13058$DDDPb))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$13058$DDDPb)
            (void))
          ((case-lambda
             ((g$who$13061$DDDPb)
              (raise
                (condition
                  (if g$who$13061$DDDPb
                    (g$make-who-condition$7133$DDDPb g$who$13061$DDDPb)
                    (condition))
                  (g$make-message-condition$7073$DDDPb
                    g$msg$13058$DDDPb)
                  g$condition-object$13060$DDDPb
                  (g$extract-position-condition$9829$DDDPb
                    g$form$13059$DDDPb)
                  (g$extract-trace$9833$DDDPb g$form$13059$DDDPb)))))
           (if ((case-lambda
                  ((g$t$13062$DDDPb)
                   (if g$t$13062$DDDPb
                     g$t$13062$DDDPb
                     (begin
                       '#f
                       (g$symbol?$6424$DDDPb g$who$13057$DDDPb)))))
                (string? g$who$13057$DDDPb))
             g$who$13057$DDDPb
             (if (not g$who$13057$DDDPb)
               ((case-lambda
                  ((g$t$13063$DDDPb)
                   ((case-lambda
                      ((g$ls/false$13064$DDDPb)
                       (if (if g$ls/false$13064$DDDPb
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$13065$DDDPb)
                                    (g$id?$9354$DDDPb
                                      g$id$13065$DDDPb)))
                                 g$ls/false$13064$DDDPb))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$13066$DDDPb)
                              (g$syntax->datum$9838$DDDPb
                                g$id$13066$DDDPb)))
                           g$ls/false$13064$DDDPb)
                         ((case-lambda
                            ((g$t$13067$DDDPb)
                             ((case-lambda
                                ((g$ls/false$13068$DDDPb)
                                 (if (if g$ls/false$13068$DDDPb
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$13069$DDDPb
                                                g$rest$13070$DDDPb)
                                              (g$id?$9354$DDDPb
                                                g$id$13069$DDDPb)))
                                           g$ls/false$13068$DDDPb))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$13071$DDDPb
                                          g$rest$13072$DDDPb)
                                        (g$syntax->datum$9838$DDDPb
                                          g$id$13071$DDDPb)))
                                     g$ls/false$13068$DDDPb)
                                   ((case-lambda
                                      ((g$t$13073$DDDPb)
                                       ((case-lambda
                                          ((g$ls/false$13074$DDDPb)
                                           (if g$ls/false$13074$DDDPb
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$13074$DDDPb)
                                             (g$syntax-violation$9835$DDDPb
                                               '#f
                                               '"invalid syntax"
                                               g$t$13073$DDDPb))))
                                        (g$syntax-dispatch$9717$DDDPb
                                          g$t$13073$DDDPb
                                          '_))))
                                    g$t$13067$DDDPb))))
                              (g$syntax-dispatch$9717$DDDPb
                                g$t$13067$DDDPb
                                '(any . any)))))
                          g$t$13063$DDDPb))))
                    (g$syntax-dispatch$9717$DDDPb
                      g$t$13063$DDDPb
                      'any))))
                g$form$13059$DDDPb)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$13057$DDDPb))))))))
   (g$syntax-violation$9835$DDDPb
     g$syntax-violation$13370$DDDPb
     (case-lambda
       ((g$who$13075$DDDPb g$msg$13076$DDDPb g$form$13077$DDDPb)
        (g$syntax-violation$9835$DDDPb
          g$who$13075$DDDPb
          g$msg$13076$DDDPb
          g$form$13077$DDDPb
          '#f))
       ((g$who$13078$DDDPb
          g$msg$13079$DDDPb
          g$form$13080$DDDPb
          g$subform$13081$DDDPb)
        (g$syntax-violation*$9834$DDDPb
          g$who$13078$DDDPb
          g$msg$13079$DDDPb
          g$form$13080$DDDPb
          (g$make-syntax-violation$7167$DDDPb
            (g$syntax->datum$9838$DDDPb g$form$13080$DDDPb)
            (g$syntax->datum$9838$DDDPb g$subform$13081$DDDPb))))))
   (g$identifier?$9836$DDDPb
     g$identifier?$13371$DDDPb
     (case-lambda
       ((g$x$13082$DDDPb) (g$id?$9354$DDDPb g$x$13082$DDDPb))))
   (g$datum->syntax$9837$DDDPb
     g$datum->syntax$13372$DDDPb
     (case-lambda
       ((g$id$13083$DDDPb g$datum$13084$DDDPb)
        (if (g$id?$9354$DDDPb g$id$13083$DDDPb)
          (g$datum->stx$9337$DDDPb g$id$13083$DDDPb g$datum$13084$DDDPb)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$13083$DDDPb)))))
   (g$syntax->datum$9838$DDDPb
     g$syntax->datum$13373$DDDPb
     (case-lambda
       ((g$x$13085$DDDPb) (g$stx->datum$9365$DDDPb g$x$13085$DDDPb))))
   (g$compile-r6rs-top-level$9839$DDDPb
     g$compile-r6rs-top-level$13374$DDDPb
     (case-lambda
       ((g$x*$13086$DDDPb)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$9779$DDDPb g$x*$13086$DDDPb)))
          (case-lambda
            ((g$lib*$13089$DDDPb g$invoke-code$13090$DDDPb)
             ((case-lambda
                ((g$invoke-code$13091$DDDPb g$lib*$13092$DDDPb)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$5754$DDDPb
                        g$invoke-library$9093$DDDPb
                        g$lib*$13092$DDDPb)
                      (eval-core
                        (g$expanded->core$8826$DDDPb
                          g$invoke-code$13091$DDDPb)))))))
              g$invoke-code$13090$DDDPb
              g$lib*$13089$DDDPb)))))))
   (g$pre-compile-r6rs-top-level$9840$DDDPb
     g$pre-compile-r6rs-top-level$13375$DDDPb
     (case-lambda
       ((g$x*$13093$DDDPb)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$9779$DDDPb g$x*$13093$DDDPb)))
          (case-lambda
            ((g$lib*$13096$DDDPb g$invoke-code$13097$DDDPb)
             ((case-lambda
                ((g$invoke-code$13098$DDDPb g$lib*$13099$DDDPb)
                 (begin
                   (g$for-each$5754$DDDPb
                     g$invoke-library$9093$DDDPb
                     g$lib*$13099$DDDPb)
                   (compile-core
                     (g$expanded->core$8826$DDDPb
                       g$invoke-code$13098$DDDPb)))))
              g$invoke-code$13097$DDDPb
              g$lib*$13096$DDDPb)))))))
   (g$new-interaction-environment$9841$DDDPb
     g$new-interaction-environment$13376$DDDPb
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$13100$DDDPb g$rib$13101$DDDPb)
            (begin
              ((case-lambda
                 ((g$subst$13102$DDDPb)
                  (begin
                    (g$set-rib-sym*!$9307$DDDPb
                      g$rib$13101$DDDPb
                      (g$map$5753$DDDPb car g$subst$13102$DDDPb))
                    (g$set-rib-mark**!$9308$DDDPb
                      g$rib$13101$DDDPb
                      (g$map$5753$DDDPb
                        (case-lambda
                          ((g$x$13103$DDDPb) g$top-mark*$9287$DDDPb))
                        g$subst$13102$DDDPb))
                    (g$set-rib-label*!$9309$DDDPb
                      g$rib$13101$DDDPb
                      (g$map$5753$DDDPb cdr g$subst$13102$DDDPb)))))
               (g$library-subst$9050$DDDPb g$lib$13100$DDDPb))
              (g$make-interaction-env$9800$DDDPb
                g$rib$13101$DDDPb
                '()
                '()))))
         (g$find-library-by-name$9086$DDDPb '(ironscheme))
         (g$make-empty-rib$9312$DDDPb)))))
   (g$interaction-environment$9842$DDDPb
     g$interaction-environment$13377$DDDPb
     ((case-lambda
        ((g$e$13104$DDDPb)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$13105$DDDPb)
                (if g$t$13105$DDDPb
                  g$t$13105$DDDPb
                  (begin
                    '#f
                    (begin
                      (set! g$e$13104$DDDPb
                        (g$new-interaction-environment$9841$DDDPb))
                      g$e$13104$DDDPb)))))
             g$e$13104$DDDPb)))))
      '#f))
   (g$top-level-context$9843$DDDPb
     g$top-level-context$13378$DDDPb
     (g$make-parameter$8260$DDDPb '#f)))
  (g$current-library-expander$9083$DDDPb g$library-expander$9819$DDDPb))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$8823$DDDPb
      (case-lambda
        ((g$x$13454$DDDPb)
         ((case-lambda
            ((g$t$13455$DDDPb)
             (if g$t$13455$DDDPb (cdr g$t$13455$DDDPb) '#f)))
          (g$assq$5741$DDDPb
            g$x$13454$DDDPb
            '((ellipsis-map . g$ellipsis-map$13263$DDDPb)
              (&no-nans-rcd . g$&no-nans-rcd$7302$DDDPb)
              (&no-nans-rtd . g$&no-nans-rtd$7301$DDDPb)
              (&no-infinities-rcd . g$&no-infinities-rcd$7294$DDDPb)
              (&no-infinities-rtd . g$&no-infinities-rtd$7293$DDDPb)
              (&i/o-encoding-rcd . g$&i/o-encoding-rcd$7286$DDDPb)
              (&i/o-encoding-rtd . g$&i/o-encoding-rtd$7285$DDDPb)
              (&i/o-decoding-rcd . g$&i/o-decoding-rcd$7276$DDDPb)
              (&i/o-decoding-rtd . g$&i/o-decoding-rtd$7275$DDDPb)
              (&i/o-port-rcd . g$&i/o-port-rcd$7268$DDDPb)
              (&i/o-port-rtd . g$&i/o-port-rtd$7267$DDDPb)
              (&i/o-file-does-not-exist-rcd
                .
                g$&i/o-file-does-not-exist-rcd$7258$DDDPb)
              (&i/o-file-does-not-exist-rtd
                .
                g$&i/o-file-does-not-exist-rtd$7257$DDDPb)
              (&i/o-file-already-exists-rcd
                .
                g$&i/o-file-already-exists-rcd$7250$DDDPb)
              (&i/o-file-already-exists-rtd
                .
                g$&i/o-file-already-exists-rtd$7249$DDDPb)
              (&i/o-file-is-read-only-rcd
                .
                g$&i/o-file-is-read-only-rcd$7242$DDDPb)
              (&i/o-file-is-read-only-rtd
                .
                g$&i/o-file-is-read-only-rtd$7241$DDDPb)
              (&i/o-file-protection-rcd
                .
                g$&i/o-file-protection-rcd$7234$DDDPb)
              (&i/o-file-protection-rtd
                .
                g$&i/o-file-protection-rtd$7233$DDDPb)
              (&i/o-filename-rcd . g$&i/o-filename-rcd$7226$DDDPb)
              (&i/o-filename-rtd . g$&i/o-filename-rtd$7225$DDDPb)
              (&i/o-invalid-position-rcd
                .
                g$&i/o-invalid-position-rcd$7216$DDDPb)
              (&i/o-invalid-position-rtd
                .
                g$&i/o-invalid-position-rtd$7215$DDDPb)
              (&i/o-write-rcd . g$&i/o-write-rcd$7206$DDDPb)
              (&i/o-write-rtd . g$&i/o-write-rtd$7205$DDDPb)
              (&i/o-read-rcd . g$&i/o-read-rcd$7198$DDDPb)
              (&i/o-read-rtd . g$&i/o-read-rtd$7197$DDDPb)
              (&i/o-rcd . g$&i/o-rcd$7190$DDDPb)
              (&i/o-rtd . g$&i/o-rtd$7189$DDDPb)
              (&undefined-rcd . g$&undefined-rcd$7182$DDDPb)
              (&undefined-rtd . g$&undefined-rtd$7181$DDDPb)
              (&syntax-rcd . g$&syntax-rcd$7174$DDDPb)
              (&syntax-rtd . g$&syntax-rtd$7173$DDDPb)
              (&lexical-rcd . g$&lexical-rcd$7162$DDDPb)
              (&lexical-rtd . g$&lexical-rtd$7161$DDDPb)
              (&implementation-restriction-rcd
                .
                g$&implementation-restriction-rcd$7154$DDDPb)
              (&implementation-restriction-rtd
                .
                g$&implementation-restriction-rtd$7153$DDDPb)
              (&non-continuable-rcd . g$&non-continuable-rcd$7146$DDDPb)
              (&non-continuable-rtd . g$&non-continuable-rtd$7145$DDDPb)
              (&who-rcd . g$&who-rcd$7138$DDDPb)
              (&who-rtd . g$&who-rtd$7137$DDDPb)
              (&irritants-rcd . g$&irritants-rcd$7128$DDDPb)
              (&irritants-rtd . g$&irritants-rtd$7127$DDDPb)
              (&assertion-rcd . g$&assertion-rcd$7118$DDDPb)
              (&assertion-rtd . g$&assertion-rtd$7117$DDDPb)
              (&violation-rcd . g$&violation-rcd$7110$DDDPb)
              (&violation-rtd . g$&violation-rtd$7109$DDDPb)
              (&error-rcd . g$&error-rcd$7102$DDDPb)
              (&error-rtd . g$&error-rtd$7101$DDDPb)
              (&serious-rcd . g$&serious-rcd$7094$DDDPb)
              (&serious-rtd . g$&serious-rtd$7093$DDDPb)
              (&warning-rcd . g$&warning-rcd$7086$DDDPb)
              (&warning-rtd . g$&warning-rtd$7085$DDDPb)
              (&message-rcd . g$&message-rcd$7078$DDDPb)
              (&message-rtd . g$&message-rtd$7077$DDDPb)
              (&condition-rcd . g$&condition-rcd$7068$DDDPb)
              (&condition-rtd . g$&condition-rtd$7067$DDDPb)
              (make-list . g$make-list$5736$DDDPb)
              (last-pair . g$last-pair$5735$DDDPb)
              (ironscheme-build . g$ironscheme-build$13446$DDDPb)
              (syntax-error . g$syntax-error$13367$DDDPb)
              (syntax-dispatch . g$syntax-dispatch$13258$DDDPb)
              (compile-system-libraries
                .
                g$compile-system-libraries$13449$DDDPb)
              (compile->closure . g$compile->closure$13451$DDDPb)
              (compile . g$compile$13450$DDDPb)
              (load . g$load$13445$DDDPb)
              (interaction-environment
                .
                g$interaction-environment$13377$DDDPb)
              (string-normalize-nfkd
                .
                g$string-normalize-nfkd$7518$DDDPb)
              (string-normalize-nfkc
                .
                g$string-normalize-nfkc$7517$DDDPb)
              (string-normalize-nfd . g$string-normalize-nfd$7516$DDDPb)
              (string-normalize-nfc . g$string-normalize-nfc$7515$DDDPb)
              (string-ci>? . g$string-ci>?$7507$DDDPb)
              (string-ci>=? . g$string-ci>=?$7509$DDDPb)
              (string-ci=? . g$string-ci=?$7505$DDDPb)
              (string-ci<? . g$string-ci<?$7506$DDDPb)
              (string-ci<=? . g$string-ci<=?$7508$DDDPb)
              (char-ci>? . g$char-ci>?$7512$DDDPb)
              (char-ci>=? . g$char-ci>=?$7514$DDDPb)
              (char-ci=? . g$char-ci=?$7510$DDDPb)
              (char-ci<? . g$char-ci<?$7511$DDDPb)
              (char-ci<=? . g$char-ci<=?$7513$DDDPb)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$13196$DDDPb)
              (variable-transformer?
                .
                g$variable-transformer?$13195$DDDPb)
              (make-variable-transformer
                .
                g$make-variable-transformer$13193$DDDPb)
              (identifier? . g$identifier?$13371$DDDPb)
              (generate-temporaries
                .
                g$generate-temporaries$13360$DDDPb)
              (free-identifier=? . g$free-identifier=?$13361$DDDPb)
              (syntax->datum . g$syntax->datum$13373$DDDPb)
              (datum->syntax . g$datum->syntax$13372$DDDPb)
              (bound-identifier=? . g$bound-identifier=?$13362$DDDPb)
              (delete-file . g$delete-file$6542$DDDPb)
              (file-exists? . g$file-exists?$6541$DDDPb)
              (list-sort . g$list-sort$7366$DDDPb)
              (make-eqv-hashtable . g$make-eqv-hashtable$6524$DDDPb)
              (make-eq-hashtable . g$make-eq-hashtable$6523$DDDPb)
              (hashtable-update! . g$hashtable-update!$6530$DDDPb)
              (hashtable-size . g$hashtable-size$6525$DDDPb)
              (hashtable-set! . g$hashtable-set!$6527$DDDPb)
              (hashtable-ref . g$hashtable-ref$6526$DDDPb)
              (hashtable-delete! . g$hashtable-delete!$6528$DDDPb)
              (hashtable-contains? . g$hashtable-contains?$6529$DDDPb)
              (hashtable-clear! . g$hashtable-clear!$6531$DDDPb)
              (call-with-output-file
                .
                g$call-with-output-file$7920$DDDPb)
              (call-with-input-file . g$call-with-input-file$7919$DDDPb)
              (write-char . g$write-char$7916$DDDPb)
              (with-output-to-file . g$with-output-to-file$7918$DDDPb)
              (with-input-from-file . g$with-input-from-file$7917$DDDPb)
              (read-char . g$read-char$7915$DDDPb)
              (peek-char . g$peek-char$7914$DDDPb)
              (newline . g$newline$7921$DDDPb)
              (put-datum . g$put-datum$7854$DDDPb)
              (port? . g$port?$7859$DDDPb)
              (open-string-output-port
                .
                g$open-string-output-port$7858$DDDPb)
              (make-i/o-write-error . g$make-i/o-write-error$7203$DDDPb)
              (make-i/o-read-error . g$make-i/o-read-error$7195$DDDPb)
              (make-i/o-port-error . g$make-i/o-port-error$7263$DDDPb)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$7211$DDDPb)
              (make-i/o-filename-error
                .
                g$make-i/o-filename-error$7221$DDDPb)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$7231$DDDPb)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$7239$DDDPb)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$7255$DDDPb)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$7247$DDDPb)
              (make-i/o-error . g$make-i/o-error$7187$DDDPb)
              (make-i/o-encoding-error
                .
                g$make-i/o-encoding-error$7281$DDDPb)
              (make-i/o-decoding-error
                .
                g$make-i/o-decoding-error$7273$DDDPb)
              (i/o-write-error? . g$i/o-write-error?$7204$DDDPb)
              (i/o-read-error? . g$i/o-read-error?$7196$DDDPb)
              (i/o-port-error? . g$i/o-port-error?$7265$DDDPb)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$7213$DDDPb)
              (i/o-error-position . g$i/o-error-position$7214$DDDPb)
              (i/o-filename-error? . g$i/o-filename-error?$7223$DDDPb)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$7232$DDDPb)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$7240$DDDPb)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$7256$DDDPb)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$7248$DDDPb)
              (i/o-error? . g$i/o-error?$7188$DDDPb)
              (i/o-error-port . g$i/o-error-port$7266$DDDPb)
              (i/o-error-filename . g$i/o-error-filename$7224$DDDPb)
              (i/o-encoding-error? . g$i/o-encoding-error?$7283$DDDPb)
              (i/o-encoding-error-char
                .
                g$i/o-encoding-error-char$7284$DDDPb)
              (i/o-decoding-error? . g$i/o-decoding-error?$7274$DDDPb)
              (get-datum . g$get-datum$7855$DDDPb)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$7860$DDDPb)
              (call-with-port . g$call-with-port$7861$DDDPb)
              (scheme-report-environment
                .
                g$scheme-report-environment$13350$DDDPb)
              (quotient . g$quotient$7333$DDDPb)
              (null-environment . g$null-environment$13349$DDDPb)
              (remainder . g$remainder$7334$DDDPb)
              (modulo . g$modulo$7335$DDDPb)
              (inexact->exact . g$inexact->exact$7330$DDDPb)
              (force . g$force$7337$DDDPb)
              (exact->inexact . g$exact->inexact$7331$DDDPb)
              (command-line . g$command-line$13441$DDDPb)
              (remove . g$remove$5758$DDDPb)
              (remv . g$remv$5759$DDDPb)
              (remp . g$remp$5739$DDDPb)
              (remq . g$remq$5760$DDDPb)
              (partition . g$partition$5738$DDDPb)
              (memv . g$memv$5746$DDDPb)
              (memq . g$memq$5745$DDDPb)
              (memp . g$memp$5748$DDDPb)
              (member . g$member$5747$DDDPb)
              (exists . g$exists$5752$DDDPb)
              (for-all . g$for-all$5751$DDDPb)
              (fold-right . g$fold-right$5757$DDDPb)
              (fold-left . g$fold-left$5756$DDDPb)
              (find . g$find$5737$DDDPb)
              (filter . g$filter$5740$DDDPb)
              (cons* . g$cons*$5755$DDDPb)
              (assv . g$assv$5742$DDDPb)
              (assq . g$assq$5741$DDDPb)
              (assp . g$assp$5744$DDDPb)
              (assoc . g$assoc$5743$DDDPb)
              (eval . g$eval$13352$DDDPb)
              (environment . g$environment$13348$DDDPb)
              (make-enumeration . g$make-enumeration$8057$DDDPb)
              (enum-set=? . g$enum-set=?$8064$DDDPb)
              (enum-set-universe . g$enum-set-universe$8058$DDDPb)
              (enum-set-union . g$enum-set-union$8065$DDDPb)
              (enum-set-subset? . g$enum-set-subset?$8063$DDDPb)
              (enum-set-projection . g$enum-set-projection$8069$DDDPb)
              (enum-set-member? . g$enum-set-member?$8062$DDDPb)
              (enum-set-intersection
                .
                g$enum-set-intersection$8066$DDDPb)
              (enum-set-indexer . g$enum-set-indexer$8059$DDDPb)
              (enum-set-difference . g$enum-set-difference$8067$DDDPb)
              (enum-set-constructor . g$enum-set-constructor$8060$DDDPb)
              (enum-set-complement . g$enum-set-complement$8068$DDDPb)
              (enum-set->list . g$enum-set->list$8061$DDDPb)
              (who-condition? . g$who-condition?$7135$DDDPb)
              (warning? . g$warning?$7084$DDDPb)
              (violation? . g$violation?$7108$DDDPb)
              (undefined-violation? . g$undefined-violation?$7180$DDDPb)
              (syntax-violation? . g$syntax-violation?$7170$DDDPb)
              (syntax-violation-subform
                .
                g$syntax-violation-subform$7172$DDDPb)
              (syntax-violation-form
                .
                g$syntax-violation-form$7171$DDDPb)
              (syntax-violation . g$syntax-violation$13370$DDDPb)
              (serious-condition? . g$serious-condition?$7092$DDDPb)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$7144$DDDPb)
              (message-condition? . g$message-condition?$7075$DDDPb)
              (make-who-condition . g$make-who-condition$7133$DDDPb)
              (make-warning . g$make-warning$7083$DDDPb)
              (make-violation . g$make-violation$7107$DDDPb)
              (make-undefined-violation
                .
                g$make-undefined-violation$7179$DDDPb)
              (make-syntax-violation
                .
                g$make-syntax-violation$7167$DDDPb)
              (make-serious-condition
                .
                g$make-serious-condition$7091$DDDPb)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$7143$DDDPb)
              (make-message-condition
                .
                g$make-message-condition$7073$DDDPb)
              (make-lexical-violation
                .
                g$make-lexical-violation$7159$DDDPb)
              (make-irritants-condition
                .
                g$make-irritants-condition$7123$DDDPb)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$7151$DDDPb)
              (make-error . g$make-error$7099$DDDPb)
              (make-assertion-violation
                .
                g$make-assertion-violation$7115$DDDPb)
              (lexical-violation? . g$lexical-violation?$7160$DDDPb)
              (irritants-condition? . g$irritants-condition?$7125$DDDPb)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$7152$DDDPb)
              (error? . g$error?$7100$DDDPb)
              (condition-who . g$condition-who$7136$DDDPb)
              (condition-message . g$condition-message$7076$DDDPb)
              (condition-irritants . g$condition-irritants$7126$DDDPb)
              (assertion-violation? . g$assertion-violation?$7116$DDDPb)
              (native-endianness . g$native-endianness$6655$DDDPb)
              (bytevector? . g$bytevector?$6423$DDDPb)
              (bytevector-u64-set! . g$bytevector-u64-set!$6676$DDDPb)
              (bytevector-u64-ref . g$bytevector-u64-ref$6672$DDDPb)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$6678$DDDPb)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$6674$DDDPb)
              (bytevector-u32-set! . g$bytevector-u32-set!$6668$DDDPb)
              (bytevector-u32-ref . g$bytevector-u32-ref$6664$DDDPb)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$6670$DDDPb)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$6666$DDDPb)
              (bytevector-u16-set! . g$bytevector-u16-set!$6660$DDDPb)
              (bytevector-u16-ref . g$bytevector-u16-ref$6656$DDDPb)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$6662$DDDPb)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$6658$DDDPb)
              (bytevector-s64-set! . g$bytevector-s64-set!$6677$DDDPb)
              (bytevector-s64-ref . g$bytevector-s64-ref$6673$DDDPb)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$6679$DDDPb)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$6675$DDDPb)
              (bytevector-s32-set! . g$bytevector-s32-set!$6669$DDDPb)
              (bytevector-s32-ref . g$bytevector-s32-ref$6665$DDDPb)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$6671$DDDPb)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$6667$DDDPb)
              (bytevector-s16-set! . g$bytevector-s16-set!$6661$DDDPb)
              (bytevector-s16-ref . g$bytevector-s16-ref$6657$DDDPb)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$6663$DDDPb)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$6659$DDDPb)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$6682$DDDPb)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$6680$DDDPb)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$6683$DDDPb)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$6681$DDDPb)
              (no-nans-violation? . g$no-nans-violation?$7300$DDDPb)
              (no-infinities-violation?
                .
                g$no-infinities-violation?$7292$DDDPb)
              (make-no-nans-violation
                .
                g$make-no-nans-violation$7299$DDDPb)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$7291$DDDPb)
              (flzero? . g$flzero?$7827$DDDPb)
              (fltruncate . g$fltruncate$7822$DDDPb)
              (fltan . g$fltan$7812$DDDPb)
              (flsqrt . g$flsqrt$7817$DDDPb)
              (flsin . g$flsin$7810$DDDPb)
              (flround . g$flround$7823$DDDPb)
              (flpositive? . g$flpositive?$7825$DDDPb)
              (flonum? . g$flonum?$6428$DDDPb)
              (flodd? . g$flodd?$7829$DDDPb)
              (flnegative? . g$flnegative?$7826$DDDPb)
              (flnan? . g$flnan?$7809$DDDPb)
              (flmod0 . g$flmod0$7805$DDDPb)
              (flmod . g$flmod$7804$DDDPb)
              (flmin . g$flmin$7831$DDDPb)
              (flmax . g$flmax$7830$DDDPb)
              (fllog . g$fllog$7816$DDDPb)
              (flinteger? . g$flinteger?$7806$DDDPb)
              (flinfinite? . g$flinfinite?$7808$DDDPb)
              (flfloor . g$flfloor$7821$DDDPb)
              (flfinite? . g$flfinite?$7807$DDDPb)
              (flexpt . g$flexpt$7819$DDDPb)
              (flexp . g$flexp$7818$DDDPb)
              (fleven? . g$fleven?$7828$DDDPb)
              (fldiv0-and-mod0 . g$fldiv0-and-mod0$7801$DDDPb)
              (fldiv0 . g$fldiv0$7803$DDDPb)
              (fldiv-and-mod . g$fldiv-and-mod$7800$DDDPb)
              (fldiv . g$fldiv$7802$DDDPb)
              (flcos . g$flcos$7811$DDDPb)
              (flceiling . g$flceiling$7820$DDDPb)
              (flatan . g$flatan$7815$DDDPb)
              (flasin . g$flasin$7813$DDDPb)
              (flacos . g$flacos$7814$DDDPb)
              (flabs . g$flabs$7824$DDDPb)
              (fxzero? . g$fxzero?$7668$DDDPb)
              (fxrotate-bit-field . g$fxrotate-bit-field$7682$DDDPb)
              (fxpositive? . g$fxpositive?$7666$DDDPb)
              (fxodd? . g$fxodd?$7670$DDDPb)
              (fxnegative? . g$fxnegative?$7667$DDDPb)
              (fxmod0 . g$fxmod0$7665$DDDPb)
              (fxmod . g$fxmod$7664$DDDPb)
              (fxmin . g$fxmin$7672$DDDPb)
              (fxmax . g$fxmax$7671$DDDPb)
              (fxif . g$fxif$7676$DDDPb)
              (fxeven? . g$fxeven?$7669$DDDPb)
              (fxdiv0 . g$fxdiv0$7663$DDDPb)
              (fxdiv . g$fxdiv$7662$DDDPb)
              (fxcopy-bit-field . g$fxcopy-bit-field$7679$DDDPb)
              (fxcopy-bit . g$fxcopy-bit$7677$DDDPb)
              (fxbit-field . g$fxbit-field$7678$DDDPb)
              (fxarithmetic-shift-right
                .
                g$fxarithmetic-shift-right$7681$DDDPb)
              (fxarithmetic-shift-left
                .
                g$fxarithmetic-shift-left$7680$DDDPb)
              (fx-/carry . g$fx-/carry$7674$DDDPb)
              (fx+/carry . g$fx+/carry$7675$DDDPb)
              (fx*/carry . g$fx*/carry$7673$DDDPb)
              (fixnum-width . g$fixnum-width$6429$DDDPb)
              (fixnum? . g$fixnum?$6427$DDDPb)
              (bitwise-rotate-bit-field
                .
                g$bitwise-rotate-bit-field$7556$DDDPb)
              (bitwise-if . g$bitwise-if$7550$DDDPb)
              (bitwise-copy-bit-field
                .
                g$bitwise-copy-bit-field$7553$DDDPb)
              (bitwise-copy-bit . g$bitwise-copy-bit$7551$DDDPb)
              (bitwise-bit-field . g$bitwise-bit-field$7552$DDDPb)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$7555$DDDPb)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$7554$DDDPb)
              (zero? . g$zero?$6462$DDDPb)
              (vector? . g$vector?$6422$DDDPb)
              (vector-map . g$vector-map$6484$DDDPb)
              (vector-for-each . g$vector-for-each$6485$DDDPb)
              (vector-fill! . g$vector-fill!$6430$DDDPb)
              (symbol? . g$symbol?$6424$DDDPb)
              (symbol=? . g$symbol=?$6474$DDDPb)
              (string>? . g$string>?$6471$DDDPb)
              (string>=? . g$string>=?$6473$DDDPb)
              (string=? . g$string=?$6469$DDDPb)
              (string<? . g$string<?$6470$DDDPb)
              (string<=? . g$string<=?$6472$DDDPb)
              (string-for-each . g$string-for-each$6486$DDDPb)
              (reverse . g$reverse$6431$DDDPb)
              (rationalize . g$rationalize$6481$DDDPb)
              (procedure? . g$procedure?$6426$DDDPb)
              (positive? . g$positive?$6460$DDDPb)
              (odd? . g$odd?$6464$DDDPb)
              (negative? . g$negative?$6461$DDDPb)
              (min . g$min$6466$DDDPb)
              (max . g$max$6465$DDDPb)
              (map . g$map$5753$DDDPb)
              (list-tail . g$list-tail$5733$DDDPb)
              (list-ref . g$list-ref$5734$DDDPb)
              (list->vector . g$list->vector$6419$DDDPb)
              (list->string . g$list->string$6420$DDDPb)
              (lcm . g$lcm$6468$DDDPb)
              (gcd . g$gcd$6467$DDDPb)
              (for-each . g$for-each$5754$DDDPb)
              (even? . g$even?$6463$DDDPb)
              (mod0 . g$mod0$6418$DDDPb)
              (div0 . g$div0$6416$DDDPb)
              (mod . g$mod$6417$DDDPb)
              (div . g$div$6415$DDDPb)
              (char? . g$char?$6421$DDDPb)
              (char>? . g$char>?$6478$DDDPb)
              (char>=? . g$char>=?$6480$DDDPb)
              (char=? . g$char=?$6476$DDDPb)
              (char<? . g$char<?$6477$DDDPb)
              (char<=? . g$char<=?$6479$DDDPb)
              (cddddr . g$cddddr$6459$DDDPb)
              (cdddar . g$cdddar$6458$DDDPb)
              (cddadr . g$cddadr$6457$DDDPb)
              (cddaar . g$cddaar$6456$DDDPb)
              (cdaddr . g$cdaddr$6455$DDDPb)
              (cdadar . g$cdadar$6454$DDDPb)
              (cdaadr . g$cdaadr$6453$DDDPb)
              (cdaaar . g$cdaaar$6452$DDDPb)
              (cadddr . g$cadddr$6451$DDDPb)
              (caddar . g$caddar$6450$DDDPb)
              (cadadr . g$cadadr$6449$DDDPb)
              (cadaar . g$cadaar$6448$DDDPb)
              (caaddr . g$caaddr$6447$DDDPb)
              (caadar . g$caadar$6446$DDDPb)
              (caaadr . g$caaadr$6445$DDDPb)
              (caaaar . g$caaaar$6444$DDDPb)
              (cdddr . g$cdddr$6443$DDDPb)
              (cddar . g$cddar$6442$DDDPb)
              (cdadr . g$cdadr$6441$DDDPb)
              (cdaar . g$cdaar$6440$DDDPb)
              (caddr . g$caddr$6439$DDDPb)
              (cadar . g$cadar$6438$DDDPb)
              (caadr . g$caadr$6437$DDDPb)
              (caaar . g$caaar$6436$DDDPb)
              (cddr . g$cddr$6435$DDDPb)
              (cdar . g$cdar$6434$DDDPb)
              (cadr . g$cadr$6433$DDDPb)
              (caar . g$caar$6432$DDDPb)
              (boolean? . g$boolean?$6425$DDDPb)
              (boolean=? . g$boolean=?$6475$DDDPb)
              (enum-set? . g$enum?$8038$DDDPb)
              (make-promise . g$make-promise$7336$DDDPb)
              (load/unload . g$load/unload$13444$DDDPb)
              (load/args . g$load/args$13443$DDDPb)
              (printf . g$printf$8093$DDDPb)
              (fprintf . g$fprintf$8094$DDDPb)
              (format . g$format$8095$DDDPb)
              (trace-printer . g$trace-printer$13440$DDDPb)
              (make-traced-macro . g$make-traced-macro$8099$DDDPb)
              (assertion-error . g$assertion-error$13366$DDDPb)
              (make-parameter . g$make-parameter$8260$DDDPb)
              (environment-bindings
                .
                g$environment-bindings$13344$DDDPb)
              (environment-symbols . g$environment-symbols$13347$DDDPb)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$13343$DDDPb)
              (library-path . g$library-path$9075$DDDPb)
              (make-compile-time-value
                .
                g$make-compile-time-value$13194$DDDPb)
              (expand->core . g$expand->core$13353$DDDPb)
              (expand . g$expand$13351$DDDPb)
              (convert->cps . g$convert->cps$8777$DDDPb)
              (installed-libraries . g$installed-libraries$9096$DDDPb)
              (uninstall-library . g$uninstall-library$9087$DDDPb)
              (pretty-width . g$pretty-width$8457$DDDPb)
              (pretty-print . g$pretty-print$8459$DDDPb)))))))
    (g$install-library$9091$DDDPb
      'g$11596$DDDPb
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$11589$DDDPb)
        (cosh . g$11588$DDDPb)
        (sinh . g$11587$DDDPb)
        (make-guid . g$11586$DDDPb)
        (unspecified? . g$11585$DDDPb)
        (make-list . g$5042$DDDPb)
        (last-pair . g$5041$DDDPb)
        (load-r5rs . g$11584$DDDPb)
        (license . g$11583$DDDPb)
        (stacktrace . g$11582$DDDPb)
        (ironscheme-build . g$11078$DDDPb)
        (remove-location . g$11569$DDDPb)
        (set-symbol-value! . g$11568$DDDPb)
        (symbol-value . g$11567$DDDPb)
        (symbol-bound? . g$11566$DDDPb)
        (ungensym . g$11565$DDDPb)
        (gensym . g$11564$DDDPb)
        (void . g$11563$DDDPb)
        (compile-system-libraries . g$11081$DDDPb)
        (compile->closure . g$11083$DDDPb)
        (compile . g$11082$DDDPb)
        (load . g$11077$DDDPb)
        (interaction-environment . g$8099$DDDPb)
        (string-upcase . g$11558$DDDPb)
        (string-titlecase . g$11557$DDDPb)
        (string-normalize-nfkd . g$6276$DDDPb)
        (string-normalize-nfkc . g$6275$DDDPb)
        (string-normalize-nfd . g$6274$DDDPb)
        (string-normalize-nfc . g$6273$DDDPb)
        (string-foldcase . g$11556$DDDPb)
        (string-downcase . g$11555$DDDPb)
        (string-ci>? . g$6260$DDDPb)
        (string-ci>=? . g$6262$DDDPb)
        (string-ci=? . g$6258$DDDPb)
        (string-ci<? . g$6259$DDDPb)
        (string-ci<=? . g$6261$DDDPb)
        (char-whitespace? . g$11554$DDDPb)
        (char-upper-case? . g$11553$DDDPb)
        (char-title-case? . g$11552$DDDPb)
        (char-numeric? . g$11551$DDDPb)
        (char-lower-case? . g$11550$DDDPb)
        (char-general-category . g$11549$DDDPb)
        (char-upcase . g$11548$DDDPb)
        (char-titlecase . g$11547$DDDPb)
        (char-foldcase . g$11546$DDDPb)
        (char-downcase . g$11545$DDDPb)
        (char-ci>? . g$6270$DDDPb)
        (char-ci>=? . g$6272$DDDPb)
        (char-ci=? . g$6268$DDDPb)
        (char-ci<? . g$6269$DDDPb)
        (char-ci<=? . g$6271$DDDPb)
        (char-alphabetic? . g$11544$DDDPb)
        (make-variable-transformer . g$7774$DDDPb)
        (identifier? . g$8093$DDDPb)
        (generate-temporaries . g$8082$DDDPb)
        (free-identifier=? . g$8083$DDDPb)
        (syntax->datum . g$8095$DDDPb)
        (datum->syntax . g$8094$DDDPb)
        (bound-identifier=? . g$8084$DDDPb)
        (record-type-descriptor? . g$11543$DDDPb)
        (record-predicate . g$11542$DDDPb)
        (record-mutator . g$11541$DDDPb)
        (record-constructor . g$11540$DDDPb)
        (record-accessor . g$11539$DDDPb)
        (make-record-type-descriptor . g$11538$DDDPb)
        (make-record-constructor-descriptor . g$11537$DDDPb)
        (record? . g$11536$DDDPb)
        (record-type-uid . g$11535$DDDPb)
        (record-type-sealed? . g$11534$DDDPb)
        (record-type-parent . g$11533$DDDPb)
        (record-type-opaque? . g$11532$DDDPb)
        (record-type-name . g$11531$DDDPb)
        (record-type-generative? . g$11530$DDDPb)
        (record-type-field-names . g$11529$DDDPb)
        (record-rtd . g$11528$DDDPb)
        (record-field-mutable? . g$11527$DDDPb)
        (delete-file . g$5667$DDDPb)
        (file-exists? . g$5666$DDDPb)
        (vector-sort! . g$11526$DDDPb)
        (vector-sort . g$11525$DDDPb)
        (list-sort . g$6229$DDDPb)
        (symbol-hash . g$11524$DDDPb)
        (string-ci-hash . g$11523$DDDPb)
        (string-hash . g$11522$DDDPb)
        (equal-hash . g$11521$DDDPb)
        (hashtable-equivalence-function . g$11520$DDDPb)
        (make-hashtable . g$11519$DDDPb)
        (hashtable-hash-function . g$11518$DDDPb)
        (make-eqv-hashtable . g$5635$DDDPb)
        (make-eq-hashtable . g$5634$DDDPb)
        (hashtable? . g$11517$DDDPb)
        (hashtable-update! . g$5641$DDDPb)
        (hashtable-size . g$5636$DDDPb)
        (hashtable-set! . g$5638$DDDPb)
        (hashtable-ref . g$5637$DDDPb)
        (hashtable-mutable? . g$11516$DDDPb)
        (hashtable-keys . g$11515$DDDPb)
        (hashtable-entries . g$11514$DDDPb)
        (hashtable-delete! . g$5639$DDDPb)
        (hashtable-copy . g$11513$DDDPb)
        (hashtable-contains? . g$5640$DDDPb)
        (hashtable-clear! . g$5642$DDDPb)
        (call-with-output-file . g$6602$DDDPb)
        (call-with-input-file . g$6601$DDDPb)
        (write-char . g$6593$DDDPb)
        (write . g$11512$DDDPb)
        (with-output-to-file . g$6600$DDDPb)
        (with-input-from-file . g$6599$DDDPb)
        (read-char . g$6592$DDDPb)
        (read . g$11511$DDDPb)
        (peek-char . g$6591$DDDPb)
        (open-output-file . g$11510$DDDPb)
        (open-input-file . g$11509$DDDPb)
        (newline . g$6603$DDDPb)
        (display . g$11508$DDDPb)
        (close-output-port . g$11507$DDDPb)
        (close-input-port . g$11506$DDDPb)
        (eof-object? . g$11505$DDDPb)
        (eof-object . g$11504$DDDPb)
        (current-error-port . g$11503$DDDPb)
        (current-output-port . g$11502$DDDPb)
        (current-input-port . g$11501$DDDPb)
        (output-port? . g$11500$DDDPb)
        (input-port? . g$11499$DDDPb)
        (utf-8-codec . g$11498$DDDPb)
        (utf-16-codec . g$11497$DDDPb)
        (transcoder-error-handling-mode . g$11496$DDDPb)
        (transcoder-eol-style . g$11495$DDDPb)
        (transcoder-codec . g$11494$DDDPb)
        (transcoded-port . g$11493$DDDPb)
        (textual-port? . g$11492$DDDPb)
        (string->bytevector . g$11491$DDDPb)
        (standard-output-port . g$11490$DDDPb)
        (standard-input-port . g$11489$DDDPb)
        (standard-error-port . g$11488$DDDPb)
        (set-port-position! . g$11487$DDDPb)
        (put-u8 . g$11486$DDDPb)
        (put-string . g$11485$DDDPb)
        (put-datum . g$6571$DDDPb)
        (put-char . g$11484$DDDPb)
        (put-bytevector . g$11483$DDDPb)
        (port? . g$6576$DDDPb)
        (port-transcoder . g$11482$DDDPb)
        (port-position . g$11481$DDDPb)
        (port-has-set-port-position!? . g$11480$DDDPb)
        (port-has-port-position? . g$11479$DDDPb)
        (port-eof? . g$11478$DDDPb)
        (output-port-buffer-mode . g$11477$DDDPb)
        (open-string-output-port . g$6575$DDDPb)
        (open-string-input-port . g$11476$DDDPb)
        (open-file-output-port . g$11475$DDDPb)
        (open-file-input/output-port . g$11474$DDDPb)
        (open-file-input-port . g$11473$DDDPb)
        (open-bytevector-output-port . g$11472$DDDPb)
        (open-bytevector-input-port . g$11471$DDDPb)
        (native-transcoder . g$11470$DDDPb)
        (native-eol-style . g$11469$DDDPb)
        (make-transcoder . g$11468$DDDPb)
        (latin-1-codec . g$11467$DDDPb)
        (make-i/o-write-error . g$6039$DDDPb)
        (make-i/o-read-error . g$6026$DDDPb)
        (make-i/o-port-error . g$6134$DDDPb)
        (make-i/o-invalid-position-error . g$6052$DDDPb)
        (make-i/o-filename-error . g$6067$DDDPb)
        (make-i/o-file-protection-error . g$6082$DDDPb)
        (make-i/o-file-is-read-only-error . g$6095$DDDPb)
        (make-i/o-file-does-not-exist-error . g$6121$DDDPb)
        (make-i/o-file-already-exists-error . g$6108$DDDPb)
        (make-i/o-error . g$6013$DDDPb)
        (make-i/o-encoding-error . g$6162$DDDPb)
        (make-i/o-decoding-error . g$6149$DDDPb)
        (make-custom-textual-output-port . g$11466$DDDPb)
        (make-custom-textual-input/output-port . g$11465$DDDPb)
        (make-custom-textual-input-port . g$11464$DDDPb)
        (make-custom-binary-output-port . g$11463$DDDPb)
        (make-custom-binary-input/output-port . g$11462$DDDPb)
        (make-custom-binary-input-port . g$11461$DDDPb)
        (make-bytevector . g$11460$DDDPb)
        (lookahead-u8 . g$11459$DDDPb)
        (lookahead-char . g$11458$DDDPb)
        (i/o-write-error? . g$6040$DDDPb)
        (i/o-read-error? . g$6027$DDDPb)
        (i/o-port-error? . g$6136$DDDPb)
        (i/o-invalid-position-error? . g$6054$DDDPb)
        (i/o-error-position . g$6055$DDDPb)
        (i/o-filename-error? . g$6069$DDDPb)
        (i/o-file-protection-error? . g$6083$DDDPb)
        (i/o-file-is-read-only-error? . g$6096$DDDPb)
        (i/o-file-does-not-exist-error? . g$6122$DDDPb)
        (i/o-file-already-exists-error? . g$6109$DDDPb)
        (i/o-error? . g$6014$DDDPb)
        (i/o-error-port . g$6137$DDDPb)
        (i/o-error-filename . g$6070$DDDPb)
        (i/o-encoding-error? . g$6164$DDDPb)
        (i/o-encoding-error-char . g$6165$DDDPb)
        (i/o-decoding-error? . g$6150$DDDPb)
        (get-u8 . g$11457$DDDPb)
        (get-string-n! . g$11456$DDDPb)
        (get-string-n . g$11455$DDDPb)
        (get-string-all . g$11454$DDDPb)
        (get-line . g$11453$DDDPb)
        (get-datum . g$6572$DDDPb)
        (get-char . g$11452$DDDPb)
        (get-bytevector-some . g$11451$DDDPb)
        (get-bytevector-n! . g$11450$DDDPb)
        (get-bytevector-n . g$11449$DDDPb)
        (get-bytevector-all . g$11448$DDDPb)
        (flush-output-port . g$11447$DDDPb)
        (close-port . g$11446$DDDPb)
        (call-with-string-output-port . g$6577$DDDPb)
        (call-with-port . g$6578$DDDPb)
        (call-with-bytevector-output-port . g$11445$DDDPb)
        (bytevector->string . g$11444$DDDPb)
        (buffer-mode? . g$11443$DDDPb)
        (binary-port? . g$11442$DDDPb)
        (scheme-report-environment . g$8072$DDDPb)
        (quotient . g$6208$DDDPb)
        (null-environment . g$8071$DDDPb)
        (remainder . g$6209$DDDPb)
        (modulo . g$6210$DDDPb)
        (inexact->exact . g$6205$DDDPb)
        (force . g$6212$DDDPb)
        (exact->inexact . g$6206$DDDPb)
        (exit . g$11441$DDDPb)
        (command-line . g$11073$DDDPb)
        (string-fill! . g$11440$DDDPb)
        (string-set! . g$11439$DDDPb)
        (set-cdr! . g$11438$DDDPb)
        (set-car! . g$11437$DDDPb)
        (remove . g$5064$DDDPb)
        (remv . g$5065$DDDPb)
        (remp . g$5045$DDDPb)
        (remq . g$5066$DDDPb)
        (partition . g$5044$DDDPb)
        (memv . g$5052$DDDPb)
        (memq . g$5051$DDDPb)
        (memp . g$5054$DDDPb)
        (member . g$5053$DDDPb)
        (exists . g$5058$DDDPb)
        (for-all . g$5057$DDDPb)
        (fold-right . g$5063$DDDPb)
        (fold-left . g$5062$DDDPb)
        (find . g$5043$DDDPb)
        (filter . g$5046$DDDPb)
        (cons* . g$5061$DDDPb)
        (assv . g$5048$DDDPb)
        (assq . g$5047$DDDPb)
        (assp . g$5050$DDDPb)
        (assoc . g$5049$DDDPb)
        (with-exception-handler . g$11436$DDDPb)
        (raise-continuable . g$11435$DDDPb)
        (raise . g$11434$DDDPb)
        (eval . g$8074$DDDPb)
        (environment . g$8070$DDDPb)
        (make-enumeration . g$6663$DDDPb)
        (enum-set=? . g$6670$DDDPb)
        (enum-set-universe . g$6664$DDDPb)
        (enum-set-union . g$6671$DDDPb)
        (enum-set-subset? . g$6669$DDDPb)
        (enum-set-projection . g$6675$DDDPb)
        (enum-set-member? . g$6668$DDDPb)
        (enum-set-intersection . g$6672$DDDPb)
        (enum-set-indexer . g$6665$DDDPb)
        (enum-set-difference . g$6673$DDDPb)
        (enum-set-constructor . g$6666$DDDPb)
        (enum-set-complement . g$6674$DDDPb)
        (enum-set->list . g$6667$DDDPb)
        (who-condition? . g$5931$DDDPb)
        (warning? . g$5850$DDDPb)
        (violation? . g$5889$DDDPb)
        (undefined-violation? . g$6001$DDDPb)
        (syntax-violation? . g$5986$DDDPb)
        (syntax-violation-subform . g$5988$DDDPb)
        (syntax-violation-form . g$5987$DDDPb)
        (syntax-violation . g$8092$DDDPb)
        (simple-conditions . g$11433$DDDPb)
        (serious-condition? . g$5863$DDDPb)
        (non-continuable-violation? . g$5945$DDDPb)
        (message-condition? . g$5836$DDDPb)
        (make-who-condition . g$5929$DDDPb)
        (make-warning . g$5849$DDDPb)
        (make-violation . g$5888$DDDPb)
        (make-undefined-violation . g$6000$DDDPb)
        (make-syntax-violation . g$5983$DDDPb)
        (make-serious-condition . g$5862$DDDPb)
        (make-non-continuable-violation . g$5944$DDDPb)
        (make-message-condition . g$5834$DDDPb)
        (make-lexical-violation . g$5970$DDDPb)
        (make-irritants-condition . g$5914$DDDPb)
        (make-implementation-restriction-violation . g$5957$DDDPb)
        (make-error . g$5875$DDDPb)
        (make-assertion-violation . g$5901$DDDPb)
        (lexical-violation? . g$5971$DDDPb)
        (irritants-condition? . g$5916$DDDPb)
        (implementation-restriction-violation? . g$5958$DDDPb)
        (error? . g$5876$DDDPb)
        (condition-who . g$5932$DDDPb)
        (condition-predicate . g$11432$DDDPb)
        (condition-message . g$5837$DDDPb)
        (condition-irritants . g$5917$DDDPb)
        (condition-accessor . g$11431$DDDPb)
        (condition . g$11430$DDDPb)
        (assertion-violation? . g$5902$DDDPb)
        (condition? . g$11429$DDDPb)
        (utf32->string . g$11428$DDDPb)
        (utf16->string . g$11427$DDDPb)
        (utf8->string . g$11426$DDDPb)
        (uint-list->bytevector . g$11425$DDDPb)
        (u8-list->bytevector . g$11424$DDDPb)
        (string->utf8 . g$11423$DDDPb)
        (string->utf32 . g$11422$DDDPb)
        (string->utf16 . g$11421$DDDPb)
        (sint-list->bytevector . g$11420$DDDPb)
        (native-endianness . g$5673$DDDPb)
        (bytevector? . g$5363$DDDPb)
        (bytevector=? . g$11419$DDDPb)
        (bytevector-uint-set! . g$11418$DDDPb)
        (bytevector-uint-ref . g$11417$DDDPb)
        (bytevector-u8-set! . g$11416$DDDPb)
        (bytevector-u8-ref . g$11415$DDDPb)
        (bytevector-u64-set! . g$5694$DDDPb)
        (bytevector-u64-ref . g$5690$DDDPb)
        (bytevector-u64-native-set! . g$5696$DDDPb)
        (bytevector-u64-native-ref . g$5692$DDDPb)
        (bytevector-u32-set! . g$5686$DDDPb)
        (bytevector-u32-ref . g$5682$DDDPb)
        (bytevector-u32-native-set! . g$5688$DDDPb)
        (bytevector-u32-native-ref . g$5684$DDDPb)
        (bytevector-u16-set! . g$5678$DDDPb)
        (bytevector-u16-ref . g$5674$DDDPb)
        (bytevector-u16-native-set! . g$5680$DDDPb)
        (bytevector-u16-native-ref . g$5676$DDDPb)
        (bytevector-sint-set! . g$11414$DDDPb)
        (bytevector-sint-ref . g$11413$DDDPb)
        (bytevector-s8-set! . g$11412$DDDPb)
        (bytevector-s8-ref . g$11411$DDDPb)
        (bytevector-s64-set! . g$5695$DDDPb)
        (bytevector-s64-ref . g$5691$DDDPb)
        (bytevector-s64-native-set! . g$5697$DDDPb)
        (bytevector-s64-native-ref . g$5693$DDDPb)
        (bytevector-s32-set! . g$5687$DDDPb)
        (bytevector-s32-ref . g$5683$DDDPb)
        (bytevector-s32-native-set! . g$5689$DDDPb)
        (bytevector-s32-native-ref . g$5685$DDDPb)
        (bytevector-s16-set! . g$5679$DDDPb)
        (bytevector-s16-ref . g$5675$DDDPb)
        (bytevector-s16-native-set! . g$5681$DDDPb)
        (bytevector-s16-native-ref . g$5677$DDDPb)
        (bytevector-length . g$11410$DDDPb)
        (bytevector-ieee-single-set! . g$11409$DDDPb)
        (bytevector-ieee-single-ref . g$11408$DDDPb)
        (bytevector-ieee-single-native-set! . g$5700$DDDPb)
        (bytevector-ieee-single-native-ref . g$5698$DDDPb)
        (bytevector-ieee-double-set! . g$11407$DDDPb)
        (bytevector-ieee-double-ref . g$11406$DDDPb)
        (bytevector-ieee-double-native-set! . g$5701$DDDPb)
        (bytevector-ieee-double-native-ref . g$5699$DDDPb)
        (bytevector-fill! . g$11405$DDDPb)
        (bytevector-copy! . g$11404$DDDPb)
        (bytevector-copy . g$11403$DDDPb)
        (bytevector->uint-list . g$11402$DDDPb)
        (bytevector->u8-list . g$11401$DDDPb)
        (bytevector->sint-list . g$11400$DDDPb)
        (no-nans-violation? . g$6191$DDDPb)
        (no-infinities-violation? . g$6178$DDDPb)
        (make-no-nans-violation . g$6190$DDDPb)
        (make-no-infinities-violation . g$6177$DDDPb)
        (real->flonum . g$11399$DDDPb)
        (flzero? . g$6491$DDDPb)
        (fltruncate . g$6486$DDDPb)
        (fltan . g$6476$DDDPb)
        (flsqrt . g$6481$DDDPb)
        (flsin . g$6474$DDDPb)
        (flround . g$6487$DDDPb)
        (flpositive? . g$6489$DDDPb)
        (flonum? . g$5368$DDDPb)
        (flodd? . g$6493$DDDPb)
        (flnumerator . g$11398$DDDPb)
        (flnegative? . g$6490$DDDPb)
        (flnan? . g$6473$DDDPb)
        (flmod0 . g$6469$DDDPb)
        (flmod . g$6468$DDDPb)
        (flmin . g$6495$DDDPb)
        (flmax . g$6494$DDDPb)
        (fllog . g$6480$DDDPb)
        (flinteger? . g$6470$DDDPb)
        (flinfinite? . g$6472$DDDPb)
        (flfloor . g$6485$DDDPb)
        (flfinite? . g$6471$DDDPb)
        (flexpt . g$6483$DDDPb)
        (flexp . g$6482$DDDPb)
        (fleven? . g$6492$DDDPb)
        (fldiv0-and-mod0 . g$6465$DDDPb)
        (fldiv0 . g$6467$DDDPb)
        (fldiv-and-mod . g$6464$DDDPb)
        (fldiv . g$6466$DDDPb)
        (fldenominator . g$11397$DDDPb)
        (flcos . g$6475$DDDPb)
        (flceiling . g$6484$DDDPb)
        (flatan . g$6479$DDDPb)
        (flasin . g$6477$DDDPb)
        (flacos . g$6478$DDDPb)
        (flabs . g$6488$DDDPb)
        (fl>? . g$11396$DDDPb)
        (fl>=? . g$11395$DDDPb)
        (fl=? . g$11394$DDDPb)
        (fl<? . g$11393$DDDPb)
        (fl<=? . g$11392$DDDPb)
        (fl/ . g$11391$DDDPb)
        (fl- . g$11390$DDDPb)
        (fl+ . g$11389$DDDPb)
        (fl* . g$11388$DDDPb)
        (fixnum->flonum . g$11387$DDDPb)
        (fxzero? . g$6372$DDDPb)
        (fxxor . g$11386$DDDPb)
        (fxrotate-bit-field . g$6386$DDDPb)
        (fxreverse-bit-field . g$11385$DDDPb)
        (fxpositive? . g$6370$DDDPb)
        (fxodd? . g$6374$DDDPb)
        (fxnot . g$11384$DDDPb)
        (fxnegative? . g$6371$DDDPb)
        (fxmod0 . g$6369$DDDPb)
        (fxmod . g$6368$DDDPb)
        (fxmin . g$6376$DDDPb)
        (fxmax . g$6375$DDDPb)
        (fxlength . g$11383$DDDPb)
        (fxior . g$11382$DDDPb)
        (fxif . g$6380$DDDPb)
        (fxfirst-bit-set . g$11381$DDDPb)
        (fxeven? . g$6373$DDDPb)
        (fxdiv0-and-mod0 . g$11380$DDDPb)
        (fxdiv0 . g$6367$DDDPb)
        (fxdiv-and-mod . g$11379$DDDPb)
        (fxdiv . g$6366$DDDPb)
        (fxcopy-bit-field . g$6383$DDDPb)
        (fxcopy-bit . g$6381$DDDPb)
        (fxbit-set? . g$11378$DDDPb)
        (fxbit-field . g$6382$DDDPb)
        (fxbit-count . g$11377$DDDPb)
        (fxarithmetic-shift-right . g$6385$DDDPb)
        (fxarithmetic-shift-left . g$6384$DDDPb)
        (fxarithmetic-shift . g$11376$DDDPb)
        (fxand . g$11375$DDDPb)
        (fx>? . g$11374$DDDPb)
        (fx>=? . g$11373$DDDPb)
        (fx=? . g$11372$DDDPb)
        (fx<? . g$11371$DDDPb)
        (fx<=? . g$11370$DDDPb)
        (fx-/carry . g$6378$DDDPb)
        (fx- . g$11369$DDDPb)
        (fx+/carry . g$6379$DDDPb)
        (fx+ . g$11368$DDDPb)
        (fx*/carry . g$6377$DDDPb)
        (fx* . g$11367$DDDPb)
        (greatest-fixnum . g$11366$DDDPb)
        (least-fixnum . g$11365$DDDPb)
        (fixnum-width . g$5369$DDDPb)
        (fixnum? . g$5367$DDDPb)
        (bitwise-rotate-bit-field . g$6340$DDDPb)
        (bitwise-reverse-bit-field . g$11364$DDDPb)
        (bitwise-length . g$11363$DDDPb)
        (bitwise-if . g$6334$DDDPb)
        (bitwise-first-bit-set . g$11362$DDDPb)
        (bitwise-copy-bit-field . g$6337$DDDPb)
        (bitwise-copy-bit . g$6335$DDDPb)
        (bitwise-bit-set? . g$11361$DDDPb)
        (bitwise-bit-field . g$6336$DDDPb)
        (bitwise-bit-count . g$11360$DDDPb)
        (bitwise-xor . g$11359$DDDPb)
        (bitwise-ior . g$11358$DDDPb)
        (bitwise-and . g$11357$DDDPb)
        (bitwise-not . g$11356$DDDPb)
        (bitwise-arithmetic-shift-right . g$6339$DDDPb)
        (bitwise-arithmetic-shift-left . g$6338$DDDPb)
        (bitwise-arithmetic-shift . g$11355$DDDPb)
        (zero? . g$5402$DDDPb)
        (vector? . g$5362$DDDPb)
        (vector-set! . g$11354$DDDPb)
        (vector-ref . g$11353$DDDPb)
        (vector-map . g$5434$DDDPb)
        (vector-length . g$11352$DDDPb)
        (vector-for-each . g$5435$DDDPb)
        (vector-fill! . g$5370$DDDPb)
        (vector->list . g$11351$DDDPb)
        (vector . g$11350$DDDPb)
        (values . g$11349$DDDPb)
        (truncate . g$11348$DDDPb)
        (tan . g$11347$DDDPb)
        (symbol? . g$5364$DDDPb)
        (symbol=? . g$5419$DDDPb)
        (symbol->string . g$11346$DDDPb)
        (substring . g$11345$DDDPb)
        (string? . g$11344$DDDPb)
        (string>? . g$5416$DDDPb)
        (string>=? . g$5418$DDDPb)
        (string=? . g$5414$DDDPb)
        (string<? . g$5415$DDDPb)
        (string<=? . g$5417$DDDPb)
        (string-ref . g$11343$DDDPb)
        (string-length . g$11342$DDDPb)
        (string-for-each . g$5436$DDDPb)
        (string-copy . g$11341$DDDPb)
        (string-append . g$11340$DDDPb)
        (string->symbol . g$11339$DDDPb)
        (string->number . g$11338$DDDPb)
        (string->list . g$11337$DDDPb)
        (string . g$11336$DDDPb)
        (sqrt . g$11335$DDDPb)
        (sin . g$11334$DDDPb)
        (round . g$11333$DDDPb)
        (reverse . g$5371$DDDPb)
        (real? . g$11332$DDDPb)
        (real-valued? . g$11331$DDDPb)
        (real-part . g$11330$DDDPb)
        (rationalize . g$5431$DDDPb)
        (rational? . g$11329$DDDPb)
        (rational-valued? . g$11328$DDDPb)
        (procedure? . g$5366$DDDPb)
        (positive? . g$5400$DDDPb)
        (pair? . g$11327$DDDPb)
        (odd? . g$5404$DDDPb)
        (numerator . g$11326$DDDPb)
        (number? . g$11325$DDDPb)
        (number->string . g$11324$DDDPb)
        (null? . g$11323$DDDPb)
        (not . g$11322$DDDPb)
        (negative? . g$5401$DDDPb)
        (nan? . g$11321$DDDPb)
        (min . g$5406$DDDPb)
        (max . g$5405$DDDPb)
        (map . g$5059$DDDPb)
        (make-vector . g$11320$DDDPb)
        (make-string . g$11319$DDDPb)
        (make-rectangular . g$11318$DDDPb)
        (make-polar . g$11317$DDDPb)
        (magnitude . g$11316$DDDPb)
        (log . g$11315$DDDPb)
        (list? . g$11314$DDDPb)
        (list-tail . g$5039$DDDPb)
        (list-ref . g$5040$DDDPb)
        (list->vector . g$5359$DDDPb)
        (list->string . g$5360$DDDPb)
        (list . g$11313$DDDPb)
        (length . g$11312$DDDPb)
        (lcm . g$5408$DDDPb)
        (integer? . g$11311$DDDPb)
        (integer-valued? . g$11310$DDDPb)
        (integer->char . g$11309$DDDPb)
        (infinite? . g$11308$DDDPb)
        (inexact? . g$11307$DDDPb)
        (inexact . g$11306$DDDPb)
        (imag-part . g$11305$DDDPb)
        (gcd . g$5407$DDDPb)
        (for-each . g$5060$DDDPb)
        (floor . g$11304$DDDPb)
        (finite? . g$11303$DDDPb)
        (expt . g$11302$DDDPb)
        (exp . g$11301$DDDPb)
        (exact? . g$11300$DDDPb)
        (exact-integer-sqrt . g$11299$DDDPb)
        (exact . g$11298$DDDPb)
        (even? . g$5403$DDDPb)
        (error . g$11297$DDDPb)
        (eqv? . g$11296$DDDPb)
        (equal? . g$11295$DDDPb)
        (eq? . g$11294$DDDPb)
        (dynamic-wind . g$11293$DDDPb)
        (div0-and-mod0 . g$11292$DDDPb)
        (mod0 . g$5358$DDDPb)
        (div0 . g$5356$DDDPb)
        (div-and-mod . g$11291$DDDPb)
        (mod . g$5357$DDDPb)
        (div . g$5355$DDDPb)
        (denominator . g$11290$DDDPb)
        (cos . g$11289$DDDPb)
        (cons . g$11288$DDDPb)
        (complex? . g$11287$DDDPb)
        (char? . g$5361$DDDPb)
        (char>? . g$5428$DDDPb)
        (char>=? . g$5430$DDDPb)
        (char=? . g$5426$DDDPb)
        (char<? . g$5427$DDDPb)
        (char<=? . g$5429$DDDPb)
        (char->integer . g$11286$DDDPb)
        (ceiling . g$11285$DDDPb)
        (call-with-values . g$11284$DDDPb)
        (call/cc . g$11283$DDDPb)
        (call-with-current-continuation . g$11282$DDDPb)
        (cddddr . g$5399$DDDPb)
        (cdddar . g$5398$DDDPb)
        (cddadr . g$5397$DDDPb)
        (cddaar . g$5396$DDDPb)
        (cdaddr . g$5395$DDDPb)
        (cdadar . g$5394$DDDPb)
        (cdaadr . g$5393$DDDPb)
        (cdaaar . g$5392$DDDPb)
        (cadddr . g$5391$DDDPb)
        (caddar . g$5390$DDDPb)
        (cadadr . g$5389$DDDPb)
        (cadaar . g$5388$DDDPb)
        (caaddr . g$5387$DDDPb)
        (caadar . g$5386$DDDPb)
        (caaadr . g$5385$DDDPb)
        (caaaar . g$5384$DDDPb)
        (cdddr . g$5383$DDDPb)
        (cddar . g$5382$DDDPb)
        (cdadr . g$5381$DDDPb)
        (cdaar . g$5380$DDDPb)
        (caddr . g$5379$DDDPb)
        (cadar . g$5378$DDDPb)
        (caadr . g$5377$DDDPb)
        (caaar . g$5376$DDDPb)
        (cddr . g$5375$DDDPb)
        (cdar . g$5374$DDDPb)
        (cadr . g$5373$DDDPb)
        (caar . g$5372$DDDPb)
        (cdr . g$11281$DDDPb)
        (car . g$11280$DDDPb)
        (boolean? . g$5365$DDDPb)
        (boolean=? . g$5420$DDDPb)
        (atan . g$11279$DDDPb)
        (assertion-violation . g$11278$DDDPb)
        (asin . g$11277$DDDPb)
        (apply . g$11276$DDDPb)
        (append . g$11275$DDDPb)
        (angle . g$11274$DDDPb)
        (acos . g$11273$DDDPb)
        (abs . g$11272$DDDPb)
        (/ . g$11271$DDDPb)
        (* . g$11270$DDDPb)
        (- . g$11269$DDDPb)
        (+ . g$11268$DDDPb)
        (>= . g$11267$DDDPb)
        (> . g$11266$DDDPb)
        (= . g$11265$DDDPb)
        (<= . g$11264$DDDPb)
        (< . g$11263$DDDPb)
        (deserialize-port . g$11259$DDDPb)
        (serialize-port . g$11258$DDDPb)
        (enum-set? . g$6640$DDDPb)
        (load/unload . g$11076$DDDPb)
        (load/args . g$11075$DDDPb)
        (printf . g$6749$DDDPb)
        (fprintf . g$6750$DDDPb)
        (format . g$6751$DDDPb)
        (procedure-form . g$11257$DDDPb)
        (procedure-environment . g$11256$DDDPb)
        (procedure-name . g$11255$DDDPb)
        (procedure-arity . g$11254$DDDPb)
        (gc-collect . g$11253$DDDPb)
        (typeof . g$11252$DDDPb)
        (clr-type? . g$11251$DDDPb)
        (get-clr-type . g$11250$DDDPb)
        (vector-append . g$11248$DDDPb)
        (vector-filter . g$11247$DDDPb)
        (vector-reverse! . g$11246$DDDPb)
        (vector-contains? . g$11245$DDDPb)
        (vector-index-of . g$11244$DDDPb)
        (vector-copy . g$11243$DDDPb)
        (vector-binary-search . g$11242$DDDPb)
        (string-ci-compare . g$11241$DDDPb)
        (string-compare . g$11240$DDDPb)
        (string-format . g$11239$DDDPb)
        (trace-printer . g$11072$DDDPb)
        (time-it . g$11237$DDDPb)
        (make-parameter . g$6778$DDDPb)
        (open-tcp-input/output-port . g$11234$DDDPb)
        (hashtable-for-each . g$11233$DDDPb)
        (hashtable-map . g$11232$DDDPb)
        (environment-bindings . g$8066$DDDPb)
        (environment-symbols . g$8069$DDDPb)
        (interaction-environment-symbols . g$8065$DDDPb)
        (optimization-level . g$11231$DDDPb)
        (library-path . g$7397$DDDPb)
        (make-compile-time-value . g$7775$DDDPb)
        (expand->core . g$8075$DDDPb)
        (expand . g$8073$DDDPb)
        (convert->cps . g$7094$DDDPb)
        (installed-libraries . g$7418$DDDPb)
        (uninstall-library . g$7409$DDDPb)
        (pretty-width . g$6853$DDDPb)
        (pretty-print . g$6855$DDDPb)
        (&no-nans . g$11230$DDDPb)
        (&no-infinities . g$11229$DDDPb)
        (&i/o-encoding . g$11228$DDDPb)
        (&i/o-decoding . g$11227$DDDPb)
        (&i/o-port . g$11226$DDDPb)
        (&i/o-file-does-not-exist . g$11225$DDDPb)
        (&i/o-file-already-exists . g$11224$DDDPb)
        (&i/o-file-is-read-only . g$11223$DDDPb)
        (&i/o-file-protection . g$11222$DDDPb)
        (&i/o-filename . g$11221$DDDPb)
        (&i/o-invalid-position . g$11220$DDDPb)
        (&i/o-write . g$11219$DDDPb)
        (&i/o-read . g$11218$DDDPb)
        (&i/o . g$11217$DDDPb)
        (&non-continuable . g$11216$DDDPb)
        (&undefined . g$11215$DDDPb)
        (&syntax . g$11214$DDDPb)
        (&lexical . g$11213$DDDPb)
        (&implementation-restriction . g$11212$DDDPb)
        (&who . g$11211$DDDPb)
        (&irritants . g$11210$DDDPb)
        (&assertion . g$11209$DDDPb)
        (&violation . g$11208$DDDPb)
        (&error . g$11207$DDDPb)
        (&serious . g$11206$DDDPb)
        (&warning . g$11205$DDDPb)
        (&message . g$11204$DDDPb)
        (&condition . g$11203$DDDPb)
        (define-condition-type . g$11202$DDDPb)
        (define-enumeration . g$11201$DDDPb)
        (define-record-type . g$11200$DDDPb)
        (parent-rtd . g$11199$DDDPb)
        (nongenerative . g$11198$DDDPb)
        (opaque . g$11197$DDDPb)
        (sealed . g$11196$DDDPb)
        (protocol . g$11195$DDDPb)
        (parent . g$11194$DDDPb)
        (immutable . g$11193$DDDPb)
        (mutable . g$11192$DDDPb)
        (fields . g$11191$DDDPb)
        (error-handling-mode . g$11190$DDDPb)
        (file-options . g$11189$DDDPb)
        (buffer-mode . g$11188$DDDPb)
        (eol-style . g$11187$DDDPb)
        (guard . g$11186$DDDPb)
        (trace-letrec-syntax . g$11185$DDDPb)
        (trace-let-syntax . g$11184$DDDPb)
        (trace-define-syntax . g$11183$DDDPb)
        (trace-define . g$11182$DDDPb)
        (trace-lambda . g$11181$DDDPb)
        (unsyntax-splicing . g$11180$DDDPb)
        (unsyntax . g$11179$DDDPb)
        (unquote-splicing . g$11178$DDDPb)
        (unquote . g$11177$DDDPb)
        (_ . g$11176$DDDPb)
        (else . g$11175$DDDPb)
        (=> . g$11174$DDDPb)
        (... . g$11173$DDDPb)
        (assert . g$11172$DDDPb)
        (endianness . g$11171$DDDPb)
        (delay . g$11170$DDDPb)
        (time . g$11169$DDDPb)
        (or . g$11168$DDDPb)
        (and . g$11167$DDDPb)
        (do . g$11166$DDDPb)
        (cond . g$11165$DDDPb)
        (let* . g$11164$DDDPb)
        (let . g$11163$DDDPb)
        (identifier-syntax . g$11162$DDDPb)
        (with-syntax . g$11161$DDDPb)
        (quasisyntax . g$11160$DDDPb)
        (quasiquote . g$11159$DDDPb)
        (syntax-rules . g$11158$DDDPb)
        (include-into . g$11157$DDDPb)
        (include . g$11156$DDDPb)
        (let-values . g$11154$DDDPb)
        (let*-values . g$11153$DDDPb)
        (record-constructor-descriptor . g$11152$DDDPb)
        (record-type-descriptor . g$11151$DDDPb)
        (fluid-let-syntax . g$11150$DDDPb)
        (case . g$11149$DDDPb)
        (parameterize . g$11148$DDDPb)
        (unless . g$11147$DDDPb)
        (when . g$11146$DDDPb)
        (if . g$11145$DDDPb)
        (letrec* . g$11144$DDDPb)
        (letrec . g$11143$DDDPb)
        (case-lambda . g$11141$DDDPb)
        (lambda . g$11140$DDDPb)
        (syntax . g$11139$DDDPb)
        (syntax-case . g$11138$DDDPb)
        (quote . g$11137$DDDPb)
        (letrec-syntax . g$11135$DDDPb)
        (let-syntax . g$11134$DDDPb)
        (set! . g$11133$DDDPb)
        (export . g$11132$DDDPb)
        (import . g$11131$DDDPb)
        (library . g$11130$DDDPb)
        (begin . g$11129$DDDPb)
        (module . g$11128$DDDPb)
        (define-syntax . g$11127$DDDPb)
        (define . g$11126$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11597$DDDPb
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11235$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9091$DDDPb
      'g$11598$DDDPb
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$11594$DDDPb)
        (annotation-source . g$11593$DDDPb)
        (annotation-expression . g$11592$DDDPb)
        (annotation? . g$11591$DDDPb)
        (read-annotated . g$11590$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9091$DDDPb
      'g$11599$DDDPb
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$11562$DDDPb)
        (serialize-library . g$11561$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9091$DDDPb
      'g$11600$DDDPb
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((string-normalize . g$11560$DDDPb)
        (variable-transformer-procedure . g$7777$DDDPb)
        (variable-transformer? . g$7776$DDDPb)
        (eqv-hash . g$11261$DDDPb)
        (reverse! . g$11260$DDDPb)
        (make-promise . g$6211$DDDPb)
        (format . g$6751$DDDPb)
        (get-command-line . g$11249$DDDPb)
        (make-traced-procedure . g$11238$DDDPb)
        (make-traced-macro . g$6771$DDDPb)
        (assertion-error . g$8088$DDDPb)
        (library-locator . g$11236$DDDPb)
        (get-library-paths . g$11235$DDDPb)
        (library-path . g$7397$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9091$DDDPb
      'g$11601$DDDPb
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11262$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11602$DDDPb
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$11581$DDDPb)
        (clr-field-set!-internal . g$11580$DDDPb)
        (clr-field-get-internal . g$11579$DDDPb)
        (clr-cast-internal . g$11578$DDDPb)
        (clr-call-internal . g$11577$DDDPb)
        (clr-new-internal . g$11576$DDDPb)
        (clr-new-array-internal . g$11575$DDDPb)
        (clr-is-internal . g$11574$DDDPb)
        (clr-reference-internal . g$11573$DDDPb)
        (clr-using-internal . g$11572$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11603$DDDPb
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11178$DDDPb)
        (unquote . g$11177$DDDPb)
        (else . g$11175$DDDPb)
        (=> . g$11174$DDDPb)
        (delay . g$11170$DDDPb)
        (or . g$11168$DDDPb)
        (and . g$11167$DDDPb)
        (do . g$11166$DDDPb)
        (cond . g$11165$DDDPb)
        (let* . g$11164$DDDPb)
        (let . g$11163$DDDPb)
        (quasiquote . g$11159$DDDPb)
        (syntax-rules . g$11158$DDDPb)
        (case . g$11149$DDDPb)
        (if . g$11145$DDDPb)
        (letrec . g$11143$DDDPb)
        (lambda . g$11140$DDDPb)
        (quote . g$11137$DDDPb)
        (letrec-syntax . g$11135$DDDPb)
        (let-syntax . g$11134$DDDPb)
        (set! . g$11133$DDDPb)
        (begin . g$11129$DDDPb)
        (define-syntax . g$11127$DDDPb)
        (define . g$11126$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9091$DDDPb
      'g$11604$DDDPb
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((char-ready? . g$11559$DDDPb)
        (string-ci>? . g$6260$DDDPb)
        (string-ci>=? . g$6262$DDDPb)
        (string-ci=? . g$6258$DDDPb)
        (string-ci<? . g$6259$DDDPb)
        (string-ci<=? . g$6261$DDDPb)
        (char-whitespace? . g$11554$DDDPb)
        (char-upper-case? . g$11553$DDDPb)
        (char-numeric? . g$11551$DDDPb)
        (char-lower-case? . g$11550$DDDPb)
        (char-upcase . g$11548$DDDPb)
        (char-downcase . g$11545$DDDPb)
        (char-ci>? . g$6270$DDDPb)
        (char-ci>=? . g$6272$DDDPb)
        (char-ci=? . g$6268$DDDPb)
        (char-ci<? . g$6269$DDDPb)
        (char-ci<=? . g$6271$DDDPb)
        (char-alphabetic? . g$11544$DDDPb)
        (call-with-output-file . g$6602$DDDPb)
        (call-with-input-file . g$6601$DDDPb)
        (write-char . g$6593$DDDPb)
        (write . g$11512$DDDPb)
        (with-output-to-file . g$6600$DDDPb)
        (with-input-from-file . g$6599$DDDPb)
        (read-char . g$6592$DDDPb)
        (read . g$11511$DDDPb)
        (peek-char . g$6591$DDDPb)
        (open-output-file . g$11510$DDDPb)
        (open-input-file . g$11509$DDDPb)
        (newline . g$6603$DDDPb)
        (display . g$11508$DDDPb)
        (close-output-port . g$11507$DDDPb)
        (close-input-port . g$11506$DDDPb)
        (eof-object? . g$11505$DDDPb)
        (current-error-port . g$11503$DDDPb)
        (current-output-port . g$11502$DDDPb)
        (current-input-port . g$11501$DDDPb)
        (output-port? . g$11500$DDDPb)
        (input-port? . g$11499$DDDPb)
        (scheme-report-environment . g$8072$DDDPb)
        (quotient . g$6208$DDDPb)
        (null-environment . g$8071$DDDPb)
        (remainder . g$6209$DDDPb)
        (modulo . g$6210$DDDPb)
        (inexact->exact . g$6205$DDDPb)
        (force . g$6212$DDDPb)
        (exact->inexact . g$6206$DDDPb)
        (string-fill! . g$11440$DDDPb)
        (string-set! . g$11439$DDDPb)
        (set-cdr! . g$11438$DDDPb)
        (set-car! . g$11437$DDDPb)
        (memv . g$5052$DDDPb)
        (memq . g$5051$DDDPb)
        (member . g$5053$DDDPb)
        (assv . g$5048$DDDPb)
        (assq . g$5047$DDDPb)
        (assoc . g$5049$DDDPb)
        (eval . g$8074$DDDPb)
        (zero? . g$5402$DDDPb)
        (vector? . g$5362$DDDPb)
        (vector-set! . g$11354$DDDPb)
        (vector-ref . g$11353$DDDPb)
        (vector-length . g$11352$DDDPb)
        (vector-fill! . g$5370$DDDPb)
        (vector->list . g$11351$DDDPb)
        (vector . g$11350$DDDPb)
        (values . g$11349$DDDPb)
        (truncate . g$11348$DDDPb)
        (tan . g$11347$DDDPb)
        (symbol? . g$5364$DDDPb)
        (symbol->string . g$11346$DDDPb)
        (substring . g$11345$DDDPb)
        (string? . g$11344$DDDPb)
        (string>? . g$5416$DDDPb)
        (string>=? . g$5418$DDDPb)
        (string=? . g$5414$DDDPb)
        (string<? . g$5415$DDDPb)
        (string<=? . g$5417$DDDPb)
        (string-ref . g$11343$DDDPb)
        (string-length . g$11342$DDDPb)
        (string-copy . g$11341$DDDPb)
        (string-append . g$11340$DDDPb)
        (string->symbol . g$11339$DDDPb)
        (string->number . g$11338$DDDPb)
        (string->list . g$11337$DDDPb)
        (string . g$11336$DDDPb)
        (sqrt . g$11335$DDDPb)
        (sin . g$11334$DDDPb)
        (round . g$11333$DDDPb)
        (reverse . g$5371$DDDPb)
        (real? . g$11332$DDDPb)
        (real-part . g$11330$DDDPb)
        (rationalize . g$5431$DDDPb)
        (rational? . g$11329$DDDPb)
        (procedure? . g$5366$DDDPb)
        (positive? . g$5400$DDDPb)
        (pair? . g$11327$DDDPb)
        (odd? . g$5404$DDDPb)
        (numerator . g$11326$DDDPb)
        (number? . g$11325$DDDPb)
        (number->string . g$11324$DDDPb)
        (null? . g$11323$DDDPb)
        (not . g$11322$DDDPb)
        (negative? . g$5401$DDDPb)
        (min . g$5406$DDDPb)
        (max . g$5405$DDDPb)
        (map . g$5059$DDDPb)
        (make-vector . g$11320$DDDPb)
        (make-string . g$11319$DDDPb)
        (make-rectangular . g$11318$DDDPb)
        (make-polar . g$11317$DDDPb)
        (magnitude . g$11316$DDDPb)
        (log . g$11315$DDDPb)
        (list? . g$11314$DDDPb)
        (list-tail . g$5039$DDDPb)
        (list-ref . g$5040$DDDPb)
        (list->vector . g$5359$DDDPb)
        (list->string . g$5360$DDDPb)
        (list . g$11313$DDDPb)
        (length . g$11312$DDDPb)
        (lcm . g$5408$DDDPb)
        (integer? . g$11311$DDDPb)
        (integer->char . g$11309$DDDPb)
        (inexact? . g$11307$DDDPb)
        (imag-part . g$11305$DDDPb)
        (gcd . g$5407$DDDPb)
        (for-each . g$5060$DDDPb)
        (floor . g$11304$DDDPb)
        (expt . g$11302$DDDPb)
        (exp . g$11301$DDDPb)
        (exact? . g$11300$DDDPb)
        (even? . g$5403$DDDPb)
        (eqv? . g$11296$DDDPb)
        (equal? . g$11295$DDDPb)
        (eq? . g$11294$DDDPb)
        (dynamic-wind . g$11293$DDDPb)
        (denominator . g$11290$DDDPb)
        (cos . g$11289$DDDPb)
        (cons . g$11288$DDDPb)
        (complex? . g$11287$DDDPb)
        (char? . g$5361$DDDPb)
        (char>? . g$5428$DDDPb)
        (char>=? . g$5430$DDDPb)
        (char=? . g$5426$DDDPb)
        (char<? . g$5427$DDDPb)
        (char<=? . g$5429$DDDPb)
        (char->integer . g$11286$DDDPb)
        (ceiling . g$11285$DDDPb)
        (call-with-values . g$11284$DDDPb)
        (call-with-current-continuation . g$11282$DDDPb)
        (cddddr . g$5399$DDDPb)
        (cdddar . g$5398$DDDPb)
        (cddadr . g$5397$DDDPb)
        (cddaar . g$5396$DDDPb)
        (cdaddr . g$5395$DDDPb)
        (cdadar . g$5394$DDDPb)
        (cdaadr . g$5393$DDDPb)
        (cdaaar . g$5392$DDDPb)
        (cadddr . g$5391$DDDPb)
        (caddar . g$5390$DDDPb)
        (cadadr . g$5389$DDDPb)
        (cadaar . g$5388$DDDPb)
        (caaddr . g$5387$DDDPb)
        (caadar . g$5386$DDDPb)
        (caaadr . g$5385$DDDPb)
        (caaaar . g$5384$DDDPb)
        (cdddr . g$5383$DDDPb)
        (cddar . g$5382$DDDPb)
        (cdadr . g$5381$DDDPb)
        (cdaar . g$5380$DDDPb)
        (caddr . g$5379$DDDPb)
        (cadar . g$5378$DDDPb)
        (caadr . g$5377$DDDPb)
        (caaar . g$5376$DDDPb)
        (cddr . g$5375$DDDPb)
        (cdar . g$5374$DDDPb)
        (cadr . g$5373$DDDPb)
        (caar . g$5372$DDDPb)
        (cdr . g$11281$DDDPb)
        (car . g$11280$DDDPb)
        (boolean? . g$5365$DDDPb)
        (atan . g$11279$DDDPb)
        (asin . g$11277$DDDPb)
        (apply . g$11276$DDDPb)
        (append . g$11275$DDDPb)
        (angle . g$11274$DDDPb)
        (acos . g$11273$DDDPb)
        (abs . g$11272$DDDPb)
        (/ . g$11271$DDDPb)
        (* . g$11270$DDDPb)
        (- . g$11269$DDDPb)
        (+ . g$11268$DDDPb)
        (>= . g$11267$DDDPb)
        (> . g$11266$DDDPb)
        (= . g$11265$DDDPb)
        (<= . g$11264$DDDPb)
        (< . g$11263$DDDPb)
        (unquote-splicing . g$11178$DDDPb)
        (unquote . g$11177$DDDPb)
        (else . g$11175$DDDPb)
        (=> . g$11174$DDDPb)
        (... . g$11173$DDDPb)
        (delay . g$11170$DDDPb)
        (or . g$11168$DDDPb)
        (and . g$11167$DDDPb)
        (do . g$11166$DDDPb)
        (cond . g$11165$DDDPb)
        (let* . g$11164$DDDPb)
        (let . g$11163$DDDPb)
        (quasiquote . g$11159$DDDPb)
        (syntax-rules . g$11158$DDDPb)
        (case . g$11149$DDDPb)
        (if . g$11145$DDDPb)
        (letrec . g$11143$DDDPb)
        (lambda . g$11140$DDDPb)
        (quote . g$11137$DDDPb)
        (letrec-syntax . g$11135$DDDPb)
        (let-syntax . g$11134$DDDPb)
        (set! . g$11133$DDDPb)
        (begin . g$11129$DDDPb)
        (define-syntax . g$11127$DDDPb)
        (define . g$11126$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9091$DDDPb
      'g$11605$DDDPb
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11558$DDDPb)
        (string-titlecase . g$11557$DDDPb)
        (string-normalize-nfkd . g$6276$DDDPb)
        (string-normalize-nfkc . g$6275$DDDPb)
        (string-normalize-nfd . g$6274$DDDPb)
        (string-normalize-nfc . g$6273$DDDPb)
        (string-foldcase . g$11556$DDDPb)
        (string-downcase . g$11555$DDDPb)
        (string-ci>? . g$6260$DDDPb)
        (string-ci>=? . g$6262$DDDPb)
        (string-ci=? . g$6258$DDDPb)
        (string-ci<? . g$6259$DDDPb)
        (string-ci<=? . g$6261$DDDPb)
        (char-whitespace? . g$11554$DDDPb)
        (char-upper-case? . g$11553$DDDPb)
        (char-title-case? . g$11552$DDDPb)
        (char-numeric? . g$11551$DDDPb)
        (char-lower-case? . g$11550$DDDPb)
        (char-general-category . g$11549$DDDPb)
        (char-upcase . g$11548$DDDPb)
        (char-titlecase . g$11547$DDDPb)
        (char-foldcase . g$11546$DDDPb)
        (char-downcase . g$11545$DDDPb)
        (char-ci>? . g$6270$DDDPb)
        (char-ci>=? . g$6272$DDDPb)
        (char-ci=? . g$6268$DDDPb)
        (char-ci<? . g$6269$DDDPb)
        (char-ci<=? . g$6271$DDDPb)
        (char-alphabetic? . g$11544$DDDPb)
        (make-variable-transformer . g$7774$DDDPb)
        (identifier? . g$8093$DDDPb)
        (generate-temporaries . g$8082$DDDPb)
        (free-identifier=? . g$8083$DDDPb)
        (syntax->datum . g$8095$DDDPb)
        (datum->syntax . g$8094$DDDPb)
        (bound-identifier=? . g$8084$DDDPb)
        (record-type-descriptor? . g$11543$DDDPb)
        (record-predicate . g$11542$DDDPb)
        (record-mutator . g$11541$DDDPb)
        (record-constructor . g$11540$DDDPb)
        (record-accessor . g$11539$DDDPb)
        (make-record-type-descriptor . g$11538$DDDPb)
        (make-record-constructor-descriptor . g$11537$DDDPb)
        (record? . g$11536$DDDPb)
        (record-type-uid . g$11535$DDDPb)
        (record-type-sealed? . g$11534$DDDPb)
        (record-type-parent . g$11533$DDDPb)
        (record-type-opaque? . g$11532$DDDPb)
        (record-type-name . g$11531$DDDPb)
        (record-type-generative? . g$11530$DDDPb)
        (record-type-field-names . g$11529$DDDPb)
        (record-rtd . g$11528$DDDPb)
        (record-field-mutable? . g$11527$DDDPb)
        (delete-file . g$5667$DDDPb)
        (file-exists? . g$5666$DDDPb)
        (vector-sort! . g$11526$DDDPb)
        (vector-sort . g$11525$DDDPb)
        (list-sort . g$6229$DDDPb)
        (symbol-hash . g$11524$DDDPb)
        (string-ci-hash . g$11523$DDDPb)
        (string-hash . g$11522$DDDPb)
        (equal-hash . g$11521$DDDPb)
        (hashtable-equivalence-function . g$11520$DDDPb)
        (make-hashtable . g$11519$DDDPb)
        (hashtable-hash-function . g$11518$DDDPb)
        (make-eqv-hashtable . g$5635$DDDPb)
        (make-eq-hashtable . g$5634$DDDPb)
        (hashtable? . g$11517$DDDPb)
        (hashtable-update! . g$5641$DDDPb)
        (hashtable-size . g$5636$DDDPb)
        (hashtable-set! . g$5638$DDDPb)
        (hashtable-ref . g$5637$DDDPb)
        (hashtable-mutable? . g$11516$DDDPb)
        (hashtable-keys . g$11515$DDDPb)
        (hashtable-entries . g$11514$DDDPb)
        (hashtable-delete! . g$5639$DDDPb)
        (hashtable-copy . g$11513$DDDPb)
        (hashtable-contains? . g$5640$DDDPb)
        (hashtable-clear! . g$5642$DDDPb)
        (call-with-output-file . g$6602$DDDPb)
        (call-with-input-file . g$6601$DDDPb)
        (write-char . g$6593$DDDPb)
        (write . g$11512$DDDPb)
        (with-output-to-file . g$6600$DDDPb)
        (with-input-from-file . g$6599$DDDPb)
        (read-char . g$6592$DDDPb)
        (read . g$11511$DDDPb)
        (peek-char . g$6591$DDDPb)
        (open-output-file . g$11510$DDDPb)
        (open-input-file . g$11509$DDDPb)
        (newline . g$6603$DDDPb)
        (display . g$11508$DDDPb)
        (close-output-port . g$11507$DDDPb)
        (close-input-port . g$11506$DDDPb)
        (eof-object? . g$11505$DDDPb)
        (eof-object . g$11504$DDDPb)
        (current-error-port . g$11503$DDDPb)
        (current-output-port . g$11502$DDDPb)
        (current-input-port . g$11501$DDDPb)
        (output-port? . g$11500$DDDPb)
        (input-port? . g$11499$DDDPb)
        (utf-8-codec . g$11498$DDDPb)
        (utf-16-codec . g$11497$DDDPb)
        (transcoder-error-handling-mode . g$11496$DDDPb)
        (transcoder-eol-style . g$11495$DDDPb)
        (transcoder-codec . g$11494$DDDPb)
        (transcoded-port . g$11493$DDDPb)
        (textual-port? . g$11492$DDDPb)
        (string->bytevector . g$11491$DDDPb)
        (standard-output-port . g$11490$DDDPb)
        (standard-input-port . g$11489$DDDPb)
        (standard-error-port . g$11488$DDDPb)
        (set-port-position! . g$11487$DDDPb)
        (put-u8 . g$11486$DDDPb)
        (put-string . g$11485$DDDPb)
        (put-datum . g$6571$DDDPb)
        (put-char . g$11484$DDDPb)
        (put-bytevector . g$11483$DDDPb)
        (port? . g$6576$DDDPb)
        (port-transcoder . g$11482$DDDPb)
        (port-position . g$11481$DDDPb)
        (port-has-set-port-position!? . g$11480$DDDPb)
        (port-has-port-position? . g$11479$DDDPb)
        (port-eof? . g$11478$DDDPb)
        (output-port-buffer-mode . g$11477$DDDPb)
        (open-string-output-port . g$6575$DDDPb)
        (open-string-input-port . g$11476$DDDPb)
        (open-file-output-port . g$11475$DDDPb)
        (open-file-input/output-port . g$11474$DDDPb)
        (open-file-input-port . g$11473$DDDPb)
        (open-bytevector-output-port . g$11472$DDDPb)
        (open-bytevector-input-port . g$11471$DDDPb)
        (native-transcoder . g$11470$DDDPb)
        (native-eol-style . g$11469$DDDPb)
        (make-transcoder . g$11468$DDDPb)
        (latin-1-codec . g$11467$DDDPb)
        (make-i/o-write-error . g$6039$DDDPb)
        (make-i/o-read-error . g$6026$DDDPb)
        (make-i/o-port-error . g$6134$DDDPb)
        (make-i/o-invalid-position-error . g$6052$DDDPb)
        (make-i/o-filename-error . g$6067$DDDPb)
        (make-i/o-file-protection-error . g$6082$DDDPb)
        (make-i/o-file-is-read-only-error . g$6095$DDDPb)
        (make-i/o-file-does-not-exist-error . g$6121$DDDPb)
        (make-i/o-file-already-exists-error . g$6108$DDDPb)
        (make-i/o-error . g$6013$DDDPb)
        (make-i/o-encoding-error . g$6162$DDDPb)
        (make-i/o-decoding-error . g$6149$DDDPb)
        (make-custom-textual-output-port . g$11466$DDDPb)
        (make-custom-textual-input/output-port . g$11465$DDDPb)
        (make-custom-textual-input-port . g$11464$DDDPb)
        (make-custom-binary-output-port . g$11463$DDDPb)
        (make-custom-binary-input/output-port . g$11462$DDDPb)
        (make-custom-binary-input-port . g$11461$DDDPb)
        (make-bytevector . g$11460$DDDPb)
        (lookahead-u8 . g$11459$DDDPb)
        (lookahead-char . g$11458$DDDPb)
        (i/o-write-error? . g$6040$DDDPb)
        (i/o-read-error? . g$6027$DDDPb)
        (i/o-port-error? . g$6136$DDDPb)
        (i/o-invalid-position-error? . g$6054$DDDPb)
        (i/o-error-position . g$6055$DDDPb)
        (i/o-filename-error? . g$6069$DDDPb)
        (i/o-file-protection-error? . g$6083$DDDPb)
        (i/o-file-is-read-only-error? . g$6096$DDDPb)
        (i/o-file-does-not-exist-error? . g$6122$DDDPb)
        (i/o-file-already-exists-error? . g$6109$DDDPb)
        (i/o-error? . g$6014$DDDPb)
        (i/o-error-port . g$6137$DDDPb)
        (i/o-error-filename . g$6070$DDDPb)
        (i/o-encoding-error? . g$6164$DDDPb)
        (i/o-encoding-error-char . g$6165$DDDPb)
        (i/o-decoding-error? . g$6150$DDDPb)
        (get-u8 . g$11457$DDDPb)
        (get-string-n! . g$11456$DDDPb)
        (get-string-n . g$11455$DDDPb)
        (get-string-all . g$11454$DDDPb)
        (get-line . g$11453$DDDPb)
        (get-datum . g$6572$DDDPb)
        (get-char . g$11452$DDDPb)
        (get-bytevector-some . g$11451$DDDPb)
        (get-bytevector-n! . g$11450$DDDPb)
        (get-bytevector-n . g$11449$DDDPb)
        (get-bytevector-all . g$11448$DDDPb)
        (flush-output-port . g$11447$DDDPb)
        (close-port . g$11446$DDDPb)
        (call-with-string-output-port . g$6577$DDDPb)
        (call-with-port . g$6578$DDDPb)
        (call-with-bytevector-output-port . g$11445$DDDPb)
        (bytevector->string . g$11444$DDDPb)
        (buffer-mode? . g$11443$DDDPb)
        (binary-port? . g$11442$DDDPb)
        (exit . g$11441$DDDPb)
        (command-line . g$11073$DDDPb)
        (remove . g$5064$DDDPb)
        (remv . g$5065$DDDPb)
        (remp . g$5045$DDDPb)
        (remq . g$5066$DDDPb)
        (partition . g$5044$DDDPb)
        (memv . g$5052$DDDPb)
        (memq . g$5051$DDDPb)
        (memp . g$5054$DDDPb)
        (member . g$5053$DDDPb)
        (exists . g$5058$DDDPb)
        (for-all . g$5057$DDDPb)
        (fold-right . g$5063$DDDPb)
        (fold-left . g$5062$DDDPb)
        (find . g$5043$DDDPb)
        (filter . g$5046$DDDPb)
        (cons* . g$5061$DDDPb)
        (assv . g$5048$DDDPb)
        (assq . g$5047$DDDPb)
        (assp . g$5050$DDDPb)
        (assoc . g$5049$DDDPb)
        (with-exception-handler . g$11436$DDDPb)
        (raise-continuable . g$11435$DDDPb)
        (raise . g$11434$DDDPb)
        (make-enumeration . g$6663$DDDPb)
        (enum-set=? . g$6670$DDDPb)
        (enum-set-universe . g$6664$DDDPb)
        (enum-set-union . g$6671$DDDPb)
        (enum-set-subset? . g$6669$DDDPb)
        (enum-set-projection . g$6675$DDDPb)
        (enum-set-member? . g$6668$DDDPb)
        (enum-set-intersection . g$6672$DDDPb)
        (enum-set-indexer . g$6665$DDDPb)
        (enum-set-difference . g$6673$DDDPb)
        (enum-set-constructor . g$6666$DDDPb)
        (enum-set-complement . g$6674$DDDPb)
        (enum-set->list . g$6667$DDDPb)
        (who-condition? . g$5931$DDDPb)
        (warning? . g$5850$DDDPb)
        (violation? . g$5889$DDDPb)
        (undefined-violation? . g$6001$DDDPb)
        (syntax-violation? . g$5986$DDDPb)
        (syntax-violation-subform . g$5988$DDDPb)
        (syntax-violation-form . g$5987$DDDPb)
        (syntax-violation . g$8092$DDDPb)
        (simple-conditions . g$11433$DDDPb)
        (serious-condition? . g$5863$DDDPb)
        (non-continuable-violation? . g$5945$DDDPb)
        (message-condition? . g$5836$DDDPb)
        (make-who-condition . g$5929$DDDPb)
        (make-warning . g$5849$DDDPb)
        (make-violation . g$5888$DDDPb)
        (make-undefined-violation . g$6000$DDDPb)
        (make-syntax-violation . g$5983$DDDPb)
        (make-serious-condition . g$5862$DDDPb)
        (make-non-continuable-violation . g$5944$DDDPb)
        (make-message-condition . g$5834$DDDPb)
        (make-lexical-violation . g$5970$DDDPb)
        (make-irritants-condition . g$5914$DDDPb)
        (make-implementation-restriction-violation . g$5957$DDDPb)
        (make-error . g$5875$DDDPb)
        (make-assertion-violation . g$5901$DDDPb)
        (lexical-violation? . g$5971$DDDPb)
        (irritants-condition? . g$5916$DDDPb)
        (implementation-restriction-violation? . g$5958$DDDPb)
        (error? . g$5876$DDDPb)
        (condition-who . g$5932$DDDPb)
        (condition-predicate . g$11432$DDDPb)
        (condition-message . g$5837$DDDPb)
        (condition-irritants . g$5917$DDDPb)
        (condition-accessor . g$11431$DDDPb)
        (condition . g$11430$DDDPb)
        (assertion-violation? . g$5902$DDDPb)
        (condition? . g$11429$DDDPb)
        (utf32->string . g$11428$DDDPb)
        (utf16->string . g$11427$DDDPb)
        (utf8->string . g$11426$DDDPb)
        (uint-list->bytevector . g$11425$DDDPb)
        (u8-list->bytevector . g$11424$DDDPb)
        (string->utf8 . g$11423$DDDPb)
        (string->utf32 . g$11422$DDDPb)
        (string->utf16 . g$11421$DDDPb)
        (sint-list->bytevector . g$11420$DDDPb)
        (native-endianness . g$5673$DDDPb)
        (bytevector? . g$5363$DDDPb)
        (bytevector=? . g$11419$DDDPb)
        (bytevector-uint-set! . g$11418$DDDPb)
        (bytevector-uint-ref . g$11417$DDDPb)
        (bytevector-u8-set! . g$11416$DDDPb)
        (bytevector-u8-ref . g$11415$DDDPb)
        (bytevector-u64-set! . g$5694$DDDPb)
        (bytevector-u64-ref . g$5690$DDDPb)
        (bytevector-u64-native-set! . g$5696$DDDPb)
        (bytevector-u64-native-ref . g$5692$DDDPb)
        (bytevector-u32-set! . g$5686$DDDPb)
        (bytevector-u32-ref . g$5682$DDDPb)
        (bytevector-u32-native-set! . g$5688$DDDPb)
        (bytevector-u32-native-ref . g$5684$DDDPb)
        (bytevector-u16-set! . g$5678$DDDPb)
        (bytevector-u16-ref . g$5674$DDDPb)
        (bytevector-u16-native-set! . g$5680$DDDPb)
        (bytevector-u16-native-ref . g$5676$DDDPb)
        (bytevector-sint-set! . g$11414$DDDPb)
        (bytevector-sint-ref . g$11413$DDDPb)
        (bytevector-s8-set! . g$11412$DDDPb)
        (bytevector-s8-ref . g$11411$DDDPb)
        (bytevector-s64-set! . g$5695$DDDPb)
        (bytevector-s64-ref . g$5691$DDDPb)
        (bytevector-s64-native-set! . g$5697$DDDPb)
        (bytevector-s64-native-ref . g$5693$DDDPb)
        (bytevector-s32-set! . g$5687$DDDPb)
        (bytevector-s32-ref . g$5683$DDDPb)
        (bytevector-s32-native-set! . g$5689$DDDPb)
        (bytevector-s32-native-ref . g$5685$DDDPb)
        (bytevector-s16-set! . g$5679$DDDPb)
        (bytevector-s16-ref . g$5675$DDDPb)
        (bytevector-s16-native-set! . g$5681$DDDPb)
        (bytevector-s16-native-ref . g$5677$DDDPb)
        (bytevector-length . g$11410$DDDPb)
        (bytevector-ieee-single-set! . g$11409$DDDPb)
        (bytevector-ieee-single-ref . g$11408$DDDPb)
        (bytevector-ieee-single-native-set! . g$5700$DDDPb)
        (bytevector-ieee-single-native-ref . g$5698$DDDPb)
        (bytevector-ieee-double-set! . g$11407$DDDPb)
        (bytevector-ieee-double-ref . g$11406$DDDPb)
        (bytevector-ieee-double-native-set! . g$5701$DDDPb)
        (bytevector-ieee-double-native-ref . g$5699$DDDPb)
        (bytevector-fill! . g$11405$DDDPb)
        (bytevector-copy! . g$11404$DDDPb)
        (bytevector-copy . g$11403$DDDPb)
        (bytevector->uint-list . g$11402$DDDPb)
        (bytevector->u8-list . g$11401$DDDPb)
        (bytevector->sint-list . g$11400$DDDPb)
        (no-nans-violation? . g$6191$DDDPb)
        (no-infinities-violation? . g$6178$DDDPb)
        (make-no-nans-violation . g$6190$DDDPb)
        (make-no-infinities-violation . g$6177$DDDPb)
        (real->flonum . g$11399$DDDPb)
        (flzero? . g$6491$DDDPb)
        (fltruncate . g$6486$DDDPb)
        (fltan . g$6476$DDDPb)
        (flsqrt . g$6481$DDDPb)
        (flsin . g$6474$DDDPb)
        (flround . g$6487$DDDPb)
        (flpositive? . g$6489$DDDPb)
        (flonum? . g$5368$DDDPb)
        (flodd? . g$6493$DDDPb)
        (flnumerator . g$11398$DDDPb)
        (flnegative? . g$6490$DDDPb)
        (flnan? . g$6473$DDDPb)
        (flmod0 . g$6469$DDDPb)
        (flmod . g$6468$DDDPb)
        (flmin . g$6495$DDDPb)
        (flmax . g$6494$DDDPb)
        (fllog . g$6480$DDDPb)
        (flinteger? . g$6470$DDDPb)
        (flinfinite? . g$6472$DDDPb)
        (flfloor . g$6485$DDDPb)
        (flfinite? . g$6471$DDDPb)
        (flexpt . g$6483$DDDPb)
        (flexp . g$6482$DDDPb)
        (fleven? . g$6492$DDDPb)
        (fldiv0-and-mod0 . g$6465$DDDPb)
        (fldiv0 . g$6467$DDDPb)
        (fldiv-and-mod . g$6464$DDDPb)
        (fldiv . g$6466$DDDPb)
        (fldenominator . g$11397$DDDPb)
        (flcos . g$6475$DDDPb)
        (flceiling . g$6484$DDDPb)
        (flatan . g$6479$DDDPb)
        (flasin . g$6477$DDDPb)
        (flacos . g$6478$DDDPb)
        (flabs . g$6488$DDDPb)
        (fl>? . g$11396$DDDPb)
        (fl>=? . g$11395$DDDPb)
        (fl=? . g$11394$DDDPb)
        (fl<? . g$11393$DDDPb)
        (fl<=? . g$11392$DDDPb)
        (fl/ . g$11391$DDDPb)
        (fl- . g$11390$DDDPb)
        (fl+ . g$11389$DDDPb)
        (fl* . g$11388$DDDPb)
        (fixnum->flonum . g$11387$DDDPb)
        (fxzero? . g$6372$DDDPb)
        (fxxor . g$11386$DDDPb)
        (fxrotate-bit-field . g$6386$DDDPb)
        (fxreverse-bit-field . g$11385$DDDPb)
        (fxpositive? . g$6370$DDDPb)
        (fxodd? . g$6374$DDDPb)
        (fxnot . g$11384$DDDPb)
        (fxnegative? . g$6371$DDDPb)
        (fxmod0 . g$6369$DDDPb)
        (fxmod . g$6368$DDDPb)
        (fxmin . g$6376$DDDPb)
        (fxmax . g$6375$DDDPb)
        (fxlength . g$11383$DDDPb)
        (fxior . g$11382$DDDPb)
        (fxif . g$6380$DDDPb)
        (fxfirst-bit-set . g$11381$DDDPb)
        (fxeven? . g$6373$DDDPb)
        (fxdiv0-and-mod0 . g$11380$DDDPb)
        (fxdiv0 . g$6367$DDDPb)
        (fxdiv-and-mod . g$11379$DDDPb)
        (fxdiv . g$6366$DDDPb)
        (fxcopy-bit-field . g$6383$DDDPb)
        (fxcopy-bit . g$6381$DDDPb)
        (fxbit-set? . g$11378$DDDPb)
        (fxbit-field . g$6382$DDDPb)
        (fxbit-count . g$11377$DDDPb)
        (fxarithmetic-shift-right . g$6385$DDDPb)
        (fxarithmetic-shift-left . g$6384$DDDPb)
        (fxarithmetic-shift . g$11376$DDDPb)
        (fxand . g$11375$DDDPb)
        (fx>? . g$11374$DDDPb)
        (fx>=? . g$11373$DDDPb)
        (fx=? . g$11372$DDDPb)
        (fx<? . g$11371$DDDPb)
        (fx<=? . g$11370$DDDPb)
        (fx-/carry . g$6378$DDDPb)
        (fx- . g$11369$DDDPb)
        (fx+/carry . g$6379$DDDPb)
        (fx+ . g$11368$DDDPb)
        (fx*/carry . g$6377$DDDPb)
        (fx* . g$11367$DDDPb)
        (greatest-fixnum . g$11366$DDDPb)
        (least-fixnum . g$11365$DDDPb)
        (fixnum-width . g$5369$DDDPb)
        (fixnum? . g$5367$DDDPb)
        (bitwise-rotate-bit-field . g$6340$DDDPb)
        (bitwise-reverse-bit-field . g$11364$DDDPb)
        (bitwise-length . g$11363$DDDPb)
        (bitwise-if . g$6334$DDDPb)
        (bitwise-first-bit-set . g$11362$DDDPb)
        (bitwise-copy-bit-field . g$6337$DDDPb)
        (bitwise-copy-bit . g$6335$DDDPb)
        (bitwise-bit-set? . g$11361$DDDPb)
        (bitwise-bit-field . g$6336$DDDPb)
        (bitwise-bit-count . g$11360$DDDPb)
        (bitwise-xor . g$11359$DDDPb)
        (bitwise-ior . g$11358$DDDPb)
        (bitwise-and . g$11357$DDDPb)
        (bitwise-not . g$11356$DDDPb)
        (bitwise-arithmetic-shift-right . g$6339$DDDPb)
        (bitwise-arithmetic-shift-left . g$6338$DDDPb)
        (bitwise-arithmetic-shift . g$11355$DDDPb)
        (zero? . g$5402$DDDPb)
        (vector? . g$5362$DDDPb)
        (vector-set! . g$11354$DDDPb)
        (vector-ref . g$11353$DDDPb)
        (vector-map . g$5434$DDDPb)
        (vector-length . g$11352$DDDPb)
        (vector-for-each . g$5435$DDDPb)
        (vector-fill! . g$5370$DDDPb)
        (vector->list . g$11351$DDDPb)
        (vector . g$11350$DDDPb)
        (values . g$11349$DDDPb)
        (truncate . g$11348$DDDPb)
        (tan . g$11347$DDDPb)
        (symbol? . g$5364$DDDPb)
        (symbol=? . g$5419$DDDPb)
        (symbol->string . g$11346$DDDPb)
        (substring . g$11345$DDDPb)
        (string? . g$11344$DDDPb)
        (string>? . g$5416$DDDPb)
        (string>=? . g$5418$DDDPb)
        (string=? . g$5414$DDDPb)
        (string<? . g$5415$DDDPb)
        (string<=? . g$5417$DDDPb)
        (string-ref . g$11343$DDDPb)
        (string-length . g$11342$DDDPb)
        (string-for-each . g$5436$DDDPb)
        (string-copy . g$11341$DDDPb)
        (string-append . g$11340$DDDPb)
        (string->symbol . g$11339$DDDPb)
        (string->number . g$11338$DDDPb)
        (string->list . g$11337$DDDPb)
        (string . g$11336$DDDPb)
        (sqrt . g$11335$DDDPb)
        (sin . g$11334$DDDPb)
        (round . g$11333$DDDPb)
        (reverse . g$5371$DDDPb)
        (real? . g$11332$DDDPb)
        (real-valued? . g$11331$DDDPb)
        (real-part . g$11330$DDDPb)
        (rationalize . g$5431$DDDPb)
        (rational? . g$11329$DDDPb)
        (rational-valued? . g$11328$DDDPb)
        (procedure? . g$5366$DDDPb)
        (positive? . g$5400$DDDPb)
        (pair? . g$11327$DDDPb)
        (odd? . g$5404$DDDPb)
        (numerator . g$11326$DDDPb)
        (number? . g$11325$DDDPb)
        (number->string . g$11324$DDDPb)
        (null? . g$11323$DDDPb)
        (not . g$11322$DDDPb)
        (negative? . g$5401$DDDPb)
        (nan? . g$11321$DDDPb)
        (min . g$5406$DDDPb)
        (max . g$5405$DDDPb)
        (map . g$5059$DDDPb)
        (make-vector . g$11320$DDDPb)
        (make-string . g$11319$DDDPb)
        (make-rectangular . g$11318$DDDPb)
        (make-polar . g$11317$DDDPb)
        (magnitude . g$11316$DDDPb)
        (log . g$11315$DDDPb)
        (list? . g$11314$DDDPb)
        (list-tail . g$5039$DDDPb)
        (list-ref . g$5040$DDDPb)
        (list->vector . g$5359$DDDPb)
        (list->string . g$5360$DDDPb)
        (list . g$11313$DDDPb)
        (length . g$11312$DDDPb)
        (lcm . g$5408$DDDPb)
        (integer? . g$11311$DDDPb)
        (integer-valued? . g$11310$DDDPb)
        (integer->char . g$11309$DDDPb)
        (infinite? . g$11308$DDDPb)
        (inexact? . g$11307$DDDPb)
        (inexact . g$11306$DDDPb)
        (imag-part . g$11305$DDDPb)
        (gcd . g$5407$DDDPb)
        (for-each . g$5060$DDDPb)
        (floor . g$11304$DDDPb)
        (finite? . g$11303$DDDPb)
        (expt . g$11302$DDDPb)
        (exp . g$11301$DDDPb)
        (exact? . g$11300$DDDPb)
        (exact-integer-sqrt . g$11299$DDDPb)
        (exact . g$11298$DDDPb)
        (even? . g$5403$DDDPb)
        (error . g$11297$DDDPb)
        (eqv? . g$11296$DDDPb)
        (equal? . g$11295$DDDPb)
        (eq? . g$11294$DDDPb)
        (dynamic-wind . g$11293$DDDPb)
        (div0-and-mod0 . g$11292$DDDPb)
        (mod0 . g$5358$DDDPb)
        (div0 . g$5356$DDDPb)
        (div-and-mod . g$11291$DDDPb)
        (mod . g$5357$DDDPb)
        (div . g$5355$DDDPb)
        (denominator . g$11290$DDDPb)
        (cos . g$11289$DDDPb)
        (cons . g$11288$DDDPb)
        (complex? . g$11287$DDDPb)
        (char? . g$5361$DDDPb)
        (char>? . g$5428$DDDPb)
        (char>=? . g$5430$DDDPb)
        (char=? . g$5426$DDDPb)
        (char<? . g$5427$DDDPb)
        (char<=? . g$5429$DDDPb)
        (char->integer . g$11286$DDDPb)
        (ceiling . g$11285$DDDPb)
        (call-with-values . g$11284$DDDPb)
        (call/cc . g$11283$DDDPb)
        (call-with-current-continuation . g$11282$DDDPb)
        (cddddr . g$5399$DDDPb)
        (cdddar . g$5398$DDDPb)
        (cddadr . g$5397$DDDPb)
        (cddaar . g$5396$DDDPb)
        (cdaddr . g$5395$DDDPb)
        (cdadar . g$5394$DDDPb)
        (cdaadr . g$5393$DDDPb)
        (cdaaar . g$5392$DDDPb)
        (cadddr . g$5391$DDDPb)
        (caddar . g$5390$DDDPb)
        (cadadr . g$5389$DDDPb)
        (cadaar . g$5388$DDDPb)
        (caaddr . g$5387$DDDPb)
        (caadar . g$5386$DDDPb)
        (caaadr . g$5385$DDDPb)
        (caaaar . g$5384$DDDPb)
        (cdddr . g$5383$DDDPb)
        (cddar . g$5382$DDDPb)
        (cdadr . g$5381$DDDPb)
        (cdaar . g$5380$DDDPb)
        (caddr . g$5379$DDDPb)
        (cadar . g$5378$DDDPb)
        (caadr . g$5377$DDDPb)
        (caaar . g$5376$DDDPb)
        (cddr . g$5375$DDDPb)
        (cdar . g$5374$DDDPb)
        (cadr . g$5373$DDDPb)
        (caar . g$5372$DDDPb)
        (cdr . g$11281$DDDPb)
        (car . g$11280$DDDPb)
        (boolean? . g$5365$DDDPb)
        (boolean=? . g$5420$DDDPb)
        (atan . g$11279$DDDPb)
        (assertion-violation . g$11278$DDDPb)
        (asin . g$11277$DDDPb)
        (apply . g$11276$DDDPb)
        (append . g$11275$DDDPb)
        (angle . g$11274$DDDPb)
        (acos . g$11273$DDDPb)
        (abs . g$11272$DDDPb)
        (/ . g$11271$DDDPb)
        (* . g$11270$DDDPb)
        (- . g$11269$DDDPb)
        (+ . g$11268$DDDPb)
        (>= . g$11267$DDDPb)
        (> . g$11266$DDDPb)
        (= . g$11265$DDDPb)
        (<= . g$11264$DDDPb)
        (< . g$11263$DDDPb)
        (&no-nans . g$11230$DDDPb)
        (&no-infinities . g$11229$DDDPb)
        (&i/o-encoding . g$11228$DDDPb)
        (&i/o-decoding . g$11227$DDDPb)
        (&i/o-port . g$11226$DDDPb)
        (&i/o-file-does-not-exist . g$11225$DDDPb)
        (&i/o-file-already-exists . g$11224$DDDPb)
        (&i/o-file-is-read-only . g$11223$DDDPb)
        (&i/o-file-protection . g$11222$DDDPb)
        (&i/o-filename . g$11221$DDDPb)
        (&i/o-invalid-position . g$11220$DDDPb)
        (&i/o-write . g$11219$DDDPb)
        (&i/o-read . g$11218$DDDPb)
        (&i/o . g$11217$DDDPb)
        (&non-continuable . g$11216$DDDPb)
        (&undefined . g$11215$DDDPb)
        (&syntax . g$11214$DDDPb)
        (&lexical . g$11213$DDDPb)
        (&implementation-restriction . g$11212$DDDPb)
        (&who . g$11211$DDDPb)
        (&irritants . g$11210$DDDPb)
        (&assertion . g$11209$DDDPb)
        (&violation . g$11208$DDDPb)
        (&error . g$11207$DDDPb)
        (&serious . g$11206$DDDPb)
        (&warning . g$11205$DDDPb)
        (&message . g$11204$DDDPb)
        (&condition . g$11203$DDDPb)
        (define-condition-type . g$11202$DDDPb)
        (define-enumeration . g$11201$DDDPb)
        (define-record-type . g$11200$DDDPb)
        (parent-rtd . g$11199$DDDPb)
        (nongenerative . g$11198$DDDPb)
        (opaque . g$11197$DDDPb)
        (sealed . g$11196$DDDPb)
        (protocol . g$11195$DDDPb)
        (parent . g$11194$DDDPb)
        (immutable . g$11193$DDDPb)
        (mutable . g$11192$DDDPb)
        (fields . g$11191$DDDPb)
        (error-handling-mode . g$11190$DDDPb)
        (file-options . g$11189$DDDPb)
        (buffer-mode . g$11188$DDDPb)
        (eol-style . g$11187$DDDPb)
        (guard . g$11186$DDDPb)
        (unsyntax-splicing . g$11180$DDDPb)
        (unsyntax . g$11179$DDDPb)
        (unquote-splicing . g$11178$DDDPb)
        (unquote . g$11177$DDDPb)
        (_ . g$11176$DDDPb)
        (else . g$11175$DDDPb)
        (=> . g$11174$DDDPb)
        (... . g$11173$DDDPb)
        (assert . g$11172$DDDPb)
        (endianness . g$11171$DDDPb)
        (or . g$11168$DDDPb)
        (and . g$11167$DDDPb)
        (do . g$11166$DDDPb)
        (cond . g$11165$DDDPb)
        (let* . g$11164$DDDPb)
        (let . g$11163$DDDPb)
        (identifier-syntax . g$11162$DDDPb)
        (with-syntax . g$11161$DDDPb)
        (quasisyntax . g$11160$DDDPb)
        (quasiquote . g$11159$DDDPb)
        (syntax-rules . g$11158$DDDPb)
        (let-values . g$11154$DDDPb)
        (let*-values . g$11153$DDDPb)
        (record-constructor-descriptor . g$11152$DDDPb)
        (record-type-descriptor . g$11151$DDDPb)
        (case . g$11149$DDDPb)
        (unless . g$11147$DDDPb)
        (when . g$11146$DDDPb)
        (if . g$11145$DDDPb)
        (letrec* . g$11144$DDDPb)
        (letrec . g$11143$DDDPb)
        (case-lambda . g$11141$DDDPb)
        (lambda . g$11140$DDDPb)
        (syntax . g$11139$DDDPb)
        (syntax-case . g$11138$DDDPb)
        (quote . g$11137$DDDPb)
        (letrec-syntax . g$11135$DDDPb)
        (let-syntax . g$11134$DDDPb)
        (set! . g$11133$DDDPb)
        (begin . g$11129$DDDPb)
        (define-syntax . g$11127$DDDPb)
        (define . g$11126$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11606$DDDPb
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((scheme-report-environment . g$8072$DDDPb)
        (quotient . g$6208$DDDPb)
        (null-environment . g$8071$DDDPb)
        (remainder . g$6209$DDDPb)
        (modulo . g$6210$DDDPb)
        (inexact->exact . g$6205$DDDPb)
        (force . g$6212$DDDPb)
        (exact->inexact . g$6206$DDDPb)
        (delay . g$11170$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11607$DDDPb
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11166$DDDPb)
        (unless . g$11147$DDDPb)
        (when . g$11146$DDDPb)
        (case-lambda . g$11141$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11608$DDDPb
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8074$DDDPb) (environment . g$8070$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11609$DDDPb
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$11438$DDDPb) (set-car! . g$11437$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11610$DDDPb
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$11440$DDDPb) (string-set! . g$11439$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11611$DDDPb
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$11441$DDDPb) (command-line . g$11073$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11612$DDDPb
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$7774$DDDPb)
        (identifier? . g$8093$DDDPb)
        (generate-temporaries . g$8082$DDDPb)
        (free-identifier=? . g$8083$DDDPb)
        (syntax->datum . g$8095$DDDPb)
        (datum->syntax . g$8094$DDDPb)
        (bound-identifier=? . g$8084$DDDPb)
        (syntax-violation . g$8092$DDDPb)
        (unsyntax-splicing . g$11180$DDDPb)
        (unsyntax . g$11179$DDDPb)
        (_ . g$11176$DDDPb)
        (... . g$11173$DDDPb)
        (with-syntax . g$11161$DDDPb)
        (quasisyntax . g$11160$DDDPb)
        (syntax . g$11139$DDDPb)
        (syntax-case . g$11138$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11613$DDDPb
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$5667$DDDPb)
        (file-exists? . g$5666$DDDPb)
        (make-i/o-write-error . g$6039$DDDPb)
        (make-i/o-read-error . g$6026$DDDPb)
        (make-i/o-port-error . g$6134$DDDPb)
        (make-i/o-invalid-position-error . g$6052$DDDPb)
        (make-i/o-filename-error . g$6067$DDDPb)
        (make-i/o-file-protection-error . g$6082$DDDPb)
        (make-i/o-file-is-read-only-error . g$6095$DDDPb)
        (make-i/o-file-does-not-exist-error . g$6121$DDDPb)
        (make-i/o-file-already-exists-error . g$6108$DDDPb)
        (make-i/o-error . g$6013$DDDPb)
        (i/o-write-error? . g$6040$DDDPb)
        (i/o-read-error? . g$6027$DDDPb)
        (i/o-port-error? . g$6136$DDDPb)
        (i/o-invalid-position-error? . g$6054$DDDPb)
        (i/o-error-position . g$6055$DDDPb)
        (i/o-filename-error? . g$6069$DDDPb)
        (i/o-file-protection-error? . g$6083$DDDPb)
        (i/o-file-is-read-only-error? . g$6096$DDDPb)
        (i/o-file-does-not-exist-error? . g$6122$DDDPb)
        (i/o-file-already-exists-error? . g$6109$DDDPb)
        (i/o-error? . g$6014$DDDPb)
        (i/o-error-port . g$6137$DDDPb)
        (i/o-error-filename . g$6070$DDDPb)
        (&i/o-port . g$11226$DDDPb)
        (&i/o-file-does-not-exist . g$11225$DDDPb)
        (&i/o-file-already-exists . g$11224$DDDPb)
        (&i/o-file-is-read-only . g$11223$DDDPb)
        (&i/o-file-protection . g$11222$DDDPb)
        (&i/o-filename . g$11221$DDDPb)
        (&i/o-invalid-position . g$11220$DDDPb)
        (&i/o-write . g$11219$DDDPb)
        (&i/o-read . g$11218$DDDPb)
        (&i/o . g$11217$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11614$DDDPb
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$11526$DDDPb)
        (vector-sort . g$11525$DDDPb)
        (list-sort . g$6229$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11615$DDDPb
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$5402$DDDPb)
        (vector? . g$5362$DDDPb)
        (vector-set! . g$11354$DDDPb)
        (vector-ref . g$11353$DDDPb)
        (vector-map . g$5434$DDDPb)
        (vector-length . g$11352$DDDPb)
        (vector-for-each . g$5435$DDDPb)
        (vector-fill! . g$5370$DDDPb)
        (vector->list . g$11351$DDDPb)
        (vector . g$11350$DDDPb)
        (values . g$11349$DDDPb)
        (truncate . g$11348$DDDPb)
        (tan . g$11347$DDDPb)
        (symbol? . g$5364$DDDPb)
        (symbol=? . g$5419$DDDPb)
        (symbol->string . g$11346$DDDPb)
        (substring . g$11345$DDDPb)
        (string? . g$11344$DDDPb)
        (string>? . g$5416$DDDPb)
        (string>=? . g$5418$DDDPb)
        (string=? . g$5414$DDDPb)
        (string<? . g$5415$DDDPb)
        (string<=? . g$5417$DDDPb)
        (string-ref . g$11343$DDDPb)
        (string-length . g$11342$DDDPb)
        (string-for-each . g$5436$DDDPb)
        (string-copy . g$11341$DDDPb)
        (string-append . g$11340$DDDPb)
        (string->symbol . g$11339$DDDPb)
        (string->number . g$11338$DDDPb)
        (string->list . g$11337$DDDPb)
        (string . g$11336$DDDPb)
        (sqrt . g$11335$DDDPb)
        (sin . g$11334$DDDPb)
        (round . g$11333$DDDPb)
        (reverse . g$5371$DDDPb)
        (real? . g$11332$DDDPb)
        (real-valued? . g$11331$DDDPb)
        (real-part . g$11330$DDDPb)
        (rationalize . g$5431$DDDPb)
        (rational? . g$11329$DDDPb)
        (rational-valued? . g$11328$DDDPb)
        (procedure? . g$5366$DDDPb)
        (positive? . g$5400$DDDPb)
        (pair? . g$11327$DDDPb)
        (odd? . g$5404$DDDPb)
        (numerator . g$11326$DDDPb)
        (number? . g$11325$DDDPb)
        (number->string . g$11324$DDDPb)
        (null? . g$11323$DDDPb)
        (not . g$11322$DDDPb)
        (negative? . g$5401$DDDPb)
        (nan? . g$11321$DDDPb)
        (min . g$5406$DDDPb)
        (max . g$5405$DDDPb)
        (map . g$5059$DDDPb)
        (make-vector . g$11320$DDDPb)
        (make-string . g$11319$DDDPb)
        (make-rectangular . g$11318$DDDPb)
        (make-polar . g$11317$DDDPb)
        (magnitude . g$11316$DDDPb)
        (log . g$11315$DDDPb)
        (list? . g$11314$DDDPb)
        (list-tail . g$5039$DDDPb)
        (list-ref . g$5040$DDDPb)
        (list->vector . g$5359$DDDPb)
        (list->string . g$5360$DDDPb)
        (list . g$11313$DDDPb)
        (length . g$11312$DDDPb)
        (lcm . g$5408$DDDPb)
        (integer? . g$11311$DDDPb)
        (integer-valued? . g$11310$DDDPb)
        (integer->char . g$11309$DDDPb)
        (infinite? . g$11308$DDDPb)
        (inexact? . g$11307$DDDPb)
        (inexact . g$11306$DDDPb)
        (imag-part . g$11305$DDDPb)
        (gcd . g$5407$DDDPb)
        (for-each . g$5060$DDDPb)
        (floor . g$11304$DDDPb)
        (finite? . g$11303$DDDPb)
        (expt . g$11302$DDDPb)
        (exp . g$11301$DDDPb)
        (exact? . g$11300$DDDPb)
        (exact-integer-sqrt . g$11299$DDDPb)
        (exact . g$11298$DDDPb)
        (even? . g$5403$DDDPb)
        (error . g$11297$DDDPb)
        (eqv? . g$11296$DDDPb)
        (equal? . g$11295$DDDPb)
        (eq? . g$11294$DDDPb)
        (dynamic-wind . g$11293$DDDPb)
        (div0-and-mod0 . g$11292$DDDPb)
        (mod0 . g$5358$DDDPb)
        (div0 . g$5356$DDDPb)
        (div-and-mod . g$11291$DDDPb)
        (mod . g$5357$DDDPb)
        (div . g$5355$DDDPb)
        (denominator . g$11290$DDDPb)
        (cos . g$11289$DDDPb)
        (cons . g$11288$DDDPb)
        (complex? . g$11287$DDDPb)
        (char? . g$5361$DDDPb)
        (char>? . g$5428$DDDPb)
        (char>=? . g$5430$DDDPb)
        (char=? . g$5426$DDDPb)
        (char<? . g$5427$DDDPb)
        (char<=? . g$5429$DDDPb)
        (char->integer . g$11286$DDDPb)
        (ceiling . g$11285$DDDPb)
        (call-with-values . g$11284$DDDPb)
        (call/cc . g$11283$DDDPb)
        (call-with-current-continuation . g$11282$DDDPb)
        (cddddr . g$5399$DDDPb)
        (cdddar . g$5398$DDDPb)
        (cddadr . g$5397$DDDPb)
        (cddaar . g$5396$DDDPb)
        (cdaddr . g$5395$DDDPb)
        (cdadar . g$5394$DDDPb)
        (cdaadr . g$5393$DDDPb)
        (cdaaar . g$5392$DDDPb)
        (cadddr . g$5391$DDDPb)
        (caddar . g$5390$DDDPb)
        (cadadr . g$5389$DDDPb)
        (cadaar . g$5388$DDDPb)
        (caaddr . g$5387$DDDPb)
        (caadar . g$5386$DDDPb)
        (caaadr . g$5385$DDDPb)
        (caaaar . g$5384$DDDPb)
        (cdddr . g$5383$DDDPb)
        (cddar . g$5382$DDDPb)
        (cdadr . g$5381$DDDPb)
        (cdaar . g$5380$DDDPb)
        (caddr . g$5379$DDDPb)
        (cadar . g$5378$DDDPb)
        (caadr . g$5377$DDDPb)
        (caaar . g$5376$DDDPb)
        (cddr . g$5375$DDDPb)
        (cdar . g$5374$DDDPb)
        (cadr . g$5373$DDDPb)
        (caar . g$5372$DDDPb)
        (cdr . g$11281$DDDPb)
        (car . g$11280$DDDPb)
        (boolean? . g$5365$DDDPb)
        (boolean=? . g$5420$DDDPb)
        (atan . g$11279$DDDPb)
        (assertion-violation . g$11278$DDDPb)
        (asin . g$11277$DDDPb)
        (apply . g$11276$DDDPb)
        (append . g$11275$DDDPb)
        (angle . g$11274$DDDPb)
        (acos . g$11273$DDDPb)
        (abs . g$11272$DDDPb)
        (/ . g$11271$DDDPb)
        (* . g$11270$DDDPb)
        (- . g$11269$DDDPb)
        (+ . g$11268$DDDPb)
        (>= . g$11267$DDDPb)
        (> . g$11266$DDDPb)
        (= . g$11265$DDDPb)
        (<= . g$11264$DDDPb)
        (< . g$11263$DDDPb)
        (unquote-splicing . g$11178$DDDPb)
        (unquote . g$11177$DDDPb)
        (_ . g$11176$DDDPb)
        (else . g$11175$DDDPb)
        (=> . g$11174$DDDPb)
        (... . g$11173$DDDPb)
        (assert . g$11172$DDDPb)
        (or . g$11168$DDDPb)
        (and . g$11167$DDDPb)
        (cond . g$11165$DDDPb)
        (let* . g$11164$DDDPb)
        (let . g$11163$DDDPb)
        (identifier-syntax . g$11162$DDDPb)
        (quasiquote . g$11159$DDDPb)
        (syntax-rules . g$11158$DDDPb)
        (let-values . g$11154$DDDPb)
        (let*-values . g$11153$DDDPb)
        (case . g$11149$DDDPb)
        (if . g$11145$DDDPb)
        (letrec* . g$11144$DDDPb)
        (letrec . g$11143$DDDPb)
        (lambda . g$11140$DDDPb)
        (quote . g$11137$DDDPb)
        (letrec-syntax . g$11135$DDDPb)
        (let-syntax . g$11134$DDDPb)
        (set! . g$11133$DDDPb)
        (begin . g$11129$DDDPb)
        (define-syntax . g$11127$DDDPb)
        (define . g$11126$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11616$DDDPb
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5064$DDDPb)
        (remv . g$5065$DDDPb)
        (remp . g$5045$DDDPb)
        (remq . g$5066$DDDPb)
        (partition . g$5044$DDDPb)
        (memv . g$5052$DDDPb)
        (memq . g$5051$DDDPb)
        (memp . g$5054$DDDPb)
        (member . g$5053$DDDPb)
        (exists . g$5058$DDDPb)
        (for-all . g$5057$DDDPb)
        (fold-right . g$5063$DDDPb)
        (fold-left . g$5062$DDDPb)
        (find . g$5043$DDDPb)
        (filter . g$5046$DDDPb)
        (cons* . g$5061$DDDPb)
        (assv . g$5048$DDDPb)
        (assq . g$5047$DDDPb)
        (assp . g$5050$DDDPb)
        (assoc . g$5049$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11617$DDDPb
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$6602$DDDPb)
        (call-with-input-file . g$6601$DDDPb)
        (write-char . g$6593$DDDPb)
        (write . g$11512$DDDPb)
        (with-output-to-file . g$6600$DDDPb)
        (with-input-from-file . g$6599$DDDPb)
        (read-char . g$6592$DDDPb)
        (read . g$11511$DDDPb)
        (peek-char . g$6591$DDDPb)
        (open-output-file . g$11510$DDDPb)
        (open-input-file . g$11509$DDDPb)
        (newline . g$6603$DDDPb)
        (display . g$11508$DDDPb)
        (close-output-port . g$11507$DDDPb)
        (close-input-port . g$11506$DDDPb)
        (eof-object? . g$11505$DDDPb)
        (eof-object . g$11504$DDDPb)
        (current-error-port . g$11503$DDDPb)
        (current-output-port . g$11502$DDDPb)
        (current-input-port . g$11501$DDDPb)
        (output-port? . g$11500$DDDPb)
        (input-port? . g$11499$DDDPb)
        (make-i/o-write-error . g$6039$DDDPb)
        (make-i/o-read-error . g$6026$DDDPb)
        (make-i/o-port-error . g$6134$DDDPb)
        (make-i/o-invalid-position-error . g$6052$DDDPb)
        (make-i/o-filename-error . g$6067$DDDPb)
        (make-i/o-file-protection-error . g$6082$DDDPb)
        (make-i/o-file-is-read-only-error . g$6095$DDDPb)
        (make-i/o-file-does-not-exist-error . g$6121$DDDPb)
        (make-i/o-file-already-exists-error . g$6108$DDDPb)
        (make-i/o-error . g$6013$DDDPb)
        (i/o-write-error? . g$6040$DDDPb)
        (i/o-read-error? . g$6027$DDDPb)
        (i/o-port-error? . g$6136$DDDPb)
        (i/o-invalid-position-error? . g$6054$DDDPb)
        (i/o-error-position . g$6055$DDDPb)
        (i/o-filename-error? . g$6069$DDDPb)
        (i/o-file-protection-error? . g$6083$DDDPb)
        (i/o-file-is-read-only-error? . g$6096$DDDPb)
        (i/o-file-does-not-exist-error? . g$6122$DDDPb)
        (i/o-file-already-exists-error? . g$6109$DDDPb)
        (i/o-error? . g$6014$DDDPb)
        (i/o-error-port . g$6137$DDDPb)
        (i/o-error-filename . g$6070$DDDPb)
        (&i/o-port . g$11226$DDDPb)
        (&i/o-file-does-not-exist . g$11225$DDDPb)
        (&i/o-file-already-exists . g$11224$DDDPb)
        (&i/o-file-is-read-only . g$11223$DDDPb)
        (&i/o-file-protection . g$11222$DDDPb)
        (&i/o-filename . g$11221$DDDPb)
        (&i/o-invalid-position . g$11220$DDDPb)
        (&i/o-write . g$11219$DDDPb)
        (&i/o-read . g$11218$DDDPb)
        (&i/o . g$11217$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11618$DDDPb
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$11460$DDDPb)
        (utf32->string . g$11428$DDDPb)
        (utf16->string . g$11427$DDDPb)
        (utf8->string . g$11426$DDDPb)
        (uint-list->bytevector . g$11425$DDDPb)
        (u8-list->bytevector . g$11424$DDDPb)
        (string->utf8 . g$11423$DDDPb)
        (string->utf32 . g$11422$DDDPb)
        (string->utf16 . g$11421$DDDPb)
        (sint-list->bytevector . g$11420$DDDPb)
        (native-endianness . g$5673$DDDPb)
        (bytevector? . g$5363$DDDPb)
        (bytevector=? . g$11419$DDDPb)
        (bytevector-uint-set! . g$11418$DDDPb)
        (bytevector-uint-ref . g$11417$DDDPb)
        (bytevector-u8-set! . g$11416$DDDPb)
        (bytevector-u8-ref . g$11415$DDDPb)
        (bytevector-u64-set! . g$5694$DDDPb)
        (bytevector-u64-ref . g$5690$DDDPb)
        (bytevector-u64-native-set! . g$5696$DDDPb)
        (bytevector-u64-native-ref . g$5692$DDDPb)
        (bytevector-u32-set! . g$5686$DDDPb)
        (bytevector-u32-ref . g$5682$DDDPb)
        (bytevector-u32-native-set! . g$5688$DDDPb)
        (bytevector-u32-native-ref . g$5684$DDDPb)
        (bytevector-u16-set! . g$5678$DDDPb)
        (bytevector-u16-ref . g$5674$DDDPb)
        (bytevector-u16-native-set! . g$5680$DDDPb)
        (bytevector-u16-native-ref . g$5676$DDDPb)
        (bytevector-sint-set! . g$11414$DDDPb)
        (bytevector-sint-ref . g$11413$DDDPb)
        (bytevector-s8-set! . g$11412$DDDPb)
        (bytevector-s8-ref . g$11411$DDDPb)
        (bytevector-s64-set! . g$5695$DDDPb)
        (bytevector-s64-ref . g$5691$DDDPb)
        (bytevector-s64-native-set! . g$5697$DDDPb)
        (bytevector-s64-native-ref . g$5693$DDDPb)
        (bytevector-s32-set! . g$5687$DDDPb)
        (bytevector-s32-ref . g$5683$DDDPb)
        (bytevector-s32-native-set! . g$5689$DDDPb)
        (bytevector-s32-native-ref . g$5685$DDDPb)
        (bytevector-s16-set! . g$5679$DDDPb)
        (bytevector-s16-ref . g$5675$DDDPb)
        (bytevector-s16-native-set! . g$5681$DDDPb)
        (bytevector-s16-native-ref . g$5677$DDDPb)
        (bytevector-length . g$11410$DDDPb)
        (bytevector-ieee-single-set! . g$11409$DDDPb)
        (bytevector-ieee-single-ref . g$11408$DDDPb)
        (bytevector-ieee-single-native-set! . g$5700$DDDPb)
        (bytevector-ieee-single-native-ref . g$5698$DDDPb)
        (bytevector-ieee-double-set! . g$11407$DDDPb)
        (bytevector-ieee-double-ref . g$11406$DDDPb)
        (bytevector-ieee-double-native-set! . g$5701$DDDPb)
        (bytevector-ieee-double-native-ref . g$5699$DDDPb)
        (bytevector-fill! . g$11405$DDDPb)
        (bytevector-copy! . g$11404$DDDPb)
        (bytevector-copy . g$11403$DDDPb)
        (bytevector->uint-list . g$11402$DDDPb)
        (bytevector->u8-list . g$11401$DDDPb)
        (bytevector->sint-list . g$11400$DDDPb)
        (endianness . g$11171$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11619$DDDPb
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11558$DDDPb)
        (string-titlecase . g$11557$DDDPb)
        (string-normalize-nfkd . g$6276$DDDPb)
        (string-normalize-nfkc . g$6275$DDDPb)
        (string-normalize-nfd . g$6274$DDDPb)
        (string-normalize-nfc . g$6273$DDDPb)
        (string-foldcase . g$11556$DDDPb)
        (string-downcase . g$11555$DDDPb)
        (string-ci>? . g$6260$DDDPb)
        (string-ci>=? . g$6262$DDDPb)
        (string-ci=? . g$6258$DDDPb)
        (string-ci<? . g$6259$DDDPb)
        (string-ci<=? . g$6261$DDDPb)
        (char-whitespace? . g$11554$DDDPb)
        (char-upper-case? . g$11553$DDDPb)
        (char-title-case? . g$11552$DDDPb)
        (char-numeric? . g$11551$DDDPb)
        (char-lower-case? . g$11550$DDDPb)
        (char-general-category . g$11549$DDDPb)
        (char-upcase . g$11548$DDDPb)
        (char-titlecase . g$11547$DDDPb)
        (char-foldcase . g$11546$DDDPb)
        (char-downcase . g$11545$DDDPb)
        (char-ci>? . g$6270$DDDPb)
        (char-ci>=? . g$6272$DDDPb)
        (char-ci=? . g$6268$DDDPb)
        (char-ci<? . g$6269$DDDPb)
        (char-ci<=? . g$6271$DDDPb)
        (char-alphabetic? . g$11544$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11620$DDDPb
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$11436$DDDPb)
        (raise-continuable . g$11435$DDDPb)
        (raise . g$11434$DDDPb)
        (guard . g$11186$DDDPb)
        (else . g$11175$DDDPb)
        (=> . g$11174$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11621$DDDPb
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$6340$DDDPb)
        (bitwise-reverse-bit-field . g$11364$DDDPb)
        (bitwise-length . g$11363$DDDPb)
        (bitwise-if . g$6334$DDDPb)
        (bitwise-first-bit-set . g$11362$DDDPb)
        (bitwise-copy-bit-field . g$6337$DDDPb)
        (bitwise-copy-bit . g$6335$DDDPb)
        (bitwise-bit-set? . g$11361$DDDPb)
        (bitwise-bit-field . g$6336$DDDPb)
        (bitwise-bit-count . g$11360$DDDPb)
        (bitwise-xor . g$11359$DDDPb)
        (bitwise-ior . g$11358$DDDPb)
        (bitwise-and . g$11357$DDDPb)
        (bitwise-not . g$11356$DDDPb)
        (bitwise-arithmetic-shift-right . g$6339$DDDPb)
        (bitwise-arithmetic-shift-left . g$6338$DDDPb)
        (bitwise-arithmetic-shift . g$11355$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11622$DDDPb
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$6372$DDDPb)
        (fxxor . g$11386$DDDPb)
        (fxrotate-bit-field . g$6386$DDDPb)
        (fxreverse-bit-field . g$11385$DDDPb)
        (fxpositive? . g$6370$DDDPb)
        (fxodd? . g$6374$DDDPb)
        (fxnot . g$11384$DDDPb)
        (fxnegative? . g$6371$DDDPb)
        (fxmod0 . g$6369$DDDPb)
        (fxmod . g$6368$DDDPb)
        (fxmin . g$6376$DDDPb)
        (fxmax . g$6375$DDDPb)
        (fxlength . g$11383$DDDPb)
        (fxior . g$11382$DDDPb)
        (fxif . g$6380$DDDPb)
        (fxfirst-bit-set . g$11381$DDDPb)
        (fxeven? . g$6373$DDDPb)
        (fxdiv0-and-mod0 . g$11380$DDDPb)
        (fxdiv0 . g$6367$DDDPb)
        (fxdiv-and-mod . g$11379$DDDPb)
        (fxdiv . g$6366$DDDPb)
        (fxcopy-bit-field . g$6383$DDDPb)
        (fxcopy-bit . g$6381$DDDPb)
        (fxbit-set? . g$11378$DDDPb)
        (fxbit-field . g$6382$DDDPb)
        (fxbit-count . g$11377$DDDPb)
        (fxarithmetic-shift-right . g$6385$DDDPb)
        (fxarithmetic-shift-left . g$6384$DDDPb)
        (fxarithmetic-shift . g$11376$DDDPb)
        (fxand . g$11375$DDDPb)
        (fx>? . g$11374$DDDPb)
        (fx>=? . g$11373$DDDPb)
        (fx=? . g$11372$DDDPb)
        (fx<? . g$11371$DDDPb)
        (fx<=? . g$11370$DDDPb)
        (fx-/carry . g$6378$DDDPb)
        (fx- . g$11369$DDDPb)
        (fx+/carry . g$6379$DDDPb)
        (fx+ . g$11368$DDDPb)
        (fx*/carry . g$6377$DDDPb)
        (fx* . g$11367$DDDPb)
        (greatest-fixnum . g$11366$DDDPb)
        (least-fixnum . g$11365$DDDPb)
        (fixnum-width . g$5369$DDDPb)
        (fixnum? . g$5367$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11623$DDDPb
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$6191$DDDPb)
        (no-infinities-violation? . g$6178$DDDPb)
        (make-no-nans-violation . g$6190$DDDPb)
        (make-no-infinities-violation . g$6177$DDDPb)
        (real->flonum . g$11399$DDDPb)
        (flzero? . g$6491$DDDPb)
        (fltruncate . g$6486$DDDPb)
        (fltan . g$6476$DDDPb)
        (flsqrt . g$6481$DDDPb)
        (flsin . g$6474$DDDPb)
        (flround . g$6487$DDDPb)
        (flpositive? . g$6489$DDDPb)
        (flonum? . g$5368$DDDPb)
        (flodd? . g$6493$DDDPb)
        (flnumerator . g$11398$DDDPb)
        (flnegative? . g$6490$DDDPb)
        (flnan? . g$6473$DDDPb)
        (flmod0 . g$6469$DDDPb)
        (flmod . g$6468$DDDPb)
        (flmin . g$6495$DDDPb)
        (flmax . g$6494$DDDPb)
        (fllog . g$6480$DDDPb)
        (flinteger? . g$6470$DDDPb)
        (flinfinite? . g$6472$DDDPb)
        (flfloor . g$6485$DDDPb)
        (flfinite? . g$6471$DDDPb)
        (flexpt . g$6483$DDDPb)
        (flexp . g$6482$DDDPb)
        (fleven? . g$6492$DDDPb)
        (fldiv0-and-mod0 . g$6465$DDDPb)
        (fldiv0 . g$6467$DDDPb)
        (fldiv-and-mod . g$6464$DDDPb)
        (fldiv . g$6466$DDDPb)
        (fldenominator . g$11397$DDDPb)
        (flcos . g$6475$DDDPb)
        (flceiling . g$6484$DDDPb)
        (flatan . g$6479$DDDPb)
        (flasin . g$6477$DDDPb)
        (flacos . g$6478$DDDPb)
        (flabs . g$6488$DDDPb)
        (fl>? . g$11396$DDDPb)
        (fl>=? . g$11395$DDDPb)
        (fl=? . g$11394$DDDPb)
        (fl<? . g$11393$DDDPb)
        (fl<=? . g$11392$DDDPb)
        (fl/ . g$11391$DDDPb)
        (fl- . g$11390$DDDPb)
        (fl+ . g$11389$DDDPb)
        (fl* . g$11388$DDDPb)
        (fixnum->flonum . g$11387$DDDPb)
        (&no-nans . g$11230$DDDPb)
        (&no-infinities . g$11229$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11624$DDDPb
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$11524$DDDPb)
        (string-ci-hash . g$11523$DDDPb)
        (string-hash . g$11522$DDDPb)
        (equal-hash . g$11521$DDDPb)
        (hashtable-equivalence-function . g$11520$DDDPb)
        (make-hashtable . g$11519$DDDPb)
        (hashtable-hash-function . g$11518$DDDPb)
        (make-eqv-hashtable . g$5635$DDDPb)
        (make-eq-hashtable . g$5634$DDDPb)
        (hashtable? . g$11517$DDDPb)
        (hashtable-update! . g$5641$DDDPb)
        (hashtable-size . g$5636$DDDPb)
        (hashtable-set! . g$5638$DDDPb)
        (hashtable-ref . g$5637$DDDPb)
        (hashtable-mutable? . g$11516$DDDPb)
        (hashtable-keys . g$11515$DDDPb)
        (hashtable-entries . g$11514$DDDPb)
        (hashtable-delete! . g$5639$DDDPb)
        (hashtable-copy . g$11513$DDDPb)
        (hashtable-contains? . g$5640$DDDPb)
        (hashtable-clear! . g$5642$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11625$DDDPb
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$11505$DDDPb)
        (eof-object . g$11504$DDDPb)
        (current-error-port . g$11503$DDDPb)
        (current-output-port . g$11502$DDDPb)
        (current-input-port . g$11501$DDDPb)
        (output-port? . g$11500$DDDPb)
        (input-port? . g$11499$DDDPb)
        (utf-8-codec . g$11498$DDDPb)
        (utf-16-codec . g$11497$DDDPb)
        (transcoder-error-handling-mode . g$11496$DDDPb)
        (transcoder-eol-style . g$11495$DDDPb)
        (transcoder-codec . g$11494$DDDPb)
        (transcoded-port . g$11493$DDDPb)
        (textual-port? . g$11492$DDDPb)
        (string->bytevector . g$11491$DDDPb)
        (standard-output-port . g$11490$DDDPb)
        (standard-input-port . g$11489$DDDPb)
        (standard-error-port . g$11488$DDDPb)
        (set-port-position! . g$11487$DDDPb)
        (put-u8 . g$11486$DDDPb)
        (put-string . g$11485$DDDPb)
        (put-datum . g$6571$DDDPb)
        (put-char . g$11484$DDDPb)
        (put-bytevector . g$11483$DDDPb)
        (port? . g$6576$DDDPb)
        (port-transcoder . g$11482$DDDPb)
        (port-position . g$11481$DDDPb)
        (port-has-set-port-position!? . g$11480$DDDPb)
        (port-has-port-position? . g$11479$DDDPb)
        (port-eof? . g$11478$DDDPb)
        (output-port-buffer-mode . g$11477$DDDPb)
        (open-string-output-port . g$6575$DDDPb)
        (open-string-input-port . g$11476$DDDPb)
        (open-file-output-port . g$11475$DDDPb)
        (open-file-input/output-port . g$11474$DDDPb)
        (open-file-input-port . g$11473$DDDPb)
        (open-bytevector-output-port . g$11472$DDDPb)
        (open-bytevector-input-port . g$11471$DDDPb)
        (native-transcoder . g$11470$DDDPb)
        (native-eol-style . g$11469$DDDPb)
        (make-transcoder . g$11468$DDDPb)
        (latin-1-codec . g$11467$DDDPb)
        (make-i/o-write-error . g$6039$DDDPb)
        (make-i/o-read-error . g$6026$DDDPb)
        (make-i/o-port-error . g$6134$DDDPb)
        (make-i/o-invalid-position-error . g$6052$DDDPb)
        (make-i/o-filename-error . g$6067$DDDPb)
        (make-i/o-file-protection-error . g$6082$DDDPb)
        (make-i/o-file-is-read-only-error . g$6095$DDDPb)
        (make-i/o-file-does-not-exist-error . g$6121$DDDPb)
        (make-i/o-file-already-exists-error . g$6108$DDDPb)
        (make-i/o-error . g$6013$DDDPb)
        (make-i/o-encoding-error . g$6162$DDDPb)
        (make-i/o-decoding-error . g$6149$DDDPb)
        (make-custom-textual-output-port . g$11466$DDDPb)
        (make-custom-textual-input/output-port . g$11465$DDDPb)
        (make-custom-textual-input-port . g$11464$DDDPb)
        (make-custom-binary-output-port . g$11463$DDDPb)
        (make-custom-binary-input/output-port . g$11462$DDDPb)
        (make-custom-binary-input-port . g$11461$DDDPb)
        (lookahead-u8 . g$11459$DDDPb)
        (lookahead-char . g$11458$DDDPb)
        (i/o-write-error? . g$6040$DDDPb)
        (i/o-read-error? . g$6027$DDDPb)
        (i/o-port-error? . g$6136$DDDPb)
        (i/o-invalid-position-error? . g$6054$DDDPb)
        (i/o-error-position . g$6055$DDDPb)
        (i/o-filename-error? . g$6069$DDDPb)
        (i/o-file-protection-error? . g$6083$DDDPb)
        (i/o-file-is-read-only-error? . g$6096$DDDPb)
        (i/o-file-does-not-exist-error? . g$6122$DDDPb)
        (i/o-file-already-exists-error? . g$6109$DDDPb)
        (i/o-error? . g$6014$DDDPb)
        (i/o-error-port . g$6137$DDDPb)
        (i/o-error-filename . g$6070$DDDPb)
        (i/o-encoding-error? . g$6164$DDDPb)
        (i/o-encoding-error-char . g$6165$DDDPb)
        (i/o-decoding-error? . g$6150$DDDPb)
        (get-u8 . g$11457$DDDPb)
        (get-string-n! . g$11456$DDDPb)
        (get-string-n . g$11455$DDDPb)
        (get-string-all . g$11454$DDDPb)
        (get-line . g$11453$DDDPb)
        (get-datum . g$6572$DDDPb)
        (get-char . g$11452$DDDPb)
        (get-bytevector-some . g$11451$DDDPb)
        (get-bytevector-n! . g$11450$DDDPb)
        (get-bytevector-n . g$11449$DDDPb)
        (get-bytevector-all . g$11448$DDDPb)
        (flush-output-port . g$11447$DDDPb)
        (close-port . g$11446$DDDPb)
        (call-with-string-output-port . g$6577$DDDPb)
        (call-with-port . g$6578$DDDPb)
        (call-with-bytevector-output-port . g$11445$DDDPb)
        (bytevector->string . g$11444$DDDPb)
        (buffer-mode? . g$11443$DDDPb)
        (binary-port? . g$11442$DDDPb)
        (&i/o-encoding . g$11228$DDDPb)
        (&i/o-decoding . g$11227$DDDPb)
        (&i/o-port . g$11226$DDDPb)
        (&i/o-file-does-not-exist . g$11225$DDDPb)
        (&i/o-file-already-exists . g$11224$DDDPb)
        (&i/o-file-is-read-only . g$11223$DDDPb)
        (&i/o-file-protection . g$11222$DDDPb)
        (&i/o-filename . g$11221$DDDPb)
        (&i/o-invalid-position . g$11220$DDDPb)
        (&i/o-write . g$11219$DDDPb)
        (&i/o-read . g$11218$DDDPb)
        (&i/o . g$11217$DDDPb)
        (error-handling-mode . g$11190$DDDPb)
        (file-options . g$11189$DDDPb)
        (buffer-mode . g$11188$DDDPb)
        (eol-style . g$11187$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11626$DDDPb
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$6663$DDDPb)
        (enum-set=? . g$6670$DDDPb)
        (enum-set-universe . g$6664$DDDPb)
        (enum-set-union . g$6671$DDDPb)
        (enum-set-subset? . g$6669$DDDPb)
        (enum-set-projection . g$6675$DDDPb)
        (enum-set-member? . g$6668$DDDPb)
        (enum-set-intersection . g$6672$DDDPb)
        (enum-set-indexer . g$6665$DDDPb)
        (enum-set-difference . g$6673$DDDPb)
        (enum-set-constructor . g$6666$DDDPb)
        (enum-set-complement . g$6674$DDDPb)
        (enum-set->list . g$6667$DDDPb)
        (define-enumeration . g$11201$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11627$DDDPb
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$5931$DDDPb)
        (warning? . g$5850$DDDPb)
        (violation? . g$5889$DDDPb)
        (undefined-violation? . g$6001$DDDPb)
        (syntax-violation? . g$5986$DDDPb)
        (syntax-violation-subform . g$5988$DDDPb)
        (syntax-violation-form . g$5987$DDDPb)
        (simple-conditions . g$11433$DDDPb)
        (serious-condition? . g$5863$DDDPb)
        (non-continuable-violation? . g$5945$DDDPb)
        (message-condition? . g$5836$DDDPb)
        (make-who-condition . g$5929$DDDPb)
        (make-warning . g$5849$DDDPb)
        (make-violation . g$5888$DDDPb)
        (make-undefined-violation . g$6000$DDDPb)
        (make-syntax-violation . g$5983$DDDPb)
        (make-serious-condition . g$5862$DDDPb)
        (make-non-continuable-violation . g$5944$DDDPb)
        (make-message-condition . g$5834$DDDPb)
        (make-lexical-violation . g$5970$DDDPb)
        (make-irritants-condition . g$5914$DDDPb)
        (make-implementation-restriction-violation . g$5957$DDDPb)
        (make-error . g$5875$DDDPb)
        (make-assertion-violation . g$5901$DDDPb)
        (lexical-violation? . g$5971$DDDPb)
        (irritants-condition? . g$5916$DDDPb)
        (implementation-restriction-violation? . g$5958$DDDPb)
        (error? . g$5876$DDDPb)
        (condition-who . g$5932$DDDPb)
        (condition-predicate . g$11432$DDDPb)
        (condition-message . g$5837$DDDPb)
        (condition-irritants . g$5917$DDDPb)
        (condition-accessor . g$11431$DDDPb)
        (condition . g$11430$DDDPb)
        (assertion-violation? . g$5902$DDDPb)
        (condition? . g$11429$DDDPb)
        (&non-continuable . g$11216$DDDPb)
        (&undefined . g$11215$DDDPb)
        (&syntax . g$11214$DDDPb)
        (&lexical . g$11213$DDDPb)
        (&implementation-restriction . g$11212$DDDPb)
        (&who . g$11211$DDDPb)
        (&irritants . g$11210$DDDPb)
        (&assertion . g$11209$DDDPb)
        (&violation . g$11208$DDDPb)
        (&error . g$11207$DDDPb)
        (&serious . g$11206$DDDPb)
        (&warning . g$11205$DDDPb)
        (&message . g$11204$DDDPb)
        (&condition . g$11203$DDDPb)
        (define-condition-type . g$11202$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11628$DDDPb
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$11536$DDDPb)
        (record-type-uid . g$11535$DDDPb)
        (record-type-sealed? . g$11534$DDDPb)
        (record-type-parent . g$11533$DDDPb)
        (record-type-opaque? . g$11532$DDDPb)
        (record-type-name . g$11531$DDDPb)
        (record-type-generative? . g$11530$DDDPb)
        (record-type-field-names . g$11529$DDDPb)
        (record-rtd . g$11528$DDDPb)
        (record-field-mutable? . g$11527$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11629$DDDPb
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$11543$DDDPb)
        (record-predicate . g$11542$DDDPb)
        (record-mutator . g$11541$DDDPb)
        (record-constructor . g$11540$DDDPb)
        (record-accessor . g$11539$DDDPb)
        (make-record-type-descriptor . g$11538$DDDPb)
        (make-record-constructor-descriptor . g$11537$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11630$DDDPb
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11200$DDDPb)
        (parent-rtd . g$11199$DDDPb)
        (nongenerative . g$11198$DDDPb)
        (opaque . g$11197$DDDPb)
        (sealed . g$11196$DDDPb)
        (protocol . g$11195$DDDPb)
        (parent . g$11194$DDDPb)
        (immutable . g$11193$DDDPb)
        (mutable . g$11192$DDDPb)
        (fields . g$11191$DDDPb)
        (record-constructor-descriptor . g$11152$DDDPb)
        (record-type-descriptor . g$11151$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9091$DDDPb
      'g$11631$DDDPb
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$7970$DDDPb)
        (&no-nans-rcd . g$6193$DDDPb)
        (&no-nans-rtd . g$6192$DDDPb)
        (&no-infinities-rcd . g$6180$DDDPb)
        (&no-infinities-rtd . g$6179$DDDPb)
        (&i/o-encoding-rcd . g$6167$DDDPb)
        (&i/o-encoding-rtd . g$6166$DDDPb)
        (&i/o-decoding-rcd . g$6152$DDDPb)
        (&i/o-decoding-rtd . g$6151$DDDPb)
        (&i/o-port-rcd . g$6139$DDDPb)
        (&i/o-port-rtd . g$6138$DDDPb)
        (&i/o-file-does-not-exist-rcd . g$6124$DDDPb)
        (&i/o-file-does-not-exist-rtd . g$6123$DDDPb)
        (&i/o-file-already-exists-rcd . g$6111$DDDPb)
        (&i/o-file-already-exists-rtd . g$6110$DDDPb)
        (&i/o-file-is-read-only-rcd . g$6098$DDDPb)
        (&i/o-file-is-read-only-rtd . g$6097$DDDPb)
        (&i/o-file-protection-rcd . g$6085$DDDPb)
        (&i/o-file-protection-rtd . g$6084$DDDPb)
        (&i/o-filename-rcd . g$6072$DDDPb)
        (&i/o-filename-rtd . g$6071$DDDPb)
        (&i/o-invalid-position-rcd . g$6057$DDDPb)
        (&i/o-invalid-position-rtd . g$6056$DDDPb)
        (&i/o-write-rcd . g$6042$DDDPb)
        (&i/o-write-rtd . g$6041$DDDPb)
        (&i/o-read-rcd . g$6029$DDDPb)
        (&i/o-read-rtd . g$6028$DDDPb)
        (&i/o-rcd . g$6016$DDDPb)
        (&i/o-rtd . g$6015$DDDPb)
        (&undefined-rcd . g$6003$DDDPb)
        (&undefined-rtd . g$6002$DDDPb)
        (&syntax-rcd . g$5990$DDDPb)
        (&syntax-rtd . g$5989$DDDPb)
        (&lexical-rcd . g$5973$DDDPb)
        (&lexical-rtd . g$5972$DDDPb)
        (&implementation-restriction-rcd . g$5960$DDDPb)
        (&implementation-restriction-rtd . g$5959$DDDPb)
        (&non-continuable-rcd . g$5947$DDDPb)
        (&non-continuable-rtd . g$5946$DDDPb)
        (&who-rcd . g$5934$DDDPb)
        (&who-rtd . g$5933$DDDPb)
        (&irritants-rcd . g$5919$DDDPb)
        (&irritants-rtd . g$5918$DDDPb)
        (&assertion-rcd . g$5904$DDDPb)
        (&assertion-rtd . g$5903$DDDPb)
        (&violation-rcd . g$5891$DDDPb)
        (&violation-rtd . g$5890$DDDPb)
        (&error-rcd . g$5878$DDDPb)
        (&error-rtd . g$5877$DDDPb)
        (&serious-rcd . g$5865$DDDPb)
        (&serious-rtd . g$5864$DDDPb)
        (&warning-rcd . g$5852$DDDPb)
        (&warning-rtd . g$5851$DDDPb)
        (&message-rcd . g$5839$DDDPb)
        (&message-rtd . g$5838$DDDPb)
        (&condition-rcd . g$5799$DDDPb)
        (&condition-rtd . g$5798$DDDPb)
        (library-letrec* . g$11595$DDDPb)
        (annotation-stripped . g$11594$DDDPb)
        (annotation-source . g$11593$DDDPb)
        (annotation-expression . g$11592$DDDPb)
        (annotation? . g$11591$DDDPb)
        (read-annotated . g$11590$DDDPb)
        (tanh . g$11589$DDDPb)
        (cosh . g$11588$DDDPb)
        (sinh . g$11587$DDDPb)
        (make-guid . g$11586$DDDPb)
        (unspecified? . g$11585$DDDPb)
        (make-list . g$5042$DDDPb)
        (last-pair . g$5041$DDDPb)
        (load-r5rs . g$11584$DDDPb)
        (license . g$11583$DDDPb)
        (stacktrace . g$11582$DDDPb)
        (ironscheme-build . g$11078$DDDPb)
        (define-clr-class-internal . g$11581$DDDPb)
        (clr-field-set!-internal . g$11580$DDDPb)
        (clr-field-get-internal . g$11579$DDDPb)
        (clr-cast-internal . g$11578$DDDPb)
        (clr-call-internal . g$11577$DDDPb)
        (clr-new-internal . g$11576$DDDPb)
        (clr-new-array-internal . g$11575$DDDPb)
        (clr-is-internal . g$11574$DDDPb)
        (clr-reference-internal . g$11573$DDDPb)
        (clr-using-internal . g$11572$DDDPb)
        (syntax-error . g$8089$DDDPb)
        (syntax-dispatch . g$7965$DDDPb)
        (compile-core . g$11571$DDDPb)
        (eval-core . g$11570$DDDPb)
        (remove-location . g$11569$DDDPb)
        (set-symbol-value! . g$11568$DDDPb)
        (symbol-value . g$11567$DDDPb)
        (symbol-bound? . g$11566$DDDPb)
        (ungensym . g$11565$DDDPb)
        (gensym . g$11564$DDDPb)
        (void . g$11563$DDDPb)
        (load-serialized-library . g$11562$DDDPb)
        (serialize-library . g$11561$DDDPb)
        (compile-system-libraries . g$11081$DDDPb)
        (compile->closure . g$11083$DDDPb)
        (compile . g$11082$DDDPb)
        (load . g$11077$DDDPb)
        (string-normalize . g$11560$DDDPb)
        (interaction-environment . g$8099$DDDPb)
        (char-ready? . g$11559$DDDPb)
        (string-upcase . g$11558$DDDPb)
        (string-titlecase . g$11557$DDDPb)
        (string-normalize-nfkd . g$6276$DDDPb)
        (string-normalize-nfkc . g$6275$DDDPb)
        (string-normalize-nfd . g$6274$DDDPb)
        (string-normalize-nfc . g$6273$DDDPb)
        (string-foldcase . g$11556$DDDPb)
        (string-downcase . g$11555$DDDPb)
        (string-ci>? . g$6260$DDDPb)
        (string-ci>=? . g$6262$DDDPb)
        (string-ci=? . g$6258$DDDPb)
        (string-ci<? . g$6259$DDDPb)
        (string-ci<=? . g$6261$DDDPb)
        (char-whitespace? . g$11554$DDDPb)
        (char-upper-case? . g$11553$DDDPb)
        (char-title-case? . g$11552$DDDPb)
        (char-numeric? . g$11551$DDDPb)
        (char-lower-case? . g$11550$DDDPb)
        (char-general-category . g$11549$DDDPb)
        (char-upcase . g$11548$DDDPb)
        (char-titlecase . g$11547$DDDPb)
        (char-foldcase . g$11546$DDDPb)
        (char-downcase . g$11545$DDDPb)
        (char-ci>? . g$6270$DDDPb)
        (char-ci>=? . g$6272$DDDPb)
        (char-ci=? . g$6268$DDDPb)
        (char-ci<? . g$6269$DDDPb)
        (char-ci<=? . g$6271$DDDPb)
        (char-alphabetic? . g$11544$DDDPb)
        (variable-transformer-procedure . g$7777$DDDPb)
        (variable-transformer? . g$7776$DDDPb)
        (make-variable-transformer . g$7774$DDDPb)
        (identifier? . g$8093$DDDPb)
        (generate-temporaries . g$8082$DDDPb)
        (free-identifier=? . g$8083$DDDPb)
        (syntax->datum . g$8095$DDDPb)
        (datum->syntax . g$8094$DDDPb)
        (bound-identifier=? . g$8084$DDDPb)
        (record-type-descriptor? . g$11543$DDDPb)
        (record-predicate . g$11542$DDDPb)
        (record-mutator . g$11541$DDDPb)
        (record-constructor . g$11540$DDDPb)
        (record-accessor . g$11539$DDDPb)
        (make-record-type-descriptor . g$11538$DDDPb)
        (make-record-constructor-descriptor . g$11537$DDDPb)
        (record? . g$11536$DDDPb)
        (record-type-uid . g$11535$DDDPb)
        (record-type-sealed? . g$11534$DDDPb)
        (record-type-parent . g$11533$DDDPb)
        (record-type-opaque? . g$11532$DDDPb)
        (record-type-name . g$11531$DDDPb)
        (record-type-generative? . g$11530$DDDPb)
        (record-type-field-names . g$11529$DDDPb)
        (record-rtd . g$11528$DDDPb)
        (record-field-mutable? . g$11527$DDDPb)
        (delete-file . g$5667$DDDPb)
        (file-exists? . g$5666$DDDPb)
        (vector-sort! . g$11526$DDDPb)
        (vector-sort . g$11525$DDDPb)
        (list-sort . g$6229$DDDPb)
        (symbol-hash . g$11524$DDDPb)
        (string-ci-hash . g$11523$DDDPb)
        (string-hash . g$11522$DDDPb)
        (equal-hash . g$11521$DDDPb)
        (hashtable-equivalence-function . g$11520$DDDPb)
        (make-hashtable . g$11519$DDDPb)
        (hashtable-hash-function . g$11518$DDDPb)
        (make-eqv-hashtable . g$5635$DDDPb)
        (make-eq-hashtable . g$5634$DDDPb)
        (hashtable? . g$11517$DDDPb)
        (hashtable-update! . g$5641$DDDPb)
        (hashtable-size . g$5636$DDDPb)
        (hashtable-set! . g$5638$DDDPb)
        (hashtable-ref . g$5637$DDDPb)
        (hashtable-mutable? . g$11516$DDDPb)
        (hashtable-keys . g$11515$DDDPb)
        (hashtable-entries . g$11514$DDDPb)
        (hashtable-delete! . g$5639$DDDPb)
        (hashtable-copy . g$11513$DDDPb)
        (hashtable-contains? . g$5640$DDDPb)
        (hashtable-clear! . g$5642$DDDPb)
        (call-with-output-file . g$6602$DDDPb)
        (call-with-input-file . g$6601$DDDPb)
        (write-char . g$6593$DDDPb)
        (write . g$11512$DDDPb)
        (with-output-to-file . g$6600$DDDPb)
        (with-input-from-file . g$6599$DDDPb)
        (read-char . g$6592$DDDPb)
        (read . g$11511$DDDPb)
        (peek-char . g$6591$DDDPb)
        (open-output-file . g$11510$DDDPb)
        (open-input-file . g$11509$DDDPb)
        (newline . g$6603$DDDPb)
        (display . g$11508$DDDPb)
        (close-output-port . g$11507$DDDPb)
        (close-input-port . g$11506$DDDPb)
        (eof-object? . g$11505$DDDPb)
        (eof-object . g$11504$DDDPb)
        (current-error-port . g$11503$DDDPb)
        (current-output-port . g$11502$DDDPb)
        (current-input-port . g$11501$DDDPb)
        (output-port? . g$11500$DDDPb)
        (input-port? . g$11499$DDDPb)
        (utf-8-codec . g$11498$DDDPb)
        (utf-16-codec . g$11497$DDDPb)
        (transcoder-error-handling-mode . g$11496$DDDPb)
        (transcoder-eol-style . g$11495$DDDPb)
        (transcoder-codec . g$11494$DDDPb)
        (transcoded-port . g$11493$DDDPb)
        (textual-port? . g$11492$DDDPb)
        (string->bytevector . g$11491$DDDPb)
        (standard-output-port . g$11490$DDDPb)
        (standard-input-port . g$11489$DDDPb)
        (standard-error-port . g$11488$DDDPb)
        (set-port-position! . g$11487$DDDPb)
        (put-u8 . g$11486$DDDPb)
        (put-string . g$11485$DDDPb)
        (put-datum . g$6571$DDDPb)
        (put-char . g$11484$DDDPb)
        (put-bytevector . g$11483$DDDPb)
        (port? . g$6576$DDDPb)
        (port-transcoder . g$11482$DDDPb)
        (port-position . g$11481$DDDPb)
        (port-has-set-port-position!? . g$11480$DDDPb)
        (port-has-port-position? . g$11479$DDDPb)
        (port-eof? . g$11478$DDDPb)
        (output-port-buffer-mode . g$11477$DDDPb)
        (open-string-output-port . g$6575$DDDPb)
        (open-string-input-port . g$11476$DDDPb)
        (open-file-output-port . g$11475$DDDPb)
        (open-file-input/output-port . g$11474$DDDPb)
        (open-file-input-port . g$11473$DDDPb)
        (open-bytevector-output-port . g$11472$DDDPb)
        (open-bytevector-input-port . g$11471$DDDPb)
        (native-transcoder . g$11470$DDDPb)
        (native-eol-style . g$11469$DDDPb)
        (make-transcoder . g$11468$DDDPb)
        (latin-1-codec . g$11467$DDDPb)
        (make-i/o-write-error . g$6039$DDDPb)
        (make-i/o-read-error . g$6026$DDDPb)
        (make-i/o-port-error . g$6134$DDDPb)
        (make-i/o-invalid-position-error . g$6052$DDDPb)
        (make-i/o-filename-error . g$6067$DDDPb)
        (make-i/o-file-protection-error . g$6082$DDDPb)
        (make-i/o-file-is-read-only-error . g$6095$DDDPb)
        (make-i/o-file-does-not-exist-error . g$6121$DDDPb)
        (make-i/o-file-already-exists-error . g$6108$DDDPb)
        (make-i/o-error . g$6013$DDDPb)
        (make-i/o-encoding-error . g$6162$DDDPb)
        (make-i/o-decoding-error . g$6149$DDDPb)
        (make-custom-textual-output-port . g$11466$DDDPb)
        (make-custom-textual-input/output-port . g$11465$DDDPb)
        (make-custom-textual-input-port . g$11464$DDDPb)
        (make-custom-binary-output-port . g$11463$DDDPb)
        (make-custom-binary-input/output-port . g$11462$DDDPb)
        (make-custom-binary-input-port . g$11461$DDDPb)
        (make-bytevector . g$11460$DDDPb)
        (lookahead-u8 . g$11459$DDDPb)
        (lookahead-char . g$11458$DDDPb)
        (i/o-write-error? . g$6040$DDDPb)
        (i/o-read-error? . g$6027$DDDPb)
        (i/o-port-error? . g$6136$DDDPb)
        (i/o-invalid-position-error? . g$6054$DDDPb)
        (i/o-error-position . g$6055$DDDPb)
        (i/o-filename-error? . g$6069$DDDPb)
        (i/o-file-protection-error? . g$6083$DDDPb)
        (i/o-file-is-read-only-error? . g$6096$DDDPb)
        (i/o-file-does-not-exist-error? . g$6122$DDDPb)
        (i/o-file-already-exists-error? . g$6109$DDDPb)
        (i/o-error? . g$6014$DDDPb)
        (i/o-error-port . g$6137$DDDPb)
        (i/o-error-filename . g$6070$DDDPb)
        (i/o-encoding-error? . g$6164$DDDPb)
        (i/o-encoding-error-char . g$6165$DDDPb)
        (i/o-decoding-error? . g$6150$DDDPb)
        (get-u8 . g$11457$DDDPb)
        (get-string-n! . g$11456$DDDPb)
        (get-string-n . g$11455$DDDPb)
        (get-string-all . g$11454$DDDPb)
        (get-line . g$11453$DDDPb)
        (get-datum . g$6572$DDDPb)
        (get-char . g$11452$DDDPb)
        (get-bytevector-some . g$11451$DDDPb)
        (get-bytevector-n! . g$11450$DDDPb)
        (get-bytevector-n . g$11449$DDDPb)
        (get-bytevector-all . g$11448$DDDPb)
        (flush-output-port . g$11447$DDDPb)
        (close-port . g$11446$DDDPb)
        (call-with-string-output-port . g$6577$DDDPb)
        (call-with-port . g$6578$DDDPb)
        (call-with-bytevector-output-port . g$11445$DDDPb)
        (bytevector->string . g$11444$DDDPb)
        (buffer-mode? . g$11443$DDDPb)
        (binary-port? . g$11442$DDDPb)
        (scheme-report-environment . g$8072$DDDPb)
        (quotient . g$6208$DDDPb)
        (null-environment . g$8071$DDDPb)
        (remainder . g$6209$DDDPb)
        (modulo . g$6210$DDDPb)
        (inexact->exact . g$6205$DDDPb)
        (force . g$6212$DDDPb)
        (exact->inexact . g$6206$DDDPb)
        (exit . g$11441$DDDPb)
        (command-line . g$11073$DDDPb)
        (string-fill! . g$11440$DDDPb)
        (string-set! . g$11439$DDDPb)
        (set-cdr! . g$11438$DDDPb)
        (set-car! . g$11437$DDDPb)
        (remove . g$5064$DDDPb)
        (remv . g$5065$DDDPb)
        (remp . g$5045$DDDPb)
        (remq . g$5066$DDDPb)
        (partition . g$5044$DDDPb)
        (memv . g$5052$DDDPb)
        (memq . g$5051$DDDPb)
        (memp . g$5054$DDDPb)
        (member . g$5053$DDDPb)
        (exists . g$5058$DDDPb)
        (for-all . g$5057$DDDPb)
        (fold-right . g$5063$DDDPb)
        (fold-left . g$5062$DDDPb)
        (find . g$5043$DDDPb)
        (filter . g$5046$DDDPb)
        (cons* . g$5061$DDDPb)
        (assv . g$5048$DDDPb)
        (assq . g$5047$DDDPb)
        (assp . g$5050$DDDPb)
        (assoc . g$5049$DDDPb)
        (with-exception-handler . g$11436$DDDPb)
        (raise-continuable . g$11435$DDDPb)
        (raise . g$11434$DDDPb)
        (eval . g$8074$DDDPb)
        (environment . g$8070$DDDPb)
        (make-enumeration . g$6663$DDDPb)
        (enum-set=? . g$6670$DDDPb)
        (enum-set-universe . g$6664$DDDPb)
        (enum-set-union . g$6671$DDDPb)
        (enum-set-subset? . g$6669$DDDPb)
        (enum-set-projection . g$6675$DDDPb)
        (enum-set-member? . g$6668$DDDPb)
        (enum-set-intersection . g$6672$DDDPb)
        (enum-set-indexer . g$6665$DDDPb)
        (enum-set-difference . g$6673$DDDPb)
        (enum-set-constructor . g$6666$DDDPb)
        (enum-set-complement . g$6674$DDDPb)
        (enum-set->list . g$6667$DDDPb)
        (who-condition? . g$5931$DDDPb)
        (warning? . g$5850$DDDPb)
        (violation? . g$5889$DDDPb)
        (undefined-violation? . g$6001$DDDPb)
        (syntax-violation? . g$5986$DDDPb)
        (syntax-violation-subform . g$5988$DDDPb)
        (syntax-violation-form . g$5987$DDDPb)
        (syntax-violation . g$8092$DDDPb)
        (simple-conditions . g$11433$DDDPb)
        (serious-condition? . g$5863$DDDPb)
        (non-continuable-violation? . g$5945$DDDPb)
        (message-condition? . g$5836$DDDPb)
        (make-who-condition . g$5929$DDDPb)
        (make-warning . g$5849$DDDPb)
        (make-violation . g$5888$DDDPb)
        (make-undefined-violation . g$6000$DDDPb)
        (make-syntax-violation . g$5983$DDDPb)
        (make-serious-condition . g$5862$DDDPb)
        (make-non-continuable-violation . g$5944$DDDPb)
        (make-message-condition . g$5834$DDDPb)
        (make-lexical-violation . g$5970$DDDPb)
        (make-irritants-condition . g$5914$DDDPb)
        (make-implementation-restriction-violation . g$5957$DDDPb)
        (make-error . g$5875$DDDPb)
        (make-assertion-violation . g$5901$DDDPb)
        (lexical-violation? . g$5971$DDDPb)
        (irritants-condition? . g$5916$DDDPb)
        (implementation-restriction-violation? . g$5958$DDDPb)
        (error? . g$5876$DDDPb)
        (condition-who . g$5932$DDDPb)
        (condition-predicate . g$11432$DDDPb)
        (condition-message . g$5837$DDDPb)
        (condition-irritants . g$5917$DDDPb)
        (condition-accessor . g$11431$DDDPb)
        (condition . g$11430$DDDPb)
        (assertion-violation? . g$5902$DDDPb)
        (condition? . g$11429$DDDPb)
        (utf32->string . g$11428$DDDPb)
        (utf16->string . g$11427$DDDPb)
        (utf8->string . g$11426$DDDPb)
        (uint-list->bytevector . g$11425$DDDPb)
        (u8-list->bytevector . g$11424$DDDPb)
        (string->utf8 . g$11423$DDDPb)
        (string->utf32 . g$11422$DDDPb)
        (string->utf16 . g$11421$DDDPb)
        (sint-list->bytevector . g$11420$DDDPb)
        (native-endianness . g$5673$DDDPb)
        (bytevector? . g$5363$DDDPb)
        (bytevector=? . g$11419$DDDPb)
        (bytevector-uint-set! . g$11418$DDDPb)
        (bytevector-uint-ref . g$11417$DDDPb)
        (bytevector-u8-set! . g$11416$DDDPb)
        (bytevector-u8-ref . g$11415$DDDPb)
        (bytevector-u64-set! . g$5694$DDDPb)
        (bytevector-u64-ref . g$5690$DDDPb)
        (bytevector-u64-native-set! . g$5696$DDDPb)
        (bytevector-u64-native-ref . g$5692$DDDPb)
        (bytevector-u32-set! . g$5686$DDDPb)
        (bytevector-u32-ref . g$5682$DDDPb)
        (bytevector-u32-native-set! . g$5688$DDDPb)
        (bytevector-u32-native-ref . g$5684$DDDPb)
        (bytevector-u16-set! . g$5678$DDDPb)
        (bytevector-u16-ref . g$5674$DDDPb)
        (bytevector-u16-native-set! . g$5680$DDDPb)
        (bytevector-u16-native-ref . g$5676$DDDPb)
        (bytevector-sint-set! . g$11414$DDDPb)
        (bytevector-sint-ref . g$11413$DDDPb)
        (bytevector-s8-set! . g$11412$DDDPb)
        (bytevector-s8-ref . g$11411$DDDPb)
        (bytevector-s64-set! . g$5695$DDDPb)
        (bytevector-s64-ref . g$5691$DDDPb)
        (bytevector-s64-native-set! . g$5697$DDDPb)
        (bytevector-s64-native-ref . g$5693$DDDPb)
        (bytevector-s32-set! . g$5687$DDDPb)
        (bytevector-s32-ref . g$5683$DDDPb)
        (bytevector-s32-native-set! . g$5689$DDDPb)
        (bytevector-s32-native-ref . g$5685$DDDPb)
        (bytevector-s16-set! . g$5679$DDDPb)
        (bytevector-s16-ref . g$5675$DDDPb)
        (bytevector-s16-native-set! . g$5681$DDDPb)
        (bytevector-s16-native-ref . g$5677$DDDPb)
        (bytevector-length . g$11410$DDDPb)
        (bytevector-ieee-single-set! . g$11409$DDDPb)
        (bytevector-ieee-single-ref . g$11408$DDDPb)
        (bytevector-ieee-single-native-set! . g$5700$DDDPb)
        (bytevector-ieee-single-native-ref . g$5698$DDDPb)
        (bytevector-ieee-double-set! . g$11407$DDDPb)
        (bytevector-ieee-double-ref . g$11406$DDDPb)
        (bytevector-ieee-double-native-set! . g$5701$DDDPb)
        (bytevector-ieee-double-native-ref . g$5699$DDDPb)
        (bytevector-fill! . g$11405$DDDPb)
        (bytevector-copy! . g$11404$DDDPb)
        (bytevector-copy . g$11403$DDDPb)
        (bytevector->uint-list . g$11402$DDDPb)
        (bytevector->u8-list . g$11401$DDDPb)
        (bytevector->sint-list . g$11400$DDDPb)
        (no-nans-violation? . g$6191$DDDPb)
        (no-infinities-violation? . g$6178$DDDPb)
        (make-no-nans-violation . g$6190$DDDPb)
        (make-no-infinities-violation . g$6177$DDDPb)
        (real->flonum . g$11399$DDDPb)
        (flzero? . g$6491$DDDPb)
        (fltruncate . g$6486$DDDPb)
        (fltan . g$6476$DDDPb)
        (flsqrt . g$6481$DDDPb)
        (flsin . g$6474$DDDPb)
        (flround . g$6487$DDDPb)
        (flpositive? . g$6489$DDDPb)
        (flonum? . g$5368$DDDPb)
        (flodd? . g$6493$DDDPb)
        (flnumerator . g$11398$DDDPb)
        (flnegative? . g$6490$DDDPb)
        (flnan? . g$6473$DDDPb)
        (flmod0 . g$6469$DDDPb)
        (flmod . g$6468$DDDPb)
        (flmin . g$6495$DDDPb)
        (flmax . g$6494$DDDPb)
        (fllog . g$6480$DDDPb)
        (flinteger? . g$6470$DDDPb)
        (flinfinite? . g$6472$DDDPb)
        (flfloor . g$6485$DDDPb)
        (flfinite? . g$6471$DDDPb)
        (flexpt . g$6483$DDDPb)
        (flexp . g$6482$DDDPb)
        (fleven? . g$6492$DDDPb)
        (fldiv0-and-mod0 . g$6465$DDDPb)
        (fldiv0 . g$6467$DDDPb)
        (fldiv-and-mod . g$6464$DDDPb)
        (fldiv . g$6466$DDDPb)
        (fldenominator . g$11397$DDDPb)
        (flcos . g$6475$DDDPb)
        (flceiling . g$6484$DDDPb)
        (flatan . g$6479$DDDPb)
        (flasin . g$6477$DDDPb)
        (flacos . g$6478$DDDPb)
        (flabs . g$6488$DDDPb)
        (fl>? . g$11396$DDDPb)
        (fl>=? . g$11395$DDDPb)
        (fl=? . g$11394$DDDPb)
        (fl<? . g$11393$DDDPb)
        (fl<=? . g$11392$DDDPb)
        (fl/ . g$11391$DDDPb)
        (fl- . g$11390$DDDPb)
        (fl+ . g$11389$DDDPb)
        (fl* . g$11388$DDDPb)
        (fixnum->flonum . g$11387$DDDPb)
        (fxzero? . g$6372$DDDPb)
        (fxxor . g$11386$DDDPb)
        (fxrotate-bit-field . g$6386$DDDPb)
        (fxreverse-bit-field . g$11385$DDDPb)
        (fxpositive? . g$6370$DDDPb)
        (fxodd? . g$6374$DDDPb)
        (fxnot . g$11384$DDDPb)
        (fxnegative? . g$6371$DDDPb)
        (fxmod0 . g$6369$DDDPb)
        (fxmod . g$6368$DDDPb)
        (fxmin . g$6376$DDDPb)
        (fxmax . g$6375$DDDPb)
        (fxlength . g$11383$DDDPb)
        (fxior . g$11382$DDDPb)
        (fxif . g$6380$DDDPb)
        (fxfirst-bit-set . g$11381$DDDPb)
        (fxeven? . g$6373$DDDPb)
        (fxdiv0-and-mod0 . g$11380$DDDPb)
        (fxdiv0 . g$6367$DDDPb)
        (fxdiv-and-mod . g$11379$DDDPb)
        (fxdiv . g$6366$DDDPb)
        (fxcopy-bit-field . g$6383$DDDPb)
        (fxcopy-bit . g$6381$DDDPb)
        (fxbit-set? . g$11378$DDDPb)
        (fxbit-field . g$6382$DDDPb)
        (fxbit-count . g$11377$DDDPb)
        (fxarithmetic-shift-right . g$6385$DDDPb)
        (fxarithmetic-shift-left . g$6384$DDDPb)
        (fxarithmetic-shift . g$11376$DDDPb)
        (fxand . g$11375$DDDPb)
        (fx>? . g$11374$DDDPb)
        (fx>=? . g$11373$DDDPb)
        (fx=? . g$11372$DDDPb)
        (fx<? . g$11371$DDDPb)
        (fx<=? . g$11370$DDDPb)
        (fx-/carry . g$6378$DDDPb)
        (fx- . g$11369$DDDPb)
        (fx+/carry . g$6379$DDDPb)
        (fx+ . g$11368$DDDPb)
        (fx*/carry . g$6377$DDDPb)
        (fx* . g$11367$DDDPb)
        (greatest-fixnum . g$11366$DDDPb)
        (least-fixnum . g$11365$DDDPb)
        (fixnum-width . g$5369$DDDPb)
        (fixnum? . g$5367$DDDPb)
        (bitwise-rotate-bit-field . g$6340$DDDPb)
        (bitwise-reverse-bit-field . g$11364$DDDPb)
        (bitwise-length . g$11363$DDDPb)
        (bitwise-if . g$6334$DDDPb)
        (bitwise-first-bit-set . g$11362$DDDPb)
        (bitwise-copy-bit-field . g$6337$DDDPb)
        (bitwise-copy-bit . g$6335$DDDPb)
        (bitwise-bit-set? . g$11361$DDDPb)
        (bitwise-bit-field . g$6336$DDDPb)
        (bitwise-bit-count . g$11360$DDDPb)
        (bitwise-xor . g$11359$DDDPb)
        (bitwise-ior . g$11358$DDDPb)
        (bitwise-and . g$11357$DDDPb)
        (bitwise-not . g$11356$DDDPb)
        (bitwise-arithmetic-shift-right . g$6339$DDDPb)
        (bitwise-arithmetic-shift-left . g$6338$DDDPb)
        (bitwise-arithmetic-shift . g$11355$DDDPb)
        (zero? . g$5402$DDDPb)
        (vector? . g$5362$DDDPb)
        (vector-set! . g$11354$DDDPb)
        (vector-ref . g$11353$DDDPb)
        (vector-map . g$5434$DDDPb)
        (vector-length . g$11352$DDDPb)
        (vector-for-each . g$5435$DDDPb)
        (vector-fill! . g$5370$DDDPb)
        (vector->list . g$11351$DDDPb)
        (vector . g$11350$DDDPb)
        (values . g$11349$DDDPb)
        (truncate . g$11348$DDDPb)
        (tan . g$11347$DDDPb)
        (symbol? . g$5364$DDDPb)
        (symbol=? . g$5419$DDDPb)
        (symbol->string . g$11346$DDDPb)
        (substring . g$11345$DDDPb)
        (string? . g$11344$DDDPb)
        (string>? . g$5416$DDDPb)
        (string>=? . g$5418$DDDPb)
        (string=? . g$5414$DDDPb)
        (string<? . g$5415$DDDPb)
        (string<=? . g$5417$DDDPb)
        (string-ref . g$11343$DDDPb)
        (string-length . g$11342$DDDPb)
        (string-for-each . g$5436$DDDPb)
        (string-copy . g$11341$DDDPb)
        (string-append . g$11340$DDDPb)
        (string->symbol . g$11339$DDDPb)
        (string->number . g$11338$DDDPb)
        (string->list . g$11337$DDDPb)
        (string . g$11336$DDDPb)
        (sqrt . g$11335$DDDPb)
        (sin . g$11334$DDDPb)
        (round . g$11333$DDDPb)
        (reverse . g$5371$DDDPb)
        (real? . g$11332$DDDPb)
        (real-valued? . g$11331$DDDPb)
        (real-part . g$11330$DDDPb)
        (rationalize . g$5431$DDDPb)
        (rational? . g$11329$DDDPb)
        (rational-valued? . g$11328$DDDPb)
        (procedure? . g$5366$DDDPb)
        (positive? . g$5400$DDDPb)
        (pair? . g$11327$DDDPb)
        (odd? . g$5404$DDDPb)
        (numerator . g$11326$DDDPb)
        (number? . g$11325$DDDPb)
        (number->string . g$11324$DDDPb)
        (null? . g$11323$DDDPb)
        (not . g$11322$DDDPb)
        (negative? . g$5401$DDDPb)
        (nan? . g$11321$DDDPb)
        (min . g$5406$DDDPb)
        (max . g$5405$DDDPb)
        (map . g$5059$DDDPb)
        (make-vector . g$11320$DDDPb)
        (make-string . g$11319$DDDPb)
        (make-rectangular . g$11318$DDDPb)
        (make-polar . g$11317$DDDPb)
        (magnitude . g$11316$DDDPb)
        (log . g$11315$DDDPb)
        (list? . g$11314$DDDPb)
        (list-tail . g$5039$DDDPb)
        (list-ref . g$5040$DDDPb)
        (list->vector . g$5359$DDDPb)
        (list->string . g$5360$DDDPb)
        (list . g$11313$DDDPb)
        (length . g$11312$DDDPb)
        (lcm . g$5408$DDDPb)
        (integer? . g$11311$DDDPb)
        (integer-valued? . g$11310$DDDPb)
        (integer->char . g$11309$DDDPb)
        (infinite? . g$11308$DDDPb)
        (inexact? . g$11307$DDDPb)
        (inexact . g$11306$DDDPb)
        (imag-part . g$11305$DDDPb)
        (gcd . g$5407$DDDPb)
        (for-each . g$5060$DDDPb)
        (floor . g$11304$DDDPb)
        (finite? . g$11303$DDDPb)
        (expt . g$11302$DDDPb)
        (exp . g$11301$DDDPb)
        (exact? . g$11300$DDDPb)
        (exact-integer-sqrt . g$11299$DDDPb)
        (exact . g$11298$DDDPb)
        (even? . g$5403$DDDPb)
        (error . g$11297$DDDPb)
        (eqv? . g$11296$DDDPb)
        (equal? . g$11295$DDDPb)
        (eq? . g$11294$DDDPb)
        (dynamic-wind . g$11293$DDDPb)
        (div0-and-mod0 . g$11292$DDDPb)
        (mod0 . g$5358$DDDPb)
        (div0 . g$5356$DDDPb)
        (div-and-mod . g$11291$DDDPb)
        (mod . g$5357$DDDPb)
        (div . g$5355$DDDPb)
        (denominator . g$11290$DDDPb)
        (cos . g$11289$DDDPb)
        (cons . g$11288$DDDPb)
        (complex? . g$11287$DDDPb)
        (char? . g$5361$DDDPb)
        (char>? . g$5428$DDDPb)
        (char>=? . g$5430$DDDPb)
        (char=? . g$5426$DDDPb)
        (char<? . g$5427$DDDPb)
        (char<=? . g$5429$DDDPb)
        (char->integer . g$11286$DDDPb)
        (ceiling . g$11285$DDDPb)
        (call-with-values . g$11284$DDDPb)
        (call/cc . g$11283$DDDPb)
        (call-with-current-continuation . g$11282$DDDPb)
        (cddddr . g$5399$DDDPb)
        (cdddar . g$5398$DDDPb)
        (cddadr . g$5397$DDDPb)
        (cddaar . g$5396$DDDPb)
        (cdaddr . g$5395$DDDPb)
        (cdadar . g$5394$DDDPb)
        (cdaadr . g$5393$DDDPb)
        (cdaaar . g$5392$DDDPb)
        (cadddr . g$5391$DDDPb)
        (caddar . g$5390$DDDPb)
        (cadadr . g$5389$DDDPb)
        (cadaar . g$5388$DDDPb)
        (caaddr . g$5387$DDDPb)
        (caadar . g$5386$DDDPb)
        (caaadr . g$5385$DDDPb)
        (caaaar . g$5384$DDDPb)
        (cdddr . g$5383$DDDPb)
        (cddar . g$5382$DDDPb)
        (cdadr . g$5381$DDDPb)
        (cdaar . g$5380$DDDPb)
        (caddr . g$5379$DDDPb)
        (cadar . g$5378$DDDPb)
        (caadr . g$5377$DDDPb)
        (caaar . g$5376$DDDPb)
        (cddr . g$5375$DDDPb)
        (cdar . g$5374$DDDPb)
        (cadr . g$5373$DDDPb)
        (caar . g$5372$DDDPb)
        (cdr . g$11281$DDDPb)
        (car . g$11280$DDDPb)
        (boolean? . g$5365$DDDPb)
        (boolean=? . g$5420$DDDPb)
        (atan . g$11279$DDDPb)
        (assertion-violation . g$11278$DDDPb)
        (asin . g$11277$DDDPb)
        (apply . g$11276$DDDPb)
        (append . g$11275$DDDPb)
        (angle . g$11274$DDDPb)
        (acos . g$11273$DDDPb)
        (abs . g$11272$DDDPb)
        (/ . g$11271$DDDPb)
        (* . g$11270$DDDPb)
        (- . g$11269$DDDPb)
        (+ . g$11268$DDDPb)
        (>= . g$11267$DDDPb)
        (> . g$11266$DDDPb)
        (= . g$11265$DDDPb)
        (<= . g$11264$DDDPb)
        (< . g$11263$DDDPb)
        (make-record-printer . g$11262$DDDPb)
        (eqv-hash . g$11261$DDDPb)
        (reverse! . g$11260$DDDPb)
        (deserialize-port . g$11259$DDDPb)
        (serialize-port . g$11258$DDDPb)
        (enum-set? . g$6640$DDDPb)
        (make-promise . g$6211$DDDPb)
        (load/unload . g$11076$DDDPb)
        (load/args . g$11075$DDDPb)
        (printf . g$6749$DDDPb)
        (fprintf . g$6750$DDDPb)
        (format . g$6751$DDDPb)
        (procedure-form . g$11257$DDDPb)
        (procedure-environment . g$11256$DDDPb)
        (procedure-name . g$11255$DDDPb)
        (procedure-arity . g$11254$DDDPb)
        (gc-collect . g$11253$DDDPb)
        (typeof . g$11252$DDDPb)
        (clr-type? . g$11251$DDDPb)
        (get-clr-type . g$11250$DDDPb)
        (get-command-line . g$11249$DDDPb)
        (vector-append . g$11248$DDDPb)
        (vector-filter . g$11247$DDDPb)
        (vector-reverse! . g$11246$DDDPb)
        (vector-contains? . g$11245$DDDPb)
        (vector-index-of . g$11244$DDDPb)
        (vector-copy . g$11243$DDDPb)
        (vector-binary-search . g$11242$DDDPb)
        (string-ci-compare . g$11241$DDDPb)
        (string-compare . g$11240$DDDPb)
        (string-format . g$11239$DDDPb)
        (trace-printer . g$11072$DDDPb)
        (make-traced-procedure . g$11238$DDDPb)
        (make-traced-macro . g$6771$DDDPb)
        (assertion-error . g$8088$DDDPb)
        (time-it . g$11237$DDDPb)
        (make-parameter . g$6778$DDDPb)
        (library-locator . g$11236$DDDPb)
        (get-library-paths . g$11235$DDDPb)
        (open-tcp-input/output-port . g$11234$DDDPb)
        (hashtable-for-each . g$11233$DDDPb)
        (hashtable-map . g$11232$DDDPb)
        (environment-bindings . g$8066$DDDPb)
        (environment-symbols . g$8069$DDDPb)
        (interaction-environment-symbols . g$8065$DDDPb)
        (optimization-level . g$11231$DDDPb)
        (library-path . g$7397$DDDPb)
        (make-compile-time-value . g$7775$DDDPb)
        (expand->core . g$8075$DDDPb)
        (expand . g$8073$DDDPb)
        (convert->cps . g$7094$DDDPb)
        (installed-libraries . g$7418$DDDPb)
        (uninstall-library . g$7409$DDDPb)
        (pretty-width . g$6853$DDDPb)
        (pretty-print . g$6855$DDDPb)
        (&no-nans . g$11230$DDDPb)
        (&no-infinities . g$11229$DDDPb)
        (&i/o-encoding . g$11228$DDDPb)
        (&i/o-decoding . g$11227$DDDPb)
        (&i/o-port . g$11226$DDDPb)
        (&i/o-file-does-not-exist . g$11225$DDDPb)
        (&i/o-file-already-exists . g$11224$DDDPb)
        (&i/o-file-is-read-only . g$11223$DDDPb)
        (&i/o-file-protection . g$11222$DDDPb)
        (&i/o-filename . g$11221$DDDPb)
        (&i/o-invalid-position . g$11220$DDDPb)
        (&i/o-write . g$11219$DDDPb)
        (&i/o-read . g$11218$DDDPb)
        (&i/o . g$11217$DDDPb)
        (&non-continuable . g$11216$DDDPb)
        (&undefined . g$11215$DDDPb)
        (&syntax . g$11214$DDDPb)
        (&lexical . g$11213$DDDPb)
        (&implementation-restriction . g$11212$DDDPb)
        (&who . g$11211$DDDPb)
        (&irritants . g$11210$DDDPb)
        (&assertion . g$11209$DDDPb)
        (&violation . g$11208$DDDPb)
        (&error . g$11207$DDDPb)
        (&serious . g$11206$DDDPb)
        (&warning . g$11205$DDDPb)
        (&message . g$11204$DDDPb)
        (&condition . g$11203$DDDPb)
        (define-condition-type . g$11202$DDDPb)
        (define-enumeration . g$11201$DDDPb)
        (define-record-type . g$11200$DDDPb)
        (parent-rtd . g$11199$DDDPb)
        (nongenerative . g$11198$DDDPb)
        (opaque . g$11197$DDDPb)
        (sealed . g$11196$DDDPb)
        (protocol . g$11195$DDDPb)
        (parent . g$11194$DDDPb)
        (immutable . g$11193$DDDPb)
        (mutable . g$11192$DDDPb)
        (fields . g$11191$DDDPb)
        (error-handling-mode . g$11190$DDDPb)
        (file-options . g$11189$DDDPb)
        (buffer-mode . g$11188$DDDPb)
        (eol-style . g$11187$DDDPb)
        (guard . g$11186$DDDPb)
        (trace-letrec-syntax . g$11185$DDDPb)
        (trace-let-syntax . g$11184$DDDPb)
        (trace-define-syntax . g$11183$DDDPb)
        (trace-define . g$11182$DDDPb)
        (trace-lambda . g$11181$DDDPb)
        (unsyntax-splicing . g$11180$DDDPb)
        (unsyntax . g$11179$DDDPb)
        (unquote-splicing . g$11178$DDDPb)
        (unquote . g$11177$DDDPb)
        (_ . g$11176$DDDPb)
        (else . g$11175$DDDPb)
        (=> . g$11174$DDDPb)
        (... . g$11173$DDDPb)
        (assert . g$11172$DDDPb)
        (endianness . g$11171$DDDPb)
        (delay . g$11170$DDDPb)
        (time . g$11169$DDDPb)
        (or . g$11168$DDDPb)
        (and . g$11167$DDDPb)
        (do . g$11166$DDDPb)
        (cond . g$11165$DDDPb)
        (let* . g$11164$DDDPb)
        (let . g$11163$DDDPb)
        (identifier-syntax . g$11162$DDDPb)
        (with-syntax . g$11161$DDDPb)
        (quasisyntax . g$11160$DDDPb)
        (quasiquote . g$11159$DDDPb)
        (syntax-rules . g$11158$DDDPb)
        (include-into . g$11157$DDDPb)
        (include . g$11156$DDDPb)
        (define-struct . g$11155$DDDPb)
        (let-values . g$11154$DDDPb)
        (let*-values . g$11153$DDDPb)
        (record-constructor-descriptor . g$11152$DDDPb)
        (record-type-descriptor . g$11151$DDDPb)
        (fluid-let-syntax . g$11150$DDDPb)
        (case . g$11149$DDDPb)
        (parameterize . g$11148$DDDPb)
        (unless . g$11147$DDDPb)
        (when . g$11146$DDDPb)
        (if . g$11145$DDDPb)
        (letrec* . g$11144$DDDPb)
        (letrec . g$11143$DDDPb)
        (type-descriptor . g$11142$DDDPb)
        (case-lambda . g$11141$DDDPb)
        (lambda . g$11140$DDDPb)
        (syntax . g$11139$DDDPb)
        (syntax-case . g$11138$DDDPb)
        (quote . g$11137$DDDPb)
        (foreign-call . g$11136$DDDPb)
        (letrec-syntax . g$11135$DDDPb)
        (let-syntax . g$11134$DDDPb)
        (set! . g$11133$DDDPb)
        (export . g$11132$DDDPb)
        (import . g$11131$DDDPb)
        (library . g$11130$DDDPb)
        (begin . g$11129$DDDPb)
        (module . g$11128$DDDPb)
        (define-syntax . g$11127$DDDPb)
        (define . g$11126$DDDPb))
      '((g$7970$DDDPb core-prim . ellipsis-map)
        (g$6193$DDDPb core-prim . &no-nans-rcd)
        (g$6192$DDDPb core-prim . &no-nans-rtd)
        (g$6180$DDDPb core-prim . &no-infinities-rcd)
        (g$6179$DDDPb core-prim . &no-infinities-rtd)
        (g$6167$DDDPb core-prim . &i/o-encoding-rcd)
        (g$6166$DDDPb core-prim . &i/o-encoding-rtd)
        (g$6152$DDDPb core-prim . &i/o-decoding-rcd)
        (g$6151$DDDPb core-prim . &i/o-decoding-rtd)
        (g$6139$DDDPb core-prim . &i/o-port-rcd)
        (g$6138$DDDPb core-prim . &i/o-port-rtd)
        (g$6124$DDDPb core-prim . &i/o-file-does-not-exist-rcd)
        (g$6123$DDDPb core-prim . &i/o-file-does-not-exist-rtd)
        (g$6111$DDDPb core-prim . &i/o-file-already-exists-rcd)
        (g$6110$DDDPb core-prim . &i/o-file-already-exists-rtd)
        (g$6098$DDDPb core-prim . &i/o-file-is-read-only-rcd)
        (g$6097$DDDPb core-prim . &i/o-file-is-read-only-rtd)
        (g$6085$DDDPb core-prim . &i/o-file-protection-rcd)
        (g$6084$DDDPb core-prim . &i/o-file-protection-rtd)
        (g$6072$DDDPb core-prim . &i/o-filename-rcd)
        (g$6071$DDDPb core-prim . &i/o-filename-rtd)
        (g$6057$DDDPb core-prim . &i/o-invalid-position-rcd)
        (g$6056$DDDPb core-prim . &i/o-invalid-position-rtd)
        (g$6042$DDDPb core-prim . &i/o-write-rcd)
        (g$6041$DDDPb core-prim . &i/o-write-rtd)
        (g$6029$DDDPb core-prim . &i/o-read-rcd)
        (g$6028$DDDPb core-prim . &i/o-read-rtd)
        (g$6016$DDDPb core-prim . &i/o-rcd)
        (g$6015$DDDPb core-prim . &i/o-rtd)
        (g$6003$DDDPb core-prim . &undefined-rcd)
        (g$6002$DDDPb core-prim . &undefined-rtd)
        (g$5990$DDDPb core-prim . &syntax-rcd)
        (g$5989$DDDPb core-prim . &syntax-rtd)
        (g$5973$DDDPb core-prim . &lexical-rcd)
        (g$5972$DDDPb core-prim . &lexical-rtd)
        (g$5960$DDDPb core-prim . &implementation-restriction-rcd)
        (g$5959$DDDPb core-prim . &implementation-restriction-rtd)
        (g$5947$DDDPb core-prim . &non-continuable-rcd)
        (g$5946$DDDPb core-prim . &non-continuable-rtd)
        (g$5934$DDDPb core-prim . &who-rcd)
        (g$5933$DDDPb core-prim . &who-rtd)
        (g$5919$DDDPb core-prim . &irritants-rcd)
        (g$5918$DDDPb core-prim . &irritants-rtd)
        (g$5904$DDDPb core-prim . &assertion-rcd)
        (g$5903$DDDPb core-prim . &assertion-rtd)
        (g$5891$DDDPb core-prim . &violation-rcd)
        (g$5890$DDDPb core-prim . &violation-rtd)
        (g$5878$DDDPb core-prim . &error-rcd)
        (g$5877$DDDPb core-prim . &error-rtd)
        (g$5865$DDDPb core-prim . &serious-rcd)
        (g$5864$DDDPb core-prim . &serious-rtd)
        (g$5852$DDDPb core-prim . &warning-rcd)
        (g$5851$DDDPb core-prim . &warning-rtd)
        (g$5839$DDDPb core-prim . &message-rcd)
        (g$5838$DDDPb core-prim . &message-rtd)
        (g$5799$DDDPb core-prim . &condition-rcd)
        (g$5798$DDDPb core-prim . &condition-rtd)
        (g$11595$DDDPb core-prim . library-letrec*)
        (g$11594$DDDPb core-prim . annotation-stripped)
        (g$11593$DDDPb core-prim . annotation-source)
        (g$11592$DDDPb core-prim . annotation-expression)
        (g$11591$DDDPb core-prim . annotation?)
        (g$11590$DDDPb core-prim . read-annotated)
        (g$11589$DDDPb core-prim . tanh)
        (g$11588$DDDPb core-prim . cosh)
        (g$11587$DDDPb core-prim . sinh)
        (g$11586$DDDPb core-prim . make-guid)
        (g$11585$DDDPb core-prim . unspecified?)
        (g$5042$DDDPb core-prim . make-list)
        (g$5041$DDDPb core-prim . last-pair)
        (g$11584$DDDPb core-prim . load-r5rs)
        (g$11583$DDDPb core-prim . license)
        (g$11582$DDDPb core-prim . stacktrace)
        (g$11078$DDDPb core-prim . ironscheme-build)
        (g$11581$DDDPb core-prim . define-clr-class-internal)
        (g$11580$DDDPb core-prim . clr-field-set!-internal)
        (g$11579$DDDPb core-prim . clr-field-get-internal)
        (g$11578$DDDPb core-prim . clr-cast-internal)
        (g$11577$DDDPb core-prim . clr-call-internal)
        (g$11576$DDDPb core-prim . clr-new-internal)
        (g$11575$DDDPb core-prim . clr-new-array-internal)
        (g$11574$DDDPb core-prim . clr-is-internal)
        (g$11573$DDDPb core-prim . clr-reference-internal)
        (g$11572$DDDPb core-prim . clr-using-internal)
        (g$8089$DDDPb core-prim . syntax-error)
        (g$7965$DDDPb core-prim . syntax-dispatch)
        (g$11571$DDDPb core-prim . compile-core)
        (g$11570$DDDPb core-prim . eval-core)
        (g$11569$DDDPb core-prim . remove-location)
        (g$11568$DDDPb core-prim . set-symbol-value!)
        (g$11567$DDDPb core-prim . symbol-value)
        (g$11566$DDDPb core-prim . symbol-bound?)
        (g$11565$DDDPb core-prim . ungensym)
        (g$11564$DDDPb core-prim . gensym)
        (g$11563$DDDPb core-prim . void)
        (g$11562$DDDPb core-prim . load-serialized-library)
        (g$11561$DDDPb core-prim . serialize-library)
        (g$11081$DDDPb core-prim . compile-system-libraries)
        (g$11083$DDDPb core-prim . compile->closure)
        (g$11082$DDDPb core-prim . compile)
        (g$11077$DDDPb core-prim . load)
        (g$11560$DDDPb core-prim . string-normalize)
        (g$8099$DDDPb core-prim . interaction-environment)
        (g$11559$DDDPb core-prim . char-ready?)
        (g$11558$DDDPb core-prim . string-upcase)
        (g$11557$DDDPb core-prim . string-titlecase)
        (g$6276$DDDPb core-prim . string-normalize-nfkd)
        (g$6275$DDDPb core-prim . string-normalize-nfkc)
        (g$6274$DDDPb core-prim . string-normalize-nfd)
        (g$6273$DDDPb core-prim . string-normalize-nfc)
        (g$11556$DDDPb core-prim . string-foldcase)
        (g$11555$DDDPb core-prim . string-downcase)
        (g$6260$DDDPb core-prim . string-ci>?)
        (g$6262$DDDPb core-prim . string-ci>=?)
        (g$6258$DDDPb core-prim . string-ci=?)
        (g$6259$DDDPb core-prim . string-ci<?)
        (g$6261$DDDPb core-prim . string-ci<=?)
        (g$11554$DDDPb core-prim . char-whitespace?)
        (g$11553$DDDPb core-prim . char-upper-case?)
        (g$11552$DDDPb core-prim . char-title-case?)
        (g$11551$DDDPb core-prim . char-numeric?)
        (g$11550$DDDPb core-prim . char-lower-case?)
        (g$11549$DDDPb core-prim . char-general-category)
        (g$11548$DDDPb core-prim . char-upcase)
        (g$11547$DDDPb core-prim . char-titlecase)
        (g$11546$DDDPb core-prim . char-foldcase)
        (g$11545$DDDPb core-prim . char-downcase)
        (g$6270$DDDPb core-prim . char-ci>?)
        (g$6272$DDDPb core-prim . char-ci>=?)
        (g$6268$DDDPb core-prim . char-ci=?)
        (g$6269$DDDPb core-prim . char-ci<?)
        (g$6271$DDDPb core-prim . char-ci<=?)
        (g$11544$DDDPb core-prim . char-alphabetic?)
        (g$7777$DDDPb core-prim . variable-transformer-procedure)
        (g$7776$DDDPb core-prim . variable-transformer?)
        (g$7774$DDDPb core-prim . make-variable-transformer)
        (g$8093$DDDPb core-prim . identifier?)
        (g$8082$DDDPb core-prim . generate-temporaries)
        (g$8083$DDDPb core-prim . free-identifier=?)
        (g$8095$DDDPb core-prim . syntax->datum)
        (g$8094$DDDPb core-prim . datum->syntax)
        (g$8084$DDDPb core-prim . bound-identifier=?)
        (g$11543$DDDPb core-prim . record-type-descriptor?)
        (g$11542$DDDPb core-prim . record-predicate)
        (g$11541$DDDPb core-prim . record-mutator)
        (g$11540$DDDPb core-prim . record-constructor)
        (g$11539$DDDPb core-prim . record-accessor)
        (g$11538$DDDPb core-prim . make-record-type-descriptor)
        (g$11537$DDDPb core-prim . make-record-constructor-descriptor)
        (g$11536$DDDPb core-prim . record?)
        (g$11535$DDDPb core-prim . record-type-uid)
        (g$11534$DDDPb core-prim . record-type-sealed?)
        (g$11533$DDDPb core-prim . record-type-parent)
        (g$11532$DDDPb core-prim . record-type-opaque?)
        (g$11531$DDDPb core-prim . record-type-name)
        (g$11530$DDDPb core-prim . record-type-generative?)
        (g$11529$DDDPb core-prim . record-type-field-names)
        (g$11528$DDDPb core-prim . record-rtd)
        (g$11527$DDDPb core-prim . record-field-mutable?)
        (g$5667$DDDPb core-prim . delete-file)
        (g$5666$DDDPb core-prim . file-exists?)
        (g$11526$DDDPb core-prim . vector-sort!)
        (g$11525$DDDPb core-prim . vector-sort)
        (g$6229$DDDPb core-prim . list-sort)
        (g$11524$DDDPb core-prim . symbol-hash)
        (g$11523$DDDPb core-prim . string-ci-hash)
        (g$11522$DDDPb core-prim . string-hash)
        (g$11521$DDDPb core-prim . equal-hash)
        (g$11520$DDDPb core-prim . hashtable-equivalence-function)
        (g$11519$DDDPb core-prim . make-hashtable)
        (g$11518$DDDPb core-prim . hashtable-hash-function)
        (g$5635$DDDPb core-prim . make-eqv-hashtable)
        (g$5634$DDDPb core-prim . make-eq-hashtable)
        (g$11517$DDDPb core-prim . hashtable?)
        (g$5641$DDDPb core-prim . hashtable-update!)
        (g$5636$DDDPb core-prim . hashtable-size)
        (g$5638$DDDPb core-prim . hashtable-set!)
        (g$5637$DDDPb core-prim . hashtable-ref)
        (g$11516$DDDPb core-prim . hashtable-mutable?)
        (g$11515$DDDPb core-prim . hashtable-keys)
        (g$11514$DDDPb core-prim . hashtable-entries)
        (g$5639$DDDPb core-prim . hashtable-delete!)
        (g$11513$DDDPb core-prim . hashtable-copy)
        (g$5640$DDDPb core-prim . hashtable-contains?)
        (g$5642$DDDPb core-prim . hashtable-clear!)
        (g$6602$DDDPb core-prim . call-with-output-file)
        (g$6601$DDDPb core-prim . call-with-input-file)
        (g$6593$DDDPb core-prim . write-char)
        (g$11512$DDDPb core-prim . write)
        (g$6600$DDDPb core-prim . with-output-to-file)
        (g$6599$DDDPb core-prim . with-input-from-file)
        (g$6592$DDDPb core-prim . read-char)
        (g$11511$DDDPb core-prim . read)
        (g$6591$DDDPb core-prim . peek-char)
        (g$11510$DDDPb core-prim . open-output-file)
        (g$11509$DDDPb core-prim . open-input-file)
        (g$6603$DDDPb core-prim . newline)
        (g$11508$DDDPb core-prim . display)
        (g$11507$DDDPb core-prim . close-output-port)
        (g$11506$DDDPb core-prim . close-input-port)
        (g$11505$DDDPb core-prim . eof-object?)
        (g$11504$DDDPb core-prim . eof-object)
        (g$11503$DDDPb core-prim . current-error-port)
        (g$11502$DDDPb core-prim . current-output-port)
        (g$11501$DDDPb core-prim . current-input-port)
        (g$11500$DDDPb core-prim . output-port?)
        (g$11499$DDDPb core-prim . input-port?)
        (g$11498$DDDPb core-prim . utf-8-codec)
        (g$11497$DDDPb core-prim . utf-16-codec)
        (g$11496$DDDPb core-prim . transcoder-error-handling-mode)
        (g$11495$DDDPb core-prim . transcoder-eol-style)
        (g$11494$DDDPb core-prim . transcoder-codec)
        (g$11493$DDDPb core-prim . transcoded-port)
        (g$11492$DDDPb core-prim . textual-port?)
        (g$11491$DDDPb core-prim . string->bytevector)
        (g$11490$DDDPb core-prim . standard-output-port)
        (g$11489$DDDPb core-prim . standard-input-port)
        (g$11488$DDDPb core-prim . standard-error-port)
        (g$11487$DDDPb core-prim . set-port-position!)
        (g$11486$DDDPb core-prim . put-u8)
        (g$11485$DDDPb core-prim . put-string)
        (g$6571$DDDPb core-prim . put-datum)
        (g$11484$DDDPb core-prim . put-char)
        (g$11483$DDDPb core-prim . put-bytevector)
        (g$6576$DDDPb core-prim . port?)
        (g$11482$DDDPb core-prim . port-transcoder)
        (g$11481$DDDPb core-prim . port-position)
        (g$11480$DDDPb core-prim . port-has-set-port-position!?)
        (g$11479$DDDPb core-prim . port-has-port-position?)
        (g$11478$DDDPb core-prim . port-eof?)
        (g$11477$DDDPb core-prim . output-port-buffer-mode)
        (g$6575$DDDPb core-prim . open-string-output-port)
        (g$11476$DDDPb core-prim . open-string-input-port)
        (g$11475$DDDPb core-prim . open-file-output-port)
        (g$11474$DDDPb core-prim . open-file-input/output-port)
        (g$11473$DDDPb core-prim . open-file-input-port)
        (g$11472$DDDPb core-prim . open-bytevector-output-port)
        (g$11471$DDDPb core-prim . open-bytevector-input-port)
        (g$11470$DDDPb core-prim . native-transcoder)
        (g$11469$DDDPb core-prim . native-eol-style)
        (g$11468$DDDPb core-prim . make-transcoder)
        (g$11467$DDDPb core-prim . latin-1-codec)
        (g$6039$DDDPb core-prim . make-i/o-write-error)
        (g$6026$DDDPb core-prim . make-i/o-read-error)
        (g$6134$DDDPb core-prim . make-i/o-port-error)
        (g$6052$DDDPb core-prim . make-i/o-invalid-position-error)
        (g$6067$DDDPb core-prim . make-i/o-filename-error)
        (g$6082$DDDPb core-prim . make-i/o-file-protection-error)
        (g$6095$DDDPb core-prim . make-i/o-file-is-read-only-error)
        (g$6121$DDDPb core-prim . make-i/o-file-does-not-exist-error)
        (g$6108$DDDPb core-prim . make-i/o-file-already-exists-error)
        (g$6013$DDDPb core-prim . make-i/o-error)
        (g$6162$DDDPb core-prim . make-i/o-encoding-error)
        (g$6149$DDDPb core-prim . make-i/o-decoding-error)
        (g$11466$DDDPb core-prim . make-custom-textual-output-port)
        (g$11465$DDDPb
          core-prim
          .
          make-custom-textual-input/output-port)
        (g$11464$DDDPb core-prim . make-custom-textual-input-port)
        (g$11463$DDDPb core-prim . make-custom-binary-output-port)
        (g$11462$DDDPb core-prim . make-custom-binary-input/output-port)
        (g$11461$DDDPb core-prim . make-custom-binary-input-port)
        (g$11460$DDDPb core-prim . make-bytevector)
        (g$11459$DDDPb core-prim . lookahead-u8)
        (g$11458$DDDPb core-prim . lookahead-char)
        (g$6040$DDDPb core-prim . i/o-write-error?)
        (g$6027$DDDPb core-prim . i/o-read-error?)
        (g$6136$DDDPb core-prim . i/o-port-error?)
        (g$6054$DDDPb core-prim . i/o-invalid-position-error?)
        (g$6055$DDDPb core-prim . i/o-error-position)
        (g$6069$DDDPb core-prim . i/o-filename-error?)
        (g$6083$DDDPb core-prim . i/o-file-protection-error?)
        (g$6096$DDDPb core-prim . i/o-file-is-read-only-error?)
        (g$6122$DDDPb core-prim . i/o-file-does-not-exist-error?)
        (g$6109$DDDPb core-prim . i/o-file-already-exists-error?)
        (g$6014$DDDPb core-prim . i/o-error?)
        (g$6137$DDDPb core-prim . i/o-error-port)
        (g$6070$DDDPb core-prim . i/o-error-filename)
        (g$6164$DDDPb core-prim . i/o-encoding-error?)
        (g$6165$DDDPb core-prim . i/o-encoding-error-char)
        (g$6150$DDDPb core-prim . i/o-decoding-error?)
        (g$11457$DDDPb core-prim . get-u8)
        (g$11456$DDDPb core-prim . get-string-n!)
        (g$11455$DDDPb core-prim . get-string-n)
        (g$11454$DDDPb core-prim . get-string-all)
        (g$11453$DDDPb core-prim . get-line)
        (g$6572$DDDPb core-prim . get-datum)
        (g$11452$DDDPb core-prim . get-char)
        (g$11451$DDDPb core-prim . get-bytevector-some)
        (g$11450$DDDPb core-prim . get-bytevector-n!)
        (g$11449$DDDPb core-prim . get-bytevector-n)
        (g$11448$DDDPb core-prim . get-bytevector-all)
        (g$11447$DDDPb core-prim . flush-output-port)
        (g$11446$DDDPb core-prim . close-port)
        (g$6577$DDDPb core-prim . call-with-string-output-port)
        (g$6578$DDDPb core-prim . call-with-port)
        (g$11445$DDDPb core-prim . call-with-bytevector-output-port)
        (g$11444$DDDPb core-prim . bytevector->string)
        (g$11443$DDDPb core-prim . buffer-mode?)
        (g$11442$DDDPb core-prim . binary-port?)
        (g$8072$DDDPb core-prim . scheme-report-environment)
        (g$6208$DDDPb core-prim . quotient)
        (g$8071$DDDPb core-prim . null-environment)
        (g$6209$DDDPb core-prim . remainder)
        (g$6210$DDDPb core-prim . modulo)
        (g$6205$DDDPb core-prim . inexact->exact)
        (g$6212$DDDPb core-prim . force)
        (g$6206$DDDPb core-prim . exact->inexact)
        (g$11441$DDDPb core-prim . exit)
        (g$11073$DDDPb core-prim . command-line)
        (g$11440$DDDPb core-prim . string-fill!)
        (g$11439$DDDPb core-prim . string-set!)
        (g$11438$DDDPb core-prim . set-cdr!)
        (g$11437$DDDPb core-prim . set-car!)
        (g$5064$DDDPb core-prim . remove)
        (g$5065$DDDPb core-prim . remv)
        (g$5045$DDDPb core-prim . remp)
        (g$5066$DDDPb core-prim . remq)
        (g$5044$DDDPb core-prim . partition)
        (g$5052$DDDPb core-prim . memv)
        (g$5051$DDDPb core-prim . memq)
        (g$5054$DDDPb core-prim . memp)
        (g$5053$DDDPb core-prim . member)
        (g$5058$DDDPb core-prim . exists)
        (g$5057$DDDPb core-prim . for-all)
        (g$5063$DDDPb core-prim . fold-right)
        (g$5062$DDDPb core-prim . fold-left)
        (g$5043$DDDPb core-prim . find)
        (g$5046$DDDPb core-prim . filter)
        (g$5061$DDDPb core-prim . cons*)
        (g$5048$DDDPb core-prim . assv)
        (g$5047$DDDPb core-prim . assq)
        (g$5050$DDDPb core-prim . assp)
        (g$5049$DDDPb core-prim . assoc)
        (g$11436$DDDPb core-prim . with-exception-handler)
        (g$11435$DDDPb core-prim . raise-continuable)
        (g$11434$DDDPb core-prim . raise)
        (g$8074$DDDPb core-prim . eval)
        (g$8070$DDDPb core-prim . environment)
        (g$6663$DDDPb core-prim . make-enumeration)
        (g$6670$DDDPb core-prim . enum-set=?)
        (g$6664$DDDPb core-prim . enum-set-universe)
        (g$6671$DDDPb core-prim . enum-set-union)
        (g$6669$DDDPb core-prim . enum-set-subset?)
        (g$6675$DDDPb core-prim . enum-set-projection)
        (g$6668$DDDPb core-prim . enum-set-member?)
        (g$6672$DDDPb core-prim . enum-set-intersection)
        (g$6665$DDDPb core-prim . enum-set-indexer)
        (g$6673$DDDPb core-prim . enum-set-difference)
        (g$6666$DDDPb core-prim . enum-set-constructor)
        (g$6674$DDDPb core-prim . enum-set-complement)
        (g$6667$DDDPb core-prim . enum-set->list)
        (g$5931$DDDPb core-prim . who-condition?)
        (g$5850$DDDPb core-prim . warning?)
        (g$5889$DDDPb core-prim . violation?)
        (g$6001$DDDPb core-prim . undefined-violation?)
        (g$5986$DDDPb core-prim . syntax-violation?)
        (g$5988$DDDPb core-prim . syntax-violation-subform)
        (g$5987$DDDPb core-prim . syntax-violation-form)
        (g$8092$DDDPb core-prim . syntax-violation)
        (g$11433$DDDPb core-prim . simple-conditions)
        (g$5863$DDDPb core-prim . serious-condition?)
        (g$5945$DDDPb core-prim . non-continuable-violation?)
        (g$5836$DDDPb core-prim . message-condition?)
        (g$5929$DDDPb core-prim . make-who-condition)
        (g$5849$DDDPb core-prim . make-warning)
        (g$5888$DDDPb core-prim . make-violation)
        (g$6000$DDDPb core-prim . make-undefined-violation)
        (g$5983$DDDPb core-prim . make-syntax-violation)
        (g$5862$DDDPb core-prim . make-serious-condition)
        (g$5944$DDDPb core-prim . make-non-continuable-violation)
        (g$5834$DDDPb core-prim . make-message-condition)
        (g$5970$DDDPb core-prim . make-lexical-violation)
        (g$5914$DDDPb core-prim . make-irritants-condition)
        (g$5957$DDDPb
          core-prim
          .
          make-implementation-restriction-violation)
        (g$5875$DDDPb core-prim . make-error)
        (g$5901$DDDPb core-prim . make-assertion-violation)
        (g$5971$DDDPb core-prim . lexical-violation?)
        (g$5916$DDDPb core-prim . irritants-condition?)
        (g$5958$DDDPb core-prim . implementation-restriction-violation?)
        (g$5876$DDDPb core-prim . error?)
        (g$5932$DDDPb core-prim . condition-who)
        (g$11432$DDDPb core-prim . condition-predicate)
        (g$5837$DDDPb core-prim . condition-message)
        (g$5917$DDDPb core-prim . condition-irritants)
        (g$11431$DDDPb core-prim . condition-accessor)
        (g$11430$DDDPb core-prim . condition)
        (g$5902$DDDPb core-prim . assertion-violation?)
        (g$11429$DDDPb core-prim . condition?)
        (g$11428$DDDPb core-prim . utf32->string)
        (g$11427$DDDPb core-prim . utf16->string)
        (g$11426$DDDPb core-prim . utf8->string)
        (g$11425$DDDPb core-prim . uint-list->bytevector)
        (g$11424$DDDPb core-prim . u8-list->bytevector)
        (g$11423$DDDPb core-prim . string->utf8)
        (g$11422$DDDPb core-prim . string->utf32)
        (g$11421$DDDPb core-prim . string->utf16)
        (g$11420$DDDPb core-prim . sint-list->bytevector)
        (g$5673$DDDPb core-prim . native-endianness)
        (g$5363$DDDPb core-prim . bytevector?)
        (g$11419$DDDPb core-prim . bytevector=?)
        (g$11418$DDDPb core-prim . bytevector-uint-set!)
        (g$11417$DDDPb core-prim . bytevector-uint-ref)
        (g$11416$DDDPb core-prim . bytevector-u8-set!)
        (g$11415$DDDPb core-prim . bytevector-u8-ref)
        (g$5694$DDDPb core-prim . bytevector-u64-set!)
        (g$5690$DDDPb core-prim . bytevector-u64-ref)
        (g$5696$DDDPb core-prim . bytevector-u64-native-set!)
        (g$5692$DDDPb core-prim . bytevector-u64-native-ref)
        (g$5686$DDDPb core-prim . bytevector-u32-set!)
        (g$5682$DDDPb core-prim . bytevector-u32-ref)
        (g$5688$DDDPb core-prim . bytevector-u32-native-set!)
        (g$5684$DDDPb core-prim . bytevector-u32-native-ref)
        (g$5678$DDDPb core-prim . bytevector-u16-set!)
        (g$5674$DDDPb core-prim . bytevector-u16-ref)
        (g$5680$DDDPb core-prim . bytevector-u16-native-set!)
        (g$5676$DDDPb core-prim . bytevector-u16-native-ref)
        (g$11414$DDDPb core-prim . bytevector-sint-set!)
        (g$11413$DDDPb core-prim . bytevector-sint-ref)
        (g$11412$DDDPb core-prim . bytevector-s8-set!)
        (g$11411$DDDPb core-prim . bytevector-s8-ref)
        (g$5695$DDDPb core-prim . bytevector-s64-set!)
        (g$5691$DDDPb core-prim . bytevector-s64-ref)
        (g$5697$DDDPb core-prim . bytevector-s64-native-set!)
        (g$5693$DDDPb core-prim . bytevector-s64-native-ref)
        (g$5687$DDDPb core-prim . bytevector-s32-set!)
        (g$5683$DDDPb core-prim . bytevector-s32-ref)
        (g$5689$DDDPb core-prim . bytevector-s32-native-set!)
        (g$5685$DDDPb core-prim . bytevector-s32-native-ref)
        (g$5679$DDDPb core-prim . bytevector-s16-set!)
        (g$5675$DDDPb core-prim . bytevector-s16-ref)
        (g$5681$DDDPb core-prim . bytevector-s16-native-set!)
        (g$5677$DDDPb core-prim . bytevector-s16-native-ref)
        (g$11410$DDDPb core-prim . bytevector-length)
        (g$11409$DDDPb core-prim . bytevector-ieee-single-set!)
        (g$11408$DDDPb core-prim . bytevector-ieee-single-ref)
        (g$5700$DDDPb core-prim . bytevector-ieee-single-native-set!)
        (g$5698$DDDPb core-prim . bytevector-ieee-single-native-ref)
        (g$11407$DDDPb core-prim . bytevector-ieee-double-set!)
        (g$11406$DDDPb core-prim . bytevector-ieee-double-ref)
        (g$5701$DDDPb core-prim . bytevector-ieee-double-native-set!)
        (g$5699$DDDPb core-prim . bytevector-ieee-double-native-ref)
        (g$11405$DDDPb core-prim . bytevector-fill!)
        (g$11404$DDDPb core-prim . bytevector-copy!)
        (g$11403$DDDPb core-prim . bytevector-copy)
        (g$11402$DDDPb core-prim . bytevector->uint-list)
        (g$11401$DDDPb core-prim . bytevector->u8-list)
        (g$11400$DDDPb core-prim . bytevector->sint-list)
        (g$6191$DDDPb core-prim . no-nans-violation?)
        (g$6178$DDDPb core-prim . no-infinities-violation?)
        (g$6190$DDDPb core-prim . make-no-nans-violation)
        (g$6177$DDDPb core-prim . make-no-infinities-violation)
        (g$11399$DDDPb core-prim . real->flonum)
        (g$6491$DDDPb core-prim . flzero?)
        (g$6486$DDDPb core-prim . fltruncate)
        (g$6476$DDDPb core-prim . fltan)
        (g$6481$DDDPb core-prim . flsqrt)
        (g$6474$DDDPb core-prim . flsin)
        (g$6487$DDDPb core-prim . flround)
        (g$6489$DDDPb core-prim . flpositive?)
        (g$5368$DDDPb core-prim . flonum?)
        (g$6493$DDDPb core-prim . flodd?)
        (g$11398$DDDPb core-prim . flnumerator)
        (g$6490$DDDPb core-prim . flnegative?)
        (g$6473$DDDPb core-prim . flnan?)
        (g$6469$DDDPb core-prim . flmod0)
        (g$6468$DDDPb core-prim . flmod)
        (g$6495$DDDPb core-prim . flmin)
        (g$6494$DDDPb core-prim . flmax)
        (g$6480$DDDPb core-prim . fllog)
        (g$6470$DDDPb core-prim . flinteger?)
        (g$6472$DDDPb core-prim . flinfinite?)
        (g$6485$DDDPb core-prim . flfloor)
        (g$6471$DDDPb core-prim . flfinite?)
        (g$6483$DDDPb core-prim . flexpt)
        (g$6482$DDDPb core-prim . flexp)
        (g$6492$DDDPb core-prim . fleven?)
        (g$6465$DDDPb core-prim . fldiv0-and-mod0)
        (g$6467$DDDPb core-prim . fldiv0)
        (g$6464$DDDPb core-prim . fldiv-and-mod)
        (g$6466$DDDPb core-prim . fldiv)
        (g$11397$DDDPb core-prim . fldenominator)
        (g$6475$DDDPb core-prim . flcos)
        (g$6484$DDDPb core-prim . flceiling)
        (g$6479$DDDPb core-prim . flatan)
        (g$6477$DDDPb core-prim . flasin)
        (g$6478$DDDPb core-prim . flacos)
        (g$6488$DDDPb core-prim . flabs)
        (g$11396$DDDPb core-prim . fl>?)
        (g$11395$DDDPb core-prim . fl>=?)
        (g$11394$DDDPb core-prim . fl=?)
        (g$11393$DDDPb core-prim . fl<?)
        (g$11392$DDDPb core-prim . fl<=?)
        (g$11391$DDDPb core-prim . fl/)
        (g$11390$DDDPb core-prim . fl-)
        (g$11389$DDDPb core-prim . fl+)
        (g$11388$DDDPb core-prim . fl*)
        (g$11387$DDDPb core-prim . fixnum->flonum)
        (g$6372$DDDPb core-prim . fxzero?)
        (g$11386$DDDPb core-prim . fxxor)
        (g$6386$DDDPb core-prim . fxrotate-bit-field)
        (g$11385$DDDPb core-prim . fxreverse-bit-field)
        (g$6370$DDDPb core-prim . fxpositive?)
        (g$6374$DDDPb core-prim . fxodd?)
        (g$11384$DDDPb core-prim . fxnot)
        (g$6371$DDDPb core-prim . fxnegative?)
        (g$6369$DDDPb core-prim . fxmod0)
        (g$6368$DDDPb core-prim . fxmod)
        (g$6376$DDDPb core-prim . fxmin)
        (g$6375$DDDPb core-prim . fxmax)
        (g$11383$DDDPb core-prim . fxlength)
        (g$11382$DDDPb core-prim . fxior)
        (g$6380$DDDPb core-prim . fxif)
        (g$11381$DDDPb core-prim . fxfirst-bit-set)
        (g$6373$DDDPb core-prim . fxeven?)
        (g$11380$DDDPb core-prim . fxdiv0-and-mod0)
        (g$6367$DDDPb core-prim . fxdiv0)
        (g$11379$DDDPb core-prim . fxdiv-and-mod)
        (g$6366$DDDPb core-prim . fxdiv)
        (g$6383$DDDPb core-prim . fxcopy-bit-field)
        (g$6381$DDDPb core-prim . fxcopy-bit)
        (g$11378$DDDPb core-prim . fxbit-set?)
        (g$6382$DDDPb core-prim . fxbit-field)
        (g$11377$DDDPb core-prim . fxbit-count)
        (g$6385$DDDPb core-prim . fxarithmetic-shift-right)
        (g$6384$DDDPb core-prim . fxarithmetic-shift-left)
        (g$11376$DDDPb core-prim . fxarithmetic-shift)
        (g$11375$DDDPb core-prim . fxand)
        (g$11374$DDDPb core-prim . fx>?)
        (g$11373$DDDPb core-prim . fx>=?)
        (g$11372$DDDPb core-prim . fx=?)
        (g$11371$DDDPb core-prim . fx<?)
        (g$11370$DDDPb core-prim . fx<=?)
        (g$6378$DDDPb core-prim . fx-/carry)
        (g$11369$DDDPb core-prim . fx-)
        (g$6379$DDDPb core-prim . fx+/carry)
        (g$11368$DDDPb core-prim . fx+)
        (g$6377$DDDPb core-prim . fx*/carry)
        (g$11367$DDDPb core-prim . fx*)
        (g$11366$DDDPb core-prim . greatest-fixnum)
        (g$11365$DDDPb core-prim . least-fixnum)
        (g$5369$DDDPb core-prim . fixnum-width)
        (g$5367$DDDPb core-prim . fixnum?)
        (g$6340$DDDPb core-prim . bitwise-rotate-bit-field)
        (g$11364$DDDPb core-prim . bitwise-reverse-bit-field)
        (g$11363$DDDPb core-prim . bitwise-length)
        (g$6334$DDDPb core-prim . bitwise-if)
        (g$11362$DDDPb core-prim . bitwise-first-bit-set)
        (g$6337$DDDPb core-prim . bitwise-copy-bit-field)
        (g$6335$DDDPb core-prim . bitwise-copy-bit)
        (g$11361$DDDPb core-prim . bitwise-bit-set?)
        (g$6336$DDDPb core-prim . bitwise-bit-field)
        (g$11360$DDDPb core-prim . bitwise-bit-count)
        (g$11359$DDDPb core-prim . bitwise-xor)
        (g$11358$DDDPb core-prim . bitwise-ior)
        (g$11357$DDDPb core-prim . bitwise-and)
        (g$11356$DDDPb core-prim . bitwise-not)
        (g$6339$DDDPb core-prim . bitwise-arithmetic-shift-right)
        (g$6338$DDDPb core-prim . bitwise-arithmetic-shift-left)
        (g$11355$DDDPb core-prim . bitwise-arithmetic-shift)
        (g$5402$DDDPb core-prim . zero?)
        (g$5362$DDDPb core-prim . vector?)
        (g$11354$DDDPb core-prim . vector-set!)
        (g$11353$DDDPb core-prim . vector-ref)
        (g$5434$DDDPb core-prim . vector-map)
        (g$11352$DDDPb core-prim . vector-length)
        (g$5435$DDDPb core-prim . vector-for-each)
        (g$5370$DDDPb core-prim . vector-fill!)
        (g$11351$DDDPb core-prim . vector->list)
        (g$11350$DDDPb core-prim . vector)
        (g$11349$DDDPb core-prim . values)
        (g$11348$DDDPb core-prim . truncate)
        (g$11347$DDDPb core-prim . tan)
        (g$5364$DDDPb core-prim . symbol?)
        (g$5419$DDDPb core-prim . symbol=?)
        (g$11346$DDDPb core-prim . symbol->string)
        (g$11345$DDDPb core-prim . substring)
        (g$11344$DDDPb core-prim . string?)
        (g$5416$DDDPb core-prim . string>?)
        (g$5418$DDDPb core-prim . string>=?)
        (g$5414$DDDPb core-prim . string=?)
        (g$5415$DDDPb core-prim . string<?)
        (g$5417$DDDPb core-prim . string<=?)
        (g$11343$DDDPb core-prim . string-ref)
        (g$11342$DDDPb core-prim . string-length)
        (g$5436$DDDPb core-prim . string-for-each)
        (g$11341$DDDPb core-prim . string-copy)
        (g$11340$DDDPb core-prim . string-append)
        (g$11339$DDDPb core-prim . string->symbol)
        (g$11338$DDDPb core-prim . string->number)
        (g$11337$DDDPb core-prim . string->list)
        (g$11336$DDDPb core-prim . string)
        (g$11335$DDDPb core-prim . sqrt)
        (g$11334$DDDPb core-prim . sin)
        (g$11333$DDDPb core-prim . round)
        (g$5371$DDDPb core-prim . reverse)
        (g$11332$DDDPb core-prim . real?)
        (g$11331$DDDPb core-prim . real-valued?)
        (g$11330$DDDPb core-prim . real-part)
        (g$5431$DDDPb core-prim . rationalize)
        (g$11329$DDDPb core-prim . rational?)
        (g$11328$DDDPb core-prim . rational-valued?)
        (g$5366$DDDPb core-prim . procedure?)
        (g$5400$DDDPb core-prim . positive?)
        (g$11327$DDDPb core-prim . pair?)
        (g$5404$DDDPb core-prim . odd?)
        (g$11326$DDDPb core-prim . numerator)
        (g$11325$DDDPb core-prim . number?)
        (g$11324$DDDPb core-prim . number->string)
        (g$11323$DDDPb core-prim . null?)
        (g$11322$DDDPb core-prim . not)
        (g$5401$DDDPb core-prim . negative?)
        (g$11321$DDDPb core-prim . nan?)
        (g$5406$DDDPb core-prim . min)
        (g$5405$DDDPb core-prim . max)
        (g$5059$DDDPb core-prim . map)
        (g$11320$DDDPb core-prim . make-vector)
        (g$11319$DDDPb core-prim . make-string)
        (g$11318$DDDPb core-prim . make-rectangular)
        (g$11317$DDDPb core-prim . make-polar)
        (g$11316$DDDPb core-prim . magnitude)
        (g$11315$DDDPb core-prim . log)
        (g$11314$DDDPb core-prim . list?)
        (g$5039$DDDPb core-prim . list-tail)
        (g$5040$DDDPb core-prim . list-ref)
        (g$5359$DDDPb core-prim . list->vector)
        (g$5360$DDDPb core-prim . list->string)
        (g$11313$DDDPb core-prim . list)
        (g$11312$DDDPb core-prim . length)
        (g$5408$DDDPb core-prim . lcm)
        (g$11311$DDDPb core-prim . integer?)
        (g$11310$DDDPb core-prim . integer-valued?)
        (g$11309$DDDPb core-prim . integer->char)
        (g$11308$DDDPb core-prim . infinite?)
        (g$11307$DDDPb core-prim . inexact?)
        (g$11306$DDDPb core-prim . inexact)
        (g$11305$DDDPb core-prim . imag-part)
        (g$5407$DDDPb core-prim . gcd)
        (g$5060$DDDPb core-prim . for-each)
        (g$11304$DDDPb core-prim . floor)
        (g$11303$DDDPb core-prim . finite?)
        (g$11302$DDDPb core-prim . expt)
        (g$11301$DDDPb core-prim . exp)
        (g$11300$DDDPb core-prim . exact?)
        (g$11299$DDDPb core-prim . exact-integer-sqrt)
        (g$11298$DDDPb core-prim . exact)
        (g$5403$DDDPb core-prim . even?)
        (g$11297$DDDPb core-prim . error)
        (g$11296$DDDPb core-prim . eqv?)
        (g$11295$DDDPb core-prim . equal?)
        (g$11294$DDDPb core-prim . eq?)
        (g$11293$DDDPb core-prim . dynamic-wind)
        (g$11292$DDDPb core-prim . div0-and-mod0)
        (g$5358$DDDPb core-prim . mod0)
        (g$5356$DDDPb core-prim . div0)
        (g$11291$DDDPb core-prim . div-and-mod)
        (g$5357$DDDPb core-prim . mod)
        (g$5355$DDDPb core-prim . div)
        (g$11290$DDDPb core-prim . denominator)
        (g$11289$DDDPb core-prim . cos)
        (g$11288$DDDPb core-prim . cons)
        (g$11287$DDDPb core-prim . complex?)
        (g$5361$DDDPb core-prim . char?)
        (g$5428$DDDPb core-prim . char>?)
        (g$5430$DDDPb core-prim . char>=?)
        (g$5426$DDDPb core-prim . char=?)
        (g$5427$DDDPb core-prim . char<?)
        (g$5429$DDDPb core-prim . char<=?)
        (g$11286$DDDPb core-prim . char->integer)
        (g$11285$DDDPb core-prim . ceiling)
        (g$11284$DDDPb core-prim . call-with-values)
        (g$11283$DDDPb core-prim . call/cc)
        (g$11282$DDDPb core-prim . call-with-current-continuation)
        (g$5399$DDDPb core-prim . cddddr)
        (g$5398$DDDPb core-prim . cdddar)
        (g$5397$DDDPb core-prim . cddadr)
        (g$5396$DDDPb core-prim . cddaar)
        (g$5395$DDDPb core-prim . cdaddr)
        (g$5394$DDDPb core-prim . cdadar)
        (g$5393$DDDPb core-prim . cdaadr)
        (g$5392$DDDPb core-prim . cdaaar)
        (g$5391$DDDPb core-prim . cadddr)
        (g$5390$DDDPb core-prim . caddar)
        (g$5389$DDDPb core-prim . cadadr)
        (g$5388$DDDPb core-prim . cadaar)
        (g$5387$DDDPb core-prim . caaddr)
        (g$5386$DDDPb core-prim . caadar)
        (g$5385$DDDPb core-prim . caaadr)
        (g$5384$DDDPb core-prim . caaaar)
        (g$5383$DDDPb core-prim . cdddr)
        (g$5382$DDDPb core-prim . cddar)
        (g$5381$DDDPb core-prim . cdadr)
        (g$5380$DDDPb core-prim . cdaar)
        (g$5379$DDDPb core-prim . caddr)
        (g$5378$DDDPb core-prim . cadar)
        (g$5377$DDDPb core-prim . caadr)
        (g$5376$DDDPb core-prim . caaar)
        (g$5375$DDDPb core-prim . cddr)
        (g$5374$DDDPb core-prim . cdar)
        (g$5373$DDDPb core-prim . cadr)
        (g$5372$DDDPb core-prim . caar)
        (g$11281$DDDPb core-prim . cdr)
        (g$11280$DDDPb core-prim . car)
        (g$5365$DDDPb core-prim . boolean?)
        (g$5420$DDDPb core-prim . boolean=?)
        (g$11279$DDDPb core-prim . atan)
        (g$11278$DDDPb core-prim . assertion-violation)
        (g$11277$DDDPb core-prim . asin)
        (g$11276$DDDPb core-prim . apply)
        (g$11275$DDDPb core-prim . append)
        (g$11274$DDDPb core-prim . angle)
        (g$11273$DDDPb core-prim . acos)
        (g$11272$DDDPb core-prim . abs)
        (g$11271$DDDPb core-prim . /)
        (g$11270$DDDPb core-prim . *)
        (g$11269$DDDPb core-prim . -)
        (g$11268$DDDPb core-prim . +)
        (g$11267$DDDPb core-prim . >=)
        (g$11266$DDDPb core-prim . >)
        (g$11265$DDDPb core-prim . =)
        (g$11264$DDDPb core-prim . <=)
        (g$11263$DDDPb core-prim . <)
        (g$11262$DDDPb core-prim . make-record-printer)
        (g$11261$DDDPb core-prim . eqv-hash)
        (g$11260$DDDPb core-prim . reverse!)
        (g$11259$DDDPb core-prim . deserialize-port)
        (g$11258$DDDPb core-prim . serialize-port)
        (g$6640$DDDPb core-prim . enum-set?)
        (g$6211$DDDPb core-prim . make-promise)
        (g$11076$DDDPb core-prim . load/unload)
        (g$11075$DDDPb core-prim . load/args)
        (g$6749$DDDPb core-prim . printf)
        (g$6750$DDDPb core-prim . fprintf)
        (g$6751$DDDPb core-prim . format)
        (g$11257$DDDPb core-prim . procedure-form)
        (g$11256$DDDPb core-prim . procedure-environment)
        (g$11255$DDDPb core-prim . procedure-name)
        (g$11254$DDDPb core-prim . procedure-arity)
        (g$11253$DDDPb core-prim . gc-collect)
        (g$11252$DDDPb core-prim . typeof)
        (g$11251$DDDPb core-prim . clr-type?)
        (g$11250$DDDPb core-prim . get-clr-type)
        (g$11249$DDDPb core-prim . get-command-line)
        (g$11248$DDDPb core-prim . vector-append)
        (g$11247$DDDPb core-prim . vector-filter)
        (g$11246$DDDPb core-prim . vector-reverse!)
        (g$11245$DDDPb core-prim . vector-contains?)
        (g$11244$DDDPb core-prim . vector-index-of)
        (g$11243$DDDPb core-prim . vector-copy)
        (g$11242$DDDPb core-prim . vector-binary-search)
        (g$11241$DDDPb core-prim . string-ci-compare)
        (g$11240$DDDPb core-prim . string-compare)
        (g$11239$DDDPb core-prim . string-format)
        (g$11072$DDDPb core-prim . trace-printer)
        (g$11238$DDDPb core-prim . make-traced-procedure)
        (g$6771$DDDPb core-prim . make-traced-macro)
        (g$8088$DDDPb core-prim . assertion-error)
        (g$11237$DDDPb core-prim . time-it)
        (g$6778$DDDPb core-prim . make-parameter)
        (g$11236$DDDPb core-prim . library-locator)
        (g$11235$DDDPb core-prim . get-library-paths)
        (g$11234$DDDPb core-prim . open-tcp-input/output-port)
        (g$11233$DDDPb core-prim . hashtable-for-each)
        (g$11232$DDDPb core-prim . hashtable-map)
        (g$8066$DDDPb core-prim . environment-bindings)
        (g$8069$DDDPb core-prim . environment-symbols)
        (g$8065$DDDPb core-prim . interaction-environment-symbols)
        (g$11231$DDDPb core-prim . optimization-level)
        (g$7397$DDDPb core-prim . library-path)
        (g$7775$DDDPb core-prim . make-compile-time-value)
        (g$8075$DDDPb core-prim . expand->core)
        (g$8073$DDDPb core-prim . expand)
        (g$7094$DDDPb core-prim . convert->cps)
        (g$7418$DDDPb core-prim . installed-libraries)
        (g$7409$DDDPb core-prim . uninstall-library)
        (g$6853$DDDPb core-prim . pretty-width)
        (g$6855$DDDPb core-prim . pretty-print)
        (g$11230$DDDPb $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11229$DDDPb $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11228$DDDPb $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11227$DDDPb $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11226$DDDPb $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11225$DDDPb
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11224$DDDPb
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11223$DDDPb
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11222$DDDPb
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11221$DDDPb $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11220$DDDPb
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11219$DDDPb $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11218$DDDPb $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11217$DDDPb $core-rtd &i/o-rtd &i/o-rcd)
        (g$11216$DDDPb
          $core-rtd
          &non-continuable-rtd
          &non-continuable-rcd)
        (g$11215$DDDPb $core-rtd &undefined-rtd &undefined-rcd)
        (g$11214$DDDPb $core-rtd &syntax-rtd &syntax-rcd)
        (g$11213$DDDPb $core-rtd &lexical-rtd &lexical-rcd)
        (g$11212$DDDPb
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11211$DDDPb $core-rtd &who-rtd &who-rcd)
        (g$11210$DDDPb $core-rtd &irritants-rtd &irritants-rcd)
        (g$11209$DDDPb $core-rtd &assertion-rtd &assertion-rcd)
        (g$11208$DDDPb $core-rtd &violation-rtd &violation-rcd)
        (g$11207$DDDPb $core-rtd &error-rtd &error-rcd)
        (g$11206$DDDPb $core-rtd &serious-rtd &serious-rcd)
        (g$11205$DDDPb $core-rtd &warning-rtd &warning-rcd)
        (g$11204$DDDPb $core-rtd &message-rtd &message-rcd)
        (g$11203$DDDPb $core-rtd &condition-rtd &condition-rcd)
        (g$11202$DDDPb macro . define-condition-type)
        (g$11201$DDDPb macro . define-enumeration)
        (g$11200$DDDPb macro . define-record-type)
        (g$11199$DDDPb macro . parent-rtd)
        (g$11198$DDDPb macro . nongenerative)
        (g$11197$DDDPb macro . opaque)
        (g$11196$DDDPb macro . sealed)
        (g$11195$DDDPb macro . protocol)
        (g$11194$DDDPb macro . parent)
        (g$11193$DDDPb macro . immutable)
        (g$11192$DDDPb macro . mutable)
        (g$11191$DDDPb macro . fields)
        (g$11190$DDDPb macro . error-handling-mode)
        (g$11189$DDDPb macro . file-options)
        (g$11188$DDDPb macro . buffer-mode)
        (g$11187$DDDPb macro . eol-style)
        (g$11186$DDDPb macro . guard)
        (g$11185$DDDPb macro . trace-letrec-syntax)
        (g$11184$DDDPb macro . trace-let-syntax)
        (g$11183$DDDPb macro . trace-define-syntax)
        (g$11182$DDDPb macro . trace-define)
        (g$11181$DDDPb macro . trace-lambda)
        (g$11180$DDDPb macro . unsyntax-splicing)
        (g$11179$DDDPb macro . unsyntax)
        (g$11178$DDDPb macro . unquote-splicing)
        (g$11177$DDDPb macro . unquote)
        (g$11176$DDDPb macro . _)
        (g$11175$DDDPb macro . else)
        (g$11174$DDDPb macro . =>)
        (g$11173$DDDPb macro . ...)
        (g$11172$DDDPb macro . assert)
        (g$11171$DDDPb macro . endianness)
        (g$11170$DDDPb macro . delay)
        (g$11169$DDDPb macro . time)
        (g$11168$DDDPb macro . or)
        (g$11167$DDDPb macro . and)
        (g$11166$DDDPb macro . do)
        (g$11165$DDDPb macro . cond)
        (g$11164$DDDPb macro . let*)
        (g$11163$DDDPb macro . let)
        (g$11162$DDDPb macro . identifier-syntax)
        (g$11161$DDDPb macro . with-syntax)
        (g$11160$DDDPb macro . quasisyntax)
        (g$11159$DDDPb macro . quasiquote)
        (g$11158$DDDPb macro . syntax-rules)
        (g$11157$DDDPb macro . include-into)
        (g$11156$DDDPb macro . include)
        (g$11155$DDDPb macro . define-struct)
        (g$11154$DDDPb macro . let-values)
        (g$11153$DDDPb macro . let*-values)
        (g$11152$DDDPb core-macro . record-constructor-descriptor)
        (g$11151$DDDPb core-macro . record-type-descriptor)
        (g$11150$DDDPb core-macro . fluid-let-syntax)
        (g$11149$DDDPb macro . case)
        (g$11148$DDDPb macro . parameterize)
        (g$11147$DDDPb macro . unless)
        (g$11146$DDDPb macro . when)
        (g$11145$DDDPb core-macro . if)
        (g$11144$DDDPb core-macro . letrec*)
        (g$11143$DDDPb core-macro . letrec)
        (g$11142$DDDPb core-macro . type-descriptor)
        (g$11141$DDDPb core-macro . case-lambda)
        (g$11140$DDDPb core-macro . lambda)
        (g$11139$DDDPb core-macro . syntax)
        (g$11138$DDDPb core-macro . syntax-case)
        (g$11137$DDDPb core-macro . quote)
        (g$11136$DDDPb core-macro . foreign-call)
        (g$11135$DDDPb letrec-syntax)
        (g$11134$DDDPb let-syntax)
        (g$11133$DDDPb set!)
        (g$11132$DDDPb export)
        (g$11131$DDDPb import)
        (g$11130$DDDPb library)
        (g$11129$DDDPb begin)
        (g$11128$DDDPb module)
        (g$11127$DDDPb define-syntax)
        (g$11126$DDDPb define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9091$DDDPb
      'g$11632$DDDPb
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$11571$DDDPb)
        (eval-core . g$11570$DDDPb)
        (set-symbol-value! . g$11568$DDDPb)
        (symbol-value . g$11567$DDDPb)
        (gensym . g$11564$DDDPb)
        (void . g$11563$DDDPb))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$13379$DDDPb
     g$trace-printer$13440$DDDPb
     (g$make-parameter$8260$DDDPb write))
   (g$command-line$13380$DDDPb
     g$command-line$13441$DDDPb
     (g$make-parameter$8260$DDDPb (get-command-line)))
   (g$local-library-path$13381$DDDPb
     g$local-library-path$13442$DDDPb
     (case-lambda
       ((g$filename$13394$DDDPb)
        (cons
          (g$get-directory-name$6543$DDDPb g$filename$13394$DDDPb)
          (g$library-path$9075$DDDPb)))))
   (g$load/args$13382$DDDPb
     g$load/args$13443$DDDPb
     (case-lambda
       ((g$filename$13395$DDDPb . g$args$13396$DDDPb)
        (begin
          (apply
            g$load-r6rs-top-level$13391$DDDPb
            g$filename$13395$DDDPb
            'load
            g$args$13396$DDDPb)
          (void)))))
   (g$load/unload$13383$DDDPb
     g$load/unload$13444$DDDPb
     (case-lambda
       ((g$filename$13397$DDDPb)
        ((case-lambda
           ((g$libs$13398$DDDPb)
            (begin
              (g$load$13384$DDDPb g$filename$13397$DDDPb)
              (g$for-each$5754$DDDPb
                (case-lambda
                  ((g$lib$13399$DDDPb)
                   (if (not (g$memq$5745$DDDPb
                              g$lib$13399$DDDPb
                              g$libs$13398$DDDPb))
                     (g$uninstall-library$9087$DDDPb g$lib$13399$DDDPb)
                     (void))))
                (g$installed-libraries$9096$DDDPb)))))
         (g$installed-libraries$9096$DDDPb)))))
   (g$load$13384$DDDPb
     g$load$13445$DDDPb
     (case-lambda
       ((g$filename$13400$DDDPb)
        (begin
          (apply
            g$load-r6rs-top-level$13391$DDDPb
            g$filename$13400$DDDPb
            'load
            (cdr (g$command-line$13380$DDDPb)))
          (void)))))
   (g$ironscheme-build$13385$DDDPb
     g$ironscheme-build$13446$DDDPb
     (case-lambda
       (() (g$ironscheme-build$13385$DDDPb '#f))
       ((g$cps?$13401$DDDPb)
        (begin
          (g$call-with-output-file$7920$DDDPb
            '"build-options.ss"
            (case-lambda
              ((g$p$13402$DDDPb)
               (begin
                 (write
                   (list 'define-option 'cps-mode g$cps?$13401$DDDPb)
                   g$p$13402$DDDPb)
                 (write
                   (list
                     'define-option
                     'if-wants-letrec*
                     (not g$cps?$13401$DDDPb))
                   g$p$13402$DDDPb)
                 (g$newline$7921$DDDPb g$p$13402$DDDPb)))))
          (g$load$13384$DDDPb '"ironscheme-buildscript.ss")))))
   (g$foreground-color$13386$DDDPb
     g$foreground-color$13447$DDDPb
     (case-lambda
       (() (clr-call-internal 'console 'get_foregroundcolor '()))
       ((g$color$13403$DDDPb)
        (clr-call-internal
          'console
          'set_foregroundcolor
          '()
          g$color$13403$DDDPb))))
   (g$eval-top-level$13387$DDDPb
     g$eval-top-level$13448$DDDPb
     (case-lambda
       ((g$x$13404$DDDPb)
        (call/cc
          (case-lambda
            ((g$k$13405$DDDPb)
             (with-exception-handler
               (case-lambda
                 ((g$e$13406$DDDPb)
                  (begin
                    ((case-lambda
                       ((g$foreground-color$13411$DDDPb
                          g$current-output-port$13412$DDDPb
                          g$foreground-color$13413$DDDPb
                          g$current-output-port$13414$DDDPb)
                        ((case-lambda
                           ((g$swap$13415$DDDPb)
                            (dynamic-wind
                              g$swap$13415$DDDPb
                              (case-lambda
                                (()
                                 (begin
                                   (display
                                     '"Unhandled exception during evaluation:
")
                                   (display g$e$13406$DDDPb)
                                   (g$newline$7921$DDDPb))))
                              g$swap$13415$DDDPb)))
                         (case-lambda
                           (()
                            (begin
                              ((case-lambda
                                 ((g$t$13416$DDDPb)
                                  (begin
                                    (g$foreground-color$13411$DDDPb
                                      g$foreground-color$13413$DDDPb)
                                    (set! g$foreground-color$13413$DDDPb
                                      g$t$13416$DDDPb))))
                               (g$foreground-color$13411$DDDPb))
                              ((case-lambda
                                 ((g$t$13417$DDDPb)
                                  (begin
                                    (g$current-output-port$13412$DDDPb
                                      g$current-output-port$13414$DDDPb)
                                    (set! g$current-output-port$13414$DDDPb
                                      g$t$13417$DDDPb))))
                               (g$current-output-port$13412$DDDPb))))))))
                     g$foreground-color$13386$DDDPb
                     current-output-port
                     'red
                     (current-error-port))
                    (g$k$13405$DDDPb))))
               (case-lambda
                 (()
                  (g$eval$13352$DDDPb
                    g$x$13404$DDDPb
                    (g$interaction-environment$13377$DDDPb)))))))))))
   (g$compile-system-libraries$13388$DDDPb
     g$compile-system-libraries$13449$DDDPb
     (case-lambda
       (()
        (g$eval-top-level$13387$DDDPb
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$13389$DDDPb
     g$compile$13450$DDDPb
     (case-lambda
       ((g$filename$13418$DDDPb)
        (g$load-r6rs-top-level$13391$DDDPb
          g$filename$13418$DDDPb
          'compile))))
   (g$compile->closure$13390$DDDPb
     g$compile->closure$13451$DDDPb
     (case-lambda
       ((g$filename$13419$DDDPb)
        (g$load-r6rs-top-level$13391$DDDPb
          g$filename$13419$DDDPb
          'closure))))
   (g$load-r6rs-top-level$13391$DDDPb
     g$load-r6rs-top-level$13452$DDDPb
     (case-lambda
       ((g$filename$13420$DDDPb g$how$13421$DDDPb . g$args$13422$DDDPb)
        ((case-lambda
           ((g$library-path$13425$DDDPb g$library-path$13426$DDDPb)
            ((case-lambda
               ((g$swap$13427$DDDPb)
                (dynamic-wind
                  g$swap$13427$DDDPb
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$13428$DDDPb)
                         ((case-lambda
                            ((g$t$13429$DDDPb)
                             (if (eqv? g$t$13429$DDDPb 'closure)
                               (g$pre-compile-r6rs-top-level$13375$DDDPb
                                 g$x*$13428$DDDPb)
                               (if (eqv? g$t$13429$DDDPb 'load)
                                 ((case-lambda
                                    ((g$command-line$13432$DDDPb
                                       g$command-line$13433$DDDPb)
                                     ((case-lambda
                                        ((g$swap$13434$DDDPb)
                                         (dynamic-wind
                                           g$swap$13434$DDDPb
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$13374$DDDPb
                                                 g$x*$13428$DDDPb))))
                                           g$swap$13434$DDDPb)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$13435$DDDPb)
                                             (begin
                                               (g$command-line$13432$DDDPb
                                                 g$command-line$13433$DDDPb)
                                               (set! g$command-line$13433$DDDPb
                                                 g$t$13435$DDDPb))))
                                          (g$command-line$13432$DDDPb)))))))
                                  g$command-line$13380$DDDPb
                                  (cons
                                    g$filename$13420$DDDPb
                                    (g$map$5753$DDDPb
                                      (case-lambda
                                        ((g$x$13436$DDDPb)
                                         (g$format$8095$DDDPb
                                           '"~a"
                                           g$x$13436$DDDPb)))
                                      g$args$13422$DDDPb)))
                                 (if (eqv? g$t$13429$DDDPb 'compile)
                                   (begin
                                     (g$compile-r6rs-top-level$13374$DDDPb
                                       g$x*$13428$DDDPb)
                                     (g$serialize-all$9079$DDDPb
                                       serialize-library
                                       g$compile-core-expr$8827$DDDPb))
                                   (if '#f '#f (void)))))))
                          g$how$13421$DDDPb)))
                      (g$with-input-from-file$7917$DDDPb
                        g$filename$13420$DDDPb
                        (case-lambda
                          (()
                           ((letrec ((g$f$13437$DDDPb
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$13438$DDDPb)
                                              (if (eof-object?
                                                    g$x$13438$DDDPb)
                                                '()
                                                (cons
                                                  g$x$13438$DDDPb
                                                  (g$f$13437$DDDPb)))))
                                           (read-annotated))))))
                              g$f$13437$DDDPb))))))))
                  g$swap$13427$DDDPb)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$13439$DDDPb)
                    (begin
                      (g$library-path$13425$DDDPb
                        g$library-path$13426$DDDPb)
                      (set! g$library-path$13426$DDDPb
                        g$t$13439$DDDPb))))
                 (g$library-path$13425$DDDPb)))))))
         g$library-path$9075$DDDPb
         (g$local-library-path$13381$DDDPb g$filename$13420$DDDPb)))))
   (g$fo$13392$DDDPb
     g$fo$13453$DDDPb
     (g$make-enumeration$8057$DDDPb '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$9080$DDDPb
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$13393$DDDPb)
         (if (g$serious-condition?$7092$DDDPb g$ex$13393$DDDPb)
           (raise g$ex$13393$DDDPb)
           (begin (display g$ex$13393$DDDPb) (g$newline$7921$DDDPb))))))
    (set-symbol-value! 'load g$load$13384$DDDPb)
    (set-symbol-value! 'compile g$compile$13389$DDDPb)
    (set-symbol-value! 'compile->closure g$compile->closure$13390$DDDPb)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$13387$DDDPb)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$13343$DDDPb)
    (set-symbol-value! 'expanded2core g$expanded->core$8826$DDDPb)
    (set-symbol-value! 'trace-printer g$trace-printer$13379$DDDPb)
    (set-symbol-value! 'convert->cps g$convert->cps$8777$DDDPb)
    (set-symbol-value! 'assertion-violation assertion-violation)
    (set-symbol-value! 'raise raise)
    (g$file-options-constructor$8261$DDDPb
      (g$enum-set-constructor$8060$DDDPb g$fo$13392$DDDPb))
    (g$library-path$9075$DDDPb (get-library-paths))))

