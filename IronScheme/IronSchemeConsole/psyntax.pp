;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((case-lambda ((g$make-parameter$13369 g$file-options-spec$13566) (begin (set! g$make-parameter$13369 (case-lambda ((g$x$13568) (g$make-parameter$13369 g$x$13568 (case-lambda ((g$x$13570) g$x$13570)))) ((g$x$13572 g$fender$13573) (begin (if (procedure? g$fender$13573) (void) (error 'assert '"assertion failed" '(procedure? fender))) ((case-lambda ((g$x$13576) (case-lambda (() g$x$13576) ((g$v$13578) (set! g$x$13576 (g$fender$13573 g$v$13578)))))) (g$fender$13573 g$x$13572)))))) (set! g$file-options-spec$13566 (case-lambda ((g$x$13580) (error 'file-options-spec '"not implemented")))) (begin (set! g$g$file-options-spec$13566$13582 g$file-options-spec$13566) (set! g$g$make-parameter$13369$13585 g$make-parameter$13369))))) '#f '#f)

((case-lambda ((g$current-primitive-locations$13587 g$mutable?$13589 g$rewriter$13591 g$need-quote-hack?$13593 g$expanded->core$13595 g$compile-core-expr-to-port$13597) (begin (set! g$current-primitive-locations$13587 (g$g$make-parameter$13369$13585 (case-lambda ((g$x$13599) '#f)) (case-lambda ((g$p$13601) (begin (if (procedure? g$p$13601) (void) (error 'assert '"assertion failed" '(procedure? p))) g$p$13601))))) (set! g$mutable?$13589 (case-lambda ((g$x$13603) ((case-lambda ((g$simple?$13605) (begin (set! g$simple?$13605 (case-lambda ((g$x$13607) ((case-lambda ((g$t$13609) (if g$t$13609 g$t$13609 ((case-lambda ((g$t$13611) (if g$t$13611 g$t$13611 ((case-lambda ((g$t$13613) (if g$t$13613 g$t$13613 ((case-lambda ((g$t$13615) (if g$t$13615 g$t$13615 (begin '#f (number? g$x$13607))))) (boolean? g$x$13607))))) (symbol? g$x$13607))))) (char? g$x$13607))))) (null? g$x$13607))))) (not (g$simple?$13605 g$x$13603))))) '#f)))) (set! g$rewriter$13591 (case-lambda ((g$quote-hack?$13617) ((case-lambda ((g$f$13619) (begin (set! g$f$13619 (case-lambda ((g$x$13621) (if (pair? g$x$13621) ((case-lambda ((g$t$13623) (if (memv g$t$13623 '(quote)) (if (if g$quote-hack?$13617 (begin '#f (g$mutable?$13589 (cadr g$x$13621))) '#f) ((case-lambda ((g$g$13648) (begin (set-symbol-value! g$g$13648 (cadr g$x$13621)) g$g$13648))) (gensym)) g$x$13621) (if (memv g$t$13623 '(case-lambda)) (cons 'case-lambda (map (case-lambda ((g$x$13646) (cons (car g$x$13646) (map g$f$13619 (cdr g$x$13646))))) (cdr g$x$13621))) (if (memv g$t$13623 '(lambda)) (cons* 'lambda (cadr g$x$13621) (map g$f$13619 (cddr g$x$13621))) (if (memv g$t$13623 '(letrec)) ((case-lambda ((g$bindings$13638 g$body*$13639) ((case-lambda ((g$lhs*$13642 g$rhs*$13643) (cons* 'letrec (map list g$lhs*$13642 (map g$f$13619 g$rhs*$13643)) (map g$f$13619 g$body*$13639)))) (map car g$bindings$13638) (map cadr g$bindings$13638)))) (cadr g$x$13621) (cddr g$x$13621)) (if (memv g$t$13623 '(letrec*)) ((case-lambda ((g$bindings$13630 g$body*$13631) ((case-lambda ((g$lhs*$13634 g$rhs*$13635) (cons* 'letrec* (map list g$lhs*$13634 (map g$f$13619 g$rhs*$13635)) (map g$f$13619 g$body*$13631)))) (map car g$bindings$13630) (map cadr g$bindings$13630)))) (cadr g$x$13621) (cddr g$x$13621)) (if (memv g$t$13623 '(begin)) (cons 'begin (map g$f$13619 (cdr g$x$13621))) (if (memv g$t$13623 '(set!)) (list 'set! (cadr g$x$13621) (g$f$13619 (caddr g$x$13621))) (if (memv g$t$13623 '(primitive)) ((case-lambda ((g$op$13624) ((case-lambda ((g$t$13626) (if g$t$13626 ((case-lambda ((g$loc$13628) g$loc$13628)) g$t$13626) g$op$13624))) ((g$current-primitive-locations$13587) g$op$13624)))) (cadr g$x$13621)) (if (memv g$t$13623 '(define)) g$x$13621 (if (list? g$x$13621) (map g$f$13619 g$x$13621) (error 'rewrite '"invalid form ~s ~s" g$x$13621 (list? g$x$13621)))))))))))))) (car g$x$13621)) g$x$13621)))) g$f$13619))) '#f)))) (set! g$need-quote-hack?$13593 ((case-lambda ((g$x$13650) (not (eq? (eval-core (list 'quote g$x$13650)) (eval-core (list 'quote g$x$13650)))))) (cons '1 '2))) (set! g$expanded->core$13595 (case-lambda ((g$x$13652) ((g$rewriter$13591 g$need-quote-hack?$13593) g$x$13652)))) (set! g$compile-core-expr-to-port$13597 (case-lambda ((g$x$13654 g$p$13655) (begin (pretty-print ((g$rewriter$13591 '#f) g$x$13654) g$p$13655) (newline g$p$13655))))) (begin (set! g$g$compile-core-expr-to-port$13597$13658 g$compile-core-expr-to-port$13597) (set! g$g$expanded->core$13595$13659 g$expanded->core$13595) (set! g$g$need-quote-hack?$13593$13660 g$need-quote-hack?$13593) (set! g$g$rewriter$13591$13661 g$rewriter$13591) (set! g$g$mutable?$13589$13662 g$mutable?$13589) (set! g$g$current-primitive-locations$13587$13663 g$current-primitive-locations$13587))))) '#f '#f '#f '#f '#f '#f)

(void)

((case-lambda ((g$make-collection$13727 g$current-library-collection$13729 g$make-library$13732 g$library?$13734 g$library-id$13736 g$library-name$13738 g$library-version$13740 g$library-imp*$13742 g$library-vis*$13744 g$library-inv*$13746 g$library-subst$13748 g$library-env$13750 g$library-visit-state$13752 g$library-invoke-state$13754 g$library-visible?$13756 g$set-library-id!$13758 g$set-library-name!$13760 g$set-library-version!$13762 g$set-library-imp*!$13764 g$set-library-vis*!$13766 g$set-library-inv*!$13768 g$set-library-subst!$13770 g$set-library-env!$13772 g$set-library-visit-state!$13774 g$set-library-invoke-state!$13776 g$set-library-visible?!$13778 g$find-dependencies$13780 g$find-library-by$13782 g$library-path$13784 g$library-name->file-name$13786 g$file-locator$13788 g$library-locator$13790 g$current-library-expander$13792 g$external-pending-libraries$13794 g$find-external-library$13796 g$find-library-by-name$13798 g$library-exists?$13800 g$find-library-by-spec/die$13802 g$label->binding-table$13804 g$install-library-record$13806 g$install-library$13808 g$extend-library-subst!$13810 g$extend-library-env!$13812 g$imported-label->binding$13814 g$invoke-library$13816 g$visit-library$13818 g$invoke-library-by-spec$13820 g$installed-libraries$13822 g$library-spec$13824) (begin (set! g$make-collection$13727 (case-lambda (() ((case-lambda ((g$set$13826) ((case-lambda ((g$set-cons$13828) (begin (set! g$set-cons$13828 (case-lambda ((g$x$13830 g$ls$13831) (if (memq g$x$13830 g$ls$13831) g$ls$13831 (cons g$x$13830 g$ls$13831))))) (case-lambda (() g$set$13826) ((g$x$13834) (set! g$set$13826 (g$set-cons$13828 g$x$13834 g$set$13826))))))) '#f))) '())))) (set! g$current-library-collection$13729 (g$g$make-parameter$13369$13585 (g$make-collection$13727) (case-lambda ((g$x$13836) (begin (if (procedure? g$x$13836) (void) (error 'current-library-collection '"not a procedure" g$x$13836)) g$x$13836))))) (set! g$make-library$13732 (case-lambda ((g$id$13838 g$name$13839 g$version$13840 g$imp*$13841 g$vis*$13842 g$inv*$13843 g$subst$13844 g$env$13845 g$visit-state$13846 g$invoke-state$13847 g$visible?$13848) (vector 'g$13731 g$id$13838 g$name$13839 g$version$13840 g$imp*$13841 g$vis*$13842 g$inv*$13843 g$subst$13844 g$env$13845 g$visit-state$13846 g$invoke-state$13847 g$visible?$13848)))) (set! g$library?$13734 (case-lambda ((g$x$13860) (if (vector? g$x$13860) (if (= (vector-length g$x$13860) (+ '1 (length '(id name version imp* vis* inv* subst env visit-state invoke-state visible?)))) (begin '#f (eq? (vector-ref g$x$13860 '0) 'g$13731)) '#f) '#f)))) (set! g$library-id$13736 (case-lambda ((g$x$13862) (if (g$library?$13734 g$x$13862) (vector-ref g$x$13862 '1) (error 'library-id '"~s is not of type ~s" g$x$13862 'library))))) (set! g$library-name$13738 (case-lambda ((g$x$13864) (if (g$library?$13734 g$x$13864) (vector-ref g$x$13864 '2) (error 'library-name '"~s is not of type ~s" g$x$13864 'library))))) (set! g$library-version$13740 (case-lambda ((g$x$13866) (if (g$library?$13734 g$x$13866) (vector-ref g$x$13866 '3) (error 'library-version '"~s is not of type ~s" g$x$13866 'library))))) (set! g$library-imp*$13742 (case-lambda ((g$x$13868) (if (g$library?$13734 g$x$13868) (vector-ref g$x$13868 '4) (error 'library-imp* '"~s is not of type ~s" g$x$13868 'library))))) (set! g$library-vis*$13744 (case-lambda ((g$x$13870) (if (g$library?$13734 g$x$13870) (vector-ref g$x$13870 '5) (error 'library-vis* '"~s is not of type ~s" g$x$13870 'library))))) (set! g$library-inv*$13746 (case-lambda ((g$x$13872) (if (g$library?$13734 g$x$13872) (vector-ref g$x$13872 '6) (error 'library-inv* '"~s is not of type ~s" g$x$13872 'library))))) (set! g$library-subst$13748 (case-lambda ((g$x$13874) (if (g$library?$13734 g$x$13874) (vector-ref g$x$13874 '7) (error 'library-subst '"~s is not of type ~s" g$x$13874 'library))))) (set! g$library-env$13750 (case-lambda ((g$x$13876) (if (g$library?$13734 g$x$13876) (vector-ref g$x$13876 '8) (error 'library-env '"~s is not of type ~s" g$x$13876 'library))))) (set! g$library-visit-state$13752 (case-lambda ((g$x$13878) (if (g$library?$13734 g$x$13878) (vector-ref g$x$13878 '9) (error 'library-visit-state '"~s is not of type ~s" g$x$13878 'library))))) (set! g$library-invoke-state$13754 (case-lambda ((g$x$13880) (if (g$library?$13734 g$x$13880) (vector-ref g$x$13880 '10) (error 'library-invoke-state '"~s is not of type ~s" g$x$13880 'library))))) (set! g$library-visible?$13756 (case-lambda ((g$x$13882) (if (g$library?$13734 g$x$13882) (vector-ref g$x$13882 '11) (error 'library-visible? '"~s is not of type ~s" g$x$13882 'library))))) (set! g$set-library-id!$13758 (case-lambda ((g$x$13884 g$v$13885) (if (g$library?$13734 g$x$13884) (vector-set! g$x$13884 '1 g$v$13885) (error 'set-library-id! '"~s is not of type ~s" g$x$13884 'library))))) (set! g$set-library-name!$13760 (case-lambda ((g$x$13888 g$v$13889) (if (g$library?$13734 g$x$13888) (vector-set! g$x$13888 '2 g$v$13889) (error 'set-library-name! '"~s is not of type ~s" g$x$13888 'library))))) (set! g$set-library-version!$13762 (case-lambda ((g$x$13892 g$v$13893) (if (g$library?$13734 g$x$13892) (vector-set! g$x$13892 '3 g$v$13893) (error 'set-library-version! '"~s is not of type ~s" g$x$13892 'library))))) (set! g$set-library-imp*!$13764 (case-lambda ((g$x$13896 g$v$13897) (if (g$library?$13734 g$x$13896) (vector-set! g$x$13896 '4 g$v$13897) (error 'set-library-imp*! '"~s is not of type ~s" g$x$13896 'library))))) (set! g$set-library-vis*!$13766 (case-lambda ((g$x$13900 g$v$13901) (if (g$library?$13734 g$x$13900) (vector-set! g$x$13900 '5 g$v$13901) (error 'set-library-vis*! '"~s is not of type ~s" g$x$13900 'library))))) (set! g$set-library-inv*!$13768 (case-lambda ((g$x$13904 g$v$13905) (if (g$library?$13734 g$x$13904) (vector-set! g$x$13904 '6 g$v$13905) (error 'set-library-inv*! '"~s is not of type ~s" g$x$13904 'library))))) (set! g$set-library-subst!$13770 (case-lambda ((g$x$13908 g$v$13909) (if (g$library?$13734 g$x$13908) (vector-set! g$x$13908 '7 g$v$13909) (error 'set-library-subst! '"~s is not of type ~s" g$x$13908 'library))))) (set! g$set-library-env!$13772 (case-lambda ((g$x$13912 g$v$13913) (if (g$library?$13734 g$x$13912) (vector-set! g$x$13912 '8 g$v$13913) (error 'set-library-env! '"~s is not of type ~s" g$x$13912 'library))))) (set! g$set-library-visit-state!$13774 (case-lambda ((g$x$13916 g$v$13917) (if (g$library?$13734 g$x$13916) (vector-set! g$x$13916 '9 g$v$13917) (error 'set-library-visit-state! '"~s is not of type ~s" g$x$13916 'library))))) (set! g$set-library-invoke-state!$13776 (case-lambda ((g$x$13920 g$v$13921) (if (g$library?$13734 g$x$13920) (vector-set! g$x$13920 '10 g$v$13921) (error 'set-library-invoke-state! '"~s is not of type ~s" g$x$13920 'library))))) (set! g$set-library-visible?!$13778 (case-lambda ((g$x$13924 g$v$13925) (if (g$library?$13734 g$x$13924) (vector-set! g$x$13924 '11 g$v$13925) (error 'set-library-visible?! '"~s is not of type ~s" g$x$13924 'library))))) (set! g$find-dependencies$13780 (case-lambda ((g$ls$13928) (if (null? g$ls$13928) '() (error 'find-dependencies '"cannot handle deps yet"))))) (set! g$find-library-by$13782 (case-lambda ((g$pred$13930) (letrec ((g$f$13932 (case-lambda ((g$ls$13934) (if (null? g$ls$13934) '#f (if (g$pred$13930 (car g$ls$13934)) (car g$ls$13934) (g$f$13932 (cdr g$ls$13934)))))))) (g$f$13932 ((g$current-library-collection$13729))))))) (set! g$library-path$13784 (g$g$make-parameter$13369$13585 '(".") (case-lambda ((g$x$13936) (if (if (list? g$x$13936) (begin '#f (for-all string? g$x$13936)) '#f) (map (case-lambda ((g$x$13938) g$x$13938)) g$x$13936) (error 'library-path '"not a list of strings" g$x$13936)))))) (set! g$library-name->file-name$13786 (case-lambda ((g$x$13940) (call-with-values (case-lambda (() (open-string-output-port))) (case-lambda ((g$p$13942 g$extract$13943) ((case-lambda ((g$display-hex$13946) (begin (set! g$display-hex$13946 (case-lambda ((g$n$13948) (if (<= '0 g$n$13948 '9) (display g$n$13948 g$p$13942) (display (integer->char (+ (char->integer '#\A) (- g$n$13948 '10))) g$p$13942))))) (begin (letrec ((g$f$13950 (case-lambda ((g$ls$13952) (if (null? g$ls$13952) (display '".ss" g$p$13942) (begin (display '"/" g$p$13942) (for-each (case-lambda ((g$c$13954) (if ((case-lambda ((g$t$13956) (if g$t$13956 g$t$13956 ((case-lambda ((g$t$13958) (if g$t$13958 g$t$13958 ((case-lambda ((g$t$13960) (if g$t$13960 g$t$13960 (begin '#f (memv g$c$13954 '(#\- #\. #\_ #\~)))))) (char<=? '#\0 g$c$13954 '#\9))))) (char<=? '#\A g$c$13954 '#\Z))))) (char<=? '#\a g$c$13954 '#\z)) (display g$c$13954 g$p$13942) (begin (display '"%" g$p$13942) ((case-lambda ((g$n$13962) (begin (g$display-hex$13946 (quotient g$n$13962 '16)) (g$display-hex$13946 (remainder g$n$13962 '16))))) (char->integer g$c$13954)))))) (string->list (symbol->string (car g$ls$13952)))) (g$f$13950 (cdr g$ls$13952)))))))) (g$f$13950 g$x$13940)) (g$extract$13943))))) '#f))))))) (set! g$file-locator$13788 (g$g$make-parameter$13369$13585 (case-lambda ((g$x$13964) ((case-lambda ((g$str$13966) (letrec ((g$f$13968 (case-lambda ((g$ls$13970) (if (pair? g$ls$13970) (begin '#f ((case-lambda ((g$name$13972) (if (file-exists? g$name$13972) g$name$13972 (g$f$13968 (cdr g$ls$13970))))) (string-append (car g$ls$13970) g$str$13966))) '#f))))) (g$f$13968 (g$library-path$13784))))) (g$library-name->file-name$13786 g$x$13964)))) (case-lambda ((g$f$13974) (if (procedure? g$f$13974) g$f$13974 (error 'file-locator '"not a procedure" g$f$13974)))))) (set! g$library-locator$13790 (g$g$make-parameter$13369$13585 (case-lambda ((g$x$13976) ((case-lambda ((g$file-name$13978) (if (string? g$file-name$13978) (begin '#f (with-input-from-file g$file-name$13978 read)) '#f))) ((g$file-locator$13788) g$x$13976)))) (case-lambda ((g$f$13980) (if (procedure? g$f$13980) g$f$13980 (error 'library-locator '"not a procedure" g$f$13980)))))) (set! g$current-library-expander$13792 (g$g$make-parameter$13369$13585 (case-lambda ((g$x$13982) (error 'library-expander '"not initialized"))) (case-lambda ((g$f$13984) (if (procedure? g$f$13984) g$f$13984 (error 'library-expander '"not a procedure" g$f$13984)))))) (set! g$external-pending-libraries$13794 (g$g$make-parameter$13369$13585 '())) (set! g$find-external-library$13796 (case-lambda ((g$name$13986) (begin (if (member g$name$13986 (g$external-pending-libraries$13794)) (error '#f '"circular attempt to import library was detected" g$name$13986) (void)) ((case-lambda ((g$g$t$13988$13990 g$g$t$13989$13991) ((case-lambda ((g$swap$13994) (dynamic-wind g$swap$13994 (case-lambda (() ((case-lambda ((g$lib-expr$13996) (begin (if g$lib-expr$13996 (void) (error '#f '"cannot find library" g$name$13986)) ((g$current-library-expander$13792) g$lib-expr$13996) ((case-lambda ((g$t$13998) (if g$t$13998 g$t$13998 (begin '#f (error '#f '"handling external library did not yield the currect library" g$name$13986))))) (g$find-library-by$13782 (case-lambda ((g$x$14000) (equal? (g$library-name$13738 g$x$14000) g$name$13986)))))))) ((g$library-locator$13790) g$name$13986)))) g$swap$13994))) (case-lambda (() ((case-lambda ((g$t$14002) (begin (g$g$t$13988$13990 g$g$t$13989$13991) (set! g$g$t$13989$13991 g$t$14002)))) (g$g$t$13988$13990))))))) g$external-pending-libraries$13794 (cons g$name$13986 (g$external-pending-libraries$13794))))))) (set! g$find-library-by-name$13798 (case-lambda ((g$name$14004) ((case-lambda ((g$t$14006) (if g$t$14006 g$t$14006 (begin '#f (g$find-external-library$13796 g$name$14004))))) (g$find-library-by$13782 (case-lambda ((g$x$14008) (equal? (g$library-name$13738 g$x$14008) g$name$14004)))))))) (set! g$library-exists?$13800 (case-lambda ((g$name$14010) (if (g$find-library-by$13782 (case-lambda ((g$x$14012) (equal? (g$library-name$13738 g$x$14012) g$name$14010)))) (begin '#f '#t) '#f)))) (set! g$find-library-by-spec/die$13802 (case-lambda ((g$spec$14014) ((case-lambda ((g$id$14016) ((case-lambda ((g$t$14018) (if g$t$14018 g$t$14018 (begin '#f (error '#f '"cannot find library with required spec" g$spec$14014))))) (g$find-library-by$13782 (case-lambda ((g$x$14020) (eq? g$id$14016 (g$library-id$13736 g$x$14020)))))))) (car g$spec$14014))))) (set! g$label->binding-table$13804 (make-eq-hashtable)) (set! g$install-library-record$13806 (case-lambda ((g$lib$14022) (begin ((case-lambda ((g$exp-env$14024) (for-each (case-lambda ((g$x$14026) ((case-lambda ((g$label$14028 g$binding$14029) ((case-lambda ((g$binding$14032) (hashtable-set! g$label->binding-table$13804 g$label$14028 g$binding$14032))) ((case-lambda ((g$t$14034) (if (memv g$t$14034 '(global)) (cons 'global (cons g$lib$14022 (cdr g$binding$14029))) (if (memv g$t$14034 '(global-macro)) (cons 'global-macro (cons g$lib$14022 (cdr g$binding$14029))) (if (memv g$t$14034 '(global-macro!)) (cons 'global-macro! (cons g$lib$14022 (cdr g$binding$14029))) g$binding$14029))))) (car g$binding$14029))))) (car g$x$14026) (cdr g$x$14026)))) g$exp-env$14024))) (g$library-env$13750 g$lib$14022)) ((g$current-library-collection$13729) g$lib$14022))))) (set! g$install-library$13808 (case-lambda ((g$id$14035 g$name$14036 g$ver$14037 g$imp*$14038 g$vis*$14039 g$inv*$14040 g$exp-subst$14041 g$exp-env$14042 g$visit-code$14043 g$invoke-code$14044 g$visible?$14045) ((case-lambda ((g$imp-lib*$14057 g$vis-lib*$14058 g$inv-lib*$14059) (begin (if (if (symbol? g$id$14035) (if (list? g$name$14036) (begin '#f (list? g$ver$14037)) '#f) '#f) (void) (error 'install-library '"invalid spec with id/name/ver" g$id$14035 g$name$14036 g$ver$14037)) (if (g$library-exists?$13800 g$name$14036) (error 'install-library '"library is already installed" g$name$14036) (void)) ((case-lambda ((g$lib$14063) (g$install-library-record$13806 g$lib$14063))) (g$make-library$13732 g$id$14035 g$name$14036 g$ver$14037 g$imp-lib*$14057 g$vis-lib*$14058 g$inv-lib*$14059 g$exp-subst$14041 g$exp-env$14042 g$visit-code$14043 g$invoke-code$14044 g$visible?$14045))))) (map g$find-library-by-spec/die$13802 g$imp*$14038) (map g$find-library-by-spec/die$13802 g$vis*$14039) (map g$find-library-by-spec/die$13802 g$inv*$14040))))) (set! g$extend-library-subst!$13810 (case-lambda ((g$lib$14065 g$sym$14066 g$label$14067) (g$set-library-subst!$13770 g$lib$14065 (cons (cons g$sym$14066 g$label$14067) (g$library-subst$13748 g$lib$14065)))))) (set! g$extend-library-env!$13812 (case-lambda ((g$lib$14071 g$label$14072 g$binding$14073) (begin (g$set-library-env!$13772 g$lib$14071 (cons (cons g$label$14072 g$binding$14073) (g$library-env$13750 g$lib$14071))) (hashtable-set! g$label->binding-table$13804 g$label$14072 g$binding$14073))))) (set! g$imported-label->binding$13814 (case-lambda ((g$lab$14077) (hashtable-ref g$label->binding-table$13804 g$lab$14077 '#f)))) (set! g$invoke-library$13816 (case-lambda ((g$lib$14079) ((case-lambda ((g$invoke$14081) (if (procedure? g$invoke$14081) (begin (g$set-library-invoke-state!$13776 g$lib$14079 (case-lambda (() (error 'invoke '"circularity detected" g$lib$14079)))) (for-each g$invoke-library$13816 (g$library-inv*$13746 g$lib$14079)) (g$set-library-invoke-state!$13776 g$lib$14079 (case-lambda (() (error 'invoke '"first invoke did not return" g$lib$14079)))) (g$invoke$14081) (g$set-library-invoke-state!$13776 g$lib$14079 '#t)) (void)))) (g$library-invoke-state$13754 g$lib$14079))))) (set! g$visit-library$13818 (case-lambda ((g$lib$14083) ((case-lambda ((g$visit$14085) (if (procedure? g$visit$14085) (begin (g$set-library-visit-state!$13774 g$lib$14083 (case-lambda (() (error 'visit '"circularity detected" g$lib$14083)))) (for-each g$invoke-library$13816 (g$library-vis*$13744 g$lib$14083)) (g$set-library-visit-state!$13774 g$lib$14083 (case-lambda (() (error 'invoke '"first visit did not return" g$lib$14083)))) (g$visit$14085) (g$set-library-visit-state!$13774 g$lib$14083 '#t)) (void)))) (g$library-visit-state$13752 g$lib$14083))))) (set! g$invoke-library-by-spec$13820 (case-lambda ((g$spec$14087) (g$invoke-library$13816 (g$find-library-by-spec/die$13802 g$spec$14087))))) (set! g$installed-libraries$13822 (case-lambda ((g$all?$14089) (letrec ((g$f$14091 (case-lambda ((g$ls$14093) (if (null? g$ls$14093) '() (if ((case-lambda ((g$t$14095) (if g$t$14095 g$t$14095 (begin '#f (g$library-visible?$13756 (car g$ls$14093)))))) g$all?$14089) (cons (car g$ls$14093) (g$f$14091 (cdr g$ls$14093))) (g$f$14091 (cdr g$ls$14093)))))))) (g$f$14091 ((g$current-library-collection$13729))))) (() (g$installed-libraries$13822 '#f)))) (set! g$library-spec$13824 (case-lambda ((g$x$14097) (begin (if (g$library?$13734 g$x$14097) (void) (error 'library-spec '"not a library" g$x$14097)) (list (g$library-id$13736 g$x$14097) (g$library-name$13738 g$x$14097) (g$library-version$13740 g$x$14097)))))) (begin (set! g$g$library-spec$13824$14099 g$library-spec$13824) (set! g$g$installed-libraries$13822$14100 g$installed-libraries$13822) (set! g$g$invoke-library-by-spec$13820$14101 g$invoke-library-by-spec$13820) (set! g$g$visit-library$13818$14102 g$visit-library$13818) (set! g$g$invoke-library$13816$14103 g$invoke-library$13816) (set! g$g$imported-label->binding$13814$14104 g$imported-label->binding$13814) (set! g$g$extend-library-env!$13812$14105 g$extend-library-env!$13812) (set! g$g$extend-library-subst!$13810$14106 g$extend-library-subst!$13810) (set! g$g$install-library$13808$14107 g$install-library$13808) (set! g$g$install-library-record$13806$14108 g$install-library-record$13806) (set! g$g$label->binding-table$13804$14109 g$label->binding-table$13804) (set! g$g$find-library-by-spec/die$13802$14110 g$find-library-by-spec/die$13802) (set! g$g$library-exists?$13800$14111 g$library-exists?$13800) (set! g$g$find-library-by-name$13798$14112 g$find-library-by-name$13798) (set! g$g$find-external-library$13796$14113 g$find-external-library$13796) (set! g$g$external-pending-libraries$13794$14114 g$external-pending-libraries$13794) (set! g$g$current-library-expander$13792$14115 g$current-library-expander$13792) (set! g$g$library-locator$13790$14116 g$library-locator$13790) (set! g$g$file-locator$13788$14117 g$file-locator$13788) (set! g$g$library-name->file-name$13786$14118 g$library-name->file-name$13786) (set! g$g$library-path$13784$14119 g$library-path$13784) (set! g$g$find-library-by$13782$14120 g$find-library-by$13782) (set! g$g$find-dependencies$13780$14121 g$find-dependencies$13780) (set! g$g$set-library-visible?!$13778$14122 g$set-library-visible?!$13778) (set! g$g$set-library-invoke-state!$13776$14123 g$set-library-invoke-state!$13776) (set! g$g$set-library-visit-state!$13774$14124 g$set-library-visit-state!$13774) (set! g$g$set-library-env!$13772$14125 g$set-library-env!$13772) (set! g$g$set-library-subst!$13770$14126 g$set-library-subst!$13770) (set! g$g$set-library-inv*!$13768$14127 g$set-library-inv*!$13768) (set! g$g$set-library-vis*!$13766$14128 g$set-library-vis*!$13766) (set! g$g$set-library-imp*!$13764$14129 g$set-library-imp*!$13764) (set! g$g$set-library-version!$13762$14130 g$set-library-version!$13762) (set! g$g$set-library-name!$13760$14131 g$set-library-name!$13760) (set! g$g$set-library-id!$13758$14132 g$set-library-id!$13758) (set! g$g$library-visible?$13756$14133 g$library-visible?$13756) (set! g$g$library-invoke-state$13754$14134 g$library-invoke-state$13754) (set! g$g$library-visit-state$13752$14135 g$library-visit-state$13752) (set! g$g$library-env$13750$14136 g$library-env$13750) (set! g$g$library-subst$13748$14137 g$library-subst$13748) (set! g$g$library-inv*$13746$14138 g$library-inv*$13746) (set! g$g$library-vis*$13744$14139 g$library-vis*$13744) (set! g$g$library-imp*$13742$14140 g$library-imp*$13742) (set! g$g$library-version$13740$14141 g$library-version$13740) (set! g$g$library-name$13738$14142 g$library-name$13738) (set! g$g$library-id$13736$14143 g$library-id$13736) (set! g$g$library?$13734$14144 g$library?$13734) (set! g$g$make-library$13732$14145 g$make-library$13732) (set! g$g$current-library-collection$13729$14146 g$current-library-collection$13729) (set! g$g$make-collection$13727$14147 g$make-collection$13727))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)

((case-lambda ((g$build-global-define$14149 g$build-lambda$14267 g$build-case-lambda$14269 g$build-let$14271 g$build-sequence$14335 g$build-void$14337 g$build-letrec$14339 g$build-letrec*$14341) (begin (set! g$build-global-define$14149 (case-lambda ((g$x$14343) (g$build-void$14337)))) (set! g$build-lambda$14267 (case-lambda ((g$ae$14345 g$vars$14346 g$exp$14347) (list 'case-lambda (list g$vars$14346 g$exp$14347))))) (set! g$build-case-lambda$14269 (case-lambda ((g$ae$14351 g$vars*$14352 g$exp*$14353) (cons 'case-lambda (map list g$vars*$14352 g$exp*$14353))))) (set! g$build-let$14271 (case-lambda ((g$ae$14357 g$lhs*$14358 g$rhs*$14359 g$body$14360) (cons (g$build-lambda$14267 g$ae$14357 g$lhs*$14358 g$body$14360) g$rhs*$14359)))) (set! g$build-sequence$14335 (case-lambda ((g$ae$14365 g$exps$14366) (letrec ((g$loop$14369 (case-lambda ((g$exps$14371) (if (null? (cdr g$exps$14371)) (car g$exps$14371) (if (equal? (car g$exps$14371) (g$build-void$14337)) (g$loop$14369 (cdr g$exps$14371)) (cons 'begin g$exps$14371))))))) (g$loop$14369 g$exps$14366))))) (set! g$build-void$14337 (case-lambda (() '((primitive void))))) (set! g$build-letrec$14339 (case-lambda ((g$ae$14373 g$vars$14374 g$val-exps$14375 g$body-exp$14376) (if (null? g$vars$14374) g$body-exp$14376 (list 'letrec (map list g$vars$14374 g$val-exps$14375) g$body-exp$14376))))) (set! g$build-letrec*$14341 (case-lambda ((g$ae$14381 g$vars$14382 g$val-exps$14383 g$body-exp$14384) (if (null? g$vars$14382) g$body-exp$14384 (g$build-let$14271 g$ae$14381 g$vars$14382 (map (case-lambda ((g$x$14389) (list 'quote '#f))) g$vars$14382) (g$build-sequence$14335 g$ae$14381 (append (map (case-lambda ((g$lhs$14391 g$rhs$14392) (list 'set! g$lhs$14391 g$rhs$14392))) g$vars$14382 g$val-exps$14383) (list g$body-exp$14384)))))))) (begin (set! g$g$build-letrec*$14341$14395 g$build-letrec*$14341) (set! g$g$build-letrec$14339$14396 g$build-letrec$14339) (set! g$g$build-void$14337$14397 g$build-void$14337) (set! g$g$build-sequence$14335$14398 g$build-sequence$14335) (set! g$g$build-let$14271$14402 g$build-let$14271) (set! g$g$build-case-lambda$14269$14403 g$build-case-lambda$14269) (set! g$g$build-lambda$14267$14404 g$build-lambda$14267) (set! g$g$build-global-define$14149$14412 g$build-global-define$14149))))) '#f '#f '#f '#f '#f '#f '#f '#f)

((case-lambda ((g$set-cons$14414 g$set-union$14416 g$top-mark*$14421 g$top-marked?$14423 g$gen-lexical$14425 g$gen-global$14427 g$gen-label$14429 g$make-rib$14432 g$rib?$14434 g$rib-sym*$14436 g$rib-mark**$14438 g$rib-label*$14440 g$rib-sealed/freq$14442 g$set-rib-sym*!$14444 g$set-rib-mark**!$14446 g$set-rib-label*!$14448 g$set-rib-sealed/freq!$14450 g$make-empty-rib$14452 g$extend-rib!$14454 g$seal-rib!$14456 g$unseal-rib!$14458 g$increment-rib-frequency!$14460 g$make-full-rib$14462 g$make-stx$14465 g$stx?$14467 g$stx-expr$14469 g$stx-mark*$14471 g$stx-subst*$14473 g$set-stx-expr!$14475 g$set-stx-mark*!$14477 g$set-stx-subst*!$14479 g$datum->stx$14481 g$gen-mark$14483 g$anti-mark$14485 g$anti-mark?$14487 g$join-wraps$14489 g$mkstx$14491 g$add-mark$14493 g$add-subst$14495 g$syntax-kind?$14497 g$syntax-vector->list$14499 g$syntax-pair?$14501 g$syntax-vector?$14503 g$syntax-null?$14505 g$syntax-list?$14507 g$syntax-car$14509 g$syntax->list$14511 g$syntax-cdr$14513 g$id?$14515 g$id->sym$14517 g$same-marks?$14519 g$bound-id=?$14521 g$free-id=?$14523 g$valid-bound-ids?$14525 g$distinct-bound-ids?$14527 g$bound-id-member?$14529 g$self-evaluating?$14531 g$strip$14533 g$stx->datum$14535 g$id->label$14537 g$label->binding$14539 g$make-binding$14541 g$binding-type$14543 g$binding-value$14545 g$syntax-type$14547 g$sanitize-binding$14574 g$make-variable-transformer$14576 g$make-eval-transformer$14578 g$parse-define$14940 g$parse-define-syntax$14942 g$scheme-stx$14944 g$add-lexical$14946 g$add-lexicals$14948 g$let-values-transformer$14950 g$letrec-helper$14952 g$letrec-transformer$14954 g$letrec*-transformer$14956 g$type-descriptor-transformer$14958 g$record-type-descriptor-transformer$14960 g$record-constructor-descriptor-transformer$14962 g$when-transformer$14964 g$unless-transformer$14966 g$if-transformer$14968 g$case-transformer$14970 g$quote-transformer$14972 g$case-lambda-transformer$14974 g$lambda-transformer$14976 g$bless$14978 g$with-syntax-macro$14980 g$let-macro$14982 g$trace-lambda-macro$14984 g$trace-define-macro$14986 g$guard-macro$14988 g$define-enumeration-macro$14990 g$time-macro$14992 g$delay-macro$14994 g$assert-macro$14996 g$endianness-macro$14998 g$identifier-syntax-macro$15000 g$do-macro$15002 g$let*-macro$15004 g$or-macro$15006 g$and-macro$15008 g$cond-macro$15010 g$include-macro$15012 g$syntax-rules-macro$15014 g$quasiquote-macro$15016 g$quasisyntax-macro$15018 g$define-struct-macro$15020 g$define-record-type-macro$15022 g$define-condition-type-macro$15024 g$incorrect-usage-macro$15026 g$parameterize-transformer$15028 g$foreign-call-transformer$15030 g$convert-pattern$15032 g$syntax-dispatch$15034 g$ellipsis?$15036 g$syntax-case-transformer$15038 g$syntax-transformer$15040 g$core-macro-transformer$15042 g$file-options-macro$15044 g$symbol-macro$15046 g$macro-transformer$15048 g$local-macro-transformer$15050 g$chi-macro$15052 g$chi-local-macro$15054 g$chi-global-macro$15056 g$chi-expr*$15058 g$chi-application$15060 g$chi-expr$15062 g$chi-set!$15064 g$chi-lambda-clause$15066 g$chi-lambda-clause*$15068 g$chi-rhs$15070 g$chi-rhs*$15072 g$find-bound=?$15074 g$find-dups$15076 g$chi-internal$15078 g$parse-module$15080 g$chi-internal-module$15082 g$chi-body*$15084 g$set-global-macro-binding!$15086 g$gen-global-macro-binding$15088 g$gen-global-var-binding$15090 g$chi-top-set!$15092 g$chi-top*$15094 g$expand-transformer$15096 g$parse-exports$15098 g$parse-library-name$15100 g$parse-library$15102 g$parse-import-spec*$15104 g$make-top-rib$15106 g$make-collector$15108 g$inv-collector$15110 g$vis-collector$15112 g$chi-library-internal$15114 g$library-body-expander$15116 g$core-library-expander$15118 g$parse-top-level-program$15120 g$top-level-expander$15122 g$make-env$15125 g$env?$15127 g$env-subst$15129 g$env-imp*$15131 g$set-env-subst!$15133 g$set-env-imp*!$15135 g$environment?$15137 g$environment$15139 g$null-environment$15141 g$scheme-report-environment$15143 g$expand$15145 g$eval$15147 g$library-expander$15149 g$boot-library-expand$15151 g$rev-map-append$15153 g$build-exports$15155 g$make-export-subst$15157 g$make-export-env/macros$15159 g$generate-temporaries$15161 g$free-identifier=?$15163 g$bound-identifier=?$15165 g$syntax-error$15167 g$identifier?$15169 g$datum->syntax$15171 g$syntax->datum$15173 g$eval-r6rs-top-level$15175 g$interaction-library$15177 g$interaction-sym->label$15179 g$eval-top-level$15181) (begin (set! g$set-cons$14414 (case-lambda ((g$x$15183 g$ls$15184) (if (memq g$x$15183 g$ls$15184) g$ls$15184 (cons g$x$15183 g$ls$15184))))) (set! g$set-union$14416 (case-lambda ((g$ls1$15187 g$ls2$15188) (if (null? g$ls1$15187) g$ls2$15188 (if (memq (car g$ls1$15187) g$ls2$15188) (g$set-union$14416 (cdr g$ls1$15187) g$ls2$15188) (cons (car g$ls1$15187) (g$set-union$14416 (cdr g$ls1$15187) g$ls2$15188))))))) (set! g$top-mark*$14421 '(top)) (set! g$top-marked?$14423 (case-lambda ((g$m*$15191) (memq 'top g$m*$15191)))) (set! g$gen-lexical$14425 (case-lambda ((g$sym$15193) (if (symbol? g$sym$15193) (gensym g$sym$15193) (if (g$stx?$14467 g$sym$15193) (g$gen-lexical$14425 (g$id->sym$14517 g$sym$15193)) (error 'gen-lexical '"BUG: invalid arg" g$sym$15193)))))) (set! g$gen-global$14427 (case-lambda ((g$x$15195) (g$gen-lexical$14425 g$x$15195)))) (set! g$gen-label$14429 (case-lambda ((g$_$15197) (gensym)))) (set! g$make-rib$14432 (case-lambda ((g$sym*$15199 g$mark**$15200 g$label*$15201 g$sealed/freq$15202) (vector 'g$14431 g$sym*$15199 g$mark**$15200 g$label*$15201 g$sealed/freq$15202)))) (set! g$rib?$14434 (case-lambda ((g$x$15207) (if (vector? g$x$15207) (if (= (vector-length g$x$15207) (+ '1 (length '(sym* mark** label* sealed/freq)))) (begin '#f (eq? (vector-ref g$x$15207 '0) 'g$14431)) '#f) '#f)))) (set! g$rib-sym*$14436 (case-lambda ((g$x$15209) (if (g$rib?$14434 g$x$15209) (vector-ref g$x$15209 '1) (error 'rib-sym* '"~s is not of type ~s" g$x$15209 'rib))))) (set! g$rib-mark**$14438 (case-lambda ((g$x$15211) (if (g$rib?$14434 g$x$15211) (vector-ref g$x$15211 '2) (error 'rib-mark** '"~s is not of type ~s" g$x$15211 'rib))))) (set! g$rib-label*$14440 (case-lambda ((g$x$15213) (if (g$rib?$14434 g$x$15213) (vector-ref g$x$15213 '3) (error 'rib-label* '"~s is not of type ~s" g$x$15213 'rib))))) (set! g$rib-sealed/freq$14442 (case-lambda ((g$x$15215) (if (g$rib?$14434 g$x$15215) (vector-ref g$x$15215 '4) (error 'rib-sealed/freq '"~s is not of type ~s" g$x$15215 'rib))))) (set! g$set-rib-sym*!$14444 (case-lambda ((g$x$15217 g$v$15218) (if (g$rib?$14434 g$x$15217) (vector-set! g$x$15217 '1 g$v$15218) (error 'set-rib-sym*! '"~s is not of type ~s" g$x$15217 'rib))))) (set! g$set-rib-mark**!$14446 (case-lambda ((g$x$15221 g$v$15222) (if (g$rib?$14434 g$x$15221) (vector-set! g$x$15221 '2 g$v$15222) (error 'set-rib-mark**! '"~s is not of type ~s" g$x$15221 'rib))))) (set! g$set-rib-label*!$14448 (case-lambda ((g$x$15225 g$v$15226) (if (g$rib?$14434 g$x$15225) (vector-set! g$x$15225 '3 g$v$15226) (error 'set-rib-label*! '"~s is not of type ~s" g$x$15225 'rib))))) (set! g$set-rib-sealed/freq!$14450 (case-lambda ((g$x$15229 g$v$15230) (if (g$rib?$14434 g$x$15229) (vector-set! g$x$15229 '4 g$v$15230) (error 'set-rib-sealed/freq! '"~s is not of type ~s" g$x$15229 'rib))))) (set! g$make-empty-rib$14452 (case-lambda (() (g$make-rib$14432 '() '() '() '#f)))) (set! g$extend-rib!$14454 (case-lambda ((g$rib$15233 g$id$15234 g$label$15235) ((case-lambda ((g$find$15239) (begin (set! g$find$15239 (case-lambda ((g$sym$15241 g$mark*$15242 g$sym*$15243 g$mark**$15244) (if (pair? g$sym*$15243) (begin '#f ((case-lambda ((g$t$15249) (if g$t$15249 g$t$15249 (begin '#f (g$find$15239 g$sym$15241 g$mark*$15242 (cdr g$sym*$15243) (cdr g$mark**$15244)))))) (if (eq? g$sym$15241 (car g$sym*$15243)) (begin '#f (g$same-marks?$14519 g$mark*$15242 (car g$mark**$15244))) '#f))) '#f)))) (begin (if (g$rib-sealed/freq$14442 g$rib$15233) (error 'extend-rib! '"rib is sealed" g$rib$15233) (void)) ((case-lambda ((g$sym$15251 g$mark*$15252) ((case-lambda ((g$sym*$15255) (begin (if (if (memq g$sym$15251 (g$rib-sym*$14436 g$rib$15233)) (begin '#f (g$find$15239 g$sym$15251 g$mark*$15252 g$sym*$15255 (g$rib-mark**$14438 g$rib$15233))) '#f) (error 'expander '"cannot redefine" (g$strip$14533 g$id$15234 '())) (void)) (g$set-rib-sym*!$14444 g$rib$15233 (cons g$sym$15251 g$sym*$15255)) (g$set-rib-mark**!$14446 g$rib$15233 (cons g$mark*$15252 (g$rib-mark**$14438 g$rib$15233))) (g$set-rib-label*!$14448 g$rib$15233 (cons g$label$15235 (g$rib-label*$14440 g$rib$15233)))))) (g$rib-sym*$14436 g$rib$15233)))) (g$id->sym$14517 g$id$15234) (g$stx-mark*$14471 g$id$15234)))))) '#f)))) (set! g$seal-rib!$14456 (case-lambda ((g$rib$15257) ((case-lambda ((g$sym*$15259) (if (null? g$sym*$15259) (void) ((case-lambda ((g$sym*$15261) (begin (g$set-rib-sym*!$14444 g$rib$15257 g$sym*$15261) (g$set-rib-mark**!$14446 g$rib$15257 (list->vector (g$rib-mark**$14438 g$rib$15257))) (g$set-rib-label*!$14448 g$rib$15257 (list->vector (g$rib-label*$14440 g$rib$15257))) (g$set-rib-sealed/freq!$14450 g$rib$15257 (make-vector (vector-length g$sym*$15261) '0))))) (list->vector g$sym*$15259))))) (g$rib-sym*$14436 g$rib$15257))))) (set! g$unseal-rib!$14458 (case-lambda ((g$rib$15263) (if (g$rib-sealed/freq$14442 g$rib$15263) (begin (g$set-rib-sealed/freq!$14450 g$rib$15263 '#f) (g$set-rib-sym*!$14444 g$rib$15263 (vector->list (g$rib-sym*$14436 g$rib$15263))) (g$set-rib-mark**!$14446 g$rib$15263 (vector->list (g$rib-mark**$14438 g$rib$15263))) (g$set-rib-label*!$14448 g$rib$15263 (vector->list (g$rib-label*$14440 g$rib$15263)))) (void))))) (set! g$increment-rib-frequency!$14460 (case-lambda ((g$rib$15265 g$idx$15266) ((case-lambda ((g$freq*$15269) ((case-lambda ((g$freq$15271) ((case-lambda ((g$i$15273) (begin (vector-set! g$freq*$15269 g$i$15273 (+ g$freq$15271 '1)) (if (= g$i$15273 g$idx$15266) (void) ((case-lambda ((g$sym*$15275 g$mark**$15276 g$label*$15277) (begin ((case-lambda ((g$sym$15281) (begin (vector-set! g$sym*$15275 g$idx$15266 (vector-ref g$sym*$15275 g$i$15273)) (vector-set! g$sym*$15275 g$i$15273 g$sym$15281)))) (vector-ref g$sym*$15275 g$idx$15266)) ((case-lambda ((g$mark*$15283) (begin (vector-set! g$mark**$15276 g$idx$15266 (vector-ref g$mark**$15276 g$i$15273)) (vector-set! g$mark**$15276 g$i$15273 g$mark*$15283)))) (vector-ref g$mark**$15276 g$idx$15266)) ((case-lambda ((g$label$15285) (begin (vector-set! g$label*$15277 g$idx$15266 (vector-ref g$label*$15277 g$i$15273)) (vector-set! g$label*$15277 g$i$15273 g$label$15285)))) (vector-ref g$label*$15277 g$idx$15266))))) (g$rib-sym*$14436 g$rib$15265) (g$rib-mark**$14438 g$rib$15265) (g$rib-label*$14440 g$rib$15265)))))) (letrec ((g$f$15287 (case-lambda ((g$i$15289) (if (zero? g$i$15289) '0 ((case-lambda ((g$j$15291) (if (= g$freq$15271 (vector-ref g$freq*$15269 g$j$15291)) (g$f$15287 g$j$15291) g$i$15289))) (- g$i$15289 '1))))))) (g$f$15287 g$idx$15266))))) (vector-ref g$freq*$15269 g$idx$15266)))) (g$rib-sealed/freq$14442 g$rib$15265))))) (set! g$make-full-rib$14462 (case-lambda ((g$id*$15293 g$label*$15294) (g$make-rib$14432 (map g$id->sym$14517 g$id*$15293) (map g$stx-mark*$14471 g$id*$15293) g$label*$15294 '#f)))) (set! g$make-stx$14465 (case-lambda ((g$expr$15297 g$mark*$15298 g$subst*$15299) (vector 'g$14464 g$expr$15297 g$mark*$15298 g$subst*$15299)))) (set! g$stx?$14467 (case-lambda ((g$x$15303) (if (vector? g$x$15303) (if (= (vector-length g$x$15303) (+ '1 (length '(expr mark* subst*)))) (begin '#f (eq? (vector-ref g$x$15303 '0) 'g$14464)) '#f) '#f)))) (set! g$stx-expr$14469 (case-lambda ((g$x$15305) (if (g$stx?$14467 g$x$15305) (vector-ref g$x$15305 '1) (error 'stx-expr '"~s is not of type ~s" g$x$15305 'stx))))) (set! g$stx-mark*$14471 (case-lambda ((g$x$15307) (if (g$stx?$14467 g$x$15307) (vector-ref g$x$15307 '2) (error 'stx-mark* '"~s is not of type ~s" g$x$15307 'stx))))) (set! g$stx-subst*$14473 (case-lambda ((g$x$15309) (if (g$stx?$14467 g$x$15309) (vector-ref g$x$15309 '3) (error 'stx-subst* '"~s is not of type ~s" g$x$15309 'stx))))) (set! g$set-stx-expr!$14475 (case-lambda ((g$x$15311 g$v$15312) (if (g$stx?$14467 g$x$15311) (vector-set! g$x$15311 '1 g$v$15312) (error 'set-stx-expr! '"~s is not of type ~s" g$x$15311 'stx))))) (set! g$set-stx-mark*!$14477 (case-lambda ((g$x$15315 g$v$15316) (if (g$stx?$14467 g$x$15315) (vector-set! g$x$15315 '2 g$v$15316) (error 'set-stx-mark*! '"~s is not of type ~s" g$x$15315 'stx))))) (set! g$set-stx-subst*!$14479 (case-lambda ((g$x$15319 g$v$15320) (if (g$stx?$14467 g$x$15319) (vector-set! g$x$15319 '3 g$v$15320) (error 'set-stx-subst*! '"~s is not of type ~s" g$x$15319 'stx))))) (set! g$datum->stx$14481 (case-lambda ((g$id$15323 g$datum$15324) (g$make-stx$14465 g$datum$15324 (g$stx-mark*$14471 g$id$15323) (g$stx-subst*$14473 g$id$15323))))) (set! g$gen-mark$14483 (case-lambda (() (string '#\m)))) (set! g$anti-mark$14485 '#f) (set! g$anti-mark?$14487 not) (set! g$join-wraps$14489 (case-lambda ((g$m1*$15327 g$s1*$15328 g$e$15329) ((case-lambda ((g$cancel$15333) (begin (set! g$cancel$15333 (case-lambda ((g$ls1$15335 g$ls2$15336) (letrec ((g$f$15339 (case-lambda ((g$x$15341 g$ls1$15342) (if (null? g$ls1$15342) (cdr g$ls2$15336) (cons g$x$15341 (g$f$15339 (car g$ls1$15342) (cdr g$ls1$15342)))))))) (g$f$15339 (car g$ls1$15335) (cdr g$ls1$15335)))))) ((case-lambda ((g$m2*$15345 g$s2*$15346) (if (if (not (null? g$m1*$15327)) (if (not (null? g$m2*$15345)) (begin '#f (g$anti-mark?$14487 (car g$m2*$15345))) '#f) '#f) (values (g$cancel$15333 g$m1*$15327 g$m2*$15345) (g$cancel$15333 g$s1*$15328 g$s2*$15346)) (values (append g$m1*$15327 g$m2*$15345) (append g$s1*$15328 g$s2*$15346))))) (g$stx-mark*$14471 g$e$15329) (g$stx-subst*$14473 g$e$15329))))) '#f)))) (set! g$mkstx$14491 (case-lambda ((g$e$15349 g$m*$15350 g$s*$15351) (if (g$stx?$14467 g$e$15349) (call-with-values (case-lambda (() (g$join-wraps$14489 g$m*$15350 g$s*$15351 g$e$15349))) (case-lambda ((g$m*$15355 g$s*$15356) (g$make-stx$14465 (g$stx-expr$14469 g$e$15349) g$m*$15355 g$s*$15356)))) (g$make-stx$14465 g$e$15349 g$m*$15350 g$s*$15351))))) (set! g$add-mark$14493 (case-lambda ((g$m$15359 g$e$15360) (g$mkstx$14491 g$e$15360 (list g$m$15359) '(shift))))) (set! g$add-subst$14495 (case-lambda ((g$subst$15363 g$e$15364) (g$mkstx$14491 g$e$15364 '() (list g$subst$15363))))) (set! g$syntax-kind?$14497 (case-lambda ((g$x$15367 g$p?$15368) (if (g$stx?$14467 g$x$15367) (g$syntax-kind?$14497 (g$stx-expr$14469 g$x$15367) g$p?$15368) (g$p?$15368 g$x$15367))))) (set! g$syntax-vector->list$14499 (case-lambda ((g$x$15371) (if (g$stx?$14467 g$x$15371) ((case-lambda ((g$ls$15373 g$m*$15374 g$s*$15375) (map (case-lambda ((g$x$15379) (g$mkstx$14491 g$x$15379 g$m*$15374 g$s*$15375))) g$ls$15373))) (g$syntax-vector->list$14499 (g$stx-expr$14469 g$x$15371)) (g$stx-mark*$14471 g$x$15371) (g$stx-subst*$14473 g$x$15371)) (if (vector? g$x$15371) (vector->list g$x$15371) (error 'syntax-vector->list '"not a syntax vector" g$x$15371)))))) (set! g$syntax-pair?$14501 (case-lambda ((g$x$15381) (g$syntax-kind?$14497 g$x$15381 pair?)))) (set! g$syntax-vector?$14503 (case-lambda ((g$x$15383) (g$syntax-kind?$14497 g$x$15383 vector?)))) (set! g$syntax-null?$14505 (case-lambda ((g$x$15385) (g$syntax-kind?$14497 g$x$15385 null?)))) (set! g$syntax-list?$14507 (case-lambda ((g$x$15387) ((case-lambda ((g$t$15389) (if g$t$15389 g$t$15389 (begin '#f (if (g$syntax-pair?$14501 g$x$15387) (begin '#f (g$syntax-list?$14507 (g$syntax-cdr$14513 g$x$15387))) '#f))))) (g$syntax-null?$14505 g$x$15387))))) (set! g$syntax-car$14509 (case-lambda ((g$x$15391) (if (g$stx?$14467 g$x$15391) (g$mkstx$14491 (g$syntax-car$14509 (g$stx-expr$14469 g$x$15391)) (g$stx-mark*$14471 g$x$15391) (g$stx-subst*$14473 g$x$15391)) (if (pair? g$x$15391) (car g$x$15391) (error 'syntax-car '"not a pair" g$x$15391)))))) (set! g$syntax->list$14511 (case-lambda ((g$x$15393) (if (g$syntax-pair?$14501 g$x$15393) (cons (g$syntax-car$14509 g$x$15393) (g$syntax->list$14511 (g$syntax-cdr$14513 g$x$15393))) (if (g$syntax-null?$14505 g$x$15393) '() (error 'syntax->list '"invalid argument" g$x$15393)))))) (set! g$syntax-cdr$14513 (case-lambda ((g$x$15395) (if (g$stx?$14467 g$x$15395) (g$mkstx$14491 (g$syntax-cdr$14513 (g$stx-expr$14469 g$x$15395)) (g$stx-mark*$14471 g$x$15395) (g$stx-subst*$14473 g$x$15395)) (if (pair? g$x$15395) (cdr g$x$15395) (error 'syntax-cdr '"not a pair" g$x$15395)))))) (set! g$id?$14515 (case-lambda ((g$x$15397) (g$syntax-kind?$14497 g$x$15397 symbol?)))) (set! g$id->sym$14517 (case-lambda ((g$x$15399) (if (g$stx?$14467 g$x$15399) (g$id->sym$14517 (g$stx-expr$14469 g$x$15399)) (if (symbol? g$x$15399) g$x$15399 (error 'id->sym '"not an id" g$x$15399)))))) (set! g$same-marks?$14519 (case-lambda ((g$x$15401 g$y$15402) ((case-lambda ((g$t$15405) (if g$t$15405 g$t$15405 (begin '#f (if (pair? g$x$15401) (if (pair? g$y$15402) (if (eq? (car g$x$15401) (car g$y$15402)) (begin '#f (g$same-marks?$14519 (cdr g$x$15401) (cdr g$y$15402))) '#f) '#f) '#f))))) (if (null? g$x$15401) (begin '#f (null? g$y$15402)) '#f))))) (set! g$bound-id=?$14521 (case-lambda ((g$x$15407 g$y$15408) (if (eq? (g$id->sym$14517 g$x$15407) (g$id->sym$14517 g$y$15408)) (begin '#f (g$same-marks?$14519 (g$stx-mark*$14471 g$x$15407) (g$stx-mark*$14471 g$y$15408))) '#f)))) (set! g$free-id=?$14523 (case-lambda ((g$i$15411 g$j$15412) ((case-lambda ((g$t0$15415 g$t1$15416) (if ((case-lambda ((g$t$15419) (if g$t$15419 g$t$15419 (begin '#f g$t1$15416)))) g$t0$15415) (eq? g$t0$15415 g$t1$15416) (eq? (g$id->sym$14517 g$i$15411) (g$id->sym$14517 g$j$15412))))) (g$id->label$14537 g$i$15411) (g$id->label$14537 g$j$15412))))) (set! g$valid-bound-ids?$14525 (case-lambda ((g$id*$15421) (if (for-all g$id?$14515 g$id*$15421) (begin '#f (g$distinct-bound-ids?$14527 g$id*$15421)) '#f)))) (set! g$distinct-bound-ids?$14527 (case-lambda ((g$id*$15423) ((case-lambda ((g$t$15425) (if g$t$15425 g$t$15425 (begin '#f (if (not (g$bound-id-member?$14529 (car g$id*$15423) (cdr g$id*$15423))) (begin '#f (g$distinct-bound-ids?$14527 (cdr g$id*$15423))) '#f))))) (null? g$id*$15423))))) (set! g$bound-id-member?$14529 (case-lambda ((g$id$15427 g$id*$15428) (if (pair? g$id*$15428) (begin '#f ((case-lambda ((g$t$15431) (if g$t$15431 g$t$15431 (begin '#f (g$bound-id-member?$14529 g$id$15427 (cdr g$id*$15428)))))) (g$bound-id=?$14521 g$id$15427 (car g$id*$15428)))) '#f)))) (set! g$self-evaluating?$14531 (case-lambda ((g$x$15433) ((case-lambda ((g$t$15435) (if g$t$15435 g$t$15435 ((case-lambda ((g$t$15437) (if g$t$15437 g$t$15437 ((case-lambda ((g$t$15439) (if g$t$15439 g$t$15439 (begin '#f (boolean? g$x$15433))))) (char? g$x$15433))))) (string? g$x$15433))))) (number? g$x$15433))))) (set! g$strip$14533 (case-lambda ((g$x$15441 g$m*$15442) (if (g$top-marked?$14423 g$m*$15442) g$x$15441 (letrec ((g$f$15445 (case-lambda ((g$x$15447) (if (g$stx?$14467 g$x$15447) (g$strip$14533 (g$stx-expr$14469 g$x$15447) (g$stx-mark*$14471 g$x$15447)) (if (pair? g$x$15447) ((case-lambda ((g$a$15449 g$d$15450) (if (if (eq? g$a$15449 (car g$x$15447)) (begin '#f (eq? g$d$15450 (cdr g$x$15447))) '#f) g$x$15447 (cons g$a$15449 g$d$15450)))) (g$f$15445 (car g$x$15447)) (g$f$15445 (cdr g$x$15447))) (if (vector? g$x$15447) ((case-lambda ((g$old$15453) ((case-lambda ((g$new$15455) (if (for-all eq? g$old$15453 g$new$15455) g$x$15447 (list->vector g$new$15455)))) (map g$f$15445 g$old$15453)))) (vector->list g$x$15447)) g$x$15447))))))) (g$f$15445 g$x$15441)))))) (set! g$stx->datum$14535 (case-lambda ((g$x$15457) (g$strip$14533 g$x$15457 '())))) (set! g$id->label$14537 (case-lambda ((g$id$15459) ((case-lambda ((g$sym$15461) (letrec ((g$search$15463 (case-lambda ((g$subst*$15465 g$mark*$15466) (if (null? g$subst*$15465) (g$interaction-sym->label$15179 g$sym$15461) (if (eq? (car g$subst*$15465) 'shift) (g$search$15463 (cdr g$subst*$15465) (cdr g$mark*$15466)) ((case-lambda ((g$rib$15469) (if (g$rib-sealed/freq$14442 g$rib$15469) ((case-lambda ((g$sym*$15471) (letrec ((g$f$15473 (case-lambda ((g$i$15475 g$j$15476) (if (= g$i$15475 g$j$15476) (g$search$15463 (cdr g$subst*$15465) g$mark*$15466) (if (if (eq? (vector-ref g$sym*$15471 g$i$15475) g$sym$15461) (begin '#f (g$same-marks?$14519 g$mark*$15466 (vector-ref (g$rib-mark**$14438 g$rib$15469) g$i$15475))) '#f) ((case-lambda ((g$label$15479) (begin (g$increment-rib-frequency!$14460 g$rib$15469 g$i$15475) g$label$15479))) (vector-ref (g$rib-label*$14440 g$rib$15469) g$i$15475)) (g$f$15473 (+ g$i$15475 '1) g$j$15476))))))) (g$f$15473 '0 (vector-length g$sym*$15471))))) (g$rib-sym*$14436 g$rib$15469)) (letrec ((g$f$15481 (case-lambda ((g$sym*$15483 g$mark**$15484 g$label*$15485) (if (null? g$sym*$15483) (g$search$15463 (cdr g$subst*$15465) g$mark*$15466) (if (if (eq? (car g$sym*$15483) g$sym$15461) (begin '#f (g$same-marks?$14519 (car g$mark**$15484) g$mark*$15466)) '#f) (car g$label*$15485) (g$f$15481 (cdr g$sym*$15483) (cdr g$mark**$15484) (cdr g$label*$15485)))))))) (g$f$15481 (g$rib-sym*$14436 g$rib$15469) (g$rib-mark**$14438 g$rib$15469) (g$rib-label*$14440 g$rib$15469)))))) (car g$subst*$15465)))))))) (g$search$15463 (g$stx-subst*$14473 g$id$15459) (g$stx-mark*$14471 g$id$15459))))) (g$id->sym$14517 g$id$15459))))) (set! g$label->binding$14539 (case-lambda ((g$x$15489 g$r$15490) ((case-lambda ((g$t$15493) (if g$t$15493 ((case-lambda ((g$b$15495) (if (if (pair? g$b$15495) (begin '#f (eq? (car g$b$15495) '$core-rtd)) '#f) (cons '$rtd (map g$bless$14978 (cdr g$b$15495))) g$b$15495))) g$t$15493) ((case-lambda ((g$t$15497) (if g$t$15497 (cdr g$t$15497) '(displaced-lexical . #f)))) (assq g$x$15489 g$r$15490))))) (g$g$imported-label->binding$13814$14104 g$x$15489))))) (set! g$make-binding$14541 cons) (set! g$binding-type$14543 car) (set! g$binding-value$14545 cdr) (set! g$syntax-type$14547 (case-lambda ((g$e$15499 g$r$15500) (if (g$id?$14515 g$e$15499) ((case-lambda ((g$id$15503) ((case-lambda ((g$label$15505) ((case-lambda ((g$b$15507) ((case-lambda ((g$type$15509) ((case-lambda (() (begin (if g$label$15505 (void) (error 'expander '"unbound identifier" (g$strip$14533 g$e$15499 '()))) ((case-lambda ((g$t$15511) (if (memv g$t$15511 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd)) (values g$type$15509 (g$binding-value$14545 g$b$15507) g$id$15503) (values 'other '#f '#f)))) g$type$15509))))))) (g$binding-type$14543 g$b$15507)))) (g$label->binding$14539 g$label$15505 g$r$15500)))) (g$id->label$14537 g$id$15503)))) g$e$15499) (if (g$syntax-pair?$14501 g$e$15499) ((case-lambda ((g$id$15512) (if (g$id?$14515 g$id$15512) ((case-lambda ((g$label$15514) ((case-lambda ((g$b$15516) ((case-lambda ((g$type$15518) ((case-lambda (() (begin (if g$label$15514 (void) (error 'expander '"unbound identifier" (g$strip$14533 g$e$15499 '()))) ((case-lambda ((g$t$15520) (if (memv g$t$15520 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import $core-rtd)) (values g$type$15518 (g$binding-value$14545 g$b$15516) g$id$15512) (values 'call '#f '#f)))) g$type$15518))))))) (g$binding-type$14543 g$b$15516)))) (g$label->binding$14539 g$label$15514 g$r$15500)))) (g$id->label$14537 g$id$15512)) (values 'call '#f '#f)))) (g$syntax-car$14509 g$e$15499)) ((case-lambda ((g$d$15521) (if (g$self-evaluating?$14531 g$d$15521) (values 'constant g$d$15521 '#f) (values 'other '#f '#f)))) (g$stx->datum$14535 g$e$15499))))))) (set! g$sanitize-binding$14574 (case-lambda ((g$x$15523 g$src$15524) (if (procedure? g$x$15523) (cons* 'local-macro g$x$15523 g$src$15524) (if (if (pair? g$x$15523) (if (eq? (car g$x$15523) 'macro!) (begin '#f (procedure? (cdr g$x$15523))) '#f) '#f) (cons* 'local-macro! (cdr g$x$15523) g$src$15524) (if (if (pair? g$x$15523) (begin '#f (eq? (car g$x$15523) '$rtd)) '#f) g$x$15523 (error 'expand '"invalid transformer" g$x$15523))))))) (set! g$make-variable-transformer$14576 (case-lambda ((g$x$15527) (if (procedure? g$x$15527) (cons 'macro! g$x$15527) (error 'make-variable-transformer '"not a procedure" g$x$15527))))) (set! g$make-eval-transformer$14578 (case-lambda ((g$x$15529) (g$sanitize-binding$14574 (eval-core (g$g$expanded->core$13595$13659 g$x$15529)) g$x$15529)))) (set! g$parse-define$14940 (case-lambda ((g$x$15531) ((case-lambda ((g$t$15533) ((case-lambda ((g$ls/false$15535) (if (if g$ls/false$15535 (begin '#f (apply (case-lambda ((g$id$15537 g$fmls$15538 g$b$15539 g$b*$15540) (g$id?$14515 g$id$15537))) g$ls/false$15535)) '#f) (apply (case-lambda ((g$id$15545 g$fmls$15546 g$b$15547 g$b*$15548) (values g$id$15545 (cons 'defun (cons g$fmls$15546 (cons g$b$15547 g$b*$15548)))))) g$ls/false$15535) ((case-lambda ((g$t$15553) ((case-lambda ((g$ls/false$15555) (if (if g$ls/false$15555 (begin '#f (apply (case-lambda ((g$id$15557 g$val$15558) (g$id?$14515 g$id$15557))) g$ls/false$15555)) '#f) (apply (case-lambda ((g$id$15561 g$val$15562) (values g$id$15561 (cons 'expr g$val$15562)))) g$ls/false$15555) (error 'expander '"invalid syntax" (g$strip$14533 g$t$15553 '()))))) ((case-lambda ((g$x$15565) (if (g$syntax-pair?$14501 g$x$15565) (begin '#f ((case-lambda ((g$q$15567) (if g$q$15567 (begin '#f ((case-lambda ((g$r$15569) (if g$r$15569 (begin '#f (append g$q$15567 g$r$15569)) '#f))) ((case-lambda ((g$x$15571) (if (g$syntax-pair?$14501 g$x$15571) (begin '#f ((case-lambda ((g$q$15573) (if g$q$15573 (begin '#f ((case-lambda ((g$r$15575) (if g$r$15575 (begin '#f (append g$q$15573 g$r$15575)) '#f))) ((case-lambda ((g$x$15577) (if (g$syntax-pair?$14501 g$x$15577) (begin '#f ((case-lambda ((g$q$15579) (if g$q$15579 (begin '#f ((case-lambda ((g$r$15581) (if g$r$15581 (begin '#f (append g$q$15579 g$r$15581)) '#f))) ((case-lambda ((g$x$15583) (if (equal? (g$stx->datum$14535 g$x$15583) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$15577)))) '#f))) ((case-lambda ((g$x$15585) (list g$x$15585))) (g$syntax-car$14509 g$x$15577)))) '#f))) (g$syntax-cdr$14513 g$x$15571)))) '#f))) ((case-lambda ((g$x$15587) (list g$x$15587))) (g$syntax-car$14509 g$x$15571)))) '#f))) (g$syntax-cdr$14513 g$x$15565)))) '#f))) ((case-lambda ((g$x$15589) '())) (g$syntax-car$14509 g$x$15565)))) '#f))) g$t$15553)))) g$t$15533)))) ((case-lambda ((g$x$15591) (if (g$syntax-pair?$14501 g$x$15591) (begin '#f ((case-lambda ((g$q$15593) (if g$q$15593 (begin '#f ((case-lambda ((g$r$15595) (if g$r$15595 (begin '#f (append g$q$15593 g$r$15595)) '#f))) ((case-lambda ((g$x$15597) (if (g$syntax-pair?$14501 g$x$15597) (begin '#f ((case-lambda ((g$q$15599) (if g$q$15599 (begin '#f ((case-lambda ((g$r$15601) (if g$r$15601 (begin '#f (append g$q$15599 g$r$15601)) '#f))) ((case-lambda ((g$x$15603) (if (g$syntax-pair?$14501 g$x$15603) (begin '#f ((case-lambda ((g$q$15605) (if g$q$15605 (begin '#f ((case-lambda ((g$r$15607) (if g$r$15607 (begin '#f (append g$q$15605 g$r$15607)) '#f))) ((letrec ((g$f$15609 (case-lambda ((g$x$15611) (if (g$syntax-pair?$14501 g$x$15611) ((case-lambda ((g$cars/f$15613) (if g$cars/f$15613 (begin '#f ((case-lambda ((g$cdrs/f$15615) (if g$cdrs/f$15615 (begin '#f (map cons g$cars/f$15613 g$cdrs/f$15615)) '#f))) (g$f$15609 (g$syntax-cdr$14513 g$x$15611)))) '#f))) ((case-lambda ((g$x$15617) (list g$x$15617))) (g$syntax-car$14509 g$x$15611))) (if (g$syntax-null?$14505 g$x$15611) (list (begin 'b* '())) '#f)))))) g$f$15609) (g$syntax-cdr$14513 g$x$15603)))) '#f))) ((case-lambda ((g$x$15619) (list g$x$15619))) (g$syntax-car$14509 g$x$15603)))) '#f))) (g$syntax-cdr$14513 g$x$15597)))) '#f))) ((case-lambda ((g$x$15621) (if (g$syntax-pair?$14501 g$x$15621) (begin '#f ((case-lambda ((g$q$15623) (if g$q$15623 (begin '#f ((case-lambda ((g$r$15625) (if g$r$15625 (begin '#f (append g$q$15623 g$r$15625)) '#f))) ((case-lambda ((g$x$15627) (list g$x$15627))) (g$syntax-cdr$14513 g$x$15621)))) '#f))) ((case-lambda ((g$x$15629) (list g$x$15629))) (g$syntax-car$14509 g$x$15621)))) '#f))) (g$syntax-car$14509 g$x$15597)))) '#f))) (g$syntax-cdr$14513 g$x$15591)))) '#f))) ((case-lambda ((g$x$15631) '())) (g$syntax-car$14509 g$x$15591)))) '#f))) g$t$15533)))) g$x$15531)))) (set! g$parse-define-syntax$14942 (case-lambda ((g$x$15633) ((case-lambda ((g$t$15635) ((case-lambda ((g$ls/false$15637) (if (if g$ls/false$15637 (begin '#f (apply (case-lambda ((g$id$15639 g$val$15640) (g$id?$14515 g$id$15639))) g$ls/false$15637)) '#f) (apply (case-lambda ((g$id$15643 g$val$15644) (values g$id$15643 g$val$15644))) g$ls/false$15637) (error 'expander '"invalid syntax" (g$strip$14533 g$t$15635 '()))))) ((case-lambda ((g$x$15647) (if (g$syntax-pair?$14501 g$x$15647) (begin '#f ((case-lambda ((g$q$15649) (if g$q$15649 (begin '#f ((case-lambda ((g$r$15651) (if g$r$15651 (begin '#f (append g$q$15649 g$r$15651)) '#f))) ((case-lambda ((g$x$15653) (if (g$syntax-pair?$14501 g$x$15653) (begin '#f ((case-lambda ((g$q$15655) (if g$q$15655 (begin '#f ((case-lambda ((g$r$15657) (if g$r$15657 (begin '#f (append g$q$15655 g$r$15657)) '#f))) ((case-lambda ((g$x$15659) (if (g$syntax-pair?$14501 g$x$15659) (begin '#f ((case-lambda ((g$q$15661) (if g$q$15661 (begin '#f ((case-lambda ((g$r$15663) (if g$r$15663 (begin '#f (append g$q$15661 g$r$15663)) '#f))) ((case-lambda ((g$x$15665) (if (equal? (g$stx->datum$14535 g$x$15665) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$15659)))) '#f))) ((case-lambda ((g$x$15667) (list g$x$15667))) (g$syntax-car$14509 g$x$15659)))) '#f))) (g$syntax-cdr$14513 g$x$15653)))) '#f))) ((case-lambda ((g$x$15669) (list g$x$15669))) (g$syntax-car$14509 g$x$15653)))) '#f))) (g$syntax-cdr$14513 g$x$15647)))) '#f))) ((case-lambda ((g$x$15671) '())) (g$syntax-car$14509 g$x$15647)))) '#f))) g$t$15635)))) g$x$15633)))) (set! g$scheme-stx$14944 (case-lambda ((g$sym$15673) ((case-lambda ((g$subst$15675) ((case-lambda ((g$t$15677) (if g$t$15677 ((case-lambda ((g$x$15679) ((case-lambda ((g$name$15681 g$label$15682) (g$add-subst$14495 (g$make-rib$14432 (list g$name$15681) (list g$top-mark*$14421) (list g$label$15682) '#f) (g$mkstx$14491 g$sym$15673 g$top-mark*$14421 '())))) (car g$x$15679) (cdr g$x$15679)))) g$t$15677) (g$mkstx$14491 g$sym$15673 g$top-mark*$14421 '())))) (assq g$sym$15673 g$subst$15675)))) (g$g$library-subst$13748$14137 (g$g$find-library-by-name$13798$14112 '(psyntax system $all))))))) (set! g$add-lexical$14946 (case-lambda ((g$lab$15685 g$lex$15686 g$r$15687) (cons (cons* g$lab$15685 'lexical g$lex$15686) g$r$15687)))) (set! g$add-lexicals$14948 (case-lambda ((g$lab*$15691 g$lex*$15692 g$r$15693) (if (null? g$lab*$15691) g$r$15693 (g$add-lexicals$14948 (cdr g$lab*$15691) (cdr g$lex*$15692) (g$add-lexical$14946 (car g$lab*$15691) (car g$lex*$15692) g$r$15693)))))) (set! g$let-values-transformer$14950 (case-lambda ((g$e$15697 g$r$15698 g$mr$15699) ((case-lambda ((g$t$15703) ((case-lambda ((g$ls/false$15705) (if (if g$ls/false$15705 (begin '#f (apply (case-lambda ((g$fml**$15707 g$rhs*$15708 g$b$15709 g$b*$15710) '#t)) g$ls/false$15705)) '#f) (apply (case-lambda ((g$fml**$15715 g$rhs*$15716 g$b$15717 g$b*$15718) ((case-lambda ((g$rhs*$15723) ((case-lambda ((g$lex**$15725 g$lab**$15726) ((case-lambda ((g$fml*$15729 g$lab*$15730 g$lex*$15731) (letrec ((g$f$15735 (case-lambda ((g$lex**$15737 g$rhs*$15738) (if (null? g$lex**$15737) (g$chi-internal$15078 (g$add-subst$14495 (g$make-full-rib$14462 g$fml*$15729 g$lab*$15730) (cons g$b$15717 g$b*$15718)) (g$add-lexicals$14948 g$lab*$15730 g$lex*$15731 g$r$15698) g$mr$15699) (list '(primitive call-with-values) (g$g$build-lambda$14267$14404 '#f '() (car g$rhs*$15738)) (g$g$build-lambda$14267$14404 '#f (car g$lex**$15737) (g$f$15735 (cdr g$lex**$15737) (cdr g$rhs*$15738))))))))) (g$f$15735 g$lex**$15725 g$rhs*$15723)))) (apply append g$fml**$15715) (apply append g$lab**$15726) (apply append g$lex**$15725)))) (map (case-lambda ((g$ls$15741) (map g$gen-lexical$14425 g$ls$15741))) g$fml**$15715) (map (case-lambda ((g$ls$15743) (map g$gen-label$14429 g$ls$15743))) g$fml**$15715)))) (g$chi-expr*$15058 g$rhs*$15716 g$r$15698 g$mr$15699)))) g$ls/false$15705) (error 'expander '"invalid syntax" (g$strip$14533 g$t$15703 '()))))) ((case-lambda ((g$x$15745) (if (g$syntax-pair?$14501 g$x$15745) (begin '#f ((case-lambda ((g$q$15747) (if g$q$15747 (begin '#f ((case-lambda ((g$r$15749) (if g$r$15749 (begin '#f (append g$q$15747 g$r$15749)) '#f))) ((case-lambda ((g$x$15751) (if (g$syntax-pair?$14501 g$x$15751) (begin '#f ((case-lambda ((g$q$15753) (if g$q$15753 (begin '#f ((case-lambda ((g$r$15755) (if g$r$15755 (begin '#f (append g$q$15753 g$r$15755)) '#f))) ((case-lambda ((g$x$15757) (if (g$syntax-pair?$14501 g$x$15757) (begin '#f ((case-lambda ((g$q$15759) (if g$q$15759 (begin '#f ((case-lambda ((g$r$15761) (if g$r$15761 (begin '#f (append g$q$15759 g$r$15761)) '#f))) ((letrec ((g$f$15763 (case-lambda ((g$x$15765) (if (g$syntax-pair?$14501 g$x$15765) ((case-lambda ((g$cars/f$15767) (if g$cars/f$15767 (begin '#f ((case-lambda ((g$cdrs/f$15769) (if g$cdrs/f$15769 (begin '#f (map cons g$cars/f$15767 g$cdrs/f$15769)) '#f))) (g$f$15763 (g$syntax-cdr$14513 g$x$15765)))) '#f))) ((case-lambda ((g$x$15771) (list g$x$15771))) (g$syntax-car$14509 g$x$15765))) (if (g$syntax-null?$14505 g$x$15765) (list (begin 'b* '())) '#f)))))) g$f$15763) (g$syntax-cdr$14513 g$x$15757)))) '#f))) ((case-lambda ((g$x$15773) (list g$x$15773))) (g$syntax-car$14509 g$x$15757)))) '#f))) (g$syntax-cdr$14513 g$x$15751)))) '#f))) ((letrec ((g$f$15775 (case-lambda ((g$x$15777) (if (g$syntax-pair?$14501 g$x$15777) ((case-lambda ((g$cars/f$15779) (if g$cars/f$15779 (begin '#f ((case-lambda ((g$cdrs/f$15781) (if g$cdrs/f$15781 (begin '#f (map cons g$cars/f$15779 g$cdrs/f$15781)) '#f))) (g$f$15775 (g$syntax-cdr$14513 g$x$15777)))) '#f))) ((case-lambda ((g$x$15783) (if (g$syntax-pair?$14501 g$x$15783) (begin '#f ((case-lambda ((g$q$15785) (if g$q$15785 (begin '#f ((case-lambda ((g$r$15787) (if g$r$15787 (begin '#f (append g$q$15785 g$r$15787)) '#f))) ((case-lambda ((g$x$15789) (if (g$syntax-pair?$14501 g$x$15789) (begin '#f ((case-lambda ((g$q$15791) (if g$q$15791 (begin '#f ((case-lambda ((g$r$15793) (if g$r$15793 (begin '#f (append g$q$15791 g$r$15793)) '#f))) ((case-lambda ((g$x$15795) (if (equal? (g$stx->datum$14535 g$x$15795) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$15789)))) '#f))) ((case-lambda ((g$x$15797) (list g$x$15797))) (g$syntax-car$14509 g$x$15789)))) '#f))) (g$syntax-cdr$14513 g$x$15783)))) '#f))) ((letrec ((g$f$15799 (case-lambda ((g$x$15801) (if (g$syntax-pair?$14501 g$x$15801) ((case-lambda ((g$cars/f$15803) (if g$cars/f$15803 (begin '#f ((case-lambda ((g$cdrs/f$15805) (if g$cdrs/f$15805 (begin '#f (map cons g$cars/f$15803 g$cdrs/f$15805)) '#f))) (g$f$15799 (g$syntax-cdr$14513 g$x$15801)))) '#f))) ((case-lambda ((g$x$15807) (list g$x$15807))) (g$syntax-car$14509 g$x$15801))) (if (g$syntax-null?$14505 g$x$15801) (list (begin 'fml** '())) '#f)))))) g$f$15799) (g$syntax-car$14509 g$x$15783)))) '#f))) (g$syntax-car$14509 g$x$15777))) (if (g$syntax-null?$14505 g$x$15777) (list (begin 'fml** '()) (begin 'rhs* '())) '#f)))))) g$f$15775) (g$syntax-car$14509 g$x$15751)))) '#f))) (g$syntax-cdr$14513 g$x$15745)))) '#f))) ((case-lambda ((g$x$15809) '())) (g$syntax-car$14509 g$x$15745)))) '#f))) g$t$15703)))) g$e$15697)))) (set! g$letrec-helper$14952 (case-lambda ((g$e$15811 g$r$15812 g$mr$15813 g$build$15814) ((case-lambda ((g$t$15819) ((case-lambda ((g$ls/false$15821) (if (if g$ls/false$15821 (begin '#f (apply (case-lambda ((g$lhs*$15823 g$rhs*$15824 g$b$15825 g$b*$15826) '#t)) g$ls/false$15821)) '#f) (apply (case-lambda ((g$lhs*$15831 g$rhs*$15832 g$b$15833 g$b*$15834) (if (not (g$valid-bound-ids?$14525 g$lhs*$15831)) (error 'expander '"invalid identifiers" (g$strip$14533 g$e$15811 '())) ((case-lambda ((g$lex*$15839 g$lab*$15840) ((case-lambda ((g$rib$15843 g$r$15844) ((case-lambda ((g$body$15847 g$rhs*$15848) (g$build$15814 '#f g$lex*$15839 g$rhs*$15848 g$body$15847))) (g$chi-internal$15078 (g$add-subst$14495 g$rib$15843 (cons g$b$15833 g$b*$15834)) g$r$15844 g$mr$15813) (g$chi-expr*$15058 (map (case-lambda ((g$x$15851) (g$add-subst$14495 g$rib$15843 g$x$15851))) g$rhs*$15832) g$r$15844 g$mr$15813)))) (g$make-full-rib$14462 g$lhs*$15831 g$lab*$15840) (g$add-lexicals$14948 g$lab*$15840 g$lex*$15839 g$r$15812)))) (map g$gen-lexical$14425 g$lhs*$15831) (map g$gen-label$14429 g$lhs*$15831))))) g$ls/false$15821) (error 'expander '"invalid syntax" (g$strip$14533 g$t$15819 '()))))) ((case-lambda ((g$x$15853) (if (g$syntax-pair?$14501 g$x$15853) (begin '#f ((case-lambda ((g$q$15855) (if g$q$15855 (begin '#f ((case-lambda ((g$r$15857) (if g$r$15857 (begin '#f (append g$q$15855 g$r$15857)) '#f))) ((case-lambda ((g$x$15859) (if (g$syntax-pair?$14501 g$x$15859) (begin '#f ((case-lambda ((g$q$15861) (if g$q$15861 (begin '#f ((case-lambda ((g$r$15863) (if g$r$15863 (begin '#f (append g$q$15861 g$r$15863)) '#f))) ((case-lambda ((g$x$15865) (if (g$syntax-pair?$14501 g$x$15865) (begin '#f ((case-lambda ((g$q$15867) (if g$q$15867 (begin '#f ((case-lambda ((g$r$15869) (if g$r$15869 (begin '#f (append g$q$15867 g$r$15869)) '#f))) ((letrec ((g$f$15871 (case-lambda ((g$x$15873) (if (g$syntax-pair?$14501 g$x$15873) ((case-lambda ((g$cars/f$15875) (if g$cars/f$15875 (begin '#f ((case-lambda ((g$cdrs/f$15877) (if g$cdrs/f$15877 (begin '#f (map cons g$cars/f$15875 g$cdrs/f$15877)) '#f))) (g$f$15871 (g$syntax-cdr$14513 g$x$15873)))) '#f))) ((case-lambda ((g$x$15879) (list g$x$15879))) (g$syntax-car$14509 g$x$15873))) (if (g$syntax-null?$14505 g$x$15873) (list (begin 'b* '())) '#f)))))) g$f$15871) (g$syntax-cdr$14513 g$x$15865)))) '#f))) ((case-lambda ((g$x$15881) (list g$x$15881))) (g$syntax-car$14509 g$x$15865)))) '#f))) (g$syntax-cdr$14513 g$x$15859)))) '#f))) ((letrec ((g$f$15883 (case-lambda ((g$x$15885) (if (g$syntax-pair?$14501 g$x$15885) ((case-lambda ((g$cars/f$15887) (if g$cars/f$15887 (begin '#f ((case-lambda ((g$cdrs/f$15889) (if g$cdrs/f$15889 (begin '#f (map cons g$cars/f$15887 g$cdrs/f$15889)) '#f))) (g$f$15883 (g$syntax-cdr$14513 g$x$15885)))) '#f))) ((case-lambda ((g$x$15891) (if (g$syntax-pair?$14501 g$x$15891) (begin '#f ((case-lambda ((g$q$15893) (if g$q$15893 (begin '#f ((case-lambda ((g$r$15895) (if g$r$15895 (begin '#f (append g$q$15893 g$r$15895)) '#f))) ((case-lambda ((g$x$15897) (if (g$syntax-pair?$14501 g$x$15897) (begin '#f ((case-lambda ((g$q$15899) (if g$q$15899 (begin '#f ((case-lambda ((g$r$15901) (if g$r$15901 (begin '#f (append g$q$15899 g$r$15901)) '#f))) ((case-lambda ((g$x$15903) (if (equal? (g$stx->datum$14535 g$x$15903) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$15897)))) '#f))) ((case-lambda ((g$x$15905) (list g$x$15905))) (g$syntax-car$14509 g$x$15897)))) '#f))) (g$syntax-cdr$14513 g$x$15891)))) '#f))) ((case-lambda ((g$x$15907) (list g$x$15907))) (g$syntax-car$14509 g$x$15891)))) '#f))) (g$syntax-car$14509 g$x$15885))) (if (g$syntax-null?$14505 g$x$15885) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$15883) (g$syntax-car$14509 g$x$15859)))) '#f))) (g$syntax-cdr$14513 g$x$15853)))) '#f))) ((case-lambda ((g$x$15909) '())) (g$syntax-car$14509 g$x$15853)))) '#f))) g$t$15819)))) g$e$15811)))) (set! g$letrec-transformer$14954 (case-lambda ((g$e$15911 g$r$15912 g$mr$15913) (g$letrec-helper$14952 g$e$15911 g$r$15912 g$mr$15913 g$g$build-letrec$14339$14396)))) (set! g$letrec*-transformer$14956 (case-lambda ((g$e$15917 g$r$15918 g$mr$15919) (g$letrec-helper$14952 g$e$15917 g$r$15918 g$mr$15919 g$g$build-letrec*$14341$14395)))) (set! g$type-descriptor-transformer$14958 (case-lambda ((g$e$15923 g$r$15924 g$mr$15925) ((case-lambda ((g$t$15929) ((case-lambda ((g$ls/false$15931) (if (if g$ls/false$15931 (begin '#f (apply (case-lambda ((g$id$15933) (g$id?$14515 g$id$15933))) g$ls/false$15931)) '#f) (apply (case-lambda ((g$id$15935) ((case-lambda ((g$lab$15937) ((case-lambda ((g$b$15939) ((case-lambda ((g$type$15941) ((case-lambda (() (begin (if g$lab$15937 (void) (error 'expander '"unbound identifier" (g$strip$14533 g$e$15923 '()))) (if (if (eq? g$type$15941 '$rtd) (begin '#f (not (list? (g$binding-value$14545 g$b$15939)))) '#f) (void) (error 'expander '"invalid type" (g$strip$14533 g$e$15923 '()))) (list 'quote (g$binding-value$14545 g$b$15939)))))))) (g$binding-type$14543 g$b$15939)))) (g$label->binding$14539 g$lab$15937 g$r$15924)))) (g$id->label$14537 g$id$15935)))) g$ls/false$15931) (error 'expander '"invalid syntax" (g$strip$14533 g$t$15929 '()))))) ((case-lambda ((g$x$15943) (if (g$syntax-pair?$14501 g$x$15943) (begin '#f ((case-lambda ((g$q$15945) (if g$q$15945 (begin '#f ((case-lambda ((g$r$15947) (if g$r$15947 (begin '#f (append g$q$15945 g$r$15947)) '#f))) ((case-lambda ((g$x$15949) (if (g$syntax-pair?$14501 g$x$15949) (begin '#f ((case-lambda ((g$q$15951) (if g$q$15951 (begin '#f ((case-lambda ((g$r$15953) (if g$r$15953 (begin '#f (append g$q$15951 g$r$15953)) '#f))) ((case-lambda ((g$x$15955) (if (equal? (g$stx->datum$14535 g$x$15955) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$15949)))) '#f))) ((case-lambda ((g$x$15957) (list g$x$15957))) (g$syntax-car$14509 g$x$15949)))) '#f))) (g$syntax-cdr$14513 g$x$15943)))) '#f))) ((case-lambda ((g$x$15959) '())) (g$syntax-car$14509 g$x$15943)))) '#f))) g$t$15929)))) g$e$15923)))) (set! g$record-type-descriptor-transformer$14960 (case-lambda ((g$e$15961 g$r$15962 g$mr$15963) ((case-lambda ((g$t$15967) ((case-lambda ((g$ls/false$15969) (if (if g$ls/false$15969 (begin '#f (apply (case-lambda ((g$id$15971) (g$id?$14515 g$id$15971))) g$ls/false$15969)) '#f) (apply (case-lambda ((g$id$15973) ((case-lambda ((g$lab$15975) ((case-lambda ((g$b$15977) ((case-lambda ((g$type$15979) ((case-lambda (() (begin (if g$lab$15975 (void) (error 'expander '"unbound identifier" (g$strip$14533 g$e$15961 '()))) (if (if (eq? g$type$15979 '$rtd) (begin '#f (list? (g$binding-value$14545 g$b$15977))) '#f) (void) (error 'expander '"invalid type" (g$strip$14533 g$e$15961 '()))) (g$chi-expr$15062 (car (g$binding-value$14545 g$b$15977)) g$r$15962 g$mr$15963))))))) (g$binding-type$14543 g$b$15977)))) (g$label->binding$14539 g$lab$15975 g$r$15962)))) (g$id->label$14537 g$id$15973)))) g$ls/false$15969) (error 'expander '"invalid syntax" (g$strip$14533 g$t$15967 '()))))) ((case-lambda ((g$x$15981) (if (g$syntax-pair?$14501 g$x$15981) (begin '#f ((case-lambda ((g$q$15983) (if g$q$15983 (begin '#f ((case-lambda ((g$r$15985) (if g$r$15985 (begin '#f (append g$q$15983 g$r$15985)) '#f))) ((case-lambda ((g$x$15987) (if (g$syntax-pair?$14501 g$x$15987) (begin '#f ((case-lambda ((g$q$15989) (if g$q$15989 (begin '#f ((case-lambda ((g$r$15991) (if g$r$15991 (begin '#f (append g$q$15989 g$r$15991)) '#f))) ((case-lambda ((g$x$15993) (if (equal? (g$stx->datum$14535 g$x$15993) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$15987)))) '#f))) ((case-lambda ((g$x$15995) (list g$x$15995))) (g$syntax-car$14509 g$x$15987)))) '#f))) (g$syntax-cdr$14513 g$x$15981)))) '#f))) ((case-lambda ((g$x$15997) '())) (g$syntax-car$14509 g$x$15981)))) '#f))) g$t$15967)))) g$e$15961)))) (set! g$record-constructor-descriptor-transformer$14962 (case-lambda ((g$e$15999 g$r$16000 g$mr$16001) ((case-lambda ((g$t$16005) ((case-lambda ((g$ls/false$16007) (if (if g$ls/false$16007 (begin '#f (apply (case-lambda ((g$id$16009) (g$id?$14515 g$id$16009))) g$ls/false$16007)) '#f) (apply (case-lambda ((g$id$16011) ((case-lambda ((g$lab$16013) ((case-lambda ((g$b$16015) ((case-lambda ((g$type$16017) ((case-lambda (() (begin (if g$lab$16013 (void) (error 'expander '"unbound identifier" (g$strip$14533 g$e$15999 '()))) (if (if (eq? g$type$16017 '$rtd) (begin '#f (list? (g$binding-value$14545 g$b$16015))) '#f) (void) (error 'expander '"invalid type" (g$strip$14533 g$e$15999 '()))) (g$chi-expr$15062 (cadr (g$binding-value$14545 g$b$16015)) g$r$16000 g$mr$16001))))))) (g$binding-type$14543 g$b$16015)))) (g$label->binding$14539 g$lab$16013 g$r$16000)))) (g$id->label$14537 g$id$16011)))) g$ls/false$16007) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16005 '()))))) ((case-lambda ((g$x$16019) (if (g$syntax-pair?$14501 g$x$16019) (begin '#f ((case-lambda ((g$q$16021) (if g$q$16021 (begin '#f ((case-lambda ((g$r$16023) (if g$r$16023 (begin '#f (append g$q$16021 g$r$16023)) '#f))) ((case-lambda ((g$x$16025) (if (g$syntax-pair?$14501 g$x$16025) (begin '#f ((case-lambda ((g$q$16027) (if g$q$16027 (begin '#f ((case-lambda ((g$r$16029) (if g$r$16029 (begin '#f (append g$q$16027 g$r$16029)) '#f))) ((case-lambda ((g$x$16031) (if (equal? (g$stx->datum$14535 g$x$16031) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$16025)))) '#f))) ((case-lambda ((g$x$16033) (list g$x$16033))) (g$syntax-car$14509 g$x$16025)))) '#f))) (g$syntax-cdr$14513 g$x$16019)))) '#f))) ((case-lambda ((g$x$16035) '())) (g$syntax-car$14509 g$x$16019)))) '#f))) g$t$16005)))) g$e$15999)))) (set! g$when-transformer$14964 (case-lambda ((g$e$16037 g$r$16038 g$mr$16039) ((case-lambda ((g$t$16043) ((case-lambda ((g$ls/false$16045) (if (if g$ls/false$16045 (begin '#f (apply (case-lambda ((g$test$16047 g$e$16048 g$e*$16049) '#t)) g$ls/false$16045)) '#f) (apply (case-lambda ((g$test$16053 g$e$16054 g$e*$16055) (list 'if (g$chi-expr$15062 g$test$16053 g$r$16038 g$mr$16039) (g$g$build-sequence$14335$14398 '#f (g$chi-expr*$15058 (cons g$e$16054 g$e*$16055) g$r$16038 g$mr$16039)) (g$g$build-void$14337$14397)))) g$ls/false$16045) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16043 '()))))) ((case-lambda ((g$x$16059) (if (g$syntax-pair?$14501 g$x$16059) (begin '#f ((case-lambda ((g$q$16061) (if g$q$16061 (begin '#f ((case-lambda ((g$r$16063) (if g$r$16063 (begin '#f (append g$q$16061 g$r$16063)) '#f))) ((case-lambda ((g$x$16065) (if (g$syntax-pair?$14501 g$x$16065) (begin '#f ((case-lambda ((g$q$16067) (if g$q$16067 (begin '#f ((case-lambda ((g$r$16069) (if g$r$16069 (begin '#f (append g$q$16067 g$r$16069)) '#f))) ((case-lambda ((g$x$16071) (if (g$syntax-pair?$14501 g$x$16071) (begin '#f ((case-lambda ((g$q$16073) (if g$q$16073 (begin '#f ((case-lambda ((g$r$16075) (if g$r$16075 (begin '#f (append g$q$16073 g$r$16075)) '#f))) ((letrec ((g$f$16077 (case-lambda ((g$x$16079) (if (g$syntax-pair?$14501 g$x$16079) ((case-lambda ((g$cars/f$16081) (if g$cars/f$16081 (begin '#f ((case-lambda ((g$cdrs/f$16083) (if g$cdrs/f$16083 (begin '#f (map cons g$cars/f$16081 g$cdrs/f$16083)) '#f))) (g$f$16077 (g$syntax-cdr$14513 g$x$16079)))) '#f))) ((case-lambda ((g$x$16085) (list g$x$16085))) (g$syntax-car$14509 g$x$16079))) (if (g$syntax-null?$14505 g$x$16079) (list (begin 'e* '())) '#f)))))) g$f$16077) (g$syntax-cdr$14513 g$x$16071)))) '#f))) ((case-lambda ((g$x$16087) (list g$x$16087))) (g$syntax-car$14509 g$x$16071)))) '#f))) (g$syntax-cdr$14513 g$x$16065)))) '#f))) ((case-lambda ((g$x$16089) (list g$x$16089))) (g$syntax-car$14509 g$x$16065)))) '#f))) (g$syntax-cdr$14513 g$x$16059)))) '#f))) ((case-lambda ((g$x$16091) '())) (g$syntax-car$14509 g$x$16059)))) '#f))) g$t$16043)))) g$e$16037)))) (set! g$unless-transformer$14966 (case-lambda ((g$e$16093 g$r$16094 g$mr$16095) ((case-lambda ((g$t$16099) ((case-lambda ((g$ls/false$16101) (if (if g$ls/false$16101 (begin '#f (apply (case-lambda ((g$test$16103 g$e$16104 g$e*$16105) '#t)) g$ls/false$16101)) '#f) (apply (case-lambda ((g$test$16109 g$e$16110 g$e*$16111) (list 'if (g$chi-expr$15062 g$test$16109 g$r$16094 g$mr$16095) (g$g$build-void$14337$14397) (g$g$build-sequence$14335$14398 '#f (g$chi-expr*$15058 (cons g$e$16110 g$e*$16111) g$r$16094 g$mr$16095))))) g$ls/false$16101) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16099 '()))))) ((case-lambda ((g$x$16115) (if (g$syntax-pair?$14501 g$x$16115) (begin '#f ((case-lambda ((g$q$16117) (if g$q$16117 (begin '#f ((case-lambda ((g$r$16119) (if g$r$16119 (begin '#f (append g$q$16117 g$r$16119)) '#f))) ((case-lambda ((g$x$16121) (if (g$syntax-pair?$14501 g$x$16121) (begin '#f ((case-lambda ((g$q$16123) (if g$q$16123 (begin '#f ((case-lambda ((g$r$16125) (if g$r$16125 (begin '#f (append g$q$16123 g$r$16125)) '#f))) ((case-lambda ((g$x$16127) (if (g$syntax-pair?$14501 g$x$16127) (begin '#f ((case-lambda ((g$q$16129) (if g$q$16129 (begin '#f ((case-lambda ((g$r$16131) (if g$r$16131 (begin '#f (append g$q$16129 g$r$16131)) '#f))) ((letrec ((g$f$16133 (case-lambda ((g$x$16135) (if (g$syntax-pair?$14501 g$x$16135) ((case-lambda ((g$cars/f$16137) (if g$cars/f$16137 (begin '#f ((case-lambda ((g$cdrs/f$16139) (if g$cdrs/f$16139 (begin '#f (map cons g$cars/f$16137 g$cdrs/f$16139)) '#f))) (g$f$16133 (g$syntax-cdr$14513 g$x$16135)))) '#f))) ((case-lambda ((g$x$16141) (list g$x$16141))) (g$syntax-car$14509 g$x$16135))) (if (g$syntax-null?$14505 g$x$16135) (list (begin 'e* '())) '#f)))))) g$f$16133) (g$syntax-cdr$14513 g$x$16127)))) '#f))) ((case-lambda ((g$x$16143) (list g$x$16143))) (g$syntax-car$14509 g$x$16127)))) '#f))) (g$syntax-cdr$14513 g$x$16121)))) '#f))) ((case-lambda ((g$x$16145) (list g$x$16145))) (g$syntax-car$14509 g$x$16121)))) '#f))) (g$syntax-cdr$14513 g$x$16115)))) '#f))) ((case-lambda ((g$x$16147) '())) (g$syntax-car$14509 g$x$16115)))) '#f))) g$t$16099)))) g$e$16093)))) (set! g$if-transformer$14968 (case-lambda ((g$e$16149 g$r$16150 g$mr$16151) ((case-lambda ((g$t$16155) ((case-lambda ((g$ls/false$16157) (if (if g$ls/false$16157 (begin '#f (apply (case-lambda ((g$e0$16159 g$e1$16160 g$e2$16161) '#t)) g$ls/false$16157)) '#f) (apply (case-lambda ((g$e0$16165 g$e1$16166 g$e2$16167) (list 'if (g$chi-expr$15062 g$e0$16165 g$r$16150 g$mr$16151) (g$chi-expr$15062 g$e1$16166 g$r$16150 g$mr$16151) (g$chi-expr$15062 g$e2$16167 g$r$16150 g$mr$16151)))) g$ls/false$16157) ((case-lambda ((g$t$16171) ((case-lambda ((g$ls/false$16173) (if (if g$ls/false$16173 (begin '#f (apply (case-lambda ((g$e0$16175 g$e1$16176) '#t)) g$ls/false$16173)) '#f) (apply (case-lambda ((g$e0$16179 g$e1$16180) (list 'if (g$chi-expr$15062 g$e0$16179 g$r$16150 g$mr$16151) (g$chi-expr$15062 g$e1$16180 g$r$16150 g$mr$16151) (g$g$build-void$14337$14397)))) g$ls/false$16173) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16171 '()))))) ((case-lambda ((g$x$16183) (if (g$syntax-pair?$14501 g$x$16183) (begin '#f ((case-lambda ((g$q$16185) (if g$q$16185 (begin '#f ((case-lambda ((g$r$16187) (if g$r$16187 (begin '#f (append g$q$16185 g$r$16187)) '#f))) ((case-lambda ((g$x$16189) (if (g$syntax-pair?$14501 g$x$16189) (begin '#f ((case-lambda ((g$q$16191) (if g$q$16191 (begin '#f ((case-lambda ((g$r$16193) (if g$r$16193 (begin '#f (append g$q$16191 g$r$16193)) '#f))) ((case-lambda ((g$x$16195) (if (g$syntax-pair?$14501 g$x$16195) (begin '#f ((case-lambda ((g$q$16197) (if g$q$16197 (begin '#f ((case-lambda ((g$r$16199) (if g$r$16199 (begin '#f (append g$q$16197 g$r$16199)) '#f))) ((case-lambda ((g$x$16201) (if (equal? (g$stx->datum$14535 g$x$16201) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$16195)))) '#f))) ((case-lambda ((g$x$16203) (list g$x$16203))) (g$syntax-car$14509 g$x$16195)))) '#f))) (g$syntax-cdr$14513 g$x$16189)))) '#f))) ((case-lambda ((g$x$16205) (list g$x$16205))) (g$syntax-car$14509 g$x$16189)))) '#f))) (g$syntax-cdr$14513 g$x$16183)))) '#f))) ((case-lambda ((g$x$16207) '())) (g$syntax-car$14509 g$x$16183)))) '#f))) g$t$16171)))) g$t$16155)))) ((case-lambda ((g$x$16209) (if (g$syntax-pair?$14501 g$x$16209) (begin '#f ((case-lambda ((g$q$16211) (if g$q$16211 (begin '#f ((case-lambda ((g$r$16213) (if g$r$16213 (begin '#f (append g$q$16211 g$r$16213)) '#f))) ((case-lambda ((g$x$16215) (if (g$syntax-pair?$14501 g$x$16215) (begin '#f ((case-lambda ((g$q$16217) (if g$q$16217 (begin '#f ((case-lambda ((g$r$16219) (if g$r$16219 (begin '#f (append g$q$16217 g$r$16219)) '#f))) ((case-lambda ((g$x$16221) (if (g$syntax-pair?$14501 g$x$16221) (begin '#f ((case-lambda ((g$q$16223) (if g$q$16223 (begin '#f ((case-lambda ((g$r$16225) (if g$r$16225 (begin '#f (append g$q$16223 g$r$16225)) '#f))) ((case-lambda ((g$x$16227) (if (g$syntax-pair?$14501 g$x$16227) (begin '#f ((case-lambda ((g$q$16229) (if g$q$16229 (begin '#f ((case-lambda ((g$r$16231) (if g$r$16231 (begin '#f (append g$q$16229 g$r$16231)) '#f))) ((case-lambda ((g$x$16233) (if (equal? (g$stx->datum$14535 g$x$16233) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$16227)))) '#f))) ((case-lambda ((g$x$16235) (list g$x$16235))) (g$syntax-car$14509 g$x$16227)))) '#f))) (g$syntax-cdr$14513 g$x$16221)))) '#f))) ((case-lambda ((g$x$16237) (list g$x$16237))) (g$syntax-car$14509 g$x$16221)))) '#f))) (g$syntax-cdr$14513 g$x$16215)))) '#f))) ((case-lambda ((g$x$16239) (list g$x$16239))) (g$syntax-car$14509 g$x$16215)))) '#f))) (g$syntax-cdr$14513 g$x$16209)))) '#f))) ((case-lambda ((g$x$16241) '())) (g$syntax-car$14509 g$x$16209)))) '#f))) g$t$16155)))) g$e$16149)))) (set! g$case-transformer$14970 (case-lambda ((g$e$16243 g$r$16244 g$mr$16245) ((case-lambda ((g$build-one$16249 g$build-last$16251) (begin (set! g$build-one$16249 (case-lambda ((g$t$16359 g$cls$16360 g$rest$16361) ((case-lambda ((g$t$16365) ((case-lambda ((g$ls/false$16367) (if (if g$ls/false$16367 (begin '#f (apply (case-lambda ((g$d*$16369 g$e$16370 g$e*$16371) '#t)) g$ls/false$16367)) '#f) (apply (case-lambda ((g$d*$16375 g$e$16376 g$e*$16377) (list 'if (list '(primitive memv) g$t$16359 (list 'quote (g$stx->datum$14535 g$d*$16375))) (g$g$build-sequence$14335$14398 '#f (g$chi-expr*$15058 (cons g$e$16376 g$e*$16377) g$r$16244 g$mr$16245)) g$rest$16361))) g$ls/false$16367) ((case-lambda ((g$t$16381) ((case-lambda ((g$ls/false$16383) (if (if g$ls/false$16383 (begin '#f (apply (case-lambda ((g$else$16385) '#t)) g$ls/false$16383)) '#f) (apply (case-lambda ((g$else$16387) (error 'expander '"invalid syntax" (g$stx->datum$14535 g$e$16243)))) g$ls/false$16383) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16381 '()))))) ((case-lambda ((g$x$16389) (list g$x$16389))) g$t$16381)))) g$t$16365)))) ((case-lambda ((g$x$16391) (if (g$syntax-pair?$14501 g$x$16391) (begin '#f ((case-lambda ((g$q$16393) (if g$q$16393 (begin '#f ((case-lambda ((g$r$16395) (if g$r$16395 (begin '#f (append g$q$16393 g$r$16395)) '#f))) ((case-lambda ((g$x$16397) (if (g$syntax-pair?$14501 g$x$16397) (begin '#f ((case-lambda ((g$q$16399) (if g$q$16399 (begin '#f ((case-lambda ((g$r$16401) (if g$r$16401 (begin '#f (append g$q$16399 g$r$16401)) '#f))) ((letrec ((g$f$16403 (case-lambda ((g$x$16405) (if (g$syntax-pair?$14501 g$x$16405) ((case-lambda ((g$cars/f$16407) (if g$cars/f$16407 (begin '#f ((case-lambda ((g$cdrs/f$16409) (if g$cdrs/f$16409 (begin '#f (map cons g$cars/f$16407 g$cdrs/f$16409)) '#f))) (g$f$16403 (g$syntax-cdr$14513 g$x$16405)))) '#f))) ((case-lambda ((g$x$16411) (list g$x$16411))) (g$syntax-car$14509 g$x$16405))) (if (g$syntax-null?$14505 g$x$16405) (list (begin 'e* '())) '#f)))))) g$f$16403) (g$syntax-cdr$14513 g$x$16397)))) '#f))) ((case-lambda ((g$x$16413) (list g$x$16413))) (g$syntax-car$14509 g$x$16397)))) '#f))) (g$syntax-cdr$14513 g$x$16391)))) '#f))) ((letrec ((g$f$16415 (case-lambda ((g$x$16417) (if (g$syntax-pair?$14501 g$x$16417) ((case-lambda ((g$cars/f$16419) (if g$cars/f$16419 (begin '#f ((case-lambda ((g$cdrs/f$16421) (if g$cdrs/f$16421 (begin '#f (map cons g$cars/f$16419 g$cdrs/f$16421)) '#f))) (g$f$16415 (g$syntax-cdr$14513 g$x$16417)))) '#f))) ((case-lambda ((g$x$16423) (list g$x$16423))) (g$syntax-car$14509 g$x$16417))) (if (g$syntax-null?$14505 g$x$16417) (list (begin 'd* '())) '#f)))))) g$f$16415) (g$syntax-car$14509 g$x$16391)))) '#f))) g$t$16365)))) g$cls$16360)))) (set! g$build-last$16251 (case-lambda ((g$t$16253 g$cls$16254) ((case-lambda ((g$t$16257) ((case-lambda ((g$ls/false$16259) (if (if g$ls/false$16259 (begin '#f (apply (case-lambda ((g$d*$16261 g$e$16262 g$e*$16263) '#t)) g$ls/false$16259)) '#f) (apply (case-lambda ((g$d*$16267 g$e$16268 g$e*$16269) (g$build-one$16249 g$t$16253 g$cls$16254 (g$g$build-void$14337$14397)))) g$ls/false$16259) ((case-lambda ((g$t$16273) ((case-lambda ((g$ls/false$16275) (if (if g$ls/false$16275 (begin '#f (apply (case-lambda ((g$else-kwd$16277 g$x$16278 g$x*$16279) '#t)) g$ls/false$16275)) '#f) (apply (case-lambda ((g$else-kwd$16283 g$x$16284 g$x*$16285) (if (if (g$id?$14515 g$else-kwd$16283) (begin '#f (g$free-id=?$14523 g$else-kwd$16283 (g$scheme-stx$14944 'else))) '#f) (g$g$build-sequence$14335$14398 '#f (g$chi-expr*$15058 (cons g$x$16284 g$x*$16285) g$r$16244 g$mr$16245)) (error 'expander '"invalid syntax" (g$stx->datum$14535 g$e$16243))))) g$ls/false$16275) ((case-lambda ((g$t$16289) ((case-lambda ((g$ls/false$16291) (if (if g$ls/false$16291 (begin '#f (apply (case-lambda ((g$else$16293) '#t)) g$ls/false$16291)) '#f) (apply (case-lambda ((g$else$16295) (error 'expander '"invalid syntax" (g$stx->datum$14535 g$e$16243)))) g$ls/false$16291) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16289 '()))))) ((case-lambda ((g$x$16297) (list g$x$16297))) g$t$16289)))) g$t$16273)))) ((case-lambda ((g$x$16299) (if (g$syntax-pair?$14501 g$x$16299) (begin '#f ((case-lambda ((g$q$16301) (if g$q$16301 (begin '#f ((case-lambda ((g$r$16303) (if g$r$16303 (begin '#f (append g$q$16301 g$r$16303)) '#f))) ((case-lambda ((g$x$16305) (if (g$syntax-pair?$14501 g$x$16305) (begin '#f ((case-lambda ((g$q$16307) (if g$q$16307 (begin '#f ((case-lambda ((g$r$16309) (if g$r$16309 (begin '#f (append g$q$16307 g$r$16309)) '#f))) ((letrec ((g$f$16311 (case-lambda ((g$x$16313) (if (g$syntax-pair?$14501 g$x$16313) ((case-lambda ((g$cars/f$16315) (if g$cars/f$16315 (begin '#f ((case-lambda ((g$cdrs/f$16317) (if g$cdrs/f$16317 (begin '#f (map cons g$cars/f$16315 g$cdrs/f$16317)) '#f))) (g$f$16311 (g$syntax-cdr$14513 g$x$16313)))) '#f))) ((case-lambda ((g$x$16319) (list g$x$16319))) (g$syntax-car$14509 g$x$16313))) (if (g$syntax-null?$14505 g$x$16313) (list (begin 'x* '())) '#f)))))) g$f$16311) (g$syntax-cdr$14513 g$x$16305)))) '#f))) ((case-lambda ((g$x$16321) (list g$x$16321))) (g$syntax-car$14509 g$x$16305)))) '#f))) (g$syntax-cdr$14513 g$x$16299)))) '#f))) ((case-lambda ((g$x$16323) (list g$x$16323))) (g$syntax-car$14509 g$x$16299)))) '#f))) g$t$16273)))) g$t$16257)))) ((case-lambda ((g$x$16325) (if (g$syntax-pair?$14501 g$x$16325) (begin '#f ((case-lambda ((g$q$16327) (if g$q$16327 (begin '#f ((case-lambda ((g$r$16329) (if g$r$16329 (begin '#f (append g$q$16327 g$r$16329)) '#f))) ((case-lambda ((g$x$16331) (if (g$syntax-pair?$14501 g$x$16331) (begin '#f ((case-lambda ((g$q$16333) (if g$q$16333 (begin '#f ((case-lambda ((g$r$16335) (if g$r$16335 (begin '#f (append g$q$16333 g$r$16335)) '#f))) ((letrec ((g$f$16337 (case-lambda ((g$x$16339) (if (g$syntax-pair?$14501 g$x$16339) ((case-lambda ((g$cars/f$16341) (if g$cars/f$16341 (begin '#f ((case-lambda ((g$cdrs/f$16343) (if g$cdrs/f$16343 (begin '#f (map cons g$cars/f$16341 g$cdrs/f$16343)) '#f))) (g$f$16337 (g$syntax-cdr$14513 g$x$16339)))) '#f))) ((case-lambda ((g$x$16345) (list g$x$16345))) (g$syntax-car$14509 g$x$16339))) (if (g$syntax-null?$14505 g$x$16339) (list (begin 'e* '())) '#f)))))) g$f$16337) (g$syntax-cdr$14513 g$x$16331)))) '#f))) ((case-lambda ((g$x$16347) (list g$x$16347))) (g$syntax-car$14509 g$x$16331)))) '#f))) (g$syntax-cdr$14513 g$x$16325)))) '#f))) ((letrec ((g$f$16349 (case-lambda ((g$x$16351) (if (g$syntax-pair?$14501 g$x$16351) ((case-lambda ((g$cars/f$16353) (if g$cars/f$16353 (begin '#f ((case-lambda ((g$cdrs/f$16355) (if g$cdrs/f$16355 (begin '#f (map cons g$cars/f$16353 g$cdrs/f$16355)) '#f))) (g$f$16349 (g$syntax-cdr$14513 g$x$16351)))) '#f))) ((case-lambda ((g$x$16357) (list g$x$16357))) (g$syntax-car$14509 g$x$16351))) (if (g$syntax-null?$14505 g$x$16351) (list (begin 'd* '())) '#f)))))) g$f$16349) (g$syntax-car$14509 g$x$16325)))) '#f))) g$t$16257)))) g$cls$16254)))) ((case-lambda ((g$t$16425) ((case-lambda ((g$ls/false$16427) (if (if g$ls/false$16427 (begin '#f (apply (case-lambda ((g$expr$16429) '#t)) g$ls/false$16427)) '#f) (apply (case-lambda ((g$expr$16431) (g$g$build-sequence$14335$14398 '#f (list (g$chi-expr$15062 g$expr$16431 g$r$16244 g$mr$16245) (g$g$build-void$14337$14397))))) g$ls/false$16427) ((case-lambda ((g$t$16433) ((case-lambda ((g$ls/false$16435) (if (if g$ls/false$16435 (begin '#f (apply (case-lambda ((g$expr$16437 g$cls$16438 g$cls*$16439) '#t)) g$ls/false$16435)) '#f) (apply (case-lambda ((g$expr$16443 g$cls$16444 g$cls*$16445) ((case-lambda ((g$t$16449) (g$g$build-let$14271$14402 '#f (list g$t$16449) (list (g$chi-expr$15062 g$expr$16443 g$r$16244 g$mr$16245)) (letrec ((g$f$16451 (case-lambda ((g$cls$16453 g$cls*$16454) (if (null? g$cls*$16454) (g$build-last$16251 g$t$16449 g$cls$16453) (g$build-one$16249 g$t$16449 g$cls$16453 (g$f$16451 (car g$cls*$16454) (cdr g$cls*$16454)))))))) (g$f$16451 g$cls$16444 g$cls*$16445))))) (g$gen-lexical$14425 't)))) g$ls/false$16435) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16433 '()))))) ((case-lambda ((g$x$16457) (if (g$syntax-pair?$14501 g$x$16457) (begin '#f ((case-lambda ((g$q$16459) (if g$q$16459 (begin '#f ((case-lambda ((g$r$16461) (if g$r$16461 (begin '#f (append g$q$16459 g$r$16461)) '#f))) ((case-lambda ((g$x$16463) (if (g$syntax-pair?$14501 g$x$16463) (begin '#f ((case-lambda ((g$q$16465) (if g$q$16465 (begin '#f ((case-lambda ((g$r$16467) (if g$r$16467 (begin '#f (append g$q$16465 g$r$16467)) '#f))) ((case-lambda ((g$x$16469) (if (g$syntax-pair?$14501 g$x$16469) (begin '#f ((case-lambda ((g$q$16471) (if g$q$16471 (begin '#f ((case-lambda ((g$r$16473) (if g$r$16473 (begin '#f (append g$q$16471 g$r$16473)) '#f))) ((letrec ((g$f$16475 (case-lambda ((g$x$16477) (if (g$syntax-pair?$14501 g$x$16477) ((case-lambda ((g$cars/f$16479) (if g$cars/f$16479 (begin '#f ((case-lambda ((g$cdrs/f$16481) (if g$cdrs/f$16481 (begin '#f (map cons g$cars/f$16479 g$cdrs/f$16481)) '#f))) (g$f$16475 (g$syntax-cdr$14513 g$x$16477)))) '#f))) ((case-lambda ((g$x$16483) (list g$x$16483))) (g$syntax-car$14509 g$x$16477))) (if (g$syntax-null?$14505 g$x$16477) (list (begin 'cls* '())) '#f)))))) g$f$16475) (g$syntax-cdr$14513 g$x$16469)))) '#f))) ((case-lambda ((g$x$16485) (list g$x$16485))) (g$syntax-car$14509 g$x$16469)))) '#f))) (g$syntax-cdr$14513 g$x$16463)))) '#f))) ((case-lambda ((g$x$16487) (list g$x$16487))) (g$syntax-car$14509 g$x$16463)))) '#f))) (g$syntax-cdr$14513 g$x$16457)))) '#f))) ((case-lambda ((g$x$16489) '())) (g$syntax-car$14509 g$x$16457)))) '#f))) g$t$16433)))) g$t$16425)))) ((case-lambda ((g$x$16491) (if (g$syntax-pair?$14501 g$x$16491) (begin '#f ((case-lambda ((g$q$16493) (if g$q$16493 (begin '#f ((case-lambda ((g$r$16495) (if g$r$16495 (begin '#f (append g$q$16493 g$r$16495)) '#f))) ((case-lambda ((g$x$16497) (if (g$syntax-pair?$14501 g$x$16497) (begin '#f ((case-lambda ((g$q$16499) (if g$q$16499 (begin '#f ((case-lambda ((g$r$16501) (if g$r$16501 (begin '#f (append g$q$16499 g$r$16501)) '#f))) ((case-lambda ((g$x$16503) (if (equal? (g$stx->datum$14535 g$x$16503) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$16497)))) '#f))) ((case-lambda ((g$x$16505) (list g$x$16505))) (g$syntax-car$14509 g$x$16497)))) '#f))) (g$syntax-cdr$14513 g$x$16491)))) '#f))) ((case-lambda ((g$x$16507) '())) (g$syntax-car$14509 g$x$16491)))) '#f))) g$t$16425)))) g$e$16243)))) '#f '#f)))) (set! g$quote-transformer$14972 (case-lambda ((g$e$16509 g$r$16510 g$mr$16511) ((case-lambda ((g$t$16515) ((case-lambda ((g$ls/false$16517) (if (if g$ls/false$16517 (begin '#f (apply (case-lambda ((g$datum$16519) '#t)) g$ls/false$16517)) '#f) (apply (case-lambda ((g$datum$16521) (list 'quote (g$stx->datum$14535 g$datum$16521)))) g$ls/false$16517) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16515 '()))))) ((case-lambda ((g$x$16523) (if (g$syntax-pair?$14501 g$x$16523) (begin '#f ((case-lambda ((g$q$16525) (if g$q$16525 (begin '#f ((case-lambda ((g$r$16527) (if g$r$16527 (begin '#f (append g$q$16525 g$r$16527)) '#f))) ((case-lambda ((g$x$16529) (if (g$syntax-pair?$14501 g$x$16529) (begin '#f ((case-lambda ((g$q$16531) (if g$q$16531 (begin '#f ((case-lambda ((g$r$16533) (if g$r$16533 (begin '#f (append g$q$16531 g$r$16533)) '#f))) ((case-lambda ((g$x$16535) (if (equal? (g$stx->datum$14535 g$x$16535) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$16529)))) '#f))) ((case-lambda ((g$x$16537) (list g$x$16537))) (g$syntax-car$14509 g$x$16529)))) '#f))) (g$syntax-cdr$14513 g$x$16523)))) '#f))) ((case-lambda ((g$x$16539) '())) (g$syntax-car$14509 g$x$16523)))) '#f))) g$t$16515)))) g$e$16509)))) (set! g$case-lambda-transformer$14974 (case-lambda ((g$e$16541 g$r$16542 g$mr$16543) ((case-lambda ((g$t$16547) ((case-lambda ((g$ls/false$16549) (if (if g$ls/false$16549 (begin '#f (apply (case-lambda ((g$fmls*$16551 g$b*$16552 g$b**$16553) '#t)) g$ls/false$16549)) '#f) (apply (case-lambda ((g$fmls*$16557 g$b*$16558 g$b**$16559) (call-with-values (case-lambda (() (g$chi-lambda-clause*$15068 g$fmls*$16557 (map cons g$b*$16558 g$b**$16559) g$r$16542 g$mr$16543))) (case-lambda ((g$fmls*$16563 g$body*$16564) (g$g$build-case-lambda$14269$14403 '#f g$fmls*$16563 g$body*$16564)))))) g$ls/false$16549) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16547 '()))))) ((case-lambda ((g$x$16567) (if (g$syntax-pair?$14501 g$x$16567) (begin '#f ((case-lambda ((g$q$16569) (if g$q$16569 (begin '#f ((case-lambda ((g$r$16571) (if g$r$16571 (begin '#f (append g$q$16569 g$r$16571)) '#f))) ((letrec ((g$f$16573 (case-lambda ((g$x$16575) (if (g$syntax-pair?$14501 g$x$16575) ((case-lambda ((g$cars/f$16577) (if g$cars/f$16577 (begin '#f ((case-lambda ((g$cdrs/f$16579) (if g$cdrs/f$16579 (begin '#f (map cons g$cars/f$16577 g$cdrs/f$16579)) '#f))) (g$f$16573 (g$syntax-cdr$14513 g$x$16575)))) '#f))) ((case-lambda ((g$x$16581) (if (g$syntax-pair?$14501 g$x$16581) (begin '#f ((case-lambda ((g$q$16583) (if g$q$16583 (begin '#f ((case-lambda ((g$r$16585) (if g$r$16585 (begin '#f (append g$q$16583 g$r$16585)) '#f))) ((case-lambda ((g$x$16587) (if (g$syntax-pair?$14501 g$x$16587) (begin '#f ((case-lambda ((g$q$16589) (if g$q$16589 (begin '#f ((case-lambda ((g$r$16591) (if g$r$16591 (begin '#f (append g$q$16589 g$r$16591)) '#f))) ((letrec ((g$f$16593 (case-lambda ((g$x$16595) (if (g$syntax-pair?$14501 g$x$16595) ((case-lambda ((g$cars/f$16597) (if g$cars/f$16597 (begin '#f ((case-lambda ((g$cdrs/f$16599) (if g$cdrs/f$16599 (begin '#f (map cons g$cars/f$16597 g$cdrs/f$16599)) '#f))) (g$f$16593 (g$syntax-cdr$14513 g$x$16595)))) '#f))) ((case-lambda ((g$x$16601) (list g$x$16601))) (g$syntax-car$14509 g$x$16595))) (if (g$syntax-null?$14505 g$x$16595) (list (begin 'b** '())) '#f)))))) g$f$16593) (g$syntax-cdr$14513 g$x$16587)))) '#f))) ((case-lambda ((g$x$16603) (list g$x$16603))) (g$syntax-car$14509 g$x$16587)))) '#f))) (g$syntax-cdr$14513 g$x$16581)))) '#f))) ((case-lambda ((g$x$16605) (list g$x$16605))) (g$syntax-car$14509 g$x$16581)))) '#f))) (g$syntax-car$14509 g$x$16575))) (if (g$syntax-null?$14505 g$x$16575) (list (begin 'fmls* '()) (begin 'b* '()) (begin 'b** '())) '#f)))))) g$f$16573) (g$syntax-cdr$14513 g$x$16567)))) '#f))) ((case-lambda ((g$x$16607) '())) (g$syntax-car$14509 g$x$16567)))) '#f))) g$t$16547)))) g$e$16541)))) (set! g$lambda-transformer$14976 (case-lambda ((g$e$16609 g$r$16610 g$mr$16611) ((case-lambda ((g$t$16615) ((case-lambda ((g$ls/false$16617) (if (if g$ls/false$16617 (begin '#f (apply (case-lambda ((g$fmls$16619 g$b$16620 g$b*$16621) '#t)) g$ls/false$16617)) '#f) (apply (case-lambda ((g$fmls$16625 g$b$16626 g$b*$16627) (call-with-values (case-lambda (() (g$chi-lambda-clause$15066 g$fmls$16625 (cons g$b$16626 g$b*$16627) g$r$16610 g$mr$16611))) (case-lambda ((g$fmls$16631 g$body$16632) (g$g$build-lambda$14267$14404 '#f g$fmls$16631 g$body$16632)))))) g$ls/false$16617) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16615 '()))))) ((case-lambda ((g$x$16635) (if (g$syntax-pair?$14501 g$x$16635) (begin '#f ((case-lambda ((g$q$16637) (if g$q$16637 (begin '#f ((case-lambda ((g$r$16639) (if g$r$16639 (begin '#f (append g$q$16637 g$r$16639)) '#f))) ((case-lambda ((g$x$16641) (if (g$syntax-pair?$14501 g$x$16641) (begin '#f ((case-lambda ((g$q$16643) (if g$q$16643 (begin '#f ((case-lambda ((g$r$16645) (if g$r$16645 (begin '#f (append g$q$16643 g$r$16645)) '#f))) ((case-lambda ((g$x$16647) (if (g$syntax-pair?$14501 g$x$16647) (begin '#f ((case-lambda ((g$q$16649) (if g$q$16649 (begin '#f ((case-lambda ((g$r$16651) (if g$r$16651 (begin '#f (append g$q$16649 g$r$16651)) '#f))) ((letrec ((g$f$16653 (case-lambda ((g$x$16655) (if (g$syntax-pair?$14501 g$x$16655) ((case-lambda ((g$cars/f$16657) (if g$cars/f$16657 (begin '#f ((case-lambda ((g$cdrs/f$16659) (if g$cdrs/f$16659 (begin '#f (map cons g$cars/f$16657 g$cdrs/f$16659)) '#f))) (g$f$16653 (g$syntax-cdr$14513 g$x$16655)))) '#f))) ((case-lambda ((g$x$16661) (list g$x$16661))) (g$syntax-car$14509 g$x$16655))) (if (g$syntax-null?$14505 g$x$16655) (list (begin 'b* '())) '#f)))))) g$f$16653) (g$syntax-cdr$14513 g$x$16647)))) '#f))) ((case-lambda ((g$x$16663) (list g$x$16663))) (g$syntax-car$14509 g$x$16647)))) '#f))) (g$syntax-cdr$14513 g$x$16641)))) '#f))) ((case-lambda ((g$x$16665) (list g$x$16665))) (g$syntax-car$14509 g$x$16641)))) '#f))) (g$syntax-cdr$14513 g$x$16635)))) '#f))) ((case-lambda ((g$x$16667) '())) (g$syntax-car$14509 g$x$16635)))) '#f))) g$t$16615)))) g$e$16609)))) (set! g$bless$14978 (case-lambda ((g$x$16669) (g$mkstx$14491 (letrec ((g$f$16671 (case-lambda ((g$x$16673) (if (g$stx?$14467 g$x$16673) g$x$16673 (if (pair? g$x$16673) (cons (g$f$16671 (car g$x$16673)) (g$f$16671 (cdr g$x$16673))) (if (symbol? g$x$16673) (g$scheme-stx$14944 g$x$16673) (if (vector? g$x$16673) (list->vector (map g$f$16671 (vector->list g$x$16673))) g$x$16673)))))))) (g$f$16671 g$x$16669)) '() '())))) (set! g$with-syntax-macro$14980 (case-lambda ((g$e$16675) ((case-lambda ((g$t$16677) ((case-lambda ((g$ls/false$16679) (if (if g$ls/false$16679 (begin '#f (apply (case-lambda ((g$fml*$16681 g$expr*$16682 g$b$16683 g$b*$16684) '#t)) g$ls/false$16679)) '#f) (apply (case-lambda ((g$fml*$16689 g$expr*$16690 g$b$16691 g$b*$16692) (g$bless$14978 (list 'syntax-case (cons 'list g$expr*$16690) '() (list g$fml*$16689 (cons 'begin (cons g$b$16691 g$b*$16692))))))) g$ls/false$16679) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16677 '()))))) ((case-lambda ((g$x$16697) (if (g$syntax-pair?$14501 g$x$16697) (begin '#f ((case-lambda ((g$q$16699) (if g$q$16699 (begin '#f ((case-lambda ((g$r$16701) (if g$r$16701 (begin '#f (append g$q$16699 g$r$16701)) '#f))) ((case-lambda ((g$x$16703) (if (g$syntax-pair?$14501 g$x$16703) (begin '#f ((case-lambda ((g$q$16705) (if g$q$16705 (begin '#f ((case-lambda ((g$r$16707) (if g$r$16707 (begin '#f (append g$q$16705 g$r$16707)) '#f))) ((case-lambda ((g$x$16709) (if (g$syntax-pair?$14501 g$x$16709) (begin '#f ((case-lambda ((g$q$16711) (if g$q$16711 (begin '#f ((case-lambda ((g$r$16713) (if g$r$16713 (begin '#f (append g$q$16711 g$r$16713)) '#f))) ((letrec ((g$f$16715 (case-lambda ((g$x$16717) (if (g$syntax-pair?$14501 g$x$16717) ((case-lambda ((g$cars/f$16719) (if g$cars/f$16719 (begin '#f ((case-lambda ((g$cdrs/f$16721) (if g$cdrs/f$16721 (begin '#f (map cons g$cars/f$16719 g$cdrs/f$16721)) '#f))) (g$f$16715 (g$syntax-cdr$14513 g$x$16717)))) '#f))) ((case-lambda ((g$x$16723) (list g$x$16723))) (g$syntax-car$14509 g$x$16717))) (if (g$syntax-null?$14505 g$x$16717) (list (begin 'b* '())) '#f)))))) g$f$16715) (g$syntax-cdr$14513 g$x$16709)))) '#f))) ((case-lambda ((g$x$16725) (list g$x$16725))) (g$syntax-car$14509 g$x$16709)))) '#f))) (g$syntax-cdr$14513 g$x$16703)))) '#f))) ((letrec ((g$f$16727 (case-lambda ((g$x$16729) (if (g$syntax-pair?$14501 g$x$16729) ((case-lambda ((g$cars/f$16731) (if g$cars/f$16731 (begin '#f ((case-lambda ((g$cdrs/f$16733) (if g$cdrs/f$16733 (begin '#f (map cons g$cars/f$16731 g$cdrs/f$16733)) '#f))) (g$f$16727 (g$syntax-cdr$14513 g$x$16729)))) '#f))) ((case-lambda ((g$x$16735) (if (g$syntax-pair?$14501 g$x$16735) (begin '#f ((case-lambda ((g$q$16737) (if g$q$16737 (begin '#f ((case-lambda ((g$r$16739) (if g$r$16739 (begin '#f (append g$q$16737 g$r$16739)) '#f))) ((case-lambda ((g$x$16741) (if (g$syntax-pair?$14501 g$x$16741) (begin '#f ((case-lambda ((g$q$16743) (if g$q$16743 (begin '#f ((case-lambda ((g$r$16745) (if g$r$16745 (begin '#f (append g$q$16743 g$r$16745)) '#f))) ((case-lambda ((g$x$16747) (if (equal? (g$stx->datum$14535 g$x$16747) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$16741)))) '#f))) ((case-lambda ((g$x$16749) (list g$x$16749))) (g$syntax-car$14509 g$x$16741)))) '#f))) (g$syntax-cdr$14513 g$x$16735)))) '#f))) ((case-lambda ((g$x$16751) (list g$x$16751))) (g$syntax-car$14509 g$x$16735)))) '#f))) (g$syntax-car$14509 g$x$16729))) (if (g$syntax-null?$14505 g$x$16729) (list (begin 'fml* '()) (begin 'expr* '())) '#f)))))) g$f$16727) (g$syntax-car$14509 g$x$16703)))) '#f))) (g$syntax-cdr$14513 g$x$16697)))) '#f))) ((case-lambda ((g$x$16753) '())) (g$syntax-car$14509 g$x$16697)))) '#f))) g$t$16677)))) g$e$16675)))) (set! g$let-macro$14982 (case-lambda ((g$stx$16755) ((case-lambda ((g$t$16757) ((case-lambda ((g$ls/false$16759) (if (if g$ls/false$16759 (begin '#f (apply (case-lambda ((g$lhs*$16761 g$rhs*$16762 g$b$16763 g$b*$16764) '#t)) g$ls/false$16759)) '#f) (apply (case-lambda ((g$lhs*$16769 g$rhs*$16770 g$b$16771 g$b*$16772) (if (g$valid-bound-ids?$14525 g$lhs*$16769) (g$bless$14978 (cons (cons 'lambda (cons g$lhs*$16769 (cons g$b$16771 g$b*$16772))) g$rhs*$16770)) (error 'expander '"invalid bindings" (g$strip$14533 g$stx$16755 '()))))) g$ls/false$16759) ((case-lambda ((g$t$16777) ((case-lambda ((g$ls/false$16779) (if (if g$ls/false$16779 (begin '#f (apply (case-lambda ((g$f$16781 g$lhs*$16782 g$rhs*$16783 g$b$16784 g$b*$16785) (g$id?$14515 g$f$16781))) g$ls/false$16779)) '#f) (apply (case-lambda ((g$f$16791 g$lhs*$16792 g$rhs*$16793 g$b$16794 g$b*$16795) (if (g$valid-bound-ids?$14525 g$lhs*$16792) (g$bless$14978 (list 'letrec (list (list g$f$16791 (cons 'lambda (cons g$lhs*$16792 (cons g$b$16794 g$b*$16795))))) (cons g$f$16791 g$rhs*$16793))) (error 'expander '"invalid syntax" (g$strip$14533 g$stx$16755 '()))))) g$ls/false$16779) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16777 '()))))) ((case-lambda ((g$x$16801) (if (g$syntax-pair?$14501 g$x$16801) (begin '#f ((case-lambda ((g$q$16803) (if g$q$16803 (begin '#f ((case-lambda ((g$r$16805) (if g$r$16805 (begin '#f (append g$q$16803 g$r$16805)) '#f))) ((case-lambda ((g$x$16807) (if (g$syntax-pair?$14501 g$x$16807) (begin '#f ((case-lambda ((g$q$16809) (if g$q$16809 (begin '#f ((case-lambda ((g$r$16811) (if g$r$16811 (begin '#f (append g$q$16809 g$r$16811)) '#f))) ((case-lambda ((g$x$16813) (if (g$syntax-pair?$14501 g$x$16813) (begin '#f ((case-lambda ((g$q$16815) (if g$q$16815 (begin '#f ((case-lambda ((g$r$16817) (if g$r$16817 (begin '#f (append g$q$16815 g$r$16817)) '#f))) ((case-lambda ((g$x$16819) (if (g$syntax-pair?$14501 g$x$16819) (begin '#f ((case-lambda ((g$q$16821) (if g$q$16821 (begin '#f ((case-lambda ((g$r$16823) (if g$r$16823 (begin '#f (append g$q$16821 g$r$16823)) '#f))) ((letrec ((g$f$16825 (case-lambda ((g$x$16827) (if (g$syntax-pair?$14501 g$x$16827) ((case-lambda ((g$cars/f$16829) (if g$cars/f$16829 (begin '#f ((case-lambda ((g$cdrs/f$16831) (if g$cdrs/f$16831 (begin '#f (map cons g$cars/f$16829 g$cdrs/f$16831)) '#f))) (g$f$16825 (g$syntax-cdr$14513 g$x$16827)))) '#f))) ((case-lambda ((g$x$16833) (list g$x$16833))) (g$syntax-car$14509 g$x$16827))) (if (g$syntax-null?$14505 g$x$16827) (list (begin 'b* '())) '#f)))))) g$f$16825) (g$syntax-cdr$14513 g$x$16819)))) '#f))) ((case-lambda ((g$x$16835) (list g$x$16835))) (g$syntax-car$14509 g$x$16819)))) '#f))) (g$syntax-cdr$14513 g$x$16813)))) '#f))) ((letrec ((g$f$16837 (case-lambda ((g$x$16839) (if (g$syntax-pair?$14501 g$x$16839) ((case-lambda ((g$cars/f$16841) (if g$cars/f$16841 (begin '#f ((case-lambda ((g$cdrs/f$16843) (if g$cdrs/f$16843 (begin '#f (map cons g$cars/f$16841 g$cdrs/f$16843)) '#f))) (g$f$16837 (g$syntax-cdr$14513 g$x$16839)))) '#f))) ((case-lambda ((g$x$16845) (if (g$syntax-pair?$14501 g$x$16845) (begin '#f ((case-lambda ((g$q$16847) (if g$q$16847 (begin '#f ((case-lambda ((g$r$16849) (if g$r$16849 (begin '#f (append g$q$16847 g$r$16849)) '#f))) ((case-lambda ((g$x$16851) (if (g$syntax-pair?$14501 g$x$16851) (begin '#f ((case-lambda ((g$q$16853) (if g$q$16853 (begin '#f ((case-lambda ((g$r$16855) (if g$r$16855 (begin '#f (append g$q$16853 g$r$16855)) '#f))) ((case-lambda ((g$x$16857) (if (equal? (g$stx->datum$14535 g$x$16857) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$16851)))) '#f))) ((case-lambda ((g$x$16859) (list g$x$16859))) (g$syntax-car$14509 g$x$16851)))) '#f))) (g$syntax-cdr$14513 g$x$16845)))) '#f))) ((case-lambda ((g$x$16861) (list g$x$16861))) (g$syntax-car$14509 g$x$16845)))) '#f))) (g$syntax-car$14509 g$x$16839))) (if (g$syntax-null?$14505 g$x$16839) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$16837) (g$syntax-car$14509 g$x$16813)))) '#f))) (g$syntax-cdr$14513 g$x$16807)))) '#f))) ((case-lambda ((g$x$16863) (list g$x$16863))) (g$syntax-car$14509 g$x$16807)))) '#f))) (g$syntax-cdr$14513 g$x$16801)))) '#f))) ((case-lambda ((g$x$16865) '())) (g$syntax-car$14509 g$x$16801)))) '#f))) g$t$16777)))) g$t$16757)))) ((case-lambda ((g$x$16867) (if (g$syntax-pair?$14501 g$x$16867) (begin '#f ((case-lambda ((g$q$16869) (if g$q$16869 (begin '#f ((case-lambda ((g$r$16871) (if g$r$16871 (begin '#f (append g$q$16869 g$r$16871)) '#f))) ((case-lambda ((g$x$16873) (if (g$syntax-pair?$14501 g$x$16873) (begin '#f ((case-lambda ((g$q$16875) (if g$q$16875 (begin '#f ((case-lambda ((g$r$16877) (if g$r$16877 (begin '#f (append g$q$16875 g$r$16877)) '#f))) ((case-lambda ((g$x$16879) (if (g$syntax-pair?$14501 g$x$16879) (begin '#f ((case-lambda ((g$q$16881) (if g$q$16881 (begin '#f ((case-lambda ((g$r$16883) (if g$r$16883 (begin '#f (append g$q$16881 g$r$16883)) '#f))) ((letrec ((g$f$16885 (case-lambda ((g$x$16887) (if (g$syntax-pair?$14501 g$x$16887) ((case-lambda ((g$cars/f$16889) (if g$cars/f$16889 (begin '#f ((case-lambda ((g$cdrs/f$16891) (if g$cdrs/f$16891 (begin '#f (map cons g$cars/f$16889 g$cdrs/f$16891)) '#f))) (g$f$16885 (g$syntax-cdr$14513 g$x$16887)))) '#f))) ((case-lambda ((g$x$16893) (list g$x$16893))) (g$syntax-car$14509 g$x$16887))) (if (g$syntax-null?$14505 g$x$16887) (list (begin 'b* '())) '#f)))))) g$f$16885) (g$syntax-cdr$14513 g$x$16879)))) '#f))) ((case-lambda ((g$x$16895) (list g$x$16895))) (g$syntax-car$14509 g$x$16879)))) '#f))) (g$syntax-cdr$14513 g$x$16873)))) '#f))) ((letrec ((g$f$16897 (case-lambda ((g$x$16899) (if (g$syntax-pair?$14501 g$x$16899) ((case-lambda ((g$cars/f$16901) (if g$cars/f$16901 (begin '#f ((case-lambda ((g$cdrs/f$16903) (if g$cdrs/f$16903 (begin '#f (map cons g$cars/f$16901 g$cdrs/f$16903)) '#f))) (g$f$16897 (g$syntax-cdr$14513 g$x$16899)))) '#f))) ((case-lambda ((g$x$16905) (if (g$syntax-pair?$14501 g$x$16905) (begin '#f ((case-lambda ((g$q$16907) (if g$q$16907 (begin '#f ((case-lambda ((g$r$16909) (if g$r$16909 (begin '#f (append g$q$16907 g$r$16909)) '#f))) ((case-lambda ((g$x$16911) (if (g$syntax-pair?$14501 g$x$16911) (begin '#f ((case-lambda ((g$q$16913) (if g$q$16913 (begin '#f ((case-lambda ((g$r$16915) (if g$r$16915 (begin '#f (append g$q$16913 g$r$16915)) '#f))) ((case-lambda ((g$x$16917) (if (equal? (g$stx->datum$14535 g$x$16917) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$16911)))) '#f))) ((case-lambda ((g$x$16919) (list g$x$16919))) (g$syntax-car$14509 g$x$16911)))) '#f))) (g$syntax-cdr$14513 g$x$16905)))) '#f))) ((case-lambda ((g$x$16921) (list g$x$16921))) (g$syntax-car$14509 g$x$16905)))) '#f))) (g$syntax-car$14509 g$x$16899))) (if (g$syntax-null?$14505 g$x$16899) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$16897) (g$syntax-car$14509 g$x$16873)))) '#f))) (g$syntax-cdr$14513 g$x$16867)))) '#f))) ((case-lambda ((g$x$16923) '())) (g$syntax-car$14509 g$x$16867)))) '#f))) g$t$16757)))) g$stx$16755)))) (set! g$trace-lambda-macro$14984 (case-lambda ((g$stx$16925) ((case-lambda ((g$t$16927) ((case-lambda ((g$ls/false$16929) (if (if g$ls/false$16929 (begin '#f (apply (case-lambda ((g$who$16931 g$fmls$16932 g$b$16933 g$b*$16934) '#t)) g$ls/false$16929)) '#f) (apply (case-lambda ((g$who$16939 g$fmls$16940 g$b$16941 g$b*$16942) (if (g$valid-bound-ids?$14525 g$fmls$16940) (g$bless$14978 (list 'make-traced-procedure (list 'quote g$who$16939) (cons 'lambda (cons g$fmls$16940 (cons g$b$16941 g$b*$16942))))) (error 'expander '"invalid formals" (g$strip$14533 g$stx$16925 '()))))) g$ls/false$16929) ((case-lambda ((g$t$16947) ((case-lambda ((g$ls/false$16949) (if (if g$ls/false$16949 (begin '#f (apply (case-lambda ((g$who$16951 g$fmls$16952 g$last$16953 g$b$16954 g$b*$16955) '#t)) g$ls/false$16949)) '#f) (apply (case-lambda ((g$who$16961 g$fmls$16962 g$last$16963 g$b$16964 g$b*$16965) (if (g$valid-bound-ids?$14525 (cons g$last$16963 g$fmls$16962)) (g$bless$14978 (list 'make-traced-procedure (list 'quote g$who$16961) (cons 'lambda (cons (append g$fmls$16962 g$last$16963) (cons g$b$16964 g$b*$16965))))) (error 'expander '"invalid formals" (g$strip$14533 g$stx$16925 '()))))) g$ls/false$16949) (error 'expander '"invalid syntax" (g$strip$14533 g$t$16947 '()))))) ((case-lambda ((g$x$16971) (if (g$syntax-pair?$14501 g$x$16971) (begin '#f ((case-lambda ((g$q$16973) (if g$q$16973 (begin '#f ((case-lambda ((g$r$16975) (if g$r$16975 (begin '#f (append g$q$16973 g$r$16975)) '#f))) ((case-lambda ((g$x$16977) (if (g$syntax-pair?$14501 g$x$16977) (begin '#f ((case-lambda ((g$q$16979) (if g$q$16979 (begin '#f ((case-lambda ((g$r$16981) (if g$r$16981 (begin '#f (append g$q$16979 g$r$16981)) '#f))) ((case-lambda ((g$x$16983) (if (g$syntax-pair?$14501 g$x$16983) (begin '#f ((case-lambda ((g$q$16985) (if g$q$16985 (begin '#f ((case-lambda ((g$r$16987) (if g$r$16987 (begin '#f (append g$q$16985 g$r$16987)) '#f))) ((case-lambda ((g$x$16989) (if (g$syntax-pair?$14501 g$x$16989) (begin '#f ((case-lambda ((g$q$16991) (if g$q$16991 (begin '#f ((case-lambda ((g$r$16993) (if g$r$16993 (begin '#f (append g$q$16991 g$r$16993)) '#f))) ((letrec ((g$f$16995 (case-lambda ((g$x$16997) (if (g$syntax-pair?$14501 g$x$16997) ((case-lambda ((g$cars/f$16999) (if g$cars/f$16999 (begin '#f ((case-lambda ((g$cdrs/f$17001) (if g$cdrs/f$17001 (begin '#f (map cons g$cars/f$16999 g$cdrs/f$17001)) '#f))) (g$f$16995 (g$syntax-cdr$14513 g$x$16997)))) '#f))) ((case-lambda ((g$x$17003) (list g$x$17003))) (g$syntax-car$14509 g$x$16997))) (if (g$syntax-null?$14505 g$x$16997) (list (begin 'b* '())) '#f)))))) g$f$16995) (g$syntax-cdr$14513 g$x$16989)))) '#f))) ((case-lambda ((g$x$17005) (list g$x$17005))) (g$syntax-car$14509 g$x$16989)))) '#f))) (g$syntax-cdr$14513 g$x$16983)))) '#f))) ((letrec ((g$f$17007 (case-lambda ((g$x$17013) (if (g$syntax-pair?$14501 g$x$17013) ((case-lambda ((g$cars/f$17015) (if g$cars/f$17015 (begin '#f ((case-lambda ((g$d/f$17017) (if g$d/f$17017 (begin '#f (cons (map cons g$cars/f$17015 (car g$d/f$17017)) (cdr g$d/f$17017))) '#f))) (g$f$17007 (g$syntax-cdr$14513 g$x$17013)))) '#f))) ((case-lambda ((g$x$17019) (list g$x$17019))) (g$syntax-car$14509 g$x$17013))) ((case-lambda ((g$d$17021) (if g$d$17021 (begin '#f (cons (list (begin 'fmls '())) g$d$17021)) '#f))) ((case-lambda ((g$x$17023) (list g$x$17023))) g$x$17013))))))) (case-lambda ((g$x$17009) ((case-lambda ((g$x$17011) (if g$x$17011 (begin '#f (append (car g$x$17011) (cdr g$x$17011))) '#f))) (g$f$17007 g$x$17009))))) (g$syntax-car$14509 g$x$16983)))) '#f))) (g$syntax-cdr$14513 g$x$16977)))) '#f))) ((case-lambda ((g$x$17025) (list g$x$17025))) (g$syntax-car$14509 g$x$16977)))) '#f))) (g$syntax-cdr$14513 g$x$16971)))) '#f))) ((case-lambda ((g$x$17027) '())) (g$syntax-car$14509 g$x$16971)))) '#f))) g$t$16947)))) g$t$16927)))) ((case-lambda ((g$x$17029) (if (g$syntax-pair?$14501 g$x$17029) (begin '#f ((case-lambda ((g$q$17031) (if g$q$17031 (begin '#f ((case-lambda ((g$r$17033) (if g$r$17033 (begin '#f (append g$q$17031 g$r$17033)) '#f))) ((case-lambda ((g$x$17035) (if (g$syntax-pair?$14501 g$x$17035) (begin '#f ((case-lambda ((g$q$17037) (if g$q$17037 (begin '#f ((case-lambda ((g$r$17039) (if g$r$17039 (begin '#f (append g$q$17037 g$r$17039)) '#f))) ((case-lambda ((g$x$17041) (if (g$syntax-pair?$14501 g$x$17041) (begin '#f ((case-lambda ((g$q$17043) (if g$q$17043 (begin '#f ((case-lambda ((g$r$17045) (if g$r$17045 (begin '#f (append g$q$17043 g$r$17045)) '#f))) ((case-lambda ((g$x$17047) (if (g$syntax-pair?$14501 g$x$17047) (begin '#f ((case-lambda ((g$q$17049) (if g$q$17049 (begin '#f ((case-lambda ((g$r$17051) (if g$r$17051 (begin '#f (append g$q$17049 g$r$17051)) '#f))) ((letrec ((g$f$17053 (case-lambda ((g$x$17055) (if (g$syntax-pair?$14501 g$x$17055) ((case-lambda ((g$cars/f$17057) (if g$cars/f$17057 (begin '#f ((case-lambda ((g$cdrs/f$17059) (if g$cdrs/f$17059 (begin '#f (map cons g$cars/f$17057 g$cdrs/f$17059)) '#f))) (g$f$17053 (g$syntax-cdr$14513 g$x$17055)))) '#f))) ((case-lambda ((g$x$17061) (list g$x$17061))) (g$syntax-car$14509 g$x$17055))) (if (g$syntax-null?$14505 g$x$17055) (list (begin 'b* '())) '#f)))))) g$f$17053) (g$syntax-cdr$14513 g$x$17047)))) '#f))) ((case-lambda ((g$x$17063) (list g$x$17063))) (g$syntax-car$14509 g$x$17047)))) '#f))) (g$syntax-cdr$14513 g$x$17041)))) '#f))) ((letrec ((g$f$17065 (case-lambda ((g$x$17067) (if (g$syntax-pair?$14501 g$x$17067) ((case-lambda ((g$cars/f$17069) (if g$cars/f$17069 (begin '#f ((case-lambda ((g$cdrs/f$17071) (if g$cdrs/f$17071 (begin '#f (map cons g$cars/f$17069 g$cdrs/f$17071)) '#f))) (g$f$17065 (g$syntax-cdr$14513 g$x$17067)))) '#f))) ((case-lambda ((g$x$17073) (list g$x$17073))) (g$syntax-car$14509 g$x$17067))) (if (g$syntax-null?$14505 g$x$17067) (list (begin 'fmls '())) '#f)))))) g$f$17065) (g$syntax-car$14509 g$x$17041)))) '#f))) (g$syntax-cdr$14513 g$x$17035)))) '#f))) ((case-lambda ((g$x$17075) (list g$x$17075))) (g$syntax-car$14509 g$x$17035)))) '#f))) (g$syntax-cdr$14513 g$x$17029)))) '#f))) ((case-lambda ((g$x$17077) '())) (g$syntax-car$14509 g$x$17029)))) '#f))) g$t$16927)))) g$stx$16925)))) (set! g$trace-define-macro$14986 (case-lambda ((g$stx$17079) ((case-lambda ((g$t$17081) ((case-lambda ((g$ls/false$17083) (if (if g$ls/false$17083 (begin '#f (apply (case-lambda ((g$who$17085 g$fmls$17086 g$b$17087 g$b*$17088) '#t)) g$ls/false$17083)) '#f) (apply (case-lambda ((g$who$17093 g$fmls$17094 g$b$17095 g$b*$17096) (if (g$valid-bound-ids?$14525 g$fmls$17094) (g$bless$14978 (list 'define g$who$17093 (list 'make-traced-procedure (list 'quote g$who$17093) (cons 'lambda (cons g$fmls$17094 (cons g$b$17095 g$b*$17096)))))) (error 'expander '"invalid formals" (g$strip$14533 g$stx$17079 '()))))) g$ls/false$17083) ((case-lambda ((g$t$17101) ((case-lambda ((g$ls/false$17103) (if (if g$ls/false$17103 (begin '#f (apply (case-lambda ((g$who$17105 g$fmls$17106 g$last$17107 g$b$17108 g$b*$17109) '#t)) g$ls/false$17103)) '#f) (apply (case-lambda ((g$who$17115 g$fmls$17116 g$last$17117 g$b$17118 g$b*$17119) (if (g$valid-bound-ids?$14525 (cons g$last$17117 g$fmls$17116)) (g$bless$14978 (list 'define g$who$17115 (list 'make-traced-procedure (list 'quote g$who$17115) (cons 'lambda (cons (append g$fmls$17116 g$last$17117) (cons g$b$17118 g$b*$17119)))))) (error 'expander '"invalid formals" (g$strip$14533 g$stx$17079 '()))))) g$ls/false$17103) ((case-lambda ((g$t$17125) ((case-lambda ((g$ls/false$17127) (if (if g$ls/false$17127 (begin '#f (apply (case-lambda ((g$who$17129 g$expr$17130) '#t)) g$ls/false$17127)) '#f) (apply (case-lambda ((g$who$17133 g$expr$17134) (if (g$id?$14515 g$who$17133) (g$bless$14978 (list 'define g$who$17133 (list 'let (list (list 'v g$expr$17134)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$who$17133) '(v))) '((error 'trace-define "not a procedure" v)))))))) (error 'expander '"invalid formals" (g$strip$14533 g$stx$17079 '()))))) g$ls/false$17127) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17125 '()))))) ((case-lambda ((g$x$17137) (if (g$syntax-pair?$14501 g$x$17137) (begin '#f ((case-lambda ((g$q$17139) (if g$q$17139 (begin '#f ((case-lambda ((g$r$17141) (if g$r$17141 (begin '#f (append g$q$17139 g$r$17141)) '#f))) ((case-lambda ((g$x$17143) (if (g$syntax-pair?$14501 g$x$17143) (begin '#f ((case-lambda ((g$q$17145) (if g$q$17145 (begin '#f ((case-lambda ((g$r$17147) (if g$r$17147 (begin '#f (append g$q$17145 g$r$17147)) '#f))) ((case-lambda ((g$x$17149) (if (g$syntax-pair?$14501 g$x$17149) (begin '#f ((case-lambda ((g$q$17151) (if g$q$17151 (begin '#f ((case-lambda ((g$r$17153) (if g$r$17153 (begin '#f (append g$q$17151 g$r$17153)) '#f))) ((case-lambda ((g$x$17155) (if (equal? (g$stx->datum$14535 g$x$17155) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17149)))) '#f))) ((case-lambda ((g$x$17157) (list g$x$17157))) (g$syntax-car$14509 g$x$17149)))) '#f))) (g$syntax-cdr$14513 g$x$17143)))) '#f))) ((case-lambda ((g$x$17159) (list g$x$17159))) (g$syntax-car$14509 g$x$17143)))) '#f))) (g$syntax-cdr$14513 g$x$17137)))) '#f))) ((case-lambda ((g$x$17161) '())) (g$syntax-car$14509 g$x$17137)))) '#f))) g$t$17125)))) g$t$17101)))) ((case-lambda ((g$x$17163) (if (g$syntax-pair?$14501 g$x$17163) (begin '#f ((case-lambda ((g$q$17165) (if g$q$17165 (begin '#f ((case-lambda ((g$r$17167) (if g$r$17167 (begin '#f (append g$q$17165 g$r$17167)) '#f))) ((case-lambda ((g$x$17169) (if (g$syntax-pair?$14501 g$x$17169) (begin '#f ((case-lambda ((g$q$17171) (if g$q$17171 (begin '#f ((case-lambda ((g$r$17173) (if g$r$17173 (begin '#f (append g$q$17171 g$r$17173)) '#f))) ((case-lambda ((g$x$17175) (if (g$syntax-pair?$14501 g$x$17175) (begin '#f ((case-lambda ((g$q$17177) (if g$q$17177 (begin '#f ((case-lambda ((g$r$17179) (if g$r$17179 (begin '#f (append g$q$17177 g$r$17179)) '#f))) ((letrec ((g$f$17181 (case-lambda ((g$x$17183) (if (g$syntax-pair?$14501 g$x$17183) ((case-lambda ((g$cars/f$17185) (if g$cars/f$17185 (begin '#f ((case-lambda ((g$cdrs/f$17187) (if g$cdrs/f$17187 (begin '#f (map cons g$cars/f$17185 g$cdrs/f$17187)) '#f))) (g$f$17181 (g$syntax-cdr$14513 g$x$17183)))) '#f))) ((case-lambda ((g$x$17189) (list g$x$17189))) (g$syntax-car$14509 g$x$17183))) (if (g$syntax-null?$14505 g$x$17183) (list (begin 'b* '())) '#f)))))) g$f$17181) (g$syntax-cdr$14513 g$x$17175)))) '#f))) ((case-lambda ((g$x$17191) (list g$x$17191))) (g$syntax-car$14509 g$x$17175)))) '#f))) (g$syntax-cdr$14513 g$x$17169)))) '#f))) ((case-lambda ((g$x$17193) (if (g$syntax-pair?$14501 g$x$17193) (begin '#f ((case-lambda ((g$q$17195) (if g$q$17195 (begin '#f ((case-lambda ((g$r$17197) (if g$r$17197 (begin '#f (append g$q$17195 g$r$17197)) '#f))) ((letrec ((g$f$17199 (case-lambda ((g$x$17205) (if (g$syntax-pair?$14501 g$x$17205) ((case-lambda ((g$cars/f$17207) (if g$cars/f$17207 (begin '#f ((case-lambda ((g$d/f$17209) (if g$d/f$17209 (begin '#f (cons (map cons g$cars/f$17207 (car g$d/f$17209)) (cdr g$d/f$17209))) '#f))) (g$f$17199 (g$syntax-cdr$14513 g$x$17205)))) '#f))) ((case-lambda ((g$x$17211) (list g$x$17211))) (g$syntax-car$14509 g$x$17205))) ((case-lambda ((g$d$17213) (if g$d$17213 (begin '#f (cons (list (begin 'fmls '())) g$d$17213)) '#f))) ((case-lambda ((g$x$17215) (list g$x$17215))) g$x$17205))))))) (case-lambda ((g$x$17201) ((case-lambda ((g$x$17203) (if g$x$17203 (begin '#f (append (car g$x$17203) (cdr g$x$17203))) '#f))) (g$f$17199 g$x$17201))))) (g$syntax-cdr$14513 g$x$17193)))) '#f))) ((case-lambda ((g$x$17217) (list g$x$17217))) (g$syntax-car$14509 g$x$17193)))) '#f))) (g$syntax-car$14509 g$x$17169)))) '#f))) (g$syntax-cdr$14513 g$x$17163)))) '#f))) ((case-lambda ((g$x$17219) '())) (g$syntax-car$14509 g$x$17163)))) '#f))) g$t$17101)))) g$t$17081)))) ((case-lambda ((g$x$17221) (if (g$syntax-pair?$14501 g$x$17221) (begin '#f ((case-lambda ((g$q$17223) (if g$q$17223 (begin '#f ((case-lambda ((g$r$17225) (if g$r$17225 (begin '#f (append g$q$17223 g$r$17225)) '#f))) ((case-lambda ((g$x$17227) (if (g$syntax-pair?$14501 g$x$17227) (begin '#f ((case-lambda ((g$q$17229) (if g$q$17229 (begin '#f ((case-lambda ((g$r$17231) (if g$r$17231 (begin '#f (append g$q$17229 g$r$17231)) '#f))) ((case-lambda ((g$x$17233) (if (g$syntax-pair?$14501 g$x$17233) (begin '#f ((case-lambda ((g$q$17235) (if g$q$17235 (begin '#f ((case-lambda ((g$r$17237) (if g$r$17237 (begin '#f (append g$q$17235 g$r$17237)) '#f))) ((letrec ((g$f$17239 (case-lambda ((g$x$17241) (if (g$syntax-pair?$14501 g$x$17241) ((case-lambda ((g$cars/f$17243) (if g$cars/f$17243 (begin '#f ((case-lambda ((g$cdrs/f$17245) (if g$cdrs/f$17245 (begin '#f (map cons g$cars/f$17243 g$cdrs/f$17245)) '#f))) (g$f$17239 (g$syntax-cdr$14513 g$x$17241)))) '#f))) ((case-lambda ((g$x$17247) (list g$x$17247))) (g$syntax-car$14509 g$x$17241))) (if (g$syntax-null?$14505 g$x$17241) (list (begin 'b* '())) '#f)))))) g$f$17239) (g$syntax-cdr$14513 g$x$17233)))) '#f))) ((case-lambda ((g$x$17249) (list g$x$17249))) (g$syntax-car$14509 g$x$17233)))) '#f))) (g$syntax-cdr$14513 g$x$17227)))) '#f))) ((case-lambda ((g$x$17251) (if (g$syntax-pair?$14501 g$x$17251) (begin '#f ((case-lambda ((g$q$17253) (if g$q$17253 (begin '#f ((case-lambda ((g$r$17255) (if g$r$17255 (begin '#f (append g$q$17253 g$r$17255)) '#f))) ((letrec ((g$f$17257 (case-lambda ((g$x$17259) (if (g$syntax-pair?$14501 g$x$17259) ((case-lambda ((g$cars/f$17261) (if g$cars/f$17261 (begin '#f ((case-lambda ((g$cdrs/f$17263) (if g$cdrs/f$17263 (begin '#f (map cons g$cars/f$17261 g$cdrs/f$17263)) '#f))) (g$f$17257 (g$syntax-cdr$14513 g$x$17259)))) '#f))) ((case-lambda ((g$x$17265) (list g$x$17265))) (g$syntax-car$14509 g$x$17259))) (if (g$syntax-null?$14505 g$x$17259) (list (begin 'fmls '())) '#f)))))) g$f$17257) (g$syntax-cdr$14513 g$x$17251)))) '#f))) ((case-lambda ((g$x$17267) (list g$x$17267))) (g$syntax-car$14509 g$x$17251)))) '#f))) (g$syntax-car$14509 g$x$17227)))) '#f))) (g$syntax-cdr$14513 g$x$17221)))) '#f))) ((case-lambda ((g$x$17269) '())) (g$syntax-car$14509 g$x$17221)))) '#f))) g$t$17081)))) g$stx$17079)))) (set! g$guard-macro$14988 (case-lambda ((g$x$17271) ((case-lambda ((g$gen-clauses$17273) (begin (set! g$gen-clauses$17273 (case-lambda ((g$con$17275 g$outerk$17276 g$clause*$17277) ((case-lambda ((g$f$17281 g$f*$17283) (begin (set! g$f$17281 (case-lambda ((g$x$17377 g$k$17378) ((case-lambda ((g$t$17381) ((case-lambda ((g$ls/false$17383) (if (if g$ls/false$17383 (begin '#f (apply (case-lambda ((g$e$17385 g$p$17386) '#t)) g$ls/false$17383)) '#f) (apply (case-lambda ((g$e$17389 g$p$17390) ((case-lambda ((g$t$17393) (list 'let (list (list g$t$17393 g$e$17389)) (list 'if g$t$17393 (list g$p$17390 g$t$17393) g$k$17378)))) (gensym)))) g$ls/false$17383) ((case-lambda ((g$t$17395) ((case-lambda ((g$ls/false$17397) (if (if g$ls/false$17397 (begin '#f (apply (case-lambda ((g$e$17399) '#t)) g$ls/false$17397)) '#f) (apply (case-lambda ((g$e$17401) ((case-lambda ((g$t$17403) (list 'let (list (list g$t$17403 g$e$17401)) (list 'if g$t$17403 g$t$17403 g$k$17378)))) (gensym)))) g$ls/false$17397) ((case-lambda ((g$t$17405) ((case-lambda ((g$ls/false$17407) (if (if g$ls/false$17407 (begin '#f (apply (case-lambda ((g$e$17409 g$v$17410 g$v*$17411) '#t)) g$ls/false$17407)) '#f) (apply (case-lambda ((g$e$17415 g$v$17416 g$v*$17417) (list 'if g$e$17415 (cons 'begin (cons g$v$17416 g$v*$17417)) g$k$17378))) g$ls/false$17407) ((case-lambda ((g$t$17421) ((case-lambda ((g$ls/false$17423) (if (if g$ls/false$17423 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$17423)) '#f) (apply (case-lambda (() (error 'expander '"invalid guard clause" (g$strip$14533 g$x$17377 '())))) g$ls/false$17423) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17421 '()))))) ((case-lambda ((g$x$17425) '())) g$t$17421)))) g$t$17405)))) ((case-lambda ((g$x$17427) (if (g$syntax-pair?$14501 g$x$17427) (begin '#f ((case-lambda ((g$q$17429) (if g$q$17429 (begin '#f ((case-lambda ((g$r$17431) (if g$r$17431 (begin '#f (append g$q$17429 g$r$17431)) '#f))) ((case-lambda ((g$x$17433) (if (g$syntax-pair?$14501 g$x$17433) (begin '#f ((case-lambda ((g$q$17435) (if g$q$17435 (begin '#f ((case-lambda ((g$r$17437) (if g$r$17437 (begin '#f (append g$q$17435 g$r$17437)) '#f))) ((letrec ((g$f$17439 (case-lambda ((g$x$17441) (if (g$syntax-pair?$14501 g$x$17441) ((case-lambda ((g$cars/f$17443) (if g$cars/f$17443 (begin '#f ((case-lambda ((g$cdrs/f$17445) (if g$cdrs/f$17445 (begin '#f (map cons g$cars/f$17443 g$cdrs/f$17445)) '#f))) (g$f$17439 (g$syntax-cdr$14513 g$x$17441)))) '#f))) ((case-lambda ((g$x$17447) (list g$x$17447))) (g$syntax-car$14509 g$x$17441))) (if (g$syntax-null?$14505 g$x$17441) (list (begin 'v* '())) '#f)))))) g$f$17439) (g$syntax-cdr$14513 g$x$17433)))) '#f))) ((case-lambda ((g$x$17449) (list g$x$17449))) (g$syntax-car$14509 g$x$17433)))) '#f))) (g$syntax-cdr$14513 g$x$17427)))) '#f))) ((case-lambda ((g$x$17451) (list g$x$17451))) (g$syntax-car$14509 g$x$17427)))) '#f))) g$t$17405)))) g$t$17395)))) ((case-lambda ((g$x$17453) (if (g$syntax-pair?$14501 g$x$17453) (begin '#f ((case-lambda ((g$q$17455) (if g$q$17455 (begin '#f ((case-lambda ((g$r$17457) (if g$r$17457 (begin '#f (append g$q$17455 g$r$17457)) '#f))) ((case-lambda ((g$x$17459) (if (equal? (g$stx->datum$14535 g$x$17459) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17453)))) '#f))) ((case-lambda ((g$x$17461) (list g$x$17461))) (g$syntax-car$14509 g$x$17453)))) '#f))) g$t$17395)))) g$t$17381)))) ((case-lambda ((g$x$17463) (if (g$syntax-pair?$14501 g$x$17463) (begin '#f ((case-lambda ((g$q$17465) (if g$q$17465 (begin '#f ((case-lambda ((g$r$17467) (if g$r$17467 (begin '#f (append g$q$17465 g$r$17467)) '#f))) ((case-lambda ((g$x$17469) (if (g$syntax-pair?$14501 g$x$17469) (begin '#f ((case-lambda ((g$q$17471) (if g$q$17471 (begin '#f ((case-lambda ((g$r$17473) (if g$r$17473 (begin '#f (append g$q$17471 g$r$17473)) '#f))) ((case-lambda ((g$x$17475) (if (g$syntax-pair?$14501 g$x$17475) (begin '#f ((case-lambda ((g$q$17477) (if g$q$17477 (begin '#f ((case-lambda ((g$r$17479) (if g$r$17479 (begin '#f (append g$q$17477 g$r$17479)) '#f))) ((case-lambda ((g$x$17481) (if (equal? (g$stx->datum$14535 g$x$17481) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17475)))) '#f))) ((case-lambda ((g$x$17483) (list g$x$17483))) (g$syntax-car$14509 g$x$17475)))) '#f))) (g$syntax-cdr$14513 g$x$17469)))) '#f))) ((case-lambda ((g$x$17485) (if (g$id?$14515 g$x$17485) (if (g$free-id=?$14523 g$x$17485 (g$scheme-stx$14944 '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$17469)))) '#f))) (g$syntax-cdr$14513 g$x$17463)))) '#f))) ((case-lambda ((g$x$17487) (list g$x$17487))) (g$syntax-car$14509 g$x$17463)))) '#f))) g$t$17381)))) g$x$17377)))) (set! g$f*$17283 (case-lambda ((g$x*$17285) ((case-lambda ((g$t$17287) ((case-lambda ((g$ls/false$17289) (if (if g$ls/false$17289 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$17289)) '#f) (apply (case-lambda (() ((case-lambda ((g$g$17291) (values (list g$g$17291 (list 'lambda '() (list 'raise g$con$17275))) g$g$17291))) (gensym)))) g$ls/false$17289) ((case-lambda ((g$t$17293) ((case-lambda ((g$ls/false$17295) (if (if g$ls/false$17295 (begin '#f (apply (case-lambda ((g$e$17297 g$e*$17298) '#t)) g$ls/false$17295)) '#f) (apply (case-lambda ((g$e$17301 g$e*$17302) (values (cons 'begin (cons g$e$17301 g$e*$17302)) '#f))) g$ls/false$17295) ((case-lambda ((g$t$17305) ((case-lambda ((g$ls/false$17307) (if (if g$ls/false$17307 (begin '#f (apply (case-lambda ((g$cls$17309 g$cls*$17310) '#t)) g$ls/false$17307)) '#f) (apply (case-lambda ((g$cls$17313 g$cls*$17314) (call-with-values (case-lambda (() (g$f*$17283 g$cls*$17314))) (case-lambda ((g$e$17317 g$g$17318) (values (g$f$17281 g$cls$17313 g$e$17317) g$g$17318)))))) g$ls/false$17307) ((case-lambda ((g$t$17321) ((case-lambda ((g$ls/false$17323) (if (if g$ls/false$17323 (begin '#f (apply (case-lambda ((g$others$17325) '#t)) g$ls/false$17323)) '#f) (apply (case-lambda ((g$others$17327) (error 'expander '"invalid guard clause" (g$strip$14533 g$others$17327 '())))) g$ls/false$17323) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17321 '()))))) ((case-lambda ((g$x$17329) (list g$x$17329))) g$t$17321)))) g$t$17305)))) ((case-lambda ((g$x$17331) (if (g$syntax-pair?$14501 g$x$17331) (begin '#f ((case-lambda ((g$q$17333) (if g$q$17333 (begin '#f ((case-lambda ((g$r$17335) (if g$r$17335 (begin '#f (append g$q$17333 g$r$17335)) '#f))) ((case-lambda ((g$x$17337) (list g$x$17337))) (g$syntax-cdr$14513 g$x$17331)))) '#f))) ((case-lambda ((g$x$17339) (list g$x$17339))) (g$syntax-car$14509 g$x$17331)))) '#f))) g$t$17305)))) g$t$17293)))) ((case-lambda ((g$x$17341) (if (g$syntax-pair?$14501 g$x$17341) (begin '#f ((case-lambda ((g$q$17343) (if g$q$17343 (begin '#f ((case-lambda ((g$r$17345) (if g$r$17345 (begin '#f (append g$q$17343 g$r$17345)) '#f))) ((case-lambda ((g$x$17347) (if (equal? (g$stx->datum$14535 g$x$17347) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17341)))) '#f))) ((case-lambda ((g$x$17349) (if (g$syntax-pair?$14501 g$x$17349) (begin '#f ((case-lambda ((g$q$17351) (if g$q$17351 (begin '#f ((case-lambda ((g$r$17353) (if g$r$17353 (begin '#f (append g$q$17351 g$r$17353)) '#f))) ((case-lambda ((g$x$17355) (if (g$syntax-pair?$14501 g$x$17355) (begin '#f ((case-lambda ((g$q$17357) (if g$q$17357 (begin '#f ((case-lambda ((g$r$17359) (if g$r$17359 (begin '#f (append g$q$17357 g$r$17359)) '#f))) ((letrec ((g$f$17361 (case-lambda ((g$x$17363) (if (g$syntax-pair?$14501 g$x$17363) ((case-lambda ((g$cars/f$17365) (if g$cars/f$17365 (begin '#f ((case-lambda ((g$cdrs/f$17367) (if g$cdrs/f$17367 (begin '#f (map cons g$cars/f$17365 g$cdrs/f$17367)) '#f))) (g$f$17361 (g$syntax-cdr$14513 g$x$17363)))) '#f))) ((case-lambda ((g$x$17369) (list g$x$17369))) (g$syntax-car$14509 g$x$17363))) (if (g$syntax-null?$14505 g$x$17363) (list (begin 'e* '())) '#f)))))) g$f$17361) (g$syntax-cdr$14513 g$x$17355)))) '#f))) ((case-lambda ((g$x$17371) (list g$x$17371))) (g$syntax-car$14509 g$x$17355)))) '#f))) (g$syntax-cdr$14513 g$x$17349)))) '#f))) ((case-lambda ((g$x$17373) (if (g$id?$14515 g$x$17373) (if (g$free-id=?$14523 g$x$17373 (g$scheme-stx$14944 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$17349)))) '#f))) (g$syntax-car$14509 g$x$17341)))) '#f))) g$t$17293)))) g$t$17287)))) ((case-lambda ((g$x$17375) (if (equal? (g$stx->datum$14535 g$x$17375) '()) (begin '#f '()) '#f))) g$t$17287)))) g$x*$17285)))) (call-with-values (case-lambda (() (g$f*$17283 g$clause*$17277))) (case-lambda ((g$code$17489 g$raisek$17490) (if g$raisek$17490 (list (list 'call/cc (list 'lambda (list g$raisek$17490) (list g$outerk$17276 (list 'lambda '() g$code$17489))))) (list g$outerk$17276 (list 'lambda '() g$code$17489))))))))) '#f '#f)))) ((case-lambda ((g$t$17493) ((case-lambda ((g$ls/false$17495) (if (if g$ls/false$17495 (begin '#f (apply (case-lambda ((g$con$17497 g$clause*$17498 g$b$17499 g$b*$17500) (g$id?$14515 g$con$17497))) g$ls/false$17495)) '#f) (apply (case-lambda ((g$con$17505 g$clause*$17506 g$b$17507 g$b*$17508) ((case-lambda ((g$outerk$17513) (g$bless$14978 (list (list 'call/cc (list 'lambda (list g$outerk$17513) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g$con$17505) (g$gen-clauses$17273 g$con$17505 g$outerk$17513 g$clause*$17506)) (cons 'lambda (cons '() (cons '#f (cons g$b$17507 g$b*$17508)))))))))))) (gensym)))) g$ls/false$17495) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17493 '()))))) ((case-lambda ((g$x$17515) (if (g$syntax-pair?$14501 g$x$17515) (begin '#f ((case-lambda ((g$q$17517) (if g$q$17517 (begin '#f ((case-lambda ((g$r$17519) (if g$r$17519 (begin '#f (append g$q$17517 g$r$17519)) '#f))) ((case-lambda ((g$x$17521) (if (g$syntax-pair?$14501 g$x$17521) (begin '#f ((case-lambda ((g$q$17523) (if g$q$17523 (begin '#f ((case-lambda ((g$r$17525) (if g$r$17525 (begin '#f (append g$q$17523 g$r$17525)) '#f))) ((case-lambda ((g$x$17527) (if (g$syntax-pair?$14501 g$x$17527) (begin '#f ((case-lambda ((g$q$17529) (if g$q$17529 (begin '#f ((case-lambda ((g$r$17531) (if g$r$17531 (begin '#f (append g$q$17529 g$r$17531)) '#f))) ((letrec ((g$f$17533 (case-lambda ((g$x$17535) (if (g$syntax-pair?$14501 g$x$17535) ((case-lambda ((g$cars/f$17537) (if g$cars/f$17537 (begin '#f ((case-lambda ((g$cdrs/f$17539) (if g$cdrs/f$17539 (begin '#f (map cons g$cars/f$17537 g$cdrs/f$17539)) '#f))) (g$f$17533 (g$syntax-cdr$14513 g$x$17535)))) '#f))) ((case-lambda ((g$x$17541) (list g$x$17541))) (g$syntax-car$14509 g$x$17535))) (if (g$syntax-null?$14505 g$x$17535) (list (begin 'b* '())) '#f)))))) g$f$17533) (g$syntax-cdr$14513 g$x$17527)))) '#f))) ((case-lambda ((g$x$17543) (list g$x$17543))) (g$syntax-car$14509 g$x$17527)))) '#f))) (g$syntax-cdr$14513 g$x$17521)))) '#f))) ((case-lambda ((g$x$17545) (if (g$syntax-pair?$14501 g$x$17545) (begin '#f ((case-lambda ((g$q$17547) (if g$q$17547 (begin '#f ((case-lambda ((g$r$17549) (if g$r$17549 (begin '#f (append g$q$17547 g$r$17549)) '#f))) ((letrec ((g$f$17551 (case-lambda ((g$x$17553) (if (g$syntax-pair?$14501 g$x$17553) ((case-lambda ((g$cars/f$17555) (if g$cars/f$17555 (begin '#f ((case-lambda ((g$cdrs/f$17557) (if g$cdrs/f$17557 (begin '#f (map cons g$cars/f$17555 g$cdrs/f$17557)) '#f))) (g$f$17551 (g$syntax-cdr$14513 g$x$17553)))) '#f))) ((case-lambda ((g$x$17559) (list g$x$17559))) (g$syntax-car$14509 g$x$17553))) (if (g$syntax-null?$14505 g$x$17553) (list (begin 'clause* '())) '#f)))))) g$f$17551) (g$syntax-cdr$14513 g$x$17545)))) '#f))) ((case-lambda ((g$x$17561) (list g$x$17561))) (g$syntax-car$14509 g$x$17545)))) '#f))) (g$syntax-car$14509 g$x$17521)))) '#f))) (g$syntax-cdr$14513 g$x$17515)))) '#f))) ((case-lambda ((g$x$17563) '())) (g$syntax-car$14509 g$x$17515)))) '#f))) g$t$17493)))) g$x$17271)))) '#f)))) (set! g$define-enumeration-macro$14990 (case-lambda ((g$stx$17565) ((case-lambda ((g$set?$17567) (begin (set! g$set?$17567 (case-lambda ((g$x$17569) ((case-lambda ((g$t$17571) (if g$t$17571 g$t$17571 (begin '#f (if (not (memq (car g$x$17569) (cdr g$x$17569))) (begin '#f (g$set?$17567 (cdr g$x$17569))) '#f))))) (null? g$x$17569))))) ((case-lambda ((g$t$17573) ((case-lambda ((g$ls/false$17575) (if (if g$ls/false$17575 (begin '#f (apply (case-lambda ((g$name$17577 g$id*$17578 g$maker$17579) (if (g$id?$14515 g$name$17577) (if (g$id?$14515 g$maker$17579) (begin '#f (for-all g$id?$14515 g$id*$17578)) '#f) '#f))) g$ls/false$17575)) '#f) (apply (case-lambda ((g$name$17583 g$id*$17584 g$maker$17585) ((case-lambda ((g$name*$17589 g$mk$17590) (begin (if (g$set?$17567 g$name*$17589) (void) (error 'expander '"duplicate names in enumeration set" (g$strip$14533 g$stx$17565 '()))) (g$bless$14978 (list 'begin (list 'define g$mk$17590 (list 'enum-set-constructor (list 'make-enumeration (list 'quote g$name*$17589)))) (list 'define-syntax g$name$17583 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g$name*$17589)) '(syntax 'n) (list 'syntax-error 'x '"not a member of set" (list 'quote g$name*$17589))))))) (list 'define-syntax g$maker$17585 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) '(unless (identifier? n) (syntax-error x "non-identifier argument")) (cons 'unless (cons (list 'memq '(syntax->datum n) (list 'quote g$name*$17589)) '((syntax-error n "not a member of set"))))) '((syntax (n* ...))))) (list 'syntax (cons g$mk$17590 '('(n* ...)))))))))))))) (g$syntax->datum$15173 g$id*$17584) (gensym)))) g$ls/false$17575) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17573 '()))))) ((case-lambda ((g$x$17593) (if (g$syntax-pair?$14501 g$x$17593) (begin '#f ((case-lambda ((g$q$17595) (if g$q$17595 (begin '#f ((case-lambda ((g$r$17597) (if g$r$17597 (begin '#f (append g$q$17595 g$r$17597)) '#f))) ((case-lambda ((g$x$17599) (if (g$syntax-pair?$14501 g$x$17599) (begin '#f ((case-lambda ((g$q$17601) (if g$q$17601 (begin '#f ((case-lambda ((g$r$17603) (if g$r$17603 (begin '#f (append g$q$17601 g$r$17603)) '#f))) ((case-lambda ((g$x$17605) (if (g$syntax-pair?$14501 g$x$17605) (begin '#f ((case-lambda ((g$q$17607) (if g$q$17607 (begin '#f ((case-lambda ((g$r$17609) (if g$r$17609 (begin '#f (append g$q$17607 g$r$17609)) '#f))) ((case-lambda ((g$x$17611) (if (g$syntax-pair?$14501 g$x$17611) (begin '#f ((case-lambda ((g$q$17613) (if g$q$17613 (begin '#f ((case-lambda ((g$r$17615) (if g$r$17615 (begin '#f (append g$q$17613 g$r$17615)) '#f))) ((case-lambda ((g$x$17617) (if (equal? (g$stx->datum$14535 g$x$17617) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17611)))) '#f))) ((case-lambda ((g$x$17619) (list g$x$17619))) (g$syntax-car$14509 g$x$17611)))) '#f))) (g$syntax-cdr$14513 g$x$17605)))) '#f))) ((letrec ((g$f$17621 (case-lambda ((g$x$17623) (if (g$syntax-pair?$14501 g$x$17623) ((case-lambda ((g$cars/f$17625) (if g$cars/f$17625 (begin '#f ((case-lambda ((g$cdrs/f$17627) (if g$cdrs/f$17627 (begin '#f (map cons g$cars/f$17625 g$cdrs/f$17627)) '#f))) (g$f$17621 (g$syntax-cdr$14513 g$x$17623)))) '#f))) ((case-lambda ((g$x$17629) (list g$x$17629))) (g$syntax-car$14509 g$x$17623))) (if (g$syntax-null?$14505 g$x$17623) (list (begin 'id* '())) '#f)))))) g$f$17621) (g$syntax-car$14509 g$x$17605)))) '#f))) (g$syntax-cdr$14513 g$x$17599)))) '#f))) ((case-lambda ((g$x$17631) (list g$x$17631))) (g$syntax-car$14509 g$x$17599)))) '#f))) (g$syntax-cdr$14513 g$x$17593)))) '#f))) ((case-lambda ((g$x$17633) '())) (g$syntax-car$14509 g$x$17593)))) '#f))) g$t$17573)))) g$stx$17565)))) '#f)))) (set! g$time-macro$14992 (case-lambda ((g$stx$17635) ((case-lambda ((g$t$17637) ((case-lambda ((g$ls/false$17639) (if (if g$ls/false$17639 (begin '#f (apply (case-lambda ((g$expr$17641) '#t)) g$ls/false$17639)) '#f) (apply (case-lambda ((g$expr$17643) (g$bless$14978 (list 'time-it (list 'quote g$expr$17643) (list 'lambda '() g$expr$17643))))) g$ls/false$17639) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17637 '()))))) ((case-lambda ((g$x$17645) (if (g$syntax-pair?$14501 g$x$17645) (begin '#f ((case-lambda ((g$q$17647) (if g$q$17647 (begin '#f ((case-lambda ((g$r$17649) (if g$r$17649 (begin '#f (append g$q$17647 g$r$17649)) '#f))) ((case-lambda ((g$x$17651) (if (g$syntax-pair?$14501 g$x$17651) (begin '#f ((case-lambda ((g$q$17653) (if g$q$17653 (begin '#f ((case-lambda ((g$r$17655) (if g$r$17655 (begin '#f (append g$q$17653 g$r$17655)) '#f))) ((case-lambda ((g$x$17657) (if (equal? (g$stx->datum$14535 g$x$17657) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17651)))) '#f))) ((case-lambda ((g$x$17659) (list g$x$17659))) (g$syntax-car$14509 g$x$17651)))) '#f))) (g$syntax-cdr$14513 g$x$17645)))) '#f))) ((case-lambda ((g$x$17661) '())) (g$syntax-car$14509 g$x$17645)))) '#f))) g$t$17637)))) g$stx$17635)))) (set! g$delay-macro$14994 (case-lambda ((g$stx$17663) ((case-lambda ((g$t$17665) ((case-lambda ((g$ls/false$17667) (if (if g$ls/false$17667 (begin '#f (apply (case-lambda ((g$expr$17669) '#t)) g$ls/false$17667)) '#f) (apply (case-lambda ((g$expr$17671) (g$bless$14978 (list 'make-promise (list 'lambda '() g$expr$17671))))) g$ls/false$17667) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17665 '()))))) ((case-lambda ((g$x$17673) (if (g$syntax-pair?$14501 g$x$17673) (begin '#f ((case-lambda ((g$q$17675) (if g$q$17675 (begin '#f ((case-lambda ((g$r$17677) (if g$r$17677 (begin '#f (append g$q$17675 g$r$17677)) '#f))) ((case-lambda ((g$x$17679) (if (g$syntax-pair?$14501 g$x$17679) (begin '#f ((case-lambda ((g$q$17681) (if g$q$17681 (begin '#f ((case-lambda ((g$r$17683) (if g$r$17683 (begin '#f (append g$q$17681 g$r$17683)) '#f))) ((case-lambda ((g$x$17685) (if (equal? (g$stx->datum$14535 g$x$17685) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17679)))) '#f))) ((case-lambda ((g$x$17687) (list g$x$17687))) (g$syntax-car$14509 g$x$17679)))) '#f))) (g$syntax-cdr$14513 g$x$17673)))) '#f))) ((case-lambda ((g$x$17689) '())) (g$syntax-car$14509 g$x$17673)))) '#f))) g$t$17665)))) g$stx$17663)))) (set! g$assert-macro$14996 (case-lambda ((g$stx$17691) ((case-lambda ((g$t$17693) ((case-lambda ((g$ls/false$17695) (if (if g$ls/false$17695 (begin '#f (apply (case-lambda ((g$expr$17697) '#t)) g$ls/false$17695)) '#f) (apply (case-lambda ((g$expr$17699) (g$bless$14978 (list 'unless g$expr$17699 (list 'error ''assert '"assertion failed" (list 'quote g$expr$17699)))))) g$ls/false$17695) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17693 '()))))) ((case-lambda ((g$x$17701) (if (g$syntax-pair?$14501 g$x$17701) (begin '#f ((case-lambda ((g$q$17703) (if g$q$17703 (begin '#f ((case-lambda ((g$r$17705) (if g$r$17705 (begin '#f (append g$q$17703 g$r$17705)) '#f))) ((case-lambda ((g$x$17707) (if (g$syntax-pair?$14501 g$x$17707) (begin '#f ((case-lambda ((g$q$17709) (if g$q$17709 (begin '#f ((case-lambda ((g$r$17711) (if g$r$17711 (begin '#f (append g$q$17709 g$r$17711)) '#f))) ((case-lambda ((g$x$17713) (if (equal? (g$stx->datum$14535 g$x$17713) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17707)))) '#f))) ((case-lambda ((g$x$17715) (list g$x$17715))) (g$syntax-car$14509 g$x$17707)))) '#f))) (g$syntax-cdr$14513 g$x$17701)))) '#f))) ((case-lambda ((g$x$17717) '())) (g$syntax-car$14509 g$x$17701)))) '#f))) g$t$17693)))) g$stx$17691)))) (set! g$endianness-macro$14998 (case-lambda ((g$stx$17719) ((case-lambda ((g$t$17721) ((case-lambda ((g$ls/false$17723) (if (if g$ls/false$17723 (begin '#f (apply (case-lambda ((g$e$17725) '#t)) g$ls/false$17723)) '#f) (apply (case-lambda ((g$e$17727) ((case-lambda ((g$t$17729) (if (memv g$t$17729 '(little)) (g$bless$14978 ''little) (if (memv g$t$17729 '(big)) (g$bless$14978 ''big) (error 'expander '"endianness must be big or little" (g$strip$14533 g$stx$17719 '())))))) (g$syntax->datum$15173 g$e$17727)))) g$ls/false$17723) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17721 '()))))) ((case-lambda ((g$x$17730) (if (g$syntax-pair?$14501 g$x$17730) (begin '#f ((case-lambda ((g$q$17732) (if g$q$17732 (begin '#f ((case-lambda ((g$r$17734) (if g$r$17734 (begin '#f (append g$q$17732 g$r$17734)) '#f))) ((case-lambda ((g$x$17736) (if (g$syntax-pair?$14501 g$x$17736) (begin '#f ((case-lambda ((g$q$17738) (if g$q$17738 (begin '#f ((case-lambda ((g$r$17740) (if g$r$17740 (begin '#f (append g$q$17738 g$r$17740)) '#f))) ((case-lambda ((g$x$17742) (if (equal? (g$stx->datum$14535 g$x$17742) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17736)))) '#f))) ((case-lambda ((g$x$17744) (list g$x$17744))) (g$syntax-car$14509 g$x$17736)))) '#f))) (g$syntax-cdr$14513 g$x$17730)))) '#f))) ((case-lambda ((g$x$17746) '())) (g$syntax-car$14509 g$x$17730)))) '#f))) g$t$17721)))) g$stx$17719)))) (set! g$identifier-syntax-macro$15000 (case-lambda ((g$stx$17748) ((case-lambda ((g$t$17750) ((case-lambda ((g$ls/false$17752) (if (if g$ls/false$17752 (begin '#f (apply (case-lambda ((g$expr$17754) '#t)) g$ls/false$17752)) '#f) (apply (case-lambda ((g$expr$17756) (g$bless$14978 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g$expr$17756)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g$expr$17756) '((syntax (e* ...))))))))))) g$ls/false$17752) ((case-lambda ((g$t$17758) ((case-lambda ((g$ls/false$17760) (if (if g$ls/false$17760 (begin '#f (apply (case-lambda ((g$id1$17762 g$expr1$17763 g$id2$17764 g$expr2$17765 g$expr3$17766) (if (g$id?$14515 g$id1$17762) (if (g$id?$14515 g$id2$17764) (begin '#f (g$id?$14515 g$expr2$17765)) '#f) '#f))) g$ls/false$17760)) '#f) (apply (case-lambda ((g$id1$17772 g$expr1$17773 g$id2$17774 g$expr2$17775 g$expr3$17776) (g$bless$14978 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g$expr1$17773)) (list (list 'set! 'id g$expr2$17775) (list 'syntax g$expr3$17776)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons g$expr1$17773 '(e* ...)))))))))) g$ls/false$17760) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17758 '()))))) ((case-lambda ((g$x$17782) (if (g$syntax-pair?$14501 g$x$17782) (begin '#f ((case-lambda ((g$q$17784) (if g$q$17784 (begin '#f ((case-lambda ((g$r$17786) (if g$r$17786 (begin '#f (append g$q$17784 g$r$17786)) '#f))) ((case-lambda ((g$x$17788) (if (g$syntax-pair?$14501 g$x$17788) (begin '#f ((case-lambda ((g$q$17790) (if g$q$17790 (begin '#f ((case-lambda ((g$r$17792) (if g$r$17792 (begin '#f (append g$q$17790 g$r$17792)) '#f))) ((case-lambda ((g$x$17794) (if (g$syntax-pair?$14501 g$x$17794) (begin '#f ((case-lambda ((g$q$17796) (if g$q$17796 (begin '#f ((case-lambda ((g$r$17798) (if g$r$17798 (begin '#f (append g$q$17796 g$r$17798)) '#f))) ((case-lambda ((g$x$17800) (if (equal? (g$stx->datum$14535 g$x$17800) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17794)))) '#f))) ((case-lambda ((g$x$17802) (if (g$syntax-pair?$14501 g$x$17802) (begin '#f ((case-lambda ((g$q$17804) (if g$q$17804 (begin '#f ((case-lambda ((g$r$17806) (if g$r$17806 (begin '#f (append g$q$17804 g$r$17806)) '#f))) ((case-lambda ((g$x$17808) (if (g$syntax-pair?$14501 g$x$17808) (begin '#f ((case-lambda ((g$q$17810) (if g$q$17810 (begin '#f ((case-lambda ((g$r$17812) (if g$r$17812 (begin '#f (append g$q$17810 g$r$17812)) '#f))) ((case-lambda ((g$x$17814) (if (equal? (g$stx->datum$14535 g$x$17814) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17808)))) '#f))) ((case-lambda ((g$x$17816) (list g$x$17816))) (g$syntax-car$14509 g$x$17808)))) '#f))) (g$syntax-cdr$14513 g$x$17802)))) '#f))) ((case-lambda ((g$x$17818) (if (g$syntax-pair?$14501 g$x$17818) (begin '#f ((case-lambda ((g$q$17820) (if g$q$17820 (begin '#f ((case-lambda ((g$r$17822) (if g$r$17822 (begin '#f (append g$q$17820 g$r$17822)) '#f))) ((case-lambda ((g$x$17824) (if (g$syntax-pair?$14501 g$x$17824) (begin '#f ((case-lambda ((g$q$17826) (if g$q$17826 (begin '#f ((case-lambda ((g$r$17828) (if g$r$17828 (begin '#f (append g$q$17826 g$r$17828)) '#f))) ((case-lambda ((g$x$17830) (if (g$syntax-pair?$14501 g$x$17830) (begin '#f ((case-lambda ((g$q$17832) (if g$q$17832 (begin '#f ((case-lambda ((g$r$17834) (if g$r$17834 (begin '#f (append g$q$17832 g$r$17834)) '#f))) ((case-lambda ((g$x$17836) (if (equal? (g$stx->datum$14535 g$x$17836) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17830)))) '#f))) ((case-lambda ((g$x$17838) (list g$x$17838))) (g$syntax-car$14509 g$x$17830)))) '#f))) (g$syntax-cdr$14513 g$x$17824)))) '#f))) ((case-lambda ((g$x$17840) (list g$x$17840))) (g$syntax-car$14509 g$x$17824)))) '#f))) (g$syntax-cdr$14513 g$x$17818)))) '#f))) ((case-lambda ((g$x$17842) (if (g$id?$14515 g$x$17842) (if (g$free-id=?$14523 g$x$17842 (g$scheme-stx$14944 'set!)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$17818)))) '#f))) (g$syntax-car$14509 g$x$17802)))) '#f))) (g$syntax-car$14509 g$x$17794)))) '#f))) (g$syntax-cdr$14513 g$x$17788)))) '#f))) ((case-lambda ((g$x$17844) (if (g$syntax-pair?$14501 g$x$17844) (begin '#f ((case-lambda ((g$q$17846) (if g$q$17846 (begin '#f ((case-lambda ((g$r$17848) (if g$r$17848 (begin '#f (append g$q$17846 g$r$17848)) '#f))) ((case-lambda ((g$x$17850) (if (g$syntax-pair?$14501 g$x$17850) (begin '#f ((case-lambda ((g$q$17852) (if g$q$17852 (begin '#f ((case-lambda ((g$r$17854) (if g$r$17854 (begin '#f (append g$q$17852 g$r$17854)) '#f))) ((case-lambda ((g$x$17856) (if (equal? (g$stx->datum$14535 g$x$17856) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17850)))) '#f))) ((case-lambda ((g$x$17858) (list g$x$17858))) (g$syntax-car$14509 g$x$17850)))) '#f))) (g$syntax-cdr$14513 g$x$17844)))) '#f))) ((case-lambda ((g$x$17860) (list g$x$17860))) (g$syntax-car$14509 g$x$17844)))) '#f))) (g$syntax-car$14509 g$x$17788)))) '#f))) (g$syntax-cdr$14513 g$x$17782)))) '#f))) ((case-lambda ((g$x$17862) '())) (g$syntax-car$14509 g$x$17782)))) '#f))) g$t$17758)))) g$t$17750)))) ((case-lambda ((g$x$17864) (if (g$syntax-pair?$14501 g$x$17864) (begin '#f ((case-lambda ((g$q$17866) (if g$q$17866 (begin '#f ((case-lambda ((g$r$17868) (if g$r$17868 (begin '#f (append g$q$17866 g$r$17868)) '#f))) ((case-lambda ((g$x$17870) (if (g$syntax-pair?$14501 g$x$17870) (begin '#f ((case-lambda ((g$q$17872) (if g$q$17872 (begin '#f ((case-lambda ((g$r$17874) (if g$r$17874 (begin '#f (append g$q$17872 g$r$17874)) '#f))) ((case-lambda ((g$x$17876) (if (equal? (g$stx->datum$14535 g$x$17876) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17870)))) '#f))) ((case-lambda ((g$x$17878) (list g$x$17878))) (g$syntax-car$14509 g$x$17870)))) '#f))) (g$syntax-cdr$14513 g$x$17864)))) '#f))) ((case-lambda ((g$x$17880) '())) (g$syntax-car$14509 g$x$17864)))) '#f))) g$t$17750)))) g$stx$17748)))) (set! g$do-macro$15002 (case-lambda ((g$stx$17882) ((case-lambda ((g$bind$17884) (begin (set! g$bind$17884 (case-lambda ((g$x$17886) ((case-lambda ((g$t$17888) ((case-lambda ((g$ls/false$17890) (if (if g$ls/false$17890 (begin '#f (apply (case-lambda ((g$x$17892 g$init$17893) '#t)) g$ls/false$17890)) '#f) (apply (case-lambda ((g$x$17896 g$init$17897) (list g$x$17896 g$init$17897 g$x$17896))) g$ls/false$17890) ((case-lambda ((g$t$17900) ((case-lambda ((g$ls/false$17902) (if (if g$ls/false$17902 (begin '#f (apply (case-lambda ((g$x$17904 g$init$17905 g$step$17906) '#t)) g$ls/false$17902)) '#f) (apply (case-lambda ((g$x$17910 g$init$17911 g$step$17912) (list g$x$17910 g$init$17911 g$step$17912))) g$ls/false$17902) ((case-lambda ((g$t$17916) ((case-lambda ((g$ls/false$17918) (if (if g$ls/false$17918 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$17918)) '#f) (apply (case-lambda (() (error 'expander '"invalid binding" (g$strip$14533 g$stx$17882 '())))) g$ls/false$17918) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17916 '()))))) ((case-lambda ((g$x$17920) '())) g$t$17916)))) g$t$17900)))) ((case-lambda ((g$x$17922) (if (g$syntax-pair?$14501 g$x$17922) (begin '#f ((case-lambda ((g$q$17924) (if g$q$17924 (begin '#f ((case-lambda ((g$r$17926) (if g$r$17926 (begin '#f (append g$q$17924 g$r$17926)) '#f))) ((case-lambda ((g$x$17928) (if (g$syntax-pair?$14501 g$x$17928) (begin '#f ((case-lambda ((g$q$17930) (if g$q$17930 (begin '#f ((case-lambda ((g$r$17932) (if g$r$17932 (begin '#f (append g$q$17930 g$r$17932)) '#f))) ((case-lambda ((g$x$17934) (if (g$syntax-pair?$14501 g$x$17934) (begin '#f ((case-lambda ((g$q$17936) (if g$q$17936 (begin '#f ((case-lambda ((g$r$17938) (if g$r$17938 (begin '#f (append g$q$17936 g$r$17938)) '#f))) ((case-lambda ((g$x$17940) (if (equal? (g$stx->datum$14535 g$x$17940) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17934)))) '#f))) ((case-lambda ((g$x$17942) (list g$x$17942))) (g$syntax-car$14509 g$x$17934)))) '#f))) (g$syntax-cdr$14513 g$x$17928)))) '#f))) ((case-lambda ((g$x$17944) (list g$x$17944))) (g$syntax-car$14509 g$x$17928)))) '#f))) (g$syntax-cdr$14513 g$x$17922)))) '#f))) ((case-lambda ((g$x$17946) (list g$x$17946))) (g$syntax-car$14509 g$x$17922)))) '#f))) g$t$17900)))) g$t$17888)))) ((case-lambda ((g$x$17948) (if (g$syntax-pair?$14501 g$x$17948) (begin '#f ((case-lambda ((g$q$17950) (if g$q$17950 (begin '#f ((case-lambda ((g$r$17952) (if g$r$17952 (begin '#f (append g$q$17950 g$r$17952)) '#f))) ((case-lambda ((g$x$17954) (if (g$syntax-pair?$14501 g$x$17954) (begin '#f ((case-lambda ((g$q$17956) (if g$q$17956 (begin '#f ((case-lambda ((g$r$17958) (if g$r$17958 (begin '#f (append g$q$17956 g$r$17958)) '#f))) ((case-lambda ((g$x$17960) (if (equal? (g$stx->datum$14535 g$x$17960) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$17954)))) '#f))) ((case-lambda ((g$x$17962) (list g$x$17962))) (g$syntax-car$14509 g$x$17954)))) '#f))) (g$syntax-cdr$14513 g$x$17948)))) '#f))) ((case-lambda ((g$x$17964) (list g$x$17964))) (g$syntax-car$14509 g$x$17948)))) '#f))) g$t$17888)))) g$x$17886)))) ((case-lambda ((g$t$17966) ((case-lambda ((g$ls/false$17968) (if (if g$ls/false$17968 (begin '#f (apply (case-lambda ((g$binding*$17970 g$test$17971 g$expr*$17972 g$command*$17973) '#t)) g$ls/false$17968)) '#f) (apply (case-lambda ((g$binding*$17978 g$test$17979 g$expr*$17980 g$command*$17981) ((case-lambda ((g$t$17986) ((case-lambda ((g$ls/false$17988) (if (if g$ls/false$17988 (begin '#f (apply (case-lambda ((g$x*$17990 g$init*$17991 g$step*$17992) '#t)) g$ls/false$17988)) '#f) (apply (case-lambda ((g$x*$17996 g$init*$17997 g$step*$17998) (if (g$valid-bound-ids?$14525 g$x*$17996) (g$bless$14978 (list 'letrec (list (list 'loop (list 'lambda g$x*$17996 (list 'if g$test$17979 (cons 'begin (cons '(if #f #f) g$expr*$17980)) (cons 'begin (append g$command*$17981 (list (cons 'loop g$step*$17998)))))))) (cons 'loop g$init*$17997))) (error 'expander '"invalid bindings" (g$strip$14533 g$stx$17882 '()))))) g$ls/false$17988) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17986 '()))))) ((letrec ((g$f$18002 (case-lambda ((g$x$18004) (if (g$syntax-pair?$14501 g$x$18004) ((case-lambda ((g$cars/f$18006) (if g$cars/f$18006 (begin '#f ((case-lambda ((g$cdrs/f$18008) (if g$cdrs/f$18008 (begin '#f (map cons g$cars/f$18006 g$cdrs/f$18008)) '#f))) (g$f$18002 (g$syntax-cdr$14513 g$x$18004)))) '#f))) ((case-lambda ((g$x$18010) (if (g$syntax-pair?$14501 g$x$18010) (begin '#f ((case-lambda ((g$q$18012) (if g$q$18012 (begin '#f ((case-lambda ((g$r$18014) (if g$r$18014 (begin '#f (append g$q$18012 g$r$18014)) '#f))) ((case-lambda ((g$x$18016) (if (g$syntax-pair?$14501 g$x$18016) (begin '#f ((case-lambda ((g$q$18018) (if g$q$18018 (begin '#f ((case-lambda ((g$r$18020) (if g$r$18020 (begin '#f (append g$q$18018 g$r$18020)) '#f))) ((case-lambda ((g$x$18022) (if (g$syntax-pair?$14501 g$x$18022) (begin '#f ((case-lambda ((g$q$18024) (if g$q$18024 (begin '#f ((case-lambda ((g$r$18026) (if g$r$18026 (begin '#f (append g$q$18024 g$r$18026)) '#f))) ((case-lambda ((g$x$18028) (if (equal? (g$stx->datum$14535 g$x$18028) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18022)))) '#f))) ((case-lambda ((g$x$18030) (list g$x$18030))) (g$syntax-car$14509 g$x$18022)))) '#f))) (g$syntax-cdr$14513 g$x$18016)))) '#f))) ((case-lambda ((g$x$18032) (list g$x$18032))) (g$syntax-car$14509 g$x$18016)))) '#f))) (g$syntax-cdr$14513 g$x$18010)))) '#f))) ((case-lambda ((g$x$18034) (list g$x$18034))) (g$syntax-car$14509 g$x$18010)))) '#f))) (g$syntax-car$14509 g$x$18004))) (if (g$syntax-null?$14505 g$x$18004) (list (begin 'x* '()) (begin 'init* '()) (begin 'step* '())) '#f)))))) g$f$18002) g$t$17986)))) (map g$bind$17884 g$binding*$17978)))) g$ls/false$17968) (error 'expander '"invalid syntax" (g$strip$14533 g$t$17966 '()))))) ((case-lambda ((g$x$18036) (if (g$syntax-pair?$14501 g$x$18036) (begin '#f ((case-lambda ((g$q$18038) (if g$q$18038 (begin '#f ((case-lambda ((g$r$18040) (if g$r$18040 (begin '#f (append g$q$18038 g$r$18040)) '#f))) ((case-lambda ((g$x$18042) (if (g$syntax-pair?$14501 g$x$18042) (begin '#f ((case-lambda ((g$q$18044) (if g$q$18044 (begin '#f ((case-lambda ((g$r$18046) (if g$r$18046 (begin '#f (append g$q$18044 g$r$18046)) '#f))) ((case-lambda ((g$x$18048) (if (g$syntax-pair?$14501 g$x$18048) (begin '#f ((case-lambda ((g$q$18050) (if g$q$18050 (begin '#f ((case-lambda ((g$r$18052) (if g$r$18052 (begin '#f (append g$q$18050 g$r$18052)) '#f))) ((letrec ((g$f$18054 (case-lambda ((g$x$18056) (if (g$syntax-pair?$14501 g$x$18056) ((case-lambda ((g$cars/f$18058) (if g$cars/f$18058 (begin '#f ((case-lambda ((g$cdrs/f$18060) (if g$cdrs/f$18060 (begin '#f (map cons g$cars/f$18058 g$cdrs/f$18060)) '#f))) (g$f$18054 (g$syntax-cdr$14513 g$x$18056)))) '#f))) ((case-lambda ((g$x$18062) (list g$x$18062))) (g$syntax-car$14509 g$x$18056))) (if (g$syntax-null?$14505 g$x$18056) (list (begin 'command* '())) '#f)))))) g$f$18054) (g$syntax-cdr$14513 g$x$18048)))) '#f))) ((case-lambda ((g$x$18064) (if (g$syntax-pair?$14501 g$x$18064) (begin '#f ((case-lambda ((g$q$18066) (if g$q$18066 (begin '#f ((case-lambda ((g$r$18068) (if g$r$18068 (begin '#f (append g$q$18066 g$r$18068)) '#f))) ((letrec ((g$f$18070 (case-lambda ((g$x$18072) (if (g$syntax-pair?$14501 g$x$18072) ((case-lambda ((g$cars/f$18074) (if g$cars/f$18074 (begin '#f ((case-lambda ((g$cdrs/f$18076) (if g$cdrs/f$18076 (begin '#f (map cons g$cars/f$18074 g$cdrs/f$18076)) '#f))) (g$f$18070 (g$syntax-cdr$14513 g$x$18072)))) '#f))) ((case-lambda ((g$x$18078) (list g$x$18078))) (g$syntax-car$14509 g$x$18072))) (if (g$syntax-null?$14505 g$x$18072) (list (begin 'expr* '())) '#f)))))) g$f$18070) (g$syntax-cdr$14513 g$x$18064)))) '#f))) ((case-lambda ((g$x$18080) (list g$x$18080))) (g$syntax-car$14509 g$x$18064)))) '#f))) (g$syntax-car$14509 g$x$18048)))) '#f))) (g$syntax-cdr$14513 g$x$18042)))) '#f))) ((letrec ((g$f$18082 (case-lambda ((g$x$18084) (if (g$syntax-pair?$14501 g$x$18084) ((case-lambda ((g$cars/f$18086) (if g$cars/f$18086 (begin '#f ((case-lambda ((g$cdrs/f$18088) (if g$cdrs/f$18088 (begin '#f (map cons g$cars/f$18086 g$cdrs/f$18088)) '#f))) (g$f$18082 (g$syntax-cdr$14513 g$x$18084)))) '#f))) ((case-lambda ((g$x$18090) (list g$x$18090))) (g$syntax-car$14509 g$x$18084))) (if (g$syntax-null?$14505 g$x$18084) (list (begin 'binding* '())) '#f)))))) g$f$18082) (g$syntax-car$14509 g$x$18042)))) '#f))) (g$syntax-cdr$14513 g$x$18036)))) '#f))) ((case-lambda ((g$x$18092) '())) (g$syntax-car$14509 g$x$18036)))) '#f))) g$t$17966)))) g$stx$17882)))) '#f)))) (set! g$let*-macro$15004 (case-lambda ((g$stx$18094) ((case-lambda ((g$t$18096) ((case-lambda ((g$ls/false$18098) (if (if g$ls/false$18098 (begin '#f (apply (case-lambda ((g$lhs*$18100 g$rhs*$18101 g$b$18102 g$b*$18103) (for-all g$id?$14515 g$lhs*$18100))) g$ls/false$18098)) '#f) (apply (case-lambda ((g$lhs*$18108 g$rhs*$18109 g$b$18110 g$b*$18111) (g$bless$14978 (letrec ((g$f$18116 (case-lambda ((g$x*$18118) (if (null? g$x*$18118) (cons 'let (cons '() (cons g$b$18110 g$b*$18111))) (list 'let (list (car g$x*$18118)) (g$f$18116 (cdr g$x*$18118)))))))) (g$f$18116 (map list g$lhs*$18108 g$rhs*$18109)))))) g$ls/false$18098) (error 'expander '"invalid syntax" (g$strip$14533 g$t$18096 '()))))) ((case-lambda ((g$x$18120) (if (g$syntax-pair?$14501 g$x$18120) (begin '#f ((case-lambda ((g$q$18122) (if g$q$18122 (begin '#f ((case-lambda ((g$r$18124) (if g$r$18124 (begin '#f (append g$q$18122 g$r$18124)) '#f))) ((case-lambda ((g$x$18126) (if (g$syntax-pair?$14501 g$x$18126) (begin '#f ((case-lambda ((g$q$18128) (if g$q$18128 (begin '#f ((case-lambda ((g$r$18130) (if g$r$18130 (begin '#f (append g$q$18128 g$r$18130)) '#f))) ((case-lambda ((g$x$18132) (if (g$syntax-pair?$14501 g$x$18132) (begin '#f ((case-lambda ((g$q$18134) (if g$q$18134 (begin '#f ((case-lambda ((g$r$18136) (if g$r$18136 (begin '#f (append g$q$18134 g$r$18136)) '#f))) ((letrec ((g$f$18138 (case-lambda ((g$x$18140) (if (g$syntax-pair?$14501 g$x$18140) ((case-lambda ((g$cars/f$18142) (if g$cars/f$18142 (begin '#f ((case-lambda ((g$cdrs/f$18144) (if g$cdrs/f$18144 (begin '#f (map cons g$cars/f$18142 g$cdrs/f$18144)) '#f))) (g$f$18138 (g$syntax-cdr$14513 g$x$18140)))) '#f))) ((case-lambda ((g$x$18146) (list g$x$18146))) (g$syntax-car$14509 g$x$18140))) (if (g$syntax-null?$14505 g$x$18140) (list (begin 'b* '())) '#f)))))) g$f$18138) (g$syntax-cdr$14513 g$x$18132)))) '#f))) ((case-lambda ((g$x$18148) (list g$x$18148))) (g$syntax-car$14509 g$x$18132)))) '#f))) (g$syntax-cdr$14513 g$x$18126)))) '#f))) ((letrec ((g$f$18150 (case-lambda ((g$x$18152) (if (g$syntax-pair?$14501 g$x$18152) ((case-lambda ((g$cars/f$18154) (if g$cars/f$18154 (begin '#f ((case-lambda ((g$cdrs/f$18156) (if g$cdrs/f$18156 (begin '#f (map cons g$cars/f$18154 g$cdrs/f$18156)) '#f))) (g$f$18150 (g$syntax-cdr$14513 g$x$18152)))) '#f))) ((case-lambda ((g$x$18158) (if (g$syntax-pair?$14501 g$x$18158) (begin '#f ((case-lambda ((g$q$18160) (if g$q$18160 (begin '#f ((case-lambda ((g$r$18162) (if g$r$18162 (begin '#f (append g$q$18160 g$r$18162)) '#f))) ((case-lambda ((g$x$18164) (if (g$syntax-pair?$14501 g$x$18164) (begin '#f ((case-lambda ((g$q$18166) (if g$q$18166 (begin '#f ((case-lambda ((g$r$18168) (if g$r$18168 (begin '#f (append g$q$18166 g$r$18168)) '#f))) ((case-lambda ((g$x$18170) (if (equal? (g$stx->datum$14535 g$x$18170) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18164)))) '#f))) ((case-lambda ((g$x$18172) (list g$x$18172))) (g$syntax-car$14509 g$x$18164)))) '#f))) (g$syntax-cdr$14513 g$x$18158)))) '#f))) ((case-lambda ((g$x$18174) (list g$x$18174))) (g$syntax-car$14509 g$x$18158)))) '#f))) (g$syntax-car$14509 g$x$18152))) (if (g$syntax-null?$14505 g$x$18152) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$18150) (g$syntax-car$14509 g$x$18126)))) '#f))) (g$syntax-cdr$14513 g$x$18120)))) '#f))) ((case-lambda ((g$x$18176) '())) (g$syntax-car$14509 g$x$18120)))) '#f))) g$t$18096)))) g$stx$18094)))) (set! g$or-macro$15006 (case-lambda ((g$stx$18178) ((case-lambda ((g$t$18180) ((case-lambda ((g$ls/false$18182) (if (if g$ls/false$18182 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$18182)) '#f) (apply (case-lambda (() '#f)) g$ls/false$18182) ((case-lambda ((g$t$18184) ((case-lambda ((g$ls/false$18186) (if (if g$ls/false$18186 (begin '#f (apply (case-lambda ((g$e$18188 g$e*$18189) '#t)) g$ls/false$18186)) '#f) (apply (case-lambda ((g$e$18192 g$e*$18193) (g$bless$14978 (letrec ((g$f$18196 (case-lambda ((g$e$18198 g$e*$18199) (if (null? g$e*$18199) (list 'begin '#f g$e$18198) (list 'let (list (list 't g$e$18198)) (list 'if 't 't (g$f$18196 (car g$e*$18199) (cdr g$e*$18199))))))))) (g$f$18196 g$e$18192 g$e*$18193))))) g$ls/false$18186) (error 'expander '"invalid syntax" (g$strip$14533 g$t$18184 '()))))) ((case-lambda ((g$x$18202) (if (g$syntax-pair?$14501 g$x$18202) (begin '#f ((case-lambda ((g$q$18204) (if g$q$18204 (begin '#f ((case-lambda ((g$r$18206) (if g$r$18206 (begin '#f (append g$q$18204 g$r$18206)) '#f))) ((case-lambda ((g$x$18208) (if (g$syntax-pair?$14501 g$x$18208) (begin '#f ((case-lambda ((g$q$18210) (if g$q$18210 (begin '#f ((case-lambda ((g$r$18212) (if g$r$18212 (begin '#f (append g$q$18210 g$r$18212)) '#f))) ((letrec ((g$f$18214 (case-lambda ((g$x$18216) (if (g$syntax-pair?$14501 g$x$18216) ((case-lambda ((g$cars/f$18218) (if g$cars/f$18218 (begin '#f ((case-lambda ((g$cdrs/f$18220) (if g$cdrs/f$18220 (begin '#f (map cons g$cars/f$18218 g$cdrs/f$18220)) '#f))) (g$f$18214 (g$syntax-cdr$14513 g$x$18216)))) '#f))) ((case-lambda ((g$x$18222) (list g$x$18222))) (g$syntax-car$14509 g$x$18216))) (if (g$syntax-null?$14505 g$x$18216) (list (begin 'e* '())) '#f)))))) g$f$18214) (g$syntax-cdr$14513 g$x$18208)))) '#f))) ((case-lambda ((g$x$18224) (list g$x$18224))) (g$syntax-car$14509 g$x$18208)))) '#f))) (g$syntax-cdr$14513 g$x$18202)))) '#f))) ((case-lambda ((g$x$18226) '())) (g$syntax-car$14509 g$x$18202)))) '#f))) g$t$18184)))) g$t$18180)))) ((case-lambda ((g$x$18228) (if (g$syntax-pair?$14501 g$x$18228) (begin '#f ((case-lambda ((g$q$18230) (if g$q$18230 (begin '#f ((case-lambda ((g$r$18232) (if g$r$18232 (begin '#f (append g$q$18230 g$r$18232)) '#f))) ((case-lambda ((g$x$18234) (if (equal? (g$stx->datum$14535 g$x$18234) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18228)))) '#f))) ((case-lambda ((g$x$18236) '())) (g$syntax-car$14509 g$x$18228)))) '#f))) g$t$18180)))) g$stx$18178)))) (set! g$and-macro$15008 (case-lambda ((g$stx$18238) ((case-lambda ((g$t$18240) ((case-lambda ((g$ls/false$18242) (if (if g$ls/false$18242 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$18242)) '#f) (apply (case-lambda (() '#t)) g$ls/false$18242) ((case-lambda ((g$t$18244) ((case-lambda ((g$ls/false$18246) (if (if g$ls/false$18246 (begin '#f (apply (case-lambda ((g$e$18248 g$e*$18249) '#t)) g$ls/false$18246)) '#f) (apply (case-lambda ((g$e$18252 g$e*$18253) (g$bless$14978 (letrec ((g$f$18256 (case-lambda ((g$e$18258 g$e*$18259) (if (null? g$e*$18259) (list 'begin '#f g$e$18258) (cons 'if (cons g$e$18258 (cons (g$f$18256 (car g$e*$18259) (cdr g$e*$18259)) '(#f))))))))) (g$f$18256 g$e$18252 g$e*$18253))))) g$ls/false$18246) (error 'expander '"invalid syntax" (g$strip$14533 g$t$18244 '()))))) ((case-lambda ((g$x$18262) (if (g$syntax-pair?$14501 g$x$18262) (begin '#f ((case-lambda ((g$q$18264) (if g$q$18264 (begin '#f ((case-lambda ((g$r$18266) (if g$r$18266 (begin '#f (append g$q$18264 g$r$18266)) '#f))) ((case-lambda ((g$x$18268) (if (g$syntax-pair?$14501 g$x$18268) (begin '#f ((case-lambda ((g$q$18270) (if g$q$18270 (begin '#f ((case-lambda ((g$r$18272) (if g$r$18272 (begin '#f (append g$q$18270 g$r$18272)) '#f))) ((letrec ((g$f$18274 (case-lambda ((g$x$18276) (if (g$syntax-pair?$14501 g$x$18276) ((case-lambda ((g$cars/f$18278) (if g$cars/f$18278 (begin '#f ((case-lambda ((g$cdrs/f$18280) (if g$cdrs/f$18280 (begin '#f (map cons g$cars/f$18278 g$cdrs/f$18280)) '#f))) (g$f$18274 (g$syntax-cdr$14513 g$x$18276)))) '#f))) ((case-lambda ((g$x$18282) (list g$x$18282))) (g$syntax-car$14509 g$x$18276))) (if (g$syntax-null?$14505 g$x$18276) (list (begin 'e* '())) '#f)))))) g$f$18274) (g$syntax-cdr$14513 g$x$18268)))) '#f))) ((case-lambda ((g$x$18284) (list g$x$18284))) (g$syntax-car$14509 g$x$18268)))) '#f))) (g$syntax-cdr$14513 g$x$18262)))) '#f))) ((case-lambda ((g$x$18286) '())) (g$syntax-car$14509 g$x$18262)))) '#f))) g$t$18244)))) g$t$18240)))) ((case-lambda ((g$x$18288) (if (g$syntax-pair?$14501 g$x$18288) (begin '#f ((case-lambda ((g$q$18290) (if g$q$18290 (begin '#f ((case-lambda ((g$r$18292) (if g$r$18292 (begin '#f (append g$q$18290 g$r$18292)) '#f))) ((case-lambda ((g$x$18294) (if (equal? (g$stx->datum$14535 g$x$18294) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18288)))) '#f))) ((case-lambda ((g$x$18296) '())) (g$syntax-car$14509 g$x$18288)))) '#f))) g$t$18240)))) g$stx$18238)))) (set! g$cond-macro$15010 (case-lambda ((g$stx$18298) ((case-lambda ((g$t$18300) ((case-lambda ((g$ls/false$18302) (if (if g$ls/false$18302 (begin '#f (apply (case-lambda ((g$cls$18304 g$cls*$18305) '#t)) g$ls/false$18302)) '#f) (apply (case-lambda ((g$cls$18308 g$cls*$18309) (g$bless$14978 (letrec ((g$f$18312 (case-lambda ((g$cls$18314 g$cls*$18315) (if (null? g$cls*$18315) ((case-lambda ((g$t$18318) ((case-lambda ((g$ls/false$18320) (if (if g$ls/false$18320 (begin '#f (apply (case-lambda ((g$e$18322 g$e*$18323) '#t)) g$ls/false$18320)) '#f) (apply (case-lambda ((g$e$18326 g$e*$18327) (cons 'begin (cons g$e$18326 g$e*$18327)))) g$ls/false$18320) ((case-lambda ((g$t$18330) ((case-lambda ((g$ls/false$18332) (if (if g$ls/false$18332 (begin '#f (apply (case-lambda ((g$e$18334 g$p$18335) '#t)) g$ls/false$18332)) '#f) (apply (case-lambda ((g$e$18338 g$p$18339) (list 'let (list (list 't g$e$18338)) (list 'if 't (cons g$p$18339 '(t)))))) g$ls/false$18332) ((case-lambda ((g$t$18342) ((case-lambda ((g$ls/false$18344) (if (if g$ls/false$18344 (begin '#f (apply (case-lambda ((g$e$18346) '#t)) g$ls/false$18344)) '#f) (apply (case-lambda ((g$e$18348) (cons 'or (cons g$e$18348 '((if #f #f)))))) g$ls/false$18344) ((case-lambda ((g$t$18350) ((case-lambda ((g$ls/false$18352) (if (if g$ls/false$18352 (begin '#f (apply (case-lambda ((g$e$18354 g$e*$18355) '#t)) g$ls/false$18352)) '#f) (apply (case-lambda ((g$e$18358 g$e*$18359) (list 'if g$e$18358 (cons 'begin g$e*$18359)))) g$ls/false$18352) ((case-lambda ((g$t$18362) ((case-lambda ((g$ls/false$18364) (if (if g$ls/false$18364 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$18364)) '#f) (apply (case-lambda (() (error 'expander '"invalid last clause" (g$strip$14533 g$stx$18298 '())))) g$ls/false$18364) (error 'expander '"invalid syntax" (g$strip$14533 g$t$18362 '()))))) ((case-lambda ((g$x$18366) '())) g$t$18362)))) g$t$18350)))) ((case-lambda ((g$x$18368) (if (g$syntax-pair?$14501 g$x$18368) (begin '#f ((case-lambda ((g$q$18370) (if g$q$18370 (begin '#f ((case-lambda ((g$r$18372) (if g$r$18372 (begin '#f (append g$q$18370 g$r$18372)) '#f))) ((letrec ((g$f$18374 (case-lambda ((g$x$18376) (if (g$syntax-pair?$14501 g$x$18376) ((case-lambda ((g$cars/f$18378) (if g$cars/f$18378 (begin '#f ((case-lambda ((g$cdrs/f$18380) (if g$cdrs/f$18380 (begin '#f (map cons g$cars/f$18378 g$cdrs/f$18380)) '#f))) (g$f$18374 (g$syntax-cdr$14513 g$x$18376)))) '#f))) ((case-lambda ((g$x$18382) (list g$x$18382))) (g$syntax-car$14509 g$x$18376))) (if (g$syntax-null?$14505 g$x$18376) (list (begin 'e* '())) '#f)))))) g$f$18374) (g$syntax-cdr$14513 g$x$18368)))) '#f))) ((case-lambda ((g$x$18384) (list g$x$18384))) (g$syntax-car$14509 g$x$18368)))) '#f))) g$t$18350)))) g$t$18342)))) ((case-lambda ((g$x$18386) (if (g$syntax-pair?$14501 g$x$18386) (begin '#f ((case-lambda ((g$q$18388) (if g$q$18388 (begin '#f ((case-lambda ((g$r$18390) (if g$r$18390 (begin '#f (append g$q$18388 g$r$18390)) '#f))) ((case-lambda ((g$x$18392) (if (equal? (g$stx->datum$14535 g$x$18392) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18386)))) '#f))) ((case-lambda ((g$x$18394) (list g$x$18394))) (g$syntax-car$14509 g$x$18386)))) '#f))) g$t$18342)))) g$t$18330)))) ((case-lambda ((g$x$18396) (if (g$syntax-pair?$14501 g$x$18396) (begin '#f ((case-lambda ((g$q$18398) (if g$q$18398 (begin '#f ((case-lambda ((g$r$18400) (if g$r$18400 (begin '#f (append g$q$18398 g$r$18400)) '#f))) ((case-lambda ((g$x$18402) (if (g$syntax-pair?$14501 g$x$18402) (begin '#f ((case-lambda ((g$q$18404) (if g$q$18404 (begin '#f ((case-lambda ((g$r$18406) (if g$r$18406 (begin '#f (append g$q$18404 g$r$18406)) '#f))) ((case-lambda ((g$x$18408) (if (g$syntax-pair?$14501 g$x$18408) (begin '#f ((case-lambda ((g$q$18410) (if g$q$18410 (begin '#f ((case-lambda ((g$r$18412) (if g$r$18412 (begin '#f (append g$q$18410 g$r$18412)) '#f))) ((case-lambda ((g$x$18414) (if (equal? (g$stx->datum$14535 g$x$18414) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18408)))) '#f))) ((case-lambda ((g$x$18416) (list g$x$18416))) (g$syntax-car$14509 g$x$18408)))) '#f))) (g$syntax-cdr$14513 g$x$18402)))) '#f))) ((case-lambda ((g$x$18418) (if (g$id?$14515 g$x$18418) (if (g$free-id=?$14523 g$x$18418 (g$scheme-stx$14944 '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$18402)))) '#f))) (g$syntax-cdr$14513 g$x$18396)))) '#f))) ((case-lambda ((g$x$18420) (list g$x$18420))) (g$syntax-car$14509 g$x$18396)))) '#f))) g$t$18330)))) g$t$18318)))) ((case-lambda ((g$x$18422) (if (g$syntax-pair?$14501 g$x$18422) (begin '#f ((case-lambda ((g$q$18424) (if g$q$18424 (begin '#f ((case-lambda ((g$r$18426) (if g$r$18426 (begin '#f (append g$q$18424 g$r$18426)) '#f))) ((case-lambda ((g$x$18428) (if (g$syntax-pair?$14501 g$x$18428) (begin '#f ((case-lambda ((g$q$18430) (if g$q$18430 (begin '#f ((case-lambda ((g$r$18432) (if g$r$18432 (begin '#f (append g$q$18430 g$r$18432)) '#f))) ((letrec ((g$f$18434 (case-lambda ((g$x$18436) (if (g$syntax-pair?$14501 g$x$18436) ((case-lambda ((g$cars/f$18438) (if g$cars/f$18438 (begin '#f ((case-lambda ((g$cdrs/f$18440) (if g$cdrs/f$18440 (begin '#f (map cons g$cars/f$18438 g$cdrs/f$18440)) '#f))) (g$f$18434 (g$syntax-cdr$14513 g$x$18436)))) '#f))) ((case-lambda ((g$x$18442) (list g$x$18442))) (g$syntax-car$14509 g$x$18436))) (if (g$syntax-null?$14505 g$x$18436) (list (begin 'e* '())) '#f)))))) g$f$18434) (g$syntax-cdr$14513 g$x$18428)))) '#f))) ((case-lambda ((g$x$18444) (list g$x$18444))) (g$syntax-car$14509 g$x$18428)))) '#f))) (g$syntax-cdr$14513 g$x$18422)))) '#f))) ((case-lambda ((g$x$18446) (if (g$id?$14515 g$x$18446) (if (g$free-id=?$14523 g$x$18446 (g$scheme-stx$14944 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$18422)))) '#f))) g$t$18318)))) g$cls$18314) ((case-lambda ((g$t$18448) ((case-lambda ((g$ls/false$18450) (if (if g$ls/false$18450 (begin '#f (apply (case-lambda ((g$e$18452 g$e*$18453) '#t)) g$ls/false$18450)) '#f) (apply (case-lambda ((g$e$18456 g$e*$18457) (error 'expander '"incorrect position of keyword else" (g$strip$14533 g$stx$18298 '())))) g$ls/false$18450) ((case-lambda ((g$t$18460) ((case-lambda ((g$ls/false$18462) (if (if g$ls/false$18462 (begin '#f (apply (case-lambda ((g$e$18464 g$p$18465) '#t)) g$ls/false$18462)) '#f) (apply (case-lambda ((g$e$18468 g$p$18469) (list 'let (list (list 't g$e$18468)) (list 'if 't (cons g$p$18469 '(t)) (g$f$18312 (car g$cls*$18315) (cdr g$cls*$18315)))))) g$ls/false$18462) ((case-lambda ((g$t$18472) ((case-lambda ((g$ls/false$18474) (if (if g$ls/false$18474 (begin '#f (apply (case-lambda ((g$e$18476) '#t)) g$ls/false$18474)) '#f) (apply (case-lambda ((g$e$18478) (list 'or g$e$18478 (g$f$18312 (car g$cls*$18315) (cdr g$cls*$18315))))) g$ls/false$18474) ((case-lambda ((g$t$18480) ((case-lambda ((g$ls/false$18482) (if (if g$ls/false$18482 (begin '#f (apply (case-lambda ((g$e$18484 g$e*$18485) '#t)) g$ls/false$18482)) '#f) (apply (case-lambda ((g$e$18488 g$e*$18489) (list 'if g$e$18488 (cons 'begin g$e*$18489) (g$f$18312 (car g$cls*$18315) (cdr g$cls*$18315))))) g$ls/false$18482) ((case-lambda ((g$t$18492) ((case-lambda ((g$ls/false$18494) (if (if g$ls/false$18494 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$18494)) '#f) (apply (case-lambda (() (error 'expander '"invalid last clause" (g$strip$14533 g$stx$18298 '())))) g$ls/false$18494) (error 'expander '"invalid syntax" (g$strip$14533 g$t$18492 '()))))) ((case-lambda ((g$x$18496) '())) g$t$18492)))) g$t$18480)))) ((case-lambda ((g$x$18498) (if (g$syntax-pair?$14501 g$x$18498) (begin '#f ((case-lambda ((g$q$18500) (if g$q$18500 (begin '#f ((case-lambda ((g$r$18502) (if g$r$18502 (begin '#f (append g$q$18500 g$r$18502)) '#f))) ((letrec ((g$f$18504 (case-lambda ((g$x$18506) (if (g$syntax-pair?$14501 g$x$18506) ((case-lambda ((g$cars/f$18508) (if g$cars/f$18508 (begin '#f ((case-lambda ((g$cdrs/f$18510) (if g$cdrs/f$18510 (begin '#f (map cons g$cars/f$18508 g$cdrs/f$18510)) '#f))) (g$f$18504 (g$syntax-cdr$14513 g$x$18506)))) '#f))) ((case-lambda ((g$x$18512) (list g$x$18512))) (g$syntax-car$14509 g$x$18506))) (if (g$syntax-null?$14505 g$x$18506) (list (begin 'e* '())) '#f)))))) g$f$18504) (g$syntax-cdr$14513 g$x$18498)))) '#f))) ((case-lambda ((g$x$18514) (list g$x$18514))) (g$syntax-car$14509 g$x$18498)))) '#f))) g$t$18480)))) g$t$18472)))) ((case-lambda ((g$x$18516) (if (g$syntax-pair?$14501 g$x$18516) (begin '#f ((case-lambda ((g$q$18518) (if g$q$18518 (begin '#f ((case-lambda ((g$r$18520) (if g$r$18520 (begin '#f (append g$q$18518 g$r$18520)) '#f))) ((case-lambda ((g$x$18522) (if (equal? (g$stx->datum$14535 g$x$18522) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18516)))) '#f))) ((case-lambda ((g$x$18524) (list g$x$18524))) (g$syntax-car$14509 g$x$18516)))) '#f))) g$t$18472)))) g$t$18460)))) ((case-lambda ((g$x$18526) (if (g$syntax-pair?$14501 g$x$18526) (begin '#f ((case-lambda ((g$q$18528) (if g$q$18528 (begin '#f ((case-lambda ((g$r$18530) (if g$r$18530 (begin '#f (append g$q$18528 g$r$18530)) '#f))) ((case-lambda ((g$x$18532) (if (g$syntax-pair?$14501 g$x$18532) (begin '#f ((case-lambda ((g$q$18534) (if g$q$18534 (begin '#f ((case-lambda ((g$r$18536) (if g$r$18536 (begin '#f (append g$q$18534 g$r$18536)) '#f))) ((case-lambda ((g$x$18538) (if (g$syntax-pair?$14501 g$x$18538) (begin '#f ((case-lambda ((g$q$18540) (if g$q$18540 (begin '#f ((case-lambda ((g$r$18542) (if g$r$18542 (begin '#f (append g$q$18540 g$r$18542)) '#f))) ((case-lambda ((g$x$18544) (if (equal? (g$stx->datum$14535 g$x$18544) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18538)))) '#f))) ((case-lambda ((g$x$18546) (list g$x$18546))) (g$syntax-car$14509 g$x$18538)))) '#f))) (g$syntax-cdr$14513 g$x$18532)))) '#f))) ((case-lambda ((g$x$18548) (if (g$id?$14515 g$x$18548) (if (g$free-id=?$14523 g$x$18548 (g$scheme-stx$14944 '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$18532)))) '#f))) (g$syntax-cdr$14513 g$x$18526)))) '#f))) ((case-lambda ((g$x$18550) (list g$x$18550))) (g$syntax-car$14509 g$x$18526)))) '#f))) g$t$18460)))) g$t$18448)))) ((case-lambda ((g$x$18552) (if (g$syntax-pair?$14501 g$x$18552) (begin '#f ((case-lambda ((g$q$18554) (if g$q$18554 (begin '#f ((case-lambda ((g$r$18556) (if g$r$18556 (begin '#f (append g$q$18554 g$r$18556)) '#f))) ((case-lambda ((g$x$18558) (if (g$syntax-pair?$14501 g$x$18558) (begin '#f ((case-lambda ((g$q$18560) (if g$q$18560 (begin '#f ((case-lambda ((g$r$18562) (if g$r$18562 (begin '#f (append g$q$18560 g$r$18562)) '#f))) ((letrec ((g$f$18564 (case-lambda ((g$x$18566) (if (g$syntax-pair?$14501 g$x$18566) ((case-lambda ((g$cars/f$18568) (if g$cars/f$18568 (begin '#f ((case-lambda ((g$cdrs/f$18570) (if g$cdrs/f$18570 (begin '#f (map cons g$cars/f$18568 g$cdrs/f$18570)) '#f))) (g$f$18564 (g$syntax-cdr$14513 g$x$18566)))) '#f))) ((case-lambda ((g$x$18572) (list g$x$18572))) (g$syntax-car$14509 g$x$18566))) (if (g$syntax-null?$14505 g$x$18566) (list (begin 'e* '())) '#f)))))) g$f$18564) (g$syntax-cdr$14513 g$x$18558)))) '#f))) ((case-lambda ((g$x$18574) (list g$x$18574))) (g$syntax-car$14509 g$x$18558)))) '#f))) (g$syntax-cdr$14513 g$x$18552)))) '#f))) ((case-lambda ((g$x$18576) (if (g$id?$14515 g$x$18576) (if (g$free-id=?$14523 g$x$18576 (g$scheme-stx$14944 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$18552)))) '#f))) g$t$18448)))) g$cls$18314)))))) (g$f$18312 g$cls$18308 g$cls*$18309))))) g$ls/false$18302) (error 'expander '"invalid syntax" (g$strip$14533 g$t$18300 '()))))) ((case-lambda ((g$x$18578) (if (g$syntax-pair?$14501 g$x$18578) (begin '#f ((case-lambda ((g$q$18580) (if g$q$18580 (begin '#f ((case-lambda ((g$r$18582) (if g$r$18582 (begin '#f (append g$q$18580 g$r$18582)) '#f))) ((case-lambda ((g$x$18584) (if (g$syntax-pair?$14501 g$x$18584) (begin '#f ((case-lambda ((g$q$18586) (if g$q$18586 (begin '#f ((case-lambda ((g$r$18588) (if g$r$18588 (begin '#f (append g$q$18586 g$r$18588)) '#f))) ((letrec ((g$f$18590 (case-lambda ((g$x$18592) (if (g$syntax-pair?$14501 g$x$18592) ((case-lambda ((g$cars/f$18594) (if g$cars/f$18594 (begin '#f ((case-lambda ((g$cdrs/f$18596) (if g$cdrs/f$18596 (begin '#f (map cons g$cars/f$18594 g$cdrs/f$18596)) '#f))) (g$f$18590 (g$syntax-cdr$14513 g$x$18592)))) '#f))) ((case-lambda ((g$x$18598) (list g$x$18598))) (g$syntax-car$14509 g$x$18592))) (if (g$syntax-null?$14505 g$x$18592) (list (begin 'cls* '())) '#f)))))) g$f$18590) (g$syntax-cdr$14513 g$x$18584)))) '#f))) ((case-lambda ((g$x$18600) (list g$x$18600))) (g$syntax-car$14509 g$x$18584)))) '#f))) (g$syntax-cdr$14513 g$x$18578)))) '#f))) ((case-lambda ((g$x$18602) '())) (g$syntax-car$14509 g$x$18578)))) '#f))) g$t$18300)))) g$stx$18298)))) (set! g$include-macro$15012 (case-lambda ((g$e$18604) ((case-lambda ((g$t$18606) ((case-lambda ((g$ls/false$18608) (if (if g$ls/false$18608 (begin '#f (apply (case-lambda ((g$id$18610 g$filename$18611) '#t)) g$ls/false$18608)) '#f) (apply (case-lambda ((g$id$18614 g$filename$18615) ((case-lambda ((g$filename$18618) (begin (if (string? g$filename$18618) (void) (error 'expander '"invalid syntax" (g$stx->datum$14535 g$e$18604))) (with-input-from-file g$filename$18618 (case-lambda (() (letrec ((g$f$18620 (case-lambda ((g$ls$18622) ((case-lambda ((g$x$18624) (if (eof-object? g$x$18624) (cons (g$bless$14978 'begin) (g$datum->stx$14481 g$id$18614 (reverse g$ls$18622))) (g$f$18620 (cons g$x$18624 g$ls$18622))))) (read)))))) (g$f$18620 '())))))))) (g$stx->datum$14535 g$filename$18615)))) g$ls/false$18608) (error 'expander '"invalid syntax" (g$strip$14533 g$t$18606 '()))))) ((case-lambda ((g$x$18626) (if (g$syntax-pair?$14501 g$x$18626) (begin '#f ((case-lambda ((g$q$18628) (if g$q$18628 (begin '#f ((case-lambda ((g$r$18630) (if g$r$18630 (begin '#f (append g$q$18628 g$r$18630)) '#f))) ((case-lambda ((g$x$18632) (if (g$syntax-pair?$14501 g$x$18632) (begin '#f ((case-lambda ((g$q$18634) (if g$q$18634 (begin '#f ((case-lambda ((g$r$18636) (if g$r$18636 (begin '#f (append g$q$18634 g$r$18636)) '#f))) ((case-lambda ((g$x$18638) (if (equal? (g$stx->datum$14535 g$x$18638) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18632)))) '#f))) ((case-lambda ((g$x$18640) (list g$x$18640))) (g$syntax-car$14509 g$x$18632)))) '#f))) (g$syntax-cdr$14513 g$x$18626)))) '#f))) ((case-lambda ((g$x$18642) (list g$x$18642))) (g$syntax-car$14509 g$x$18626)))) '#f))) g$t$18606)))) g$e$18604)))) (set! g$syntax-rules-macro$15014 (case-lambda ((g$e$18644) ((case-lambda ((g$t$18646) ((case-lambda ((g$ls/false$18648) (if (if g$ls/false$18648 (begin '#f (apply (case-lambda ((g$lits$18650 g$pat*$18651 g$tmp*$18652) '#t)) g$ls/false$18648)) '#f) (apply (case-lambda ((g$lits$18656 g$pat*$18657 g$tmp*$18658) (begin (if (for-all (case-lambda ((g$x$18662) (if (g$id?$14515 g$x$18662) (if (not (g$free-id=?$14523 g$x$18662 (g$scheme-stx$14944 '...))) (begin '#f (not (g$free-id=?$14523 g$x$18662 (g$scheme-stx$14944 '_)))) '#f) '#f))) g$lits$18656) (void) (error 'expander '"invalid literals" (g$strip$14533 g$e$18644 '()))) (g$bless$14978 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g$lits$18656 (map (case-lambda ((g$pat$18664 g$tmp$18665) (list g$pat$18664 (list 'syntax g$tmp$18665)))) g$pat*$18657 g$tmp*$18658))))))))) g$ls/false$18648) (error 'expander '"invalid syntax" (g$strip$14533 g$t$18646 '()))))) ((case-lambda ((g$x$18668) (if (g$syntax-pair?$14501 g$x$18668) (begin '#f ((case-lambda ((g$q$18670) (if g$q$18670 (begin '#f ((case-lambda ((g$r$18672) (if g$r$18672 (begin '#f (append g$q$18670 g$r$18672)) '#f))) ((case-lambda ((g$x$18674) (if (g$syntax-pair?$14501 g$x$18674) (begin '#f ((case-lambda ((g$q$18676) (if g$q$18676 (begin '#f ((case-lambda ((g$r$18678) (if g$r$18678 (begin '#f (append g$q$18676 g$r$18678)) '#f))) ((letrec ((g$f$18680 (case-lambda ((g$x$18682) (if (g$syntax-pair?$14501 g$x$18682) ((case-lambda ((g$cars/f$18684) (if g$cars/f$18684 (begin '#f ((case-lambda ((g$cdrs/f$18686) (if g$cdrs/f$18686 (begin '#f (map cons g$cars/f$18684 g$cdrs/f$18686)) '#f))) (g$f$18680 (g$syntax-cdr$14513 g$x$18682)))) '#f))) ((case-lambda ((g$x$18688) (if (g$syntax-pair?$14501 g$x$18688) (begin '#f ((case-lambda ((g$q$18690) (if g$q$18690 (begin '#f ((case-lambda ((g$r$18692) (if g$r$18692 (begin '#f (append g$q$18690 g$r$18692)) '#f))) ((case-lambda ((g$x$18694) (if (g$syntax-pair?$14501 g$x$18694) (begin '#f ((case-lambda ((g$q$18696) (if g$q$18696 (begin '#f ((case-lambda ((g$r$18698) (if g$r$18698 (begin '#f (append g$q$18696 g$r$18698)) '#f))) ((case-lambda ((g$x$18700) (if (equal? (g$stx->datum$14535 g$x$18700) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18694)))) '#f))) ((case-lambda ((g$x$18702) (list g$x$18702))) (g$syntax-car$14509 g$x$18694)))) '#f))) (g$syntax-cdr$14513 g$x$18688)))) '#f))) ((case-lambda ((g$x$18704) (list g$x$18704))) (g$syntax-car$14509 g$x$18688)))) '#f))) (g$syntax-car$14509 g$x$18682))) (if (g$syntax-null?$14505 g$x$18682) (list (begin 'pat* '()) (begin 'tmp* '())) '#f)))))) g$f$18680) (g$syntax-cdr$14513 g$x$18674)))) '#f))) ((letrec ((g$f$18706 (case-lambda ((g$x$18708) (if (g$syntax-pair?$14501 g$x$18708) ((case-lambda ((g$cars/f$18710) (if g$cars/f$18710 (begin '#f ((case-lambda ((g$cdrs/f$18712) (if g$cdrs/f$18712 (begin '#f (map cons g$cars/f$18710 g$cdrs/f$18712)) '#f))) (g$f$18706 (g$syntax-cdr$14513 g$x$18708)))) '#f))) ((case-lambda ((g$x$18714) (list g$x$18714))) (g$syntax-car$14509 g$x$18708))) (if (g$syntax-null?$14505 g$x$18708) (list (begin 'lits '())) '#f)))))) g$f$18706) (g$syntax-car$14509 g$x$18674)))) '#f))) (g$syntax-cdr$14513 g$x$18668)))) '#f))) ((case-lambda ((g$x$18716) '())) (g$syntax-car$14509 g$x$18668)))) '#f))) g$t$18646)))) g$e$18644)))) (set! g$quasiquote-macro$15016 ((case-lambda (() ((case-lambda ((g$quasicons*$18753 g$quasicons$18755 g$quasiappend$18757 g$quasivector$18759 g$vquasi$18761 g$quasi$18763) (begin (set! g$quasicons*$18753 (case-lambda ((g$x$19375 g$y$19376) (letrec ((g$f$19379 (case-lambda ((g$x$19381) (if (null? g$x$19381) g$y$19376 (g$quasicons$18755 (car g$x$19381) (g$f$19379 (cdr g$x$19381)))))))) (g$f$19379 g$x$19375))))) (set! g$quasicons$18755 (case-lambda ((g$x$19269 g$y$19270) ((case-lambda ((g$t$19273) ((case-lambda ((g$ls/false$19275) (if (if g$ls/false$19275 (begin '#f (apply (case-lambda ((g$dy$19277) '#t)) g$ls/false$19275)) '#f) (apply (case-lambda ((g$dy$19279) ((case-lambda ((g$t$19281) ((case-lambda ((g$ls/false$19283) (if (if g$ls/false$19283 (begin '#f (apply (case-lambda ((g$dx$19285) '#t)) g$ls/false$19283)) '#f) (apply (case-lambda ((g$dx$19287) (list (g$scheme-stx$14944 'quote) (cons g$dx$19287 g$dy$19279)))) g$ls/false$19283) ((case-lambda ((g$t$19289) ((case-lambda ((g$ls/false$19291) (if (if g$ls/false$19291 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19291)) '#f) (apply (case-lambda (() ((case-lambda ((g$t$19293) ((case-lambda ((g$ls/false$19295) (if (if g$ls/false$19295 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19295)) '#f) (apply (case-lambda (() (list (g$scheme-stx$14944 'list) g$x$19269))) g$ls/false$19295) ((case-lambda ((g$t$19297) ((case-lambda ((g$ls/false$19299) (if (if g$ls/false$19299 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19299)) '#f) (apply (case-lambda (() (list (g$scheme-stx$14944 'cons) g$x$19269 g$y$19270))) g$ls/false$19299) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19297 '()))))) ((case-lambda ((g$x$19301) '())) g$t$19297)))) g$t$19293)))) ((case-lambda ((g$x$19303) (if (equal? (g$stx->datum$14535 g$x$19303) '()) (begin '#f '()) '#f))) g$t$19293)))) g$dy$19279))) g$ls/false$19291) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19289 '()))))) ((case-lambda ((g$x$19305) '())) g$t$19289)))) g$t$19281)))) ((case-lambda ((g$x$19307) (if (g$syntax-pair?$14501 g$x$19307) (begin '#f ((case-lambda ((g$q$19309) (if g$q$19309 (begin '#f ((case-lambda ((g$r$19311) (if g$r$19311 (begin '#f (append g$q$19309 g$r$19311)) '#f))) ((case-lambda ((g$x$19313) (if (g$syntax-pair?$14501 g$x$19313) (begin '#f ((case-lambda ((g$q$19315) (if g$q$19315 (begin '#f ((case-lambda ((g$r$19317) (if g$r$19317 (begin '#f (append g$q$19315 g$r$19317)) '#f))) ((case-lambda ((g$x$19319) (if (equal? (g$stx->datum$14535 g$x$19319) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19313)))) '#f))) ((case-lambda ((g$x$19321) (list g$x$19321))) (g$syntax-car$14509 g$x$19313)))) '#f))) (g$syntax-cdr$14513 g$x$19307)))) '#f))) ((case-lambda ((g$x$19323) (if (g$id?$14515 g$x$19323) (if (g$free-id=?$14523 g$x$19323 (g$scheme-stx$14944 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19307)))) '#f))) g$t$19281)))) g$x$19269))) g$ls/false$19275) ((case-lambda ((g$t$19325) ((case-lambda ((g$ls/false$19327) (if (if g$ls/false$19327 (begin '#f (apply (case-lambda ((g$stuff$19329) '#t)) g$ls/false$19327)) '#f) (apply (case-lambda ((g$stuff$19331) (cons* (g$scheme-stx$14944 'list) g$x$19269 g$stuff$19331))) g$ls/false$19327) ((case-lambda ((g$t$19333) ((case-lambda ((g$ls/false$19335) (if (if g$ls/false$19335 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19335)) '#f) (apply (case-lambda (() (list (g$scheme-stx$14944 'cons) g$x$19269 g$y$19270))) g$ls/false$19335) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19333 '()))))) ((case-lambda ((g$x$19337) '())) g$t$19333)))) g$t$19325)))) ((case-lambda ((g$x$19339) (if (g$syntax-pair?$14501 g$x$19339) (begin '#f ((case-lambda ((g$q$19341) (if g$q$19341 (begin '#f ((case-lambda ((g$r$19343) (if g$r$19343 (begin '#f (append g$q$19341 g$r$19343)) '#f))) ((letrec ((g$f$19345 (case-lambda ((g$x$19347) (if (g$syntax-pair?$14501 g$x$19347) ((case-lambda ((g$cars/f$19349) (if g$cars/f$19349 (begin '#f ((case-lambda ((g$cdrs/f$19351) (if g$cdrs/f$19351 (begin '#f (map cons g$cars/f$19349 g$cdrs/f$19351)) '#f))) (g$f$19345 (g$syntax-cdr$14513 g$x$19347)))) '#f))) ((case-lambda ((g$x$19353) (list g$x$19353))) (g$syntax-car$14509 g$x$19347))) (if (g$syntax-null?$14505 g$x$19347) (list (begin 'stuff '())) '#f)))))) g$f$19345) (g$syntax-cdr$14513 g$x$19339)))) '#f))) ((case-lambda ((g$x$19355) (if (g$id?$14515 g$x$19355) (if (g$free-id=?$14523 g$x$19355 (g$scheme-stx$14944 'list)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19339)))) '#f))) g$t$19325)))) g$t$19273)))) ((case-lambda ((g$x$19357) (if (g$syntax-pair?$14501 g$x$19357) (begin '#f ((case-lambda ((g$q$19359) (if g$q$19359 (begin '#f ((case-lambda ((g$r$19361) (if g$r$19361 (begin '#f (append g$q$19359 g$r$19361)) '#f))) ((case-lambda ((g$x$19363) (if (g$syntax-pair?$14501 g$x$19363) (begin '#f ((case-lambda ((g$q$19365) (if g$q$19365 (begin '#f ((case-lambda ((g$r$19367) (if g$r$19367 (begin '#f (append g$q$19365 g$r$19367)) '#f))) ((case-lambda ((g$x$19369) (if (equal? (g$stx->datum$14535 g$x$19369) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19363)))) '#f))) ((case-lambda ((g$x$19371) (list g$x$19371))) (g$syntax-car$14509 g$x$19363)))) '#f))) (g$syntax-cdr$14513 g$x$19357)))) '#f))) ((case-lambda ((g$x$19373) (if (g$id?$14515 g$x$19373) (if (g$free-id=?$14523 g$x$19373 (g$scheme-stx$14944 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19357)))) '#f))) g$t$19273)))) g$y$19270)))) (set! g$quasiappend$18757 (case-lambda ((g$x$19203 g$y$19204) ((case-lambda ((g$ls$19207) (if (null? g$ls$19207) (list (g$scheme-stx$14944 'quote) '()) (if (null? (cdr g$ls$19207)) (car g$ls$19207) (cons* (g$scheme-stx$14944 'append) g$ls$19207))))) (letrec ((g$f$19209 (case-lambda ((g$x$19211) (if (null? g$x$19211) ((case-lambda ((g$t$19213) ((case-lambda ((g$ls/false$19215) (if (if g$ls/false$19215 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19215)) '#f) (apply (case-lambda (() '())) g$ls/false$19215) ((case-lambda ((g$t$19217) ((case-lambda ((g$ls/false$19219) (if (if g$ls/false$19219 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19219)) '#f) (apply (case-lambda (() (list g$y$19204))) g$ls/false$19219) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19217 '()))))) ((case-lambda ((g$x$19221) '())) g$t$19217)))) g$t$19213)))) ((case-lambda ((g$x$19223) (if (g$syntax-pair?$14501 g$x$19223) (begin '#f ((case-lambda ((g$q$19225) (if g$q$19225 (begin '#f ((case-lambda ((g$r$19227) (if g$r$19227 (begin '#f (append g$q$19225 g$r$19227)) '#f))) ((case-lambda ((g$x$19229) (if (g$syntax-pair?$14501 g$x$19229) (begin '#f ((case-lambda ((g$q$19231) (if g$q$19231 (begin '#f ((case-lambda ((g$r$19233) (if g$r$19233 (begin '#f (append g$q$19231 g$r$19233)) '#f))) ((case-lambda ((g$x$19235) (if (equal? (g$stx->datum$14535 g$x$19235) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19229)))) '#f))) ((case-lambda ((g$x$19237) (if (equal? (g$stx->datum$14535 g$x$19237) '()) (begin '#f '()) '#f))) (g$syntax-car$14509 g$x$19229)))) '#f))) (g$syntax-cdr$14513 g$x$19223)))) '#f))) ((case-lambda ((g$x$19239) (if (g$id?$14515 g$x$19239) (if (g$free-id=?$14523 g$x$19239 (g$scheme-stx$14944 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19223)))) '#f))) g$t$19213)))) g$y$19204) ((case-lambda ((g$t$19241) ((case-lambda ((g$ls/false$19243) (if (if g$ls/false$19243 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19243)) '#f) (apply (case-lambda (() (g$f$19209 (cdr g$x$19211)))) g$ls/false$19243) ((case-lambda ((g$t$19245) ((case-lambda ((g$ls/false$19247) (if (if g$ls/false$19247 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19247)) '#f) (apply (case-lambda (() (cons (car g$x$19211) (g$f$19209 (cdr g$x$19211))))) g$ls/false$19247) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19245 '()))))) ((case-lambda ((g$x$19249) '())) g$t$19245)))) g$t$19241)))) ((case-lambda ((g$x$19251) (if (g$syntax-pair?$14501 g$x$19251) (begin '#f ((case-lambda ((g$q$19253) (if g$q$19253 (begin '#f ((case-lambda ((g$r$19255) (if g$r$19255 (begin '#f (append g$q$19253 g$r$19255)) '#f))) ((case-lambda ((g$x$19257) (if (g$syntax-pair?$14501 g$x$19257) (begin '#f ((case-lambda ((g$q$19259) (if g$q$19259 (begin '#f ((case-lambda ((g$r$19261) (if g$r$19261 (begin '#f (append g$q$19259 g$r$19261)) '#f))) ((case-lambda ((g$x$19263) (if (equal? (g$stx->datum$14535 g$x$19263) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19257)))) '#f))) ((case-lambda ((g$x$19265) (if (equal? (g$stx->datum$14535 g$x$19265) '()) (begin '#f '()) '#f))) (g$syntax-car$14509 g$x$19257)))) '#f))) (g$syntax-cdr$14513 g$x$19251)))) '#f))) ((case-lambda ((g$x$19267) (if (g$id?$14515 g$x$19267) (if (g$free-id=?$14523 g$x$19267 (g$scheme-stx$14944 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19251)))) '#f))) g$t$19241)))) (car g$x$19211))))))) (g$f$19209 g$x$19203)))))) (set! g$quasivector$18759 (case-lambda ((g$x$19043) ((case-lambda ((g$pat-x$19045) ((case-lambda ((g$t$19047) ((case-lambda ((g$ls/false$19049) (if (if g$ls/false$19049 (begin '#f (apply (case-lambda ((g$x*$19051) '#t)) g$ls/false$19049)) '#f) (apply (case-lambda ((g$x*$19053) (list (g$scheme-stx$14944 'quote) (list->vector g$x*$19053)))) g$ls/false$19049) ((case-lambda ((g$t$19055) ((case-lambda ((g$ls/false$19057) (if (if g$ls/false$19057 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19057)) '#f) (apply (case-lambda (() (letrec ((g$f$19059 (case-lambda ((g$x$19063 g$k$19064) ((case-lambda ((g$t$19067) ((case-lambda ((g$ls/false$19069) (if (if g$ls/false$19069 (begin '#f (apply (case-lambda ((g$x*$19071) '#t)) g$ls/false$19069)) '#f) (apply (case-lambda ((g$x*$19073) (g$k$19064 (map (case-lambda ((g$x$19075) (list (g$scheme-stx$14944 'quote) g$x$19075))) g$x*$19073)))) g$ls/false$19069) ((case-lambda ((g$t$19077) ((case-lambda ((g$ls/false$19079) (if (if g$ls/false$19079 (begin '#f (apply (case-lambda ((g$x*$19081) '#t)) g$ls/false$19079)) '#f) (apply (case-lambda ((g$x*$19083) (g$k$19064 g$x*$19083))) g$ls/false$19079) ((case-lambda ((g$t$19085) ((case-lambda ((g$ls/false$19087) (if (if g$ls/false$19087 (begin '#f (apply (case-lambda ((g$x$19089 g$y$19090) '#t)) g$ls/false$19087)) '#f) (apply (case-lambda ((g$x$19093 g$y$19094) (g$f$19059 g$y$19094 (case-lambda ((g$ls$19097) (g$k$19064 (cons g$x$19093 g$ls$19097))))))) g$ls/false$19087) ((case-lambda ((g$t$19099) ((case-lambda ((g$ls/false$19101) (if (if g$ls/false$19101 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19101)) '#f) (apply (case-lambda (() (list (g$scheme-stx$14944 'list->vector) g$pat-x$19045))) g$ls/false$19101) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19099 '()))))) ((case-lambda ((g$x$19103) '())) g$t$19099)))) g$t$19085)))) ((case-lambda ((g$x$19105) (if (g$syntax-pair?$14501 g$x$19105) (begin '#f ((case-lambda ((g$q$19107) (if g$q$19107 (begin '#f ((case-lambda ((g$r$19109) (if g$r$19109 (begin '#f (append g$q$19107 g$r$19109)) '#f))) ((case-lambda ((g$x$19111) (if (g$syntax-pair?$14501 g$x$19111) (begin '#f ((case-lambda ((g$q$19113) (if g$q$19113 (begin '#f ((case-lambda ((g$r$19115) (if g$r$19115 (begin '#f (append g$q$19113 g$r$19115)) '#f))) ((case-lambda ((g$x$19117) (if (g$syntax-pair?$14501 g$x$19117) (begin '#f ((case-lambda ((g$q$19119) (if g$q$19119 (begin '#f ((case-lambda ((g$r$19121) (if g$r$19121 (begin '#f (append g$q$19119 g$r$19121)) '#f))) ((case-lambda ((g$x$19123) (if (equal? (g$stx->datum$14535 g$x$19123) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19117)))) '#f))) ((case-lambda ((g$x$19125) (list g$x$19125))) (g$syntax-car$14509 g$x$19117)))) '#f))) (g$syntax-cdr$14513 g$x$19111)))) '#f))) ((case-lambda ((g$x$19127) (list g$x$19127))) (g$syntax-car$14509 g$x$19111)))) '#f))) (g$syntax-cdr$14513 g$x$19105)))) '#f))) ((case-lambda ((g$x$19129) (if (g$id?$14515 g$x$19129) (if (g$free-id=?$14523 g$x$19129 (g$scheme-stx$14944 'cons)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19105)))) '#f))) g$t$19085)))) g$t$19077)))) ((case-lambda ((g$x$19131) (if (g$syntax-pair?$14501 g$x$19131) (begin '#f ((case-lambda ((g$q$19133) (if g$q$19133 (begin '#f ((case-lambda ((g$r$19135) (if g$r$19135 (begin '#f (append g$q$19133 g$r$19135)) '#f))) ((letrec ((g$f$19137 (case-lambda ((g$x$19139) (if (g$syntax-pair?$14501 g$x$19139) ((case-lambda ((g$cars/f$19141) (if g$cars/f$19141 (begin '#f ((case-lambda ((g$cdrs/f$19143) (if g$cdrs/f$19143 (begin '#f (map cons g$cars/f$19141 g$cdrs/f$19143)) '#f))) (g$f$19137 (g$syntax-cdr$14513 g$x$19139)))) '#f))) ((case-lambda ((g$x$19145) (list g$x$19145))) (g$syntax-car$14509 g$x$19139))) (if (g$syntax-null?$14505 g$x$19139) (list (begin 'x* '())) '#f)))))) g$f$19137) (g$syntax-cdr$14513 g$x$19131)))) '#f))) ((case-lambda ((g$x$19147) (if (g$id?$14515 g$x$19147) (if (g$free-id=?$14523 g$x$19147 (g$scheme-stx$14944 'list)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19131)))) '#f))) g$t$19077)))) g$t$19067)))) ((case-lambda ((g$x$19149) (if (g$syntax-pair?$14501 g$x$19149) (begin '#f ((case-lambda ((g$q$19151) (if g$q$19151 (begin '#f ((case-lambda ((g$r$19153) (if g$r$19153 (begin '#f (append g$q$19151 g$r$19153)) '#f))) ((case-lambda ((g$x$19155) (if (g$syntax-pair?$14501 g$x$19155) (begin '#f ((case-lambda ((g$q$19157) (if g$q$19157 (begin '#f ((case-lambda ((g$r$19159) (if g$r$19159 (begin '#f (append g$q$19157 g$r$19159)) '#f))) ((case-lambda ((g$x$19161) (if (equal? (g$stx->datum$14535 g$x$19161) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19155)))) '#f))) ((letrec ((g$f$19163 (case-lambda ((g$x$19165) (if (g$syntax-pair?$14501 g$x$19165) ((case-lambda ((g$cars/f$19167) (if g$cars/f$19167 (begin '#f ((case-lambda ((g$cdrs/f$19169) (if g$cdrs/f$19169 (begin '#f (map cons g$cars/f$19167 g$cdrs/f$19169)) '#f))) (g$f$19163 (g$syntax-cdr$14513 g$x$19165)))) '#f))) ((case-lambda ((g$x$19171) (list g$x$19171))) (g$syntax-car$14509 g$x$19165))) (if (g$syntax-null?$14505 g$x$19165) (list (begin 'x* '())) '#f)))))) g$f$19163) (g$syntax-car$14509 g$x$19155)))) '#f))) (g$syntax-cdr$14513 g$x$19149)))) '#f))) ((case-lambda ((g$x$19173) (if (g$id?$14515 g$x$19173) (if (g$free-id=?$14523 g$x$19173 (g$scheme-stx$14944 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19149)))) '#f))) g$t$19067)))) g$x$19063))))) (g$f$19059 g$x$19043 (case-lambda ((g$ls$19061) (cons* (g$scheme-stx$14944 'vector) g$ls$19061))))))) g$ls/false$19057) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19055 '()))))) ((case-lambda ((g$x$19175) '())) g$t$19055)))) g$t$19047)))) ((case-lambda ((g$x$19177) (if (g$syntax-pair?$14501 g$x$19177) (begin '#f ((case-lambda ((g$q$19179) (if g$q$19179 (begin '#f ((case-lambda ((g$r$19181) (if g$r$19181 (begin '#f (append g$q$19179 g$r$19181)) '#f))) ((case-lambda ((g$x$19183) (if (g$syntax-pair?$14501 g$x$19183) (begin '#f ((case-lambda ((g$q$19185) (if g$q$19185 (begin '#f ((case-lambda ((g$r$19187) (if g$r$19187 (begin '#f (append g$q$19185 g$r$19187)) '#f))) ((case-lambda ((g$x$19189) (if (equal? (g$stx->datum$14535 g$x$19189) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19183)))) '#f))) ((letrec ((g$f$19191 (case-lambda ((g$x$19193) (if (g$syntax-pair?$14501 g$x$19193) ((case-lambda ((g$cars/f$19195) (if g$cars/f$19195 (begin '#f ((case-lambda ((g$cdrs/f$19197) (if g$cdrs/f$19197 (begin '#f (map cons g$cars/f$19195 g$cdrs/f$19197)) '#f))) (g$f$19191 (g$syntax-cdr$14513 g$x$19193)))) '#f))) ((case-lambda ((g$x$19199) (list g$x$19199))) (g$syntax-car$14509 g$x$19193))) (if (g$syntax-null?$14505 g$x$19193) (list (begin 'x* '())) '#f)))))) g$f$19191) (g$syntax-car$14509 g$x$19183)))) '#f))) (g$syntax-cdr$14513 g$x$19177)))) '#f))) ((case-lambda ((g$x$19201) (if (g$id?$14515 g$x$19201) (if (g$free-id=?$14523 g$x$19201 (g$scheme-stx$14944 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19177)))) '#f))) g$t$19047)))) g$pat-x$19045))) g$x$19043)))) (set! g$vquasi$18761 (case-lambda ((g$p$18949 g$lev$18950) ((case-lambda ((g$t$18953) ((case-lambda ((g$ls/false$18955) (if (if g$ls/false$18955 (begin '#f (apply (case-lambda ((g$p$18957 g$q$18958) '#t)) g$ls/false$18955)) '#f) (apply (case-lambda ((g$p$18961 g$q$18962) ((case-lambda ((g$t$18965) ((case-lambda ((g$ls/false$18967) (if (if g$ls/false$18967 (begin '#f (apply (case-lambda ((g$p$18969) '#t)) g$ls/false$18967)) '#f) (apply (case-lambda ((g$p$18971) (if (= g$lev$18950 '0) (g$quasicons*$18753 g$p$18971 (g$vquasi$18761 g$q$18962 g$lev$18950)) (g$quasicons$18755 (g$quasicons$18755 (list (g$scheme-stx$14944 'quote) 'unquote) (g$quasi$18763 g$p$18971 (- g$lev$18950 '1))) (g$vquasi$18761 g$q$18962 g$lev$18950))))) g$ls/false$18967) ((case-lambda ((g$t$18973) ((case-lambda ((g$ls/false$18975) (if (if g$ls/false$18975 (begin '#f (apply (case-lambda ((g$p$18977) '#t)) g$ls/false$18975)) '#f) (apply (case-lambda ((g$p$18979) (if (= g$lev$18950 '0) (g$quasiappend$18757 g$p$18979 (g$vquasi$18761 g$q$18962 g$lev$18950)) (g$quasicons$18755 (g$quasicons$18755 (list (g$scheme-stx$14944 'quote) 'unquote-splicing) (g$quasi$18763 g$p$18979 (- g$lev$18950 '1))) (g$vquasi$18761 g$q$18962 g$lev$18950))))) g$ls/false$18975) ((case-lambda ((g$t$18981) ((case-lambda ((g$ls/false$18983) (if (if g$ls/false$18983 (begin '#f (apply (case-lambda ((g$p$18985) '#t)) g$ls/false$18983)) '#f) (apply (case-lambda ((g$p$18987) (g$quasicons$18755 (g$quasi$18763 g$p$18987 g$lev$18950) (g$vquasi$18761 g$q$18962 g$lev$18950)))) g$ls/false$18983) (error 'expander '"invalid syntax" (g$strip$14533 g$t$18981 '()))))) ((case-lambda ((g$x$18989) (list g$x$18989))) g$t$18981)))) g$t$18973)))) ((case-lambda ((g$x$18991) (if (g$syntax-pair?$14501 g$x$18991) (begin '#f ((case-lambda ((g$q$18993) (if g$q$18993 (begin '#f ((case-lambda ((g$r$18995) (if g$r$18995 (begin '#f (append g$q$18993 g$r$18995)) '#f))) ((letrec ((g$f$18997 (case-lambda ((g$x$18999) (if (g$syntax-pair?$14501 g$x$18999) ((case-lambda ((g$cars/f$19001) (if g$cars/f$19001 (begin '#f ((case-lambda ((g$cdrs/f$19003) (if g$cdrs/f$19003 (begin '#f (map cons g$cars/f$19001 g$cdrs/f$19003)) '#f))) (g$f$18997 (g$syntax-cdr$14513 g$x$18999)))) '#f))) ((case-lambda ((g$x$19005) (list g$x$19005))) (g$syntax-car$14509 g$x$18999))) (if (g$syntax-null?$14505 g$x$18999) (list (begin 'p '())) '#f)))))) g$f$18997) (g$syntax-cdr$14513 g$x$18991)))) '#f))) ((case-lambda ((g$x$19007) (if (g$id?$14515 g$x$19007) (if (g$free-id=?$14523 g$x$19007 (g$scheme-stx$14944 'unquote-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$18991)))) '#f))) g$t$18973)))) g$t$18965)))) ((case-lambda ((g$x$19009) (if (g$syntax-pair?$14501 g$x$19009) (begin '#f ((case-lambda ((g$q$19011) (if g$q$19011 (begin '#f ((case-lambda ((g$r$19013) (if g$r$19013 (begin '#f (append g$q$19011 g$r$19013)) '#f))) ((letrec ((g$f$19015 (case-lambda ((g$x$19017) (if (g$syntax-pair?$14501 g$x$19017) ((case-lambda ((g$cars/f$19019) (if g$cars/f$19019 (begin '#f ((case-lambda ((g$cdrs/f$19021) (if g$cdrs/f$19021 (begin '#f (map cons g$cars/f$19019 g$cdrs/f$19021)) '#f))) (g$f$19015 (g$syntax-cdr$14513 g$x$19017)))) '#f))) ((case-lambda ((g$x$19023) (list g$x$19023))) (g$syntax-car$14509 g$x$19017))) (if (g$syntax-null?$14505 g$x$19017) (list (begin 'p '())) '#f)))))) g$f$19015) (g$syntax-cdr$14513 g$x$19009)))) '#f))) ((case-lambda ((g$x$19025) (if (g$id?$14515 g$x$19025) (if (g$free-id=?$14523 g$x$19025 (g$scheme-stx$14944 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19009)))) '#f))) g$t$18965)))) g$p$18961))) g$ls/false$18955) ((case-lambda ((g$t$19027) ((case-lambda ((g$ls/false$19029) (if (if g$ls/false$19029 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19029)) '#f) (apply (case-lambda (() (list (g$scheme-stx$14944 'quote) '()))) g$ls/false$19029) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19027 '()))))) ((case-lambda ((g$x$19031) (if (equal? (g$stx->datum$14535 g$x$19031) '()) (begin '#f '()) '#f))) g$t$19027)))) g$t$18953)))) ((case-lambda ((g$x$19033) (if (g$syntax-pair?$14501 g$x$19033) (begin '#f ((case-lambda ((g$q$19035) (if g$q$19035 (begin '#f ((case-lambda ((g$r$19037) (if g$r$19037 (begin '#f (append g$q$19035 g$r$19037)) '#f))) ((case-lambda ((g$x$19039) (list g$x$19039))) (g$syntax-cdr$14513 g$x$19033)))) '#f))) ((case-lambda ((g$x$19041) (list g$x$19041))) (g$syntax-car$14509 g$x$19033)))) '#f))) g$t$18953)))) g$p$18949)))) (set! g$quasi$18763 (case-lambda ((g$p$18765 g$lev$18766) ((case-lambda ((g$t$18769) ((case-lambda ((g$ls/false$18771) (if (if g$ls/false$18771 (begin '#f (apply (case-lambda ((g$p$18773) '#t)) g$ls/false$18771)) '#f) (apply (case-lambda ((g$p$18775) (if (= g$lev$18766 '0) g$p$18775 (g$quasicons$18755 (list (g$scheme-stx$14944 'quote) 'unquote) (g$quasi$18763 (list g$p$18775) (- g$lev$18766 '1)))))) g$ls/false$18771) ((case-lambda ((g$t$18777) ((case-lambda ((g$ls/false$18779) (if (if g$ls/false$18779 (begin '#f (apply (case-lambda ((g$p$18781 g$q$18782) '#t)) g$ls/false$18779)) '#f) (apply (case-lambda ((g$p$18785 g$q$18786) (if (= g$lev$18766 '0) (g$quasicons*$18753 g$p$18785 (g$quasi$18763 g$q$18786 g$lev$18766)) (g$quasicons$18755 (g$quasicons$18755 (list (g$scheme-stx$14944 'quote) 'unquote) (g$quasi$18763 g$p$18785 (- g$lev$18766 '1))) (g$quasi$18763 g$q$18786 g$lev$18766))))) g$ls/false$18779) ((case-lambda ((g$t$18789) ((case-lambda ((g$ls/false$18791) (if (if g$ls/false$18791 (begin '#f (apply (case-lambda ((g$p$18793 g$q$18794) '#t)) g$ls/false$18791)) '#f) (apply (case-lambda ((g$p$18797 g$q$18798) (if (= g$lev$18766 '0) (g$quasiappend$18757 g$p$18797 (g$quasi$18763 g$q$18798 g$lev$18766)) (g$quasicons$18755 (g$quasicons$18755 (list (g$scheme-stx$14944 'quote) 'unquote-splicing) (g$quasi$18763 g$p$18797 (- g$lev$18766 '1))) (g$quasi$18763 g$q$18798 g$lev$18766))))) g$ls/false$18791) ((case-lambda ((g$t$18801) ((case-lambda ((g$ls/false$18803) (if (if g$ls/false$18803 (begin '#f (apply (case-lambda ((g$p$18805) '#t)) g$ls/false$18803)) '#f) (apply (case-lambda ((g$p$18807) (g$quasicons$18755 (list (g$scheme-stx$14944 'quote) 'quasiquote) (g$quasi$18763 (list g$p$18807) (+ g$lev$18766 '1))))) g$ls/false$18803) ((case-lambda ((g$t$18809) ((case-lambda ((g$ls/false$18811) (if (if g$ls/false$18811 (begin '#f (apply (case-lambda ((g$p$18813 g$q$18814) '#t)) g$ls/false$18811)) '#f) (apply (case-lambda ((g$p$18817 g$q$18818) (g$quasicons$18755 (g$quasi$18763 g$p$18817 g$lev$18766) (g$quasi$18763 g$q$18818 g$lev$18766)))) g$ls/false$18811) ((case-lambda ((g$t$18821) ((case-lambda ((g$ls/false$18823) (if (if g$ls/false$18823 (begin '#f (apply (case-lambda ((g$x$18825) (not (g$stx?$14467 g$x$18825)))) g$ls/false$18823)) '#f) (apply (case-lambda ((g$x$18827) (g$quasivector$18759 (g$vquasi$18761 g$x$18827 g$lev$18766)))) g$ls/false$18823) ((case-lambda ((g$t$18829) ((case-lambda ((g$ls/false$18831) (if (if g$ls/false$18831 (begin '#f (apply (case-lambda ((g$p$18833) '#t)) g$ls/false$18831)) '#f) (apply (case-lambda ((g$p$18835) (list (g$scheme-stx$14944 'quote) g$p$18835))) g$ls/false$18831) (error 'expander '"invalid syntax" (g$strip$14533 g$t$18829 '()))))) ((case-lambda ((g$x$18837) (list g$x$18837))) g$t$18829)))) g$t$18821)))) ((case-lambda ((g$x$18839) (if (g$syntax-vector?$14503 g$x$18839) (begin '#f ((letrec ((g$f$18841 (case-lambda ((g$x$18843) (if (g$syntax-pair?$14501 g$x$18843) ((case-lambda ((g$cars/f$18845) (if g$cars/f$18845 (begin '#f ((case-lambda ((g$cdrs/f$18847) (if g$cdrs/f$18847 (begin '#f (map cons g$cars/f$18845 g$cdrs/f$18847)) '#f))) (g$f$18841 (g$syntax-cdr$14513 g$x$18843)))) '#f))) ((case-lambda ((g$x$18849) (list g$x$18849))) (g$syntax-car$14509 g$x$18843))) (if (g$syntax-null?$14505 g$x$18843) (list (begin 'x '())) '#f)))))) g$f$18841) (g$syntax-vector->list$14499 g$x$18839))) '#f))) g$t$18821)))) g$t$18809)))) ((case-lambda ((g$x$18851) (if (g$syntax-pair?$14501 g$x$18851) (begin '#f ((case-lambda ((g$q$18853) (if g$q$18853 (begin '#f ((case-lambda ((g$r$18855) (if g$r$18855 (begin '#f (append g$q$18853 g$r$18855)) '#f))) ((case-lambda ((g$x$18857) (list g$x$18857))) (g$syntax-cdr$14513 g$x$18851)))) '#f))) ((case-lambda ((g$x$18859) (list g$x$18859))) (g$syntax-car$14509 g$x$18851)))) '#f))) g$t$18809)))) g$t$18801)))) ((case-lambda ((g$x$18861) (if (g$syntax-pair?$14501 g$x$18861) (begin '#f ((case-lambda ((g$q$18863) (if g$q$18863 (begin '#f ((case-lambda ((g$r$18865) (if g$r$18865 (begin '#f (append g$q$18863 g$r$18865)) '#f))) ((case-lambda ((g$x$18867) (if (g$syntax-pair?$14501 g$x$18867) (begin '#f ((case-lambda ((g$q$18869) (if g$q$18869 (begin '#f ((case-lambda ((g$r$18871) (if g$r$18871 (begin '#f (append g$q$18869 g$r$18871)) '#f))) ((case-lambda ((g$x$18873) (if (equal? (g$stx->datum$14535 g$x$18873) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18867)))) '#f))) ((case-lambda ((g$x$18875) (list g$x$18875))) (g$syntax-car$14509 g$x$18867)))) '#f))) (g$syntax-cdr$14513 g$x$18861)))) '#f))) ((case-lambda ((g$x$18877) (if (g$id?$14515 g$x$18877) (if (g$free-id=?$14523 g$x$18877 (g$scheme-stx$14944 'quasiquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$18861)))) '#f))) g$t$18801)))) g$t$18789)))) ((case-lambda ((g$x$18879) (if (g$syntax-pair?$14501 g$x$18879) (begin '#f ((case-lambda ((g$q$18881) (if g$q$18881 (begin '#f ((case-lambda ((g$r$18883) (if g$r$18883 (begin '#f (append g$q$18881 g$r$18883)) '#f))) ((case-lambda ((g$x$18885) (list g$x$18885))) (g$syntax-cdr$14513 g$x$18879)))) '#f))) ((case-lambda ((g$x$18887) (if (g$syntax-pair?$14501 g$x$18887) (begin '#f ((case-lambda ((g$q$18889) (if g$q$18889 (begin '#f ((case-lambda ((g$r$18891) (if g$r$18891 (begin '#f (append g$q$18889 g$r$18891)) '#f))) ((letrec ((g$f$18893 (case-lambda ((g$x$18895) (if (g$syntax-pair?$14501 g$x$18895) ((case-lambda ((g$cars/f$18897) (if g$cars/f$18897 (begin '#f ((case-lambda ((g$cdrs/f$18899) (if g$cdrs/f$18899 (begin '#f (map cons g$cars/f$18897 g$cdrs/f$18899)) '#f))) (g$f$18893 (g$syntax-cdr$14513 g$x$18895)))) '#f))) ((case-lambda ((g$x$18901) (list g$x$18901))) (g$syntax-car$14509 g$x$18895))) (if (g$syntax-null?$14505 g$x$18895) (list (begin 'p '())) '#f)))))) g$f$18893) (g$syntax-cdr$14513 g$x$18887)))) '#f))) ((case-lambda ((g$x$18903) (if (g$id?$14515 g$x$18903) (if (g$free-id=?$14523 g$x$18903 (g$scheme-stx$14944 'unquote-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$18887)))) '#f))) (g$syntax-car$14509 g$x$18879)))) '#f))) g$t$18789)))) g$t$18777)))) ((case-lambda ((g$x$18905) (if (g$syntax-pair?$14501 g$x$18905) (begin '#f ((case-lambda ((g$q$18907) (if g$q$18907 (begin '#f ((case-lambda ((g$r$18909) (if g$r$18909 (begin '#f (append g$q$18907 g$r$18909)) '#f))) ((case-lambda ((g$x$18911) (list g$x$18911))) (g$syntax-cdr$14513 g$x$18905)))) '#f))) ((case-lambda ((g$x$18913) (if (g$syntax-pair?$14501 g$x$18913) (begin '#f ((case-lambda ((g$q$18915) (if g$q$18915 (begin '#f ((case-lambda ((g$r$18917) (if g$r$18917 (begin '#f (append g$q$18915 g$r$18917)) '#f))) ((letrec ((g$f$18919 (case-lambda ((g$x$18921) (if (g$syntax-pair?$14501 g$x$18921) ((case-lambda ((g$cars/f$18923) (if g$cars/f$18923 (begin '#f ((case-lambda ((g$cdrs/f$18925) (if g$cdrs/f$18925 (begin '#f (map cons g$cars/f$18923 g$cdrs/f$18925)) '#f))) (g$f$18919 (g$syntax-cdr$14513 g$x$18921)))) '#f))) ((case-lambda ((g$x$18927) (list g$x$18927))) (g$syntax-car$14509 g$x$18921))) (if (g$syntax-null?$14505 g$x$18921) (list (begin 'p '())) '#f)))))) g$f$18919) (g$syntax-cdr$14513 g$x$18913)))) '#f))) ((case-lambda ((g$x$18929) (if (g$id?$14515 g$x$18929) (if (g$free-id=?$14523 g$x$18929 (g$scheme-stx$14944 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$18913)))) '#f))) (g$syntax-car$14509 g$x$18905)))) '#f))) g$t$18777)))) g$t$18769)))) ((case-lambda ((g$x$18931) (if (g$syntax-pair?$14501 g$x$18931) (begin '#f ((case-lambda ((g$q$18933) (if g$q$18933 (begin '#f ((case-lambda ((g$r$18935) (if g$r$18935 (begin '#f (append g$q$18933 g$r$18935)) '#f))) ((case-lambda ((g$x$18937) (if (g$syntax-pair?$14501 g$x$18937) (begin '#f ((case-lambda ((g$q$18939) (if g$q$18939 (begin '#f ((case-lambda ((g$r$18941) (if g$r$18941 (begin '#f (append g$q$18939 g$r$18941)) '#f))) ((case-lambda ((g$x$18943) (if (equal? (g$stx->datum$14535 g$x$18943) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$18937)))) '#f))) ((case-lambda ((g$x$18945) (list g$x$18945))) (g$syntax-car$14509 g$x$18937)))) '#f))) (g$syntax-cdr$14513 g$x$18931)))) '#f))) ((case-lambda ((g$x$18947) (if (g$id?$14515 g$x$18947) (if (g$free-id=?$14523 g$x$18947 (g$scheme-stx$14944 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$18931)))) '#f))) g$t$18769)))) g$p$18765)))) (case-lambda ((g$x$19383) ((case-lambda ((g$t$19385) ((case-lambda ((g$ls/false$19387) (if (if g$ls/false$19387 (begin '#f (apply (case-lambda ((g$e$19389) '#t)) g$ls/false$19387)) '#f) (apply (case-lambda ((g$e$19391) (g$quasi$18763 g$e$19391 '0))) g$ls/false$19387) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19385 '()))))) ((case-lambda ((g$x$19393) (if (g$syntax-pair?$14501 g$x$19393) (begin '#f ((case-lambda ((g$q$19395) (if g$q$19395 (begin '#f ((case-lambda ((g$r$19397) (if g$r$19397 (begin '#f (append g$q$19395 g$r$19397)) '#f))) ((case-lambda ((g$x$19399) (if (g$syntax-pair?$14501 g$x$19399) (begin '#f ((case-lambda ((g$q$19401) (if g$q$19401 (begin '#f ((case-lambda ((g$r$19403) (if g$r$19403 (begin '#f (append g$q$19401 g$r$19403)) '#f))) ((case-lambda ((g$x$19405) (if (equal? (g$stx->datum$14535 g$x$19405) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19399)))) '#f))) ((case-lambda ((g$x$19407) (list g$x$19407))) (g$syntax-car$14509 g$x$19399)))) '#f))) (g$syntax-cdr$14513 g$x$19393)))) '#f))) ((case-lambda ((g$x$19409) '())) (g$syntax-car$14509 g$x$19393)))) '#f))) g$t$19385)))) g$x$19383)))))) '#f '#f '#f '#f '#f '#f))))) (set! g$quasisyntax-macro$15018 ((case-lambda (() ((case-lambda ((g$quasi$19411) (begin (set! g$quasi$19411 (case-lambda ((g$p$19413 g$lev$19414) ((case-lambda ((g$t$19417) ((case-lambda ((g$ls/false$19419) (if (if g$ls/false$19419 (begin '#f (apply (case-lambda ((g$p$19421) '#t)) g$ls/false$19419)) '#f) (apply (case-lambda ((g$p$19423) (if (= g$lev$19414 '0) ((case-lambda ((g$g$19425) (values (list g$g$19425) (list g$p$19423) g$g$19425))) (gensym)) (call-with-values (case-lambda (() (g$quasi$19411 g$p$19423 (- g$lev$19414 '1)))) (case-lambda ((g$lhs*$19427 g$rhs*$19428 g$p$19429) (values g$lhs*$19427 g$rhs*$19428 (list 'unsyntax g$p$19429)))))))) g$ls/false$19419) ((case-lambda ((g$t$19433) ((case-lambda ((g$ls/false$19435) (if (if g$ls/false$19435 (begin '#f (apply (case-lambda (() (= g$lev$19414 '0))) g$ls/false$19435)) '#f) (apply (case-lambda (() (error 'expander '"incorrect use of unsyntax" (g$strip$14533 g$p$19413 '())))) g$ls/false$19435) ((case-lambda ((g$t$19437) ((case-lambda ((g$ls/false$19439) (if (if g$ls/false$19439 (begin '#f (apply (case-lambda ((g$p$19441 g$q$19442) '#t)) g$ls/false$19439)) '#f) (apply (case-lambda ((g$p$19445 g$q$19446) (call-with-values (case-lambda (() (g$quasi$19411 g$q$19446 g$lev$19414))) (case-lambda ((g$lhs*$19449 g$rhs*$19450 g$q$19451) (if (= g$lev$19414 '0) ((case-lambda ((g$g$19455) (values (cons (cons g$g$19455 '(...)) g$lhs*$19449) (cons g$p$19445 g$rhs*$19450) (cons g$g$19455 (cons '... g$q$19451))))) (gensym)) (call-with-values (case-lambda (() (g$quasi$19411 g$p$19445 (- g$lev$19414 '1)))) (case-lambda ((g$lhs2*$19457 g$rhs2*$19458 g$p$19459) (values (append g$lhs2*$19457 g$lhs*$19449) (append g$rhs2*$19458 g$rhs*$19450) (cons (list 'unsyntax-splicing g$p$19459) g$q$19451))))))))))) g$ls/false$19439) ((case-lambda ((g$t$19463) ((case-lambda ((g$ls/false$19465) (if (if g$ls/false$19465 (begin '#f (apply (case-lambda (() (= g$lev$19414 '0))) g$ls/false$19465)) '#f) (apply (case-lambda (() (error 'expander '"incorrect use of unsyntax-splicing" (g$strip$14533 g$p$19413 '())))) g$ls/false$19465) ((case-lambda ((g$t$19467) ((case-lambda ((g$ls/false$19469) (if (if g$ls/false$19469 (begin '#f (apply (case-lambda ((g$p$19471) '#t)) g$ls/false$19469)) '#f) (apply (case-lambda ((g$p$19473) (call-with-values (case-lambda (() (g$quasi$19411 g$p$19473 (+ g$lev$19414 '1)))) (case-lambda ((g$lhs*$19475 g$rhs*$19476 g$p$19477) (values g$lhs*$19475 g$rhs*$19476 (list 'quasisyntax g$p$19477))))))) g$ls/false$19469) ((case-lambda ((g$t$19481) ((case-lambda ((g$ls/false$19483) (if (if g$ls/false$19483 (begin '#f (apply (case-lambda ((g$p$19485 g$q$19486) '#t)) g$ls/false$19483)) '#f) (apply (case-lambda ((g$p$19489 g$q$19490) (call-with-values (case-lambda (() (g$quasi$19411 g$p$19489 g$lev$19414))) (case-lambda ((g$lhs*$19493 g$rhs*$19494 g$p$19495) (call-with-values (case-lambda (() (g$quasi$19411 g$q$19490 g$lev$19414))) (case-lambda ((g$lhs2*$19496 g$rhs2*$19497 g$q$19498) (values (append g$lhs2*$19496 g$lhs*$19493) (append g$rhs2*$19497 g$rhs*$19494) (cons g$p$19495 g$q$19498)))))))))) g$ls/false$19483) ((case-lambda ((g$t$19505) ((case-lambda ((g$ls/false$19507) (if (if g$ls/false$19507 (begin '#f (apply (case-lambda ((g$x$19509) (not (g$stx?$14467 g$p$19413)))) g$ls/false$19507)) '#f) (apply (case-lambda ((g$x$19511) (call-with-values (case-lambda (() (letrec ((g$f$19513 (case-lambda ((g$x$19515) (if (null? g$x$19515) (values '() '() '()) (call-with-values (case-lambda (() (g$quasi$19411 (car g$x$19515) g$lev$19414))) (case-lambda ((g$lhs*$19517 g$rhs*$19518 g$a$19519) (call-with-values (case-lambda (() (g$f$19513 (cdr g$x$19515)))) (case-lambda ((g$lhs2*$19523 g$rhs2*$19524 g$d$19525) (values (append g$lhs*$19517 g$lhs2*$19523) (append g$rhs*$19518 g$rhs2*$19524) (cons g$a$19519 g$d$19525))))))))))))) (g$f$19513 g$x$19511)))) (case-lambda ((g$lhs*$19529 g$rhs*$19530 g$x*$19531) (values g$lhs*$19529 g$rhs*$19530 (list->vector g$x*$19531))))))) g$ls/false$19507) ((case-lambda ((g$t$19535) ((case-lambda ((g$ls/false$19537) (if (if g$ls/false$19537 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19537)) '#f) (apply (case-lambda (() (values '() '() g$p$19413))) g$ls/false$19537) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19535 '()))))) ((case-lambda ((g$x$19539) '())) g$t$19535)))) g$t$19505)))) ((case-lambda ((g$x$19541) (if (g$syntax-vector?$14503 g$x$19541) (begin '#f ((letrec ((g$f$19543 (case-lambda ((g$x$19545) (if (g$syntax-pair?$14501 g$x$19545) ((case-lambda ((g$cars/f$19547) (if g$cars/f$19547 (begin '#f ((case-lambda ((g$cdrs/f$19549) (if g$cdrs/f$19549 (begin '#f (map cons g$cars/f$19547 g$cdrs/f$19549)) '#f))) (g$f$19543 (g$syntax-cdr$14513 g$x$19545)))) '#f))) ((case-lambda ((g$x$19551) (list g$x$19551))) (g$syntax-car$14509 g$x$19545))) (if (g$syntax-null?$14505 g$x$19545) (list (begin 'x '())) '#f)))))) g$f$19543) (g$syntax-vector->list$14499 g$x$19541))) '#f))) g$t$19505)))) g$t$19481)))) ((case-lambda ((g$x$19553) (if (g$syntax-pair?$14501 g$x$19553) (begin '#f ((case-lambda ((g$q$19555) (if g$q$19555 (begin '#f ((case-lambda ((g$r$19557) (if g$r$19557 (begin '#f (append g$q$19555 g$r$19557)) '#f))) ((case-lambda ((g$x$19559) (list g$x$19559))) (g$syntax-cdr$14513 g$x$19553)))) '#f))) ((case-lambda ((g$x$19561) (list g$x$19561))) (g$syntax-car$14509 g$x$19553)))) '#f))) g$t$19481)))) g$t$19467)))) ((case-lambda ((g$x$19563) (if (g$syntax-pair?$14501 g$x$19563) (begin '#f ((case-lambda ((g$q$19565) (if g$q$19565 (begin '#f ((case-lambda ((g$r$19567) (if g$r$19567 (begin '#f (append g$q$19565 g$r$19567)) '#f))) ((case-lambda ((g$x$19569) (if (g$syntax-pair?$14501 g$x$19569) (begin '#f ((case-lambda ((g$q$19571) (if g$q$19571 (begin '#f ((case-lambda ((g$r$19573) (if g$r$19573 (begin '#f (append g$q$19571 g$r$19573)) '#f))) ((case-lambda ((g$x$19575) (if (equal? (g$stx->datum$14535 g$x$19575) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19569)))) '#f))) ((case-lambda ((g$x$19577) (list g$x$19577))) (g$syntax-car$14509 g$x$19569)))) '#f))) (g$syntax-cdr$14513 g$x$19563)))) '#f))) ((case-lambda ((g$x$19579) (if (g$id?$14515 g$x$19579) (if (g$free-id=?$14523 g$x$19579 (g$scheme-stx$14944 'quasisyntax)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19563)))) '#f))) g$t$19467)))) g$t$19463)))) ((case-lambda ((g$x$19581) (if (g$id?$14515 g$x$19581) (if (g$free-id=?$14523 g$x$19581 (g$scheme-stx$14944 'unsyntax-splicing)) (begin '#f '()) '#f) '#f))) g$t$19463)))) g$t$19437)))) ((case-lambda ((g$x$19583) (if (g$syntax-pair?$14501 g$x$19583) (begin '#f ((case-lambda ((g$q$19585) (if g$q$19585 (begin '#f ((case-lambda ((g$r$19587) (if g$r$19587 (begin '#f (append g$q$19585 g$r$19587)) '#f))) ((case-lambda ((g$x$19589) (list g$x$19589))) (g$syntax-cdr$14513 g$x$19583)))) '#f))) ((case-lambda ((g$x$19591) (if (g$syntax-pair?$14501 g$x$19591) (begin '#f ((case-lambda ((g$q$19593) (if g$q$19593 (begin '#f ((case-lambda ((g$r$19595) (if g$r$19595 (begin '#f (append g$q$19593 g$r$19595)) '#f))) ((case-lambda ((g$x$19597) (if (g$syntax-pair?$14501 g$x$19597) (begin '#f ((case-lambda ((g$q$19599) (if g$q$19599 (begin '#f ((case-lambda ((g$r$19601) (if g$r$19601 (begin '#f (append g$q$19599 g$r$19601)) '#f))) ((case-lambda ((g$x$19603) (if (equal? (g$stx->datum$14535 g$x$19603) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19597)))) '#f))) ((case-lambda ((g$x$19605) (list g$x$19605))) (g$syntax-car$14509 g$x$19597)))) '#f))) (g$syntax-cdr$14513 g$x$19591)))) '#f))) ((case-lambda ((g$x$19607) (if (g$id?$14515 g$x$19607) (if (g$free-id=?$14523 g$x$19607 (g$scheme-stx$14944 'unsyntax-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19591)))) '#f))) (g$syntax-car$14509 g$x$19583)))) '#f))) g$t$19437)))) g$t$19433)))) ((case-lambda ((g$x$19609) (if (g$id?$14515 g$x$19609) (if (g$free-id=?$14523 g$x$19609 (g$scheme-stx$14944 'unsyntax)) (begin '#f '()) '#f) '#f))) g$t$19433)))) g$t$19417)))) ((case-lambda ((g$x$19611) (if (g$syntax-pair?$14501 g$x$19611) (begin '#f ((case-lambda ((g$q$19613) (if g$q$19613 (begin '#f ((case-lambda ((g$r$19615) (if g$r$19615 (begin '#f (append g$q$19613 g$r$19615)) '#f))) ((case-lambda ((g$x$19617) (if (g$syntax-pair?$14501 g$x$19617) (begin '#f ((case-lambda ((g$q$19619) (if g$q$19619 (begin '#f ((case-lambda ((g$r$19621) (if g$r$19621 (begin '#f (append g$q$19619 g$r$19621)) '#f))) ((case-lambda ((g$x$19623) (if (equal? (g$stx->datum$14535 g$x$19623) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19617)))) '#f))) ((case-lambda ((g$x$19625) (list g$x$19625))) (g$syntax-car$14509 g$x$19617)))) '#f))) (g$syntax-cdr$14513 g$x$19611)))) '#f))) ((case-lambda ((g$x$19627) (if (g$id?$14515 g$x$19627) (if (g$free-id=?$14523 g$x$19627 (g$scheme-stx$14944 'unsyntax)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19611)))) '#f))) g$t$19417)))) g$p$19413)))) (case-lambda ((g$x$19629) ((case-lambda ((g$t$19631) ((case-lambda ((g$ls/false$19633) (if (if g$ls/false$19633 (begin '#f (apply (case-lambda ((g$e$19635) '#t)) g$ls/false$19633)) '#f) (apply (case-lambda ((g$e$19637) (call-with-values (case-lambda (() (g$quasi$19411 g$e$19637 '0))) (case-lambda ((g$lhs*$19639 g$rhs*$19640 g$v$19641) (g$bless$14978 (list 'syntax-case (cons 'list g$rhs*$19640) '() (list g$lhs*$19639 (list 'syntax g$v$19641))))))))) g$ls/false$19633) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19631 '()))))) ((case-lambda ((g$x$19645) (if (g$syntax-pair?$14501 g$x$19645) (begin '#f ((case-lambda ((g$q$19647) (if g$q$19647 (begin '#f ((case-lambda ((g$r$19649) (if g$r$19649 (begin '#f (append g$q$19647 g$r$19649)) '#f))) ((case-lambda ((g$x$19651) (if (g$syntax-pair?$14501 g$x$19651) (begin '#f ((case-lambda ((g$q$19653) (if g$q$19653 (begin '#f ((case-lambda ((g$r$19655) (if g$r$19655 (begin '#f (append g$q$19653 g$r$19655)) '#f))) ((case-lambda ((g$x$19657) (if (equal? (g$stx->datum$14535 g$x$19657) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19651)))) '#f))) ((case-lambda ((g$x$19659) (list g$x$19659))) (g$syntax-car$14509 g$x$19651)))) '#f))) (g$syntax-cdr$14513 g$x$19645)))) '#f))) ((case-lambda ((g$x$19661) '())) (g$syntax-car$14509 g$x$19645)))) '#f))) g$t$19631)))) g$x$19629)))))) '#f))))) (set! g$define-struct-macro$15020 (case-lambda ((g$stx$19663) (error 'expander '"define-struct not supported" (g$strip$14533 g$stx$19663 '()))))) (set! g$define-record-type-macro$15022 (case-lambda ((g$x$19665) ((case-lambda ((g$id$19667 g$get-record-name$19669 g$get-record-constructor-name$19671 g$get-record-predicate-name$19673 g$get-clause$19675 g$foo-rtd-code$19677 g$foo-rcd-code$19679 g$get-protocol-code$19681 g$get-fields$19683 g$get-mutator-indices$19685 g$get-mutators$19687 g$get-accessors$19689 g$enumerate$19691 g$do-define-record$19693) (begin (set! g$id$19667 (case-lambda ((g$ctxt$20715 . g$str*$20717) (g$datum->syntax$15171 g$ctxt$20715 (string->symbol (apply string-append (map (case-lambda ((g$x$20719) (if (symbol? g$x$20719) (symbol->string g$x$20719) (if (string? g$x$20719) g$x$20719 (error 'define-record-type '"BUG"))))) g$str*$20717))))))) (set! g$get-record-name$19669 (case-lambda ((g$spec$20661) ((case-lambda ((g$t$20663) ((case-lambda ((g$ls/false$20665) (if (if g$ls/false$20665 (begin '#f (apply (case-lambda ((g$foo$20667 g$make-foo$20668 g$foo?$20669) '#t)) g$ls/false$20665)) '#f) (apply (case-lambda ((g$foo$20673 g$make-foo$20674 g$foo?$20675) g$foo$20673)) g$ls/false$20665) ((case-lambda ((g$t$20679) ((case-lambda ((g$ls/false$20681) (if (if g$ls/false$20681 (begin '#f (apply (case-lambda ((g$foo$20683) '#t)) g$ls/false$20681)) '#f) (apply (case-lambda ((g$foo$20685) g$foo$20685)) g$ls/false$20681) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20679 '()))))) ((case-lambda ((g$x$20687) (list g$x$20687))) g$t$20679)))) g$t$20663)))) ((case-lambda ((g$x$20689) (if (g$syntax-pair?$14501 g$x$20689) (begin '#f ((case-lambda ((g$q$20691) (if g$q$20691 (begin '#f ((case-lambda ((g$r$20693) (if g$r$20693 (begin '#f (append g$q$20691 g$r$20693)) '#f))) ((case-lambda ((g$x$20695) (if (g$syntax-pair?$14501 g$x$20695) (begin '#f ((case-lambda ((g$q$20697) (if g$q$20697 (begin '#f ((case-lambda ((g$r$20699) (if g$r$20699 (begin '#f (append g$q$20697 g$r$20699)) '#f))) ((case-lambda ((g$x$20701) (if (g$syntax-pair?$14501 g$x$20701) (begin '#f ((case-lambda ((g$q$20703) (if g$q$20703 (begin '#f ((case-lambda ((g$r$20705) (if g$r$20705 (begin '#f (append g$q$20703 g$r$20705)) '#f))) ((case-lambda ((g$x$20707) (if (equal? (g$stx->datum$14535 g$x$20707) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20701)))) '#f))) ((case-lambda ((g$x$20709) (list g$x$20709))) (g$syntax-car$14509 g$x$20701)))) '#f))) (g$syntax-cdr$14513 g$x$20695)))) '#f))) ((case-lambda ((g$x$20711) (list g$x$20711))) (g$syntax-car$14509 g$x$20695)))) '#f))) (g$syntax-cdr$14513 g$x$20689)))) '#f))) ((case-lambda ((g$x$20713) (list g$x$20713))) (g$syntax-car$14509 g$x$20689)))) '#f))) g$t$20663)))) g$spec$20661)))) (set! g$get-record-constructor-name$19671 (case-lambda ((g$spec$20605 g$ctxt$20606) ((case-lambda ((g$t$20609) ((case-lambda ((g$ls/false$20611) (if (if g$ls/false$20611 (begin '#f (apply (case-lambda ((g$foo$20613 g$make-foo$20614 g$foo?$20615) '#t)) g$ls/false$20611)) '#f) (apply (case-lambda ((g$foo$20619 g$make-foo$20620 g$foo?$20621) g$make-foo$20620)) g$ls/false$20611) ((case-lambda ((g$t$20625) ((case-lambda ((g$ls/false$20627) (if (if g$ls/false$20627 (begin '#f (apply (case-lambda ((g$foo$20629) '#t)) g$ls/false$20627)) '#f) (apply (case-lambda ((g$foo$20631) (g$id$19667 g$ctxt$20606 '"make-" (g$stx->datum$14535 g$foo$20631)))) g$ls/false$20627) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20625 '()))))) ((case-lambda ((g$x$20633) (list g$x$20633))) g$t$20625)))) g$t$20609)))) ((case-lambda ((g$x$20635) (if (g$syntax-pair?$14501 g$x$20635) (begin '#f ((case-lambda ((g$q$20637) (if g$q$20637 (begin '#f ((case-lambda ((g$r$20639) (if g$r$20639 (begin '#f (append g$q$20637 g$r$20639)) '#f))) ((case-lambda ((g$x$20641) (if (g$syntax-pair?$14501 g$x$20641) (begin '#f ((case-lambda ((g$q$20643) (if g$q$20643 (begin '#f ((case-lambda ((g$r$20645) (if g$r$20645 (begin '#f (append g$q$20643 g$r$20645)) '#f))) ((case-lambda ((g$x$20647) (if (g$syntax-pair?$14501 g$x$20647) (begin '#f ((case-lambda ((g$q$20649) (if g$q$20649 (begin '#f ((case-lambda ((g$r$20651) (if g$r$20651 (begin '#f (append g$q$20649 g$r$20651)) '#f))) ((case-lambda ((g$x$20653) (if (equal? (g$stx->datum$14535 g$x$20653) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20647)))) '#f))) ((case-lambda ((g$x$20655) (list g$x$20655))) (g$syntax-car$14509 g$x$20647)))) '#f))) (g$syntax-cdr$14513 g$x$20641)))) '#f))) ((case-lambda ((g$x$20657) (list g$x$20657))) (g$syntax-car$14509 g$x$20641)))) '#f))) (g$syntax-cdr$14513 g$x$20635)))) '#f))) ((case-lambda ((g$x$20659) (list g$x$20659))) (g$syntax-car$14509 g$x$20635)))) '#f))) g$t$20609)))) g$spec$20605)))) (set! g$get-record-predicate-name$19673 (case-lambda ((g$spec$20549 g$ctxt$20550) ((case-lambda ((g$t$20553) ((case-lambda ((g$ls/false$20555) (if (if g$ls/false$20555 (begin '#f (apply (case-lambda ((g$foo$20557 g$make-foo$20558 g$foo?$20559) '#t)) g$ls/false$20555)) '#f) (apply (case-lambda ((g$foo$20563 g$make-foo$20564 g$foo?$20565) g$foo?$20565)) g$ls/false$20555) ((case-lambda ((g$t$20569) ((case-lambda ((g$ls/false$20571) (if (if g$ls/false$20571 (begin '#f (apply (case-lambda ((g$foo$20573) '#t)) g$ls/false$20571)) '#f) (apply (case-lambda ((g$foo$20575) (g$id$19667 g$ctxt$20550 (g$stx->datum$14535 g$foo$20575) '"?"))) g$ls/false$20571) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20569 '()))))) ((case-lambda ((g$x$20577) (list g$x$20577))) g$t$20569)))) g$t$20553)))) ((case-lambda ((g$x$20579) (if (g$syntax-pair?$14501 g$x$20579) (begin '#f ((case-lambda ((g$q$20581) (if g$q$20581 (begin '#f ((case-lambda ((g$r$20583) (if g$r$20583 (begin '#f (append g$q$20581 g$r$20583)) '#f))) ((case-lambda ((g$x$20585) (if (g$syntax-pair?$14501 g$x$20585) (begin '#f ((case-lambda ((g$q$20587) (if g$q$20587 (begin '#f ((case-lambda ((g$r$20589) (if g$r$20589 (begin '#f (append g$q$20587 g$r$20589)) '#f))) ((case-lambda ((g$x$20591) (if (g$syntax-pair?$14501 g$x$20591) (begin '#f ((case-lambda ((g$q$20593) (if g$q$20593 (begin '#f ((case-lambda ((g$r$20595) (if g$r$20595 (begin '#f (append g$q$20593 g$r$20595)) '#f))) ((case-lambda ((g$x$20597) (if (equal? (g$stx->datum$14535 g$x$20597) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20591)))) '#f))) ((case-lambda ((g$x$20599) (list g$x$20599))) (g$syntax-car$14509 g$x$20591)))) '#f))) (g$syntax-cdr$14513 g$x$20585)))) '#f))) ((case-lambda ((g$x$20601) (list g$x$20601))) (g$syntax-car$14509 g$x$20585)))) '#f))) (g$syntax-cdr$14513 g$x$20579)))) '#f))) ((case-lambda ((g$x$20603) (list g$x$20603))) (g$syntax-car$14509 g$x$20579)))) '#f))) g$t$20553)))) g$spec$20549)))) (set! g$get-clause$19675 (case-lambda ((g$id$20505 g$ls$20506) ((case-lambda ((g$t$20509) ((case-lambda ((g$ls/false$20511) (if (if g$ls/false$20511 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20511)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20511) ((case-lambda ((g$t$20513) ((case-lambda ((g$ls/false$20515) (if (if g$ls/false$20515 (begin '#f (apply (case-lambda ((g$x$20517 g$rest$20518 g$ls$20519) '#t)) g$ls/false$20515)) '#f) (apply (case-lambda ((g$x$20523 g$rest$20524 g$ls$20525) (if (g$free-id=?$14523 (g$bless$14978 g$id$20505) g$x$20523) (cons g$x$20523 g$rest$20524) (g$get-clause$19675 g$id$20505 g$ls$20525)))) g$ls/false$20515) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20513 '()))))) ((case-lambda ((g$x$20529) (if (g$syntax-pair?$14501 g$x$20529) (begin '#f ((case-lambda ((g$q$20531) (if g$q$20531 (begin '#f ((case-lambda ((g$r$20533) (if g$r$20533 (begin '#f (append g$q$20531 g$r$20533)) '#f))) ((case-lambda ((g$x$20535) (list g$x$20535))) (g$syntax-cdr$14513 g$x$20529)))) '#f))) ((case-lambda ((g$x$20537) (if (g$syntax-pair?$14501 g$x$20537) (begin '#f ((case-lambda ((g$q$20539) (if g$q$20539 (begin '#f ((case-lambda ((g$r$20541) (if g$r$20541 (begin '#f (append g$q$20539 g$r$20541)) '#f))) ((case-lambda ((g$x$20543) (list g$x$20543))) (g$syntax-cdr$14513 g$x$20537)))) '#f))) ((case-lambda ((g$x$20545) (list g$x$20545))) (g$syntax-car$14509 g$x$20537)))) '#f))) (g$syntax-car$14509 g$x$20529)))) '#f))) g$t$20513)))) g$t$20509)))) ((case-lambda ((g$x$20547) (if (equal? (g$stx->datum$14535 g$x$20547) '()) (begin '#f '()) '#f))) g$t$20509)))) g$ls$20506)))) (set! g$foo-rtd-code$19677 (case-lambda ((g$ctxt$20247 g$name$20248 g$clause*$20249) ((case-lambda ((g$convert-field-spec*$20253) (begin (set! g$convert-field-spec*$20253 (case-lambda ((g$ls$20255) (list->vector (map (case-lambda ((g$x$20257) ((case-lambda ((g$t$20259) ((case-lambda ((g$ls/false$20261) (if (if g$ls/false$20261 (begin '#f (apply (case-lambda ((g$name$20263 g$rest$20264) '#t)) g$ls/false$20261)) '#f) (apply (case-lambda ((g$name$20267 g$rest$20268) (list 'mutable g$name$20267))) g$ls/false$20261) ((case-lambda ((g$t$20271) ((case-lambda ((g$ls/false$20273) (if (if g$ls/false$20273 (begin '#f (apply (case-lambda ((g$name$20275 g$rest$20276) '#t)) g$ls/false$20273)) '#f) (apply (case-lambda ((g$name$20279 g$rest$20280) (list 'immutable g$name$20279))) g$ls/false$20273) ((case-lambda ((g$t$20283) ((case-lambda ((g$ls/false$20285) (if (if g$ls/false$20285 (begin '#f (apply (case-lambda ((g$name$20287) '#t)) g$ls/false$20285)) '#f) (apply (case-lambda ((g$name$20289) (list 'immutable g$name$20289))) g$ls/false$20285) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20283 '()))))) ((case-lambda ((g$x$20291) (list g$x$20291))) g$t$20283)))) g$t$20271)))) ((case-lambda ((g$x$20293) (if (g$syntax-pair?$14501 g$x$20293) (begin '#f ((case-lambda ((g$q$20295) (if g$q$20295 (begin '#f ((case-lambda ((g$r$20297) (if g$r$20297 (begin '#f (append g$q$20295 g$r$20297)) '#f))) ((case-lambda ((g$x$20299) (if (g$syntax-pair?$14501 g$x$20299) (begin '#f ((case-lambda ((g$q$20301) (if g$q$20301 (begin '#f ((case-lambda ((g$r$20303) (if g$r$20303 (begin '#f (append g$q$20301 g$r$20303)) '#f))) ((case-lambda ((g$x$20305) (list g$x$20305))) (g$syntax-cdr$14513 g$x$20299)))) '#f))) ((case-lambda ((g$x$20307) (list g$x$20307))) (g$syntax-car$14509 g$x$20299)))) '#f))) (g$syntax-cdr$14513 g$x$20293)))) '#f))) ((case-lambda ((g$x$20309) (if (g$id?$14515 g$x$20309) (if (g$free-id=?$14523 g$x$20309 (g$scheme-stx$14944 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$20293)))) '#f))) g$t$20271)))) g$t$20259)))) ((case-lambda ((g$x$20311) (if (g$syntax-pair?$14501 g$x$20311) (begin '#f ((case-lambda ((g$q$20313) (if g$q$20313 (begin '#f ((case-lambda ((g$r$20315) (if g$r$20315 (begin '#f (append g$q$20313 g$r$20315)) '#f))) ((case-lambda ((g$x$20317) (if (g$syntax-pair?$14501 g$x$20317) (begin '#f ((case-lambda ((g$q$20319) (if g$q$20319 (begin '#f ((case-lambda ((g$r$20321) (if g$r$20321 (begin '#f (append g$q$20319 g$r$20321)) '#f))) ((case-lambda ((g$x$20323) (list g$x$20323))) (g$syntax-cdr$14513 g$x$20317)))) '#f))) ((case-lambda ((g$x$20325) (list g$x$20325))) (g$syntax-car$14509 g$x$20317)))) '#f))) (g$syntax-cdr$14513 g$x$20311)))) '#f))) ((case-lambda ((g$x$20327) (if (g$id?$14515 g$x$20327) (if (g$free-id=?$14523 g$x$20327 (g$scheme-stx$14944 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$20311)))) '#f))) g$t$20259)))) g$x$20257))) g$ls$20255))))) ((case-lambda ((g$parent-rtd-code$20329 g$uid-code$20330 g$sealed?$20331 g$opaque?$20332 g$fields$20333) (g$bless$14978 (list 'make-record-type-descriptor (list 'quote g$name$20248) g$parent-rtd-code$20329 g$uid-code$20330 g$sealed?$20331 g$opaque?$20332 g$fields$20333)))) ((case-lambda ((g$t$20339) ((case-lambda ((g$ls/false$20341) (if (if g$ls/false$20341 (begin '#f (apply (case-lambda ((g$name$20343) '#t)) g$ls/false$20341)) '#f) (apply (case-lambda ((g$name$20345) (list 'record-type-descriptor g$name$20345))) g$ls/false$20341) ((case-lambda ((g$t$20347) ((case-lambda ((g$ls/false$20349) (if (if g$ls/false$20349 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20349)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20349) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20347 '()))))) ((case-lambda ((g$x$20351) '())) g$t$20347)))) g$t$20339)))) ((case-lambda ((g$x$20353) (if (g$syntax-pair?$14501 g$x$20353) (begin '#f ((case-lambda ((g$q$20355) (if g$q$20355 (begin '#f ((case-lambda ((g$r$20357) (if g$r$20357 (begin '#f (append g$q$20355 g$r$20357)) '#f))) ((case-lambda ((g$x$20359) (if (g$syntax-pair?$14501 g$x$20359) (begin '#f ((case-lambda ((g$q$20361) (if g$q$20361 (begin '#f ((case-lambda ((g$r$20363) (if g$r$20363 (begin '#f (append g$q$20361 g$r$20363)) '#f))) ((case-lambda ((g$x$20365) (if (equal? (g$stx->datum$14535 g$x$20365) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20359)))) '#f))) ((case-lambda ((g$x$20367) (list g$x$20367))) (g$syntax-car$14509 g$x$20359)))) '#f))) (g$syntax-cdr$14513 g$x$20353)))) '#f))) ((case-lambda ((g$x$20369) '())) (g$syntax-car$14509 g$x$20353)))) '#f))) g$t$20339)))) (g$get-clause$19675 'parent g$clause*$20249)) ((case-lambda ((g$t$20371) ((case-lambda ((g$ls/false$20373) (if (if g$ls/false$20373 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20373)) '#f) (apply (case-lambda (() (list 'quote (gensym)))) g$ls/false$20373) ((case-lambda ((g$t$20375) ((case-lambda ((g$ls/false$20377) (if (if g$ls/false$20377 (begin '#f (apply (case-lambda ((g$uid$20379) '#t)) g$ls/false$20377)) '#f) (apply (case-lambda ((g$uid$20381) (list 'quote g$uid$20381))) g$ls/false$20377) ((case-lambda ((g$t$20383) ((case-lambda ((g$ls/false$20385) (if (if g$ls/false$20385 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20385)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20385) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20383 '()))))) ((case-lambda ((g$x$20387) '())) g$t$20383)))) g$t$20375)))) ((case-lambda ((g$x$20389) (if (g$syntax-pair?$14501 g$x$20389) (begin '#f ((case-lambda ((g$q$20391) (if g$q$20391 (begin '#f ((case-lambda ((g$r$20393) (if g$r$20393 (begin '#f (append g$q$20391 g$r$20393)) '#f))) ((case-lambda ((g$x$20395) (if (g$syntax-pair?$14501 g$x$20395) (begin '#f ((case-lambda ((g$q$20397) (if g$q$20397 (begin '#f ((case-lambda ((g$r$20399) (if g$r$20399 (begin '#f (append g$q$20397 g$r$20399)) '#f))) ((case-lambda ((g$x$20401) (if (equal? (g$stx->datum$14535 g$x$20401) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20395)))) '#f))) ((case-lambda ((g$x$20403) (list g$x$20403))) (g$syntax-car$14509 g$x$20395)))) '#f))) (g$syntax-cdr$14513 g$x$20389)))) '#f))) ((case-lambda ((g$x$20405) '())) (g$syntax-car$14509 g$x$20389)))) '#f))) g$t$20375)))) g$t$20371)))) ((case-lambda ((g$x$20407) (if (g$syntax-pair?$14501 g$x$20407) (begin '#f ((case-lambda ((g$q$20409) (if g$q$20409 (begin '#f ((case-lambda ((g$r$20411) (if g$r$20411 (begin '#f (append g$q$20409 g$r$20411)) '#f))) ((case-lambda ((g$x$20413) (if (equal? (g$stx->datum$14535 g$x$20413) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20407)))) '#f))) ((case-lambda ((g$x$20415) '())) (g$syntax-car$14509 g$x$20407)))) '#f))) g$t$20371)))) (g$get-clause$19675 'nongenerative g$clause*$20249)) ((case-lambda ((g$t$20417) ((case-lambda ((g$ls/false$20419) (if (if g$ls/false$20419 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20419)) '#f) (apply (case-lambda (() '#t)) g$ls/false$20419) ((case-lambda ((g$t$20421) ((case-lambda ((g$ls/false$20423) (if (if g$ls/false$20423 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20423)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20423) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20421 '()))))) ((case-lambda ((g$x$20425) '())) g$t$20421)))) g$t$20417)))) ((case-lambda ((g$x$20427) (if (g$syntax-pair?$14501 g$x$20427) (begin '#f ((case-lambda ((g$q$20429) (if g$q$20429 (begin '#f ((case-lambda ((g$r$20431) (if g$r$20431 (begin '#f (append g$q$20429 g$r$20431)) '#f))) ((case-lambda ((g$x$20433) (if (g$syntax-pair?$14501 g$x$20433) (begin '#f ((case-lambda ((g$q$20435) (if g$q$20435 (begin '#f ((case-lambda ((g$r$20437) (if g$r$20437 (begin '#f (append g$q$20435 g$r$20437)) '#f))) ((case-lambda ((g$x$20439) (if (equal? (g$stx->datum$14535 g$x$20439) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20433)))) '#f))) ((case-lambda ((g$x$20441) (if (equal? (g$stx->datum$14535 g$x$20441) '#t) (begin '#f '()) '#f))) (g$syntax-car$14509 g$x$20433)))) '#f))) (g$syntax-cdr$14513 g$x$20427)))) '#f))) ((case-lambda ((g$x$20443) '())) (g$syntax-car$14509 g$x$20427)))) '#f))) g$t$20417)))) (g$get-clause$19675 'sealed? g$clause*$20249)) ((case-lambda ((g$t$20445) ((case-lambda ((g$ls/false$20447) (if (if g$ls/false$20447 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20447)) '#f) (apply (case-lambda (() '#t)) g$ls/false$20447) ((case-lambda ((g$t$20449) ((case-lambda ((g$ls/false$20451) (if (if g$ls/false$20451 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20451)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20451) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20449 '()))))) ((case-lambda ((g$x$20453) '())) g$t$20449)))) g$t$20445)))) ((case-lambda ((g$x$20455) (if (g$syntax-pair?$14501 g$x$20455) (begin '#f ((case-lambda ((g$q$20457) (if g$q$20457 (begin '#f ((case-lambda ((g$r$20459) (if g$r$20459 (begin '#f (append g$q$20457 g$r$20459)) '#f))) ((case-lambda ((g$x$20461) (if (g$syntax-pair?$14501 g$x$20461) (begin '#f ((case-lambda ((g$q$20463) (if g$q$20463 (begin '#f ((case-lambda ((g$r$20465) (if g$r$20465 (begin '#f (append g$q$20463 g$r$20465)) '#f))) ((case-lambda ((g$x$20467) (if (equal? (g$stx->datum$14535 g$x$20467) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20461)))) '#f))) ((case-lambda ((g$x$20469) (if (equal? (g$stx->datum$14535 g$x$20469) '#t) (begin '#f '()) '#f))) (g$syntax-car$14509 g$x$20461)))) '#f))) (g$syntax-cdr$14513 g$x$20455)))) '#f))) ((case-lambda ((g$x$20471) '())) (g$syntax-car$14509 g$x$20455)))) '#f))) g$t$20445)))) (g$get-clause$19675 'opaque? g$clause*$20249)) ((case-lambda ((g$t$20473) ((case-lambda ((g$ls/false$20475) (if (if g$ls/false$20475 (begin '#f (apply (case-lambda ((g$field-spec*$20477) '#t)) g$ls/false$20475)) '#f) (apply (case-lambda ((g$field-spec*$20479) (list 'quote (g$convert-field-spec*$20253 g$field-spec*$20479)))) g$ls/false$20475) ((case-lambda ((g$t$20481) ((case-lambda ((g$ls/false$20483) (if (if g$ls/false$20483 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20483)) '#f) (apply (case-lambda (() ''#())) g$ls/false$20483) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20481 '()))))) ((case-lambda ((g$x$20485) '())) g$t$20481)))) g$t$20473)))) ((case-lambda ((g$x$20487) (if (g$syntax-pair?$14501 g$x$20487) (begin '#f ((case-lambda ((g$q$20489) (if g$q$20489 (begin '#f ((case-lambda ((g$r$20491) (if g$r$20491 (begin '#f (append g$q$20489 g$r$20491)) '#f))) ((letrec ((g$f$20493 (case-lambda ((g$x$20495) (if (g$syntax-pair?$14501 g$x$20495) ((case-lambda ((g$cars/f$20497) (if g$cars/f$20497 (begin '#f ((case-lambda ((g$cdrs/f$20499) (if g$cdrs/f$20499 (begin '#f (map cons g$cars/f$20497 g$cdrs/f$20499)) '#f))) (g$f$20493 (g$syntax-cdr$14513 g$x$20495)))) '#f))) ((case-lambda ((g$x$20501) (list g$x$20501))) (g$syntax-car$14509 g$x$20495))) (if (g$syntax-null?$14505 g$x$20495) (list (begin 'field-spec* '())) '#f)))))) g$f$20493) (g$syntax-cdr$14513 g$x$20487)))) '#f))) ((case-lambda ((g$x$20503) '())) (g$syntax-car$14509 g$x$20487)))) '#f))) g$t$20473)))) (g$get-clause$19675 'fields g$clause*$20249)))))) '#f)))) (set! g$foo-rcd-code$19679 (case-lambda ((g$clause*$20207 g$foo-rtd$20208 g$protocol$20209) ((case-lambda ((g$parent-rcd-code$20213) (list 'make-record-constructor-descriptor g$foo-rtd$20208 g$parent-rcd-code$20213 g$protocol$20209))) ((case-lambda ((g$t$20215) ((case-lambda ((g$ls/false$20217) (if (if g$ls/false$20217 (begin '#f (apply (case-lambda ((g$name$20219) '#t)) g$ls/false$20217)) '#f) (apply (case-lambda ((g$name$20221) (list 'record-constructor-descriptor g$name$20221))) g$ls/false$20217) ((case-lambda ((g$t$20223) ((case-lambda ((g$ls/false$20225) (if (if g$ls/false$20225 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20225)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20225) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20223 '()))))) ((case-lambda ((g$x$20227) '())) g$t$20223)))) g$t$20215)))) ((case-lambda ((g$x$20229) (if (g$syntax-pair?$14501 g$x$20229) (begin '#f ((case-lambda ((g$q$20231) (if g$q$20231 (begin '#f ((case-lambda ((g$r$20233) (if g$r$20233 (begin '#f (append g$q$20231 g$r$20233)) '#f))) ((case-lambda ((g$x$20235) (if (g$syntax-pair?$14501 g$x$20235) (begin '#f ((case-lambda ((g$q$20237) (if g$q$20237 (begin '#f ((case-lambda ((g$r$20239) (if g$r$20239 (begin '#f (append g$q$20237 g$r$20239)) '#f))) ((case-lambda ((g$x$20241) (if (equal? (g$stx->datum$14535 g$x$20241) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20235)))) '#f))) ((case-lambda ((g$x$20243) (list g$x$20243))) (g$syntax-car$14509 g$x$20235)))) '#f))) (g$syntax-cdr$14513 g$x$20229)))) '#f))) ((case-lambda ((g$x$20245) '())) (g$syntax-car$14509 g$x$20229)))) '#f))) g$t$20215)))) (g$get-clause$19675 'parent g$clause*$20207)))))) (set! g$get-protocol-code$19681 (case-lambda ((g$clause*$20173) ((case-lambda ((g$t$20175) ((case-lambda ((g$ls/false$20177) (if (if g$ls/false$20177 (begin '#f (apply (case-lambda ((g$expr$20179) '#t)) g$ls/false$20177)) '#f) (apply (case-lambda ((g$expr$20181) g$expr$20181)) g$ls/false$20177) ((case-lambda ((g$t$20183) ((case-lambda ((g$ls/false$20185) (if (if g$ls/false$20185 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20185)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20185) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20183 '()))))) ((case-lambda ((g$x$20187) '())) g$t$20183)))) g$t$20175)))) ((case-lambda ((g$x$20189) (if (g$syntax-pair?$14501 g$x$20189) (begin '#f ((case-lambda ((g$q$20191) (if g$q$20191 (begin '#f ((case-lambda ((g$r$20193) (if g$r$20193 (begin '#f (append g$q$20191 g$r$20193)) '#f))) ((case-lambda ((g$x$20195) (if (g$syntax-pair?$14501 g$x$20195) (begin '#f ((case-lambda ((g$q$20197) (if g$q$20197 (begin '#f ((case-lambda ((g$r$20199) (if g$r$20199 (begin '#f (append g$q$20197 g$r$20199)) '#f))) ((case-lambda ((g$x$20201) (if (equal? (g$stx->datum$14535 g$x$20201) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20195)))) '#f))) ((case-lambda ((g$x$20203) (list g$x$20203))) (g$syntax-car$14509 g$x$20195)))) '#f))) (g$syntax-cdr$14513 g$x$20189)))) '#f))) ((case-lambda ((g$x$20205) '())) (g$syntax-car$14509 g$x$20189)))) '#f))) g$t$20175)))) (g$get-clause$19675 'protocol g$clause*$20173))))) (set! g$get-fields$19683 (case-lambda ((g$clause*$20113) ((case-lambda ((g$t$20115) ((case-lambda ((g$ls/false$20117) (if (if g$ls/false$20117 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20117)) '#f) (apply (case-lambda (() '())) g$ls/false$20117) ((case-lambda ((g$t$20119) ((case-lambda ((g$ls/false$20121) (if (if g$ls/false$20121 (begin '#f (apply (case-lambda ((g$f*$20123) '#t)) g$ls/false$20121)) '#f) (apply (case-lambda ((g$f*$20125) g$f*$20125)) g$ls/false$20121) ((case-lambda ((g$t$20127) ((case-lambda ((g$ls/false$20129) (if (if g$ls/false$20129 (begin '#f (apply (case-lambda ((g$rest$20131) '#t)) g$ls/false$20129)) '#f) (apply (case-lambda ((g$rest$20133) (g$get-fields$19683 g$rest$20133))) g$ls/false$20129) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20127 '()))))) ((case-lambda ((g$x$20135) (if (g$syntax-pair?$14501 g$x$20135) (begin '#f ((case-lambda ((g$q$20137) (if g$q$20137 (begin '#f ((case-lambda ((g$r$20139) (if g$r$20139 (begin '#f (append g$q$20137 g$r$20139)) '#f))) ((case-lambda ((g$x$20141) (list g$x$20141))) (g$syntax-cdr$14513 g$x$20135)))) '#f))) ((case-lambda ((g$x$20143) '())) (g$syntax-car$14509 g$x$20135)))) '#f))) g$t$20127)))) g$t$20119)))) ((case-lambda ((g$x$20145) (if (g$syntax-pair?$14501 g$x$20145) (begin '#f ((case-lambda ((g$q$20147) (if g$q$20147 (begin '#f ((case-lambda ((g$r$20149) (if g$r$20149 (begin '#f (append g$q$20147 g$r$20149)) '#f))) ((case-lambda ((g$x$20151) '())) (g$syntax-cdr$14513 g$x$20145)))) '#f))) ((case-lambda ((g$x$20153) (if (g$syntax-pair?$14501 g$x$20153) (begin '#f ((case-lambda ((g$q$20155) (if g$q$20155 (begin '#f ((case-lambda ((g$r$20157) (if g$r$20157 (begin '#f (append g$q$20155 g$r$20157)) '#f))) ((letrec ((g$f$20159 (case-lambda ((g$x$20161) (if (g$syntax-pair?$14501 g$x$20161) ((case-lambda ((g$cars/f$20163) (if g$cars/f$20163 (begin '#f ((case-lambda ((g$cdrs/f$20165) (if g$cdrs/f$20165 (begin '#f (map cons g$cars/f$20163 g$cdrs/f$20165)) '#f))) (g$f$20159 (g$syntax-cdr$14513 g$x$20161)))) '#f))) ((case-lambda ((g$x$20167) (list g$x$20167))) (g$syntax-car$14509 g$x$20161))) (if (g$syntax-null?$14505 g$x$20161) (list (begin 'f* '())) '#f)))))) g$f$20159) (g$syntax-cdr$14513 g$x$20153)))) '#f))) ((case-lambda ((g$x$20169) (if (g$id?$14515 g$x$20169) (if (g$free-id=?$14523 g$x$20169 (g$scheme-stx$14944 'fields)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$20153)))) '#f))) (g$syntax-car$14509 g$x$20145)))) '#f))) g$t$20119)))) g$t$20115)))) ((case-lambda ((g$x$20171) (if (equal? (g$stx->datum$14535 g$x$20171) '()) (begin '#f '()) '#f))) g$t$20115)))) g$clause*$20113)))) (set! g$get-mutator-indices$19685 (case-lambda ((g$fields$20055) (letrec ((g$f$20057 (case-lambda ((g$fields$20059 g$i$20060) ((case-lambda ((g$t$20063) ((case-lambda ((g$ls/false$20065) (if (if g$ls/false$20065 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20065)) '#f) (apply (case-lambda (() '())) g$ls/false$20065) ((case-lambda ((g$t$20067) ((case-lambda ((g$ls/false$20069) (if (if g$ls/false$20069 (begin '#f (apply (case-lambda ((g$rest$20071) '#t)) g$ls/false$20069)) '#f) (apply (case-lambda ((g$rest$20073) (cons g$i$20060 (g$f$20057 g$rest$20073 (+ g$i$20060 '1))))) g$ls/false$20069) ((case-lambda ((g$t$20075) ((case-lambda ((g$ls/false$20077) (if (if g$ls/false$20077 (begin '#f (apply (case-lambda ((g$rest$20079) '#t)) g$ls/false$20077)) '#f) (apply (case-lambda ((g$rest$20081) (g$f$20057 g$rest$20081 (+ g$i$20060 '1)))) g$ls/false$20077) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20075 '()))))) ((case-lambda ((g$x$20083) (if (g$syntax-pair?$14501 g$x$20083) (begin '#f ((case-lambda ((g$q$20085) (if g$q$20085 (begin '#f ((case-lambda ((g$r$20087) (if g$r$20087 (begin '#f (append g$q$20085 g$r$20087)) '#f))) ((case-lambda ((g$x$20089) (list g$x$20089))) (g$syntax-cdr$14513 g$x$20083)))) '#f))) ((case-lambda ((g$x$20091) '())) (g$syntax-car$14509 g$x$20083)))) '#f))) g$t$20075)))) g$t$20067)))) ((case-lambda ((g$x$20093) (if (g$syntax-pair?$14501 g$x$20093) (begin '#f ((case-lambda ((g$q$20095) (if g$q$20095 (begin '#f ((case-lambda ((g$r$20097) (if g$r$20097 (begin '#f (append g$q$20095 g$r$20097)) '#f))) ((case-lambda ((g$x$20099) (list g$x$20099))) (g$syntax-cdr$14513 g$x$20093)))) '#f))) ((case-lambda ((g$x$20101) (if (g$syntax-pair?$14501 g$x$20101) (begin '#f ((case-lambda ((g$q$20103) (if g$q$20103 (begin '#f ((case-lambda ((g$r$20105) (if g$r$20105 (begin '#f (append g$q$20103 g$r$20105)) '#f))) ((case-lambda ((g$x$20107) '())) (g$syntax-cdr$14513 g$x$20101)))) '#f))) ((case-lambda ((g$x$20109) (if (g$id?$14515 g$x$20109) (if (g$free-id=?$14523 g$x$20109 (g$scheme-stx$14944 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$20101)))) '#f))) (g$syntax-car$14509 g$x$20093)))) '#f))) g$t$20067)))) g$t$20063)))) ((case-lambda ((g$x$20111) (if (equal? (g$stx->datum$14535 g$x$20111) '()) (begin '#f '()) '#f))) g$t$20063)))) g$fields$20059))))) (g$f$20057 g$fields$20055 '0))))) (set! g$get-mutators$19687 (case-lambda ((g$foo$19917 g$fields$19918 g$ctxt$19919) ((case-lambda ((g$gen-name$19923) (begin (set! g$gen-name$19923 (case-lambda ((g$x$19925) (g$datum->syntax$15171 g$ctxt$19919 (string->symbol (string-append '"set-" (symbol->string (g$syntax->datum$15173 g$foo$19917)) '"-" (symbol->string (g$syntax->datum$15173 g$x$19925)) '"!")))))) (letrec ((g$f$19927 (case-lambda ((g$fields$19929) ((case-lambda ((g$t$19931) ((case-lambda ((g$ls/false$19933) (if (if g$ls/false$19933 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19933)) '#f) (apply (case-lambda (() '())) g$ls/false$19933) ((case-lambda ((g$t$19935) ((case-lambda ((g$ls/false$19937) (if (if g$ls/false$19937 (begin '#f (apply (case-lambda ((g$name$19939 g$accessor$19940 g$mutator$19941 g$rest$19942) '#t)) g$ls/false$19937)) '#f) (apply (case-lambda ((g$name$19947 g$accessor$19948 g$mutator$19949 g$rest$19950) (cons g$mutator$19949 (g$f$19927 g$rest$19950)))) g$ls/false$19937) ((case-lambda ((g$t$19955) ((case-lambda ((g$ls/false$19957) (if (if g$ls/false$19957 (begin '#f (apply (case-lambda ((g$name$19959 g$rest$19960) '#t)) g$ls/false$19957)) '#f) (apply (case-lambda ((g$name$19963 g$rest$19964) (cons (g$gen-name$19923 g$name$19963) (g$f$19927 g$rest$19964)))) g$ls/false$19957) ((case-lambda ((g$t$19967) ((case-lambda ((g$ls/false$19969) (if (if g$ls/false$19969 (begin '#f (apply (case-lambda ((g$rest$19971) '#t)) g$ls/false$19969)) '#f) (apply (case-lambda ((g$rest$19973) (g$f$19927 g$rest$19973))) g$ls/false$19969) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19967 '()))))) ((case-lambda ((g$x$19975) (if (g$syntax-pair?$14501 g$x$19975) (begin '#f ((case-lambda ((g$q$19977) (if g$q$19977 (begin '#f ((case-lambda ((g$r$19979) (if g$r$19979 (begin '#f (append g$q$19977 g$r$19979)) '#f))) ((case-lambda ((g$x$19981) (list g$x$19981))) (g$syntax-cdr$14513 g$x$19975)))) '#f))) ((case-lambda ((g$x$19983) '())) (g$syntax-car$14509 g$x$19975)))) '#f))) g$t$19967)))) g$t$19955)))) ((case-lambda ((g$x$19985) (if (g$syntax-pair?$14501 g$x$19985) (begin '#f ((case-lambda ((g$q$19987) (if g$q$19987 (begin '#f ((case-lambda ((g$r$19989) (if g$r$19989 (begin '#f (append g$q$19987 g$r$19989)) '#f))) ((case-lambda ((g$x$19991) (list g$x$19991))) (g$syntax-cdr$14513 g$x$19985)))) '#f))) ((case-lambda ((g$x$19993) (if (g$syntax-pair?$14501 g$x$19993) (begin '#f ((case-lambda ((g$q$19995) (if g$q$19995 (begin '#f ((case-lambda ((g$r$19997) (if g$r$19997 (begin '#f (append g$q$19995 g$r$19997)) '#f))) ((case-lambda ((g$x$19999) (if (g$syntax-pair?$14501 g$x$19999) (begin '#f ((case-lambda ((g$q$20001) (if g$q$20001 (begin '#f ((case-lambda ((g$r$20003) (if g$r$20003 (begin '#f (append g$q$20001 g$r$20003)) '#f))) ((case-lambda ((g$x$20005) (if (equal? (g$stx->datum$14535 g$x$20005) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19999)))) '#f))) ((case-lambda ((g$x$20007) (list g$x$20007))) (g$syntax-car$14509 g$x$19999)))) '#f))) (g$syntax-cdr$14513 g$x$19993)))) '#f))) ((case-lambda ((g$x$20009) (if (g$id?$14515 g$x$20009) (if (g$free-id=?$14523 g$x$20009 (g$scheme-stx$14944 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19993)))) '#f))) (g$syntax-car$14509 g$x$19985)))) '#f))) g$t$19955)))) g$t$19935)))) ((case-lambda ((g$x$20011) (if (g$syntax-pair?$14501 g$x$20011) (begin '#f ((case-lambda ((g$q$20013) (if g$q$20013 (begin '#f ((case-lambda ((g$r$20015) (if g$r$20015 (begin '#f (append g$q$20013 g$r$20015)) '#f))) ((case-lambda ((g$x$20017) (list g$x$20017))) (g$syntax-cdr$14513 g$x$20011)))) '#f))) ((case-lambda ((g$x$20019) (if (g$syntax-pair?$14501 g$x$20019) (begin '#f ((case-lambda ((g$q$20021) (if g$q$20021 (begin '#f ((case-lambda ((g$r$20023) (if g$r$20023 (begin '#f (append g$q$20021 g$r$20023)) '#f))) ((case-lambda ((g$x$20025) (if (g$syntax-pair?$14501 g$x$20025) (begin '#f ((case-lambda ((g$q$20027) (if g$q$20027 (begin '#f ((case-lambda ((g$r$20029) (if g$r$20029 (begin '#f (append g$q$20027 g$r$20029)) '#f))) ((case-lambda ((g$x$20031) (if (g$syntax-pair?$14501 g$x$20031) (begin '#f ((case-lambda ((g$q$20033) (if g$q$20033 (begin '#f ((case-lambda ((g$r$20035) (if g$r$20035 (begin '#f (append g$q$20033 g$r$20035)) '#f))) ((case-lambda ((g$x$20037) (if (g$syntax-pair?$14501 g$x$20037) (begin '#f ((case-lambda ((g$q$20039) (if g$q$20039 (begin '#f ((case-lambda ((g$r$20041) (if g$r$20041 (begin '#f (append g$q$20039 g$r$20041)) '#f))) ((case-lambda ((g$x$20043) (if (equal? (g$stx->datum$14535 g$x$20043) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20037)))) '#f))) ((case-lambda ((g$x$20045) (list g$x$20045))) (g$syntax-car$14509 g$x$20037)))) '#f))) (g$syntax-cdr$14513 g$x$20031)))) '#f))) ((case-lambda ((g$x$20047) (list g$x$20047))) (g$syntax-car$14509 g$x$20031)))) '#f))) (g$syntax-cdr$14513 g$x$20025)))) '#f))) ((case-lambda ((g$x$20049) (list g$x$20049))) (g$syntax-car$14509 g$x$20025)))) '#f))) (g$syntax-cdr$14513 g$x$20019)))) '#f))) ((case-lambda ((g$x$20051) (if (g$id?$14515 g$x$20051) (if (g$free-id=?$14523 g$x$20051 (g$scheme-stx$14944 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$20019)))) '#f))) (g$syntax-car$14509 g$x$20011)))) '#f))) g$t$19935)))) g$t$19931)))) ((case-lambda ((g$x$20053) (if (equal? (g$stx->datum$14535 g$x$20053) '()) (begin '#f '()) '#f))) g$t$19931)))) g$fields$19929))))) (g$f$19927 g$fields$19918))))) '#f)))) (set! g$get-accessors$19689 (case-lambda ((g$foo$19745 g$fields$19746 g$ctxt$19747) ((case-lambda ((g$gen-name$19751) (begin (set! g$gen-name$19751 (case-lambda ((g$x$19753) (g$datum->syntax$15171 g$ctxt$19747 (string->symbol (string-append (symbol->string (g$syntax->datum$15173 g$foo$19745)) '"-" (symbol->string (g$syntax->datum$15173 g$x$19753)))))))) (map (case-lambda ((g$field$19755) ((case-lambda ((g$t$19757) ((case-lambda ((g$ls/false$19759) (if (if g$ls/false$19759 (begin '#f (apply (case-lambda ((g$name$19761 g$accessor$19762 g$mutator$19763) (g$id?$14515 g$accessor$19762))) g$ls/false$19759)) '#f) (apply (case-lambda ((g$name$19767 g$accessor$19768 g$mutator$19769) g$accessor$19768)) g$ls/false$19759) ((case-lambda ((g$t$19773) ((case-lambda ((g$ls/false$19775) (if (if g$ls/false$19775 (begin '#f (apply (case-lambda ((g$name$19777 g$accessor$19778) (g$id?$14515 g$accessor$19778))) g$ls/false$19775)) '#f) (apply (case-lambda ((g$name$19781 g$accessor$19782) g$accessor$19782)) g$ls/false$19775) ((case-lambda ((g$t$19785) ((case-lambda ((g$ls/false$19787) (if (if g$ls/false$19787 (begin '#f (apply (case-lambda ((g$name$19789) (g$id?$14515 g$name$19789))) g$ls/false$19787)) '#f) (apply (case-lambda ((g$name$19791) (g$gen-name$19751 g$name$19791))) g$ls/false$19787) ((case-lambda ((g$t$19793) ((case-lambda ((g$ls/false$19795) (if (if g$ls/false$19795 (begin '#f (apply (case-lambda ((g$name$19797) (g$id?$14515 g$name$19797))) g$ls/false$19795)) '#f) (apply (case-lambda ((g$name$19799) (g$gen-name$19751 g$name$19799))) g$ls/false$19795) ((case-lambda ((g$t$19801) ((case-lambda ((g$ls/false$19803) (if (if g$ls/false$19803 (begin '#f (apply (case-lambda ((g$name$19805) (g$id?$14515 g$name$19805))) g$ls/false$19803)) '#f) (apply (case-lambda ((g$name$19807) (g$gen-name$19751 g$name$19807))) g$ls/false$19803) ((case-lambda ((g$t$19809) ((case-lambda ((g$ls/false$19811) (if (if g$ls/false$19811 (begin '#f (apply (case-lambda ((g$others$19813) '#t)) g$ls/false$19811)) '#f) (apply (case-lambda ((g$others$19815) (error 'expander '"invalid field spec" (g$strip$14533 g$field$19755 '())))) g$ls/false$19811) (error 'expander '"invalid syntax" (g$strip$14533 g$t$19809 '()))))) ((case-lambda ((g$x$19817) (list g$x$19817))) g$t$19809)))) g$t$19801)))) ((case-lambda ((g$x$19819) (list g$x$19819))) g$t$19801)))) g$t$19793)))) ((case-lambda ((g$x$19821) (if (g$syntax-pair?$14501 g$x$19821) (begin '#f ((case-lambda ((g$q$19823) (if g$q$19823 (begin '#f ((case-lambda ((g$r$19825) (if g$r$19825 (begin '#f (append g$q$19823 g$r$19825)) '#f))) ((case-lambda ((g$x$19827) (if (g$syntax-pair?$14501 g$x$19827) (begin '#f ((case-lambda ((g$q$19829) (if g$q$19829 (begin '#f ((case-lambda ((g$r$19831) (if g$r$19831 (begin '#f (append g$q$19829 g$r$19831)) '#f))) ((case-lambda ((g$x$19833) (if (equal? (g$stx->datum$14535 g$x$19833) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19827)))) '#f))) ((case-lambda ((g$x$19835) (list g$x$19835))) (g$syntax-car$14509 g$x$19827)))) '#f))) (g$syntax-cdr$14513 g$x$19821)))) '#f))) ((case-lambda ((g$x$19837) (if (g$id?$14515 g$x$19837) (if (g$free-id=?$14523 g$x$19837 (g$scheme-stx$14944 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19821)))) '#f))) g$t$19793)))) g$t$19785)))) ((case-lambda ((g$x$19839) (if (g$syntax-pair?$14501 g$x$19839) (begin '#f ((case-lambda ((g$q$19841) (if g$q$19841 (begin '#f ((case-lambda ((g$r$19843) (if g$r$19843 (begin '#f (append g$q$19841 g$r$19843)) '#f))) ((case-lambda ((g$x$19845) (if (g$syntax-pair?$14501 g$x$19845) (begin '#f ((case-lambda ((g$q$19847) (if g$q$19847 (begin '#f ((case-lambda ((g$r$19849) (if g$r$19849 (begin '#f (append g$q$19847 g$r$19849)) '#f))) ((case-lambda ((g$x$19851) (if (equal? (g$stx->datum$14535 g$x$19851) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19845)))) '#f))) ((case-lambda ((g$x$19853) (list g$x$19853))) (g$syntax-car$14509 g$x$19845)))) '#f))) (g$syntax-cdr$14513 g$x$19839)))) '#f))) ((case-lambda ((g$x$19855) (if (g$id?$14515 g$x$19855) (if (g$free-id=?$14523 g$x$19855 (g$scheme-stx$14944 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19839)))) '#f))) g$t$19785)))) g$t$19773)))) ((case-lambda ((g$x$19857) (if (g$syntax-pair?$14501 g$x$19857) (begin '#f ((case-lambda ((g$q$19859) (if g$q$19859 (begin '#f ((case-lambda ((g$r$19861) (if g$r$19861 (begin '#f (append g$q$19859 g$r$19861)) '#f))) ((case-lambda ((g$x$19863) (if (g$syntax-pair?$14501 g$x$19863) (begin '#f ((case-lambda ((g$q$19865) (if g$q$19865 (begin '#f ((case-lambda ((g$r$19867) (if g$r$19867 (begin '#f (append g$q$19865 g$r$19867)) '#f))) ((case-lambda ((g$x$19869) (if (g$syntax-pair?$14501 g$x$19869) (begin '#f ((case-lambda ((g$q$19871) (if g$q$19871 (begin '#f ((case-lambda ((g$r$19873) (if g$r$19873 (begin '#f (append g$q$19871 g$r$19873)) '#f))) ((case-lambda ((g$x$19875) (if (equal? (g$stx->datum$14535 g$x$19875) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19869)))) '#f))) ((case-lambda ((g$x$19877) (list g$x$19877))) (g$syntax-car$14509 g$x$19869)))) '#f))) (g$syntax-cdr$14513 g$x$19863)))) '#f))) ((case-lambda ((g$x$19879) (list g$x$19879))) (g$syntax-car$14509 g$x$19863)))) '#f))) (g$syntax-cdr$14513 g$x$19857)))) '#f))) ((case-lambda ((g$x$19881) (if (g$id?$14515 g$x$19881) (if (g$free-id=?$14523 g$x$19881 (g$scheme-stx$14944 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19857)))) '#f))) g$t$19773)))) g$t$19757)))) ((case-lambda ((g$x$19883) (if (g$syntax-pair?$14501 g$x$19883) (begin '#f ((case-lambda ((g$q$19885) (if g$q$19885 (begin '#f ((case-lambda ((g$r$19887) (if g$r$19887 (begin '#f (append g$q$19885 g$r$19887)) '#f))) ((case-lambda ((g$x$19889) (if (g$syntax-pair?$14501 g$x$19889) (begin '#f ((case-lambda ((g$q$19891) (if g$q$19891 (begin '#f ((case-lambda ((g$r$19893) (if g$r$19893 (begin '#f (append g$q$19891 g$r$19893)) '#f))) ((case-lambda ((g$x$19895) (if (g$syntax-pair?$14501 g$x$19895) (begin '#f ((case-lambda ((g$q$19897) (if g$q$19897 (begin '#f ((case-lambda ((g$r$19899) (if g$r$19899 (begin '#f (append g$q$19897 g$r$19899)) '#f))) ((case-lambda ((g$x$19901) (if (g$syntax-pair?$14501 g$x$19901) (begin '#f ((case-lambda ((g$q$19903) (if g$q$19903 (begin '#f ((case-lambda ((g$r$19905) (if g$r$19905 (begin '#f (append g$q$19903 g$r$19905)) '#f))) ((case-lambda ((g$x$19907) (if (equal? (g$stx->datum$14535 g$x$19907) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$19901)))) '#f))) ((case-lambda ((g$x$19909) (list g$x$19909))) (g$syntax-car$14509 g$x$19901)))) '#f))) (g$syntax-cdr$14513 g$x$19895)))) '#f))) ((case-lambda ((g$x$19911) (list g$x$19911))) (g$syntax-car$14509 g$x$19895)))) '#f))) (g$syntax-cdr$14513 g$x$19889)))) '#f))) ((case-lambda ((g$x$19913) (list g$x$19913))) (g$syntax-car$14509 g$x$19889)))) '#f))) (g$syntax-cdr$14513 g$x$19883)))) '#f))) ((case-lambda ((g$x$19915) (if (g$id?$14515 g$x$19915) (if (g$free-id=?$14523 g$x$19915 (g$scheme-stx$14944 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14509 g$x$19883)))) '#f))) g$t$19757)))) g$field$19755))) g$fields$19746)))) '#f)))) (set! g$enumerate$19691 (case-lambda ((g$ls$19737) (letrec ((g$f$19739 (case-lambda ((g$ls$19741 g$i$19742) (if (null? g$ls$19741) '() (cons g$i$19742 (g$f$19739 (cdr g$ls$19741) (+ g$i$19742 '1)))))))) (g$f$19739 g$ls$19737 '0))))) (set! g$do-define-record$19693 (case-lambda ((g$ctxt$19695 g$namespec$19696 g$clause*$19697) ((case-lambda ((g$foo$19701) ((case-lambda ((g$foo-rtd$19703) ((case-lambda ((g$foo-rcd$19705) ((case-lambda ((g$protocol$19707) ((case-lambda ((g$make-foo$19709) ((case-lambda ((g$fields$19711) ((case-lambda ((g$idx*$19713) ((case-lambda ((g$foo-x*$19715) ((case-lambda ((g$set-foo-x!*$19717) ((case-lambda ((g$set-foo-idx*$19719) ((case-lambda ((g$foo?$19721) ((case-lambda ((g$foo-rtd-code$19723) ((case-lambda ((g$foo-rcd-code$19725) ((case-lambda ((g$protocol-code$19727) ((case-lambda (() (g$bless$14978 (cons 'begin (cons (list 'define g$foo-rtd$19703 g$foo-rtd-code$19723) (cons (list 'define g$protocol$19707 g$protocol-code$19727) (cons (list 'define g$foo-rcd$19705 g$foo-rcd-code$19725) (cons (list 'define-syntax g$foo$19701 (list 'list ''$rtd (list 'syntax g$foo-rtd$19703) (list 'syntax g$foo-rcd$19705))) (cons (list 'define g$foo?$19721 (list 'record-predicate g$foo-rtd$19703)) (cons (list 'define g$make-foo$19709 (list 'record-constructor g$foo-rcd$19705)) (append (map (case-lambda ((g$foo-x$19729 g$idx$19730) (list 'define g$foo-x$19729 (list 'record-accessor g$foo-rtd$19703 g$idx$19730)))) g$foo-x*$19715 g$idx*$19713) (map (case-lambda ((g$set-foo-x!$19733 g$idx$19734) (list 'define g$set-foo-x!$19733 (list 'record-mutator g$foo-rtd$19703 g$idx$19734)))) g$set-foo-x!*$19717 g$set-foo-idx*$19719))))))))))))))) (g$get-protocol-code$19681 g$clause*$19697)))) (g$foo-rcd-code$19679 g$clause*$19697 g$foo-rtd$19703 g$protocol$19707)))) (g$foo-rtd-code$19677 g$ctxt$19695 g$foo$19701 g$clause*$19697)))) (g$get-record-predicate-name$19673 g$namespec$19696 g$ctxt$19695)))) (g$get-mutator-indices$19685 g$fields$19711)))) (g$get-mutators$19687 g$foo$19701 g$fields$19711 g$ctxt$19695)))) (g$get-accessors$19689 g$foo$19701 g$fields$19711 g$ctxt$19695)))) (g$enumerate$19691 g$fields$19711)))) (g$get-fields$19683 g$clause*$19697)))) (g$get-record-constructor-name$19671 g$namespec$19696 g$ctxt$19695)))) (gensym)))) (gensym)))) (gensym)))) (g$get-record-name$19669 g$namespec$19696))))) ((case-lambda ((g$t$20721) ((case-lambda ((g$ls/false$20723) (if (if g$ls/false$20723 (begin '#f (apply (case-lambda ((g$ctxt$20725 g$namespec$20726 g$clause*$20727) '#t)) g$ls/false$20723)) '#f) (apply (case-lambda ((g$ctxt$20731 g$namespec$20732 g$clause*$20733) (g$do-define-record$19693 g$ctxt$20731 g$namespec$20732 g$clause*$20733))) g$ls/false$20723) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20721 '()))))) ((case-lambda ((g$x$20737) (if (g$syntax-pair?$14501 g$x$20737) (begin '#f ((case-lambda ((g$q$20739) (if g$q$20739 (begin '#f ((case-lambda ((g$r$20741) (if g$r$20741 (begin '#f (append g$q$20739 g$r$20741)) '#f))) ((case-lambda ((g$x$20743) (if (g$syntax-pair?$14501 g$x$20743) (begin '#f ((case-lambda ((g$q$20745) (if g$q$20745 (begin '#f ((case-lambda ((g$r$20747) (if g$r$20747 (begin '#f (append g$q$20745 g$r$20747)) '#f))) ((letrec ((g$f$20749 (case-lambda ((g$x$20751) (if (g$syntax-pair?$14501 g$x$20751) ((case-lambda ((g$cars/f$20753) (if g$cars/f$20753 (begin '#f ((case-lambda ((g$cdrs/f$20755) (if g$cdrs/f$20755 (begin '#f (map cons g$cars/f$20753 g$cdrs/f$20755)) '#f))) (g$f$20749 (g$syntax-cdr$14513 g$x$20751)))) '#f))) ((case-lambda ((g$x$20757) (list g$x$20757))) (g$syntax-car$14509 g$x$20751))) (if (g$syntax-null?$14505 g$x$20751) (list (begin 'clause* '())) '#f)))))) g$f$20749) (g$syntax-cdr$14513 g$x$20743)))) '#f))) ((case-lambda ((g$x$20759) (list g$x$20759))) (g$syntax-car$14509 g$x$20743)))) '#f))) (g$syntax-cdr$14513 g$x$20737)))) '#f))) ((case-lambda ((g$x$20761) (list g$x$20761))) (g$syntax-car$14509 g$x$20737)))) '#f))) g$t$20721)))) g$x$19665)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$define-condition-type-macro$15024 (case-lambda ((g$x$20763) ((case-lambda ((g$mkname$20765) (begin (set! g$mkname$20765 (case-lambda ((g$name$20767 g$suffix$20768) (g$datum->syntax$15171 g$name$20767 (string->symbol (string-append (symbol->string (g$syntax->datum$15173 g$name$20767)) g$suffix$20768)))))) ((case-lambda ((g$t$20771) ((case-lambda ((g$ls/false$20773) (if (if g$ls/false$20773 (begin '#f (apply (case-lambda ((g$ctxt$20775 g$name$20776 g$super$20777 g$constructor$20778 g$predicate$20779 g$field*$20780 g$accessor*$20781) (if (g$id?$14515 g$name$20776) (if (g$id?$14515 g$super$20777) (if (g$id?$14515 g$constructor$20778) (if (g$id?$14515 g$predicate$20779) (if (for-all g$id?$14515 g$field*$20780) (begin '#f (for-all g$id?$14515 g$accessor*$20781)) '#f) '#f) '#f) '#f) '#f))) g$ls/false$20773)) '#f) (apply (case-lambda ((g$ctxt$20789 g$name$20790 g$super$20791 g$constructor$20792 g$predicate$20793 g$field*$20794 g$accessor*$20795) ((case-lambda ((g$aux-accessor*$20803) (g$bless$14978 (cons 'begin (cons (cons 'define-record-type (cons (list g$name$20790 g$constructor$20792 (gensym)) (cons (list 'parent g$super$20791) (cons (cons 'fields (map (case-lambda ((g$field$20805 g$aux$20806) (list 'immutable g$field$20805 g$aux$20806))) g$field*$20794 g$aux-accessor*$20803)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g$predicate$20793 (list 'condition-predicate (list 'record-type-descriptor g$name$20790))) (map (case-lambda ((g$accessor$20809 g$aux$20810) (list 'define g$accessor$20809 (list 'condition-accessor (list 'record-type-descriptor g$name$20790) g$aux$20810)))) g$accessor*$20795 g$aux-accessor*$20803))))))) (map (case-lambda ((g$x$20813) (gensym))) g$accessor*$20795)))) g$ls/false$20773) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20771 '()))))) ((case-lambda ((g$x$20815) (if (g$syntax-pair?$14501 g$x$20815) (begin '#f ((case-lambda ((g$q$20817) (if g$q$20817 (begin '#f ((case-lambda ((g$r$20819) (if g$r$20819 (begin '#f (append g$q$20817 g$r$20819)) '#f))) ((case-lambda ((g$x$20821) (if (g$syntax-pair?$14501 g$x$20821) (begin '#f ((case-lambda ((g$q$20823) (if g$q$20823 (begin '#f ((case-lambda ((g$r$20825) (if g$r$20825 (begin '#f (append g$q$20823 g$r$20825)) '#f))) ((case-lambda ((g$x$20827) (if (g$syntax-pair?$14501 g$x$20827) (begin '#f ((case-lambda ((g$q$20829) (if g$q$20829 (begin '#f ((case-lambda ((g$r$20831) (if g$r$20831 (begin '#f (append g$q$20829 g$r$20831)) '#f))) ((case-lambda ((g$x$20833) (if (g$syntax-pair?$14501 g$x$20833) (begin '#f ((case-lambda ((g$q$20835) (if g$q$20835 (begin '#f ((case-lambda ((g$r$20837) (if g$r$20837 (begin '#f (append g$q$20835 g$r$20837)) '#f))) ((case-lambda ((g$x$20839) (if (g$syntax-pair?$14501 g$x$20839) (begin '#f ((case-lambda ((g$q$20841) (if g$q$20841 (begin '#f ((case-lambda ((g$r$20843) (if g$r$20843 (begin '#f (append g$q$20841 g$r$20843)) '#f))) ((letrec ((g$f$20845 (case-lambda ((g$x$20847) (if (g$syntax-pair?$14501 g$x$20847) ((case-lambda ((g$cars/f$20849) (if g$cars/f$20849 (begin '#f ((case-lambda ((g$cdrs/f$20851) (if g$cdrs/f$20851 (begin '#f (map cons g$cars/f$20849 g$cdrs/f$20851)) '#f))) (g$f$20845 (g$syntax-cdr$14513 g$x$20847)))) '#f))) ((case-lambda ((g$x$20853) (if (g$syntax-pair?$14501 g$x$20853) (begin '#f ((case-lambda ((g$q$20855) (if g$q$20855 (begin '#f ((case-lambda ((g$r$20857) (if g$r$20857 (begin '#f (append g$q$20855 g$r$20857)) '#f))) ((case-lambda ((g$x$20859) (if (g$syntax-pair?$14501 g$x$20859) (begin '#f ((case-lambda ((g$q$20861) (if g$q$20861 (begin '#f ((case-lambda ((g$r$20863) (if g$r$20863 (begin '#f (append g$q$20861 g$r$20863)) '#f))) ((case-lambda ((g$x$20865) (if (equal? (g$stx->datum$14535 g$x$20865) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20859)))) '#f))) ((case-lambda ((g$x$20867) (list g$x$20867))) (g$syntax-car$14509 g$x$20859)))) '#f))) (g$syntax-cdr$14513 g$x$20853)))) '#f))) ((case-lambda ((g$x$20869) (list g$x$20869))) (g$syntax-car$14509 g$x$20853)))) '#f))) (g$syntax-car$14509 g$x$20847))) (if (g$syntax-null?$14505 g$x$20847) (list (begin 'field* '()) (begin 'accessor* '())) '#f)))))) g$f$20845) (g$syntax-cdr$14513 g$x$20839)))) '#f))) ((case-lambda ((g$x$20871) (list g$x$20871))) (g$syntax-car$14509 g$x$20839)))) '#f))) (g$syntax-cdr$14513 g$x$20833)))) '#f))) ((case-lambda ((g$x$20873) (list g$x$20873))) (g$syntax-car$14509 g$x$20833)))) '#f))) (g$syntax-cdr$14513 g$x$20827)))) '#f))) ((case-lambda ((g$x$20875) (list g$x$20875))) (g$syntax-car$14509 g$x$20827)))) '#f))) (g$syntax-cdr$14513 g$x$20821)))) '#f))) ((case-lambda ((g$x$20877) (list g$x$20877))) (g$syntax-car$14509 g$x$20821)))) '#f))) (g$syntax-cdr$14513 g$x$20815)))) '#f))) ((case-lambda ((g$x$20879) (list g$x$20879))) (g$syntax-car$14509 g$x$20815)))) '#f))) g$t$20771)))) g$x$20763)))) '#f)))) (set! g$incorrect-usage-macro$15026 (case-lambda ((g$e$20881) (error 'expander '"incorrect usage of auxilary keyword" (g$strip$14533 g$e$20881 '()))))) (set! g$parameterize-transformer$15028 (case-lambda ((g$e$20883 g$r$20884 g$mr$20885) ((case-lambda ((g$t$20889) ((case-lambda ((g$ls/false$20891) (if (if g$ls/false$20891 (begin '#f (apply (case-lambda ((g$b$20893 g$b*$20894) '#t)) g$ls/false$20891)) '#f) (apply (case-lambda ((g$b$20897 g$b*$20898) (g$chi-internal$15078 (cons g$b$20897 g$b*$20898) g$r$20884 g$mr$20885))) g$ls/false$20891) ((case-lambda ((g$t$20901) ((case-lambda ((g$ls/false$20903) (if (if g$ls/false$20903 (begin '#f (apply (case-lambda ((g$olhs*$20905 g$orhs*$20906 g$b$20907 g$b*$20908) '#t)) g$ls/false$20903)) '#f) (apply (case-lambda ((g$olhs*$20913 g$orhs*$20914 g$b$20915 g$b*$20916) ((case-lambda ((g$lhs*$20921 g$rhs*$20922 g$t*$20923 g$swap$20924) (g$g$build-let$14271$14402 '#f (append g$lhs*$20921 g$rhs*$20922) (append (g$chi-expr*$15058 g$olhs*$20913 g$r$20884 g$mr$20885) (g$chi-expr*$15058 g$orhs*$20914 g$r$20884 g$mr$20885)) (g$g$build-let$14271$14402 '#f (list g$swap$20924) (list (g$g$build-lambda$14267$14404 '#f '() (g$g$build-sequence$14335$14398 '#f (map (case-lambda ((g$t$20929 g$lhs$20930 g$rhs$20931) (g$g$build-let$14271$14402 '#f (list g$t$20929) (list (list g$lhs$20930)) (g$g$build-sequence$14335$14398 '#f (list (list g$lhs$20930 g$rhs$20931) (list 'set! g$rhs$20931 g$t$20929)))))) g$t*$20923 g$lhs*$20921 g$rhs*$20922)))) (list '(primitive dynamic-wind) g$swap$20924 (g$g$build-lambda$14267$14404 '#f '() (g$chi-internal$15078 (cons g$b$20915 g$b*$20916) g$r$20884 g$mr$20885)) g$swap$20924))))) (map (case-lambda ((g$x$20935) (g$gen-lexical$14425 'lhs))) g$olhs*$20913) (map (case-lambda ((g$x$20937) (g$gen-lexical$14425 'rhs))) g$olhs*$20913) (map (case-lambda ((g$x$20939) (g$gen-lexical$14425 't))) g$olhs*$20913) (g$gen-lexical$14425 'swap)))) g$ls/false$20903) (error 'expander '"invalid syntax" (g$strip$14533 g$t$20901 '()))))) ((case-lambda ((g$x$20941) (if (g$syntax-pair?$14501 g$x$20941) (begin '#f ((case-lambda ((g$q$20943) (if g$q$20943 (begin '#f ((case-lambda ((g$r$20945) (if g$r$20945 (begin '#f (append g$q$20943 g$r$20945)) '#f))) ((case-lambda ((g$x$20947) (if (g$syntax-pair?$14501 g$x$20947) (begin '#f ((case-lambda ((g$q$20949) (if g$q$20949 (begin '#f ((case-lambda ((g$r$20951) (if g$r$20951 (begin '#f (append g$q$20949 g$r$20951)) '#f))) ((case-lambda ((g$x$20953) (if (g$syntax-pair?$14501 g$x$20953) (begin '#f ((case-lambda ((g$q$20955) (if g$q$20955 (begin '#f ((case-lambda ((g$r$20957) (if g$r$20957 (begin '#f (append g$q$20955 g$r$20957)) '#f))) ((letrec ((g$f$20959 (case-lambda ((g$x$20961) (if (g$syntax-pair?$14501 g$x$20961) ((case-lambda ((g$cars/f$20963) (if g$cars/f$20963 (begin '#f ((case-lambda ((g$cdrs/f$20965) (if g$cdrs/f$20965 (begin '#f (map cons g$cars/f$20963 g$cdrs/f$20965)) '#f))) (g$f$20959 (g$syntax-cdr$14513 g$x$20961)))) '#f))) ((case-lambda ((g$x$20967) (list g$x$20967))) (g$syntax-car$14509 g$x$20961))) (if (g$syntax-null?$14505 g$x$20961) (list (begin 'b* '())) '#f)))))) g$f$20959) (g$syntax-cdr$14513 g$x$20953)))) '#f))) ((case-lambda ((g$x$20969) (list g$x$20969))) (g$syntax-car$14509 g$x$20953)))) '#f))) (g$syntax-cdr$14513 g$x$20947)))) '#f))) ((letrec ((g$f$20971 (case-lambda ((g$x$20973) (if (g$syntax-pair?$14501 g$x$20973) ((case-lambda ((g$cars/f$20975) (if g$cars/f$20975 (begin '#f ((case-lambda ((g$cdrs/f$20977) (if g$cdrs/f$20977 (begin '#f (map cons g$cars/f$20975 g$cdrs/f$20977)) '#f))) (g$f$20971 (g$syntax-cdr$14513 g$x$20973)))) '#f))) ((case-lambda ((g$x$20979) (if (g$syntax-pair?$14501 g$x$20979) (begin '#f ((case-lambda ((g$q$20981) (if g$q$20981 (begin '#f ((case-lambda ((g$r$20983) (if g$r$20983 (begin '#f (append g$q$20981 g$r$20983)) '#f))) ((case-lambda ((g$x$20985) (if (g$syntax-pair?$14501 g$x$20985) (begin '#f ((case-lambda ((g$q$20987) (if g$q$20987 (begin '#f ((case-lambda ((g$r$20989) (if g$r$20989 (begin '#f (append g$q$20987 g$r$20989)) '#f))) ((case-lambda ((g$x$20991) (if (equal? (g$stx->datum$14535 g$x$20991) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$20985)))) '#f))) ((case-lambda ((g$x$20993) (list g$x$20993))) (g$syntax-car$14509 g$x$20985)))) '#f))) (g$syntax-cdr$14513 g$x$20979)))) '#f))) ((case-lambda ((g$x$20995) (list g$x$20995))) (g$syntax-car$14509 g$x$20979)))) '#f))) (g$syntax-car$14509 g$x$20973))) (if (g$syntax-null?$14505 g$x$20973) (list (begin 'olhs* '()) (begin 'orhs* '())) '#f)))))) g$f$20971) (g$syntax-car$14509 g$x$20947)))) '#f))) (g$syntax-cdr$14513 g$x$20941)))) '#f))) ((case-lambda ((g$x$20997) '())) (g$syntax-car$14509 g$x$20941)))) '#f))) g$t$20901)))) g$t$20889)))) ((case-lambda ((g$x$20999) (if (g$syntax-pair?$14501 g$x$20999) (begin '#f ((case-lambda ((g$q$21001) (if g$q$21001 (begin '#f ((case-lambda ((g$r$21003) (if g$r$21003 (begin '#f (append g$q$21001 g$r$21003)) '#f))) ((case-lambda ((g$x$21005) (if (g$syntax-pair?$14501 g$x$21005) (begin '#f ((case-lambda ((g$q$21007) (if g$q$21007 (begin '#f ((case-lambda ((g$r$21009) (if g$r$21009 (begin '#f (append g$q$21007 g$r$21009)) '#f))) ((case-lambda ((g$x$21011) (if (g$syntax-pair?$14501 g$x$21011) (begin '#f ((case-lambda ((g$q$21013) (if g$q$21013 (begin '#f ((case-lambda ((g$r$21015) (if g$r$21015 (begin '#f (append g$q$21013 g$r$21015)) '#f))) ((letrec ((g$f$21017 (case-lambda ((g$x$21019) (if (g$syntax-pair?$14501 g$x$21019) ((case-lambda ((g$cars/f$21021) (if g$cars/f$21021 (begin '#f ((case-lambda ((g$cdrs/f$21023) (if g$cdrs/f$21023 (begin '#f (map cons g$cars/f$21021 g$cdrs/f$21023)) '#f))) (g$f$21017 (g$syntax-cdr$14513 g$x$21019)))) '#f))) ((case-lambda ((g$x$21025) (list g$x$21025))) (g$syntax-car$14509 g$x$21019))) (if (g$syntax-null?$14505 g$x$21019) (list (begin 'b* '())) '#f)))))) g$f$21017) (g$syntax-cdr$14513 g$x$21011)))) '#f))) ((case-lambda ((g$x$21027) (list g$x$21027))) (g$syntax-car$14509 g$x$21011)))) '#f))) (g$syntax-cdr$14513 g$x$21005)))) '#f))) ((case-lambda ((g$x$21029) (if (equal? (g$stx->datum$14535 g$x$21029) '()) (begin '#f '()) '#f))) (g$syntax-car$14509 g$x$21005)))) '#f))) (g$syntax-cdr$14513 g$x$20999)))) '#f))) ((case-lambda ((g$x$21031) '())) (g$syntax-car$14509 g$x$20999)))) '#f))) g$t$20889)))) g$e$20883)))) (set! g$foreign-call-transformer$15030 (case-lambda ((g$e$21033 g$r$21034 g$mr$21035) ((case-lambda ((g$t$21039) ((case-lambda ((g$ls/false$21041) (if (if g$ls/false$21041 (begin '#f (apply (case-lambda ((g$name$21043 g$arg*$21044) '#t)) g$ls/false$21041)) '#f) (apply (case-lambda ((g$name$21047 g$arg*$21048) (cons 'foreign-call (cons (g$chi-expr$15062 g$name$21047 g$r$21034 g$mr$21035) (g$chi-expr*$15058 g$arg*$21048 g$r$21034 g$mr$21035))))) g$ls/false$21041) (error 'expander '"invalid syntax" (g$strip$14533 g$t$21039 '()))))) ((case-lambda ((g$x$21051) (if (g$syntax-pair?$14501 g$x$21051) (begin '#f ((case-lambda ((g$q$21053) (if g$q$21053 (begin '#f ((case-lambda ((g$r$21055) (if g$r$21055 (begin '#f (append g$q$21053 g$r$21055)) '#f))) ((case-lambda ((g$x$21057) (if (g$syntax-pair?$14501 g$x$21057) (begin '#f ((case-lambda ((g$q$21059) (if g$q$21059 (begin '#f ((case-lambda ((g$r$21061) (if g$r$21061 (begin '#f (append g$q$21059 g$r$21061)) '#f))) ((letrec ((g$f$21063 (case-lambda ((g$x$21065) (if (g$syntax-pair?$14501 g$x$21065) ((case-lambda ((g$cars/f$21067) (if g$cars/f$21067 (begin '#f ((case-lambda ((g$cdrs/f$21069) (if g$cdrs/f$21069 (begin '#f (map cons g$cars/f$21067 g$cdrs/f$21069)) '#f))) (g$f$21063 (g$syntax-cdr$14513 g$x$21065)))) '#f))) ((case-lambda ((g$x$21071) (list g$x$21071))) (g$syntax-car$14509 g$x$21065))) (if (g$syntax-null?$14505 g$x$21065) (list (begin 'arg* '())) '#f)))))) g$f$21063) (g$syntax-cdr$14513 g$x$21057)))) '#f))) ((case-lambda ((g$x$21073) (list g$x$21073))) (g$syntax-car$14509 g$x$21057)))) '#f))) (g$syntax-cdr$14513 g$x$21051)))) '#f))) ((case-lambda ((g$x$21075) '())) (g$syntax-car$14509 g$x$21051)))) '#f))) g$t$21039)))) g$e$21033)))) (set! g$convert-pattern$15032 (case-lambda ((g$pattern$21077 g$keys$21078) ((case-lambda ((g$cvt*$21081 g$cvt$21083) (begin (set! g$cvt*$21081 (case-lambda ((g$p*$21271 g$n$21272 g$ids$21273) (if (null? g$p*$21271) (values '() g$ids$21273) (call-with-values (case-lambda (() (g$cvt*$21081 (cdr g$p*$21271) g$n$21272 g$ids$21273))) (case-lambda ((g$y$21277 g$ids$21278) (call-with-values (case-lambda (() (g$cvt$21083 (car g$p*$21271) g$n$21272 g$ids$21278))) (case-lambda ((g$x$21281 g$ids$21282) (values (cons g$x$21281 g$y$21277) g$ids$21282))))))))))) (set! g$cvt$21083 (case-lambda ((g$p$21085 g$n$21086 g$ids$21087) ((case-lambda ((g$t$21091) ((case-lambda ((g$ls/false$21093) (if (if g$ls/false$21093 (begin '#f (apply (case-lambda ((g$id$21095) (g$id?$14515 g$id$21095))) g$ls/false$21093)) '#f) (apply (case-lambda ((g$id$21097) (if (g$bound-id-member?$14529 g$p$21085 g$keys$21078) (values (vector 'free-id g$p$21085) g$ids$21087) (if (g$free-id=?$14523 g$p$21085 (g$scheme-stx$14944 '_)) (values '_ g$ids$21087) (values 'any (cons (cons g$p$21085 g$n$21086) g$ids$21087)))))) g$ls/false$21093) ((case-lambda ((g$t$21099) ((case-lambda ((g$ls/false$21101) (if (if g$ls/false$21101 (begin '#f (apply (case-lambda ((g$p$21103 g$dots$21104) (g$ellipsis?$15036 g$dots$21104))) g$ls/false$21101)) '#f) (apply (case-lambda ((g$p$21107 g$dots$21108) (call-with-values (case-lambda (() (g$cvt$21083 g$p$21107 (+ g$n$21086 '1) g$ids$21087))) (case-lambda ((g$p$21111 g$ids$21112) (values (if (eq? g$p$21111 'any) 'each-any (vector 'each g$p$21111)) g$ids$21112)))))) g$ls/false$21101) ((case-lambda ((g$t$21115) ((case-lambda ((g$ls/false$21117) (if (if g$ls/false$21117 (begin '#f (apply (case-lambda ((g$x$21119 g$dots$21120 g$ys$21121 g$z$21122) (g$ellipsis?$15036 g$dots$21120))) g$ls/false$21117)) '#f) (apply (case-lambda ((g$x$21127 g$dots$21128 g$ys$21129 g$z$21130) (call-with-values (case-lambda (() (g$cvt$21083 g$z$21130 g$n$21086 g$ids$21087))) (case-lambda ((g$z$21135 g$ids$21136) (call-with-values (case-lambda (() (g$cvt*$21081 g$ys$21129 g$n$21086 g$ids$21136))) (case-lambda ((g$ys$21139 g$ids$21140) (call-with-values (case-lambda (() (g$cvt$21083 g$x$21127 (+ g$n$21086 '1) g$ids$21140))) (case-lambda ((g$x$21143 g$ids$21144) (values (vector 'each+ g$x$21143 (reverse g$ys$21139) g$z$21135) g$ids$21144)))))))))))) g$ls/false$21117) ((case-lambda ((g$t$21147) ((case-lambda ((g$ls/false$21149) (if (if g$ls/false$21149 (begin '#f (apply (case-lambda ((g$x$21151 g$y$21152) '#t)) g$ls/false$21149)) '#f) (apply (case-lambda ((g$x$21155 g$y$21156) (call-with-values (case-lambda (() (g$cvt$21083 g$y$21156 g$n$21086 g$ids$21087))) (case-lambda ((g$y$21159 g$ids$21160) (call-with-values (case-lambda (() (g$cvt$21083 g$x$21155 g$n$21086 g$ids$21160))) (case-lambda ((g$x$21163 g$ids$21164) (values (cons g$x$21163 g$y$21159) g$ids$21164))))))))) g$ls/false$21149) ((case-lambda ((g$t$21167) ((case-lambda ((g$ls/false$21169) (if (if g$ls/false$21169 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$21169)) '#f) (apply (case-lambda (() (values '() g$ids$21087))) g$ls/false$21169) ((case-lambda ((g$t$21171) ((case-lambda ((g$ls/false$21173) (if (if g$ls/false$21173 (begin '#f (apply (case-lambda ((g$p$21175) (not (g$stx?$14467 g$p$21175)))) g$ls/false$21173)) '#f) (apply (case-lambda ((g$p$21177) (call-with-values (case-lambda (() (g$cvt$21083 g$p$21177 g$n$21086 g$ids$21087))) (case-lambda ((g$p$21179 g$ids$21180) (values (vector 'vector g$p$21179) g$ids$21180)))))) g$ls/false$21173) ((case-lambda ((g$t$21183) ((case-lambda ((g$ls/false$21185) (if (if g$ls/false$21185 (begin '#f (apply (case-lambda ((g$datum$21187) '#t)) g$ls/false$21185)) '#f) (apply (case-lambda ((g$datum$21189) (values (vector 'atom (g$stx->datum$14535 g$datum$21189)) g$ids$21087))) g$ls/false$21185) (error 'expander '"invalid syntax" (g$strip$14533 g$t$21183 '()))))) ((case-lambda ((g$x$21191) (list g$x$21191))) g$t$21183)))) g$t$21171)))) ((case-lambda ((g$x$21193) (if (g$syntax-vector?$14503 g$x$21193) (begin '#f ((letrec ((g$f$21195 (case-lambda ((g$x$21197) (if (g$syntax-pair?$14501 g$x$21197) ((case-lambda ((g$cars/f$21199) (if g$cars/f$21199 (begin '#f ((case-lambda ((g$cdrs/f$21201) (if g$cdrs/f$21201 (begin '#f (map cons g$cars/f$21199 g$cdrs/f$21201)) '#f))) (g$f$21195 (g$syntax-cdr$14513 g$x$21197)))) '#f))) ((case-lambda ((g$x$21203) (list g$x$21203))) (g$syntax-car$14509 g$x$21197))) (if (g$syntax-null?$14505 g$x$21197) (list (begin 'p '())) '#f)))))) g$f$21195) (g$syntax-vector->list$14499 g$x$21193))) '#f))) g$t$21171)))) g$t$21167)))) ((case-lambda ((g$x$21205) (if (equal? (g$stx->datum$14535 g$x$21205) '()) (begin '#f '()) '#f))) g$t$21167)))) g$t$21147)))) ((case-lambda ((g$x$21207) (if (g$syntax-pair?$14501 g$x$21207) (begin '#f ((case-lambda ((g$q$21209) (if g$q$21209 (begin '#f ((case-lambda ((g$r$21211) (if g$r$21211 (begin '#f (append g$q$21209 g$r$21211)) '#f))) ((case-lambda ((g$x$21213) (list g$x$21213))) (g$syntax-cdr$14513 g$x$21207)))) '#f))) ((case-lambda ((g$x$21215) (list g$x$21215))) (g$syntax-car$14509 g$x$21207)))) '#f))) g$t$21147)))) g$t$21115)))) ((case-lambda ((g$x$21217) (if (g$syntax-pair?$14501 g$x$21217) (begin '#f ((case-lambda ((g$q$21219) (if g$q$21219 (begin '#f ((case-lambda ((g$r$21221) (if g$r$21221 (begin '#f (append g$q$21219 g$r$21221)) '#f))) ((case-lambda ((g$x$21223) (if (g$syntax-pair?$14501 g$x$21223) (begin '#f ((case-lambda ((g$q$21225) (if g$q$21225 (begin '#f ((case-lambda ((g$r$21227) (if g$r$21227 (begin '#f (append g$q$21225 g$r$21227)) '#f))) ((letrec ((g$f$21229 (case-lambda ((g$x$21235) (if (g$syntax-pair?$14501 g$x$21235) ((case-lambda ((g$cars/f$21237) (if g$cars/f$21237 (begin '#f ((case-lambda ((g$d/f$21239) (if g$d/f$21239 (begin '#f (cons (map cons g$cars/f$21237 (car g$d/f$21239)) (cdr g$d/f$21239))) '#f))) (g$f$21229 (g$syntax-cdr$14513 g$x$21235)))) '#f))) ((case-lambda ((g$x$21241) (list g$x$21241))) (g$syntax-car$14509 g$x$21235))) ((case-lambda ((g$d$21243) (if g$d$21243 (begin '#f (cons (list (begin 'ys '())) g$d$21243)) '#f))) ((case-lambda ((g$x$21245) (list g$x$21245))) g$x$21235))))))) (case-lambda ((g$x$21231) ((case-lambda ((g$x$21233) (if g$x$21233 (begin '#f (append (car g$x$21233) (cdr g$x$21233))) '#f))) (g$f$21229 g$x$21231))))) (g$syntax-cdr$14513 g$x$21223)))) '#f))) ((case-lambda ((g$x$21247) (list g$x$21247))) (g$syntax-car$14509 g$x$21223)))) '#f))) (g$syntax-cdr$14513 g$x$21217)))) '#f))) ((case-lambda ((g$x$21249) (list g$x$21249))) (g$syntax-car$14509 g$x$21217)))) '#f))) g$t$21115)))) g$t$21099)))) ((case-lambda ((g$x$21251) (if (g$syntax-pair?$14501 g$x$21251) (begin '#f ((case-lambda ((g$q$21253) (if g$q$21253 (begin '#f ((case-lambda ((g$r$21255) (if g$r$21255 (begin '#f (append g$q$21253 g$r$21255)) '#f))) ((case-lambda ((g$x$21257) (if (g$syntax-pair?$14501 g$x$21257) (begin '#f ((case-lambda ((g$q$21259) (if g$q$21259 (begin '#f ((case-lambda ((g$r$21261) (if g$r$21261 (begin '#f (append g$q$21259 g$r$21261)) '#f))) ((case-lambda ((g$x$21263) (if (equal? (g$stx->datum$14535 g$x$21263) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$21257)))) '#f))) ((case-lambda ((g$x$21265) (list g$x$21265))) (g$syntax-car$14509 g$x$21257)))) '#f))) (g$syntax-cdr$14513 g$x$21251)))) '#f))) ((case-lambda ((g$x$21267) (list g$x$21267))) (g$syntax-car$14509 g$x$21251)))) '#f))) g$t$21099)))) g$t$21091)))) ((case-lambda ((g$x$21269) (list g$x$21269))) g$t$21091)))) g$p$21085)))) (g$cvt$21083 g$pattern$21077 '0 '())))) '#f '#f)))) (set! g$syntax-dispatch$15034 (case-lambda ((g$e$21285 g$p$21286) ((case-lambda ((g$stx^$21289 g$match-each$21291 g$match-each+$21293 g$match-each-any$21295 g$match-empty$21297 g$combine$21299 g$match*$21301 g$match$21303) (begin (set! g$stx^$21289 (case-lambda ((g$e$21411 g$m*$21412 g$s*$21413) (if (if (null? g$m*$21412) (begin '#f (null? g$s*$21413)) '#f) g$e$21411 (g$mkstx$14491 g$e$21411 g$m*$21412 g$s*$21413))))) (set! g$match-each$21291 (case-lambda ((g$e$21395 g$p$21396 g$m*$21397 g$s*$21398) (if (pair? g$e$21395) ((case-lambda ((g$first$21403) (if g$first$21403 (begin '#f ((case-lambda ((g$rest$21405) (if g$rest$21405 (begin '#f (cons g$first$21403 g$rest$21405)) '#f))) (g$match-each$21291 (cdr g$e$21395) g$p$21396 g$m*$21397 g$s*$21398))) '#f))) (g$match$21303 (car g$e$21395) g$p$21396 g$m*$21397 g$s*$21398 '())) (if (null? g$e$21395) '() (if (g$stx?$14467 g$e$21395) (call-with-values (case-lambda (() (g$join-wraps$14489 g$m*$21397 g$s*$21398 g$e$21395))) (case-lambda ((g$m*$21407 g$s*$21408) (g$match-each$21291 (g$stx-expr$14469 g$e$21395) g$p$21396 g$m*$21407 g$s*$21408)))) '#f)))))) (set! g$match-each+$21293 (case-lambda ((g$e$21361 g$x-pat$21362 g$y-pat$21363 g$z-pat$21364 g$m*$21365 g$s*$21366 g$r$21367) (letrec ((g$f$21375 (case-lambda ((g$e$21377 g$m*$21378 g$s*$21379) (if (pair? g$e$21377) (call-with-values (case-lambda (() (g$f$21375 (cdr g$e$21377) g$m*$21378 g$s*$21379))) (case-lambda ((g$xr*$21383 g$y-pat$21384 g$r$21385) (if g$r$21385 (if (null? g$y-pat$21384) ((case-lambda ((g$xr$21389) (if g$xr$21389 (values (cons g$xr$21389 g$xr*$21383) g$y-pat$21384 g$r$21385) (values '#f '#f '#f)))) (g$match$21303 (car g$e$21377) g$x-pat$21362 g$m*$21378 g$s*$21379 '())) (values '() (cdr g$y-pat$21384) (g$match$21303 (car g$e$21377) (car g$y-pat$21384) g$m*$21378 g$s*$21379 g$r$21385))) (values '#f '#f '#f))))) (if (g$stx?$14467 g$e$21377) (call-with-values (case-lambda (() (g$join-wraps$14489 g$m*$21378 g$s*$21379 g$e$21377))) (case-lambda ((g$m*$21391 g$s*$21392) (g$f$21375 (g$stx-expr$14469 g$e$21377) g$m*$21391 g$s*$21392)))) (values '() g$y-pat$21363 (g$match$21303 g$e$21377 g$z-pat$21364 g$m*$21378 g$s*$21379 g$r$21367)))))))) (g$f$21375 g$e$21361 g$m*$21365 g$s*$21366))))) (set! g$match-each-any$21295 (case-lambda ((g$e$21349 g$m*$21350 g$s*$21351) (if (pair? g$e$21349) ((case-lambda ((g$l$21355) (if g$l$21355 (begin '#f (cons (g$stx^$21289 (car g$e$21349) g$m*$21350 g$s*$21351) g$l$21355)) '#f))) (g$match-each-any$21295 (cdr g$e$21349) g$m*$21350 g$s*$21351)) (if (null? g$e$21349) '() (if (g$stx?$14467 g$e$21349) (call-with-values (case-lambda (() (g$join-wraps$14489 g$m*$21350 g$s*$21351 g$e$21349))) (case-lambda ((g$m*$21357 g$s*$21358) (g$match-each-any$21295 (g$stx-expr$14469 g$e$21349) g$m*$21357 g$s*$21358)))) '#f)))))) (set! g$match-empty$21297 (case-lambda ((g$p$21344 g$r$21345) (if (null? g$p$21344) g$r$21345 (if (eq? g$p$21344 '_) g$r$21345 (if (eq? g$p$21344 'any) (cons '() g$r$21345) (if (pair? g$p$21344) (g$match-empty$21297 (car g$p$21344) (g$match-empty$21297 (cdr g$p$21344) g$r$21345)) (if (eq? g$p$21344 'each-any) (cons '() g$r$21345) ((case-lambda ((g$t$21348) (if (memv g$t$21348 '(each)) (g$match-empty$21297 (vector-ref g$p$21344 '1) g$r$21345) (if (memv g$t$21348 '(each+)) (g$match-empty$21297 (vector-ref g$p$21344 '1) (g$match-empty$21297 (reverse (vector-ref g$p$21344 '2)) (g$match-empty$21297 (vector-ref g$p$21344 '3) g$r$21345))) (if (memv g$t$21348 '(free-id atom)) g$r$21345 (if (memv g$t$21348 '(vector)) (g$match-empty$21297 (vector-ref g$p$21344 '1) g$r$21345) (error 'syntax-dispatch '"invalid pattern" g$p$21344))))))) (vector-ref g$p$21344 '0)))))))))) (set! g$combine$21299 (case-lambda ((g$r*$21340 g$r$21341) (if (null? (car g$r*$21340)) g$r$21341 (cons (map car g$r*$21340) (g$combine$21299 (map cdr g$r*$21340) g$r$21341)))))) (set! g$match*$21301 (case-lambda ((g$e$21319 g$p$21320 g$m*$21321 g$s*$21322 g$r$21323) (if (null? g$p$21320) (if (null? g$e$21319) (begin '#f g$r$21323) '#f) (if (pair? g$p$21320) (if (pair? g$e$21319) (begin '#f (g$match$21303 (car g$e$21319) (car g$p$21320) g$m*$21321 g$s*$21322 (g$match$21303 (cdr g$e$21319) (cdr g$p$21320) g$m*$21321 g$s*$21322 g$r$21323))) '#f) (if (eq? g$p$21320 'each-any) ((case-lambda ((g$l$21329) (if g$l$21329 (begin '#f (cons g$l$21329 g$r$21323)) '#f))) (g$match-each-any$21295 g$e$21319 g$m*$21321 g$s*$21322)) ((case-lambda ((g$t$21331) (if (memv g$t$21331 '(each)) (if (null? g$e$21319) (g$match-empty$21297 (vector-ref g$p$21320 '1) g$r$21323) ((case-lambda ((g$r*$21338) (if g$r*$21338 (begin '#f (g$combine$21299 g$r*$21338 g$r$21323)) '#f))) (g$match-each$21291 g$e$21319 (vector-ref g$p$21320 '1) g$m*$21321 g$s*$21322))) (if (memv g$t$21331 '(free-id)) (if (symbol? g$e$21319) (if (g$free-id=?$14523 (g$stx^$21289 g$e$21319 g$m*$21321 g$s*$21322) (vector-ref g$p$21320 '1)) (begin '#f g$r$21323) '#f) '#f) (if (memv g$t$21331 '(each+)) (call-with-values (case-lambda (() (g$match-each+$21293 g$e$21319 (vector-ref g$p$21320 '1) (vector-ref g$p$21320 '2) (vector-ref g$p$21320 '3) g$m*$21321 g$s*$21322 g$r$21323))) (case-lambda ((g$xr*$21332 g$y-pat$21333 g$r$21334) (if g$r$21334 (if (null? g$y-pat$21333) (begin '#f (if (null? g$xr*$21332) (g$match-empty$21297 (vector-ref g$p$21320 '1) g$r$21334) (g$combine$21299 g$xr*$21332 g$r$21334))) '#f) '#f)))) (if (memv g$t$21331 '(atom)) (if (equal? (vector-ref g$p$21320 '1) (g$strip$14533 g$e$21319 g$m*$21321)) (begin '#f g$r$21323) '#f) (if (memv g$t$21331 '(vector)) (if (vector? g$e$21319) (begin '#f (g$match$21303 (vector->list g$e$21319) (vector-ref g$p$21320 '1) g$m*$21321 g$s*$21322 g$r$21323)) '#f) (error 'syntax-dispatch '"invalid pattern" g$p$21320)))))))) (vector-ref g$p$21320 '0)))))))) (set! g$match$21303 (case-lambda ((g$e$21305 g$p$21306 g$m*$21307 g$s*$21308 g$r$21309) (if (not g$r$21309) '#f (if (eq? g$p$21306 '_) g$r$21309 (if (eq? g$p$21306 'any) (cons (g$stx^$21289 g$e$21305 g$m*$21307 g$s*$21308) g$r$21309) (if (g$stx?$14467 g$e$21305) (call-with-values (case-lambda (() (g$join-wraps$14489 g$m*$21307 g$s*$21308 g$e$21305))) (case-lambda ((g$m*$21315 g$s*$21316) (g$match$21303 (g$stx-expr$14469 g$e$21305) g$p$21306 g$m*$21315 g$s*$21316 g$r$21309)))) (g$match*$21301 g$e$21305 g$p$21306 g$m*$21307 g$s*$21308 g$r$21309)))))))) (g$match$21303 g$e$21285 g$p$21286 '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$ellipsis?$15036 (case-lambda ((g$x$21417) (if (g$id?$14515 g$x$21417) (begin '#f (g$free-id=?$14523 g$x$21417 (g$scheme-stx$14944 '...))) '#f)))) (set! g$syntax-case-transformer$15038 ((case-lambda (() ((case-lambda ((g$build-dispatch-call$21419 g$invalid-ids-error$21421 g$gen-clause$21423 g$gen-syntax-case$21425) (begin (set! g$build-dispatch-call$21419 (case-lambda ((g$pvars$21559 g$expr$21560 g$y$21561 g$r$21562 g$mr$21563) ((case-lambda ((g$ids$21569 g$levels$21570) ((case-lambda ((g$labels$21573 g$new-vars$21574) ((case-lambda ((g$body$21577) (list '(primitive apply) (g$g$build-lambda$14267$14404 '#f g$new-vars$21574 g$body$21577) g$y$21561))) (g$chi-expr$15062 (g$add-subst$14495 (g$make-full-rib$14462 g$ids$21569 g$labels$21573) g$expr$21560) (append (map (case-lambda ((g$label$21579 g$var$21580 g$level$21581) (cons g$label$21579 (g$make-binding$14541 'syntax (cons g$var$21580 g$level$21581))))) g$labels$21573 g$new-vars$21574 (map cdr g$pvars$21559)) g$r$21562) g$mr$21563)))) (map g$gen-label$14429 g$ids$21569) (map g$gen-lexical$14425 g$ids$21569)))) (map car g$pvars$21559) (map cdr g$pvars$21559))))) (set! g$invalid-ids-error$21421 (case-lambda ((g$id*$21547 g$e$21548 g$class$21549) (letrec ((g$find$21553 (case-lambda ((g$id*$21555 g$ok*$21556) (if (null? g$id*$21555) (error 'expander '"invalid syntax" (g$stx->datum$14535 g$e$21548)) (if (g$id?$14515 (car g$id*$21555)) (if (g$bound-id-member?$14529 (car g$id*$21555) g$ok*$21556) (g$syntax-error$15167 (car g$id*$21555) '"duplicate " g$class$21549) (g$find$21553 (cdr g$id*$21555) (cons (car g$id*$21555) g$ok*$21556))) (g$syntax-error$15167 (car g$id*$21555) '"invalid " g$class$21549))))))) (g$find$21553 g$id*$21547 '()))))) (set! g$gen-clause$21423 (case-lambda ((g$x$21515 g$keys$21516 g$clauses$21517 g$r$21518 g$mr$21519 g$pat$21520 g$fender$21521 g$expr$21522) (call-with-values (case-lambda (() (g$convert-pattern$15032 g$pat$21520 g$keys$21516))) (case-lambda ((g$p$21531 g$pvars$21532) (if (not (g$distinct-bound-ids?$14527 (map car g$pvars$21532))) (g$invalid-ids-error$21421 (map car g$pvars$21532) g$pat$21520 '"pattern variable") (if (not (for-all (case-lambda ((g$x$21535) (not (g$ellipsis?$15036 (car g$x$21535))))) g$pvars$21532)) (error 'expander '"misplaced ellipsis in syntax-case pattern" (g$strip$14533 g$pat$21520 '())) ((case-lambda ((g$y$21537) ((case-lambda ((g$test$21539) ((case-lambda ((g$conseq$21541) ((case-lambda ((g$altern$21543) (list (g$g$build-lambda$14267$14404 '#f (list g$y$21537) (list 'if g$test$21539 g$conseq$21541 g$altern$21543)) (list '(primitive syntax-dispatch) g$x$21515 (list 'quote g$p$21531))))) (g$gen-syntax-case$21425 g$x$21515 g$keys$21516 g$clauses$21517 g$r$21518 g$mr$21519)))) (g$build-dispatch-call$21419 g$pvars$21532 g$expr$21522 g$y$21537 g$r$21518 g$mr$21519)))) (if (eq? g$fender$21521 '#t) g$y$21537 ((case-lambda ((g$call$21545) (list 'if g$y$21537 g$call$21545 (list 'quote '#f)))) (g$build-dispatch-call$21419 g$pvars$21532 g$fender$21521 g$y$21537 g$r$21518 g$mr$21519)))))) (g$gen-lexical$14425 'tmp)))))))))) (set! g$gen-syntax-case$21425 (case-lambda ((g$x$21427 g$keys$21428 g$clauses$21429 g$r$21430 g$mr$21431) (if (null? g$clauses$21429) (list '(primitive syntax-error) g$x$21427) ((case-lambda ((g$t$21437) ((case-lambda ((g$ls/false$21439) (if (if g$ls/false$21439 (begin '#f (apply (case-lambda ((g$pat$21441 g$expr$21442) '#t)) g$ls/false$21439)) '#f) (apply (case-lambda ((g$pat$21445 g$expr$21446) (if (if (g$id?$14515 g$pat$21445) (if (not (g$bound-id-member?$14529 g$pat$21445 g$keys$21428)) (begin '#f (not (g$ellipsis?$15036 g$pat$21445))) '#f) '#f) (if (g$free-id=?$14523 g$pat$21445 (g$scheme-stx$14944 '_)) (g$chi-expr$15062 g$expr$21446 g$r$21430 g$mr$21431) ((case-lambda ((g$lab$21449 g$lex$21450) ((case-lambda ((g$body$21453) (list (g$g$build-lambda$14267$14404 '#f (list g$lex$21450) g$body$21453) g$x$21427))) (g$chi-expr$15062 (g$add-subst$14495 (g$make-full-rib$14462 (list g$pat$21445) (list g$lab$21449)) g$expr$21446) (cons (cons g$lab$21449 (g$make-binding$14541 'syntax (cons g$lex$21450 '0))) g$r$21430) g$mr$21431)))) (g$gen-label$14429 g$pat$21445) (g$gen-lexical$14425 g$pat$21445))) (g$gen-clause$21423 g$x$21427 g$keys$21428 (cdr g$clauses$21429) g$r$21430 g$mr$21431 g$pat$21445 '#t g$expr$21446)))) g$ls/false$21439) ((case-lambda ((g$t$21455) ((case-lambda ((g$ls/false$21457) (if (if g$ls/false$21457 (begin '#f (apply (case-lambda ((g$pat$21459 g$fender$21460 g$expr$21461) '#t)) g$ls/false$21457)) '#f) (apply (case-lambda ((g$pat$21465 g$fender$21466 g$expr$21467) (g$gen-clause$21423 g$x$21427 g$keys$21428 (cdr g$clauses$21429) g$r$21430 g$mr$21431 g$pat$21465 g$fender$21466 g$expr$21467))) g$ls/false$21457) (error 'expander '"invalid syntax" (g$strip$14533 g$t$21455 '()))))) ((case-lambda ((g$x$21471) (if (g$syntax-pair?$14501 g$x$21471) (begin '#f ((case-lambda ((g$q$21473) (if g$q$21473 (begin '#f ((case-lambda ((g$r$21475) (if g$r$21475 (begin '#f (append g$q$21473 g$r$21475)) '#f))) ((case-lambda ((g$x$21477) (if (g$syntax-pair?$14501 g$x$21477) (begin '#f ((case-lambda ((g$q$21479) (if g$q$21479 (begin '#f ((case-lambda ((g$r$21481) (if g$r$21481 (begin '#f (append g$q$21479 g$r$21481)) '#f))) ((case-lambda ((g$x$21483) (if (g$syntax-pair?$14501 g$x$21483) (begin '#f ((case-lambda ((g$q$21485) (if g$q$21485 (begin '#f ((case-lambda ((g$r$21487) (if g$r$21487 (begin '#f (append g$q$21485 g$r$21487)) '#f))) ((case-lambda ((g$x$21489) (if (equal? (g$stx->datum$14535 g$x$21489) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$21483)))) '#f))) ((case-lambda ((g$x$21491) (list g$x$21491))) (g$syntax-car$14509 g$x$21483)))) '#f))) (g$syntax-cdr$14513 g$x$21477)))) '#f))) ((case-lambda ((g$x$21493) (list g$x$21493))) (g$syntax-car$14509 g$x$21477)))) '#f))) (g$syntax-cdr$14513 g$x$21471)))) '#f))) ((case-lambda ((g$x$21495) (list g$x$21495))) (g$syntax-car$14509 g$x$21471)))) '#f))) g$t$21455)))) g$t$21437)))) ((case-lambda ((g$x$21497) (if (g$syntax-pair?$14501 g$x$21497) (begin '#f ((case-lambda ((g$q$21499) (if g$q$21499 (begin '#f ((case-lambda ((g$r$21501) (if g$r$21501 (begin '#f (append g$q$21499 g$r$21501)) '#f))) ((case-lambda ((g$x$21503) (if (g$syntax-pair?$14501 g$x$21503) (begin '#f ((case-lambda ((g$q$21505) (if g$q$21505 (begin '#f ((case-lambda ((g$r$21507) (if g$r$21507 (begin '#f (append g$q$21505 g$r$21507)) '#f))) ((case-lambda ((g$x$21509) (if (equal? (g$stx->datum$14535 g$x$21509) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$21503)))) '#f))) ((case-lambda ((g$x$21511) (list g$x$21511))) (g$syntax-car$14509 g$x$21503)))) '#f))) (g$syntax-cdr$14513 g$x$21497)))) '#f))) ((case-lambda ((g$x$21513) (list g$x$21513))) (g$syntax-car$14509 g$x$21497)))) '#f))) g$t$21437)))) (car g$clauses$21429)))))) (case-lambda ((g$e$21585 g$r$21586 g$mr$21587) ((case-lambda ((g$t$21591) ((case-lambda ((g$ls/false$21593) (if (if g$ls/false$21593 (begin '#f (apply (case-lambda ((g$expr$21595 g$keys$21596 g$clauses$21597) '#t)) g$ls/false$21593)) '#f) (apply (case-lambda ((g$expr$21601 g$keys$21602 g$clauses$21603) (begin (if (for-all (case-lambda ((g$x$21607) (if (g$id?$14515 g$x$21607) (begin '#f (not (g$ellipsis?$15036 g$x$21607))) '#f))) g$keys$21602) (void) (error 'expander '"invalid literals" (g$strip$14533 g$e$21585 '()))) ((case-lambda ((g$x$21609) ((case-lambda ((g$body$21611) (list (g$g$build-lambda$14267$14404 '#f (list g$x$21609) g$body$21611) (g$chi-expr$15062 g$expr$21601 g$r$21586 g$mr$21587)))) (g$gen-syntax-case$21425 g$x$21609 g$keys$21602 g$clauses$21603 g$r$21586 g$mr$21587)))) (g$gen-lexical$14425 'tmp))))) g$ls/false$21593) (error 'expander '"invalid syntax" (g$strip$14533 g$t$21591 '()))))) ((case-lambda ((g$x$21613) (if (g$syntax-pair?$14501 g$x$21613) (begin '#f ((case-lambda ((g$q$21615) (if g$q$21615 (begin '#f ((case-lambda ((g$r$21617) (if g$r$21617 (begin '#f (append g$q$21615 g$r$21617)) '#f))) ((case-lambda ((g$x$21619) (if (g$syntax-pair?$14501 g$x$21619) (begin '#f ((case-lambda ((g$q$21621) (if g$q$21621 (begin '#f ((case-lambda ((g$r$21623) (if g$r$21623 (begin '#f (append g$q$21621 g$r$21623)) '#f))) ((case-lambda ((g$x$21625) (if (g$syntax-pair?$14501 g$x$21625) (begin '#f ((case-lambda ((g$q$21627) (if g$q$21627 (begin '#f ((case-lambda ((g$r$21629) (if g$r$21629 (begin '#f (append g$q$21627 g$r$21629)) '#f))) ((letrec ((g$f$21631 (case-lambda ((g$x$21633) (if (g$syntax-pair?$14501 g$x$21633) ((case-lambda ((g$cars/f$21635) (if g$cars/f$21635 (begin '#f ((case-lambda ((g$cdrs/f$21637) (if g$cdrs/f$21637 (begin '#f (map cons g$cars/f$21635 g$cdrs/f$21637)) '#f))) (g$f$21631 (g$syntax-cdr$14513 g$x$21633)))) '#f))) ((case-lambda ((g$x$21639) (list g$x$21639))) (g$syntax-car$14509 g$x$21633))) (if (g$syntax-null?$14505 g$x$21633) (list (begin 'clauses '())) '#f)))))) g$f$21631) (g$syntax-cdr$14513 g$x$21625)))) '#f))) ((letrec ((g$f$21641 (case-lambda ((g$x$21643) (if (g$syntax-pair?$14501 g$x$21643) ((case-lambda ((g$cars/f$21645) (if g$cars/f$21645 (begin '#f ((case-lambda ((g$cdrs/f$21647) (if g$cdrs/f$21647 (begin '#f (map cons g$cars/f$21645 g$cdrs/f$21647)) '#f))) (g$f$21641 (g$syntax-cdr$14513 g$x$21643)))) '#f))) ((case-lambda ((g$x$21649) (list g$x$21649))) (g$syntax-car$14509 g$x$21643))) (if (g$syntax-null?$14505 g$x$21643) (list (begin 'keys '())) '#f)))))) g$f$21641) (g$syntax-car$14509 g$x$21625)))) '#f))) (g$syntax-cdr$14513 g$x$21619)))) '#f))) ((case-lambda ((g$x$21651) (list g$x$21651))) (g$syntax-car$14509 g$x$21619)))) '#f))) (g$syntax-cdr$14513 g$x$21613)))) '#f))) ((case-lambda ((g$x$21653) '())) (g$syntax-car$14509 g$x$21613)))) '#f))) g$t$21591)))) g$e$21585)))))) '#f '#f '#f '#f))))) (set! g$syntax-transformer$15040 ((case-lambda (() ((case-lambda ((g$gen-syntax$21655 g$gen-ref$21657 g$gen-append$21659 g$gen-mappend$21661 g$gen-map$21663 g$gen-cons$21665 g$gen-vector$21667 g$regen$21669) (begin (set! g$gen-syntax$21655 (case-lambda ((g$src$21741 g$e$21742 g$r$21743 g$maps$21744 g$ellipsis?$21745 g$vec?$21746) ((case-lambda ((g$t$21753) ((case-lambda ((g$ls/false$21755) (if (if g$ls/false$21755 (begin '#f (apply (case-lambda ((g$dots$21757) (g$ellipsis?$21745 g$dots$21757))) g$ls/false$21755)) '#f) (apply (case-lambda ((g$dots$21759) (error 'expander '"misplaced ellipsis in syntax form" (g$strip$14533 g$src$21741 '())))) g$ls/false$21755) ((case-lambda ((g$t$21761) ((case-lambda ((g$ls/false$21763) (if (if g$ls/false$21763 (begin '#f (apply (case-lambda ((g$id$21765) (g$id?$14515 g$id$21765))) g$ls/false$21763)) '#f) (apply (case-lambda ((g$id$21767) ((case-lambda ((g$label$21769) ((case-lambda ((g$b$21771) ((case-lambda (() (if (eq? (g$binding-type$14543 g$b$21771) 'syntax) (call-with-values (case-lambda (() ((case-lambda ((g$var.lev$21773) (g$gen-ref$21657 g$src$21741 (car g$var.lev$21773) (cdr g$var.lev$21773) g$maps$21744))) (g$binding-value$14545 g$b$21771)))) (case-lambda ((g$var$21775 g$maps$21776) (values (list 'ref g$var$21775) g$maps$21776)))) (values (list 'quote g$e$21742) g$maps$21744))))))) (g$label->binding$14539 g$label$21769 g$r$21743)))) (g$id->label$14537 g$e$21742)))) g$ls/false$21763) ((case-lambda ((g$t$21779) ((case-lambda ((g$ls/false$21781) (if (if g$ls/false$21781 (begin '#f (apply (case-lambda ((g$dots$21783 g$e$21784) (g$ellipsis?$21745 g$dots$21783))) g$ls/false$21781)) '#f) (apply (case-lambda ((g$dots$21787 g$e$21788) (if g$vec?$21746 (error 'expander '"misplaced ellipsis in syntax form" (g$strip$14533 g$src$21741 '())) (g$gen-syntax$21655 g$src$21741 g$e$21788 g$r$21743 g$maps$21744 (case-lambda ((g$x$21791) '#f)) '#f)))) g$ls/false$21781) ((case-lambda ((g$t$21793) ((case-lambda ((g$ls/false$21795) (if (if g$ls/false$21795 (begin '#f (apply (case-lambda ((g$x$21797 g$dots$21798 g$y$21799) (g$ellipsis?$21745 g$dots$21798))) g$ls/false$21795)) '#f) (apply (case-lambda ((g$x$21803 g$dots$21804 g$y$21805) (letrec ((g$f$21809 (case-lambda ((g$y$21817 g$k$21818) ((case-lambda ((g$t$21821) ((case-lambda ((g$ls/false$21823) (if (if g$ls/false$21823 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$21823)) '#f) (apply (case-lambda (() (g$k$21818 g$maps$21744))) g$ls/false$21823) ((case-lambda ((g$t$21825) ((case-lambda ((g$ls/false$21827) (if (if g$ls/false$21827 (begin '#f (apply (case-lambda ((g$dots$21829 g$y$21830) (g$ellipsis?$21745 g$dots$21829))) g$ls/false$21827)) '#f) (apply (case-lambda ((g$dots$21833 g$y$21834) (g$f$21809 g$y$21834 (case-lambda ((g$maps$21837) (call-with-values (case-lambda (() (g$k$21818 (cons '() g$maps$21837)))) (case-lambda ((g$x$21839 g$maps$21840) (if (null? (car g$maps$21840)) (error 'expander '"extra ellipsis in syntax form" (g$strip$14533 g$src$21741 '())) (values (g$gen-mappend$21661 g$x$21839 (car g$maps$21840)) (cdr g$maps$21840))))))))))) g$ls/false$21827) ((case-lambda ((g$t$21843) ((case-lambda ((g$ls/false$21845) (if (if g$ls/false$21845 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$21845)) '#f) (apply (case-lambda (() (call-with-values (case-lambda (() (g$gen-syntax$21655 g$src$21741 g$y$21817 g$r$21743 g$maps$21744 g$ellipsis?$21745 g$vec?$21746))) (case-lambda ((g$y$21847 g$maps$21848) (call-with-values (case-lambda (() (g$k$21818 g$maps$21848))) (case-lambda ((g$x$21851 g$maps$21852) (values (g$gen-append$21659 g$x$21851 g$y$21847) g$maps$21852))))))))) g$ls/false$21845) (error 'expander '"invalid syntax" (g$strip$14533 g$t$21843 '()))))) ((case-lambda ((g$x$21855) '())) g$t$21843)))) g$t$21825)))) ((case-lambda ((g$x$21857) (if (g$syntax-pair?$14501 g$x$21857) (begin '#f ((case-lambda ((g$q$21859) (if g$q$21859 (begin '#f ((case-lambda ((g$r$21861) (if g$r$21861 (begin '#f (append g$q$21859 g$r$21861)) '#f))) ((case-lambda ((g$x$21863) (list g$x$21863))) (g$syntax-cdr$14513 g$x$21857)))) '#f))) ((case-lambda ((g$x$21865) (list g$x$21865))) (g$syntax-car$14509 g$x$21857)))) '#f))) g$t$21825)))) g$t$21821)))) ((case-lambda ((g$x$21867) (if (equal? (g$stx->datum$14535 g$x$21867) '()) (begin '#f '()) '#f))) g$t$21821)))) g$y$21817))))) (g$f$21809 g$y$21805 (case-lambda ((g$maps$21811) (call-with-values (case-lambda (() (g$gen-syntax$21655 g$src$21741 g$x$21803 g$r$21743 (cons '() g$maps$21811) g$ellipsis?$21745 '#f))) (case-lambda ((g$x$21813 g$maps$21814) (if (null? (car g$maps$21814)) (error 'expander '"extra ellipsis in syntax form" (g$strip$14533 g$src$21741 '())) (values (g$gen-map$21663 g$x$21813 (car g$maps$21814)) (cdr g$maps$21814)))))))))))) g$ls/false$21795) ((case-lambda ((g$t$21869) ((case-lambda ((g$ls/false$21871) (if (if g$ls/false$21871 (begin '#f (apply (case-lambda ((g$x$21873 g$y$21874) '#t)) g$ls/false$21871)) '#f) (apply (case-lambda ((g$x$21877 g$y$21878) (call-with-values (case-lambda (() (g$gen-syntax$21655 g$src$21741 g$x$21877 g$r$21743 g$maps$21744 g$ellipsis?$21745 '#f))) (case-lambda ((g$xnew$21881 g$maps$21882) (call-with-values (case-lambda (() (g$gen-syntax$21655 g$src$21741 g$y$21878 g$r$21743 g$maps$21882 g$ellipsis?$21745 g$vec?$21746))) (case-lambda ((g$ynew$21885 g$maps$21886) (values (g$gen-cons$21665 g$e$21742 g$x$21877 g$y$21878 g$xnew$21881 g$ynew$21885) g$maps$21886))))))))) g$ls/false$21871) ((case-lambda ((g$t$21889) ((case-lambda ((g$ls/false$21891) (if (if g$ls/false$21891 (begin '#f (apply (case-lambda ((g$ls$21893) (not (g$stx?$14467 g$e$21742)))) g$ls/false$21891)) '#f) (apply (case-lambda ((g$ls$21895) (call-with-values (case-lambda (() (g$gen-syntax$21655 g$src$21741 g$ls$21895 g$r$21743 g$maps$21744 g$ellipsis?$21745 '#t))) (case-lambda ((g$lsnew$21897 g$maps$21898) (values (g$gen-vector$21667 g$e$21742 g$ls$21895 g$lsnew$21897) g$maps$21898)))))) g$ls/false$21891) ((case-lambda ((g$t$21901) ((case-lambda ((g$ls/false$21903) (if (if g$ls/false$21903 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$21903)) '#f) (apply (case-lambda (() (values (list 'quote g$e$21742) g$maps$21744))) g$ls/false$21903) (error 'expander '"invalid syntax" (g$strip$14533 g$t$21901 '()))))) ((case-lambda ((g$x$21905) '())) g$t$21901)))) g$t$21889)))) ((case-lambda ((g$x$21907) (if (g$syntax-vector?$14503 g$x$21907) (begin '#f ((letrec ((g$f$21909 (case-lambda ((g$x$21911) (if (g$syntax-pair?$14501 g$x$21911) ((case-lambda ((g$cars/f$21913) (if g$cars/f$21913 (begin '#f ((case-lambda ((g$cdrs/f$21915) (if g$cdrs/f$21915 (begin '#f (map cons g$cars/f$21913 g$cdrs/f$21915)) '#f))) (g$f$21909 (g$syntax-cdr$14513 g$x$21911)))) '#f))) ((case-lambda ((g$x$21917) (list g$x$21917))) (g$syntax-car$14509 g$x$21911))) (if (g$syntax-null?$14505 g$x$21911) (list (begin 'ls '())) '#f)))))) g$f$21909) (g$syntax-vector->list$14499 g$x$21907))) '#f))) g$t$21889)))) g$t$21869)))) ((case-lambda ((g$x$21919) (if (g$syntax-pair?$14501 g$x$21919) (begin '#f ((case-lambda ((g$q$21921) (if g$q$21921 (begin '#f ((case-lambda ((g$r$21923) (if g$r$21923 (begin '#f (append g$q$21921 g$r$21923)) '#f))) ((case-lambda ((g$x$21925) (list g$x$21925))) (g$syntax-cdr$14513 g$x$21919)))) '#f))) ((case-lambda ((g$x$21927) (list g$x$21927))) (g$syntax-car$14509 g$x$21919)))) '#f))) g$t$21869)))) g$t$21793)))) ((case-lambda ((g$x$21929) (if (g$syntax-pair?$14501 g$x$21929) (begin '#f ((case-lambda ((g$q$21931) (if g$q$21931 (begin '#f ((case-lambda ((g$r$21933) (if g$r$21933 (begin '#f (append g$q$21931 g$r$21933)) '#f))) ((case-lambda ((g$x$21935) (if (g$syntax-pair?$14501 g$x$21935) (begin '#f ((case-lambda ((g$q$21937) (if g$q$21937 (begin '#f ((case-lambda ((g$r$21939) (if g$r$21939 (begin '#f (append g$q$21937 g$r$21939)) '#f))) ((case-lambda ((g$x$21941) (list g$x$21941))) (g$syntax-cdr$14513 g$x$21935)))) '#f))) ((case-lambda ((g$x$21943) (list g$x$21943))) (g$syntax-car$14509 g$x$21935)))) '#f))) (g$syntax-cdr$14513 g$x$21929)))) '#f))) ((case-lambda ((g$x$21945) (list g$x$21945))) (g$syntax-car$14509 g$x$21929)))) '#f))) g$t$21793)))) g$t$21779)))) ((case-lambda ((g$x$21947) (if (g$syntax-pair?$14501 g$x$21947) (begin '#f ((case-lambda ((g$q$21949) (if g$q$21949 (begin '#f ((case-lambda ((g$r$21951) (if g$r$21951 (begin '#f (append g$q$21949 g$r$21951)) '#f))) ((case-lambda ((g$x$21953) (if (g$syntax-pair?$14501 g$x$21953) (begin '#f ((case-lambda ((g$q$21955) (if g$q$21955 (begin '#f ((case-lambda ((g$r$21957) (if g$r$21957 (begin '#f (append g$q$21955 g$r$21957)) '#f))) ((case-lambda ((g$x$21959) (if (equal? (g$stx->datum$14535 g$x$21959) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$21953)))) '#f))) ((case-lambda ((g$x$21961) (list g$x$21961))) (g$syntax-car$14509 g$x$21953)))) '#f))) (g$syntax-cdr$14513 g$x$21947)))) '#f))) ((case-lambda ((g$x$21963) (list g$x$21963))) (g$syntax-car$14509 g$x$21947)))) '#f))) g$t$21779)))) g$t$21761)))) ((case-lambda ((g$x$21965) (list g$x$21965))) g$t$21761)))) g$t$21753)))) ((case-lambda ((g$x$21967) (list g$x$21967))) g$t$21753)))) g$e$21742)))) (set! g$gen-ref$21657 (case-lambda ((g$src$21723 g$var$21724 g$level$21725 g$maps$21726) (if (= g$level$21725 '0) (values g$var$21724 g$maps$21726) (if (null? g$maps$21726) (error 'expander '"missing ellipsis in syntax form" (g$strip$14533 g$src$21723 '())) (call-with-values (case-lambda (() (g$gen-ref$21657 g$src$21723 g$var$21724 (- g$level$21725 '1) (cdr g$maps$21726)))) (case-lambda ((g$outer-var$21731 g$outer-maps$21732) ((case-lambda ((g$t$21735) (if g$t$21735 ((case-lambda ((g$b$21737) (values (cdr g$b$21737) g$maps$21726))) g$t$21735) ((case-lambda ((g$inner-var$21739) (values g$inner-var$21739 (cons (cons (cons g$outer-var$21731 g$inner-var$21739) (car g$maps$21726)) g$outer-maps$21732)))) (g$gen-lexical$14425 'tmp))))) (assq g$outer-var$21731 (car g$maps$21726))))))))))) (set! g$gen-append$21659 (case-lambda ((g$x$21719 g$y$21720) (if (equal? g$y$21720 ''()) g$x$21719 (list 'append g$x$21719 g$y$21720))))) (set! g$gen-mappend$21661 (case-lambda ((g$e$21715 g$map-env$21716) (list 'apply '(primitive append) (g$gen-map$21663 g$e$21715 g$map-env$21716))))) (set! g$gen-map$21663 (case-lambda ((g$e$21697 g$map-env$21698) ((case-lambda ((g$formals$21701 g$actuals$21702) (if (eq? (car g$e$21697) 'ref) (car g$actuals$21702) (if (for-all (case-lambda ((g$x$21705) (if (eq? (car g$x$21705) 'ref) (begin '#f (memq (cadr g$x$21705) g$formals$21701)) '#f))) (cdr g$e$21697)) ((case-lambda ((g$args$21707) (cons 'map (cons (list 'primitive (car g$e$21697)) g$args$21707)))) (map ((case-lambda ((g$r$21709) (case-lambda ((g$x$21711) (cdr (assq (cadr g$x$21711) g$r$21709)))))) (map cons g$formals$21701 g$actuals$21702)) (cdr g$e$21697))) (cons* 'map (list 'lambda g$formals$21701 g$e$21697) g$actuals$21702))))) (map cdr g$map-env$21698) (map (case-lambda ((g$x$21713) (list 'ref (car g$x$21713)))) g$map-env$21698))))) (set! g$gen-cons$21665 (case-lambda ((g$e$21682 g$x$21683 g$y$21684 g$xnew$21685 g$ynew$21686) ((case-lambda ((g$t$21692) (if (memv g$t$21692 '(quote)) (if (eq? (car g$xnew$21685) 'quote) ((case-lambda ((g$xnew$21693 g$ynew$21694) (if (if (eq? g$xnew$21693 g$x$21683) (begin '#f (eq? g$ynew$21694 g$y$21684)) '#f) (list 'quote g$e$21682) (list 'quote (cons g$xnew$21693 g$ynew$21694))))) (cadr g$xnew$21685) (cadr g$ynew$21686)) (if (null? (cadr g$ynew$21686)) (list 'list g$xnew$21685) (list 'cons g$xnew$21685 g$ynew$21686))) (if (memv g$t$21692 '(list)) (cons 'list (cons g$xnew$21685 (cdr g$ynew$21686))) (list 'cons g$xnew$21685 g$ynew$21686))))) (car g$ynew$21686))))) (set! g$gen-vector$21667 (case-lambda ((g$e$21676 g$ls$21677 g$lsnew$21678) (if (eq? (car g$lsnew$21678) 'quote) (if (eq? (cadr g$lsnew$21678) g$ls$21677) (list 'quote g$e$21676) (list 'quote (list->vector (cadr g$lsnew$21678)))) (if (eq? (car g$lsnew$21678) 'list) (cons 'vector (cdr g$lsnew$21678)) (list 'list->vector g$lsnew$21678)))))) (set! g$regen$21669 (case-lambda ((g$x$21671) ((case-lambda ((g$t$21673) (if (memv g$t$21673 '(ref)) (cadr g$x$21671) (if (memv g$t$21673 '(primitive)) (list 'primitive (cadr g$x$21671)) (if (memv g$t$21673 '(quote)) (list 'quote (cadr g$x$21671)) (if (memv g$t$21673 '(lambda)) (g$g$build-lambda$14267$14404 '#f (cadr g$x$21671) (g$regen$21669 (caddr g$x$21671))) (if (memv g$t$21673 '(map)) ((case-lambda ((g$ls$21674) (cons '(primitive map) g$ls$21674))) (map g$regen$21669 (cdr g$x$21671))) (cons (list 'primitive (car g$x$21671)) (map g$regen$21669 (cdr g$x$21671)))))))))) (car g$x$21671))))) (case-lambda ((g$e$21969 g$r$21970 g$mr$21971) ((case-lambda ((g$t$21975) ((case-lambda ((g$ls/false$21977) (if (if g$ls/false$21977 (begin '#f (apply (case-lambda ((g$x$21979) '#t)) g$ls/false$21977)) '#f) (apply (case-lambda ((g$x$21981) (call-with-values (case-lambda (() (g$gen-syntax$21655 g$e$21969 g$x$21981 g$r$21970 '() g$ellipsis?$15036 '#f))) (case-lambda ((g$e$21983 g$maps$21984) (g$regen$21669 g$e$21983)))))) g$ls/false$21977) (error 'expander '"invalid syntax" (g$strip$14533 g$t$21975 '()))))) ((case-lambda ((g$x$21987) (if (g$syntax-pair?$14501 g$x$21987) (begin '#f ((case-lambda ((g$q$21989) (if g$q$21989 (begin '#f ((case-lambda ((g$r$21991) (if g$r$21991 (begin '#f (append g$q$21989 g$r$21991)) '#f))) ((case-lambda ((g$x$21993) (if (g$syntax-pair?$14501 g$x$21993) (begin '#f ((case-lambda ((g$q$21995) (if g$q$21995 (begin '#f ((case-lambda ((g$r$21997) (if g$r$21997 (begin '#f (append g$q$21995 g$r$21997)) '#f))) ((case-lambda ((g$x$21999) (if (equal? (g$stx->datum$14535 g$x$21999) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$21993)))) '#f))) ((case-lambda ((g$x$22001) (list g$x$22001))) (g$syntax-car$14509 g$x$21993)))) '#f))) (g$syntax-cdr$14513 g$x$21987)))) '#f))) ((case-lambda ((g$x$22003) '())) (g$syntax-car$14509 g$x$21987)))) '#f))) g$t$21975)))) g$e$21969)))))) '#f '#f '#f '#f '#f '#f '#f '#f))))) (set! g$core-macro-transformer$15042 (case-lambda ((g$name$22005) ((case-lambda ((g$t$22007) (if (memv g$t$22007 '(quote)) g$quote-transformer$14972 (if (memv g$t$22007 '(lambda)) g$lambda-transformer$14976 (if (memv g$t$22007 '(case-lambda)) g$case-lambda-transformer$14974 (if (memv g$t$22007 '(let-values)) g$let-values-transformer$14950 (if (memv g$t$22007 '(letrec)) g$letrec-transformer$14954 (if (memv g$t$22007 '(letrec*)) g$letrec*-transformer$14956 (if (memv g$t$22007 '(case)) g$case-transformer$14970 (if (memv g$t$22007 '(if)) g$if-transformer$14968 (if (memv g$t$22007 '(when)) g$when-transformer$14964 (if (memv g$t$22007 '(unless)) g$unless-transformer$14966 (if (memv g$t$22007 '(parameterize)) g$parameterize-transformer$15028 (if (memv g$t$22007 '(foreign-call)) g$foreign-call-transformer$15030 (if (memv g$t$22007 '(syntax-case)) g$syntax-case-transformer$15038 (if (memv g$t$22007 '(syntax)) g$syntax-transformer$15040 (if (memv g$t$22007 '(type-descriptor)) g$type-descriptor-transformer$14958 (if (memv g$t$22007 '(record-type-descriptor)) g$record-type-descriptor-transformer$14960 (if (memv g$t$22007 '(record-constructor-descriptor)) g$record-constructor-descriptor-transformer$14962 (error 'macro-transformer '"cannot find transformer" g$name$22005)))))))))))))))))))) g$name$22005)))) (set! g$file-options-macro$15044 (case-lambda ((g$x$22008) ((case-lambda ((g$t$22010) ((case-lambda ((g$ls/false$22012) (if (if g$ls/false$22012 (begin '#f (apply (case-lambda ((g$opt*$22014) (if (for-all g$id?$14515 g$opt*$22014) (begin '#f (g$g$file-options-spec$13566$13582 (map g$id->sym$14517 g$opt*$22014))) '#f))) g$ls/false$22012)) '#f) (apply (case-lambda ((g$opt*$22016) (g$bless$14978 (list 'quote (g$g$file-options-spec$13566$13582 (map g$id->sym$14517 g$opt*$22016)))))) g$ls/false$22012) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22010 '()))))) ((case-lambda ((g$x$22018) (if (g$syntax-pair?$14501 g$x$22018) (begin '#f ((case-lambda ((g$q$22020) (if g$q$22020 (begin '#f ((case-lambda ((g$r$22022) (if g$r$22022 (begin '#f (append g$q$22020 g$r$22022)) '#f))) ((letrec ((g$f$22024 (case-lambda ((g$x$22026) (if (g$syntax-pair?$14501 g$x$22026) ((case-lambda ((g$cars/f$22028) (if g$cars/f$22028 (begin '#f ((case-lambda ((g$cdrs/f$22030) (if g$cdrs/f$22030 (begin '#f (map cons g$cars/f$22028 g$cdrs/f$22030)) '#f))) (g$f$22024 (g$syntax-cdr$14513 g$x$22026)))) '#f))) ((case-lambda ((g$x$22032) (list g$x$22032))) (g$syntax-car$14509 g$x$22026))) (if (g$syntax-null?$14505 g$x$22026) (list (begin 'opt* '())) '#f)))))) g$f$22024) (g$syntax-cdr$14513 g$x$22018)))) '#f))) ((case-lambda ((g$x$22034) '())) (g$syntax-car$14509 g$x$22018)))) '#f))) g$t$22010)))) g$x$22008)))) (set! g$symbol-macro$15046 (case-lambda ((g$x$22036 g$set$22037) ((case-lambda ((g$t$22040) ((case-lambda ((g$ls/false$22042) (if (if g$ls/false$22042 (begin '#f (apply (case-lambda ((g$name$22044) (if (g$id?$14515 g$name$22044) (begin '#f (memq (g$id->sym$14517 g$name$22044) g$set$22037)) '#f))) g$ls/false$22042)) '#f) (apply (case-lambda ((g$name$22046) (g$bless$14978 (list 'quote g$name$22046)))) g$ls/false$22042) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22040 '()))))) ((case-lambda ((g$x$22048) (if (g$syntax-pair?$14501 g$x$22048) (begin '#f ((case-lambda ((g$q$22050) (if g$q$22050 (begin '#f ((case-lambda ((g$r$22052) (if g$r$22052 (begin '#f (append g$q$22050 g$r$22052)) '#f))) ((case-lambda ((g$x$22054) (if (g$syntax-pair?$14501 g$x$22054) (begin '#f ((case-lambda ((g$q$22056) (if g$q$22056 (begin '#f ((case-lambda ((g$r$22058) (if g$r$22058 (begin '#f (append g$q$22056 g$r$22058)) '#f))) ((case-lambda ((g$x$22060) (if (equal? (g$stx->datum$14535 g$x$22060) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$22054)))) '#f))) ((case-lambda ((g$x$22062) (list g$x$22062))) (g$syntax-car$14509 g$x$22054)))) '#f))) (g$syntax-cdr$14513 g$x$22048)))) '#f))) ((case-lambda ((g$x$22064) '())) (g$syntax-car$14509 g$x$22048)))) '#f))) g$t$22040)))) g$x$22036)))) (set! g$macro-transformer$15048 (case-lambda ((g$x$22066) (if (procedure? g$x$22066) g$x$22066 (if (symbol? g$x$22066) ((case-lambda ((g$t$22068) (if (memv g$t$22068 '(define-record-type)) g$define-record-type-macro$15022 (if (memv g$t$22068 '(define-struct)) g$define-struct-macro$15020 (if (memv g$t$22068 '(include)) g$include-macro$15012 (if (memv g$t$22068 '(cond)) g$cond-macro$15010 (if (memv g$t$22068 '(let)) g$let-macro$14982 (if (memv g$t$22068 '(do)) g$do-macro$15002 (if (memv g$t$22068 '(or)) g$or-macro$15006 (if (memv g$t$22068 '(and)) g$and-macro$15008 (if (memv g$t$22068 '(let*)) g$let*-macro$15004 (if (memv g$t$22068 '(syntax-rules)) g$syntax-rules-macro$15014 (if (memv g$t$22068 '(quasiquote)) g$quasiquote-macro$15016 (if (memv g$t$22068 '(quasisyntax)) g$quasisyntax-macro$15018 (if (memv g$t$22068 '(with-syntax)) g$with-syntax-macro$14980 (if (memv g$t$22068 '(identifier-syntax)) g$identifier-syntax-macro$15000 (if (memv g$t$22068 '(time)) g$time-macro$14992 (if (memv g$t$22068 '(delay)) g$delay-macro$14994 (if (memv g$t$22068 '(assert)) g$assert-macro$14996 (if (memv g$t$22068 '(endianness)) g$endianness-macro$14998 (if (memv g$t$22068 '(guard)) g$guard-macro$14988 (if (memv g$t$22068 '(define-enumeration)) g$define-enumeration-macro$14990 (if (memv g$t$22068 '(trace-lambda)) g$trace-lambda-macro$14984 (if (memv g$t$22068 '(trace-define)) g$trace-define-macro$14986 (if (memv g$t$22068 '(define-condition-type)) g$define-condition-type-macro$15024 (if (memv g$t$22068 '(eol-style)) (case-lambda ((g$x$22073) (g$symbol-macro$15046 g$x$22073 '(none lf cr crlf nel crnel ls)))) (if (memv g$t$22068 '(error-handling-mode)) (case-lambda ((g$x$22071) (g$symbol-macro$15046 g$x$22071 '(ignore raise replace)))) (if (memv g$t$22068 '(buffer-mode)) (case-lambda ((g$x$22069) (g$symbol-macro$15046 g$x$22069 '(none line block)))) (if (memv g$t$22068 '(file-options)) g$file-options-macro$15044 (if (memv g$t$22068 '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g$incorrect-usage-macro$15026 (error 'macro-transformer '"invalid macro" g$x$22066))))))))))))))))))))))))))))))) g$x$22066) (error 'core-macro-transformer '"invalid macro" g$x$22066)))))) (set! g$local-macro-transformer$15050 (case-lambda ((g$x$22075) (car g$x$22075)))) (set! g$chi-macro$15052 (case-lambda ((g$p$22077 g$e$22078) ((case-lambda ((g$s$22081) (g$add-mark$14493 (g$gen-mark$14483) g$s$22081))) ((g$macro-transformer$15048 g$p$22077) (g$add-mark$14493 g$anti-mark$14485 g$e$22078)))))) (set! g$chi-local-macro$15054 (case-lambda ((g$p$22083 g$e$22084) ((case-lambda ((g$s$22087) (g$add-mark$14493 (g$gen-mark$14483) g$s$22087))) ((g$local-macro-transformer$15050 g$p$22083) (g$add-mark$14493 g$anti-mark$14485 g$e$22084)))))) (set! g$chi-global-macro$15056 (case-lambda ((g$p$22089 g$e$22090) ((case-lambda ((g$lib$22093 g$loc$22094) (begin (g$g$visit-library$13818$14102 g$lib$22093) ((case-lambda ((g$x$22097) ((case-lambda ((g$transformer$22099) ((case-lambda ((g$s$22101) (g$add-mark$14493 (g$gen-mark$14483) g$s$22101))) (g$transformer$22099 (g$add-mark$14493 g$anti-mark$14485 g$e$22090))))) (if (procedure? g$x$22097) g$x$22097 (error 'chi-global-macro '"not a procedure"))))) (symbol-value g$loc$22094))))) (car g$p$22089) (cdr g$p$22089))))) (set! g$chi-expr*$15058 (case-lambda ((g$e*$22103 g$r$22104 g$mr$22105) (if (null? g$e*$22103) '() ((case-lambda ((g$e$22109) (cons g$e$22109 (g$chi-expr*$15058 (cdr g$e*$22103) g$r$22104 g$mr$22105)))) (g$chi-expr$15062 (car g$e*$22103) g$r$22104 g$mr$22105)))))) (set! g$chi-application$15060 (case-lambda ((g$e$22111 g$r$22112 g$mr$22113) ((case-lambda ((g$t$22117) ((case-lambda ((g$ls/false$22119) (if (if g$ls/false$22119 (begin '#f (apply (case-lambda ((g$rator$22121 g$rands$22122) '#t)) g$ls/false$22119)) '#f) (apply (case-lambda ((g$rator$22125 g$rands$22126) ((case-lambda ((g$rator$22129) (cons g$rator$22129 (g$chi-expr*$15058 g$rands$22126 g$r$22112 g$mr$22113)))) (g$chi-expr$15062 g$rator$22125 g$r$22112 g$mr$22113)))) g$ls/false$22119) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22117 '()))))) ((case-lambda ((g$x$22131) (if (g$syntax-pair?$14501 g$x$22131) (begin '#f ((case-lambda ((g$q$22133) (if g$q$22133 (begin '#f ((case-lambda ((g$r$22135) (if g$r$22135 (begin '#f (append g$q$22133 g$r$22135)) '#f))) ((letrec ((g$f$22137 (case-lambda ((g$x$22139) (if (g$syntax-pair?$14501 g$x$22139) ((case-lambda ((g$cars/f$22141) (if g$cars/f$22141 (begin '#f ((case-lambda ((g$cdrs/f$22143) (if g$cdrs/f$22143 (begin '#f (map cons g$cars/f$22141 g$cdrs/f$22143)) '#f))) (g$f$22137 (g$syntax-cdr$14513 g$x$22139)))) '#f))) ((case-lambda ((g$x$22145) (list g$x$22145))) (g$syntax-car$14509 g$x$22139))) (if (g$syntax-null?$14505 g$x$22139) (list (begin 'rands '())) '#f)))))) g$f$22137) (g$syntax-cdr$14513 g$x$22131)))) '#f))) ((case-lambda ((g$x$22147) (list g$x$22147))) (g$syntax-car$14509 g$x$22131)))) '#f))) g$t$22117)))) g$e$22111)))) (set! g$chi-expr$15062 (case-lambda ((g$e$22149 g$r$22150 g$mr$22151) (call-with-values (case-lambda (() (g$syntax-type$14547 g$e$22149 g$r$22150))) (case-lambda ((g$type$22155 g$value$22156 g$kwd$22157) ((case-lambda ((g$t$22161) (if (memv g$t$22161 '(core-macro)) ((case-lambda ((g$transformer$22298) (g$transformer$22298 g$e$22149 g$r$22150 g$mr$22151))) (g$core-macro-transformer$15042 g$value$22156)) (if (memv g$t$22161 '(global)) ((case-lambda ((g$lib$22294) ((case-lambda ((g$loc$22296) ((case-lambda (() (begin ((g$inv-collector$15110) g$lib$22294) g$loc$22296)))))) (cdr g$value$22156)))) (car g$value$22156)) (if (memv g$t$22161 '(core-prim)) ((case-lambda ((g$name$22292) (list 'primitive g$name$22292))) g$value$22156) (if (memv g$t$22161 '(call)) (g$chi-application$15060 g$e$22149 g$r$22150 g$mr$22151) (if (memv g$t$22161 '(lexical)) ((case-lambda ((g$lex$22290) g$lex$22290)) g$value$22156) (if (memv g$t$22161 '(global-macro global-macro!)) (g$chi-expr$15062 (g$chi-global-macro$15056 g$value$22156 g$e$22149) g$r$22150 g$mr$22151) (if (memv g$t$22161 '(local-macro local-macro!)) (g$chi-expr$15062 (g$chi-local-macro$15054 g$value$22156 g$e$22149) g$r$22150 g$mr$22151) (if (memv g$t$22161 '(macro macro!)) (g$chi-expr$15062 (g$chi-macro$15052 g$value$22156 g$e$22149) g$r$22150 g$mr$22151) (if (memv g$t$22161 '(constant)) ((case-lambda ((g$datum$22288) (list 'quote g$datum$22288))) g$value$22156) (if (memv g$t$22161 '(set!)) (g$chi-set!$15064 g$e$22149 g$r$22150 g$mr$22151) (if (memv g$t$22161 '(begin)) ((case-lambda ((g$t$22250) ((case-lambda ((g$ls/false$22252) (if (if g$ls/false$22252 (begin '#f (apply (case-lambda ((g$x$22254 g$x*$22255) '#t)) g$ls/false$22252)) '#f) (apply (case-lambda ((g$x$22258 g$x*$22259) (g$g$build-sequence$14335$14398 '#f (g$chi-expr*$15058 (cons g$x$22258 g$x*$22259) g$r$22150 g$mr$22151)))) g$ls/false$22252) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22250 '()))))) ((case-lambda ((g$x$22262) (if (g$syntax-pair?$14501 g$x$22262) (begin '#f ((case-lambda ((g$q$22264) (if g$q$22264 (begin '#f ((case-lambda ((g$r$22266) (if g$r$22266 (begin '#f (append g$q$22264 g$r$22266)) '#f))) ((case-lambda ((g$x$22268) (if (g$syntax-pair?$14501 g$x$22268) (begin '#f ((case-lambda ((g$q$22270) (if g$q$22270 (begin '#f ((case-lambda ((g$r$22272) (if g$r$22272 (begin '#f (append g$q$22270 g$r$22272)) '#f))) ((letrec ((g$f$22274 (case-lambda ((g$x$22276) (if (g$syntax-pair?$14501 g$x$22276) ((case-lambda ((g$cars/f$22278) (if g$cars/f$22278 (begin '#f ((case-lambda ((g$cdrs/f$22280) (if g$cdrs/f$22280 (begin '#f (map cons g$cars/f$22278 g$cdrs/f$22280)) '#f))) (g$f$22274 (g$syntax-cdr$14513 g$x$22276)))) '#f))) ((case-lambda ((g$x$22282) (list g$x$22282))) (g$syntax-car$14509 g$x$22276))) (if (g$syntax-null?$14505 g$x$22276) (list (begin 'x* '())) '#f)))))) g$f$22274) (g$syntax-cdr$14513 g$x$22268)))) '#f))) ((case-lambda ((g$x$22284) (list g$x$22284))) (g$syntax-car$14509 g$x$22268)))) '#f))) (g$syntax-cdr$14513 g$x$22262)))) '#f))) ((case-lambda ((g$x$22286) '())) (g$syntax-car$14509 g$x$22262)))) '#f))) g$t$22250)))) g$e$22149) (if (memv g$t$22161 '(let-syntax letrec-syntax)) ((case-lambda ((g$t$22162) ((case-lambda ((g$ls/false$22164) (if (if g$ls/false$22164 (begin '#f (apply (case-lambda ((g$xlhs*$22166 g$xrhs*$22167 g$xbody$22168 g$xbody*$22169) (if (g$valid-bound-ids?$14525 g$xlhs*$22166) (void) (error 'expander '"invalid identifiers" (g$strip$14533 g$e$22149 '()))))) g$ls/false$22164)) '#f) (apply (case-lambda ((g$xlhs*$22174 g$xrhs*$22175 g$xbody$22176 g$xbody*$22177) ((case-lambda ((g$xlab*$22182) ((case-lambda ((g$xrib$22184) ((case-lambda ((g$xb*$22186) ((case-lambda (() (g$g$build-sequence$14335$14398 '#f (g$chi-expr*$15058 (map (case-lambda ((g$x$22188) (g$add-subst$14495 g$xrib$22184 g$x$22188))) (cons g$xbody$22176 g$xbody*$22177)) (append (map cons g$xlab*$22182 g$xb*$22186) g$r$22150) (append (map cons g$xlab*$22182 g$xb*$22186) g$mr$22151)))))))) (map (case-lambda ((g$x$22190) (g$make-eval-transformer$14578 (g$expand-transformer$15096 (if (eq? g$type$22155 'let-syntax) g$x$22190 (g$add-subst$14495 g$xrib$22184 g$x$22190)) g$mr$22151)))) g$xrhs*$22175)))) (g$make-full-rib$14462 g$xlhs*$22174 g$xlab*$22182)))) (map g$gen-label$14429 g$xlhs*$22174)))) g$ls/false$22164) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22162 '()))))) ((case-lambda ((g$x$22192) (if (g$syntax-pair?$14501 g$x$22192) (begin '#f ((case-lambda ((g$q$22194) (if g$q$22194 (begin '#f ((case-lambda ((g$r$22196) (if g$r$22196 (begin '#f (append g$q$22194 g$r$22196)) '#f))) ((case-lambda ((g$x$22198) (if (g$syntax-pair?$14501 g$x$22198) (begin '#f ((case-lambda ((g$q$22200) (if g$q$22200 (begin '#f ((case-lambda ((g$r$22202) (if g$r$22202 (begin '#f (append g$q$22200 g$r$22202)) '#f))) ((case-lambda ((g$x$22204) (if (g$syntax-pair?$14501 g$x$22204) (begin '#f ((case-lambda ((g$q$22206) (if g$q$22206 (begin '#f ((case-lambda ((g$r$22208) (if g$r$22208 (begin '#f (append g$q$22206 g$r$22208)) '#f))) ((letrec ((g$f$22210 (case-lambda ((g$x$22212) (if (g$syntax-pair?$14501 g$x$22212) ((case-lambda ((g$cars/f$22214) (if g$cars/f$22214 (begin '#f ((case-lambda ((g$cdrs/f$22216) (if g$cdrs/f$22216 (begin '#f (map cons g$cars/f$22214 g$cdrs/f$22216)) '#f))) (g$f$22210 (g$syntax-cdr$14513 g$x$22212)))) '#f))) ((case-lambda ((g$x$22218) (list g$x$22218))) (g$syntax-car$14509 g$x$22212))) (if (g$syntax-null?$14505 g$x$22212) (list (begin 'xbody* '())) '#f)))))) g$f$22210) (g$syntax-cdr$14513 g$x$22204)))) '#f))) ((case-lambda ((g$x$22220) (list g$x$22220))) (g$syntax-car$14509 g$x$22204)))) '#f))) (g$syntax-cdr$14513 g$x$22198)))) '#f))) ((letrec ((g$f$22222 (case-lambda ((g$x$22224) (if (g$syntax-pair?$14501 g$x$22224) ((case-lambda ((g$cars/f$22226) (if g$cars/f$22226 (begin '#f ((case-lambda ((g$cdrs/f$22228) (if g$cdrs/f$22228 (begin '#f (map cons g$cars/f$22226 g$cdrs/f$22228)) '#f))) (g$f$22222 (g$syntax-cdr$14513 g$x$22224)))) '#f))) ((case-lambda ((g$x$22230) (if (g$syntax-pair?$14501 g$x$22230) (begin '#f ((case-lambda ((g$q$22232) (if g$q$22232 (begin '#f ((case-lambda ((g$r$22234) (if g$r$22234 (begin '#f (append g$q$22232 g$r$22234)) '#f))) ((case-lambda ((g$x$22236) (if (g$syntax-pair?$14501 g$x$22236) (begin '#f ((case-lambda ((g$q$22238) (if g$q$22238 (begin '#f ((case-lambda ((g$r$22240) (if g$r$22240 (begin '#f (append g$q$22238 g$r$22240)) '#f))) ((case-lambda ((g$x$22242) (if (equal? (g$stx->datum$14535 g$x$22242) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$22236)))) '#f))) ((case-lambda ((g$x$22244) (list g$x$22244))) (g$syntax-car$14509 g$x$22236)))) '#f))) (g$syntax-cdr$14513 g$x$22230)))) '#f))) ((case-lambda ((g$x$22246) (list g$x$22246))) (g$syntax-car$14509 g$x$22230)))) '#f))) (g$syntax-car$14509 g$x$22224))) (if (g$syntax-null?$14505 g$x$22224) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f)))))) g$f$22222) (g$syntax-car$14509 g$x$22198)))) '#f))) (g$syntax-cdr$14513 g$x$22192)))) '#f))) ((case-lambda ((g$x$22248) '())) (g$syntax-car$14509 g$x$22192)))) '#f))) g$t$22162)))) g$e$22149) (if (memv g$t$22161 '(displaced-lexical)) (error 'expander '"identifier out of context" (g$strip$14533 g$e$22149 '())) (if (memv g$t$22161 '(syntax)) (error 'expander '"reference to pattern variable outside a syntax form" (g$strip$14533 g$e$22149 '())) (if (memv g$t$22161 '(define define-syntax module import)) (error 'expander '"invalid expression" (g$strip$14533 g$e$22149 '())) (error 'expander '"invalid expression" (g$strip$14533 g$e$22149 '()))))))))))))))))))) g$type$22155))))))) (set! g$chi-set!$15064 (case-lambda ((g$e$22300 g$r$22301 g$mr$22302) ((case-lambda ((g$t$22306) ((case-lambda ((g$ls/false$22308) (if (if g$ls/false$22308 (begin '#f (apply (case-lambda ((g$x$22310 g$v$22311) (g$id?$14515 g$x$22310))) g$ls/false$22308)) '#f) (apply (case-lambda ((g$x$22314 g$v$22315) (call-with-values (case-lambda (() (g$syntax-type$14547 g$x$22314 g$r$22301))) (case-lambda ((g$type$22318 g$value$22319 g$kwd$22320) ((case-lambda ((g$t$22324) (if (memv g$t$22324 '(lexical)) (list 'set! g$value$22319 (g$chi-expr$15062 g$v$22315 g$r$22301 g$mr$22302)) (if (memv g$t$22324 '(global core-prim)) (error 'expander '"cannot modify imported identifier in" (g$strip$14533 g$e$22300 '())) (if (memv g$t$22324 '(global-macro!)) (g$chi-expr$15062 (g$chi-global-macro$15056 g$value$22319 g$e$22300) g$r$22301 g$mr$22302) (if (memv g$t$22324 '(local-macro!)) (g$chi-expr$15062 (g$chi-local-macro$15054 g$value$22319 g$e$22300) g$r$22301 g$mr$22302) (error 'expander '"invalid syntax" (g$stx->datum$14535 g$e$22300)))))))) g$type$22318)))))) g$ls/false$22308) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22306 '()))))) ((case-lambda ((g$x$22325) (if (g$syntax-pair?$14501 g$x$22325) (begin '#f ((case-lambda ((g$q$22327) (if g$q$22327 (begin '#f ((case-lambda ((g$r$22329) (if g$r$22329 (begin '#f (append g$q$22327 g$r$22329)) '#f))) ((case-lambda ((g$x$22331) (if (g$syntax-pair?$14501 g$x$22331) (begin '#f ((case-lambda ((g$q$22333) (if g$q$22333 (begin '#f ((case-lambda ((g$r$22335) (if g$r$22335 (begin '#f (append g$q$22333 g$r$22335)) '#f))) ((case-lambda ((g$x$22337) (if (g$syntax-pair?$14501 g$x$22337) (begin '#f ((case-lambda ((g$q$22339) (if g$q$22339 (begin '#f ((case-lambda ((g$r$22341) (if g$r$22341 (begin '#f (append g$q$22339 g$r$22341)) '#f))) ((case-lambda ((g$x$22343) (if (equal? (g$stx->datum$14535 g$x$22343) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$22337)))) '#f))) ((case-lambda ((g$x$22345) (list g$x$22345))) (g$syntax-car$14509 g$x$22337)))) '#f))) (g$syntax-cdr$14513 g$x$22331)))) '#f))) ((case-lambda ((g$x$22347) (list g$x$22347))) (g$syntax-car$14509 g$x$22331)))) '#f))) (g$syntax-cdr$14513 g$x$22325)))) '#f))) ((case-lambda ((g$x$22349) '())) (g$syntax-car$14509 g$x$22325)))) '#f))) g$t$22306)))) g$e$22300)))) (set! g$chi-lambda-clause$15066 (case-lambda ((g$fmls$22351 g$body*$22352 g$r$22353 g$mr$22354) ((case-lambda ((g$t$22359) ((case-lambda ((g$ls/false$22361) (if (if g$ls/false$22361 (begin '#f (apply (case-lambda ((g$x*$22363) '#t)) g$ls/false$22361)) '#f) (apply (case-lambda ((g$x*$22365) (if (g$valid-bound-ids?$14525 g$x*$22365) ((case-lambda ((g$lex*$22367 g$lab*$22368) (values g$lex*$22367 (g$chi-internal$15078 (g$add-subst$14495 (g$make-full-rib$14462 g$x*$22365 g$lab*$22368) g$body*$22352) (g$add-lexicals$14948 g$lab*$22368 g$lex*$22367 g$r$22353) g$mr$22354)))) (map g$gen-lexical$14425 g$x*$22365) (map g$gen-label$14429 g$x*$22365)) (error 'expander '"invalid fmls" (g$strip$14533 g$fmls$22351 '()))))) g$ls/false$22361) ((case-lambda ((g$t$22371) ((case-lambda ((g$ls/false$22373) (if (if g$ls/false$22373 (begin '#f (apply (case-lambda ((g$x*$22375 g$x$22376) '#t)) g$ls/false$22373)) '#f) (apply (case-lambda ((g$x*$22379 g$x$22380) (if (g$valid-bound-ids?$14525 (cons g$x$22380 g$x*$22379)) ((case-lambda ((g$lex*$22383 g$lab*$22384 g$lex$22385 g$lab$22386) (values (append g$lex*$22383 g$lex$22385) (g$chi-internal$15078 (g$add-subst$14495 (g$make-full-rib$14462 (cons g$x$22380 g$x*$22379) (cons g$lab$22386 g$lab*$22384)) g$body*$22352) (g$add-lexicals$14948 (cons g$lab$22386 g$lab*$22384) (cons g$lex$22385 g$lex*$22383) g$r$22353) g$mr$22354)))) (map g$gen-lexical$14425 g$x*$22379) (map g$gen-label$14429 g$x*$22379) (g$gen-lexical$14425 g$x$22380) (g$gen-label$14429 g$x$22380)) (error 'expander '"invalid fmls" (g$strip$14533 g$fmls$22351 '()))))) g$ls/false$22373) ((case-lambda ((g$t$22391) ((case-lambda ((g$ls/false$22393) (if (if g$ls/false$22393 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$22393)) '#f) (apply (case-lambda (() (error 'expander '"invalid fmls" (g$strip$14533 g$fmls$22351 '())))) g$ls/false$22393) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22391 '()))))) ((case-lambda ((g$x$22395) '())) g$t$22391)))) g$t$22371)))) ((letrec ((g$f$22397 (case-lambda ((g$x$22403) (if (g$syntax-pair?$14501 g$x$22403) ((case-lambda ((g$cars/f$22405) (if g$cars/f$22405 (begin '#f ((case-lambda ((g$d/f$22407) (if g$d/f$22407 (begin '#f (cons (map cons g$cars/f$22405 (car g$d/f$22407)) (cdr g$d/f$22407))) '#f))) (g$f$22397 (g$syntax-cdr$14513 g$x$22403)))) '#f))) ((case-lambda ((g$x$22409) (list g$x$22409))) (g$syntax-car$14509 g$x$22403))) ((case-lambda ((g$d$22411) (if g$d$22411 (begin '#f (cons (list (begin 'x* '())) g$d$22411)) '#f))) ((case-lambda ((g$x$22413) (list g$x$22413))) g$x$22403))))))) (case-lambda ((g$x$22399) ((case-lambda ((g$x$22401) (if g$x$22401 (begin '#f (append (car g$x$22401) (cdr g$x$22401))) '#f))) (g$f$22397 g$x$22399))))) g$t$22371)))) g$t$22359)))) ((letrec ((g$f$22415 (case-lambda ((g$x$22417) (if (g$syntax-pair?$14501 g$x$22417) ((case-lambda ((g$cars/f$22419) (if g$cars/f$22419 (begin '#f ((case-lambda ((g$cdrs/f$22421) (if g$cdrs/f$22421 (begin '#f (map cons g$cars/f$22419 g$cdrs/f$22421)) '#f))) (g$f$22415 (g$syntax-cdr$14513 g$x$22417)))) '#f))) ((case-lambda ((g$x$22423) (list g$x$22423))) (g$syntax-car$14509 g$x$22417))) (if (g$syntax-null?$14505 g$x$22417) (list (begin 'x* '())) '#f)))))) g$f$22415) g$t$22359)))) g$fmls$22351)))) (set! g$chi-lambda-clause*$15068 (case-lambda ((g$fmls*$22425 g$body**$22426 g$r$22427 g$mr$22428) (if (null? g$fmls*$22425) (values '() '()) (call-with-values (case-lambda (() (g$chi-lambda-clause$15066 (car g$fmls*$22425) (car g$body**$22426) g$r$22427 g$mr$22428))) (case-lambda ((g$a$22433 g$b$22434) (call-with-values (case-lambda (() (g$chi-lambda-clause*$15068 (cdr g$fmls*$22425) (cdr g$body**$22426) g$r$22427 g$mr$22428))) (case-lambda ((g$a*$22437 g$b*$22438) (values (cons g$a$22433 g$a*$22437) (cons g$b$22434 g$b*$22438)))))))))))) (set! g$chi-rhs$15070 (case-lambda ((g$rhs$22441 g$r$22442 g$mr$22443) ((case-lambda ((g$t$22447) (if (memv g$t$22447 '(defun)) ((case-lambda ((g$x$22452) ((case-lambda ((g$fmls$22454 g$body*$22455) (call-with-values (case-lambda (() (g$chi-lambda-clause$15066 g$fmls$22454 g$body*$22455 g$r$22442 g$mr$22443))) (case-lambda ((g$fmls$22458 g$body$22459) (g$g$build-lambda$14267$14404 '#f g$fmls$22458 g$body$22459)))))) (car g$x$22452) (cdr g$x$22452)))) (cdr g$rhs$22441)) (if (memv g$t$22447 '(expr)) ((case-lambda ((g$expr$22450) (g$chi-expr$15062 g$expr$22450 g$r$22442 g$mr$22443))) (cdr g$rhs$22441)) (if (memv g$t$22447 '(top-expr)) ((case-lambda ((g$expr$22448) (g$g$build-sequence$14335$14398 '#f (list (g$chi-expr$15062 g$expr$22448 g$r$22442 g$mr$22443) (g$g$build-void$14337$14397))))) (cdr g$rhs$22441)) (error 'chi-rhs '"invalid rhs" g$rhs$22441)))))) (car g$rhs$22441))))) (set! g$chi-rhs*$15072 (case-lambda ((g$rhs*$22462 g$r$22463 g$mr$22464) (letrec ((g$f$22468 (case-lambda ((g$ls$22470) (if (null? g$ls$22470) '() ((case-lambda ((g$a$22472) (cons g$a$22472 (g$f$22468 (cdr g$ls$22470))))) (g$chi-rhs$15070 (car g$ls$22470) g$r$22463 g$mr$22464))))))) (g$f$22468 g$rhs*$22462))))) (set! g$find-bound=?$15074 (case-lambda ((g$x$22474 g$lhs*$22475 g$rhs*$22476) (if (null? g$lhs*$22475) '#f (if (g$bound-id=?$14521 g$x$22474 (car g$lhs*$22475)) (car g$rhs*$22476) (g$find-bound=?$15074 g$x$22474 (cdr g$lhs*$22475) (cdr g$rhs*$22476))))))) (set! g$find-dups$15076 (case-lambda ((g$ls$22480) (letrec ((g$f$22482 (case-lambda ((g$ls$22484 g$dups$22485) (if (null? g$ls$22484) g$dups$22485 ((case-lambda ((g$t$22488) (if g$t$22488 ((case-lambda ((g$x$22490) (g$f$22482 (cdr g$ls$22484) (cons (list (car g$ls$22484) g$x$22490) g$dups$22485)))) g$t$22488) (g$f$22482 (cdr g$ls$22484) g$dups$22485)))) (g$find-bound=?$15074 (car g$ls$22484) (cdr g$ls$22484) (cdr g$ls$22484)))))))) (g$f$22482 g$ls$22480 '()))))) (set! g$chi-internal$15078 (case-lambda ((g$e*$22492 g$r$22493 g$mr$22494) ((case-lambda ((g$rib$22498) (call-with-values (case-lambda (() (g$chi-body*$15084 (map (case-lambda ((g$x$22500) (g$add-subst$14495 g$rib$22498 g$x$22500))) (g$syntax->list$14511 g$e*$22492)) g$r$22493 g$mr$22494 '() '() '() '() g$rib$22498 '#f))) (case-lambda ((g$e*$22502 g$r$22503 g$mr$22504 g$lex*$22505 g$rhs*$22506 g$mod**$22507 g$kwd*$22508) (begin (if (null? g$e*$22502) (error 'expander '"no expression in body" (g$strip$14533 g$e*$22502 '())) (void)) ((case-lambda ((g$rhs*$22516 g$init*$22517) (g$g$build-letrec*$14341$14395 '#f (reverse g$lex*$22505) (reverse g$rhs*$22516) (g$g$build-sequence$14335$14398 '#f g$init*$22517)))) (g$chi-rhs*$15072 g$rhs*$22506 g$r$22503 g$mr$22504) (g$chi-expr*$15058 (append (apply append (reverse g$mod**$22507)) g$e*$22502) g$r$22503 g$mr$22504)))))))) (g$make-empty-rib$14452))))) (set! g$parse-module$15080 (case-lambda ((g$e$22520) ((case-lambda ((g$t$22522) ((case-lambda ((g$ls/false$22524) (if (if g$ls/false$22524 (begin '#f (apply (case-lambda ((g$export*$22526 g$b*$22527) '#t)) g$ls/false$22524)) '#f) (apply (case-lambda ((g$export*$22530 g$b*$22531) (begin (if (for-all g$id?$14515 g$export*$22530) (void) (error 'expander '"module exports must be identifiers" (g$strip$14533 g$e$22520 '()))) (values '#f g$export*$22530 g$b*$22531)))) g$ls/false$22524) ((case-lambda ((g$t$22534) ((case-lambda ((g$ls/false$22536) (if (if g$ls/false$22536 (begin '#f (apply (case-lambda ((g$name$22538 g$export*$22539 g$b*$22540) '#t)) g$ls/false$22536)) '#f) (apply (case-lambda ((g$name$22544 g$export*$22545 g$b*$22546) (begin (if (g$id?$14515 g$name$22544) (void) (error 'expander '"module name must be an identifier" (g$strip$14533 g$e$22520 '()))) (if (for-all g$id?$14515 g$export*$22545) (void) (error 'expander '"module exports must be identifiers" (g$strip$14533 g$e$22520 '()))) (values g$name$22544 g$export*$22545 g$b*$22546)))) g$ls/false$22536) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22534 '()))))) ((case-lambda ((g$x$22550) (if (g$syntax-pair?$14501 g$x$22550) (begin '#f ((case-lambda ((g$q$22552) (if g$q$22552 (begin '#f ((case-lambda ((g$r$22554) (if g$r$22554 (begin '#f (append g$q$22552 g$r$22554)) '#f))) ((case-lambda ((g$x$22556) (if (g$syntax-pair?$14501 g$x$22556) (begin '#f ((case-lambda ((g$q$22558) (if g$q$22558 (begin '#f ((case-lambda ((g$r$22560) (if g$r$22560 (begin '#f (append g$q$22558 g$r$22560)) '#f))) ((case-lambda ((g$x$22562) (if (g$syntax-pair?$14501 g$x$22562) (begin '#f ((case-lambda ((g$q$22564) (if g$q$22564 (begin '#f ((case-lambda ((g$r$22566) (if g$r$22566 (begin '#f (append g$q$22564 g$r$22566)) '#f))) ((letrec ((g$f$22568 (case-lambda ((g$x$22570) (if (g$syntax-pair?$14501 g$x$22570) ((case-lambda ((g$cars/f$22572) (if g$cars/f$22572 (begin '#f ((case-lambda ((g$cdrs/f$22574) (if g$cdrs/f$22574 (begin '#f (map cons g$cars/f$22572 g$cdrs/f$22574)) '#f))) (g$f$22568 (g$syntax-cdr$14513 g$x$22570)))) '#f))) ((case-lambda ((g$x$22576) (list g$x$22576))) (g$syntax-car$14509 g$x$22570))) (if (g$syntax-null?$14505 g$x$22570) (list (begin 'b* '())) '#f)))))) g$f$22568) (g$syntax-cdr$14513 g$x$22562)))) '#f))) ((letrec ((g$f$22578 (case-lambda ((g$x$22580) (if (g$syntax-pair?$14501 g$x$22580) ((case-lambda ((g$cars/f$22582) (if g$cars/f$22582 (begin '#f ((case-lambda ((g$cdrs/f$22584) (if g$cdrs/f$22584 (begin '#f (map cons g$cars/f$22582 g$cdrs/f$22584)) '#f))) (g$f$22578 (g$syntax-cdr$14513 g$x$22580)))) '#f))) ((case-lambda ((g$x$22586) (list g$x$22586))) (g$syntax-car$14509 g$x$22580))) (if (g$syntax-null?$14505 g$x$22580) (list (begin 'export* '())) '#f)))))) g$f$22578) (g$syntax-car$14509 g$x$22562)))) '#f))) (g$syntax-cdr$14513 g$x$22556)))) '#f))) ((case-lambda ((g$x$22588) (list g$x$22588))) (g$syntax-car$14509 g$x$22556)))) '#f))) (g$syntax-cdr$14513 g$x$22550)))) '#f))) ((case-lambda ((g$x$22590) '())) (g$syntax-car$14509 g$x$22550)))) '#f))) g$t$22534)))) g$t$22522)))) ((case-lambda ((g$x$22592) (if (g$syntax-pair?$14501 g$x$22592) (begin '#f ((case-lambda ((g$q$22594) (if g$q$22594 (begin '#f ((case-lambda ((g$r$22596) (if g$r$22596 (begin '#f (append g$q$22594 g$r$22596)) '#f))) ((case-lambda ((g$x$22598) (if (g$syntax-pair?$14501 g$x$22598) (begin '#f ((case-lambda ((g$q$22600) (if g$q$22600 (begin '#f ((case-lambda ((g$r$22602) (if g$r$22602 (begin '#f (append g$q$22600 g$r$22602)) '#f))) ((letrec ((g$f$22604 (case-lambda ((g$x$22606) (if (g$syntax-pair?$14501 g$x$22606) ((case-lambda ((g$cars/f$22608) (if g$cars/f$22608 (begin '#f ((case-lambda ((g$cdrs/f$22610) (if g$cdrs/f$22610 (begin '#f (map cons g$cars/f$22608 g$cdrs/f$22610)) '#f))) (g$f$22604 (g$syntax-cdr$14513 g$x$22606)))) '#f))) ((case-lambda ((g$x$22612) (list g$x$22612))) (g$syntax-car$14509 g$x$22606))) (if (g$syntax-null?$14505 g$x$22606) (list (begin 'b* '())) '#f)))))) g$f$22604) (g$syntax-cdr$14513 g$x$22598)))) '#f))) ((letrec ((g$f$22614 (case-lambda ((g$x$22616) (if (g$syntax-pair?$14501 g$x$22616) ((case-lambda ((g$cars/f$22618) (if g$cars/f$22618 (begin '#f ((case-lambda ((g$cdrs/f$22620) (if g$cdrs/f$22620 (begin '#f (map cons g$cars/f$22618 g$cdrs/f$22620)) '#f))) (g$f$22614 (g$syntax-cdr$14513 g$x$22616)))) '#f))) ((case-lambda ((g$x$22622) (list g$x$22622))) (g$syntax-car$14509 g$x$22616))) (if (g$syntax-null?$14505 g$x$22616) (list (begin 'export* '())) '#f)))))) g$f$22614) (g$syntax-car$14509 g$x$22598)))) '#f))) (g$syntax-cdr$14513 g$x$22592)))) '#f))) ((case-lambda ((g$x$22624) '())) (g$syntax-car$14509 g$x$22592)))) '#f))) g$t$22522)))) g$e$22520)))) (set! g$chi-internal-module$15082 (case-lambda ((g$e$22626 g$r$22627 g$mr$22628 g$lex*$22629 g$rhs*$22630 g$mod**$22631 g$kwd*$22632) (call-with-values (case-lambda (() (g$parse-module$15080 g$e$22626))) (case-lambda ((g$name$22640 g$exp-id*$22641 g$e*$22642) ((case-lambda ((g$rib$22646) ((case-lambda ((g$e*$22648) ((case-lambda (() (call-with-values (case-lambda (() (g$chi-body*$15084 g$e*$22648 g$r$22627 g$mr$22628 g$lex*$22629 g$rhs*$22630 g$mod**$22631 g$kwd*$22632 g$rib$22646 '#f))) (case-lambda ((g$e*$22650 g$r$22651 g$mr$22652 g$lex*$22653 g$rhs*$22654 g$mod**$22655 g$kwd*$22656) ((case-lambda ((g$exp-lab*$22664 g$mod**$22665) (if (not g$name$22640) (values g$lex*$22653 g$rhs*$22654 g$exp-id*$22641 g$exp-lab*$22664 g$r$22651 g$mr$22652 g$mod**$22665 g$kwd*$22656) ((case-lambda ((g$lab$22668 g$iface$22669) (values g$lex*$22653 g$rhs*$22654 (list g$name$22640) (list g$lab$22668) (cons (cons g$lab$22668 (cons '$module g$iface$22669)) g$r$22651) (cons (cons g$lab$22668 (cons '$module g$iface$22669)) g$mr$22652) g$mod**$22665 g$kwd*$22656))) (g$gen-label$14429 'module) (cons g$exp-id*$22641 g$exp-lab*$22664))))) (map (case-lambda ((g$x$22672) ((case-lambda ((g$t$22674) (if g$t$22674 g$t$22674 (begin '#f (error 'expander '"cannot find module export" (g$strip$14533 g$x$22672 '())))))) (g$id->label$14537 (g$mkstx$14491 (g$id->sym$14517 g$x$22672) (g$stx-mark*$14471 g$x$22672) (list g$rib$22646)))))) g$exp-id*$22641) (cons g$e*$22650 g$mod**$22655)))))))))) (map (case-lambda ((g$x$22676) (g$add-subst$14495 g$rib$22646 g$x$22676))) (g$syntax->list$14511 g$e*$22642))))) (g$make-empty-rib$14452)))))))) (set! g$chi-body*$15084 (case-lambda ((g$e*$22678 g$r$22679 g$mr$22680 g$lex*$22681 g$rhs*$22682 g$mod**$22683 g$kwd*$22684 g$rib$22685 g$top?$22686) (if (null? g$e*$22678) (values g$e*$22678 g$r$22679 g$mr$22680 g$lex*$22681 g$rhs*$22682 g$mod**$22683 g$kwd*$22684) ((case-lambda ((g$e$22696) (call-with-values (case-lambda (() (g$syntax-type$14547 g$e$22696 g$r$22679))) (case-lambda ((g$type$22698 g$value$22699 g$kwd$22700) ((case-lambda ((g$kwd*$22704) ((case-lambda ((g$t$22706) (if (memv g$t$22706 '(define)) (call-with-values (case-lambda (() (g$parse-define$14940 g$e$22696))) (case-lambda ((g$id$22892 g$rhs$22893) (begin (if (g$bound-id-member?$14529 g$id$22892 g$kwd*$22704) (error 'expander '"cannot redefine keyword" (g$strip$14533 g$e$22696 '())) (void)) ((case-lambda ((g$lex$22896 g$lab$22897) (begin (g$extend-rib!$14454 g$rib$22685 g$id$22892 g$lab$22897) (g$chi-body*$15084 (cdr g$e*$22678) (g$add-lexical$14946 g$lab$22897 g$lex$22896 g$r$22679) g$mr$22680 (cons g$lex$22896 g$lex*$22681) (cons g$rhs$22893 g$rhs*$22682) g$mod**$22683 g$kwd*$22704 g$rib$22685 g$top?$22686)))) (g$gen-lexical$14425 g$id$22892) (g$gen-label$14429 g$id$22892)))))) (if (memv g$t$22706 '(define-syntax)) (call-with-values (case-lambda (() (g$parse-define-syntax$14942 g$e$22696))) (case-lambda ((g$id$22882 g$rhs$22883) (begin (if (g$bound-id-member?$14529 g$id$22882 g$kwd*$22704) (error 'expander '"cannot redefine keyword" (g$strip$14533 g$e$22696 '())) (void)) ((case-lambda ((g$lab$22886 g$expanded-rhs$22887) (begin (g$extend-rib!$14454 g$rib$22685 g$id$22882 g$lab$22886) ((case-lambda ((g$b$22890) (g$chi-body*$15084 (cdr g$e*$22678) (cons (cons g$lab$22886 g$b$22890) g$r$22679) (cons (cons g$lab$22886 g$b$22890) g$mr$22680) g$lex*$22681 g$rhs*$22682 g$mod**$22683 g$kwd*$22704 g$rib$22685 g$top?$22686))) (g$make-eval-transformer$14578 g$expanded-rhs$22887))))) (g$gen-label$14429 g$id$22882) (g$expand-transformer$15096 g$rhs$22883 g$mr$22680)))))) (if (memv g$t$22706 '(let-syntax letrec-syntax)) ((case-lambda ((g$t$22806) ((case-lambda ((g$ls/false$22808) (if (if g$ls/false$22808 (begin '#f (apply (case-lambda ((g$xlhs*$22810 g$xrhs*$22811 g$xbody*$22812) (if (g$valid-bound-ids?$14525 g$xlhs*$22810) (void) (error 'expander '"invalid identifiers" (g$strip$14533 g$e$22696 '()))))) g$ls/false$22808)) '#f) (apply (case-lambda ((g$xlhs*$22816 g$xrhs*$22817 g$xbody*$22818) ((case-lambda ((g$xlab*$22822) ((case-lambda ((g$xrib$22824) ((case-lambda ((g$xb*$22826) ((case-lambda (() (g$chi-body*$15084 (append (map (case-lambda ((g$x$22828) (g$add-subst$14495 g$xrib$22824 g$x$22828))) g$xbody*$22818) (cdr g$e*$22678)) (append (map cons g$xlab*$22822 g$xb*$22826) g$r$22679) (append (map cons g$xlab*$22822 g$xb*$22826) g$mr$22680) g$lex*$22681 g$rhs*$22682 g$mod**$22683 g$kwd*$22704 g$rib$22685 g$top?$22686)))))) (map (case-lambda ((g$x$22830) (g$make-eval-transformer$14578 (g$expand-transformer$15096 (if (eq? g$type$22698 'let-syntax) g$x$22830 (g$add-subst$14495 g$xrib$22824 g$x$22830)) g$mr$22680)))) g$xrhs*$22817)))) (g$make-full-rib$14462 g$xlhs*$22816 g$xlab*$22822)))) (map g$gen-label$14429 g$xlhs*$22816)))) g$ls/false$22808) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22806 '()))))) ((case-lambda ((g$x$22832) (if (g$syntax-pair?$14501 g$x$22832) (begin '#f ((case-lambda ((g$q$22834) (if g$q$22834 (begin '#f ((case-lambda ((g$r$22836) (if g$r$22836 (begin '#f (append g$q$22834 g$r$22836)) '#f))) ((case-lambda ((g$x$22838) (if (g$syntax-pair?$14501 g$x$22838) (begin '#f ((case-lambda ((g$q$22840) (if g$q$22840 (begin '#f ((case-lambda ((g$r$22842) (if g$r$22842 (begin '#f (append g$q$22840 g$r$22842)) '#f))) ((letrec ((g$f$22844 (case-lambda ((g$x$22846) (if (g$syntax-pair?$14501 g$x$22846) ((case-lambda ((g$cars/f$22848) (if g$cars/f$22848 (begin '#f ((case-lambda ((g$cdrs/f$22850) (if g$cdrs/f$22850 (begin '#f (map cons g$cars/f$22848 g$cdrs/f$22850)) '#f))) (g$f$22844 (g$syntax-cdr$14513 g$x$22846)))) '#f))) ((case-lambda ((g$x$22852) (list g$x$22852))) (g$syntax-car$14509 g$x$22846))) (if (g$syntax-null?$14505 g$x$22846) (list (begin 'xbody* '())) '#f)))))) g$f$22844) (g$syntax-cdr$14513 g$x$22838)))) '#f))) ((letrec ((g$f$22854 (case-lambda ((g$x$22856) (if (g$syntax-pair?$14501 g$x$22856) ((case-lambda ((g$cars/f$22858) (if g$cars/f$22858 (begin '#f ((case-lambda ((g$cdrs/f$22860) (if g$cdrs/f$22860 (begin '#f (map cons g$cars/f$22858 g$cdrs/f$22860)) '#f))) (g$f$22854 (g$syntax-cdr$14513 g$x$22856)))) '#f))) ((case-lambda ((g$x$22862) (if (g$syntax-pair?$14501 g$x$22862) (begin '#f ((case-lambda ((g$q$22864) (if g$q$22864 (begin '#f ((case-lambda ((g$r$22866) (if g$r$22866 (begin '#f (append g$q$22864 g$r$22866)) '#f))) ((case-lambda ((g$x$22868) (if (g$syntax-pair?$14501 g$x$22868) (begin '#f ((case-lambda ((g$q$22870) (if g$q$22870 (begin '#f ((case-lambda ((g$r$22872) (if g$r$22872 (begin '#f (append g$q$22870 g$r$22872)) '#f))) ((case-lambda ((g$x$22874) (if (equal? (g$stx->datum$14535 g$x$22874) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$22868)))) '#f))) ((case-lambda ((g$x$22876) (list g$x$22876))) (g$syntax-car$14509 g$x$22868)))) '#f))) (g$syntax-cdr$14513 g$x$22862)))) '#f))) ((case-lambda ((g$x$22878) (list g$x$22878))) (g$syntax-car$14509 g$x$22862)))) '#f))) (g$syntax-car$14509 g$x$22856))) (if (g$syntax-null?$14505 g$x$22856) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f)))))) g$f$22854) (g$syntax-car$14509 g$x$22838)))) '#f))) (g$syntax-cdr$14513 g$x$22832)))) '#f))) ((case-lambda ((g$x$22880) '())) (g$syntax-car$14509 g$x$22832)))) '#f))) g$t$22806)))) g$e$22696) (if (memv g$t$22706 '(begin)) ((case-lambda ((g$t$22780) ((case-lambda ((g$ls/false$22782) (if (if g$ls/false$22782 (begin '#f (apply (case-lambda ((g$x*$22784) '#t)) g$ls/false$22782)) '#f) (apply (case-lambda ((g$x*$22786) (g$chi-body*$15084 (append g$x*$22786 (cdr g$e*$22678)) g$r$22679 g$mr$22680 g$lex*$22681 g$rhs*$22682 g$mod**$22683 g$kwd*$22704 g$rib$22685 g$top?$22686))) g$ls/false$22782) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22780 '()))))) ((case-lambda ((g$x$22788) (if (g$syntax-pair?$14501 g$x$22788) (begin '#f ((case-lambda ((g$q$22790) (if g$q$22790 (begin '#f ((case-lambda ((g$r$22792) (if g$r$22792 (begin '#f (append g$q$22790 g$r$22792)) '#f))) ((letrec ((g$f$22794 (case-lambda ((g$x$22796) (if (g$syntax-pair?$14501 g$x$22796) ((case-lambda ((g$cars/f$22798) (if g$cars/f$22798 (begin '#f ((case-lambda ((g$cdrs/f$22800) (if g$cdrs/f$22800 (begin '#f (map cons g$cars/f$22798 g$cdrs/f$22800)) '#f))) (g$f$22794 (g$syntax-cdr$14513 g$x$22796)))) '#f))) ((case-lambda ((g$x$22802) (list g$x$22802))) (g$syntax-car$14509 g$x$22796))) (if (g$syntax-null?$14505 g$x$22796) (list (begin 'x* '())) '#f)))))) g$f$22794) (g$syntax-cdr$14513 g$x$22788)))) '#f))) ((case-lambda ((g$x$22804) '())) (g$syntax-car$14509 g$x$22788)))) '#f))) g$t$22780)))) g$e$22696) (if (memv g$t$22706 '(global-macro global-macro!)) (g$chi-body*$15084 (cons (g$add-subst$14495 g$rib$22685 (g$chi-global-macro$15056 g$value$22699 g$e$22696)) (cdr g$e*$22678)) g$r$22679 g$mr$22680 g$lex*$22681 g$rhs*$22682 g$mod**$22683 g$kwd*$22704 g$rib$22685 g$top?$22686) (if (memv g$t$22706 '(local-macro local-macro!)) (g$chi-body*$15084 (cons (g$add-subst$14495 g$rib$22685 (g$chi-local-macro$15054 g$value$22699 g$e$22696)) (cdr g$e*$22678)) g$r$22679 g$mr$22680 g$lex*$22681 g$rhs*$22682 g$mod**$22683 g$kwd*$22704 g$rib$22685 g$top?$22686) (if (memv g$t$22706 '(macro macro!)) (g$chi-body*$15084 (cons (g$add-subst$14495 g$rib$22685 (g$chi-macro$15052 g$value$22699 g$e$22696)) (cdr g$e*$22678)) g$r$22679 g$mr$22680 g$lex*$22681 g$rhs*$22682 g$mod**$22683 g$kwd*$22704 g$rib$22685 g$top?$22686) (if (memv g$t$22706 '(module)) (call-with-values (case-lambda (() (g$chi-internal-module$15082 g$e$22696 g$r$22679 g$mr$22680 g$lex*$22681 g$rhs*$22682 g$mod**$22683 g$kwd*$22704))) (case-lambda ((g$lex*$22760 g$rhs*$22761 g$m-exp-id*$22762 g$m-exp-lab*$22763 g$r$22764 g$mr$22765 g$mod**$22766 g$kwd*$22767) (begin (for-each (case-lambda ((g$id$22776 g$lab$22777) (g$extend-rib!$14454 g$rib$22685 g$id$22776 g$lab$22777))) g$m-exp-id*$22762 g$m-exp-lab*$22763) (g$chi-body*$15084 (cdr g$e*$22678) g$r$22764 g$mr$22765 g$lex*$22760 g$rhs*$22761 g$mod**$22766 g$kwd*$22767 g$rib$22685 g$top?$22686))))) (if (memv g$t$22706 '(import)) (begin ((case-lambda (() ((case-lambda ((g$module-import$22707) (begin (set! g$module-import$22707 (case-lambda ((g$e$22709 g$r$22710) ((case-lambda ((g$t$22713) ((case-lambda ((g$ls/false$22715) (if (if g$ls/false$22715 (begin '#f (apply (case-lambda ((g$id$22717) (g$id?$14515 g$id$22717))) g$ls/false$22715)) '#f) (apply (case-lambda ((g$id$22719) (call-with-values (case-lambda (() (g$syntax-type$14547 g$id$22719 g$r$22710))) (case-lambda ((g$type$22721 g$value$22722 g$kwd$22723) ((case-lambda ((g$t$22727) (if (memv g$t$22727 '($module)) ((case-lambda ((g$iface$22728) ((case-lambda ((g$id*$22730 g$lab*$22731) (values g$id*$22730 g$lab*$22731))) (car g$iface$22728) (cdr g$iface$22728)))) g$value$22722) (error 'expander '"invalid import" (g$strip$14533 g$e$22709 '()))))) g$type$22721)))))) g$ls/false$22715) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22713 '()))))) ((case-lambda ((g$x$22734) (if (g$syntax-pair?$14501 g$x$22734) (begin '#f ((case-lambda ((g$q$22736) (if g$q$22736 (begin '#f ((case-lambda ((g$r$22738) (if g$r$22738 (begin '#f (append g$q$22736 g$r$22738)) '#f))) ((case-lambda ((g$x$22740) (if (g$syntax-pair?$14501 g$x$22740) (begin '#f ((case-lambda ((g$q$22742) (if g$q$22742 (begin '#f ((case-lambda ((g$r$22744) (if g$r$22744 (begin '#f (append g$q$22742 g$r$22744)) '#f))) ((case-lambda ((g$x$22746) (if (equal? (g$stx->datum$14535 g$x$22746) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$22740)))) '#f))) ((case-lambda ((g$x$22748) (list g$x$22748))) (g$syntax-car$14509 g$x$22740)))) '#f))) (g$syntax-cdr$14513 g$x$22734)))) '#f))) ((case-lambda ((g$x$22750) '())) (g$syntax-car$14509 g$x$22734)))) '#f))) g$t$22713)))) g$e$22709)))) (call-with-values (case-lambda (() (g$module-import$22707 g$e$22696 g$r$22679))) (case-lambda ((g$id*$22752 g$lab*$22753) (for-each (case-lambda ((g$id$22756 g$lab$22757) (g$extend-rib!$14454 g$rib$22685 g$id$22756 g$lab$22757))) g$id*$22752 g$lab*$22753))))))) '#f)))) (g$chi-body*$15084 (cdr g$e*$22678) g$r$22679 g$mr$22680 g$lex*$22681 g$rhs*$22682 g$mod**$22683 g$kwd*$22704 g$rib$22685 g$top?$22686)) (if g$top?$22686 (g$chi-body*$15084 (cdr g$e*$22678) g$r$22679 g$mr$22680 (cons (g$gen-lexical$14425 'dummy) g$lex*$22681) (cons (cons 'top-expr g$e$22696) g$rhs*$22682) g$mod**$22683 g$kwd*$22704 g$rib$22685 g$top?$22686) (values g$e*$22678 g$r$22679 g$mr$22680 g$lex*$22681 g$rhs*$22682 g$mod**$22683 g$kwd*$22704))))))))))))) g$type$22698))) (if (g$id?$14515 g$kwd$22700) (cons g$kwd$22700 g$kwd*$22684) g$kwd*$22684))))))) (car g$e*$22678)))))) (set! g$set-global-macro-binding!$15086 (case-lambda ((g$sym$22900 g$loc$22901 g$b$22902) (begin (g$g$extend-library-subst!$13810$14106 (g$interaction-library$15177) g$sym$22900 g$loc$22901) (g$g$extend-library-env!$13812$14105 (g$interaction-library$15177) g$loc$22901 g$b$22902))))) (set! g$gen-global-macro-binding$15088 (case-lambda ((g$id$22906 g$ctxt$22907) (g$gen-global-var-binding$15090 g$id$22906 g$ctxt$22907)))) (set! g$gen-global-var-binding$15090 (case-lambda ((g$id$22910 g$ctxt$22911) ((case-lambda ((g$label$22914) ((case-lambda ((g$b$22916) ((case-lambda ((g$t$22918) (if (memv g$t$22918 '(global)) ((case-lambda ((g$x$22919) ((case-lambda ((g$lib$22921 g$loc$22922) (if (eq? g$lib$22921 (g$interaction-library$15177)) g$loc$22922 (error 'expander '"cannot modify imported binding" (g$strip$14533 g$ctxt$22911 '()))))) (car g$x$22919) (cdr g$x$22919)))) (g$binding-value$14545 g$b$22916)) (error 'expander '"cannot modify binding in" (g$strip$14533 g$ctxt$22911 '()))))) (g$binding-type$14543 g$b$22916)))) (g$g$imported-label->binding$13814$14104 g$label$22914)))) (g$id->label$14537 g$id$22910))))) (set! g$chi-top-set!$15092 (case-lambda ((g$e$22925) ((case-lambda ((g$t$22927) ((case-lambda ((g$ls/false$22929) (if (if g$ls/false$22929 (begin '#f (apply (case-lambda ((g$id$22931 g$rhs$22932) (g$id?$14515 g$id$22931))) g$ls/false$22929)) '#f) (apply (case-lambda ((g$id$22935 g$rhs$22936) ((case-lambda ((g$loc$22939) ((case-lambda ((g$rhs$22941) (values g$loc$22939 g$rhs$22941))) (g$chi-expr$15062 g$rhs$22936 '() '())))) (g$gen-global-var-binding$15090 g$id$22935 g$e$22925)))) g$ls/false$22929) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22927 '()))))) ((case-lambda ((g$x$22943) (if (g$syntax-pair?$14501 g$x$22943) (begin '#f ((case-lambda ((g$q$22945) (if g$q$22945 (begin '#f ((case-lambda ((g$r$22947) (if g$r$22947 (begin '#f (append g$q$22945 g$r$22947)) '#f))) ((case-lambda ((g$x$22949) (if (g$syntax-pair?$14501 g$x$22949) (begin '#f ((case-lambda ((g$q$22951) (if g$q$22951 (begin '#f ((case-lambda ((g$r$22953) (if g$r$22953 (begin '#f (append g$q$22951 g$r$22953)) '#f))) ((case-lambda ((g$x$22955) (if (g$syntax-pair?$14501 g$x$22955) (begin '#f ((case-lambda ((g$q$22957) (if g$q$22957 (begin '#f ((case-lambda ((g$r$22959) (if g$r$22959 (begin '#f (append g$q$22957 g$r$22959)) '#f))) ((case-lambda ((g$x$22961) (if (equal? (g$stx->datum$14535 g$x$22961) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$22955)))) '#f))) ((case-lambda ((g$x$22963) (list g$x$22963))) (g$syntax-car$14509 g$x$22955)))) '#f))) (g$syntax-cdr$14513 g$x$22949)))) '#f))) ((case-lambda ((g$x$22965) (list g$x$22965))) (g$syntax-car$14509 g$x$22949)))) '#f))) (g$syntax-cdr$14513 g$x$22943)))) '#f))) ((case-lambda ((g$x$22967) '())) (g$syntax-car$14509 g$x$22943)))) '#f))) g$t$22927)))) g$e$22925)))) (set! g$chi-top*$15094 (case-lambda ((g$e*$22969 g$init*$22970) (if (null? g$e*$22969) g$init*$22970 ((case-lambda ((g$e$22973) (call-with-values (case-lambda (() (g$syntax-type$14547 g$e$22973 '()))) (case-lambda ((g$type$22975 g$value$22976 g$kwd$22977) ((case-lambda ((g$t$22981) (if (memv g$t$22981 '(define)) (call-with-values (case-lambda (() (g$parse-define$14940 g$e$22973))) (case-lambda ((g$id$23022 g$rhs$23023) ((case-lambda ((g$loc$23026) ((case-lambda ((g$rhs$23028) (g$chi-top*$15094 (cdr g$e*$22969) (cons (cons g$loc$23026 g$rhs$23028) g$init*$22970)))) (g$chi-rhs$15070 g$rhs$23023 '() '())))) (g$gen-global-var-binding$15090 g$id$23022 g$e$22973))))) (if (memv g$t$22981 '(set!)) (call-with-values (case-lambda (() (g$chi-top-set!$15092 g$e$22973))) (case-lambda ((g$loc$23018 g$rhs$23019) (g$chi-top*$15094 (cdr g$e*$22969) (cons (cons g$loc$23018 g$rhs$23019) g$init*$22970))))) (if (memv g$t$22981 '(define-syntax)) (call-with-values (case-lambda (() (g$parse-define-syntax$14942 g$e$22973))) (case-lambda ((g$id$23008 g$rhs$23009) ((case-lambda ((g$loc$23012) ((case-lambda ((g$expanded-rhs$23014) ((case-lambda ((g$b$23016) (begin (g$set-global-macro-binding!$15086 (g$id->sym$14517 g$id$23008) g$loc$23012 g$b$23016) (g$chi-top*$15094 (cdr g$e*$22969) g$init*$22970)))) (g$make-eval-transformer$14578 g$expanded-rhs$23014)))) (g$expand-transformer$15096 g$rhs$23009 '())))) (g$gen-global-macro-binding$15088 g$id$23008 g$e$22973))))) (if (memv g$t$22981 '(let-syntax letrec-syntax)) (error 'chi-top* '"not supported yet at top level" g$type$22975) (if (memv g$t$22981 '(begin)) ((case-lambda ((g$t$22982) ((case-lambda ((g$ls/false$22984) (if (if g$ls/false$22984 (begin '#f (apply (case-lambda ((g$x*$22986) '#t)) g$ls/false$22984)) '#f) (apply (case-lambda ((g$x*$22988) (g$chi-top*$15094 (append g$x*$22988 (cdr g$e*$22969)) g$init*$22970))) g$ls/false$22984) (error 'expander '"invalid syntax" (g$strip$14533 g$t$22982 '()))))) ((case-lambda ((g$x$22990) (if (g$syntax-pair?$14501 g$x$22990) (begin '#f ((case-lambda ((g$q$22992) (if g$q$22992 (begin '#f ((case-lambda ((g$r$22994) (if g$r$22994 (begin '#f (append g$q$22992 g$r$22994)) '#f))) ((letrec ((g$f$22996 (case-lambda ((g$x$22998) (if (g$syntax-pair?$14501 g$x$22998) ((case-lambda ((g$cars/f$23000) (if g$cars/f$23000 (begin '#f ((case-lambda ((g$cdrs/f$23002) (if g$cdrs/f$23002 (begin '#f (map cons g$cars/f$23000 g$cdrs/f$23002)) '#f))) (g$f$22996 (g$syntax-cdr$14513 g$x$22998)))) '#f))) ((case-lambda ((g$x$23004) (list g$x$23004))) (g$syntax-car$14509 g$x$22998))) (if (g$syntax-null?$14505 g$x$22998) (list (begin 'x* '())) '#f)))))) g$f$22996) (g$syntax-cdr$14513 g$x$22990)))) '#f))) ((case-lambda ((g$x$23006) '())) (g$syntax-car$14509 g$x$22990)))) '#f))) g$t$22982)))) g$e$22973) (if (memv g$t$22981 '(global-macro global-macro!)) (g$chi-top*$15094 (cons (g$chi-global-macro$15056 g$value$22976 g$e$22973) (cdr g$e*$22969)) g$init*$22970) (if (memv g$t$22981 '(local-macro local-macro!)) (g$chi-top*$15094 (cons (g$chi-local-macro$15054 g$value$22976 g$e$22973) (cdr g$e*$22969)) g$init*$22970) (if (memv g$t$22981 '(macro macro!)) (g$chi-top*$15094 (cons (g$chi-macro$15052 g$value$22976 g$e$22973) (cdr g$e*$22969)) g$init*$22970) (g$chi-top*$15094 (cdr g$e*$22969) (cons (cons '#f (g$chi-expr$15062 g$e$22973 '() '())) g$init*$22970)))))))))))) g$type$22975)))))) (car g$e*$22969)))))) (set! g$expand-transformer$15096 (case-lambda ((g$expr$23030 g$r$23031) ((case-lambda ((g$rtc$23034) ((case-lambda ((g$expanded-rhs$23036) (begin (for-each ((case-lambda ((g$mark-visit$23038) (case-lambda ((g$x$23040) (begin (g$g$invoke-library$13816$14103 g$x$23040) (g$mark-visit$23038 g$x$23040)))))) (g$vis-collector$15112)) (g$rtc$23034)) g$expanded-rhs$23036))) ((case-lambda ((g$g$t$23042$23046 g$g$t$23043$23047 g$g$t$23044$23048 g$g$t$23045$23049) ((case-lambda ((g$swap$23054) (dynamic-wind g$swap$23054 (case-lambda (() (g$chi-expr$15062 g$expr$23030 g$r$23031 g$r$23031))) g$swap$23054))) (case-lambda (() (begin ((case-lambda ((g$t$23056) (begin (g$g$t$23042$23046 g$g$t$23044$23048) (set! g$g$t$23044$23048 g$t$23056)))) (g$g$t$23042$23046)) ((case-lambda ((g$t$23058) (begin (g$g$t$23043$23047 g$g$t$23045$23049) (set! g$g$t$23045$23049 g$t$23058)))) (g$g$t$23043$23047)))))))) g$inv-collector$15110 g$vis-collector$15112 g$rtc$23034 (case-lambda ((g$x$23060) (values))))))) (g$make-collector$15108))))) (set! g$parse-exports$15098 (case-lambda ((g$exp*$23062) (letrec ((g$f$23064 (case-lambda ((g$exp*$23066 g$int*$23067 g$ext*$23068) (if (null? g$exp*$23066) (begin ((case-lambda ((g$id*$23072) (if (g$valid-bound-ids?$14525 g$id*$23072) (void) (error 'expander '"invalid exports" (g$find-dups$15076 g$id*$23072))))) (map (case-lambda ((g$x$23074) (g$mkstx$14491 g$x$23074 g$top-mark*$14421 '()))) g$ext*$23068)) (values g$int*$23067 g$ext*$23068)) ((case-lambda ((g$t$23076) ((case-lambda ((g$ls/false$23078) (if (if g$ls/false$23078 (begin '#f (apply (case-lambda ((g$rename$23080 g$i*$23081 g$e*$23082) '#t)) g$ls/false$23078)) '#f) (apply (case-lambda ((g$rename$23086 g$i*$23087 g$e*$23088) (begin (if (if (eq? g$rename$23086 'rename) (if (for-all symbol? g$i*$23087) (begin '#f (for-all symbol? g$e*$23088)) '#f) '#f) (void) (error 'expander '"invalid export specifier" (car g$exp*$23066))) (g$f$23064 (cdr g$exp*$23066) (append g$i*$23087 g$int*$23067) (append g$e*$23088 g$ext*$23068))))) g$ls/false$23078) ((case-lambda ((g$t$23092) ((case-lambda ((g$ls/false$23094) (if (if g$ls/false$23094 (begin '#f (apply (case-lambda ((g$ie$23096) '#t)) g$ls/false$23094)) '#f) (apply (case-lambda ((g$ie$23098) (begin (if (symbol? g$ie$23098) (void) (error 'expander '"invalid export" g$ie$23098)) (g$f$23064 (cdr g$exp*$23066) (cons g$ie$23098 g$int*$23067) (cons g$ie$23098 g$ext*$23068))))) g$ls/false$23094) (error 'expander '"invalid syntax" (g$strip$14533 g$t$23092 '()))))) ((case-lambda ((g$x$23100) (list g$x$23100))) g$t$23092)))) g$t$23076)))) ((case-lambda ((g$x$23102) (if (g$syntax-pair?$14501 g$x$23102) (begin '#f ((case-lambda ((g$q$23104) (if g$q$23104 (begin '#f ((case-lambda ((g$r$23106) (if g$r$23106 (begin '#f (append g$q$23104 g$r$23106)) '#f))) ((letrec ((g$f$23108 (case-lambda ((g$x$23110) (if (g$syntax-pair?$14501 g$x$23110) ((case-lambda ((g$cars/f$23112) (if g$cars/f$23112 (begin '#f ((case-lambda ((g$cdrs/f$23114) (if g$cdrs/f$23114 (begin '#f (map cons g$cars/f$23112 g$cdrs/f$23114)) '#f))) (g$f$23108 (g$syntax-cdr$14513 g$x$23110)))) '#f))) ((case-lambda ((g$x$23116) (if (g$syntax-pair?$14501 g$x$23116) (begin '#f ((case-lambda ((g$q$23118) (if g$q$23118 (begin '#f ((case-lambda ((g$r$23120) (if g$r$23120 (begin '#f (append g$q$23118 g$r$23120)) '#f))) ((case-lambda ((g$x$23122) (if (g$syntax-pair?$14501 g$x$23122) (begin '#f ((case-lambda ((g$q$23124) (if g$q$23124 (begin '#f ((case-lambda ((g$r$23126) (if g$r$23126 (begin '#f (append g$q$23124 g$r$23126)) '#f))) ((case-lambda ((g$x$23128) (if (equal? (g$stx->datum$14535 g$x$23128) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$23122)))) '#f))) ((case-lambda ((g$x$23130) (list g$x$23130))) (g$syntax-car$14509 g$x$23122)))) '#f))) (g$syntax-cdr$14513 g$x$23116)))) '#f))) ((case-lambda ((g$x$23132) (list g$x$23132))) (g$syntax-car$14509 g$x$23116)))) '#f))) (g$syntax-car$14509 g$x$23110))) (if (g$syntax-null?$14505 g$x$23110) (list (begin 'i* '()) (begin 'e* '())) '#f)))))) g$f$23108) (g$syntax-cdr$14513 g$x$23102)))) '#f))) ((case-lambda ((g$x$23134) (list g$x$23134))) (g$syntax-car$14509 g$x$23102)))) '#f))) g$t$23076)))) (car g$exp*$23066))))))) (g$f$23064 g$exp*$23062 '() '()))))) (set! g$parse-library-name$15100 (case-lambda ((g$spec$23136) ((case-lambda ((g$parse$23138) (begin (set! g$parse$23138 (case-lambda ((g$x$23140) ((case-lambda ((g$t$23142) ((case-lambda ((g$ls/false$23144) (if (if g$ls/false$23144 (begin '#f (apply (case-lambda ((g$v*$23146) (for-all (case-lambda ((g$x$23148) (if (integer? g$x$23148) (begin '#f (exact? g$x$23148)) '#f))) g$v*$23146))) g$ls/false$23144)) '#f) (apply (case-lambda ((g$v*$23150) (values '() g$v*$23150))) g$ls/false$23144) ((case-lambda ((g$t$23152) ((case-lambda ((g$ls/false$23154) (if (if g$ls/false$23154 (begin '#f (apply (case-lambda ((g$x$23156 g$rest$23157) (symbol? g$x$23156))) g$ls/false$23154)) '#f) (apply (case-lambda ((g$x$23160 g$rest$23161) (call-with-values (case-lambda (() (g$parse$23138 g$rest$23161))) (case-lambda ((g$x*$23164 g$v*$23165) (values (cons g$x$23160 g$x*$23164) g$v*$23165)))))) g$ls/false$23154) ((case-lambda ((g$t$23168) ((case-lambda ((g$ls/false$23170) (if (if g$ls/false$23170 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$23170)) '#f) (apply (case-lambda (() (values '() '()))) g$ls/false$23170) ((case-lambda ((g$t$23172) ((case-lambda ((g$ls/false$23174) (if (if g$ls/false$23174 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$23174)) '#f) (apply (case-lambda (() (error 'expander '"invalid library name" (g$strip$14533 g$spec$23136 '())))) g$ls/false$23174) (error 'expander '"invalid syntax" (g$strip$14533 g$t$23172 '()))))) ((case-lambda ((g$x$23176) '())) g$t$23172)))) g$t$23168)))) ((case-lambda ((g$x$23178) (if (equal? (g$stx->datum$14535 g$x$23178) '()) (begin '#f '()) '#f))) g$t$23168)))) g$t$23152)))) ((case-lambda ((g$x$23180) (if (g$syntax-pair?$14501 g$x$23180) (begin '#f ((case-lambda ((g$q$23182) (if g$q$23182 (begin '#f ((case-lambda ((g$r$23184) (if g$r$23184 (begin '#f (append g$q$23182 g$r$23184)) '#f))) ((case-lambda ((g$x$23186) (list g$x$23186))) (g$syntax-cdr$14513 g$x$23180)))) '#f))) ((case-lambda ((g$x$23188) (list g$x$23188))) (g$syntax-car$14509 g$x$23180)))) '#f))) g$t$23152)))) g$t$23142)))) ((case-lambda ((g$x$23190) (if (g$syntax-pair?$14501 g$x$23190) (begin '#f ((case-lambda ((g$q$23192) (if g$q$23192 (begin '#f ((case-lambda ((g$r$23194) (if g$r$23194 (begin '#f (append g$q$23192 g$r$23194)) '#f))) ((case-lambda ((g$x$23196) (if (equal? (g$stx->datum$14535 g$x$23196) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$23190)))) '#f))) ((letrec ((g$f$23198 (case-lambda ((g$x$23200) (if (g$syntax-pair?$14501 g$x$23200) ((case-lambda ((g$cars/f$23202) (if g$cars/f$23202 (begin '#f ((case-lambda ((g$cdrs/f$23204) (if g$cdrs/f$23204 (begin '#f (map cons g$cars/f$23202 g$cdrs/f$23204)) '#f))) (g$f$23198 (g$syntax-cdr$14513 g$x$23200)))) '#f))) ((case-lambda ((g$x$23206) (list g$x$23206))) (g$syntax-car$14509 g$x$23200))) (if (g$syntax-null?$14505 g$x$23200) (list (begin 'v* '())) '#f)))))) g$f$23198) (g$syntax-car$14509 g$x$23190)))) '#f))) g$t$23142)))) g$x$23140)))) (call-with-values (case-lambda (() (g$parse$23138 g$spec$23136))) (case-lambda ((g$name*$23208 g$ver*$23209) (begin (if (null? g$name*$23208) (error 'expander '"empty library name" (g$strip$14533 g$spec$23136 '())) (void)) (values g$name*$23208 g$ver*$23209)))))))) '#f)))) (set! g$parse-library$15102 (case-lambda ((g$e$23212) ((case-lambda ((g$t$23214) ((case-lambda ((g$ls/false$23216) (if (if g$ls/false$23216 (begin '#f (apply (case-lambda ((g$library$23218 g$name*$23219 g$export$23220 g$exp*$23221 g$import$23222 g$imp*$23223 g$b*$23224) (if (eq? g$export$23220 'export) (if (eq? g$import$23222 'import) (begin '#f (eq? g$library$23218 'library)) '#f) '#f))) g$ls/false$23216)) '#f) (apply (case-lambda ((g$library$23232 g$name*$23233 g$export$23234 g$exp*$23235 g$import$23236 g$imp*$23237 g$b*$23238) (values g$name*$23233 g$exp*$23235 g$imp*$23237 g$b*$23238))) g$ls/false$23216) ((case-lambda ((g$t$23246) ((case-lambda ((g$ls/false$23248) (if (if g$ls/false$23248 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$23248)) '#f) (apply (case-lambda (() (error 'expander '"malformed library" (g$strip$14533 g$e$23212 '())))) g$ls/false$23248) (error 'expander '"invalid syntax" (g$strip$14533 g$t$23246 '()))))) ((case-lambda ((g$x$23250) '())) g$t$23246)))) g$t$23214)))) ((case-lambda ((g$x$23252) (if (g$syntax-pair?$14501 g$x$23252) (begin '#f ((case-lambda ((g$q$23254) (if g$q$23254 (begin '#f ((case-lambda ((g$r$23256) (if g$r$23256 (begin '#f (append g$q$23254 g$r$23256)) '#f))) ((case-lambda ((g$x$23258) (if (g$syntax-pair?$14501 g$x$23258) (begin '#f ((case-lambda ((g$q$23260) (if g$q$23260 (begin '#f ((case-lambda ((g$r$23262) (if g$r$23262 (begin '#f (append g$q$23260 g$r$23262)) '#f))) ((case-lambda ((g$x$23264) (if (g$syntax-pair?$14501 g$x$23264) (begin '#f ((case-lambda ((g$q$23266) (if g$q$23266 (begin '#f ((case-lambda ((g$r$23268) (if g$r$23268 (begin '#f (append g$q$23266 g$r$23268)) '#f))) ((case-lambda ((g$x$23270) (if (g$syntax-pair?$14501 g$x$23270) (begin '#f ((case-lambda ((g$q$23272) (if g$q$23272 (begin '#f ((case-lambda ((g$r$23274) (if g$r$23274 (begin '#f (append g$q$23272 g$r$23274)) '#f))) ((letrec ((g$f$23276 (case-lambda ((g$x$23278) (if (g$syntax-pair?$14501 g$x$23278) ((case-lambda ((g$cars/f$23280) (if g$cars/f$23280 (begin '#f ((case-lambda ((g$cdrs/f$23282) (if g$cdrs/f$23282 (begin '#f (map cons g$cars/f$23280 g$cdrs/f$23282)) '#f))) (g$f$23276 (g$syntax-cdr$14513 g$x$23278)))) '#f))) ((case-lambda ((g$x$23284) (list g$x$23284))) (g$syntax-car$14509 g$x$23278))) (if (g$syntax-null?$14505 g$x$23278) (list (begin 'b* '())) '#f)))))) g$f$23276) (g$syntax-cdr$14513 g$x$23270)))) '#f))) ((case-lambda ((g$x$23286) (if (g$syntax-pair?$14501 g$x$23286) (begin '#f ((case-lambda ((g$q$23288) (if g$q$23288 (begin '#f ((case-lambda ((g$r$23290) (if g$r$23290 (begin '#f (append g$q$23288 g$r$23290)) '#f))) ((letrec ((g$f$23292 (case-lambda ((g$x$23294) (if (g$syntax-pair?$14501 g$x$23294) ((case-lambda ((g$cars/f$23296) (if g$cars/f$23296 (begin '#f ((case-lambda ((g$cdrs/f$23298) (if g$cdrs/f$23298 (begin '#f (map cons g$cars/f$23296 g$cdrs/f$23298)) '#f))) (g$f$23292 (g$syntax-cdr$14513 g$x$23294)))) '#f))) ((case-lambda ((g$x$23300) (list g$x$23300))) (g$syntax-car$14509 g$x$23294))) (if (g$syntax-null?$14505 g$x$23294) (list (begin 'imp* '())) '#f)))))) g$f$23292) (g$syntax-cdr$14513 g$x$23286)))) '#f))) ((case-lambda ((g$x$23302) (list g$x$23302))) (g$syntax-car$14509 g$x$23286)))) '#f))) (g$syntax-car$14509 g$x$23270)))) '#f))) (g$syntax-cdr$14513 g$x$23264)))) '#f))) ((case-lambda ((g$x$23304) (if (g$syntax-pair?$14501 g$x$23304) (begin '#f ((case-lambda ((g$q$23306) (if g$q$23306 (begin '#f ((case-lambda ((g$r$23308) (if g$r$23308 (begin '#f (append g$q$23306 g$r$23308)) '#f))) ((letrec ((g$f$23310 (case-lambda ((g$x$23312) (if (g$syntax-pair?$14501 g$x$23312) ((case-lambda ((g$cars/f$23314) (if g$cars/f$23314 (begin '#f ((case-lambda ((g$cdrs/f$23316) (if g$cdrs/f$23316 (begin '#f (map cons g$cars/f$23314 g$cdrs/f$23316)) '#f))) (g$f$23310 (g$syntax-cdr$14513 g$x$23312)))) '#f))) ((case-lambda ((g$x$23318) (list g$x$23318))) (g$syntax-car$14509 g$x$23312))) (if (g$syntax-null?$14505 g$x$23312) (list (begin 'exp* '())) '#f)))))) g$f$23310) (g$syntax-cdr$14513 g$x$23304)))) '#f))) ((case-lambda ((g$x$23320) (list g$x$23320))) (g$syntax-car$14509 g$x$23304)))) '#f))) (g$syntax-car$14509 g$x$23264)))) '#f))) (g$syntax-cdr$14513 g$x$23258)))) '#f))) ((letrec ((g$f$23322 (case-lambda ((g$x$23324) (if (g$syntax-pair?$14501 g$x$23324) ((case-lambda ((g$cars/f$23326) (if g$cars/f$23326 (begin '#f ((case-lambda ((g$cdrs/f$23328) (if g$cdrs/f$23328 (begin '#f (map cons g$cars/f$23326 g$cdrs/f$23328)) '#f))) (g$f$23322 (g$syntax-cdr$14513 g$x$23324)))) '#f))) ((case-lambda ((g$x$23330) (list g$x$23330))) (g$syntax-car$14509 g$x$23324))) (if (g$syntax-null?$14505 g$x$23324) (list (begin 'name* '())) '#f)))))) g$f$23322) (g$syntax-car$14509 g$x$23258)))) '#f))) (g$syntax-cdr$14513 g$x$23252)))) '#f))) ((case-lambda ((g$x$23332) (list g$x$23332))) (g$syntax-car$14509 g$x$23252)))) '#f))) g$t$23214)))) g$e$23212)))) (set! g$parse-import-spec*$15104 (case-lambda ((g$imp*$23334) ((case-lambda ((g$imp-collector$23336 g$merge-substs$23338 g$exclude*$23340 g$find*$23342 g$rem*$23344 g$remove-dups$23346 g$parse-library-name$23348 g$get-import$23350) (begin (set! g$imp-collector$23336 (g$make-collector$15108)) (set! g$merge-substs$23338 (case-lambda ((g$s$24106 g$subst$24107) ((case-lambda ((g$insert-to-subst$24110) (begin (set! g$insert-to-subst$24110 (case-lambda ((g$a$24112 g$subst$24113) ((case-lambda ((g$name$24116 g$label$24117) ((case-lambda ((g$t$24120) (if g$t$24120 ((case-lambda ((g$x$24122) (if (eq? (cdr g$x$24122) g$label$24117) g$subst$24113 (error 'import '"two imports with different bindings" g$name$24116)))) g$t$24120) (cons g$a$24112 g$subst$24113)))) (assq g$name$24116 g$subst$24113)))) (car g$a$24112) (cdr g$a$24112))))) (if (null? g$s$24106) g$subst$24107 (g$insert-to-subst$24110 (car g$s$24106) (g$merge-substs$23338 (cdr g$s$24106) g$subst$24107)))))) '#f)))) (set! g$exclude*$23340 (case-lambda ((g$sym*$24082 g$subst$24083) ((case-lambda ((g$exclude$24086) (begin (set! g$exclude$24086 (case-lambda ((g$sym$24088 g$subst$24089) (if (null? g$subst$24089) (error 'import '"cannot rename unbound identifier" g$sym$24088) (if (eq? g$sym$24088 (caar g$subst$24089)) (values (cdar g$subst$24089) (cdr g$subst$24089)) ((case-lambda ((g$a$24092) (call-with-values (case-lambda (() (g$exclude$24086 g$sym$24088 (cdr g$subst$24089)))) (case-lambda ((g$old$24094 g$subst$24095) (values g$old$24094 (cons g$a$24092 g$subst$24095))))))) (car g$subst$24089))))))) (if (null? g$sym*$24082) (values '() g$subst$24083) (call-with-values (case-lambda (() (g$exclude$24086 (car g$sym*$24082) g$subst$24083))) (case-lambda ((g$old$24098 g$subst$24099) (call-with-values (case-lambda (() (g$exclude*$23340 (cdr g$sym*$24082) g$subst$24099))) (case-lambda ((g$old*$24102 g$subst$24103) (values (cons g$old$24098 g$old*$24102) g$subst$24103))))))))))) '#f)))) (set! g$find*$23342 (case-lambda ((g$sym*$24074 g$subst$24075) (map (case-lambda ((g$x$24078) ((case-lambda ((g$t$24080) (if g$t$24080 (cdr g$t$24080) (error 'import '"cannot find identifier" g$x$24078)))) (assq g$x$24078 g$subst$24075)))) g$sym*$24074)))) (set! g$rem*$23344 (case-lambda ((g$sym*$24066 g$subst$24067) (letrec ((g$f$24070 (case-lambda ((g$subst$24072) (if (null? g$subst$24072) '() (if (memq (caar g$subst$24072) g$sym*$24066) (g$f$24070 (cdr g$subst$24072)) (cons (car g$subst$24072) (g$f$24070 (cdr g$subst$24072))))))))) (g$f$24070 g$subst$24067))))) (set! g$remove-dups$23346 (case-lambda ((g$ls$24064) (if (null? g$ls$24064) '() (if (memq (car g$ls$24064) (cdr g$ls$24064)) (g$remove-dups$23346 (cdr g$ls$24064)) (cons (car g$ls$24064) (g$remove-dups$23346 (cdr g$ls$24064)))))))) (set! g$parse-library-name$23348 (case-lambda ((g$spec$23644) ((case-lambda ((g$subversion?$23646 g$subversion-pred$23648 g$version-pred$23650) (begin (set! g$subversion?$23646 (case-lambda ((g$x$23992) (if (integer? g$x$23992) (if (exact? g$x$23992) (begin '#f (>= g$x$23992 '0)) '#f) '#f)))) (set! g$subversion-pred$23648 (case-lambda ((g$x*$23802) ((case-lambda ((g$t$23804) ((case-lambda ((g$ls/false$23806) (if (if g$ls/false$23806 (begin '#f (apply (case-lambda ((g$n$23808) (g$subversion?$23646 g$n$23808))) g$ls/false$23806)) '#f) (apply (case-lambda ((g$n$23810) (case-lambda ((g$x$23812) (= g$x$23812 g$n$23810))))) g$ls/false$23806) ((case-lambda ((g$t$23814) ((case-lambda ((g$ls/false$23816) (if (if g$ls/false$23816 (begin '#f (apply (case-lambda ((g$p?$23818 g$sub*$23819) (eq? g$p?$23818 'and))) g$ls/false$23816)) '#f) (apply (case-lambda ((g$p?$23822 g$sub*$23823) ((case-lambda ((g$p*$23826) (case-lambda ((g$x$23828) (for-all (case-lambda ((g$p$23830) (g$p$23830 g$x$23828))) g$p*$23826))))) (map g$subversion-pred$23648 g$sub*$23823)))) g$ls/false$23816) ((case-lambda ((g$t$23832) ((case-lambda ((g$ls/false$23834) (if (if g$ls/false$23834 (begin '#f (apply (case-lambda ((g$p?$23836 g$sub*$23837) (eq? g$p?$23836 'or))) g$ls/false$23834)) '#f) (apply (case-lambda ((g$p?$23840 g$sub*$23841) ((case-lambda ((g$p*$23844) (case-lambda ((g$x$23846) (exists (case-lambda ((g$p$23848) (g$p$23848 g$x$23846))) g$p*$23844))))) (map g$subversion-pred$23648 g$sub*$23841)))) g$ls/false$23834) ((case-lambda ((g$t$23850) ((case-lambda ((g$ls/false$23852) (if (if g$ls/false$23852 (begin '#f (apply (case-lambda ((g$p?$23854 g$sub$23855) (eq? g$p?$23854 'not))) g$ls/false$23852)) '#f) (apply (case-lambda ((g$p?$23858 g$sub$23859) ((case-lambda ((g$p$23862) (case-lambda ((g$x$23864) (not (g$p$23862 g$x$23864)))))) (g$subversion-pred$23648 g$sub$23859)))) g$ls/false$23852) ((case-lambda ((g$t$23866) ((case-lambda ((g$ls/false$23868) (if (if g$ls/false$23868 (begin '#f (apply (case-lambda ((g$p?$23870 g$n$23871) (if (eq? g$p?$23870 '<=) (begin '#f (g$subversion?$23646 g$n$23871)) '#f))) g$ls/false$23868)) '#f) (apply (case-lambda ((g$p?$23874 g$n$23875) (case-lambda ((g$x$23878) (<= g$x$23878 g$n$23875))))) g$ls/false$23868) ((case-lambda ((g$t$23880) ((case-lambda ((g$ls/false$23882) (if (if g$ls/false$23882 (begin '#f (apply (case-lambda ((g$p?$23884 g$n$23885) (if (eq? g$p?$23884 '>=) (begin '#f (g$subversion?$23646 g$n$23885)) '#f))) g$ls/false$23882)) '#f) (apply (case-lambda ((g$p?$23888 g$n$23889) (case-lambda ((g$x$23892) (>= g$x$23892 g$n$23889))))) g$ls/false$23882) ((case-lambda ((g$t$23894) ((case-lambda ((g$ls/false$23896) (if (if g$ls/false$23896 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$23896)) '#f) (apply (case-lambda (() (error 'import '"invalid sub-version spec" g$x*$23802 g$spec$23644))) g$ls/false$23896) (error 'expander '"invalid syntax" (g$strip$14533 g$t$23894 '()))))) ((case-lambda ((g$x$23898) '())) g$t$23894)))) g$t$23880)))) ((case-lambda ((g$x$23900) (if (g$syntax-pair?$14501 g$x$23900) (begin '#f ((case-lambda ((g$q$23902) (if g$q$23902 (begin '#f ((case-lambda ((g$r$23904) (if g$r$23904 (begin '#f (append g$q$23902 g$r$23904)) '#f))) ((case-lambda ((g$x$23906) (if (g$syntax-pair?$14501 g$x$23906) (begin '#f ((case-lambda ((g$q$23908) (if g$q$23908 (begin '#f ((case-lambda ((g$r$23910) (if g$r$23910 (begin '#f (append g$q$23908 g$r$23910)) '#f))) ((case-lambda ((g$x$23912) (if (equal? (g$stx->datum$14535 g$x$23912) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$23906)))) '#f))) ((case-lambda ((g$x$23914) (list g$x$23914))) (g$syntax-car$14509 g$x$23906)))) '#f))) (g$syntax-cdr$14513 g$x$23900)))) '#f))) ((case-lambda ((g$x$23916) (list g$x$23916))) (g$syntax-car$14509 g$x$23900)))) '#f))) g$t$23880)))) g$t$23866)))) ((case-lambda ((g$x$23918) (if (g$syntax-pair?$14501 g$x$23918) (begin '#f ((case-lambda ((g$q$23920) (if g$q$23920 (begin '#f ((case-lambda ((g$r$23922) (if g$r$23922 (begin '#f (append g$q$23920 g$r$23922)) '#f))) ((case-lambda ((g$x$23924) (if (g$syntax-pair?$14501 g$x$23924) (begin '#f ((case-lambda ((g$q$23926) (if g$q$23926 (begin '#f ((case-lambda ((g$r$23928) (if g$r$23928 (begin '#f (append g$q$23926 g$r$23928)) '#f))) ((case-lambda ((g$x$23930) (if (equal? (g$stx->datum$14535 g$x$23930) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$23924)))) '#f))) ((case-lambda ((g$x$23932) (list g$x$23932))) (g$syntax-car$14509 g$x$23924)))) '#f))) (g$syntax-cdr$14513 g$x$23918)))) '#f))) ((case-lambda ((g$x$23934) (list g$x$23934))) (g$syntax-car$14509 g$x$23918)))) '#f))) g$t$23866)))) g$t$23850)))) ((case-lambda ((g$x$23936) (if (g$syntax-pair?$14501 g$x$23936) (begin '#f ((case-lambda ((g$q$23938) (if g$q$23938 (begin '#f ((case-lambda ((g$r$23940) (if g$r$23940 (begin '#f (append g$q$23938 g$r$23940)) '#f))) ((case-lambda ((g$x$23942) (if (g$syntax-pair?$14501 g$x$23942) (begin '#f ((case-lambda ((g$q$23944) (if g$q$23944 (begin '#f ((case-lambda ((g$r$23946) (if g$r$23946 (begin '#f (append g$q$23944 g$r$23946)) '#f))) ((case-lambda ((g$x$23948) (if (equal? (g$stx->datum$14535 g$x$23948) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$23942)))) '#f))) ((case-lambda ((g$x$23950) (list g$x$23950))) (g$syntax-car$14509 g$x$23942)))) '#f))) (g$syntax-cdr$14513 g$x$23936)))) '#f))) ((case-lambda ((g$x$23952) (list g$x$23952))) (g$syntax-car$14509 g$x$23936)))) '#f))) g$t$23850)))) g$t$23832)))) ((case-lambda ((g$x$23954) (if (g$syntax-pair?$14501 g$x$23954) (begin '#f ((case-lambda ((g$q$23956) (if g$q$23956 (begin '#f ((case-lambda ((g$r$23958) (if g$r$23958 (begin '#f (append g$q$23956 g$r$23958)) '#f))) ((letrec ((g$f$23960 (case-lambda ((g$x$23962) (if (g$syntax-pair?$14501 g$x$23962) ((case-lambda ((g$cars/f$23964) (if g$cars/f$23964 (begin '#f ((case-lambda ((g$cdrs/f$23966) (if g$cdrs/f$23966 (begin '#f (map cons g$cars/f$23964 g$cdrs/f$23966)) '#f))) (g$f$23960 (g$syntax-cdr$14513 g$x$23962)))) '#f))) ((case-lambda ((g$x$23968) (list g$x$23968))) (g$syntax-car$14509 g$x$23962))) (if (g$syntax-null?$14505 g$x$23962) (list (begin 'sub* '())) '#f)))))) g$f$23960) (g$syntax-cdr$14513 g$x$23954)))) '#f))) ((case-lambda ((g$x$23970) (list g$x$23970))) (g$syntax-car$14509 g$x$23954)))) '#f))) g$t$23832)))) g$t$23814)))) ((case-lambda ((g$x$23972) (if (g$syntax-pair?$14501 g$x$23972) (begin '#f ((case-lambda ((g$q$23974) (if g$q$23974 (begin '#f ((case-lambda ((g$r$23976) (if g$r$23976 (begin '#f (append g$q$23974 g$r$23976)) '#f))) ((letrec ((g$f$23978 (case-lambda ((g$x$23980) (if (g$syntax-pair?$14501 g$x$23980) ((case-lambda ((g$cars/f$23982) (if g$cars/f$23982 (begin '#f ((case-lambda ((g$cdrs/f$23984) (if g$cdrs/f$23984 (begin '#f (map cons g$cars/f$23982 g$cdrs/f$23984)) '#f))) (g$f$23978 (g$syntax-cdr$14513 g$x$23980)))) '#f))) ((case-lambda ((g$x$23986) (list g$x$23986))) (g$syntax-car$14509 g$x$23980))) (if (g$syntax-null?$14505 g$x$23980) (list (begin 'sub* '())) '#f)))))) g$f$23978) (g$syntax-cdr$14513 g$x$23972)))) '#f))) ((case-lambda ((g$x$23988) (list g$x$23988))) (g$syntax-car$14509 g$x$23972)))) '#f))) g$t$23814)))) g$t$23804)))) ((case-lambda ((g$x$23990) (list g$x$23990))) g$t$23804)))) g$x*$23802)))) (set! g$version-pred$23650 (case-lambda ((g$x*$23652) ((case-lambda ((g$t$23654) ((case-lambda ((g$ls/false$23656) (if (if g$ls/false$23656 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$23656)) '#f) (apply (case-lambda (() (case-lambda ((g$x$23658) '#t)))) g$ls/false$23656) ((case-lambda ((g$t$23660) ((case-lambda ((g$ls/false$23662) (if (if g$ls/false$23662 (begin '#f (apply (case-lambda ((g$c$23664 g$ver*$23665) (eq? g$c$23664 'and))) g$ls/false$23662)) '#f) (apply (case-lambda ((g$c$23668 g$ver*$23669) ((case-lambda ((g$p*$23672) (case-lambda ((g$x$23674) (for-all (case-lambda ((g$p$23676) (g$p$23676 g$x$23674))) g$p*$23672))))) (map g$version-pred$23650 g$ver*$23669)))) g$ls/false$23662) ((case-lambda ((g$t$23678) ((case-lambda ((g$ls/false$23680) (if (if g$ls/false$23680 (begin '#f (apply (case-lambda ((g$c$23682 g$ver*$23683) (eq? g$c$23682 'or))) g$ls/false$23680)) '#f) (apply (case-lambda ((g$c$23686 g$ver*$23687) ((case-lambda ((g$p*$23690) (case-lambda ((g$x$23692) (exists (case-lambda ((g$p$23694) (g$p$23694 g$x$23692))) g$p*$23690))))) (map g$version-pred$23650 g$ver*$23687)))) g$ls/false$23680) ((case-lambda ((g$t$23696) ((case-lambda ((g$ls/false$23698) (if (if g$ls/false$23698 (begin '#f (apply (case-lambda ((g$c$23700 g$ver$23701) (eq? g$c$23700 'not))) g$ls/false$23698)) '#f) (apply (case-lambda ((g$c$23704 g$ver$23705) ((case-lambda ((g$p$23708) (case-lambda ((g$x$23710) (not (g$p$23708 g$x$23710)))))) (g$version-pred$23650 g$ver$23705)))) g$ls/false$23698) ((case-lambda ((g$t$23712) ((case-lambda ((g$ls/false$23714) (if (if g$ls/false$23714 (begin '#f (apply (case-lambda ((g$sub*$23716) '#t)) g$ls/false$23714)) '#f) (apply (case-lambda ((g$sub*$23718) ((case-lambda ((g$p*$23720) (case-lambda ((g$x$23722) (letrec ((g$f$23724 (case-lambda ((g$p*$23726 g$x$23727) (if (null? g$p*$23726) '#t (if (null? g$x$23727) '#f (if ((car g$p*$23726) (car g$x$23727)) (begin '#f (g$f$23724 (cdr g$p*$23726) (cdr g$x*$23652))) '#f))))))) (g$f$23724 g$p*$23720 g$x$23722)))))) (map g$subversion-pred$23648 g$sub*$23718)))) g$ls/false$23714) ((case-lambda ((g$t$23730) ((case-lambda ((g$ls/false$23732) (if (if g$ls/false$23732 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$23732)) '#f) (apply (case-lambda (() (error 'import '"invalid version spec" g$x*$23652 g$spec$23644))) g$ls/false$23732) (error 'expander '"invalid syntax" (g$strip$14533 g$t$23730 '()))))) ((case-lambda ((g$x$23734) '())) g$t$23730)))) g$t$23712)))) ((letrec ((g$f$23736 (case-lambda ((g$x$23738) (if (g$syntax-pair?$14501 g$x$23738) ((case-lambda ((g$cars/f$23740) (if g$cars/f$23740 (begin '#f ((case-lambda ((g$cdrs/f$23742) (if g$cdrs/f$23742 (begin '#f (map cons g$cars/f$23740 g$cdrs/f$23742)) '#f))) (g$f$23736 (g$syntax-cdr$14513 g$x$23738)))) '#f))) ((case-lambda ((g$x$23744) (list g$x$23744))) (g$syntax-car$14509 g$x$23738))) (if (g$syntax-null?$14505 g$x$23738) (list (begin 'sub* '())) '#f)))))) g$f$23736) g$t$23712)))) g$t$23696)))) ((case-lambda ((g$x$23746) (if (g$syntax-pair?$14501 g$x$23746) (begin '#f ((case-lambda ((g$q$23748) (if g$q$23748 (begin '#f ((case-lambda ((g$r$23750) (if g$r$23750 (begin '#f (append g$q$23748 g$r$23750)) '#f))) ((case-lambda ((g$x$23752) (if (g$syntax-pair?$14501 g$x$23752) (begin '#f ((case-lambda ((g$q$23754) (if g$q$23754 (begin '#f ((case-lambda ((g$r$23756) (if g$r$23756 (begin '#f (append g$q$23754 g$r$23756)) '#f))) ((case-lambda ((g$x$23758) (if (equal? (g$stx->datum$14535 g$x$23758) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$23752)))) '#f))) ((case-lambda ((g$x$23760) (list g$x$23760))) (g$syntax-car$14509 g$x$23752)))) '#f))) (g$syntax-cdr$14513 g$x$23746)))) '#f))) ((case-lambda ((g$x$23762) (list g$x$23762))) (g$syntax-car$14509 g$x$23746)))) '#f))) g$t$23696)))) g$t$23678)))) ((case-lambda ((g$x$23764) (if (g$syntax-pair?$14501 g$x$23764) (begin '#f ((case-lambda ((g$q$23766) (if g$q$23766 (begin '#f ((case-lambda ((g$r$23768) (if g$r$23768 (begin '#f (append g$q$23766 g$r$23768)) '#f))) ((letrec ((g$f$23770 (case-lambda ((g$x$23772) (if (g$syntax-pair?$14501 g$x$23772) ((case-lambda ((g$cars/f$23774) (if g$cars/f$23774 (begin '#f ((case-lambda ((g$cdrs/f$23776) (if g$cdrs/f$23776 (begin '#f (map cons g$cars/f$23774 g$cdrs/f$23776)) '#f))) (g$f$23770 (g$syntax-cdr$14513 g$x$23772)))) '#f))) ((case-lambda ((g$x$23778) (list g$x$23778))) (g$syntax-car$14509 g$x$23772))) (if (g$syntax-null?$14505 g$x$23772) (list (begin 'ver* '())) '#f)))))) g$f$23770) (g$syntax-cdr$14513 g$x$23764)))) '#f))) ((case-lambda ((g$x$23780) (list g$x$23780))) (g$syntax-car$14509 g$x$23764)))) '#f))) g$t$23678)))) g$t$23660)))) ((case-lambda ((g$x$23782) (if (g$syntax-pair?$14501 g$x$23782) (begin '#f ((case-lambda ((g$q$23784) (if g$q$23784 (begin '#f ((case-lambda ((g$r$23786) (if g$r$23786 (begin '#f (append g$q$23784 g$r$23786)) '#f))) ((letrec ((g$f$23788 (case-lambda ((g$x$23790) (if (g$syntax-pair?$14501 g$x$23790) ((case-lambda ((g$cars/f$23792) (if g$cars/f$23792 (begin '#f ((case-lambda ((g$cdrs/f$23794) (if g$cdrs/f$23794 (begin '#f (map cons g$cars/f$23792 g$cdrs/f$23794)) '#f))) (g$f$23788 (g$syntax-cdr$14513 g$x$23790)))) '#f))) ((case-lambda ((g$x$23796) (list g$x$23796))) (g$syntax-car$14509 g$x$23790))) (if (g$syntax-null?$14505 g$x$23790) (list (begin 'ver* '())) '#f)))))) g$f$23788) (g$syntax-cdr$14513 g$x$23782)))) '#f))) ((case-lambda ((g$x$23798) (list g$x$23798))) (g$syntax-car$14509 g$x$23782)))) '#f))) g$t$23660)))) g$t$23654)))) ((case-lambda ((g$x$23800) (if (equal? (g$stx->datum$14535 g$x$23800) '()) (begin '#f '()) '#f))) g$t$23654)))) g$x*$23652)))) (letrec ((g$f$23994 (case-lambda ((g$x$23996) ((case-lambda ((g$t$23998) ((case-lambda ((g$ls/false$24000) (if (if g$ls/false$24000 (begin '#f (apply (case-lambda ((g$version-spec*$24002) '#t)) g$ls/false$24000)) '#f) (apply (case-lambda ((g$version-spec*$24004) (values '() (g$version-pred$23650 g$version-spec*$24004)))) g$ls/false$24000) ((case-lambda ((g$t$24006) ((case-lambda ((g$ls/false$24008) (if (if g$ls/false$24008 (begin '#f (apply (case-lambda ((g$x$24010 g$x*$24011) (symbol? g$x$24010))) g$ls/false$24008)) '#f) (apply (case-lambda ((g$x$24014 g$x*$24015) (call-with-values (case-lambda (() (g$f$23994 g$x*$24015))) (case-lambda ((g$name$24018 g$pred$24019) (values (cons g$x$24014 g$name$24018) g$pred$24019)))))) g$ls/false$24008) ((case-lambda ((g$t$24022) ((case-lambda ((g$ls/false$24024) (if (if g$ls/false$24024 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$24024)) '#f) (apply (case-lambda (() (values '() (case-lambda ((g$x$24026) '#t))))) g$ls/false$24024) ((case-lambda ((g$t$24028) ((case-lambda ((g$ls/false$24030) (if (if g$ls/false$24030 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$24030)) '#f) (apply (case-lambda (() (error 'expander '"invalid import spec" (g$strip$14533 g$spec$23644 '())))) g$ls/false$24030) (error 'expander '"invalid syntax" (g$strip$14533 g$t$24028 '()))))) ((case-lambda ((g$x$24032) '())) g$t$24028)))) g$t$24022)))) ((case-lambda ((g$x$24034) (if (equal? (g$stx->datum$14535 g$x$24034) '()) (begin '#f '()) '#f))) g$t$24022)))) g$t$24006)))) ((case-lambda ((g$x$24036) (if (g$syntax-pair?$14501 g$x$24036) (begin '#f ((case-lambda ((g$q$24038) (if g$q$24038 (begin '#f ((case-lambda ((g$r$24040) (if g$r$24040 (begin '#f (append g$q$24038 g$r$24040)) '#f))) ((case-lambda ((g$x$24042) (list g$x$24042))) (g$syntax-cdr$14513 g$x$24036)))) '#f))) ((case-lambda ((g$x$24044) (list g$x$24044))) (g$syntax-car$14509 g$x$24036)))) '#f))) g$t$24006)))) g$t$23998)))) ((case-lambda ((g$x$24046) (if (g$syntax-pair?$14501 g$x$24046) (begin '#f ((case-lambda ((g$q$24048) (if g$q$24048 (begin '#f ((case-lambda ((g$r$24050) (if g$r$24050 (begin '#f (append g$q$24048 g$r$24050)) '#f))) ((case-lambda ((g$x$24052) (if (equal? (g$stx->datum$14535 g$x$24052) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$24046)))) '#f))) ((letrec ((g$f$24054 (case-lambda ((g$x$24056) (if (g$syntax-pair?$14501 g$x$24056) ((case-lambda ((g$cars/f$24058) (if g$cars/f$24058 (begin '#f ((case-lambda ((g$cdrs/f$24060) (if g$cdrs/f$24060 (begin '#f (map cons g$cars/f$24058 g$cdrs/f$24060)) '#f))) (g$f$24054 (g$syntax-cdr$14513 g$x$24056)))) '#f))) ((case-lambda ((g$x$24062) (list g$x$24062))) (g$syntax-car$14509 g$x$24056))) (if (g$syntax-null?$14505 g$x$24056) (list (begin 'version-spec* '())) '#f)))))) g$f$24054) (g$syntax-car$14509 g$x$24046)))) '#f))) g$t$23998)))) g$x$23996))))) (g$f$23994 g$spec$23644))))) '#f '#f '#f)))) (set! g$get-import$23350 (case-lambda ((g$spec$23352) ((case-lambda ((g$t$23354) ((case-lambda ((g$ls/false$23356) (if (if g$ls/false$23356 (begin '#f (apply (case-lambda ((g$rename$23358 g$isp$23359 g$old*$23360 g$new*$23361) (if (eq? g$rename$23358 'rename) (if (for-all symbol? g$old*$23360) (begin '#f (for-all symbol? g$new*$23361)) '#f) '#f))) g$ls/false$23356)) '#f) (apply (case-lambda ((g$rename$23366 g$isp$23367 g$old*$23368 g$new*$23369) ((case-lambda ((g$subst$23374) ((case-lambda ((g$old-label*$23376) ((case-lambda ((g$subst$23378) (g$merge-substs$23338 (map cons g$new*$23369 g$old-label*$23376) g$subst$23378))) (g$rem*$23344 g$old*$23368 g$subst$23374)))) (g$find*$23342 g$old*$23368 g$subst$23374)))) (g$get-import$23350 g$isp$23367)))) g$ls/false$23356) ((case-lambda ((g$t$23380) ((case-lambda ((g$ls/false$23382) (if (if g$ls/false$23382 (begin '#f (apply (case-lambda ((g$except$23384 g$isp$23385 g$sym*$23386) (if (eq? g$except$23384 'except) (begin '#f (for-all symbol? g$sym*$23386)) '#f))) g$ls/false$23382)) '#f) (apply (case-lambda ((g$except$23390 g$isp$23391 g$sym*$23392) ((case-lambda ((g$subst$23396) (g$rem*$23344 g$sym*$23392 g$subst$23396))) (g$get-import$23350 g$isp$23391)))) g$ls/false$23382) ((case-lambda ((g$t$23398) ((case-lambda ((g$ls/false$23400) (if (if g$ls/false$23400 (begin '#f (apply (case-lambda ((g$only$23402 g$isp$23403 g$sym*$23404) (if (eq? g$only$23402 'only) (begin '#f (for-all symbol? g$sym*$23404)) '#f))) g$ls/false$23400)) '#f) (apply (case-lambda ((g$only$23408 g$isp$23409 g$sym*$23410) ((case-lambda ((g$subst$23414) ((case-lambda ((g$sym*$23416) ((case-lambda ((g$lab*$23418) (map cons g$sym*$23416 g$lab*$23418))) (g$find*$23342 g$sym*$23416 g$subst$23414)))) (g$remove-dups$23346 g$sym*$23410)))) (g$get-import$23350 g$isp$23409)))) g$ls/false$23400) ((case-lambda ((g$t$23420) ((case-lambda ((g$ls/false$23422) (if (if g$ls/false$23422 (begin '#f (apply (case-lambda ((g$prefix$23424 g$isp$23425 g$p$23426) (if (eq? g$prefix$23424 'prefix) (begin '#f (symbol? g$p$23426)) '#f))) g$ls/false$23422)) '#f) (apply (case-lambda ((g$prefix$23430 g$isp$23431 g$p$23432) ((case-lambda ((g$subst$23436) (map (case-lambda ((g$x$23438) (cons (string->symbol (string-append (symbol->string g$p$23432) (symbol->string (car g$x$23438)))) (cdr g$x$23438)))) g$subst$23436))) (g$get-import$23350 g$isp$23431)))) g$ls/false$23422) ((case-lambda ((g$t$23440) ((case-lambda ((g$ls/false$23442) (if (if g$ls/false$23442 (begin '#f (apply (case-lambda ((g$library$23444 g$spec*$23445) (eq? g$library$23444 'library))) g$ls/false$23442)) '#f) (apply (case-lambda ((g$library$23448 g$spec*$23449) (call-with-values (case-lambda (() (g$parse-library-name$23348 g$spec*$23449))) (case-lambda ((g$name$23452 g$pred$23453) (begin (if (null? g$name$23452) (error 'import '"empty library name" g$spec*$23449) (void)) ((case-lambda ((g$lib$23456) (begin (if g$lib$23456 (void) (error 'import '"cannot find library with required name" g$name$23452)) (if (g$pred$23453 (g$g$library-version$13740$14141 g$lib$23456)) (void) (error 'import '"library does not satisfy version specification" g$lib$23456 g$spec*$23449)) (g$imp-collector$23336 g$lib$23456) (g$g$library-subst$13748$14137 g$lib$23456)))) (g$g$find-library-by-name$13798$14112 g$name$23452)))))))) g$ls/false$23442) ((case-lambda ((g$t$23458) ((case-lambda ((g$ls/false$23460) (if (if g$ls/false$23460 (begin '#f (apply (case-lambda ((g$x$23462 g$x*$23463) (not (memq g$x$23462 '(rename except only prefix library))))) g$ls/false$23460)) '#f) (apply (case-lambda ((g$x$23466 g$x*$23467) (g$get-import$23350 (list 'library (cons g$x$23466 g$x*$23467))))) g$ls/false$23460) ((case-lambda ((g$t$23470) ((case-lambda ((g$ls/false$23472) (if (if g$ls/false$23472 (begin '#f (apply (case-lambda ((g$spec$23474) '#t)) g$ls/false$23472)) '#f) (apply (case-lambda ((g$spec$23476) (error 'import '"invalid import spec" g$spec$23476))) g$ls/false$23472) (error 'expander '"invalid syntax" (g$strip$14533 g$t$23470 '()))))) ((case-lambda ((g$x$23478) (list g$x$23478))) g$t$23470)))) g$t$23458)))) ((case-lambda ((g$x$23480) (if (g$syntax-pair?$14501 g$x$23480) (begin '#f ((case-lambda ((g$q$23482) (if g$q$23482 (begin '#f ((case-lambda ((g$r$23484) (if g$r$23484 (begin '#f (append g$q$23482 g$r$23484)) '#f))) ((letrec ((g$f$23486 (case-lambda ((g$x$23488) (if (g$syntax-pair?$14501 g$x$23488) ((case-lambda ((g$cars/f$23490) (if g$cars/f$23490 (begin '#f ((case-lambda ((g$cdrs/f$23492) (if g$cdrs/f$23492 (begin '#f (map cons g$cars/f$23490 g$cdrs/f$23492)) '#f))) (g$f$23486 (g$syntax-cdr$14513 g$x$23488)))) '#f))) ((case-lambda ((g$x$23494) (list g$x$23494))) (g$syntax-car$14509 g$x$23488))) (if (g$syntax-null?$14505 g$x$23488) (list (begin 'x* '())) '#f)))))) g$f$23486) (g$syntax-cdr$14513 g$x$23480)))) '#f))) ((case-lambda ((g$x$23496) (list g$x$23496))) (g$syntax-car$14509 g$x$23480)))) '#f))) g$t$23458)))) g$t$23440)))) ((case-lambda ((g$x$23498) (if (g$syntax-pair?$14501 g$x$23498) (begin '#f ((case-lambda ((g$q$23500) (if g$q$23500 (begin '#f ((case-lambda ((g$r$23502) (if g$r$23502 (begin '#f (append g$q$23500 g$r$23502)) '#f))) ((case-lambda ((g$x$23504) (if (g$syntax-pair?$14501 g$x$23504) (begin '#f ((case-lambda ((g$q$23506) (if g$q$23506 (begin '#f ((case-lambda ((g$r$23508) (if g$r$23508 (begin '#f (append g$q$23506 g$r$23508)) '#f))) ((case-lambda ((g$x$23510) (if (equal? (g$stx->datum$14535 g$x$23510) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$23504)))) '#f))) ((letrec ((g$f$23512 (case-lambda ((g$x$23514) (if (g$syntax-pair?$14501 g$x$23514) ((case-lambda ((g$cars/f$23516) (if g$cars/f$23516 (begin '#f ((case-lambda ((g$cdrs/f$23518) (if g$cdrs/f$23518 (begin '#f (map cons g$cars/f$23516 g$cdrs/f$23518)) '#f))) (g$f$23512 (g$syntax-cdr$14513 g$x$23514)))) '#f))) ((case-lambda ((g$x$23520) (list g$x$23520))) (g$syntax-car$14509 g$x$23514))) (if (g$syntax-null?$14505 g$x$23514) (list (begin 'spec* '())) '#f)))))) g$f$23512) (g$syntax-car$14509 g$x$23504)))) '#f))) (g$syntax-cdr$14513 g$x$23498)))) '#f))) ((case-lambda ((g$x$23522) (list g$x$23522))) (g$syntax-car$14509 g$x$23498)))) '#f))) g$t$23440)))) g$t$23420)))) ((case-lambda ((g$x$23524) (if (g$syntax-pair?$14501 g$x$23524) (begin '#f ((case-lambda ((g$q$23526) (if g$q$23526 (begin '#f ((case-lambda ((g$r$23528) (if g$r$23528 (begin '#f (append g$q$23526 g$r$23528)) '#f))) ((case-lambda ((g$x$23530) (if (g$syntax-pair?$14501 g$x$23530) (begin '#f ((case-lambda ((g$q$23532) (if g$q$23532 (begin '#f ((case-lambda ((g$r$23534) (if g$r$23534 (begin '#f (append g$q$23532 g$r$23534)) '#f))) ((case-lambda ((g$x$23536) (if (g$syntax-pair?$14501 g$x$23536) (begin '#f ((case-lambda ((g$q$23538) (if g$q$23538 (begin '#f ((case-lambda ((g$r$23540) (if g$r$23540 (begin '#f (append g$q$23538 g$r$23540)) '#f))) ((case-lambda ((g$x$23542) (if (equal? (g$stx->datum$14535 g$x$23542) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$23536)))) '#f))) ((case-lambda ((g$x$23544) (list g$x$23544))) (g$syntax-car$14509 g$x$23536)))) '#f))) (g$syntax-cdr$14513 g$x$23530)))) '#f))) ((case-lambda ((g$x$23546) (list g$x$23546))) (g$syntax-car$14509 g$x$23530)))) '#f))) (g$syntax-cdr$14513 g$x$23524)))) '#f))) ((case-lambda ((g$x$23548) (list g$x$23548))) (g$syntax-car$14509 g$x$23524)))) '#f))) g$t$23420)))) g$t$23398)))) ((case-lambda ((g$x$23550) (if (g$syntax-pair?$14501 g$x$23550) (begin '#f ((case-lambda ((g$q$23552) (if g$q$23552 (begin '#f ((case-lambda ((g$r$23554) (if g$r$23554 (begin '#f (append g$q$23552 g$r$23554)) '#f))) ((case-lambda ((g$x$23556) (if (g$syntax-pair?$14501 g$x$23556) (begin '#f ((case-lambda ((g$q$23558) (if g$q$23558 (begin '#f ((case-lambda ((g$r$23560) (if g$r$23560 (begin '#f (append g$q$23558 g$r$23560)) '#f))) ((letrec ((g$f$23562 (case-lambda ((g$x$23564) (if (g$syntax-pair?$14501 g$x$23564) ((case-lambda ((g$cars/f$23566) (if g$cars/f$23566 (begin '#f ((case-lambda ((g$cdrs/f$23568) (if g$cdrs/f$23568 (begin '#f (map cons g$cars/f$23566 g$cdrs/f$23568)) '#f))) (g$f$23562 (g$syntax-cdr$14513 g$x$23564)))) '#f))) ((case-lambda ((g$x$23570) (list g$x$23570))) (g$syntax-car$14509 g$x$23564))) (if (g$syntax-null?$14505 g$x$23564) (list (begin 'sym* '())) '#f)))))) g$f$23562) (g$syntax-cdr$14513 g$x$23556)))) '#f))) ((case-lambda ((g$x$23572) (list g$x$23572))) (g$syntax-car$14509 g$x$23556)))) '#f))) (g$syntax-cdr$14513 g$x$23550)))) '#f))) ((case-lambda ((g$x$23574) (list g$x$23574))) (g$syntax-car$14509 g$x$23550)))) '#f))) g$t$23398)))) g$t$23380)))) ((case-lambda ((g$x$23576) (if (g$syntax-pair?$14501 g$x$23576) (begin '#f ((case-lambda ((g$q$23578) (if g$q$23578 (begin '#f ((case-lambda ((g$r$23580) (if g$r$23580 (begin '#f (append g$q$23578 g$r$23580)) '#f))) ((case-lambda ((g$x$23582) (if (g$syntax-pair?$14501 g$x$23582) (begin '#f ((case-lambda ((g$q$23584) (if g$q$23584 (begin '#f ((case-lambda ((g$r$23586) (if g$r$23586 (begin '#f (append g$q$23584 g$r$23586)) '#f))) ((letrec ((g$f$23588 (case-lambda ((g$x$23590) (if (g$syntax-pair?$14501 g$x$23590) ((case-lambda ((g$cars/f$23592) (if g$cars/f$23592 (begin '#f ((case-lambda ((g$cdrs/f$23594) (if g$cdrs/f$23594 (begin '#f (map cons g$cars/f$23592 g$cdrs/f$23594)) '#f))) (g$f$23588 (g$syntax-cdr$14513 g$x$23590)))) '#f))) ((case-lambda ((g$x$23596) (list g$x$23596))) (g$syntax-car$14509 g$x$23590))) (if (g$syntax-null?$14505 g$x$23590) (list (begin 'sym* '())) '#f)))))) g$f$23588) (g$syntax-cdr$14513 g$x$23582)))) '#f))) ((case-lambda ((g$x$23598) (list g$x$23598))) (g$syntax-car$14509 g$x$23582)))) '#f))) (g$syntax-cdr$14513 g$x$23576)))) '#f))) ((case-lambda ((g$x$23600) (list g$x$23600))) (g$syntax-car$14509 g$x$23576)))) '#f))) g$t$23380)))) g$t$23354)))) ((case-lambda ((g$x$23602) (if (g$syntax-pair?$14501 g$x$23602) (begin '#f ((case-lambda ((g$q$23604) (if g$q$23604 (begin '#f ((case-lambda ((g$r$23606) (if g$r$23606 (begin '#f (append g$q$23604 g$r$23606)) '#f))) ((case-lambda ((g$x$23608) (if (g$syntax-pair?$14501 g$x$23608) (begin '#f ((case-lambda ((g$q$23610) (if g$q$23610 (begin '#f ((case-lambda ((g$r$23612) (if g$r$23612 (begin '#f (append g$q$23610 g$r$23612)) '#f))) ((letrec ((g$f$23614 (case-lambda ((g$x$23616) (if (g$syntax-pair?$14501 g$x$23616) ((case-lambda ((g$cars/f$23618) (if g$cars/f$23618 (begin '#f ((case-lambda ((g$cdrs/f$23620) (if g$cdrs/f$23620 (begin '#f (map cons g$cars/f$23618 g$cdrs/f$23620)) '#f))) (g$f$23614 (g$syntax-cdr$14513 g$x$23616)))) '#f))) ((case-lambda ((g$x$23622) (if (g$syntax-pair?$14501 g$x$23622) (begin '#f ((case-lambda ((g$q$23624) (if g$q$23624 (begin '#f ((case-lambda ((g$r$23626) (if g$r$23626 (begin '#f (append g$q$23624 g$r$23626)) '#f))) ((case-lambda ((g$x$23628) (if (g$syntax-pair?$14501 g$x$23628) (begin '#f ((case-lambda ((g$q$23630) (if g$q$23630 (begin '#f ((case-lambda ((g$r$23632) (if g$r$23632 (begin '#f (append g$q$23630 g$r$23632)) '#f))) ((case-lambda ((g$x$23634) (if (equal? (g$stx->datum$14535 g$x$23634) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14513 g$x$23628)))) '#f))) ((case-lambda ((g$x$23636) (list g$x$23636))) (g$syntax-car$14509 g$x$23628)))) '#f))) (g$syntax-cdr$14513 g$x$23622)))) '#f))) ((case-lambda ((g$x$23638) (list g$x$23638))) (g$syntax-car$14509 g$x$23622)))) '#f))) (g$syntax-car$14509 g$x$23616))) (if (g$syntax-null?$14505 g$x$23616) (list (begin 'old* '()) (begin 'new* '())) '#f)))))) g$f$23614) (g$syntax-cdr$14513 g$x$23608)))) '#f))) ((case-lambda ((g$x$23640) (list g$x$23640))) (g$syntax-car$14509 g$x$23608)))) '#f))) (g$syntax-cdr$14513 g$x$23602)))) '#f))) ((case-lambda ((g$x$23642) (list g$x$23642))) (g$syntax-car$14509 g$x$23602)))) '#f))) g$t$23354)))) g$spec$23352)))) (letrec ((g$f$24124 (case-lambda ((g$imp*$24126 g$subst$24127) (if (null? g$imp*$24126) (values g$subst$24127 (g$imp-collector$23336)) (g$f$24124 (cdr g$imp*$24126) (g$merge-substs$23338 (g$get-import$23350 (car g$imp*$24126)) g$subst$24127))))))) (g$f$24124 g$imp*$23334 '()))))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$make-top-rib$15106 (case-lambda ((g$subst$24130) ((case-lambda ((g$rib$24132) (begin (for-each (case-lambda ((g$x$24134) ((case-lambda ((g$name$24136 g$label$24137) (g$extend-rib!$14454 g$rib$24132 (g$mkstx$14491 g$name$24136 g$top-mark*$14421 '()) g$label$24137))) (car g$x$24134) (cdr g$x$24134)))) g$subst$24130) g$rib$24132))) (g$make-empty-rib$14452))))) (set! g$make-collector$15108 (case-lambda (() ((case-lambda ((g$ls$24140) (case-lambda (() g$ls$24140) ((g$x$24142) (set! g$ls$24140 (g$set-cons$14414 g$x$24142 g$ls$24140)))))) '())))) (set! g$inv-collector$15110 (g$g$make-parameter$13369$13585 (case-lambda (g$args$24144 (error 'inv-collector '"not initialized"))) (case-lambda ((g$x$24146) (begin (if (procedure? g$x$24146) (void) (error 'inv-collector '"not a procedure" g$x$24146)) g$x$24146))))) (set! g$vis-collector$15112 (g$g$make-parameter$13369$13585 (case-lambda (g$args$24148 (error 'vis-collector '"not initialized"))) (case-lambda ((g$x$24150) (begin (if (procedure? g$x$24150) (void) (error 'vis-collector '"not a procedure" g$x$24150)) g$x$24150))))) (set! g$chi-library-internal$15114 (case-lambda ((g$e*$24152 g$rib$24153 g$top?$24154) (call-with-values (case-lambda (() (g$chi-body*$15084 g$e*$24152 '() '() '() '() '() '() g$rib$24153 g$top?$24154))) (case-lambda ((g$e*$24158 g$r$24159 g$mr$24160 g$lex*$24161 g$rhs*$24162 g$mod**$24163 g$_kwd*$24164) (values (append (apply append (reverse g$mod**$24163)) g$e*$24158) g$r$24159 g$mr$24160 (reverse g$lex*$24161) (reverse g$rhs*$24162)))))))) (set! g$library-body-expander$15116 (case-lambda ((g$exp*$24172 g$imp*$24173 g$b*$24174) (call-with-values (case-lambda (() (g$parse-exports$15098 g$exp*$24172))) (case-lambda ((g$exp-int*$24178 g$exp-ext*$24179) (call-with-values (case-lambda (() (g$parse-import-spec*$15104 g$imp*$24173))) (case-lambda ((g$subst$24180 g$imp*$24181) ((case-lambda ((g$rib$24186) ((case-lambda ((g$b*$24188 g$rtc$24189 g$vtc$24190) ((case-lambda ((g$g$t$24194$24198 g$g$t$24195$24199 g$g$t$24196$24200 g$g$t$24197$24201) ((case-lambda ((g$swap$24206) (dynamic-wind g$swap$24206 (case-lambda (() (call-with-values (case-lambda (() (g$chi-library-internal$15114 g$b*$24188 g$rib$24186 '#f))) (case-lambda ((g$init*$24208 g$r$24209 g$mr$24210 g$lex*$24211 g$rhs*$24212) (begin (g$seal-rib!$14456 g$rib$24186) ((case-lambda ((g$rhs*$24218 g$init*$24219) (begin (g$unseal-rib!$14458 g$rib$24186) ((case-lambda ((g$export-subst$24222) (call-with-values (case-lambda (() (g$make-export-env/macros$15159 g$r$24209))) (case-lambda ((g$export-env$24224 g$global*$24225 g$macro*$24226) ((case-lambda ((g$invoke-body$24230 g$invoke-definitions$24231) (values g$imp*$24181 (g$rtc$24189) (g$vtc$24190) (g$g$build-sequence$14335$14398 '#f (append g$invoke-definitions$24231 (list g$invoke-body$24230))) g$macro*$24226 g$export-subst$24222 g$export-env$24224))) (g$g$build-letrec*$14341$14395 '#f g$lex*$24211 g$rhs*$24218 (g$build-exports$15155 g$global*$24225 g$init*$24219)) (map g$g$build-global-define$14149$14412 (map cdr g$global*$24225)))))))) (g$make-export-subst$15157 g$exp-int*$24178 g$exp-ext*$24179 g$rib$24186))))) (g$chi-rhs*$15072 g$rhs*$24212 g$r$24209 g$mr$24210) (g$chi-expr*$15058 g$init*$24208 g$r$24209 g$mr$24210)))))))) g$swap$24206))) (case-lambda (() (begin ((case-lambda ((g$t$24234) (begin (g$g$t$24194$24198 g$g$t$24196$24200) (set! g$g$t$24196$24200 g$t$24234)))) (g$g$t$24194$24198)) ((case-lambda ((g$t$24236) (begin (g$g$t$24195$24199 g$g$t$24197$24201) (set! g$g$t$24197$24201 g$t$24236)))) (g$g$t$24195$24199)))))))) g$inv-collector$15110 g$vis-collector$15112 g$rtc$24189 g$vtc$24190))) (map (case-lambda ((g$x$24238) (g$mkstx$14491 g$x$24238 g$top-mark*$14421 (list g$rib$24186)))) g$b*$24174) (g$make-collector$15108) (g$make-collector$15108)))) (g$make-top-rib$15106 g$subst$24180))))))))))) (set! g$core-library-expander$15118 (case-lambda ((g$e$24240) (call-with-values (case-lambda (() (g$parse-library$15102 g$e$24240))) (case-lambda ((g$name*$24242 g$exp*$24243 g$imp*$24244 g$b*$24245) (call-with-values (case-lambda (() (g$parse-library-name$15100 g$name*$24242))) (case-lambda ((g$name$24250 g$ver$24251) (call-with-values (case-lambda (() (g$library-body-expander$15116 g$exp*$24243 g$imp*$24244 g$b*$24245))) (case-lambda ((g$imp*$24254 g$invoke-req*$24255 g$visit-req*$24256 g$invoke-code$24257 g$visit-code$24258 g$export-subst$24259 g$export-env$24260) (values g$name$24250 g$ver$24251 g$imp*$24254 g$invoke-req*$24255 g$visit-req*$24256 g$invoke-code$24257 g$visit-code$24258 g$export-subst$24259 g$export-env$24260))))))))))))) (set! g$parse-top-level-program$15120 (case-lambda ((g$e*$24268) ((case-lambda ((g$t$24270) ((case-lambda ((g$ls/false$24272) (if (if g$ls/false$24272 (begin '#f (apply (case-lambda ((g$import$24274 g$imp*$24275 g$b*$24276) (eq? g$import$24274 'import))) g$ls/false$24272)) '#f) (apply (case-lambda ((g$import$24280 g$imp*$24281 g$b*$24282) (values g$imp*$24281 g$b*$24282))) g$ls/false$24272) ((case-lambda ((g$t$24286) ((case-lambda ((g$ls/false$24288) (if (if g$ls/false$24288 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$24288)) '#f) (apply (case-lambda (() (error '"invalid syntax of top-level program"))) g$ls/false$24288) (error 'expander '"invalid syntax" (g$strip$14533 g$t$24286 '()))))) ((case-lambda ((g$x$24290) '())) g$t$24286)))) g$t$24270)))) ((case-lambda ((g$x$24292) (if (g$syntax-pair?$14501 g$x$24292) (begin '#f ((case-lambda ((g$q$24294) (if g$q$24294 (begin '#f ((case-lambda ((g$r$24296) (if g$r$24296 (begin '#f (append g$q$24294 g$r$24296)) '#f))) ((letrec ((g$f$24298 (case-lambda ((g$x$24300) (if (g$syntax-pair?$14501 g$x$24300) ((case-lambda ((g$cars/f$24302) (if g$cars/f$24302 (begin '#f ((case-lambda ((g$cdrs/f$24304) (if g$cdrs/f$24304 (begin '#f (map cons g$cars/f$24302 g$cdrs/f$24304)) '#f))) (g$f$24298 (g$syntax-cdr$14513 g$x$24300)))) '#f))) ((case-lambda ((g$x$24306) (list g$x$24306))) (g$syntax-car$14509 g$x$24300))) (if (g$syntax-null?$14505 g$x$24300) (list (begin 'b* '())) '#f)))))) g$f$24298) (g$syntax-cdr$14513 g$x$24292)))) '#f))) ((case-lambda ((g$x$24308) (if (g$syntax-pair?$14501 g$x$24308) (begin '#f ((case-lambda ((g$q$24310) (if g$q$24310 (begin '#f ((case-lambda ((g$r$24312) (if g$r$24312 (begin '#f (append g$q$24310 g$r$24312)) '#f))) ((letrec ((g$f$24314 (case-lambda ((g$x$24316) (if (g$syntax-pair?$14501 g$x$24316) ((case-lambda ((g$cars/f$24318) (if g$cars/f$24318 (begin '#f ((case-lambda ((g$cdrs/f$24320) (if g$cdrs/f$24320 (begin '#f (map cons g$cars/f$24318 g$cdrs/f$24320)) '#f))) (g$f$24314 (g$syntax-cdr$14513 g$x$24316)))) '#f))) ((case-lambda ((g$x$24322) (list g$x$24322))) (g$syntax-car$14509 g$x$24316))) (if (g$syntax-null?$14505 g$x$24316) (list (begin 'imp* '())) '#f)))))) g$f$24314) (g$syntax-cdr$14513 g$x$24308)))) '#f))) ((case-lambda ((g$x$24324) (list g$x$24324))) (g$syntax-car$14509 g$x$24308)))) '#f))) (g$syntax-car$14509 g$x$24292)))) '#f))) g$t$24270)))) g$e*$24268)))) (set! g$top-level-expander$15122 (case-lambda ((g$e*$24326) (call-with-values (case-lambda (() (g$parse-top-level-program$15120 g$e*$24326))) (case-lambda ((g$imp*$24328 g$b*$24329) (call-with-values (case-lambda (() (g$library-body-expander$15116 '() g$imp*$24328 g$b*$24329))) (case-lambda ((g$imp*$24332 g$invoke-req*$24333 g$visit-req*$24334 g$invoke-code$24335 g$visit-code$24336 g$export-subst$24337 g$export-env$24338) (values g$invoke-req*$24333 g$invoke-code$24335)))))))))) (set! g$make-env$15125 (case-lambda ((g$subst$24346 g$imp*$24347) (vector 'g$15124 g$subst$24346 g$imp*$24347)))) (set! g$env?$15127 (case-lambda ((g$x$24350) (if (vector? g$x$24350) (if (= (vector-length g$x$24350) (+ '1 (length '(subst imp*)))) (begin '#f (eq? (vector-ref g$x$24350 '0) 'g$15124)) '#f) '#f)))) (set! g$env-subst$15129 (case-lambda ((g$x$24352) (if (g$env?$15127 g$x$24352) (vector-ref g$x$24352 '1) (error 'env-subst '"~s is not of type ~s" g$x$24352 'env))))) (set! g$env-imp*$15131 (case-lambda ((g$x$24354) (if (g$env?$15127 g$x$24354) (vector-ref g$x$24354 '2) (error 'env-imp* '"~s is not of type ~s" g$x$24354 'env))))) (set! g$set-env-subst!$15133 (case-lambda ((g$x$24356 g$v$24357) (if (g$env?$15127 g$x$24356) (vector-set! g$x$24356 '1 g$v$24357) (error 'set-env-subst! '"~s is not of type ~s" g$x$24356 'env))))) (set! g$set-env-imp*!$15135 (case-lambda ((g$x$24360 g$v$24361) (if (g$env?$15127 g$x$24360) (vector-set! g$x$24360 '2 g$v$24361) (error 'set-env-imp*! '"~s is not of type ~s" g$x$24360 'env))))) (set! g$environment?$15137 (case-lambda ((g$x$24364) (g$env?$15127 g$x$24364)))) (set! g$environment$15139 (case-lambda (g$imp*$24366 (call-with-values (case-lambda (() (g$parse-import-spec*$15104 g$imp*$24366))) (case-lambda ((g$subst$24368 g$imp*$24369) (g$make-env$15125 g$subst$24368 g$imp*$24369))))))) (set! g$null-environment$15141 (case-lambda ((g$n$24372) (begin (if (eqv? g$n$24372 '5) (void) (error 'null-environment '"not 5" g$n$24372)) (g$environment$15139 '(psyntax null-environment-5)))))) (set! g$scheme-report-environment$15143 (case-lambda ((g$n$24374) (begin (if (eqv? g$n$24374 '5) (void) (error 'scheme-report-environment '"not 5" g$n$24374)) (g$environment$15139 '(psyntax scheme-report-environment-5)))))) (set! g$expand$15145 (case-lambda ((g$x$24376 g$env$24377) (begin (if (g$env?$15127 g$env$24377) (void) (error 'expand '"not an environment" g$env$24377)) ((case-lambda ((g$subst$24380) ((case-lambda ((g$rib$24382) ((case-lambda ((g$x$24384 g$rtc$24385 g$vtc$24386) ((case-lambda ((g$x$24390) (begin (g$seal-rib!$14456 g$rib$24382) (values g$x$24390 (g$rtc$24385))))) ((case-lambda ((g$g$t$24392$24396 g$g$t$24393$24397 g$g$t$24394$24398 g$g$t$24395$24399) ((case-lambda ((g$swap$24404) (dynamic-wind g$swap$24404 (case-lambda (() (g$chi-expr$15062 g$x$24384 '() '()))) g$swap$24404))) (case-lambda (() (begin ((case-lambda ((g$t$24406) (begin (g$g$t$24392$24396 g$g$t$24394$24398) (set! g$g$t$24394$24398 g$t$24406)))) (g$g$t$24392$24396)) ((case-lambda ((g$t$24408) (begin (g$g$t$24393$24397 g$g$t$24395$24399) (set! g$g$t$24395$24399 g$t$24408)))) (g$g$t$24393$24397)))))))) g$inv-collector$15110 g$vis-collector$15112 g$rtc$24385 g$vtc$24386)))) (g$mkstx$14491 g$x$24376 g$top-mark*$14421 (list g$rib$24382)) (g$make-collector$15108) (g$make-collector$15108)))) (g$make-top-rib$15106 g$subst$24380)))) (g$env-subst$15129 g$env$24377)))))) (set! g$eval$15147 (case-lambda ((g$x$24410 g$env$24411) (begin (if (g$env?$15127 g$env$24411) (void) (error 'eval '"not an environment" g$env$24411)) (call-with-values (case-lambda (() (g$expand$15145 g$x$24410 g$env$24411))) (case-lambda ((g$x$24414 g$invoke-req*$24415) (begin (for-each g$g$invoke-library$13816$14103 g$invoke-req*$24415) (eval-core (g$g$expanded->core$13595$13659 g$x$24414)))))))))) (set! g$library-expander$15149 (case-lambda ((g$x$24418) ((case-lambda ((g$build-visit-code$24420 g$visit!$24422) (begin (set! g$build-visit-code$24420 (case-lambda ((g$macro*$24432) (if (null? g$macro*$24432) (g$g$build-void$14337$14397) (g$g$build-sequence$14335$14398 '#f (map (case-lambda ((g$x$24434) ((case-lambda ((g$loc$24436 g$src$24437) (list 'set! g$loc$24436 g$src$24437))) (car g$x$24434) (cddr g$x$24434)))) g$macro*$24432)))))) (set! g$visit!$24422 (case-lambda ((g$macro*$24424) (for-each (case-lambda ((g$x$24426) ((case-lambda ((g$loc$24428 g$proc$24429) (set-symbol-value! g$loc$24428 g$proc$24429))) (car g$x$24426) (cadr g$x$24426)))) g$macro*$24424)))) (call-with-values (case-lambda (() (g$core-library-expander$15118 g$x$24418))) (case-lambda ((g$name$24440 g$ver$24441 g$imp*$24442 g$inv*$24443 g$vis*$24444 g$invoke-code$24445 g$macro*$24446 g$export-subst$24447 g$export-env$24448) ((case-lambda ((g$id$24458 g$name$24459 g$ver$24460 g$imp*$24461 g$vis*$24462 g$inv*$24463) (begin (g$g$install-library$13808$14107 g$id$24458 g$name$24459 g$ver$24460 g$imp*$24461 g$vis*$24462 g$inv*$24463 g$export-subst$24447 g$export-env$24448 (case-lambda (() (g$visit!$24422 g$macro*$24446))) (case-lambda (() (eval-core (g$g$expanded->core$13595$13659 g$invoke-code$24445)))) '#t) (values g$invoke-code$24445 (g$build-visit-code$24420 g$macro*$24446) g$export-subst$24447 g$export-env$24448)))) (gensym) g$name$24440 g$ver$24441 (map g$g$library-spec$13824$14099 g$imp*$24442) (map g$g$library-spec$13824$14099 g$vis*$24444) (map g$g$library-spec$13824$14099 g$inv*$24443)))))))) '#f '#f)))) (set! g$boot-library-expand$15151 (case-lambda ((g$x$24470) (call-with-values (case-lambda (() (g$library-expander$15149 g$x$24470))) (case-lambda ((g$invoke-code$24472 g$visit-code$24473 g$export-subst$24474 g$export-env$24475) (values g$invoke-code$24472 g$export-subst$24474 g$export-env$24475))))))) (set! g$rev-map-append$15153 (case-lambda ((g$f$24480 g$ls$24481 g$ac$24482) (if (null? g$ls$24481) g$ac$24482 (g$rev-map-append$15153 g$f$24480 (cdr g$ls$24481) (cons (g$f$24480 (car g$ls$24481)) g$ac$24482)))))) (set! g$build-exports$15155 (case-lambda ((g$lex*+loc*$24486 g$init*$24487) (g$g$build-sequence$14335$14398 '#f (cons (g$g$build-void$14337$14397) (g$rev-map-append$15153 (case-lambda ((g$x$24490) (list 'set! (cdr g$x$24490) (car g$x$24490)))) g$lex*+loc*$24486 g$init*$24487)))))) (set! g$make-export-subst$15157 (case-lambda ((g$int*$24492 g$ext*$24493 g$rib$24494) (map (case-lambda ((g$int$24498 g$ext$24499) ((case-lambda ((g$id$24502) ((case-lambda ((g$label$24504) ((case-lambda (() (begin (if g$label$24504 (void) (error 'expander '"cannot export unbound identifier" (g$strip$14533 g$id$24502 '()))) (cons g$ext$24499 g$label$24504))))))) (g$id->label$14537 g$id$24502)))) (g$mkstx$14491 g$int$24498 g$top-mark*$14421 (list g$rib$24494))))) g$int*$24492 g$ext*$24493)))) (set! g$make-export-env/macros$15159 (case-lambda ((g$r$24506) (letrec ((g$f$24508 (case-lambda ((g$r$24510 g$env$24511 g$global*$24512 g$macro*$24513) (if (null? g$r$24510) (values g$env$24511 g$global*$24512 g$macro*$24513) ((case-lambda ((g$x$24518) ((case-lambda ((g$label$24520 g$b$24521) ((case-lambda ((g$t$24524) (if (memv g$t$24524 '(lexical)) ((case-lambda ((g$loc$24529) (g$f$24508 (cdr g$r$24510) (cons (cons* g$label$24520 'global g$loc$24529) g$env$24511) (cons (cons (g$binding-value$14545 g$b$24521) g$loc$24529) g$global*$24512) g$macro*$24513))) (g$gen-global$14427 (g$binding-value$14545 g$b$24521))) (if (memv g$t$24524 '(local-macro)) ((case-lambda ((g$loc$24527) (g$f$24508 (cdr g$r$24510) (cons (cons* g$label$24520 'global-macro g$loc$24527) g$env$24511) g$global*$24512 (cons (cons g$loc$24527 (g$binding-value$14545 g$b$24521)) g$macro*$24513)))) (gensym)) (if (memv g$t$24524 '(local-macro!)) ((case-lambda ((g$loc$24525) (g$f$24508 (cdr g$r$24510) (cons (cons* g$label$24520 'global-macro! g$loc$24525) g$env$24511) g$global*$24512 (cons (cons g$loc$24525 (g$binding-value$14545 g$b$24521)) g$macro*$24513)))) (gensym)) (if (memv g$t$24524 '($rtd $module)) (g$f$24508 (cdr g$r$24510) (cons g$x$24518 g$env$24511) g$global*$24512 g$macro*$24513) (error 'expander '"BUG: do not know how to export" (g$binding-type$14543 g$b$24521) (g$binding-value$14545 g$b$24521)))))))) (g$binding-type$14543 g$b$24521)))) (car g$x$24518) (cdr g$x$24518)))) (car g$r$24510))))))) (g$f$24508 g$r$24506 '() '() '()))))) (set! g$generate-temporaries$15161 (case-lambda ((g$ls$24531) ((case-lambda ((g$t$24533) ((case-lambda ((g$ls/false$24535) (if (if g$ls/false$24535 (begin '#f (apply (case-lambda ((g$ls$24537) '#t)) g$ls/false$24535)) '#f) (apply (case-lambda ((g$ls$24539) (map (case-lambda ((g$x$24541) (g$make-stx$14465 (gensym 't) g$top-mark*$14421 '()))) g$ls$24539))) g$ls/false$24535) ((case-lambda ((g$t$24543) ((case-lambda ((g$ls/false$24545) (if (if g$ls/false$24545 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$24545)) '#f) (apply (case-lambda (() (error 'generate-temporaries '"not a list"))) g$ls/false$24545) (error 'expander '"invalid syntax" (g$strip$14533 g$t$24543 '()))))) ((case-lambda ((g$x$24547) '())) g$t$24543)))) g$t$24533)))) ((letrec ((g$f$24549 (case-lambda ((g$x$24551) (if (g$syntax-pair?$14501 g$x$24551) ((case-lambda ((g$cars/f$24553) (if g$cars/f$24553 (begin '#f ((case-lambda ((g$cdrs/f$24555) (if g$cdrs/f$24555 (begin '#f (map cons g$cars/f$24553 g$cdrs/f$24555)) '#f))) (g$f$24549 (g$syntax-cdr$14513 g$x$24551)))) '#f))) ((case-lambda ((g$x$24557) (list g$x$24557))) (g$syntax-car$14509 g$x$24551))) (if (g$syntax-null?$14505 g$x$24551) (list (begin 'ls '())) '#f)))))) g$f$24549) g$t$24533)))) g$ls$24531)))) (set! g$free-identifier=?$15163 (case-lambda ((g$x$24559 g$y$24560) (if (g$id?$14515 g$x$24559) (if (g$id?$14515 g$y$24560) (g$free-id=?$14523 g$x$24559 g$y$24560) (error 'free-identifier=? '"not an identifier" g$y$24560)) (error 'free-identifier=? '"not an identifier" g$x$24559))))) (set! g$bound-identifier=?$15165 (case-lambda ((g$x$24563 g$y$24564) (if (g$id?$14515 g$x$24563) (if (g$id?$14515 g$y$24564) (g$bound-id=?$14521 g$x$24563 g$y$24564) (error 'bound-identifier=? '"not an identifier" g$y$24564)) (error 'bound-identifier=? '"not an identifier" g$x$24563))))) (set! g$syntax-error$15167 (case-lambda ((g$x$24567 . g$args$24569) (begin (if (for-all string? g$args$24569) (void) (error 'syntax-error '"invalid argument" g$args$24569)) (error 'expander '"invalid syntax" (g$stx->datum$14535 g$x$24567) (apply string-append g$args$24569)))))) (set! g$identifier?$15169 (case-lambda ((g$x$24571) (g$id?$14515 g$x$24571)))) (set! g$datum->syntax$15171 (case-lambda ((g$id$24573 g$datum$24574) (if (g$id?$14515 g$id$24573) (g$datum->stx$14481 g$id$24573 g$datum$24574) (error 'datum->syntax '"not an identifier" g$id$24573))))) (set! g$syntax->datum$15173 (case-lambda ((g$x$24577) (g$stx->datum$14535 g$x$24577)))) (set! g$eval-r6rs-top-level$15175 (case-lambda ((g$x*$24579) (call-with-values (case-lambda (() (g$top-level-expander$15122 g$x*$24579))) (case-lambda ((g$lib*$24581 g$invoke-code$24582) (begin (for-each g$g$invoke-library$13816$14103 g$lib*$24581) (eval-core (g$g$expanded->core$13595$13659 g$invoke-code$24582))))))))) (set! g$interaction-library$15177 (g$g$make-parameter$13369$13585 '#f)) (set! g$interaction-sym->label$15179 (case-lambda ((g$sym$24585) ((case-lambda ((g$t$24587) (if g$t$24587 ((case-lambda ((g$lib$24589) ((case-lambda ((g$t$24591) (if g$t$24591 (cdr g$t$24591) ((case-lambda ((g$subst$24593) ((case-lambda ((g$t$24595) (if g$t$24595 ((case-lambda ((g$sym/lab$24597) ((case-lambda ((g$label$24599) (begin (g$g$extend-library-subst!$13810$14106 g$lib$24589 g$sym$24585 g$label$24599) g$label$24599))) (cdr g$sym/lab$24597)))) g$t$24595) ((case-lambda ((g$label$24601) (begin (g$g$extend-library-subst!$13810$14106 g$lib$24589 g$sym$24585 g$label$24601) (g$g$extend-library-env!$13812$14105 g$lib$24589 g$label$24601 (cons 'global (cons g$lib$24589 (g$gen-global$14427 g$sym$24585)))) g$label$24601))) (g$gen-label$14429 g$sym$24585))))) (assq g$sym$24585 g$subst$24593)))) (if (g$g$library-exists?$13800$14111 '(ikarus)) (g$g$library-subst$13748$14137 (g$g$find-library-by-name$13798$14112 '(ikarus))) '()))))) (assq g$sym$24585 (g$g$library-subst$13748$14137 g$lib$24589))))) g$t$24587) '#f))) (g$interaction-library$15177))))) (set! g$eval-top-level$15181 (case-lambda ((g$x$24603) ((case-lambda ((g$eval-binding$24605) (begin (set! g$eval-binding$24605 (case-lambda ((g$x$24607) ((case-lambda ((g$loc$24609 g$expr$24610) (if g$loc$24609 (set-symbol-value! g$loc$24609 (eval-core (g$g$expanded->core$13595$13659 g$expr$24610))) (eval-core (g$g$expanded->core$13595$13659 g$expr$24610))))) (car g$x$24607) (cdr g$x$24607))))) ((case-lambda ((g$rtc$24613 g$vtc$24614) ((case-lambda ((g$init*$24617) (begin (for-each g$g$invoke-library$13816$14103 (g$rtc$24613)) (if (null? g$init*$24617) (void) (begin (for-each g$eval-binding$24605 (reverse (cdr g$init*$24617))) (g$eval-binding$24605 (car g$init*$24617))))))) ((case-lambda ((g$g$t$24619$24625 g$g$t$24620$24626 g$g$t$24621$24627 g$g$t$24622$24628 g$g$t$24623$24629 g$g$t$24624$24630) ((case-lambda ((g$swap$24637) (dynamic-wind g$swap$24637 (case-lambda (() (g$chi-top*$15094 (list (g$mkstx$14491 g$x$24603 g$top-mark*$14421 '())) '()))) g$swap$24637))) (case-lambda (() (begin ((case-lambda ((g$t$24639) (begin (g$g$t$24619$24625 g$g$t$24622$24628) (set! g$g$t$24622$24628 g$t$24639)))) (g$g$t$24619$24625)) ((case-lambda ((g$t$24641) (begin (g$g$t$24620$24626 g$g$t$24623$24629) (set! g$g$t$24623$24629 g$t$24641)))) (g$g$t$24620$24626)) ((case-lambda ((g$t$24643) (begin (g$g$t$24621$24627 g$g$t$24624$24630) (set! g$g$t$24624$24630 g$t$24643)))) (g$g$t$24621$24627)))))))) g$inv-collector$15110 g$vis-collector$15112 g$interaction-library$15177 g$rtc$24613 g$vtc$24614 (g$g$find-library-by-name$13798$14112 '(ikarus interaction)))))) (g$make-collector$15108) (g$make-collector$15108))))) '#f)))) (begin (set! g$g$eval-top-level$15181$24645 g$eval-top-level$15181) (set! g$g$interaction-sym->label$15179$24646 g$interaction-sym->label$15179) (set! g$g$interaction-library$15177$24647 g$interaction-library$15177) (set! g$g$eval-r6rs-top-level$15175$24648 g$eval-r6rs-top-level$15175) (set! g$g$syntax->datum$15173$24649 g$syntax->datum$15173) (set! g$g$datum->syntax$15171$24650 g$datum->syntax$15171) (set! g$g$identifier?$15169$24651 g$identifier?$15169) (set! g$g$syntax-error$15167$24652 g$syntax-error$15167) (set! g$g$bound-identifier=?$15165$24653 g$bound-identifier=?$15165) (set! g$g$free-identifier=?$15163$24654 g$free-identifier=?$15163) (set! g$g$generate-temporaries$15161$24655 g$generate-temporaries$15161) (set! g$g$make-export-env/macros$15159$24656 g$make-export-env/macros$15159) (set! g$g$make-export-subst$15157$24657 g$make-export-subst$15157) (set! g$g$build-exports$15155$24658 g$build-exports$15155) (set! g$g$rev-map-append$15153$24659 g$rev-map-append$15153) (set! g$g$boot-library-expand$15151$24660 g$boot-library-expand$15151) (set! g$g$library-expander$15149$24661 g$library-expander$15149) (set! g$g$eval$15147$24662 g$eval$15147) (set! g$g$expand$15145$24663 g$expand$15145) (set! g$g$scheme-report-environment$15143$24664 g$scheme-report-environment$15143) (set! g$g$null-environment$15141$24665 g$null-environment$15141) (set! g$g$environment$15139$24666 g$environment$15139) (set! g$g$environment?$15137$24667 g$environment?$15137) (set! g$g$set-env-imp*!$15135$24668 g$set-env-imp*!$15135) (set! g$g$set-env-subst!$15133$24669 g$set-env-subst!$15133) (set! g$g$env-imp*$15131$24670 g$env-imp*$15131) (set! g$g$env-subst$15129$24671 g$env-subst$15129) (set! g$g$env?$15127$24672 g$env?$15127) (set! g$g$make-env$15125$24673 g$make-env$15125) (set! g$g$top-level-expander$15122$24674 g$top-level-expander$15122) (set! g$g$parse-top-level-program$15120$24675 g$parse-top-level-program$15120) (set! g$g$core-library-expander$15118$24676 g$core-library-expander$15118) (set! g$g$library-body-expander$15116$24677 g$library-body-expander$15116) (set! g$g$chi-library-internal$15114$24678 g$chi-library-internal$15114) (set! g$g$vis-collector$15112$24679 g$vis-collector$15112) (set! g$g$inv-collector$15110$24680 g$inv-collector$15110) (set! g$g$make-collector$15108$24681 g$make-collector$15108) (set! g$g$make-top-rib$15106$24682 g$make-top-rib$15106) (set! g$g$parse-import-spec*$15104$24683 g$parse-import-spec*$15104) (set! g$g$parse-library$15102$24684 g$parse-library$15102) (set! g$g$parse-library-name$15100$24685 g$parse-library-name$15100) (set! g$g$parse-exports$15098$24686 g$parse-exports$15098) (set! g$g$expand-transformer$15096$24687 g$expand-transformer$15096) (set! g$g$chi-top*$15094$24688 g$chi-top*$15094) (set! g$g$chi-top-set!$15092$24689 g$chi-top-set!$15092) (set! g$g$gen-global-var-binding$15090$24690 g$gen-global-var-binding$15090) (set! g$g$gen-global-macro-binding$15088$24691 g$gen-global-macro-binding$15088) (set! g$g$set-global-macro-binding!$15086$24692 g$set-global-macro-binding!$15086) (set! g$g$chi-body*$15084$24693 g$chi-body*$15084) (set! g$g$chi-internal-module$15082$24694 g$chi-internal-module$15082) (set! g$g$parse-module$15080$24695 g$parse-module$15080) (set! g$g$chi-internal$15078$24696 g$chi-internal$15078) (set! g$g$find-dups$15076$24697 g$find-dups$15076) (set! g$g$find-bound=?$15074$24698 g$find-bound=?$15074) (set! g$g$chi-rhs*$15072$24699 g$chi-rhs*$15072) (set! g$g$chi-rhs$15070$24700 g$chi-rhs$15070) (set! g$g$chi-lambda-clause*$15068$24701 g$chi-lambda-clause*$15068) (set! g$g$chi-lambda-clause$15066$24702 g$chi-lambda-clause$15066) (set! g$g$chi-set!$15064$24703 g$chi-set!$15064) (set! g$g$chi-expr$15062$24704 g$chi-expr$15062) (set! g$g$chi-application$15060$24705 g$chi-application$15060) (set! g$g$chi-expr*$15058$24706 g$chi-expr*$15058) (set! g$g$chi-global-macro$15056$24707 g$chi-global-macro$15056) (set! g$g$chi-local-macro$15054$24708 g$chi-local-macro$15054) (set! g$g$chi-macro$15052$24709 g$chi-macro$15052) (set! g$g$local-macro-transformer$15050$24710 g$local-macro-transformer$15050) (set! g$g$macro-transformer$15048$24711 g$macro-transformer$15048) (set! g$g$symbol-macro$15046$24712 g$symbol-macro$15046) (set! g$g$file-options-macro$15044$24713 g$file-options-macro$15044) (set! g$g$core-macro-transformer$15042$24714 g$core-macro-transformer$15042) (set! g$g$syntax-transformer$15040$24715 g$syntax-transformer$15040) (set! g$g$syntax-case-transformer$15038$24716 g$syntax-case-transformer$15038) (set! g$g$ellipsis?$15036$24717 g$ellipsis?$15036) (set! g$g$syntax-dispatch$15034$24718 g$syntax-dispatch$15034) (set! g$g$convert-pattern$15032$24719 g$convert-pattern$15032) (set! g$g$foreign-call-transformer$15030$24720 g$foreign-call-transformer$15030) (set! g$g$parameterize-transformer$15028$24721 g$parameterize-transformer$15028) (set! g$g$incorrect-usage-macro$15026$24722 g$incorrect-usage-macro$15026) (set! g$g$define-condition-type-macro$15024$24723 g$define-condition-type-macro$15024) (set! g$g$define-record-type-macro$15022$24724 g$define-record-type-macro$15022) (set! g$g$define-struct-macro$15020$24725 g$define-struct-macro$15020) (set! g$g$quasisyntax-macro$15018$24726 g$quasisyntax-macro$15018) (set! g$g$quasiquote-macro$15016$24727 g$quasiquote-macro$15016) (set! g$g$syntax-rules-macro$15014$24728 g$syntax-rules-macro$15014) (set! g$g$include-macro$15012$24729 g$include-macro$15012) (set! g$g$cond-macro$15010$24730 g$cond-macro$15010) (set! g$g$and-macro$15008$24731 g$and-macro$15008) (set! g$g$or-macro$15006$24732 g$or-macro$15006) (set! g$g$let*-macro$15004$24733 g$let*-macro$15004) (set! g$g$do-macro$15002$24734 g$do-macro$15002) (set! g$g$identifier-syntax-macro$15000$24735 g$identifier-syntax-macro$15000) (set! g$g$endianness-macro$14998$24736 g$endianness-macro$14998) (set! g$g$assert-macro$14996$24737 g$assert-macro$14996) (set! g$g$delay-macro$14994$24738 g$delay-macro$14994) (set! g$g$time-macro$14992$24739 g$time-macro$14992) (set! g$g$define-enumeration-macro$14990$24740 g$define-enumeration-macro$14990) (set! g$g$guard-macro$14988$24741 g$guard-macro$14988) (set! g$g$trace-define-macro$14986$24742 g$trace-define-macro$14986) (set! g$g$trace-lambda-macro$14984$24743 g$trace-lambda-macro$14984) (set! g$g$let-macro$14982$24744 g$let-macro$14982) (set! g$g$with-syntax-macro$14980$24745 g$with-syntax-macro$14980) (set! g$g$bless$14978$24746 g$bless$14978) (set! g$g$lambda-transformer$14976$24747 g$lambda-transformer$14976) (set! g$g$case-lambda-transformer$14974$24748 g$case-lambda-transformer$14974) (set! g$g$quote-transformer$14972$24749 g$quote-transformer$14972) (set! g$g$case-transformer$14970$24750 g$case-transformer$14970) (set! g$g$if-transformer$14968$24751 g$if-transformer$14968) (set! g$g$unless-transformer$14966$24752 g$unless-transformer$14966) (set! g$g$when-transformer$14964$24753 g$when-transformer$14964) (set! g$g$record-constructor-descriptor-transformer$14962$24754 g$record-constructor-descriptor-transformer$14962) (set! g$g$record-type-descriptor-transformer$14960$24755 g$record-type-descriptor-transformer$14960) (set! g$g$type-descriptor-transformer$14958$24756 g$type-descriptor-transformer$14958) (set! g$g$letrec*-transformer$14956$24757 g$letrec*-transformer$14956) (set! g$g$letrec-transformer$14954$24758 g$letrec-transformer$14954) (set! g$g$letrec-helper$14952$24759 g$letrec-helper$14952) (set! g$g$let-values-transformer$14950$24760 g$let-values-transformer$14950) (set! g$g$add-lexicals$14948$24761 g$add-lexicals$14948) (set! g$g$add-lexical$14946$24762 g$add-lexical$14946) (set! g$g$scheme-stx$14944$24763 g$scheme-stx$14944) (set! g$g$parse-define-syntax$14942$24764 g$parse-define-syntax$14942) (set! g$g$parse-define$14940$24765 g$parse-define$14940) (set! g$g$make-eval-transformer$14578$24767 g$make-eval-transformer$14578) (set! g$g$make-variable-transformer$14576$24768 g$make-variable-transformer$14576) (set! g$g$sanitize-binding$14574$24769 g$sanitize-binding$14574) (set! g$g$syntax-type$14547$24771 g$syntax-type$14547) (set! g$g$binding-value$14545$24772 g$binding-value$14545) (set! g$g$binding-type$14543$24773 g$binding-type$14543) (set! g$g$make-binding$14541$24774 g$make-binding$14541) (set! g$g$label->binding$14539$24775 g$label->binding$14539) (set! g$g$id->label$14537$24776 g$id->label$14537) (set! g$g$stx->datum$14535$24777 g$stx->datum$14535) (set! g$g$strip$14533$24778 g$strip$14533) (set! g$g$self-evaluating?$14531$24779 g$self-evaluating?$14531) (set! g$g$bound-id-member?$14529$24780 g$bound-id-member?$14529) (set! g$g$distinct-bound-ids?$14527$24781 g$distinct-bound-ids?$14527) (set! g$g$valid-bound-ids?$14525$24782 g$valid-bound-ids?$14525) (set! g$g$free-id=?$14523$24783 g$free-id=?$14523) (set! g$g$bound-id=?$14521$24784 g$bound-id=?$14521) (set! g$g$same-marks?$14519$24785 g$same-marks?$14519) (set! g$g$id->sym$14517$24786 g$id->sym$14517) (set! g$g$id?$14515$24787 g$id?$14515) (set! g$g$syntax-cdr$14513$24788 g$syntax-cdr$14513) (set! g$g$syntax->list$14511$24789 g$syntax->list$14511) (set! g$g$syntax-car$14509$24790 g$syntax-car$14509) (set! g$g$syntax-list?$14507$24791 g$syntax-list?$14507) (set! g$g$syntax-null?$14505$24792 g$syntax-null?$14505) (set! g$g$syntax-vector?$14503$24793 g$syntax-vector?$14503) (set! g$g$syntax-pair?$14501$24794 g$syntax-pair?$14501) (set! g$g$syntax-vector->list$14499$24795 g$syntax-vector->list$14499) (set! g$g$syntax-kind?$14497$24796 g$syntax-kind?$14497) (set! g$g$add-subst$14495$24797 g$add-subst$14495) (set! g$g$add-mark$14493$24798 g$add-mark$14493) (set! g$g$mkstx$14491$24799 g$mkstx$14491) (set! g$g$join-wraps$14489$24800 g$join-wraps$14489) (set! g$g$anti-mark?$14487$24801 g$anti-mark?$14487) (set! g$g$anti-mark$14485$24802 g$anti-mark$14485) (set! g$g$gen-mark$14483$24803 g$gen-mark$14483) (set! g$g$datum->stx$14481$24804 g$datum->stx$14481) (set! g$g$set-stx-subst*!$14479$24805 g$set-stx-subst*!$14479) (set! g$g$set-stx-mark*!$14477$24806 g$set-stx-mark*!$14477) (set! g$g$set-stx-expr!$14475$24807 g$set-stx-expr!$14475) (set! g$g$stx-subst*$14473$24808 g$stx-subst*$14473) (set! g$g$stx-mark*$14471$24809 g$stx-mark*$14471) (set! g$g$stx-expr$14469$24810 g$stx-expr$14469) (set! g$g$stx?$14467$24811 g$stx?$14467) (set! g$g$make-stx$14465$24812 g$make-stx$14465) (set! g$g$make-full-rib$14462$24813 g$make-full-rib$14462) (set! g$g$increment-rib-frequency!$14460$24814 g$increment-rib-frequency!$14460) (set! g$g$unseal-rib!$14458$24815 g$unseal-rib!$14458) (set! g$g$seal-rib!$14456$24816 g$seal-rib!$14456) (set! g$g$extend-rib!$14454$24817 g$extend-rib!$14454) (set! g$g$make-empty-rib$14452$24818 g$make-empty-rib$14452) (set! g$g$set-rib-sealed/freq!$14450$24819 g$set-rib-sealed/freq!$14450) (set! g$g$set-rib-label*!$14448$24820 g$set-rib-label*!$14448) (set! g$g$set-rib-mark**!$14446$24821 g$set-rib-mark**!$14446) (set! g$g$set-rib-sym*!$14444$24822 g$set-rib-sym*!$14444) (set! g$g$rib-sealed/freq$14442$24823 g$rib-sealed/freq$14442) (set! g$g$rib-label*$14440$24824 g$rib-label*$14440) (set! g$g$rib-mark**$14438$24825 g$rib-mark**$14438) (set! g$g$rib-sym*$14436$24826 g$rib-sym*$14436) (set! g$g$rib?$14434$24827 g$rib?$14434) (set! g$g$make-rib$14432$24828 g$make-rib$14432) (set! g$g$gen-label$14429$24829 g$gen-label$14429) (set! g$g$gen-global$14427$24830 g$gen-global$14427) (set! g$g$gen-lexical$14425$24831 g$gen-lexical$14425) (set! g$g$top-marked?$14423$24832 g$top-marked?$14423) (set! g$g$top-mark*$14421$24833 g$top-mark*$14421) (set! g$g$set-union$14416$24835 g$set-union$14416) (set! g$g$set-cons$14414$24836 g$set-cons$14414) (g$g$current-library-expander$13792$14115 g$library-expander$15149))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)

(begin (g$g$current-primitive-locations$13587$13663 (case-lambda ((g$x$25601) ((case-lambda ((g$t$25603) (if g$t$25603 (cdr g$t$25603) '#f))) (assq g$x$25601 '((syntax-error . g$g$syntax-error$15167$24652) (syntax-dispatch . g$g$syntax-dispatch$15034$24718) (make-variable-transformer . g$g$make-variable-transformer$14576$24768) (identifier? . g$g$identifier?$15169$24651) (generate-temporaries . g$g$generate-temporaries$15161$24655) (free-identifier=? . g$g$free-identifier=?$15163$24654) (syntax->datum . g$g$syntax->datum$15173$24649) (datum->syntax . g$g$datum->syntax$15171$24650) (bound-identifier=? . g$g$bound-identifier=?$15165$24653) (null-environment . g$g$null-environment$15141$24665) (eval . g$g$eval$15147$24662) (environment . g$g$environment$15139$24666))))))) (g$g$install-library$13808$14107 'g$25567 '(ikarus interaction) '() '() '() '() '() '() values values '#t) (g$g$install-library$13808$14107 'g$25568 '(ironscheme) '() '() '() '() '((eval-r6rs-top-level-hook . g$25566) (call-with-output-file . g$25484) (call-with-input-file . g$25483) (write-char . g$25482) (write . g$25481) (with-output-to-file . g$25480) (with-input-from-file . g$25479) (read-char . g$25478) (read . g$25477) (peek-char . g$25476) (open-output-file . g$25475) (open-input-file . g$25474) (newline . g$25473) (display . g$25472) (close-output-port . g$25471) (close-input-port . g$25470) (eof-object? . g$25469) (eof-object . g$25468) (current-error-port . g$25467) (current-output-port . g$25466) (current-input-port . g$25465) (output-port? . g$25464) (input-port? . g$25463) (make-i/o-write-error . g$25427) (make-i/o-read-error . g$25426) (make-i/o-port-error . g$25425) (make-i/o-invalid-position-error . g$25424) (make-i/o-filename-error . g$25423) (make-i/o-file-protection-error . g$25422) (make-i/o-file-is-read-only-error . g$25421) (make-i/o-file-does-not-exist-error . g$25420) (make-i/o-file-already-exists-error . g$25419) (make-i/o-error . g$25418) (i/o-write-error? . g$25406) (i/o-read-error? . g$25405) (i/o-port-error? . g$25404) (i/o-invalid-position-error? . g$25403) (i/o-filename-error? . g$25402) (i/o-file-protection-error? . g$25401) (i/o-file-is-read-only-error? . g$25400) (i/o-file-does-not-exist-error? . g$25399) (i/o-file-already-exists-error? . g$25398) (i/o-error? . g$25397) (i/o-error-port . g$25396) (i/o-error-filename . g$25395) (&i/o-port . g$24948) (&i/o-file-does-not-exist . g$24947) (&i/o-file-already-exists . g$24946) (&i/o-file-is-read-only . g$24945) (&i/o-file-protection . g$24944) (&i/o-filename . g$24943) (&i/o-invalid-position . g$24942) (&i/o-write . g$24941) (&i/o-read . g$24940) (&i/o . g$24939)) '() values values '#t) (g$g$install-library$13808$14107 'g$25569 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . g$24903) (unquote . g$24902) (delay . g$24895) (or . g$24893) (and . g$24892) (do . g$24891) (cond . g$24890) (let* . g$24889) (let . g$24888) (quasiquote . g$24884) (syntax-rules . g$24883) (case . g$24877) (if . g$24873) (letrec . g$24871) (lambda . g$24868) (quote . g$24865) (letrec-syntax . g$24863) (let-syntax . g$24862) (set! . g$24861) (begin . g$24859) (define-syntax . g$24857) (define . g$24856)) '() values values '#t) (g$g$install-library$13808$14107 'g$25570 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g$25548) (string-ci>=? . g$25547) (string-ci=? . g$25546) (string-ci<? . g$25545) (string-ci<=? . g$25544) (char-whitespace? . g$25543) (char-upper-case? . g$25542) (char-numeric? . g$25540) (char-lower-case? . g$25539) (char-upcase . g$25537) (char-downcase . g$25534) (char-ci>? . g$25533) (char-ci>=? . g$25532) (char-ci=? . g$25531) (char-ci<? . g$25530) (char-ci<=? . g$25529) (char-alphabetic? . g$25528) (call-with-output-file . g$25484) (call-with-input-file . g$25483) (write-char . g$25482) (write . g$25481) (with-output-to-file . g$25480) (with-input-from-file . g$25479) (read-char . g$25478) (read . g$25477) (peek-char . g$25476) (open-output-file . g$25475) (open-input-file . g$25474) (newline . g$25473) (display . g$25472) (close-output-port . g$25471) (close-input-port . g$25470) (eof-object . g$25468) (current-output-port . g$25466) (current-input-port . g$25465) (output-port? . g$25464) (input-port? . g$25463) (scheme-report-environment . g$25378) (quotient . g$25377) (null-environment . g$15142) (remainder . g$25376) (modulo . g$25375) (inexact->exact . g$25374) (force . g$25373) (exact->inexact . g$25372) (string-fill! . g$25369) (string-set! . g$25368) (set-cdr! . g$25367) (set-car! . g$25366) (memv . g$25360) (memq . g$25359) (member . g$25357) (assv . g$25349) (assq . g$25348) (assoc . g$25346) (eval . g$15148) (zero? . g$25115) (vector? . g$25114) (vector-set! . g$25113) (vector-ref . g$25112) (vector-length . g$25110) (vector-fill! . g$25108) (vector->list . g$25107) (vector . g$25106) (values . g$25105) (truncate . g$25104) (tan . g$25103) (symbol? . g$25102) (symbol->string . g$25100) (substring . g$25099) (string? . g$25098) (string>? . g$25097) (string>=? . g$25096) (string=? . g$25095) (string<? . g$25094) (string<=? . g$25093) (string-ref . g$25092) (string-length . g$25091) (string-copy . g$25089) (string-append . g$25088) (string->symbol . g$25087) (string->number . g$25086) (string->list . g$25085) (string . g$25084) (sqrt . g$25083) (sin . g$25082) (round . g$25081) (reverse . g$25080) (real? . g$25079) (real-part . g$25077) (rationalize . g$25076) (rational? . g$25075) (procedure? . g$25073) (positive? . g$25072) (pair? . g$25071) (odd? . g$25070) (numerator . g$25069) (number? . g$25068) (number->string . g$25067) (not . g$25065) (negative? . g$25064) (min . g$25062) (max . g$25061) (map . g$25060) (make-vector . g$25059) (make-string . g$25058) (make-rectangular . g$25057) (make-polar . g$25056) (magnitude . g$25055) (log . g$25054) (list? . g$25053) (list-tail . g$25052) (list-ref . g$25051) (list->vector . g$25050) (list->string . g$25049) (list . g$25048) (length . g$25047) (lcm . g$25046) (integer? . g$25045) (integer->char . g$25043) (inexact? . g$25041) (imag-part . g$25039) (gcd . g$25038) (for-each . g$25037) (floor . g$25036) (expt . g$25034) (exp . g$25033) (exact? . g$25032) (even? . g$25029) (eqv? . g$25027) (equal? . g$25026) (eq? . g$25025) (dynamic-wind . g$25024) (denominator . g$25017) (cos . g$25016) (cons . g$25015) (complex? . g$25014) (char? . g$25013) (char>? . g$25012) (char>=? . g$25011) (char=? . g$25010) (char<? . g$25009) (char<=? . g$25008) (char->integer . g$25007) (ceiling . g$25006) (call-with-values . g$25005) (call-with-current-continuation . g$25003) (cddddr . g$25002) (cdddar . g$25001) (cddadr . g$25000) (cddaar . g$24999) (cdaddr . g$24998) (cdadar . g$24997) (cdaadr . g$24996) (cdaaar . g$24995) (cadddr . g$24994) (caddar . g$24993) (cadadr . g$24992) (cadaar . g$24991) (caaddr . g$24990) (caadar . g$24989) (caaadr . g$24988) (caaaar . g$24987) (cdddr . g$24986) (cddar . g$24985) (cdadr . g$24984) (cdaar . g$24983) (caddr . g$24982) (cadar . g$24981) (caadr . g$24980) (caaar . g$24979) (cddr . g$24978) (cdar . g$24977) (cadr . g$24976) (caar . g$24975) (cdr . g$24974) (car . g$24973) (boolean? . g$24972) (atan . g$24970) (asin . g$24968) (apply . g$24967) (append . g$24966) (angle . g$24965) (acos . g$24964) (abs . g$24963) (/ . g$24962) (* . g$24961) (- . g$24960) (+ . g$24959) (>= . g$24958) (> . g$24957) (= . g$24956) (<= . g$24955) (< . g$24954) (unquote-splicing . g$24903) (unquote . g$24902) (delay . g$24895) (or . g$24893) (and . g$24892) (do . g$24891) (cond . g$24890) (let* . g$24889) (let . g$24888) (quasiquote . g$24884) (syntax-rules . g$24883) (case . g$24877) (if . g$24873) (letrec . g$24871) (lambda . g$24868) (quote . g$24865) (letrec-syntax . g$24863) (let-syntax . g$24862) (set! . g$24861) (begin . g$24859) (define-syntax . g$24857) (define . g$24856)) '() values values '#t) (g$g$install-library$13808$14107 'g$25571 '(psyntax modules) '() '() '() '() '((module . g$24858)) '() values values '#t) (g$g$install-library$13808$14107 'g$25572 '(chez parameters) '() '() '() '() '() '() values values '#t) (g$g$install-library$13808$14107 'g$25573 '(rnrs) '(6) '() '() '() '((string-upcase . g$25556) (string-titlecase . g$25555) (string-normalize-nfkd . g$25554) (string-normalize-nfkc . g$25553) (string-normalize-nfd . g$25552) (string-normalize-nfc . g$25551) (string-foldcase . g$25550) (string-downcase . g$25549) (string-ci>? . g$25548) (string-ci>=? . g$25547) (string-ci=? . g$25546) (string-ci<? . g$25545) (string-ci<=? . g$25544) (char-whitespace? . g$25543) (char-upper-case? . g$25542) (char-title-case? . g$25541) (char-numeric? . g$25540) (char-lower-case? . g$25539) (char-general-category . g$25538) (char-upcase . g$25537) (char-titlecase . g$25536) (char-foldcase . g$25535) (char-downcase . g$25534) (char-ci>? . g$25533) (char-ci>=? . g$25532) (char-ci=? . g$25531) (char-ci<? . g$25530) (char-ci<=? . g$25529) (char-alphabetic? . g$25528) (make-variable-transformer . g$14577) (identifier? . g$15170) (generate-temporaries . g$15162) (free-identifier=? . g$15164) (syntax->datum . g$15174) (datum->syntax . g$15172) (bound-identifier=? . g$15166) (record-type-descriptor? . g$25527) (record-predicate . g$25526) (record-mutator . g$25525) (record-constructor . g$25524) (record-accessor . g$25523) (make-record-type-descriptor . g$25522) (make-record-constructor-descriptor . g$25521) (record? . g$25520) (record-type-uid . g$25519) (record-type-sealed? . g$25518) (record-type-parent . g$25517) (record-type-opaque? . g$25516) (record-type-name . g$25515) (record-type-generative? . g$25514) (record-type-field-names . g$25513) (record-rtd . g$25512) (record-field-mutable? . g$25511) (delete-file . g$25510) (file-exists? . g$25509) (vector-sort! . g$25508) (vector-sort . g$25507) (list-sort . g$25506) (symbol-hash . g$25505) (string-ci-hash . g$25504) (string-hash . g$25503) (equal-hash . g$25502) (hashtable-equivalence-function . g$25501) (make-hashtable . g$25500) (hashtable-hash-function . g$25499) (make-eqv-hashtable . g$25498) (make-eq-hashtable . g$25497) (hashtable? . g$25496) (hashtable-update! . g$25495) (hashtable-size . g$25494) (hashtable-set! . g$25493) (hashtable-ref . g$25492) (hashtable-mutable? . g$25491) (hashtable-keys . g$25490) (hashtable-entries . g$25489) (hashtable-delete! . g$25488) (hashtable-copy . g$25487) (hashtable-contains? . g$25486) (hashtable-clear! . g$25485) (call-with-output-file . g$25484) (call-with-input-file . g$25483) (write-char . g$25482) (write . g$25481) (with-output-to-file . g$25480) (with-input-from-file . g$25479) (read-char . g$25478) (read . g$25477) (peek-char . g$25476) (open-output-file . g$25475) (open-input-file . g$25474) (newline . g$25473) (display . g$25472) (close-output-port . g$25471) (close-input-port . g$25470) (eof-object? . g$25469) (eof-object . g$25468) (current-error-port . g$25467) (current-output-port . g$25466) (current-input-port . g$25465) (output-port? . g$25464) (input-port? . g$25463) (utf-8-codec . g$25462) (utf-16-codec . g$25461) (transcoder-error-handling-mode . g$25460) (transcoder-eol-style . g$25459) (transcoder-codec . g$25458) (transcoded-port . g$25457) (textual-port? . g$25456) (string->bytevector . g$25455) (standard-output-port . g$25454) (standard-input-port . g$25453) (standard-error-port . g$25452) (set-port-position! . g$25451) (put-u8 . g$25450) (put-string . g$25449) (put-datum . g$25448) (put-char . g$25447) (put-bytevector . g$25446) (port? . g$25445) (port-transcoder . g$25444) (port-position . g$25443) (port-has-set-port-position!? . g$25442) (port-has-port-position? . g$25441) (port-eof? . g$25440) (output-port-buffer-mode . g$25439) (open-string-output-port . g$25438) (open-string-input-port . g$25437) (open-file-output-port . g$25436) (open-file-input/output-port . g$25435) (open-file-input-port . g$25434) (open-bytevector-output-port . g$25433) (open-bytevector-input-port . g$25432) (native-transcoder . g$25431) (native-eol-style . g$25430) (make-transcoder . g$25429) (latin-1-codec . g$25428) (make-i/o-write-error . g$25427) (make-i/o-read-error . g$25426) (make-i/o-port-error . g$25425) (make-i/o-invalid-position-error . g$25424) (make-i/o-filename-error . g$25423) (make-i/o-file-protection-error . g$25422) (make-i/o-file-is-read-only-error . g$25421) (make-i/o-file-does-not-exist-error . g$25420) (make-i/o-file-already-exists-error . g$25419) (make-i/o-error . g$25418) (make-i/o-encoding-error . g$25417) (make-i/o-decoding-error . g$25416) (make-custom-textual-output-port . g$25415) (make-custom-textual-input/output-port . g$25414) (make-custom-textual-input-port . g$25413) (make-custom-binary-output-port . g$25412) (make-custom-binary-input/output-port . g$25411) (make-custom-binary-input-port . g$25410) (make-bytevector . g$25409) (lookahead-u8 . g$25408) (lookahead-char . g$25407) (i/o-write-error? . g$25406) (i/o-read-error? . g$25405) (i/o-port-error? . g$25404) (i/o-invalid-position-error? . g$25403) (i/o-filename-error? . g$25402) (i/o-file-protection-error? . g$25401) (i/o-file-is-read-only-error? . g$25400) (i/o-file-does-not-exist-error? . g$25399) (i/o-file-already-exists-error? . g$25398) (i/o-error? . g$25397) (i/o-error-port . g$25396) (i/o-error-filename . g$25395) (i/o-encoding-error? . g$25394) (i/o-encoding-error-char . g$25393) (i/o-decoding-error? . g$25392) (get-u8 . g$25391) (get-string-n! . g$25390) (get-string-n . g$25389) (get-string-all . g$25388) (get-line . g$25387) (get-datum . g$25386) (get-char . g$25385) (get-bytevector-some . g$25384) (get-bytevector-n! . g$25383) (get-bytevector-n . g$25382) (get-bytevector-all . g$25381) (flush-output-port . g$25380) (close-port . g$25379) (exit . g$25371) (command-line . g$25370) (remove . g$25365) (remv . g$25364) (remp . g$25363) (remq . g$25362) (partition . g$25361) (memv . g$25360) (memq . g$25359) (memp . g$25358) (member . g$25357) (exists . g$25356) (for-all . g$25355) (fold-right . g$25354) (fold-left . g$25353) (find . g$25352) (filter . g$25351) (cons* . g$25350) (assv . g$25349) (assq . g$25348) (assp . g$25347) (assoc . g$25346) (call-with-string-output-port . g$25345) (call-with-port . g$25344) (call-with-bytevector-output-port . g$25343) (bytevector->string . g$25342) (buffer-mode? . g$25341) (binary-port? . g$25340) (with-exception-handler . g$25339) (raise-continuable . g$25338) (raise . g$25337) (make-enumeration . g$25336) (enum-set=? . g$25335) (enum-set-universe . g$25334) (enum-set-union . g$25333) (enum-set-subset? . g$25332) (enum-set-projection . g$25331) (enum-set-member? . g$25330) (enum-set-intersection . g$25329) (enum-set-indexer . g$25328) (enum-set-difference . g$25327) (enum-set-constructor . g$25326) (enum-set-complement . g$25325) (enum-set->list . g$25324) (who-condition? . g$25323) (warning? . g$25322) (violation? . g$25321) (undefined-violation? . g$25320) (syntax-violation? . g$25319) (syntax-violation-subform . g$25318) (syntax-violation-form . g$25317) (syntax-violation . g$25316) (simple-conditions . g$25315) (serious-condition? . g$25314) (non-continuable-violation? . g$25313) (&non-continuable . g$25312) (message-condition? . g$25311) (make-who-condition . g$25310) (make-warning . g$25309) (make-violation . g$25308) (make-undefined-violation . g$25307) (make-syntax-violation . g$25306) (make-serious-condition . g$25305) (make-non-continuable-violation . g$25304) (make-message-condition . g$25303) (make-lexical-violation . g$25302) (make-irritants-condition . g$25301) (make-implementation-restriction-violation . g$25300) (make-error . g$25299) (make-assertion-violation . g$25298) (lexical-violation? . g$25297) (irritants-condition? . g$25296) (implementation-restriction-violation? . g$25295) (&implementation-restriction . g$25294) (error? . g$25293) (condition-who . g$25292) (condition-predicate . g$25291) (condition-message . g$25290) (condition-irritants . g$25289) (condition-accessor . g$25288) (condition . g$25287) (assertion-violation? . g$25286) (condition? . g$25285) (utf32->string . g$25284) (utf16->string . g$25283) (utf8->string . g$25282) (uint-list->bytevector . g$25281) (u8-list->bytevector . g$25280) (string->utf8 . g$25279) (string->utf32 . g$25278) (string->utf16 . g$25277) (sint-list->bytevector . g$25276) (native-endianness . g$25275) (bytevector? . g$25274) (bytevector=? . g$25273) (bytevector-uint-set! . g$25272) (bytevector-uint-ref . g$25271) (bytevector-u8-set! . g$25270) (bytevector-u8-ref . g$25269) (bytevector-u64-set! . g$25268) (bytevector-u64-ref . g$25267) (bytevector-u64-native-set! . g$25266) (bytevector-u64-native-ref . g$25265) (bytevector-u32-set! . g$25264) (bytevector-u32-ref . g$25263) (bytevector-u32-native-set! . g$25262) (bytevector-u32-native-ref . g$25261) (bytevector-u16-set! . g$25260) (bytevector-u16-ref . g$25259) (bytevector-u16-native-set! . g$25258) (bytevector-u16-native-ref . g$25257) (bytevector-sint-set! . g$25256) (bytevector-sint-ref . g$25255) (bytevector-s8-set! . g$25254) (bytevector-s8-ref . g$25253) (bytevector-s64-set! . g$25252) (bytevector-s64-ref . g$25251) (bytevector-s64-native-set! . g$25250) (bytevector-s64-native-ref . g$25249) (bytevector-s32-set! . g$25248) (bytevector-s32-ref . g$25247) (bytevector-s32-native-set! . g$25246) (bytevector-s32-native-ref . g$25245) (bytevector-s16-set! . g$25244) (bytevector-s16-ref . g$25243) (bytevector-s16-native-set! . g$25242) (bytevector-s16-native-ref . g$25241) (bytevector-length . g$25240) (bytevector-ieee-single-ref . g$25239) (bytevector-ieee-single-native-set! . g$25238) (bytevector-ieee-single-native-ref . g$25237) (bytevector-ieee-double-ref . g$25236) (bytevector-ieee-double-native-set! . g$25235) (bytevector-ieee-double-native-ref . g$25234) (bytevector-fill! . g$25233) (bytevector-copy! . g$25232) (bytevector-copy . g$25231) (bytevector->uint-list . g$25230) (bytevector->u8-list . g$25229) (bytevector->sint-list . g$25228) (no-nans-violation? . g$25227) (no-infinities-violation? . g$25226) (make-no-nans-violation . g$25225) (make-no-infinities-violation . g$25224) (real->flonum . g$25223) (flzero? . g$25222) (fltruncate . g$25221) (fltan . g$25220) (flsqrt . g$25219) (flsin . g$25218) (flround . g$25217) (flpositive? . g$25216) (flonum? . g$25215) (flodd? . g$25214) (flnumerator . g$25213) (flnegative? . g$25212) (flnan? . g$25211) (flmod0 . g$25210) (flmod . g$25209) (flmin . g$25208) (flmax . g$25207) (fllog . g$25206) (flinteger? . g$25205) (flinfinite? . g$25204) (flfloor . g$25203) (flfinite? . g$25202) (flexpt . g$25201) (flexp . g$25200) (fleven? . g$25199) (fldiv0-and-mod0 . g$25198) (fldiv0 . g$25197) (fldiv-and-mod . g$25196) (fldiv . g$25195) (fldenominator . g$25194) (flcos . g$25193) (flceiling . g$25192) (flatan . g$25191) (flasin . g$25190) (flacos . g$25189) (flabs . g$25188) (fl>? . g$25187) (fl>=? . g$25186) (fl=? . g$25185) (fl<? . g$25184) (fl<=? . g$25183) (fl/ . g$25182) (fl- . g$25181) (fl+ . g$25180) (fl* . g$25179) (fixnum->flonum . g$25178) (fxzero? . g$25177) (fxxor . g$25176) (fxrotate-bit-field . g$25175) (fxreverse-bit-field . g$25174) (fxpositive? . g$25173) (fxodd? . g$25172) (fxnot . g$25171) (fxnegative? . g$25170) (fxmod0 . g$25169) (fxmod . g$25168) (fxmin . g$25167) (fxmax . g$25166) (fxlength . g$25165) (fxior . g$25164) (fxif . g$25163) (fxfirst-bit-set . g$25162) (fxeven? . g$25161) (fxdiv0-and-mod0 . g$25160) (fxdiv0 . g$25159) (fxdiv-and-mod . g$25158) (fxdiv . g$25157) (fxcopy-bit-field . g$25156) (fxcopy-bit . g$25155) (fxbit-set? . g$25154) (fxbit-field . g$25153) (fxbit-count . g$25152) (fxarithmetic-shift-right . g$25151) (fxarithmetic-shift-left . g$25150) (fxarithmetic-shift . g$25149) (fxand . g$25148) (fx>? . g$25147) (fx>=? . g$25146) (fx=? . g$25145) (fx<? . g$25144) (fx<=? . g$25143) (fx-/carry . g$25142) (fx- . g$25141) (fx+/carry . g$25140) (fx+ . g$25139) (fx*/carry . g$25138) (fx* . g$25137) (greatest-fixnum . g$25136) (least-fixnum . g$25135) (fixnum-width . g$25134) (fixnum? . g$25133) (bitwise-rotate-bit-field . g$25132) (bitwise-reverse-bit-field . g$25131) (bitwise-length . g$25130) (bitwise-if . g$25129) (bitwise-first-bit-set . g$25128) (bitwise-copy-bit-field . g$25127) (bitwise-copy-bit . g$25126) (bitwise-bit-set? . g$25125) (bitwise-bit-field . g$25124) (bitwise-bit-count . g$25123) (bitwise-xor . g$25122) (bitwise-ior . g$25121) (bitwise-and . g$25120) (bitwise-not . g$25119) (bitwise-arithmetic-shift-right . g$25118) (bitwise-arithmetic-shift-left . g$25117) (bitwise-arithmetic-shift . g$25116) (zero? . g$25115) (vector? . g$25114) (vector-set! . g$25113) (vector-ref . g$25112) (vector-map . g$25111) (vector-length . g$25110) (vector-for-each . g$25109) (vector-fill! . g$25108) (vector->list . g$25107) (vector . g$25106) (values . g$25105) (truncate . g$25104) (tan . g$25103) (symbol? . g$25102) (symbol=? . g$25101) (symbol->string . g$25100) (substring . g$25099) (string? . g$25098) (string>? . g$25097) (string>=? . g$25096) (string=? . g$25095) (string<? . g$25094) (string<=? . g$25093) (string-ref . g$25092) (string-length . g$25091) (string-for-each . g$25090) (string-copy . g$25089) (string-append . g$25088) (string->symbol . g$25087) (string->number . g$25086) (string->list . g$25085) (string . g$25084) (sqrt . g$25083) (sin . g$25082) (round . g$25081) (reverse . g$25080) (real? . g$25079) (real-valued? . g$25078) (real-part . g$25077) (rationalize . g$25076) (rational? . g$25075) (rational-valued? . g$25074) (procedure? . g$25073) (positive? . g$25072) (pair? . g$25071) (odd? . g$25070) (numerator . g$25069) (number? . g$25068) (number->string . g$25067) (null? . g$25066) (not . g$25065) (negative? . g$25064) (nan? . g$25063) (min . g$25062) (max . g$25061) (map . g$25060) (make-vector . g$25059) (make-string . g$25058) (make-rectangular . g$25057) (make-polar . g$25056) (magnitude . g$25055) (log . g$25054) (list? . g$25053) (list-tail . g$25052) (list-ref . g$25051) (list->vector . g$25050) (list->string . g$25049) (list . g$25048) (length . g$25047) (lcm . g$25046) (integer? . g$25045) (integer-valued? . g$25044) (integer->char . g$25043) (infinite? . g$25042) (inexact? . g$25041) (inexact . g$25040) (imag-part . g$25039) (gcd . g$25038) (for-each . g$25037) (floor . g$25036) (finite? . g$25035) (expt . g$25034) (exp . g$25033) (exact? . g$25032) (exact-integer-sqrt . g$25031) (exact . g$25030) (even? . g$25029) (error . g$25028) (eqv? . g$25027) (equal? . g$25026) (eq? . g$25025) (dynamic-wind . g$25024) (div0-and-mod0 . g$25023) (mod0 . g$25022) (div0 . g$25021) (div-and-mod . g$25020) (mod . g$25019) (div . g$25018) (denominator . g$25017) (cos . g$25016) (cons . g$25015) (complex? . g$25014) (char? . g$25013) (char>? . g$25012) (char>=? . g$25011) (char=? . g$25010) (char<? . g$25009) (char<=? . g$25008) (char->integer . g$25007) (ceiling . g$25006) (call-with-values . g$25005) (call/cc . g$25004) (call-with-current-continuation . g$25003) (cddddr . g$25002) (cdddar . g$25001) (cddadr . g$25000) (cddaar . g$24999) (cdaddr . g$24998) (cdadar . g$24997) (cdaadr . g$24996) (cdaaar . g$24995) (cadddr . g$24994) (caddar . g$24993) (cadadr . g$24992) (cadaar . g$24991) (caaddr . g$24990) (caadar . g$24989) (caaadr . g$24988) (caaaar . g$24987) (cdddr . g$24986) (cddar . g$24985) (cdadr . g$24984) (cdaar . g$24983) (caddr . g$24982) (cadar . g$24981) (caadr . g$24980) (caaar . g$24979) (cddr . g$24978) (cdar . g$24977) (cadr . g$24976) (caar . g$24975) (cdr . g$24974) (car . g$24973) (boolean? . g$24972) (boolean=? . g$24971) (atan . g$24970) (assertion-violation . g$24969) (asin . g$24968) (apply . g$24967) (append . g$24966) (angle . g$24965) (acos . g$24964) (abs . g$24963) (/ . g$24962) (* . g$24961) (- . g$24960) (+ . g$24959) (>= . g$24958) (> . g$24957) (= . g$24956) (<= . g$24955) (< . g$24954) (let*-values . g$24953) (&no-nans . g$24952) (&no-infinities . g$24951) (&i/o-encoding . g$24950) (&i/o-decoding . g$24949) (&i/o-port . g$24948) (&i/o-file-does-not-exist . g$24947) (&i/o-file-already-exists . g$24946) (&i/o-file-is-read-only . g$24945) (&i/o-file-protection . g$24944) (&i/o-filename . g$24943) (&i/o-invalid-position . g$24942) (&i/o-write . g$24941) (&i/o-read . g$24940) (&i/o . g$24939) (&undefined . g$24938) (&syntax . g$24937) (&lexical . g$24936) (&who . g$24933) (&irritants . g$24932) (&assertion . g$24931) (&violation . g$24930) (&error . g$24929) (&serious . g$24928) (&warning . g$24927) (&message . g$24926) (&condition . g$24925) (define-condition-type . g$24924) (define-enumeration . g$24923) (define-record-type . g$24922) (parent-rtd . g$24921) (nongenerative . g$24920) (opaque . g$24919) (sealed . g$24918) (protocol . g$24917) (parent . g$24916) (immutable . g$24915) (mutable . g$24914) (fields . g$24913) (error-handling-mode . g$24912) (file-options . g$24911) (buffer-mode . g$24910) (eol-style . g$24909) (guard . g$24908) (unsyntax-splicing . g$24905) (unsyntax . g$24904) (unquote-splicing . g$24903) (unquote . g$24902) (_ . g$24901) (else . g$24900) (=> . g$24899) (... . g$24898) (assert . g$24897) (endianness . g$24896) (or . g$24893) (and . g$24892) (do . g$24891) (cond . g$24890) (let* . g$24889) (let . g$24888) (identifier-syntax . g$24887) (with-syntax . g$24886) (quasisyntax . g$24885) (quasiquote . g$24884) (syntax-rules . g$24883) (record-constructor-descriptor . g$24880) (record-type-descriptor . g$24879) (let-values . g$24878) (case . g$24877) (unless . g$24875) (when . g$24874) (if . g$24873) (letrec* . g$24872) (letrec . g$24871) (case-lambda . g$24869) (lambda . g$24868) (syntax . g$24867) (syntax-case . g$24866) (quote . g$24865) (letrec-syntax . g$24863) (let-syntax . g$24862) (set! . g$24861) (begin . g$24859) (define-syntax . g$24857) (define . g$24856)) '() values values '#t) (g$g$install-library$13808$14107 'g$25574 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g$25378) (quotient . g$25377) (null-environment . g$15142) (remainder . g$25376) (modulo . g$25375) (inexact->exact . g$25374) (force . g$25373) (exact->inexact . g$25372) (delay . g$24895)) '() values values '#t) (g$g$install-library$13808$14107 'g$25575 '(rnrs control) '(6) '() '() '() '((do . g$24891) (unless . g$24875) (when . g$24874) (case-lambda . g$24869)) '() values values '#t) (g$g$install-library$13808$14107 'g$25576 '(rnrs eval) '(6) '() '() '() '((eval . g$15148) (environment . g$15140)) '() values values '#t) (g$g$install-library$13808$14107 'g$25577 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g$25367) (set-car! . g$25366)) '() values values '#t) (g$g$install-library$13808$14107 'g$25578 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g$25369) (string-set! . g$25368)) '() values values '#t) (g$g$install-library$13808$14107 'g$25579 '(rnrs programs) '(6) '() '() '() '((exit . g$25371) (command-line . g$25370)) '() values values '#t) (g$g$install-library$13808$14107 'g$25580 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g$14577) (identifier? . g$15170) (generate-temporaries . g$15162) (free-identifier=? . g$15164) (syntax->datum . g$15174) (datum->syntax . g$15172) (bound-identifier=? . g$15166) (syntax-violation . g$25316) (unsyntax-splicing . g$24905) (unsyntax . g$24904) (_ . g$24901) (... . g$24898) (with-syntax . g$24886) (quasisyntax . g$24885) (syntax . g$24867) (syntax-case . g$24866)) '() values values '#t) (g$g$install-library$13808$14107 'g$25581 '(rnrs files) '(6) '() '() '() '((delete-file . g$25510) (file-exists? . g$25509) (make-i/o-write-error . g$25427) (make-i/o-read-error . g$25426) (make-i/o-port-error . g$25425) (make-i/o-invalid-position-error . g$25424) (make-i/o-filename-error . g$25423) (make-i/o-file-protection-error . g$25422) (make-i/o-file-is-read-only-error . g$25421) (make-i/o-file-does-not-exist-error . g$25420) (make-i/o-file-already-exists-error . g$25419) (make-i/o-error . g$25418) (i/o-write-error? . g$25406) (i/o-read-error? . g$25405) (i/o-port-error? . g$25404) (i/o-invalid-position-error? . g$25403) (i/o-filename-error? . g$25402) (i/o-file-protection-error? . g$25401) (i/o-file-is-read-only-error? . g$25400) (i/o-file-does-not-exist-error? . g$25399) (i/o-file-already-exists-error? . g$25398) (i/o-error? . g$25397) (i/o-error-port . g$25396) (i/o-error-filename . g$25395) (&i/o-port . g$24948) (&i/o-file-does-not-exist . g$24947) (&i/o-file-already-exists . g$24946) (&i/o-file-is-read-only . g$24945) (&i/o-file-protection . g$24944) (&i/o-filename . g$24943) (&i/o-invalid-position . g$24942) (&i/o-write . g$24941) (&i/o-read . g$24940) (&i/o . g$24939)) '() values values '#t) (g$g$install-library$13808$14107 'g$25582 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g$25508) (vector-sort . g$25507) (list-sort . g$25506)) '() values values '#t) (g$g$install-library$13808$14107 'g$25583 '(rnrs base) '(6) '() '() '() '((zero? . g$25115) (vector? . g$25114) (vector-set! . g$25113) (vector-ref . g$25112) (vector-map . g$25111) (vector-length . g$25110) (vector-for-each . g$25109) (vector-fill! . g$25108) (vector->list . g$25107) (vector . g$25106) (values . g$25105) (truncate . g$25104) (tan . g$25103) (symbol? . g$25102) (symbol=? . g$25101) (symbol->string . g$25100) (substring . g$25099) (string? . g$25098) (string>? . g$25097) (string>=? . g$25096) (string=? . g$25095) (string<? . g$25094) (string<=? . g$25093) (string-ref . g$25092) (string-length . g$25091) (string-for-each . g$25090) (string-copy . g$25089) (string-append . g$25088) (string->symbol . g$25087) (string->number . g$25086) (string->list . g$25085) (string . g$25084) (sqrt . g$25083) (sin . g$25082) (round . g$25081) (reverse . g$25080) (real? . g$25079) (real-valued? . g$25078) (real-part . g$25077) (rationalize . g$25076) (rational? . g$25075) (rational-valued? . g$25074) (procedure? . g$25073) (positive? . g$25072) (pair? . g$25071) (odd? . g$25070) (numerator . g$25069) (number? . g$25068) (number->string . g$25067) (null? . g$25066) (not . g$25065) (negative? . g$25064) (nan? . g$25063) (min . g$25062) (max . g$25061) (map . g$25060) (make-vector . g$25059) (make-string . g$25058) (make-rectangular . g$25057) (make-polar . g$25056) (magnitude . g$25055) (log . g$25054) (list? . g$25053) (list-tail . g$25052) (list-ref . g$25051) (list->vector . g$25050) (list->string . g$25049) (list . g$25048) (length . g$25047) (lcm . g$25046) (integer? . g$25045) (integer-valued? . g$25044) (integer->char . g$25043) (infinite? . g$25042) (inexact? . g$25041) (inexact . g$25040) (imag-part . g$25039) (gcd . g$25038) (for-each . g$25037) (floor . g$25036) (finite? . g$25035) (expt . g$25034) (exp . g$25033) (exact? . g$25032) (exact-integer-sqrt . g$25031) (exact . g$25030) (even? . g$25029) (error . g$25028) (eqv? . g$25027) (equal? . g$25026) (eq? . g$25025) (dynamic-wind . g$25024) (div0-and-mod0 . g$25023) (mod0 . g$25022) (div0 . g$25021) (div-and-mod . g$25020) (mod . g$25019) (div . g$25018) (denominator . g$25017) (cos . g$25016) (cons . g$25015) (complex? . g$25014) (char? . g$25013) (char>? . g$25012) (char>=? . g$25011) (char=? . g$25010) (char<? . g$25009) (char<=? . g$25008) (char->integer . g$25007) (ceiling . g$25006) (call-with-values . g$25005) (call/cc . g$25004) (call-with-current-continuation . g$25003) (cddddr . g$25002) (cdddar . g$25001) (cddadr . g$25000) (cddaar . g$24999) (cdaddr . g$24998) (cdadar . g$24997) (cdaadr . g$24996) (cdaaar . g$24995) (cadddr . g$24994) (caddar . g$24993) (cadadr . g$24992) (cadaar . g$24991) (caaddr . g$24990) (caadar . g$24989) (caaadr . g$24988) (caaaar . g$24987) (cdddr . g$24986) (cddar . g$24985) (cdadr . g$24984) (cdaar . g$24983) (caddr . g$24982) (cadar . g$24981) (caadr . g$24980) (caaar . g$24979) (cddr . g$24978) (cdar . g$24977) (cadr . g$24976) (caar . g$24975) (cdr . g$24974) (car . g$24973) (boolean? . g$24972) (boolean=? . g$24971) (atan . g$24970) (assertion-violation . g$24969) (asin . g$24968) (apply . g$24967) (append . g$24966) (angle . g$24965) (acos . g$24964) (abs . g$24963) (/ . g$24962) (* . g$24961) (- . g$24960) (+ . g$24959) (>= . g$24958) (> . g$24957) (= . g$24956) (<= . g$24955) (< . g$24954) (let*-values . g$24953) (unquote-splicing . g$24903) (unquote . g$24902) (_ . g$24901) (else . g$24900) (=> . g$24899) (... . g$24898) (assert . g$24897) (or . g$24893) (and . g$24892) (cond . g$24890) (let* . g$24889) (let . g$24888) (identifier-syntax . g$24887) (quasiquote . g$24884) (syntax-rules . g$24883) (let-values . g$24878) (case . g$24877) (if . g$24873) (letrec* . g$24872) (letrec . g$24871) (lambda . g$24868) (quote . g$24865) (letrec-syntax . g$24863) (let-syntax . g$24862) (set! . g$24861) (begin . g$24859) (define-syntax . g$24857) (define . g$24856)) '() values values '#t) (g$g$install-library$13808$14107 'g$25584 '(rnrs lists) '(6) '() '() '() '((remove . g$25365) (remv . g$25364) (remp . g$25363) (remq . g$25362) (partition . g$25361) (memv . g$25360) (memq . g$25359) (memp . g$25358) (member . g$25357) (exists . g$25356) (for-all . g$25355) (fold-right . g$25354) (fold-left . g$25353) (find . g$25352) (filter . g$25351) (cons* . g$25350) (assv . g$25349) (assq . g$25348) (assp . g$25347) (assoc . g$25346)) '() values values '#t) (g$g$install-library$13808$14107 'g$25585 '(rnrs io simple) '(6) '() '() '() '((eval-r6rs-top-level-hook . g$25566) (call-with-output-file . g$25484) (call-with-input-file . g$25483) (write-char . g$25482) (write . g$25481) (with-output-to-file . g$25480) (with-input-from-file . g$25479) (read-char . g$25478) (read . g$25477) (peek-char . g$25476) (open-output-file . g$25475) (open-input-file . g$25474) (newline . g$25473) (display . g$25472) (close-output-port . g$25471) (close-input-port . g$25470) (eof-object? . g$25469) (eof-object . g$25468) (current-error-port . g$25467) (current-output-port . g$25466) (current-input-port . g$25465) (output-port? . g$25464) (input-port? . g$25463) (make-i/o-write-error . g$25427) (make-i/o-read-error . g$25426) (make-i/o-port-error . g$25425) (make-i/o-invalid-position-error . g$25424) (make-i/o-filename-error . g$25423) (make-i/o-file-protection-error . g$25422) (make-i/o-file-is-read-only-error . g$25421) (make-i/o-file-does-not-exist-error . g$25420) (make-i/o-file-already-exists-error . g$25419) (make-i/o-error . g$25418) (i/o-write-error? . g$25406) (i/o-read-error? . g$25405) (i/o-port-error? . g$25404) (i/o-invalid-position-error? . g$25403) (i/o-filename-error? . g$25402) (i/o-file-protection-error? . g$25401) (i/o-file-is-read-only-error? . g$25400) (i/o-file-does-not-exist-error? . g$25399) (i/o-file-already-exists-error? . g$25398) (i/o-error? . g$25397) (i/o-error-port . g$25396) (i/o-error-filename . g$25395) (&i/o-port . g$24948) (&i/o-file-does-not-exist . g$24947) (&i/o-file-already-exists . g$24946) (&i/o-file-is-read-only . g$24945) (&i/o-file-protection . g$24944) (&i/o-filename . g$24943) (&i/o-invalid-position . g$24942) (&i/o-write . g$24941) (&i/o-read . g$24940) (&i/o . g$24939)) '() values values '#t) (g$g$install-library$13808$14107 'g$25586 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g$25409) (utf32->string . g$25284) (utf16->string . g$25283) (utf8->string . g$25282) (uint-list->bytevector . g$25281) (u8-list->bytevector . g$25280) (string->utf8 . g$25279) (string->utf32 . g$25278) (string->utf16 . g$25277) (sint-list->bytevector . g$25276) (native-endianness . g$25275) (bytevector? . g$25274) (bytevector=? . g$25273) (bytevector-uint-set! . g$25272) (bytevector-uint-ref . g$25271) (bytevector-u8-set! . g$25270) (bytevector-u8-ref . g$25269) (bytevector-u64-set! . g$25268) (bytevector-u64-ref . g$25267) (bytevector-u64-native-set! . g$25266) (bytevector-u64-native-ref . g$25265) (bytevector-u32-set! . g$25264) (bytevector-u32-ref . g$25263) (bytevector-u32-native-set! . g$25262) (bytevector-u32-native-ref . g$25261) (bytevector-u16-set! . g$25260) (bytevector-u16-ref . g$25259) (bytevector-u16-native-set! . g$25258) (bytevector-u16-native-ref . g$25257) (bytevector-sint-set! . g$25256) (bytevector-sint-ref . g$25255) (bytevector-s8-set! . g$25254) (bytevector-s8-ref . g$25253) (bytevector-s64-set! . g$25252) (bytevector-s64-ref . g$25251) (bytevector-s64-native-set! . g$25250) (bytevector-s64-native-ref . g$25249) (bytevector-s32-set! . g$25248) (bytevector-s32-ref . g$25247) (bytevector-s32-native-set! . g$25246) (bytevector-s32-native-ref . g$25245) (bytevector-s16-set! . g$25244) (bytevector-s16-ref . g$25243) (bytevector-s16-native-set! . g$25242) (bytevector-s16-native-ref . g$25241) (bytevector-length . g$25240) (bytevector-ieee-single-ref . g$25239) (bytevector-ieee-single-native-set! . g$25238) (bytevector-ieee-single-native-ref . g$25237) (bytevector-ieee-double-ref . g$25236) (bytevector-ieee-double-native-set! . g$25235) (bytevector-ieee-double-native-ref . g$25234) (bytevector-fill! . g$25233) (bytevector-copy! . g$25232) (bytevector-copy . g$25231) (bytevector->uint-list . g$25230) (bytevector->u8-list . g$25229) (bytevector->sint-list . g$25228) (endianness . g$24896)) '() values values '#t) (g$g$install-library$13808$14107 'g$25587 '(rnrs unicode) '(6) '() '() '() '((string-upcase . g$25556) (string-titlecase . g$25555) (string-normalize-nfkd . g$25554) (string-normalize-nfkc . g$25553) (string-normalize-nfd . g$25552) (string-normalize-nfc . g$25551) (string-foldcase . g$25550) (string-downcase . g$25549) (string-ci>? . g$25548) (string-ci>=? . g$25547) (string-ci=? . g$25546) (string-ci<? . g$25545) (string-ci<=? . g$25544) (char-whitespace? . g$25543) (char-upper-case? . g$25542) (char-title-case? . g$25541) (char-numeric? . g$25540) (char-lower-case? . g$25539) (char-general-category . g$25538) (char-upcase . g$25537) (char-titlecase . g$25536) (char-foldcase . g$25535) (char-downcase . g$25534) (char-ci>? . g$25533) (char-ci>=? . g$25532) (char-ci=? . g$25531) (char-ci<? . g$25530) (char-ci<=? . g$25529) (char-alphabetic? . g$25528)) '() values values '#t) (g$g$install-library$13808$14107 'g$25588 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g$25339) (raise-continuable . g$25338) (raise . g$25337) (guard . g$24908) (else . g$24900) (=> . g$24899)) '() values values '#t) (g$g$install-library$13808$14107 'g$25589 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g$25132) (bitwise-reverse-bit-field . g$25131) (bitwise-length . g$25130) (bitwise-if . g$25129) (bitwise-first-bit-set . g$25128) (bitwise-copy-bit-field . g$25127) (bitwise-copy-bit . g$25126) (bitwise-bit-set? . g$25125) (bitwise-bit-field . g$25124) (bitwise-bit-count . g$25123) (bitwise-xor . g$25122) (bitwise-ior . g$25121) (bitwise-and . g$25120) (bitwise-not . g$25119) (bitwise-arithmetic-shift-right . g$25118) (bitwise-arithmetic-shift-left . g$25117) (bitwise-arithmetic-shift . g$25116)) '() values values '#t) (g$g$install-library$13808$14107 'g$25590 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g$25177) (fxxor . g$25176) (fxrotate-bit-field . g$25175) (fxreverse-bit-field . g$25174) (fxpositive? . g$25173) (fxodd? . g$25172) (fxnot . g$25171) (fxnegative? . g$25170) (fxmod0 . g$25169) (fxmod . g$25168) (fxmin . g$25167) (fxmax . g$25166) (fxlength . g$25165) (fxior . g$25164) (fxif . g$25163) (fxfirst-bit-set . g$25162) (fxeven? . g$25161) (fxdiv0-and-mod0 . g$25160) (fxdiv0 . g$25159) (fxdiv-and-mod . g$25158) (fxdiv . g$25157) (fxcopy-bit-field . g$25156) (fxcopy-bit . g$25155) (fxbit-set? . g$25154) (fxbit-field . g$25153) (fxbit-count . g$25152) (fxarithmetic-shift-right . g$25151) (fxarithmetic-shift-left . g$25150) (fxarithmetic-shift . g$25149) (fxand . g$25148) (fx>? . g$25147) (fx>=? . g$25146) (fx=? . g$25145) (fx<? . g$25144) (fx<=? . g$25143) (fx-/carry . g$25142) (fx- . g$25141) (fx+/carry . g$25140) (fx+ . g$25139) (fx*/carry . g$25138) (fx* . g$25137) (greatest-fixnum . g$25136) (least-fixnum . g$25135) (fixnum-width . g$25134) (fixnum? . g$25133)) '() values values '#t) (g$g$install-library$13808$14107 'g$25591 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g$25227) (no-infinities-violation? . g$25226) (make-no-nans-violation . g$25225) (make-no-infinities-violation . g$25224) (real->flonum . g$25223) (flzero? . g$25222) (fltruncate . g$25221) (fltan . g$25220) (flsqrt . g$25219) (flsin . g$25218) (flround . g$25217) (flpositive? . g$25216) (flonum? . g$25215) (flodd? . g$25214) (flnumerator . g$25213) (flnegative? . g$25212) (flnan? . g$25211) (flmod0 . g$25210) (flmod . g$25209) (flmin . g$25208) (flmax . g$25207) (fllog . g$25206) (flinteger? . g$25205) (flinfinite? . g$25204) (flfloor . g$25203) (flfinite? . g$25202) (flexpt . g$25201) (flexp . g$25200) (fleven? . g$25199) (fldiv0-and-mod0 . g$25198) (fldiv0 . g$25197) (fldiv-and-mod . g$25196) (fldiv . g$25195) (fldenominator . g$25194) (flcos . g$25193) (flceiling . g$25192) (flatan . g$25191) (flasin . g$25190) (flacos . g$25189) (flabs . g$25188) (fl>? . g$25187) (fl>=? . g$25186) (fl=? . g$25185) (fl<? . g$25184) (fl<=? . g$25183) (fl/ . g$25182) (fl- . g$25181) (fl+ . g$25180) (fl* . g$25179) (fixnum->flonum . g$25178) (&no-nans . g$24952) (&no-infinities . g$24951)) '() values values '#t) (g$g$install-library$13808$14107 'g$25592 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g$25505) (string-ci-hash . g$25504) (string-hash . g$25503) (equal-hash . g$25502) (hashtable-equivalence-function . g$25501) (make-hashtable . g$25500) (hashtable-hash-function . g$25499) (make-eqv-hashtable . g$25498) (make-eq-hashtable . g$25497) (hashtable? . g$25496) (hashtable-update! . g$25495) (hashtable-size . g$25494) (hashtable-set! . g$25493) (hashtable-ref . g$25492) (hashtable-mutable? . g$25491) (hashtable-keys . g$25490) (hashtable-entries . g$25489) (hashtable-delete! . g$25488) (hashtable-copy . g$25487) (hashtable-contains? . g$25486) (hashtable-clear! . g$25485)) '() values values '#t) (g$g$install-library$13808$14107 'g$25593 '(rnrs io ports) '(6) '() '() '() '((eof-object? . g$25469) (eof-object . g$25468) (current-error-port . g$25467) (current-output-port . g$25466) (current-input-port . g$25465) (output-port? . g$25464) (input-port? . g$25463) (utf-8-codec . g$25462) (utf-16-codec . g$25461) (transcoder-error-handling-mode . g$25460) (transcoder-eol-style . g$25459) (transcoder-codec . g$25458) (transcoded-port . g$25457) (textual-port? . g$25456) (string->bytevector . g$25455) (standard-output-port . g$25454) (standard-input-port . g$25453) (standard-error-port . g$25452) (set-port-position! . g$25451) (put-u8 . g$25450) (put-string . g$25449) (put-datum . g$25448) (put-char . g$25447) (put-bytevector . g$25446) (port? . g$25445) (port-transcoder . g$25444) (port-position . g$25443) (port-has-set-port-position!? . g$25442) (port-has-port-position? . g$25441) (port-eof? . g$25440) (output-port-buffer-mode . g$25439) (open-string-output-port . g$25438) (open-string-input-port . g$25437) (open-file-output-port . g$25436) (open-file-input/output-port . g$25435) (open-file-input-port . g$25434) (open-bytevector-output-port . g$25433) (open-bytevector-input-port . g$25432) (native-transcoder . g$25431) (native-eol-style . g$25430) (make-transcoder . g$25429) (latin-1-codec . g$25428) (make-i/o-write-error . g$25427) (make-i/o-read-error . g$25426) (make-i/o-port-error . g$25425) (make-i/o-invalid-position-error . g$25424) (make-i/o-filename-error . g$25423) (make-i/o-file-protection-error . g$25422) (make-i/o-file-is-read-only-error . g$25421) (make-i/o-file-does-not-exist-error . g$25420) (make-i/o-file-already-exists-error . g$25419) (make-i/o-error . g$25418) (make-i/o-encoding-error . g$25417) (make-i/o-decoding-error . g$25416) (make-custom-textual-output-port . g$25415) (make-custom-textual-input/output-port . g$25414) (make-custom-textual-input-port . g$25413) (make-custom-binary-output-port . g$25412) (make-custom-binary-input/output-port . g$25411) (make-custom-binary-input-port . g$25410) (lookahead-u8 . g$25408) (lookahead-char . g$25407) (i/o-write-error? . g$25406) (i/o-read-error? . g$25405) (i/o-port-error? . g$25404) (i/o-invalid-position-error? . g$25403) (i/o-filename-error? . g$25402) (i/o-file-protection-error? . g$25401) (i/o-file-is-read-only-error? . g$25400) (i/o-file-does-not-exist-error? . g$25399) (i/o-file-already-exists-error? . g$25398) (i/o-error? . g$25397) (i/o-error-port . g$25396) (i/o-error-filename . g$25395) (i/o-encoding-error? . g$25394) (i/o-encoding-error-char . g$25393) (i/o-decoding-error? . g$25392) (get-u8 . g$25391) (get-string-n! . g$25390) (get-string-n . g$25389) (get-string-all . g$25388) (get-line . g$25387) (get-datum . g$25386) (get-char . g$25385) (get-bytevector-some . g$25384) (get-bytevector-n! . g$25383) (get-bytevector-n . g$25382) (get-bytevector-all . g$25381) (flush-output-port . g$25380) (close-port . g$25379) (call-with-string-output-port . g$25345) (call-with-port . g$25344) (call-with-bytevector-output-port . g$25343) (bytevector->string . g$25342) (buffer-mode? . g$25341) (binary-port? . g$25340) (&i/o-encoding . g$24950) (&i/o-decoding . g$24949) (&i/o-port . g$24948) (&i/o-file-does-not-exist . g$24947) (&i/o-file-already-exists . g$24946) (&i/o-file-is-read-only . g$24945) (&i/o-file-protection . g$24944) (&i/o-filename . g$24943) (&i/o-invalid-position . g$24942) (&i/o-write . g$24941) (&i/o-read . g$24940) (&i/o . g$24939) (error-handling-mode . g$24912) (file-options . g$24911) (buffer-mode . g$24910) (eol-style . g$24909)) '() values values '#t) (g$g$install-library$13808$14107 'g$25594 '(rnrs enums) '(6) '() '() '() '((make-enumeration . g$25336) (enum-set=? . g$25335) (enum-set-universe . g$25334) (enum-set-union . g$25333) (enum-set-subset? . g$25332) (enum-set-projection . g$25331) (enum-set-member? . g$25330) (enum-set-intersection . g$25329) (enum-set-indexer . g$25328) (enum-set-difference . g$25327) (enum-set-constructor . g$25326) (enum-set-complement . g$25325) (enum-set->list . g$25324) (define-enumeration . g$24923)) '() values values '#t) (g$g$install-library$13808$14107 'g$25595 '(rnrs conditions) '(6) '() '() '() '((who-condition? . g$25323) (warning? . g$25322) (violation? . g$25321) (undefined-violation? . g$25320) (syntax-violation? . g$25319) (syntax-violation-subform . g$25318) (syntax-violation-form . g$25317) (syntax-violation . g$25316) (simple-conditions . g$25315) (serious-condition? . g$25314) (non-continuable-violation? . g$25313) (&non-continuable . g$25312) (message-condition? . g$25311) (make-who-condition . g$25310) (make-warning . g$25309) (make-violation . g$25308) (make-undefined-violation . g$25307) (make-syntax-violation . g$25306) (make-serious-condition . g$25305) (make-non-continuable-violation . g$25304) (make-message-condition . g$25303) (make-lexical-violation . g$25302) (make-irritants-condition . g$25301) (make-implementation-restriction-violation . g$25300) (make-error . g$25299) (make-assertion-violation . g$25298) (lexical-violation? . g$25297) (irritants-condition? . g$25296) (implementation-restriction-violation? . g$25295) (&implementation-restriction . g$25294) (error? . g$25293) (condition-who . g$25292) (condition-predicate . g$25291) (condition-message . g$25290) (condition-irritants . g$25289) (condition-accessor . g$25288) (condition . g$25287) (assertion-violation? . g$25286) (condition? . g$25285) (&undefined . g$24938) (&syntax . g$24937) (&lexical . g$24936) (&who . g$24933) (&irritants . g$24932) (&assertion . g$24931) (&violation . g$24930) (&error . g$24929) (&serious . g$24928) (&warning . g$24927) (&message . g$24926) (&condition . g$24925) (define-condition-type . g$24924)) '() values values '#t) (g$g$install-library$13808$14107 'g$25596 '(rnrs records inspection) '(6) '() '() '() '((record? . g$25520) (record-type-uid . g$25519) (record-type-sealed? . g$25518) (record-type-parent . g$25517) (record-type-opaque? . g$25516) (record-type-name . g$25515) (record-type-generative? . g$25514) (record-type-field-names . g$25513) (record-rtd . g$25512) (record-field-mutable? . g$25511)) '() values values '#t) (g$g$install-library$13808$14107 'g$25597 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g$25527) (record-predicate . g$25526) (record-mutator . g$25525) (record-constructor . g$25524) (record-accessor . g$25523) (make-record-type-descriptor . g$25522) (make-record-constructor-descriptor . g$25521)) '() values values '#t) (g$g$install-library$13808$14107 'g$25598 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g$24922) (parent-rtd . g$24921) (nongenerative . g$24920) (opaque . g$24919) (sealed . g$24918) (protocol . g$24917) (parent . g$24916) (immutable . g$24915) (mutable . g$24914) (fields . g$24913) (record-constructor-descriptor . g$24880) (record-type-descriptor . g$24879)) '() values values '#t) (g$g$install-library$13808$14107 'g$25599 '(psyntax system $all) '() '() '() '() '((eval-r6rs-top-level-hook . g$25566) (syntax-error . g$15168) (syntax-dispatch . g$15035) (pretty-print . g$25565) (eval-core . g$25564) (set-symbol-value! . g$25563) (symbol-value . g$25562) (gensym . g$25561) (void . g$25560) (load . g$25559) (interaction-environment . g$25558) (char-ready? . g$25557) (string-upcase . g$25556) (string-titlecase . g$25555) (string-normalize-nfkd . g$25554) (string-normalize-nfkc . g$25553) (string-normalize-nfd . g$25552) (string-normalize-nfc . g$25551) (string-foldcase . g$25550) (string-downcase . g$25549) (string-ci>? . g$25548) (string-ci>=? . g$25547) (string-ci=? . g$25546) (string-ci<? . g$25545) (string-ci<=? . g$25544) (char-whitespace? . g$25543) (char-upper-case? . g$25542) (char-title-case? . g$25541) (char-numeric? . g$25540) (char-lower-case? . g$25539) (char-general-category . g$25538) (char-upcase . g$25537) (char-titlecase . g$25536) (char-foldcase . g$25535) (char-downcase . g$25534) (char-ci>? . g$25533) (char-ci>=? . g$25532) (char-ci=? . g$25531) (char-ci<? . g$25530) (char-ci<=? . g$25529) (char-alphabetic? . g$25528) (make-variable-transformer . g$14577) (identifier? . g$15170) (generate-temporaries . g$15162) (free-identifier=? . g$15164) (syntax->datum . g$15174) (datum->syntax . g$15172) (bound-identifier=? . g$15166) (record-type-descriptor? . g$25527) (record-predicate . g$25526) (record-mutator . g$25525) (record-constructor . g$25524) (record-accessor . g$25523) (make-record-type-descriptor . g$25522) (make-record-constructor-descriptor . g$25521) (record? . g$25520) (record-type-uid . g$25519) (record-type-sealed? . g$25518) (record-type-parent . g$25517) (record-type-opaque? . g$25516) (record-type-name . g$25515) (record-type-generative? . g$25514) (record-type-field-names . g$25513) (record-rtd . g$25512) (record-field-mutable? . g$25511) (delete-file . g$25510) (file-exists? . g$25509) (vector-sort! . g$25508) (vector-sort . g$25507) (list-sort . g$25506) (symbol-hash . g$25505) (string-ci-hash . g$25504) (string-hash . g$25503) (equal-hash . g$25502) (hashtable-equivalence-function . g$25501) (make-hashtable . g$25500) (hashtable-hash-function . g$25499) (make-eqv-hashtable . g$25498) (make-eq-hashtable . g$25497) (hashtable? . g$25496) (hashtable-update! . g$25495) (hashtable-size . g$25494) (hashtable-set! . g$25493) (hashtable-ref . g$25492) (hashtable-mutable? . g$25491) (hashtable-keys . g$25490) (hashtable-entries . g$25489) (hashtable-delete! . g$25488) (hashtable-copy . g$25487) (hashtable-contains? . g$25486) (hashtable-clear! . g$25485) (call-with-output-file . g$25484) (call-with-input-file . g$25483) (write-char . g$25482) (write . g$25481) (with-output-to-file . g$25480) (with-input-from-file . g$25479) (read-char . g$25478) (read . g$25477) (peek-char . g$25476) (open-output-file . g$25475) (open-input-file . g$25474) (newline . g$25473) (display . g$25472) (close-output-port . g$25471) (close-input-port . g$25470) (eof-object? . g$25469) (eof-object . g$25468) (current-error-port . g$25467) (current-output-port . g$25466) (current-input-port . g$25465) (output-port? . g$25464) (input-port? . g$25463) (utf-8-codec . g$25462) (utf-16-codec . g$25461) (transcoder-error-handling-mode . g$25460) (transcoder-eol-style . g$25459) (transcoder-codec . g$25458) (transcoded-port . g$25457) (textual-port? . g$25456) (string->bytevector . g$25455) (standard-output-port . g$25454) (standard-input-port . g$25453) (standard-error-port . g$25452) (set-port-position! . g$25451) (put-u8 . g$25450) (put-string . g$25449) (put-datum . g$25448) (put-char . g$25447) (put-bytevector . g$25446) (port? . g$25445) (port-transcoder . g$25444) (port-position . g$25443) (port-has-set-port-position!? . g$25442) (port-has-port-position? . g$25441) (port-eof? . g$25440) (output-port-buffer-mode . g$25439) (open-string-output-port . g$25438) (open-string-input-port . g$25437) (open-file-output-port . g$25436) (open-file-input/output-port . g$25435) (open-file-input-port . g$25434) (open-bytevector-output-port . g$25433) (open-bytevector-input-port . g$25432) (native-transcoder . g$25431) (native-eol-style . g$25430) (make-transcoder . g$25429) (latin-1-codec . g$25428) (make-i/o-write-error . g$25427) (make-i/o-read-error . g$25426) (make-i/o-port-error . g$25425) (make-i/o-invalid-position-error . g$25424) (make-i/o-filename-error . g$25423) (make-i/o-file-protection-error . g$25422) (make-i/o-file-is-read-only-error . g$25421) (make-i/o-file-does-not-exist-error . g$25420) (make-i/o-file-already-exists-error . g$25419) (make-i/o-error . g$25418) (make-i/o-encoding-error . g$25417) (make-i/o-decoding-error . g$25416) (make-custom-textual-output-port . g$25415) (make-custom-textual-input/output-port . g$25414) (make-custom-textual-input-port . g$25413) (make-custom-binary-output-port . g$25412) (make-custom-binary-input/output-port . g$25411) (make-custom-binary-input-port . g$25410) (make-bytevector . g$25409) (lookahead-u8 . g$25408) (lookahead-char . g$25407) (i/o-write-error? . g$25406) (i/o-read-error? . g$25405) (i/o-port-error? . g$25404) (i/o-invalid-position-error? . g$25403) (i/o-filename-error? . g$25402) (i/o-file-protection-error? . g$25401) (i/o-file-is-read-only-error? . g$25400) (i/o-file-does-not-exist-error? . g$25399) (i/o-file-already-exists-error? . g$25398) (i/o-error? . g$25397) (i/o-error-port . g$25396) (i/o-error-filename . g$25395) (i/o-encoding-error? . g$25394) (i/o-encoding-error-char . g$25393) (i/o-decoding-error? . g$25392) (get-u8 . g$25391) (get-string-n! . g$25390) (get-string-n . g$25389) (get-string-all . g$25388) (get-line . g$25387) (get-datum . g$25386) (get-char . g$25385) (get-bytevector-some . g$25384) (get-bytevector-n! . g$25383) (get-bytevector-n . g$25382) (get-bytevector-all . g$25381) (flush-output-port . g$25380) (close-port . g$25379) (scheme-report-environment . g$25378) (quotient . g$25377) (null-environment . g$15142) (remainder . g$25376) (modulo . g$25375) (inexact->exact . g$25374) (force . g$25373) (exact->inexact . g$25372) (exit . g$25371) (command-line . g$25370) (string-fill! . g$25369) (string-set! . g$25368) (set-cdr! . g$25367) (set-car! . g$25366) (remove . g$25365) (remv . g$25364) (remp . g$25363) (remq . g$25362) (partition . g$25361) (memv . g$25360) (memq . g$25359) (memp . g$25358) (member . g$25357) (exists . g$25356) (for-all . g$25355) (fold-right . g$25354) (fold-left . g$25353) (find . g$25352) (filter . g$25351) (cons* . g$25350) (assv . g$25349) (assq . g$25348) (assp . g$25347) (assoc . g$25346) (call-with-string-output-port . g$25345) (call-with-port . g$25344) (call-with-bytevector-output-port . g$25343) (bytevector->string . g$25342) (buffer-mode? . g$25341) (binary-port? . g$25340) (with-exception-handler . g$25339) (raise-continuable . g$25338) (raise . g$25337) (eval . g$15148) (environment . g$15140) (make-enumeration . g$25336) (enum-set=? . g$25335) (enum-set-universe . g$25334) (enum-set-union . g$25333) (enum-set-subset? . g$25332) (enum-set-projection . g$25331) (enum-set-member? . g$25330) (enum-set-intersection . g$25329) (enum-set-indexer . g$25328) (enum-set-difference . g$25327) (enum-set-constructor . g$25326) (enum-set-complement . g$25325) (enum-set->list . g$25324) (who-condition? . g$25323) (warning? . g$25322) (violation? . g$25321) (undefined-violation? . g$25320) (syntax-violation? . g$25319) (syntax-violation-subform . g$25318) (syntax-violation-form . g$25317) (syntax-violation . g$25316) (simple-conditions . g$25315) (serious-condition? . g$25314) (non-continuable-violation? . g$25313) (&non-continuable . g$25312) (message-condition? . g$25311) (make-who-condition . g$25310) (make-warning . g$25309) (make-violation . g$25308) (make-undefined-violation . g$25307) (make-syntax-violation . g$25306) (make-serious-condition . g$25305) (make-non-continuable-violation . g$25304) (make-message-condition . g$25303) (make-lexical-violation . g$25302) (make-irritants-condition . g$25301) (make-implementation-restriction-violation . g$25300) (make-error . g$25299) (make-assertion-violation . g$25298) (lexical-violation? . g$25297) (irritants-condition? . g$25296) (implementation-restriction-violation? . g$25295) (&implementation-restriction . g$25294) (error? . g$25293) (condition-who . g$25292) (condition-predicate . g$25291) (condition-message . g$25290) (condition-irritants . g$25289) (condition-accessor . g$25288) (condition . g$25287) (assertion-violation? . g$25286) (condition? . g$25285) (utf32->string . g$25284) (utf16->string . g$25283) (utf8->string . g$25282) (uint-list->bytevector . g$25281) (u8-list->bytevector . g$25280) (string->utf8 . g$25279) (string->utf32 . g$25278) (string->utf16 . g$25277) (sint-list->bytevector . g$25276) (native-endianness . g$25275) (bytevector? . g$25274) (bytevector=? . g$25273) (bytevector-uint-set! . g$25272) (bytevector-uint-ref . g$25271) (bytevector-u8-set! . g$25270) (bytevector-u8-ref . g$25269) (bytevector-u64-set! . g$25268) (bytevector-u64-ref . g$25267) (bytevector-u64-native-set! . g$25266) (bytevector-u64-native-ref . g$25265) (bytevector-u32-set! . g$25264) (bytevector-u32-ref . g$25263) (bytevector-u32-native-set! . g$25262) (bytevector-u32-native-ref . g$25261) (bytevector-u16-set! . g$25260) (bytevector-u16-ref . g$25259) (bytevector-u16-native-set! . g$25258) (bytevector-u16-native-ref . g$25257) (bytevector-sint-set! . g$25256) (bytevector-sint-ref . g$25255) (bytevector-s8-set! . g$25254) (bytevector-s8-ref . g$25253) (bytevector-s64-set! . g$25252) (bytevector-s64-ref . g$25251) (bytevector-s64-native-set! . g$25250) (bytevector-s64-native-ref . g$25249) (bytevector-s32-set! . g$25248) (bytevector-s32-ref . g$25247) (bytevector-s32-native-set! . g$25246) (bytevector-s32-native-ref . g$25245) (bytevector-s16-set! . g$25244) (bytevector-s16-ref . g$25243) (bytevector-s16-native-set! . g$25242) (bytevector-s16-native-ref . g$25241) (bytevector-length . g$25240) (bytevector-ieee-single-ref . g$25239) (bytevector-ieee-single-native-set! . g$25238) (bytevector-ieee-single-native-ref . g$25237) (bytevector-ieee-double-ref . g$25236) (bytevector-ieee-double-native-set! . g$25235) (bytevector-ieee-double-native-ref . g$25234) (bytevector-fill! . g$25233) (bytevector-copy! . g$25232) (bytevector-copy . g$25231) (bytevector->uint-list . g$25230) (bytevector->u8-list . g$25229) (bytevector->sint-list . g$25228) (no-nans-violation? . g$25227) (no-infinities-violation? . g$25226) (make-no-nans-violation . g$25225) (make-no-infinities-violation . g$25224) (real->flonum . g$25223) (flzero? . g$25222) (fltruncate . g$25221) (fltan . g$25220) (flsqrt . g$25219) (flsin . g$25218) (flround . g$25217) (flpositive? . g$25216) (flonum? . g$25215) (flodd? . g$25214) (flnumerator . g$25213) (flnegative? . g$25212) (flnan? . g$25211) (flmod0 . g$25210) (flmod . g$25209) (flmin . g$25208) (flmax . g$25207) (fllog . g$25206) (flinteger? . g$25205) (flinfinite? . g$25204) (flfloor . g$25203) (flfinite? . g$25202) (flexpt . g$25201) (flexp . g$25200) (fleven? . g$25199) (fldiv0-and-mod0 . g$25198) (fldiv0 . g$25197) (fldiv-and-mod . g$25196) (fldiv . g$25195) (fldenominator . g$25194) (flcos . g$25193) (flceiling . g$25192) (flatan . g$25191) (flasin . g$25190) (flacos . g$25189) (flabs . g$25188) (fl>? . g$25187) (fl>=? . g$25186) (fl=? . g$25185) (fl<? . g$25184) (fl<=? . g$25183) (fl/ . g$25182) (fl- . g$25181) (fl+ . g$25180) (fl* . g$25179) (fixnum->flonum . g$25178) (fxzero? . g$25177) (fxxor . g$25176) (fxrotate-bit-field . g$25175) (fxreverse-bit-field . g$25174) (fxpositive? . g$25173) (fxodd? . g$25172) (fxnot . g$25171) (fxnegative? . g$25170) (fxmod0 . g$25169) (fxmod . g$25168) (fxmin . g$25167) (fxmax . g$25166) (fxlength . g$25165) (fxior . g$25164) (fxif . g$25163) (fxfirst-bit-set . g$25162) (fxeven? . g$25161) (fxdiv0-and-mod0 . g$25160) (fxdiv0 . g$25159) (fxdiv-and-mod . g$25158) (fxdiv . g$25157) (fxcopy-bit-field . g$25156) (fxcopy-bit . g$25155) (fxbit-set? . g$25154) (fxbit-field . g$25153) (fxbit-count . g$25152) (fxarithmetic-shift-right . g$25151) (fxarithmetic-shift-left . g$25150) (fxarithmetic-shift . g$25149) (fxand . g$25148) (fx>? . g$25147) (fx>=? . g$25146) (fx=? . g$25145) (fx<? . g$25144) (fx<=? . g$25143) (fx-/carry . g$25142) (fx- . g$25141) (fx+/carry . g$25140) (fx+ . g$25139) (fx*/carry . g$25138) (fx* . g$25137) (greatest-fixnum . g$25136) (least-fixnum . g$25135) (fixnum-width . g$25134) (fixnum? . g$25133) (bitwise-rotate-bit-field . g$25132) (bitwise-reverse-bit-field . g$25131) (bitwise-length . g$25130) (bitwise-if . g$25129) (bitwise-first-bit-set . g$25128) (bitwise-copy-bit-field . g$25127) (bitwise-copy-bit . g$25126) (bitwise-bit-set? . g$25125) (bitwise-bit-field . g$25124) (bitwise-bit-count . g$25123) (bitwise-xor . g$25122) (bitwise-ior . g$25121) (bitwise-and . g$25120) (bitwise-not . g$25119) (bitwise-arithmetic-shift-right . g$25118) (bitwise-arithmetic-shift-left . g$25117) (bitwise-arithmetic-shift . g$25116) (zero? . g$25115) (vector? . g$25114) (vector-set! . g$25113) (vector-ref . g$25112) (vector-map . g$25111) (vector-length . g$25110) (vector-for-each . g$25109) (vector-fill! . g$25108) (vector->list . g$25107) (vector . g$25106) (values . g$25105) (truncate . g$25104) (tan . g$25103) (symbol? . g$25102) (symbol=? . g$25101) (symbol->string . g$25100) (substring . g$25099) (string? . g$25098) (string>? . g$25097) (string>=? . g$25096) (string=? . g$25095) (string<? . g$25094) (string<=? . g$25093) (string-ref . g$25092) (string-length . g$25091) (string-for-each . g$25090) (string-copy . g$25089) (string-append . g$25088) (string->symbol . g$25087) (string->number . g$25086) (string->list . g$25085) (string . g$25084) (sqrt . g$25083) (sin . g$25082) (round . g$25081) (reverse . g$25080) (real? . g$25079) (real-valued? . g$25078) (real-part . g$25077) (rationalize . g$25076) (rational? . g$25075) (rational-valued? . g$25074) (procedure? . g$25073) (positive? . g$25072) (pair? . g$25071) (odd? . g$25070) (numerator . g$25069) (number? . g$25068) (number->string . g$25067) (null? . g$25066) (not . g$25065) (negative? . g$25064) (nan? . g$25063) (min . g$25062) (max . g$25061) (map . g$25060) (make-vector . g$25059) (make-string . g$25058) (make-rectangular . g$25057) (make-polar . g$25056) (magnitude . g$25055) (log . g$25054) (list? . g$25053) (list-tail . g$25052) (list-ref . g$25051) (list->vector . g$25050) (list->string . g$25049) (list . g$25048) (length . g$25047) (lcm . g$25046) (integer? . g$25045) (integer-valued? . g$25044) (integer->char . g$25043) (infinite? . g$25042) (inexact? . g$25041) (inexact . g$25040) (imag-part . g$25039) (gcd . g$25038) (for-each . g$25037) (floor . g$25036) (finite? . g$25035) (expt . g$25034) (exp . g$25033) (exact? . g$25032) (exact-integer-sqrt . g$25031) (exact . g$25030) (even? . g$25029) (error . g$25028) (eqv? . g$25027) (equal? . g$25026) (eq? . g$25025) (dynamic-wind . g$25024) (div0-and-mod0 . g$25023) (mod0 . g$25022) (div0 . g$25021) (div-and-mod . g$25020) (mod . g$25019) (div . g$25018) (denominator . g$25017) (cos . g$25016) (cons . g$25015) (complex? . g$25014) (char? . g$25013) (char>? . g$25012) (char>=? . g$25011) (char=? . g$25010) (char<? . g$25009) (char<=? . g$25008) (char->integer . g$25007) (ceiling . g$25006) (call-with-values . g$25005) (call/cc . g$25004) (call-with-current-continuation . g$25003) (cddddr . g$25002) (cdddar . g$25001) (cddadr . g$25000) (cddaar . g$24999) (cdaddr . g$24998) (cdadar . g$24997) (cdaadr . g$24996) (cdaaar . g$24995) (cadddr . g$24994) (caddar . g$24993) (cadadr . g$24992) (cadaar . g$24991) (caaddr . g$24990) (caadar . g$24989) (caaadr . g$24988) (caaaar . g$24987) (cdddr . g$24986) (cddar . g$24985) (cdadr . g$24984) (cdaar . g$24983) (caddr . g$24982) (cadar . g$24981) (caadr . g$24980) (caaar . g$24979) (cddr . g$24978) (cdar . g$24977) (cadr . g$24976) (caar . g$24975) (cdr . g$24974) (car . g$24973) (boolean? . g$24972) (boolean=? . g$24971) (atan . g$24970) (assertion-violation . g$24969) (asin . g$24968) (apply . g$24967) (append . g$24966) (angle . g$24965) (acos . g$24964) (abs . g$24963) (/ . g$24962) (* . g$24961) (- . g$24960) (+ . g$24959) (>= . g$24958) (> . g$24957) (= . g$24956) (<= . g$24955) (< . g$24954) (let*-values . g$24953) (&no-nans . g$24952) (&no-infinities . g$24951) (&i/o-encoding . g$24950) (&i/o-decoding . g$24949) (&i/o-port . g$24948) (&i/o-file-does-not-exist . g$24947) (&i/o-file-already-exists . g$24946) (&i/o-file-is-read-only . g$24945) (&i/o-file-protection . g$24944) (&i/o-filename . g$24943) (&i/o-invalid-position . g$24942) (&i/o-write . g$24941) (&i/o-read . g$24940) (&i/o . g$24939) (&undefined . g$24938) (&syntax . g$24937) (&lexical . g$24936) (&implementation . g$24935) (&non . g$24934) (&who . g$24933) (&irritants . g$24932) (&assertion . g$24931) (&violation . g$24930) (&error . g$24929) (&serious . g$24928) (&warning . g$24927) (&message . g$24926) (&condition . g$24925) (define-condition-type . g$24924) (define-enumeration . g$24923) (define-record-type . g$24922) (parent-rtd . g$24921) (nongenerative . g$24920) (opaque . g$24919) (sealed . g$24918) (protocol . g$24917) (parent . g$24916) (immutable . g$24915) (mutable . g$24914) (fields . g$24913) (error-handling-mode . g$24912) (file-options . g$24911) (buffer-mode . g$24910) (eol-style . g$24909) (guard . g$24908) (trace-define . g$24907) (trace-lambda . g$24906) (unsyntax-splicing . g$24905) (unsyntax . g$24904) (unquote-splicing . g$24903) (unquote . g$24902) (_ . g$24901) (else . g$24900) (=> . g$24899) (... . g$24898) (assert . g$24897) (endianness . g$24896) (delay . g$24895) (time . g$24894) (or . g$24893) (and . g$24892) (do . g$24891) (cond . g$24890) (let* . g$24889) (let . g$24888) (identifier-syntax . g$24887) (with-syntax . g$24886) (quasisyntax . g$24885) (quasiquote . g$24884) (syntax-rules . g$24883) (include . g$24882) (define-struct . g$24881) (record-constructor-descriptor . g$24880) (record-type-descriptor . g$24879) (let-values . g$24878) (case . g$24877) (parameterize . g$24876) (unless . g$24875) (when . g$24874) (if . g$24873) (letrec* . g$24872) (letrec . g$24871) (type-descriptor . g$24870) (case-lambda . g$24869) (lambda . g$24868) (syntax . g$24867) (syntax-case . g$24866) (quote . g$24865) (foreign-call . g$24864) (letrec-syntax . g$24863) (let-syntax . g$24862) (set! . g$24861) (import . g$24860) (begin . g$24859) (module . g$24858) (define-syntax . g$24857) (define . g$24856)) '((g$25566 core-prim . eval-r6rs-top-level-hook) (g$15168 core-prim . syntax-error) (g$15035 core-prim . syntax-dispatch) (g$25565 core-prim . pretty-print) (g$25564 core-prim . eval-core) (g$25563 core-prim . set-symbol-value!) (g$25562 core-prim . symbol-value) (g$25561 core-prim . gensym) (g$25560 core-prim . void) (g$25559 core-prim . load) (g$25558 core-prim . interaction-environment) (g$25557 core-prim . char-ready?) (g$25556 core-prim . string-upcase) (g$25555 core-prim . string-titlecase) (g$25554 core-prim . string-normalize-nfkd) (g$25553 core-prim . string-normalize-nfkc) (g$25552 core-prim . string-normalize-nfd) (g$25551 core-prim . string-normalize-nfc) (g$25550 core-prim . string-foldcase) (g$25549 core-prim . string-downcase) (g$25548 core-prim . string-ci>?) (g$25547 core-prim . string-ci>=?) (g$25546 core-prim . string-ci=?) (g$25545 core-prim . string-ci<?) (g$25544 core-prim . string-ci<=?) (g$25543 core-prim . char-whitespace?) (g$25542 core-prim . char-upper-case?) (g$25541 core-prim . char-title-case?) (g$25540 core-prim . char-numeric?) (g$25539 core-prim . char-lower-case?) (g$25538 core-prim . char-general-category) (g$25537 core-prim . char-upcase) (g$25536 core-prim . char-titlecase) (g$25535 core-prim . char-foldcase) (g$25534 core-prim . char-downcase) (g$25533 core-prim . char-ci>?) (g$25532 core-prim . char-ci>=?) (g$25531 core-prim . char-ci=?) (g$25530 core-prim . char-ci<?) (g$25529 core-prim . char-ci<=?) (g$25528 core-prim . char-alphabetic?) (g$14577 core-prim . make-variable-transformer) (g$15170 core-prim . identifier?) (g$15162 core-prim . generate-temporaries) (g$15164 core-prim . free-identifier=?) (g$15174 core-prim . syntax->datum) (g$15172 core-prim . datum->syntax) (g$15166 core-prim . bound-identifier=?) (g$25527 core-prim . record-type-descriptor?) (g$25526 core-prim . record-predicate) (g$25525 core-prim . record-mutator) (g$25524 core-prim . record-constructor) (g$25523 core-prim . record-accessor) (g$25522 core-prim . make-record-type-descriptor) (g$25521 core-prim . make-record-constructor-descriptor) (g$25520 core-prim . record?) (g$25519 core-prim . record-type-uid) (g$25518 core-prim . record-type-sealed?) (g$25517 core-prim . record-type-parent) (g$25516 core-prim . record-type-opaque?) (g$25515 core-prim . record-type-name) (g$25514 core-prim . record-type-generative?) (g$25513 core-prim . record-type-field-names) (g$25512 core-prim . record-rtd) (g$25511 core-prim . record-field-mutable?) (g$25510 core-prim . delete-file) (g$25509 core-prim . file-exists?) (g$25508 core-prim . vector-sort!) (g$25507 core-prim . vector-sort) (g$25506 core-prim . list-sort) (g$25505 core-prim . symbol-hash) (g$25504 core-prim . string-ci-hash) (g$25503 core-prim . string-hash) (g$25502 core-prim . equal-hash) (g$25501 core-prim . hashtable-equivalence-function) (g$25500 core-prim . make-hashtable) (g$25499 core-prim . hashtable-hash-function) (g$25498 core-prim . make-eqv-hashtable) (g$25497 core-prim . make-eq-hashtable) (g$25496 core-prim . hashtable?) (g$25495 core-prim . hashtable-update!) (g$25494 core-prim . hashtable-size) (g$25493 core-prim . hashtable-set!) (g$25492 core-prim . hashtable-ref) (g$25491 core-prim . hashtable-mutable?) (g$25490 core-prim . hashtable-keys) (g$25489 core-prim . hashtable-entries) (g$25488 core-prim . hashtable-delete!) (g$25487 core-prim . hashtable-copy) (g$25486 core-prim . hashtable-contains?) (g$25485 core-prim . hashtable-clear!) (g$25484 core-prim . call-with-output-file) (g$25483 core-prim . call-with-input-file) (g$25482 core-prim . write-char) (g$25481 core-prim . write) (g$25480 core-prim . with-output-to-file) (g$25479 core-prim . with-input-from-file) (g$25478 core-prim . read-char) (g$25477 core-prim . read) (g$25476 core-prim . peek-char) (g$25475 core-prim . open-output-file) (g$25474 core-prim . open-input-file) (g$25473 core-prim . newline) (g$25472 core-prim . display) (g$25471 core-prim . close-output-port) (g$25470 core-prim . close-input-port) (g$25469 core-prim . eof-object?) (g$25468 core-prim . eof-object) (g$25467 core-prim . current-error-port) (g$25466 core-prim . current-output-port) (g$25465 core-prim . current-input-port) (g$25464 core-prim . output-port?) (g$25463 core-prim . input-port?) (g$25462 core-prim . utf-8-codec) (g$25461 core-prim . utf-16-codec) (g$25460 core-prim . transcoder-error-handling-mode) (g$25459 core-prim . transcoder-eol-style) (g$25458 core-prim . transcoder-codec) (g$25457 core-prim . transcoded-port) (g$25456 core-prim . textual-port?) (g$25455 core-prim . string->bytevector) (g$25454 core-prim . standard-output-port) (g$25453 core-prim . standard-input-port) (g$25452 core-prim . standard-error-port) (g$25451 core-prim . set-port-position!) (g$25450 core-prim . put-u8) (g$25449 core-prim . put-string) (g$25448 core-prim . put-datum) (g$25447 core-prim . put-char) (g$25446 core-prim . put-bytevector) (g$25445 core-prim . port?) (g$25444 core-prim . port-transcoder) (g$25443 core-prim . port-position) (g$25442 core-prim . port-has-set-port-position!?) (g$25441 core-prim . port-has-port-position?) (g$25440 core-prim . port-eof?) (g$25439 core-prim . output-port-buffer-mode) (g$25438 core-prim . open-string-output-port) (g$25437 core-prim . open-string-input-port) (g$25436 core-prim . open-file-output-port) (g$25435 core-prim . open-file-input/output-port) (g$25434 core-prim . open-file-input-port) (g$25433 core-prim . open-bytevector-output-port) (g$25432 core-prim . open-bytevector-input-port) (g$25431 core-prim . native-transcoder) (g$25430 core-prim . native-eol-style) (g$25429 core-prim . make-transcoder) (g$25428 core-prim . latin-1-codec) (g$25427 core-prim . make-i/o-write-error) (g$25426 core-prim . make-i/o-read-error) (g$25425 core-prim . make-i/o-port-error) (g$25424 core-prim . make-i/o-invalid-position-error) (g$25423 core-prim . make-i/o-filename-error) (g$25422 core-prim . make-i/o-file-protection-error) (g$25421 core-prim . make-i/o-file-is-read-only-error) (g$25420 core-prim . make-i/o-file-does-not-exist-error) (g$25419 core-prim . make-i/o-file-already-exists-error) (g$25418 core-prim . make-i/o-error) (g$25417 core-prim . make-i/o-encoding-error) (g$25416 core-prim . make-i/o-decoding-error) (g$25415 core-prim . make-custom-textual-output-port) (g$25414 core-prim . make-custom-textual-input/output-port) (g$25413 core-prim . make-custom-textual-input-port) (g$25412 core-prim . make-custom-binary-output-port) (g$25411 core-prim . make-custom-binary-input/output-port) (g$25410 core-prim . make-custom-binary-input-port) (g$25409 core-prim . make-bytevector) (g$25408 core-prim . lookahead-u8) (g$25407 core-prim . lookahead-char) (g$25406 core-prim . i/o-write-error?) (g$25405 core-prim . i/o-read-error?) (g$25404 core-prim . i/o-port-error?) (g$25403 core-prim . i/o-invalid-position-error?) (g$25402 core-prim . i/o-filename-error?) (g$25401 core-prim . i/o-file-protection-error?) (g$25400 core-prim . i/o-file-is-read-only-error?) (g$25399 core-prim . i/o-file-does-not-exist-error?) (g$25398 core-prim . i/o-file-already-exists-error?) (g$25397 core-prim . i/o-error?) (g$25396 core-prim . i/o-error-port) (g$25395 core-prim . i/o-error-filename) (g$25394 core-prim . i/o-encoding-error?) (g$25393 core-prim . i/o-encoding-error-char) (g$25392 core-prim . i/o-decoding-error?) (g$25391 core-prim . get-u8) (g$25390 core-prim . get-string-n!) (g$25389 core-prim . get-string-n) (g$25388 core-prim . get-string-all) (g$25387 core-prim . get-line) (g$25386 core-prim . get-datum) (g$25385 core-prim . get-char) (g$25384 core-prim . get-bytevector-some) (g$25383 core-prim . get-bytevector-n!) (g$25382 core-prim . get-bytevector-n) (g$25381 core-prim . get-bytevector-all) (g$25380 core-prim . flush-output-port) (g$25379 core-prim . close-port) (g$25378 core-prim . scheme-report-environment) (g$25377 core-prim . quotient) (g$15142 core-prim . null-environment) (g$25376 core-prim . remainder) (g$25375 core-prim . modulo) (g$25374 core-prim . inexact->exact) (g$25373 core-prim . force) (g$25372 core-prim . exact->inexact) (g$25371 core-prim . exit) (g$25370 core-prim . command-line) (g$25369 core-prim . string-fill!) (g$25368 core-prim . string-set!) (g$25367 core-prim . set-cdr!) (g$25366 core-prim . set-car!) (g$25365 core-prim . remove) (g$25364 core-prim . remv) (g$25363 core-prim . remp) (g$25362 core-prim . remq) (g$25361 core-prim . partition) (g$25360 core-prim . memv) (g$25359 core-prim . memq) (g$25358 core-prim . memp) (g$25357 core-prim . member) (g$25356 core-prim . exists) (g$25355 core-prim . for-all) (g$25354 core-prim . fold-right) (g$25353 core-prim . fold-left) (g$25352 core-prim . find) (g$25351 core-prim . filter) (g$25350 core-prim . cons*) (g$25349 core-prim . assv) (g$25348 core-prim . assq) (g$25347 core-prim . assp) (g$25346 core-prim . assoc) (g$25345 core-prim . call-with-string-output-port) (g$25344 core-prim . call-with-port) (g$25343 core-prim . call-with-bytevector-output-port) (g$25342 core-prim . bytevector->string) (g$25341 core-prim . buffer-mode?) (g$25340 core-prim . binary-port?) (g$25339 core-prim . with-exception-handler) (g$25338 core-prim . raise-continuable) (g$25337 core-prim . raise) (g$15148 core-prim . eval) (g$15140 core-prim . environment) (g$25336 core-prim . make-enumeration) (g$25335 core-prim . enum-set=?) (g$25334 core-prim . enum-set-universe) (g$25333 core-prim . enum-set-union) (g$25332 core-prim . enum-set-subset?) (g$25331 core-prim . enum-set-projection) (g$25330 core-prim . enum-set-member?) (g$25329 core-prim . enum-set-intersection) (g$25328 core-prim . enum-set-indexer) (g$25327 core-prim . enum-set-difference) (g$25326 core-prim . enum-set-constructor) (g$25325 core-prim . enum-set-complement) (g$25324 core-prim . enum-set->list) (g$25323 core-prim . who-condition?) (g$25322 core-prim . warning?) (g$25321 core-prim . violation?) (g$25320 core-prim . undefined-violation?) (g$25319 core-prim . syntax-violation?) (g$25318 core-prim . syntax-violation-subform) (g$25317 core-prim . syntax-violation-form) (g$25316 core-prim . syntax-violation) (g$25315 core-prim . simple-conditions) (g$25314 core-prim . serious-condition?) (g$25313 core-prim . non-continuable-violation?) (g$25312 core-prim . &non-continuable) (g$25311 core-prim . message-condition?) (g$25310 core-prim . make-who-condition) (g$25309 core-prim . make-warning) (g$25308 core-prim . make-violation) (g$25307 core-prim . make-undefined-violation) (g$25306 core-prim . make-syntax-violation) (g$25305 core-prim . make-serious-condition) (g$25304 core-prim . make-non-continuable-violation) (g$25303 core-prim . make-message-condition) (g$25302 core-prim . make-lexical-violation) (g$25301 core-prim . make-irritants-condition) (g$25300 core-prim . make-implementation-restriction-violation) (g$25299 core-prim . make-error) (g$25298 core-prim . make-assertion-violation) (g$25297 core-prim . lexical-violation?) (g$25296 core-prim . irritants-condition?) (g$25295 core-prim . implementation-restriction-violation?) (g$25294 core-prim . &implementation-restriction) (g$25293 core-prim . error?) (g$25292 core-prim . condition-who) (g$25291 core-prim . condition-predicate) (g$25290 core-prim . condition-message) (g$25289 core-prim . condition-irritants) (g$25288 core-prim . condition-accessor) (g$25287 core-prim . condition) (g$25286 core-prim . assertion-violation?) (g$25285 core-prim . condition?) (g$25284 core-prim . utf32->string) (g$25283 core-prim . utf16->string) (g$25282 core-prim . utf8->string) (g$25281 core-prim . uint-list->bytevector) (g$25280 core-prim . u8-list->bytevector) (g$25279 core-prim . string->utf8) (g$25278 core-prim . string->utf32) (g$25277 core-prim . string->utf16) (g$25276 core-prim . sint-list->bytevector) (g$25275 core-prim . native-endianness) (g$25274 core-prim . bytevector?) (g$25273 core-prim . bytevector=?) (g$25272 core-prim . bytevector-uint-set!) (g$25271 core-prim . bytevector-uint-ref) (g$25270 core-prim . bytevector-u8-set!) (g$25269 core-prim . bytevector-u8-ref) (g$25268 core-prim . bytevector-u64-set!) (g$25267 core-prim . bytevector-u64-ref) (g$25266 core-prim . bytevector-u64-native-set!) (g$25265 core-prim . bytevector-u64-native-ref) (g$25264 core-prim . bytevector-u32-set!) (g$25263 core-prim . bytevector-u32-ref) (g$25262 core-prim . bytevector-u32-native-set!) (g$25261 core-prim . bytevector-u32-native-ref) (g$25260 core-prim . bytevector-u16-set!) (g$25259 core-prim . bytevector-u16-ref) (g$25258 core-prim . bytevector-u16-native-set!) (g$25257 core-prim . bytevector-u16-native-ref) (g$25256 core-prim . bytevector-sint-set!) (g$25255 core-prim . bytevector-sint-ref) (g$25254 core-prim . bytevector-s8-set!) (g$25253 core-prim . bytevector-s8-ref) (g$25252 core-prim . bytevector-s64-set!) (g$25251 core-prim . bytevector-s64-ref) (g$25250 core-prim . bytevector-s64-native-set!) (g$25249 core-prim . bytevector-s64-native-ref) (g$25248 core-prim . bytevector-s32-set!) (g$25247 core-prim . bytevector-s32-ref) (g$25246 core-prim . bytevector-s32-native-set!) (g$25245 core-prim . bytevector-s32-native-ref) (g$25244 core-prim . bytevector-s16-set!) (g$25243 core-prim . bytevector-s16-ref) (g$25242 core-prim . bytevector-s16-native-set!) (g$25241 core-prim . bytevector-s16-native-ref) (g$25240 core-prim . bytevector-length) (g$25239 core-prim . bytevector-ieee-single-ref) (g$25238 core-prim . bytevector-ieee-single-native-set!) (g$25237 core-prim . bytevector-ieee-single-native-ref) (g$25236 core-prim . bytevector-ieee-double-ref) (g$25235 core-prim . bytevector-ieee-double-native-set!) (g$25234 core-prim . bytevector-ieee-double-native-ref) (g$25233 core-prim . bytevector-fill!) (g$25232 core-prim . bytevector-copy!) (g$25231 core-prim . bytevector-copy) (g$25230 core-prim . bytevector->uint-list) (g$25229 core-prim . bytevector->u8-list) (g$25228 core-prim . bytevector->sint-list) (g$25227 core-prim . no-nans-violation?) (g$25226 core-prim . no-infinities-violation?) (g$25225 core-prim . make-no-nans-violation) (g$25224 core-prim . make-no-infinities-violation) (g$25223 core-prim . real->flonum) (g$25222 core-prim . flzero?) (g$25221 core-prim . fltruncate) (g$25220 core-prim . fltan) (g$25219 core-prim . flsqrt) (g$25218 core-prim . flsin) (g$25217 core-prim . flround) (g$25216 core-prim . flpositive?) (g$25215 core-prim . flonum?) (g$25214 core-prim . flodd?) (g$25213 core-prim . flnumerator) (g$25212 core-prim . flnegative?) (g$25211 core-prim . flnan?) (g$25210 core-prim . flmod0) (g$25209 core-prim . flmod) (g$25208 core-prim . flmin) (g$25207 core-prim . flmax) (g$25206 core-prim . fllog) (g$25205 core-prim . flinteger?) (g$25204 core-prim . flinfinite?) (g$25203 core-prim . flfloor) (g$25202 core-prim . flfinite?) (g$25201 core-prim . flexpt) (g$25200 core-prim . flexp) (g$25199 core-prim . fleven?) (g$25198 core-prim . fldiv0-and-mod0) (g$25197 core-prim . fldiv0) (g$25196 core-prim . fldiv-and-mod) (g$25195 core-prim . fldiv) (g$25194 core-prim . fldenominator) (g$25193 core-prim . flcos) (g$25192 core-prim . flceiling) (g$25191 core-prim . flatan) (g$25190 core-prim . flasin) (g$25189 core-prim . flacos) (g$25188 core-prim . flabs) (g$25187 core-prim . fl>?) (g$25186 core-prim . fl>=?) (g$25185 core-prim . fl=?) (g$25184 core-prim . fl<?) (g$25183 core-prim . fl<=?) (g$25182 core-prim . fl/) (g$25181 core-prim . fl-) (g$25180 core-prim . fl+) (g$25179 core-prim . fl*) (g$25178 core-prim . fixnum->flonum) (g$25177 core-prim . fxzero?) (g$25176 core-prim . fxxor) (g$25175 core-prim . fxrotate-bit-field) (g$25174 core-prim . fxreverse-bit-field) (g$25173 core-prim . fxpositive?) (g$25172 core-prim . fxodd?) (g$25171 core-prim . fxnot) (g$25170 core-prim . fxnegative?) (g$25169 core-prim . fxmod0) (g$25168 core-prim . fxmod) (g$25167 core-prim . fxmin) (g$25166 core-prim . fxmax) (g$25165 core-prim . fxlength) (g$25164 core-prim . fxior) (g$25163 core-prim . fxif) (g$25162 core-prim . fxfirst-bit-set) (g$25161 core-prim . fxeven?) (g$25160 core-prim . fxdiv0-and-mod0) (g$25159 core-prim . fxdiv0) (g$25158 core-prim . fxdiv-and-mod) (g$25157 core-prim . fxdiv) (g$25156 core-prim . fxcopy-bit-field) (g$25155 core-prim . fxcopy-bit) (g$25154 core-prim . fxbit-set?) (g$25153 core-prim . fxbit-field) (g$25152 core-prim . fxbit-count) (g$25151 core-prim . fxarithmetic-shift-right) (g$25150 core-prim . fxarithmetic-shift-left) (g$25149 core-prim . fxarithmetic-shift) (g$25148 core-prim . fxand) (g$25147 core-prim . fx>?) (g$25146 core-prim . fx>=?) (g$25145 core-prim . fx=?) (g$25144 core-prim . fx<?) (g$25143 core-prim . fx<=?) (g$25142 core-prim . fx-/carry) (g$25141 core-prim . fx-) (g$25140 core-prim . fx+/carry) (g$25139 core-prim . fx+) (g$25138 core-prim . fx*/carry) (g$25137 core-prim . fx*) (g$25136 core-prim . greatest-fixnum) (g$25135 core-prim . least-fixnum) (g$25134 core-prim . fixnum-width) (g$25133 core-prim . fixnum?) (g$25132 core-prim . bitwise-rotate-bit-field) (g$25131 core-prim . bitwise-reverse-bit-field) (g$25130 core-prim . bitwise-length) (g$25129 core-prim . bitwise-if) (g$25128 core-prim . bitwise-first-bit-set) (g$25127 core-prim . bitwise-copy-bit-field) (g$25126 core-prim . bitwise-copy-bit) (g$25125 core-prim . bitwise-bit-set?) (g$25124 core-prim . bitwise-bit-field) (g$25123 core-prim . bitwise-bit-count) (g$25122 core-prim . bitwise-xor) (g$25121 core-prim . bitwise-ior) (g$25120 core-prim . bitwise-and) (g$25119 core-prim . bitwise-not) (g$25118 core-prim . bitwise-arithmetic-shift-right) (g$25117 core-prim . bitwise-arithmetic-shift-left) (g$25116 core-prim . bitwise-arithmetic-shift) (g$25115 core-prim . zero?) (g$25114 core-prim . vector?) (g$25113 core-prim . vector-set!) (g$25112 core-prim . vector-ref) (g$25111 core-prim . vector-map) (g$25110 core-prim . vector-length) (g$25109 core-prim . vector-for-each) (g$25108 core-prim . vector-fill!) (g$25107 core-prim . vector->list) (g$25106 core-prim . vector) (g$25105 core-prim . values) (g$25104 core-prim . truncate) (g$25103 core-prim . tan) (g$25102 core-prim . symbol?) (g$25101 core-prim . symbol=?) (g$25100 core-prim . symbol->string) (g$25099 core-prim . substring) (g$25098 core-prim . string?) (g$25097 core-prim . string>?) (g$25096 core-prim . string>=?) (g$25095 core-prim . string=?) (g$25094 core-prim . string<?) (g$25093 core-prim . string<=?) (g$25092 core-prim . string-ref) (g$25091 core-prim . string-length) (g$25090 core-prim . string-for-each) (g$25089 core-prim . string-copy) (g$25088 core-prim . string-append) (g$25087 core-prim . string->symbol) (g$25086 core-prim . string->number) (g$25085 core-prim . string->list) (g$25084 core-prim . string) (g$25083 core-prim . sqrt) (g$25082 core-prim . sin) (g$25081 core-prim . round) (g$25080 core-prim . reverse) (g$25079 core-prim . real?) (g$25078 core-prim . real-valued?) (g$25077 core-prim . real-part) (g$25076 core-prim . rationalize) (g$25075 core-prim . rational?) (g$25074 core-prim . rational-valued?) (g$25073 core-prim . procedure?) (g$25072 core-prim . positive?) (g$25071 core-prim . pair?) (g$25070 core-prim . odd?) (g$25069 core-prim . numerator) (g$25068 core-prim . number?) (g$25067 core-prim . number->string) (g$25066 core-prim . null?) (g$25065 core-prim . not) (g$25064 core-prim . negative?) (g$25063 core-prim . nan?) (g$25062 core-prim . min) (g$25061 core-prim . max) (g$25060 core-prim . map) (g$25059 core-prim . make-vector) (g$25058 core-prim . make-string) (g$25057 core-prim . make-rectangular) (g$25056 core-prim . make-polar) (g$25055 core-prim . magnitude) (g$25054 core-prim . log) (g$25053 core-prim . list?) (g$25052 core-prim . list-tail) (g$25051 core-prim . list-ref) (g$25050 core-prim . list->vector) (g$25049 core-prim . list->string) (g$25048 core-prim . list) (g$25047 core-prim . length) (g$25046 core-prim . lcm) (g$25045 core-prim . integer?) (g$25044 core-prim . integer-valued?) (g$25043 core-prim . integer->char) (g$25042 core-prim . infinite?) (g$25041 core-prim . inexact?) (g$25040 core-prim . inexact) (g$25039 core-prim . imag-part) (g$25038 core-prim . gcd) (g$25037 core-prim . for-each) (g$25036 core-prim . floor) (g$25035 core-prim . finite?) (g$25034 core-prim . expt) (g$25033 core-prim . exp) (g$25032 core-prim . exact?) (g$25031 core-prim . exact-integer-sqrt) (g$25030 core-prim . exact) (g$25029 core-prim . even?) (g$25028 core-prim . error) (g$25027 core-prim . eqv?) (g$25026 core-prim . equal?) (g$25025 core-prim . eq?) (g$25024 core-prim . dynamic-wind) (g$25023 core-prim . div0-and-mod0) (g$25022 core-prim . mod0) (g$25021 core-prim . div0) (g$25020 core-prim . div-and-mod) (g$25019 core-prim . mod) (g$25018 core-prim . div) (g$25017 core-prim . denominator) (g$25016 core-prim . cos) (g$25015 core-prim . cons) (g$25014 core-prim . complex?) (g$25013 core-prim . char?) (g$25012 core-prim . char>?) (g$25011 core-prim . char>=?) (g$25010 core-prim . char=?) (g$25009 core-prim . char<?) (g$25008 core-prim . char<=?) (g$25007 core-prim . char->integer) (g$25006 core-prim . ceiling) (g$25005 core-prim . call-with-values) (g$25004 core-prim . call/cc) (g$25003 core-prim . call-with-current-continuation) (g$25002 core-prim . cddddr) (g$25001 core-prim . cdddar) (g$25000 core-prim . cddadr) (g$24999 core-prim . cddaar) (g$24998 core-prim . cdaddr) (g$24997 core-prim . cdadar) (g$24996 core-prim . cdaadr) (g$24995 core-prim . cdaaar) (g$24994 core-prim . cadddr) (g$24993 core-prim . caddar) (g$24992 core-prim . cadadr) (g$24991 core-prim . cadaar) (g$24990 core-prim . caaddr) (g$24989 core-prim . caadar) (g$24988 core-prim . caaadr) (g$24987 core-prim . caaaar) (g$24986 core-prim . cdddr) (g$24985 core-prim . cddar) (g$24984 core-prim . cdadr) (g$24983 core-prim . cdaar) (g$24982 core-prim . caddr) (g$24981 core-prim . cadar) (g$24980 core-prim . caadr) (g$24979 core-prim . caaar) (g$24978 core-prim . cddr) (g$24977 core-prim . cdar) (g$24976 core-prim . cadr) (g$24975 core-prim . caar) (g$24974 core-prim . cdr) (g$24973 core-prim . car) (g$24972 core-prim . boolean?) (g$24971 core-prim . boolean=?) (g$24970 core-prim . atan) (g$24969 core-prim . assertion-violation) (g$24968 core-prim . asin) (g$24967 core-prim . apply) (g$24966 core-prim . append) (g$24965 core-prim . angle) (g$24964 core-prim . acos) (g$24963 core-prim . abs) (g$24962 core-prim . /) (g$24961 core-prim . *) (g$24960 core-prim . -) (g$24959 core-prim . +) (g$24958 core-prim . >=) (g$24957 core-prim . >) (g$24956 core-prim . =) (g$24955 core-prim . <=) (g$24954 core-prim . <) (g$24953 core-prim . let*-values) (g$24952 $core-rtd &no-nans-rtd &no-nans-rcd) (g$24951 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$24950 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$24949 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$24948 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$24947 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$24946 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$24945 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$24944 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$24943 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$24942 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$24941 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$24940 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$24939 $core-rtd &i/o-rtd &i/o-rcd) (g$24938 $core-rtd &undefined-rtd &undefined-rcd) (g$24937 $core-rtd &syntax-rtd &syntax-rcd) (g$24936 $core-rtd &lexical-rtd &lexical-rcd) (g$24935 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$24934 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$24933 $core-rtd &who-rtd &who-rcd) (g$24932 $core-rtd &irritants-rtd &irritants-rcd) (g$24931 $core-rtd &assertion-rtd &assertion-rcd) (g$24930 $core-rtd &violation-rtd &violation-rcd) (g$24929 $core-rtd &error-rtd &error-rcd) (g$24928 $core-rtd &serious-rtd &serious-rcd) (g$24927 $core-rtd &warning-rtd &warning-rcd) (g$24926 $core-rtd &message-rtd &message-rcd) (g$24925 $core-rtd &condition-rtd &condition-rcd) (g$24924 macro . define-condition-type) (g$24923 macro . define-enumeration) (g$24922 macro . define-record-type) (g$24921 macro . parent-rtd) (g$24920 macro . nongenerative) (g$24919 macro . opaque) (g$24918 macro . sealed) (g$24917 macro . protocol) (g$24916 macro . parent) (g$24915 macro . immutable) (g$24914 macro . mutable) (g$24913 macro . fields) (g$24912 macro . error-handling-mode) (g$24911 macro . file-options) (g$24910 macro . buffer-mode) (g$24909 macro . eol-style) (g$24908 macro . guard) (g$24907 macro . trace-define) (g$24906 macro . trace-lambda) (g$24905 macro . unsyntax-splicing) (g$24904 macro . unsyntax) (g$24903 macro . unquote-splicing) (g$24902 macro . unquote) (g$24901 macro . _) (g$24900 macro . else) (g$24899 macro . =>) (g$24898 macro . ...) (g$24897 macro . assert) (g$24896 macro . endianness) (g$24895 macro . delay) (g$24894 macro . time) (g$24893 macro . or) (g$24892 macro . and) (g$24891 macro . do) (g$24890 macro . cond) (g$24889 macro . let*) (g$24888 macro . let) (g$24887 macro . identifier-syntax) (g$24886 macro . with-syntax) (g$24885 macro . quasisyntax) (g$24884 macro . quasiquote) (g$24883 macro . syntax-rules) (g$24882 macro . include) (g$24881 macro . define-struct) (g$24880 core-macro . record-constructor-descriptor) (g$24879 core-macro . record-type-descriptor) (g$24878 core-macro . let-values) (g$24877 core-macro . case) (g$24876 core-macro . parameterize) (g$24875 core-macro . unless) (g$24874 core-macro . when) (g$24873 core-macro . if) (g$24872 core-macro . letrec*) (g$24871 core-macro . letrec) (g$24870 core-macro . type-descriptor) (g$24869 core-macro . case-lambda) (g$24868 core-macro . lambda) (g$24867 core-macro . syntax) (g$24866 core-macro . syntax-case) (g$24865 core-macro . quote) (g$24864 core-macro . foreign-call) (g$24863 letrec-syntax) (g$24862 let-syntax) (g$24861 set!) (g$24860 import) (g$24859 begin) (g$24858 module) (g$24857 define-syntax) (g$24856 define)) values values '#f) (g$g$install-library$13808$14107 'g$25600 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g$25565) (eval-core . g$25564) (set-symbol-value! . g$25563) (symbol-value . g$25562) (gensym . g$25561) (void . g$25560)) '() values values '#f))

((case-lambda ((g$load-r6rs-top-level$24838) (begin (set! g$load-r6rs-top-level$24838 (case-lambda ((g$filename$24840) ((case-lambda ((g$x*$24842) (g$g$eval-r6rs-top-level$15175$24648 g$x*$24842))) (with-input-from-file g$filename$24840 (case-lambda (() (letrec ((g$f$24844 (case-lambda (() ((case-lambda ((g$x$24846) (if (eof-object? g$x$24846) '() (cons g$x$24846 (g$f$24844))))) (read)))))) (g$f$24844))))))))) (begin (set! g$g$load-r6rs-top-level$24838$24854 g$load-r6rs-top-level$24838) ((case-lambda ((g$args$24848) (begin (if (= (length g$args$24848) '2) (void) (begin (display '"provide a script name argument
") (exit '17))) ((case-lambda ((g$script-name$24850 g$args$24851) (g$load-r6rs-top-level$24838 (car g$args$24851)))) (car g$args$24848) (cdr g$args$24848))))) (command-line)) (exit '0) g$g$eval-r6rs-top-level$15175$24648)))) '#f)

