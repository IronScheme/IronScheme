--- Ast/ActionExpression.cs	Wed Sep 26 22:37:30 2007
+++ Ast/ActionExpression.cs	Thu Sep 27 18:53:18 2007
@@ -117,7 +117,15 @@
 
 
             // Emit the site invoke
-            cg.EmitCall(site.Type, "Invoke");
+            cg.EmitCall(site.Type, "Invoke", tailcall);
+        }
+
+        bool tailcall = false;
+
+        public bool TailCall
+        {
+          get { return tailcall; }
+          set { tailcall = false; }
         }
 
         public override void Walk(Walker walker) {
--- Ast/BoundAssignment.cs	Wed Sep 26 22:37:30 2007
+++ Ast/BoundAssignment.cs	Thu Sep 27 18:53:18 2007
@@ -49,7 +49,7 @@
             set {
                 Debug.Assert(value != null);
                 Debug.Assert(value.Variable == _variable);
-                Debug.Assert(_vr == null || (object)_vr == (object)value);
+                Debug.Assert(_vr == null || _vr.Equals(value));
                 _vr = value;
             }
         }
--- Ast/BoundExpression.cs	Wed Sep 26 22:37:30 2007
+++ Ast/BoundExpression.cs	Thu Sep 27 18:53:18 2007
@@ -40,7 +40,7 @@
             set {
                 Debug.Assert(value.Variable == _variable);
                 // the _vr == value is true for DAGs
-                Debug.Assert(_vr == null || _vr == value);
+                Debug.Assert(_vr == null || _vr.Equals(value));
                 _vr = value;
             }
         }
--- Ast/ClosureBinder.cs	Wed Sep 26 22:37:30 2007
+++ Ast/ClosureBinder.cs	Thu Sep 27 18:53:18 2007
@@ -209,7 +209,7 @@
                 // Global variables as local
                 if (r.Variable.Kind == Variable.VariableKind.Global || 
                     (r.Variable.Kind == Variable.VariableKind.Local && r.Variable.Block.IsGlobal)) {
-                    Debug.Assert(r.Variable.Block == _global);
+                    //Debug.Assert(r.Variable.Block == _global);
                     continue;
                 }
 
--- Ast/MemberExpression.cs	Wed Sep 26 22:37:30 2007
+++ Ast/MemberExpression.cs	Thu Sep 27 18:56:02 2007
@@ -59,11 +59,12 @@
         }
 
         internal override void EmitAddress(CodeGen cg, Type asType) {
-            EmitInstance(cg);
+           //EmitInstance(cg); // the instance is already emitted!
 
             if (asType != Type || _member.MemberType != MemberTypes.Field) {
                 base.EmitAddress(cg, asType);
             } else {
+                EmitInstance(cg); // have to emit here though
                 cg.EmitFieldAddress((FieldInfo)_member);
             }
         }
--- Ast/MethodCallExpression.cs	Wed Sep 26 22:37:30 2007
+++ Ast/MethodCallExpression.cs	Thu Sep 27 18:53:19 2007
@@ -189,12 +189,21 @@
             }
 
             // Emit the actual call
-            cg.EmitCall(_method);
+            cg.EmitCall(_method, tailcall);
 
             if (temp != null) {
                 cg.FreeLocalTmp(temp);
             }
         }
+
+        bool tailcall = false;
+
+        public bool TailCall
+        {
+          get { return tailcall; }
+          set { tailcall = false; }
+        }
+
 
         private void EmitInstance(CodeGen cg) {
             if (!_method.DeclaringType.IsValueType) {
--- Ast/Variable.cs	Wed Sep 26 22:37:32 2007
+++ Ast/Variable.cs	Thu Sep 27 18:53:19 2007
@@ -213,7 +213,7 @@
         /// the variable in the current scope (so that it can be initialized)
         /// </summary>
         private Slot AllocInEnv(CodeGen cg) {
-            Debug.Assert(_storage == null);
+            //Debug.Assert(_storage == null);
             Debug.Assert(_block.EnvironmentFactory != null, "Allocating in environment without environment factory.\nIs HasEnvironment set?");
             _storage = _block.EnvironmentFactory.MakeEnvironmentReference(_name, _type);
             return _storage.CreateSlot(cg.Allocator.GetClosureAccessSlot(_block));
--- Ast/VariableReference.cs	Wed Sep 26 22:37:32 2007
+++ Ast/VariableReference.cs	Thu Sep 27 18:53:19 2007
@@ -47,5 +47,16 @@
         public void CreateSlot(CodeGen cg) {
             _slot = _variable.CreateSlot(cg);
         }
+
+      public override bool Equals(object obj)
+      {
+        VariableReference b = obj as VariableReference;
+        return b.Variable.Name == Variable.Name && b.Variable.Block == Variable.Block;
+      }
+
+      public override int GetHashCode()
+      {
+        return base.GetHashCode();
+      }
     }
 }
--- Generation/CodeGen.cs	Wed Sep 26 22:37:32 2007
+++ Generation/CodeGen.cs	Thu Sep 27 18:53:19 2007
@@ -1209,6 +1209,28 @@
             }
         }
 
+      public void EmitCall(MethodInfo mi, bool tailcall)
+      {
+        Contract.RequiresNotNull(mi, "mi");
+
+        if (tailcall)
+        {
+          Emit(OpCodes.Tailcall);
+        }
+
+        EmitCall(mi);
+      }
+
+      public void EmitCall(Type type, String name, bool tailcall)
+      {
+        Contract.RequiresNotNull(type, "type");
+        Contract.RequiresNotNull(name, "name");
+        if (!type.IsVisible) throw new ArgumentException(String.Format(Resources.TypeMustBeVisible, type.FullName));
+
+        EmitCall(type.GetMethod(name), tailcall);
+      }
+
+
         public void EmitCall(Type type, String name) {
             Contract.RequiresNotNull(type, "type");
             Contract.RequiresNotNull(name, "name");
--- Generation/MethodTarget.cs	Wed Sep 26 22:37:32 2007
+++ Generation/MethodTarget.cs	Thu Sep 27 18:53:19 2007
@@ -54,6 +54,11 @@
             get { return _parameterCount; }
         }
 
+      public bool NeedsContext
+      {
+        get { return _argBuilders.Count > 0 && _argBuilders[0] is ContextArgBuilder; }
+      }
+
         public bool CheckArgs(CodeContext context, object[] args) {
             //if (!instanceBuilder.Check(context, args)) return false;
             //foreach (ArgBuilder arg in argBuilders) {
--- MethodBinder.cs	Wed Sep 26 22:37:26 2007
+++ MethodBinder.cs	Thu Sep 27 18:53:19 2007
@@ -475,11 +475,12 @@
         #endregion
 
         public override string ToString() {
-            string res = "";
-            for (int i = 0; i < _targetSets.Count; i++) {
-                res += _targetSets[i] + Environment.NewLine;
-            }
-            return res;
+          List<string> res = new List<string>();
+          foreach (int key in _targetSets.Keys)
+          {
+            res.Add(_targetSets[key].ToString());
+          }
+          return string.Join(Environment.NewLine, res.ToArray());
         }
     }
 
--- Microsoft.Scripting.csproj	Wed Sep 26 22:37:26 2007
+++ Microsoft.Scripting.csproj	Mon Oct 01 22:32:56 2007
@@ -1,4 +1,4 @@
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <Import Condition=" '$(BuildingTraversal)' == 'true' " Project="..\..\silverlight.settings.targets" />
   <PropertyGroup>
     <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
@@ -10,27 +10,31 @@
     <AppDesignerFolder>Properties</AppDesignerFolder>
     <RootNamespace>Microsoft.Scripting</RootNamespace>
     <AssemblyName>Microsoft.Scripting</AssemblyName>
-    <DocumentationFile>..\..\bin\Release\Microsoft.Scripting.XML</DocumentationFile>
+    <DocumentationFile>bin\Release\Microsoft.Scripting.XML</DocumentationFile>
     <NoWarn>1591</NoWarn>
+    <SccProjectName>%24/IronLisp/IronLisp/Microsoft.Scripting</SccProjectName>
+    <SccLocalPath>.</SccLocalPath>
+    <SccAuxPath>https://tfs04.codeplex.com</SccAuxPath>
+    <SccProvider>{4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}</SccProvider>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'FxCop|AnyCPU' ">
     <DebugType>pdbonly</DebugType>
     <Optimize>true</Optimize>
-    <OutputPath>..\..\Bin\FxCop\</OutputPath>
+    <OutputPath>Bin\FxCop\</OutputPath>
     <DefineConstants>TRACE</DefineConstants>
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
     <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
     <RunCodeAnalysis>true</RunCodeAnalysis>
     <CodeAnalysisRules>-Microsoft.Design#CA2210;-Microsoft.Design#CA1020;-Microsoft.Design#CA1021;-Microsoft.Design#CA1014;-Microsoft.Usage#CA2209</CodeAnalysisRules>
-    <DocumentationFile>..\..\Bin\FxCop\Microsoft.Scripting.xml</DocumentationFile>
+    <DocumentationFile>Bin\FxCop\Microsoft.Scripting.xml</DocumentationFile>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
     <DebugSymbols>true</DebugSymbols>
     <DebugType>full</DebugType>
     <Optimize>false</Optimize>
-    <OutputPath>..\..\Bin\Debug\</OutputPath>
-    <DocumentationFile>..\..\Bin\Debug\Microsoft.Scripting.xml</DocumentationFile>
+    <OutputPath>Bin\Debug\</OutputPath>
+    <DocumentationFile>Bin\Debug\Microsoft.Scripting.xml</DocumentationFile>
     <DefineConstants>DEBUG;TRACE</DefineConstants>
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
@@ -40,8 +44,8 @@
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
     <DebugType>pdbonly</DebugType>
     <Optimize>true</Optimize>
-    <OutputPath>..\..\Bin\Release\</OutputPath>
-    <DocumentationFile>..\..\Bin\Release\Microsoft.Scripting.xml</DocumentationFile>
+    <OutputPath>Bin\Release\</OutputPath>
+    <DocumentationFile>Bin\Release\Microsoft.Scripting.xml</DocumentationFile>
     <DefineConstants>TRACE</DefineConstants>
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
@@ -51,7 +55,7 @@
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Silverlight Debug|AnyCPU' ">
     <DebugSymbols>true</DebugSymbols>
-    <OutputPath>..\..\Bin\Silverlight Debug\</OutputPath>
+    <OutputPath>Bin\Silverlight Debug\</OutputPath>
     <DefineConstants>TRACE;DEBUG;SILVERLIGHT</DefineConstants>
     <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
     <DebugType>full</DebugType>
@@ -59,15 +63,15 @@
     <RunCodeAnalysis>false</RunCodeAnalysis>
     <ErrorReport>prompt</ErrorReport>
     <NoStdLib>true</NoStdLib>
-    <DocumentationFile>..\..\Bin\Silverlight Debug\Microsoft.Scripting.xml</DocumentationFile>
+    <DocumentationFile>Bin\Silverlight Debug\Microsoft.Scripting.xml</DocumentationFile>
     <NoWarn>1591,618</NoWarn>
     <SilverlightBuild>true</SilverlightBuild>
-    <SilverlightSdkPath>..\..\Utilities\Silverlight\x86ret\</SilverlightSdkPath>
+    <SilverlightSdkPath>Utilities\Silverlight\x86ret\</SilverlightSdkPath>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Silverlight Release|AnyCPU' ">
-    <OutputPath>..\..\Bin\Silverlight Release\</OutputPath>
+    <OutputPath>Bin\Silverlight Release\</OutputPath>
     <DefineConstants>TRACE;SILVERLIGHT</DefineConstants>
-    <DocumentationFile>..\..\Bin\Silverlight Release\Microsoft.Scripting.xml</DocumentationFile>
+    <DocumentationFile>Bin\Silverlight Release\Microsoft.Scripting.xml</DocumentationFile>
     <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
     <NoWarn>1591,618</NoWarn>
     <NoStdLib>true</NoStdLib>
@@ -75,7 +79,7 @@
     <PlatformTarget>AnyCPU</PlatformTarget>
     <ErrorReport>prompt</ErrorReport>
     <SilverlightBuild>true</SilverlightBuild>
-    <SilverlightSdkPath>..\..\Utilities\Silverlight\x86ret\</SilverlightSdkPath>
+    <SilverlightSdkPath>Utilities\Silverlight\x86ret\</SilverlightSdkPath>
   </PropertyGroup>
   <ItemGroup>
     <Reference Include="System" Condition=" $(SilverlightBuild) != 'true' " />
--- ModuleGlobalWrapper.cs	Wed Sep 26 22:37:26 2007
+++ ModuleGlobalWrapper.cs	Thu Sep 27 18:53:19 2007
@@ -103,8 +103,16 @@
         }
 
         private string GetStringDisplay(object val) {
+          try
+          {
             return (string)DynamicHelpers.GetDynamicType(val).InvokeUnaryOperator(_context, Operators.ConvertToString, val);
+          }
+          catch (MissingMemberException)
+          {
+            return val == null ? "null" : val.ToString();
+          }
         }
+        
 
         public override string ToString() {
             return String.Format("ModuleGlobal: {0} Value: {1} ({2})",
