--- Ast/ActionExpression.cs	Wed Oct 31 11:40:12 2007
+++ Ast/ActionExpression.cs	Wed Oct 31 20:51:37 2007
@@ -113,7 +113,15 @@
 
 
             // Emit the site invoke
-            cg.EmitCall(site.Type, "Invoke");
+            cg.EmitCall(site.Type, "Invoke", tailcall);
+        }
+
+        bool tailcall = false;
+
+        public bool TailCall
+        {
+          get { return tailcall; }
+          set { tailcall = false; }
         }
     }
 
--- Ast/AstWriter.cs	Wed Oct 31 11:40:12 2007
+++ Ast/AstWriter.cs	Thu Nov 01 20:41:33 2007
@@ -143,7 +143,7 @@
                 }
 #endif
             } else if (ScriptDomainManager.Options.DumpASTs) {
-                StreamWriter sw = new StreamWriter(GetFilePath(descr), true);
+              StreamWriter sw = new StreamWriter(GetFilePath(descr), descr == "unknown_ast");
                 using (sw) {
                     Dump(block, descr, sw);
                 }
--- Ast/BoundAssignment.cs	Wed Oct 31 11:40:12 2007
+++ Ast/BoundAssignment.cs	Tue Nov 06 18:15:19 2007
@@ -45,7 +45,7 @@
             set {
                 Debug.Assert(value != null);
                 Debug.Assert(value.Variable == _variable);
-                Debug.Assert(_vr == null || (object)_vr == (object)value);
+                Debug.Assert(_vr == null || _vr.Equals(value));
                 _vr = value;
             }
         }
@@ -66,12 +66,14 @@
         }
 
         internal override void EmitAddress(CodeGen cg, Type asType) {
+          EmitLocation(cg);
             _value.Emit(cg);
             _vr.Slot.EmitSet(cg);
             _vr.Slot.EmitGetAddr(cg);
         }
 
         public override void Emit(CodeGen cg) {
+          EmitLocation(cg);
             _value.Emit(cg);
             cg.Emit(OpCodes.Dup);
             _vr.Slot.EmitSet(cg);
--- Ast/BoundExpression.cs	Wed Oct 31 11:40:12 2007
+++ Ast/BoundExpression.cs	Wed Oct 31 20:51:37 2007
@@ -40,7 +40,7 @@
             set {
                 Debug.Assert(value.Variable == _variable);
                 // the _vr == value is true for DAGs
-                Debug.Assert(_vr == null || _vr == value);
+                Debug.Assert(_vr == null || _vr.Equals(value));
                 _vr = value;
             }
         }
--- Ast/ClosureBinder.cs	Wed Oct 31 11:40:12 2007
+++ Ast/ClosureBinder.cs	Wed Oct 31 20:51:37 2007
@@ -211,7 +211,7 @@
                 // Global variables as local
                 if (r.Variable.Kind == Variable.VariableKind.Global || 
                     (r.Variable.Kind == Variable.VariableKind.Local && r.Variable.Block.IsGlobal)) {
-                    Debug.Assert(r.Variable.Block == _global);
+                    //Debug.Assert(r.Variable.Block == _global);
                     continue;
                 }
 
--- Ast/CodeBlock.cs	Wed Oct 31 11:40:12 2007
+++ Ast/CodeBlock.cs	Wed Oct 31 20:51:37 2007
@@ -291,7 +291,7 @@
             cg.Emit(OpCodes.Newarr, typeof(SymbolId));
 
             int index = 0;
-            cg.EmitDebugMarker("--- Environment IDs ---");
+            //cg.EmitDebugMarker("--- Environment IDs ---");
 
             foreach (Variable prm in _parameters) {
                 if (prm.Lift) {
@@ -304,7 +304,7 @@
                     EmitSetVariableName(cg, index++, var.Name);
                 }
             }
-            cg.EmitDebugMarker("--- End Environment IDs ---");
+            //cg.EmitDebugMarker("--- End Environment IDs ---");
         }
 
         private static void EmitSetVariableName(CodeGen cg, int index, SymbolId name) {
@@ -344,7 +344,7 @@
         internal EnvironmentSlot EmitEnvironmentAllocation(CodeGen cg) {
             Debug.Assert(_environmentFactory != null);
 
-            cg.EmitDebugMarker("-- ENV ALLOC START --");
+            //cg.EmitDebugMarker("-- ENV ALLOC START --");
 
             _environmentFactory.EmitStorage(cg);
             cg.Emit(OpCodes.Dup);
@@ -358,7 +358,7 @@
 
             _environmentFactory.EmitNewEnvironment(cg);
 
-            cg.EmitDebugMarker("-- ENV ALLOC END --");
+            //cg.EmitDebugMarker("-- ENV ALLOC END --");
 
             return environmentSlot;
         }
@@ -681,7 +681,7 @@
         }
 
         // Return a delegate to execute this block in interpreted mode.
-        internal protected virtual Delegate GetDelegateForInterpreter(CodeContext context, Type delegateType, bool forceWrapperMethod) {
+        public virtual Delegate GetDelegateForInterpreter(CodeContext context, Type delegateType, bool forceWrapperMethod) {
             FlowChecker.Check(this);
 
             bool delayedEmit = context.LanguageContext.Engine.Options.ProfileDrivenCompilation;
--- Ast/Expression.cs	Wed Oct 31 11:40:12 2007
+++ Ast/Expression.cs	Tue Nov 06 18:16:22 2007
@@ -49,6 +49,47 @@
             throw new NotImplementedException();
         }
 
+        private SourceLocation _start;
+        private SourceLocation _end;
+
+
+        public SourceLocation Start
+        {
+          get { return _start; }
+        }
+
+        public SourceLocation End
+        {
+          get { return _end; }
+        }
+
+        public SourceSpan Span
+        {
+          get
+          {
+            return new SourceSpan(_start, _end);
+          }
+        }
+
+        public void SetLoc(SourceSpan span)
+        {
+          _start = span.Start;
+          _end = span.End;
+        }
+
+      bool IsValidLocation
+      {
+        get {return _start.IsValid && _end.IsValid;}
+      }
+
+      protected void EmitLocation(CodeGen cg)
+      {
+        if (IsValidLocation)
+        {
+          cg.EmitPosition(_start, _end);
+        }
+      }
+
         /// <summary>
         /// Generates code for this expression in a value position.
         /// This method will leave the value of the expression
--- Ast/FlowChecker.cs	Wed Oct 31 11:40:12 2007
+++ Ast/FlowChecker.cs	Thu Nov 01 21:08:21 2007
@@ -148,14 +148,22 @@
                     index *= 2;
                     return true;
                 } else {
-                    // locals and parameters must have be tracked, except for global scope
-                    Debug.Assert(
-                        variable.Kind != Variable.VariableKind.Local &&
-                        variable.Kind != Variable.VariableKind.Parameter ||
-                        variable.Lift ||
-                        variable.Block.IsGlobal,
-                        "Untracked local/parameter " + variable.Name.ToString()
-                    );
+                  //if (variable.Name == SymbolTable.StringToId("body")
+                  //  && variable.Kind == Variable.VariableKind.Parameter
+                  //  && variable.Block.Name.StartsWith("define-macro"))
+                  //{
+                  //}
+                  //else
+                  //{
+                  //  // locals and parameters must have be tracked, except for global scope
+                  //  Debug.Assert(
+                  //      variable.Kind != Variable.VariableKind.Local &&
+                  //      variable.Kind != Variable.VariableKind.Parameter ||
+                  //      variable.Lift ||
+                  //      variable.Block.IsGlobal,
+                  //      "Untracked local/parameter " + variable.Name.ToString()
+                  //  );
+                  //}
                 }
             }
 
--- Ast/GeneratorCodeBlock.cs	Wed Oct 31 11:40:14 2007
+++ Ast/GeneratorCodeBlock.cs	Wed Oct 31 20:51:38 2007
@@ -61,7 +61,7 @@
             _next = next;
         }
 
-        internal protected override Delegate GetDelegateForInterpreter(CodeContext context, Type delegateType, bool forceWrapperMethod) {
+        public override Delegate GetDelegateForInterpreter(CodeContext context, Type delegateType, bool forceWrapperMethod) {
             // For now, always return a compiled delegate (since yield is not implemented)
             lock (this) {
                 if (_delegate == null) {
--- Ast/MethodCallExpression.cs	Wed Oct 31 11:40:14 2007
+++ Ast/MethodCallExpression.cs	Tue Nov 06 18:15:19 2007
@@ -150,6 +150,7 @@
         }
 
         public override void Emit(CodeGen cg) {
+          EmitLocation(cg);
             // Emit instance, if calling an instance method
             if (!_method.IsStatic) {
                 Type type = _method.DeclaringType;
@@ -170,7 +171,15 @@
             }
 
             // Emit the actual call
-            cg.EmitCall(_method);
+            cg.EmitCall(_method, tailcall);
+        }
+
+        bool tailcall = false;
+
+        public bool TailCall
+        {
+          get { return tailcall; }
+          set { tailcall = value; }
         }
 
         private static void EmitArgument(CodeGen cg, Expression argument, Type type) {
--- Ast/UnboundAssignment.cs	Wed Oct 31 11:40:14 2007
+++ Ast/UnboundAssignment.cs	Tue Nov 06 18:14:52 2007
@@ -50,6 +50,7 @@
         }
 
         public override void Emit(CodeGen cg) {
+          EmitLocation(cg);
             _value.EmitAsObject(cg);
             cg.EmitCodeContext();
             cg.EmitSymbolId(_name);
--- Ast/Variable.cs	Wed Oct 31 11:40:14 2007
+++ Ast/Variable.cs	Wed Oct 31 20:51:38 2007
@@ -214,7 +214,7 @@
         /// the variable in the current scope (so that it can be initialized)
         /// </summary>
         private Slot AllocInEnv(CodeGen cg) {
-            Debug.Assert(_storage == null);
+            //Debug.Assert(_storage == null);
             Debug.Assert(_block.EnvironmentFactory != null, "Allocating in environment without environment factory.\nIs HasEnvironment set?");
             _storage = _block.EnvironmentFactory.MakeEnvironmentReference(_name, _type);
             return _storage.CreateSlot(cg.Allocator.GetClosureAccessSlot(_block));
--- Ast/VariableReference.cs	Wed Oct 31 11:40:14 2007
+++ Ast/VariableReference.cs	Wed Oct 31 20:51:38 2007
@@ -47,5 +47,16 @@
         public void CreateSlot(CodeGen cg) {
             _slot = _variable.CreateSlot(cg);
         }
+
+      public override bool Equals(object obj)
+      {
+        VariableReference b = obj as VariableReference;
+        return b.Variable.Name == Variable.Name && b.Variable.Block == Variable.Block;
+      }
+
+      public override int GetHashCode()
+      {
+        return base.GetHashCode();
+      }
     }
 }
--- Generation/CodeGen.cs	Wed Oct 31 11:40:14 2007
+++ Generation/CodeGen.cs	Wed Oct 31 20:51:38 2007
@@ -1176,6 +1176,28 @@
             }
         }
 
+      public void EmitCall(MethodInfo mi, bool tailcall)
+      {
+        Contract.RequiresNotNull(mi, "mi");
+
+        if (tailcall)
+        {
+          Emit(OpCodes.Tailcall);
+        }
+
+        EmitCall(mi);
+      }
+
+      public void EmitCall(Type type, String name, bool tailcall)
+      {
+        Contract.RequiresNotNull(type, "type");
+        Contract.RequiresNotNull(name, "name");
+        if (!type.IsVisible) throw new ArgumentException(String.Format(Resources.TypeMustBeVisible, type.FullName));
+
+        EmitCall(type.GetMethod(name), tailcall);
+      }
+
+
         public void EmitCall(Type type, String name) {
             Contract.RequiresNotNull(type, "type");
             Contract.RequiresNotNull(name, "name");
--- Generation/MethodTarget.cs	Wed Oct 31 11:40:16 2007
+++ Generation/MethodTarget.cs	Wed Oct 31 20:51:38 2007
@@ -54,6 +54,11 @@
             get { return _parameterCount; }
         }
 
+      public bool NeedsContext
+      {
+        get { return _argBuilders.Count > 0 && _argBuilders[0] is ContextArgBuilder; }
+      }
+
         public bool CheckArgs(CodeContext context, object[] args) {
             //if (!instanceBuilder.Check(context, args)) return false;
             //foreach (ArgBuilder arg in argBuilders) {
--- Hosting/ConsoleHost.cs	Wed Oct 31 11:40:16 2007
+++ Hosting/ConsoleHost.cs	Wed Oct 31 20:51:38 2007
@@ -40,7 +40,7 @@
         protected virtual string ExeName {
             get {
 #if !SILVERLIGHT
-                return GetType().Assembly.GetName().Name;
+              return Assembly.GetEntryAssembly().GetName().Name;
 #else
                 return "ConsoleHost";
 #endif
--- Shell/BasicConsole.cs	Wed Oct 31 11:40:18 2007
+++ Shell/BasicConsole.cs	Wed Oct 31 20:51:38 2007
@@ -80,7 +80,7 @@
         private void SetupColors(bool colorful) {
 
             if (colorful) {
-                _promptColor = ConsoleColor.Gray;
+                _promptColor = ConsoleColor.Cyan;
                 _outColor = ConsoleColor.Green;
                 _errorColor = ConsoleColor.Red;
                 _warningColor = ConsoleColor.Yellow;
--- Shell/CommandLine.cs	Wed Oct 31 11:40:18 2007
+++ Shell/CommandLine.cs	Wed Oct 31 20:51:38 2007
@@ -199,6 +199,10 @@
             return RunInteractiveLoop();
         }
 
+      protected virtual void OnInteractiveLoopStart()
+      {
+      }
+
         /// <summary>
         /// Runs the interactive loop.  Repeatedly parse and run interactive actions
         /// until an exit code is received.  If any exceptions are unhandled displays
@@ -209,6 +213,8 @@
             if (_module == null) {
                 _module = ScriptDomainManager.CurrentManager.CreateModule("<stdin>");
             }
+
+            OnInteractiveLoopStart();
             
             int? res = null;
             do {
--- Shell/SuperConsole.cs	Wed Oct 31 11:40:18 2007
+++ Shell/SuperConsole.cs	Wed Oct 31 20:51:38 2007
@@ -229,11 +229,7 @@
             int len;
             for (len = _input.Length; len > 0; len--) {
                 char c = _input[len - 1];
-                if (Char.IsLetterOrDigit(c)) {
-                    continue;
-                } else if (c == '.' || c == '_') {
-                    continue;
-                } else {
+                if (c == '(' || c == ' ') {
                     break;
                 }
             }
--- MethodBinder.cs	Wed Oct 31 11:40:08 2007
+++ MethodBinder.cs	Wed Oct 31 23:21:04 2007
@@ -474,12 +474,14 @@
 
         #endregion
 
-        public override string ToString() {
-            string res = "";
-            foreach(TargetSet ts in _targetSets.Values) {            
-                res += ts + Environment.NewLine;
-            }
-            return res;
+        public override string ToString()
+        {
+          List<string> res = new List<string>();
+          foreach (int key in _targetSets.Keys)
+          {
+            res.Add(_targetSets[key].ToString());
+          }
+          return string.Join(Environment.NewLine, res.ToArray());
         }
 
         public string Name {
--- Microsoft.Scripting.csproj	Wed Oct 31 11:40:08 2007
+++ Microsoft.Scripting.csproj	Thu Nov 01 18:35:55 2007
@@ -1,9 +1,9 @@
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
+﻿<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
   <Import Condition=" '$(BuildingTraversal)' == 'true' " Project="..\..\silverlight.settings.targets" />
   <PropertyGroup>
     <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
     <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProductVersion>9.0.20831</ProductVersion>
+    <ProductVersion>8.0.50727</ProductVersion>
     <SchemaVersion>2.0</SchemaVersion>
     <ProjectGuid>{2AE75F5A-CD1F-4925-9647-AF4D1C282FB4}</ProjectGuid>
     <OutputType>Library</OutputType>
@@ -13,6 +13,10 @@
     <DocumentationFile>..\..\Bin\Release\Microsoft.Scripting.XML</DocumentationFile>
     <NoWarn>1591</NoWarn>
     <OldToolsVersion>2.0</OldToolsVersion>
+    <SccProjectName>%24/IronScheme/IronScheme/Microsoft.Scripting</SccProjectName>
+    <SccLocalPath>.</SccLocalPath>
+    <SccAuxPath>https://tfs02.codeplex.com</SccAuxPath>
+    <SccProvider>{4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}</SccProvider>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'FxCop|AnyCPU' ">
     <DebugType>pdbonly</DebugType>
@@ -40,8 +44,8 @@
     <DebugSymbols>true</DebugSymbols>
     <DebugType>full</DebugType>
     <Optimize>false</Optimize>
-    <OutputPath>..\..\Bin\Debug\</OutputPath>
-    <DocumentationFile>..\..\Bin\Debug\Microsoft.Scripting.xml</DocumentationFile>
+    <OutputPath>Bin\Debug\</OutputPath>
+    <DocumentationFile>Bin\Debug\Microsoft.Scripting.xml</DocumentationFile>
     <DefineConstants>DEBUG;TRACE</DefineConstants>
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
@@ -51,8 +55,8 @@
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
     <DebugType>pdbonly</DebugType>
     <Optimize>true</Optimize>
-    <OutputPath>..\..\Bin\Release\</OutputPath>
-    <DocumentationFile>..\..\Bin\Release\Microsoft.Scripting.xml</DocumentationFile>
+    <OutputPath>Bin\Release\</OutputPath>
+    <DocumentationFile>Bin\Release\Microsoft.Scripting.xml</DocumentationFile>
     <DefineConstants>TRACE</DefineConstants>
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
@@ -62,7 +66,7 @@
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Silverlight Debug|AnyCPU' ">
     <DebugSymbols>true</DebugSymbols>
-    <OutputPath>..\..\Bin\Silverlight Debug\</OutputPath>
+    <OutputPath>Bin\Silverlight Debug\</OutputPath>
     <DefineConstants>TRACE;DEBUG;SILVERLIGHT</DefineConstants>
     <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
     <DebugType>full</DebugType>
@@ -70,15 +74,15 @@
     <RunCodeAnalysis>false</RunCodeAnalysis>
     <ErrorReport>prompt</ErrorReport>
     <NoStdLib>true</NoStdLib>
-    <DocumentationFile>..\..\Bin\Silverlight Debug\Microsoft.Scripting.xml</DocumentationFile>
+    <DocumentationFile>Bin\Silverlight Debug\Microsoft.Scripting.xml</DocumentationFile>
     <NoWarn>1591,618</NoWarn>
     <SilverlightBuild>true</SilverlightBuild>
-    <SilverlightSdkPath>..\..\Utilities\Silverlight\x86ret\</SilverlightSdkPath>
+    <SilverlightSdkPath>Utilities\Silverlight\x86ret\</SilverlightSdkPath>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Silverlight Release|AnyCPU' ">
-    <OutputPath>..\..\Bin\Silverlight Release\</OutputPath>
+    <OutputPath>Bin\Silverlight Release\</OutputPath>
     <DefineConstants>TRACE;SILVERLIGHT</DefineConstants>
-    <DocumentationFile>..\..\Bin\Silverlight Release\Microsoft.Scripting.xml</DocumentationFile>
+    <DocumentationFile>Bin\Silverlight Release\Microsoft.Scripting.xml</DocumentationFile>
     <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
     <NoWarn>1591,618</NoWarn>
     <NoStdLib>true</NoStdLib>
@@ -86,7 +90,7 @@
     <PlatformTarget>AnyCPU</PlatformTarget>
     <ErrorReport>prompt</ErrorReport>
     <SilverlightBuild>true</SilverlightBuild>
-    <SilverlightSdkPath>..\..\Utilities\Silverlight\x86ret\</SilverlightSdkPath>
+    <SilverlightSdkPath>Utilities\Silverlight\x86ret\</SilverlightSdkPath>
   </PropertyGroup>
   <ItemGroup>
     <Reference Include="System" Condition=" $(SilverlightBuild) != 'true' " />
--- ModuleGlobalWrapper.cs	Wed Oct 31 11:40:08 2007
+++ ModuleGlobalWrapper.cs	Sun Nov 04 09:05:10 2007
@@ -59,6 +59,7 @@
                     throw _context.LanguageContext.MissingName(_name);
 
                 }
+                _context.Scope.SetName(_name, value);
                 _value = value;
             }
         }
--- RuntimeHelpers.cs	Wed Oct 31 11:40:08 2007
+++ RuntimeHelpers.cs	Wed Oct 31 20:51:38 2007
@@ -121,7 +121,7 @@
                     formalCount = minFormalNormalArgumentCount - defaultArgumentCount;
                 } else {
                     formalCountQualifier = "at most";
-                    formalCount = minFormalNormalArgumentCount;
+                    formalCount = maxFormalNormalArgumentCount;
                 }
             } else {
                 formalCountQualifier = "exactly";
