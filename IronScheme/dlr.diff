--- Ast/ActionExpression.cs	Sat Oct 20 12:40:31 2007
+++ Ast/ActionExpression.cs	Wed Oct 17 07:51:10 2007
@@ -116,15 +116,7 @@
 
 
             // Emit the site invoke
-            cg.EmitCall(site.Type, "Invoke", tailcall);
-        }
-
-        bool tailcall = false;
-
-        public bool TailCall
-        {
-          get { return tailcall; }
-          set { tailcall = false; }
+            cg.EmitCall(site.Type, "Invoke");
         }
 
         public override void Walk(Walker walker) {
--- Ast/AstWriter.cs	Sun Oct 21 23:22:07 2007
+++ Ast/AstWriter.cs	Wed Oct 17 07:51:12 2007
@@ -112,10 +112,7 @@
             if (ScriptDomainManager.Options.ShowASTs) {
                 AstWriter.ForceDump(node, descr, System.Console.Out);
             } else if (ScriptDomainManager.Options.DumpASTs) {
-              using (TextWriter w = new StreamWriter(FixPath(descr) + ".ast", descr == null))
-              {
-                AstWriter.ForceDump(node, descr, w);
-              }
+                AstWriter.ForceDump(node, descr, new StreamWriter(FixPath(descr) + ".ast", true));
             }
         }
 
@@ -141,10 +138,6 @@
         }
 
         private static string FixPath(string path) {
-          if (path == null)
-          {
-            return "REPL";
-          }
 #if !SILVERLIGHT // GetInvalidFileNameChars does not exist in CoreCLR
             char[] invalid = System.IO.Path.GetInvalidFileNameChars();
 
--- Ast/BinaryExpression.cs	Sat Oct 27 16:22:16 2007
+++ Ast/BinaryExpression.cs	Wed Oct 17 07:51:12 2007
@@ -354,8 +354,7 @@
         protected override object DoEvaluate(CodeContext context) {
             if (_op == BinaryOperators.AndAlso) {
                 object ret = _left.Evaluate(context);
-                object rr = ((bool)ret) ? _right.Evaluate(context) : ret;
-                return rr;
+                return ((bool)ret) ? _right.Evaluate(context) : ret;
             } else if (_op == BinaryOperators.OrElse) {
                 object ret = _left.Evaluate(context);
                 return ((bool)ret) ? ret : _right.Evaluate(context);
--- Ast/BoundAssignment.cs	Sat Oct 20 12:40:31 2007
+++ Ast/BoundAssignment.cs	Wed Oct 17 07:51:12 2007
@@ -46,7 +46,7 @@
             set {
                 Debug.Assert(value != null);
                 Debug.Assert(value.Variable == _variable);
-                Debug.Assert(_vr == null || _vr.Equals(value));
+                Debug.Assert(_vr == null || (object)_vr == (object)value);
                 _vr = value;
             }
         }
--- Ast/BoundExpression.cs	Sat Oct 20 12:40:31 2007
+++ Ast/BoundExpression.cs	Wed Oct 17 07:51:12 2007
@@ -39,7 +39,7 @@
             set {
                 Debug.Assert(value.Variable == _variable);
                 // the _vr == value is true for DAGs
-                Debug.Assert(_vr == null || _vr.Equals(value));
+                Debug.Assert(_vr == null || _vr == value);
                 _vr = value;
             }
         }
--- Ast/ClosureBinder.cs	Sat Oct 20 12:40:31 2007
+++ Ast/ClosureBinder.cs	Wed Oct 17 07:51:12 2007
@@ -209,7 +209,7 @@
                 // Global variables as local
                 if (r.Variable.Kind == Variable.VariableKind.Global || 
                     (r.Variable.Kind == Variable.VariableKind.Local && r.Variable.Block.IsGlobal)) {
-                    //Debug.Assert(r.Variable.Block == _global);
+                    Debug.Assert(r.Variable.Block == _global);
                     continue;
                 }
 
--- Ast/CodeBlock.cs	Thu Oct 25 23:28:02 2007
+++ Ast/CodeBlock.cs	Wed Oct 17 07:51:12 2007
@@ -295,7 +295,7 @@
             cg.Emit(OpCodes.Newarr, typeof(SymbolId));
 
             int index = 0;
-            //cg.EmitDebugMarker("--- Environment IDs ---");
+            cg.EmitDebugMarker("--- Environment IDs ---");
 
             foreach (Variable prm in _parameters) {
                 if (prm.Lift) {
@@ -308,7 +308,7 @@
                     EmitSetVariableName(cg, index++, var.Name);
                 }
             }
-            //cg.EmitDebugMarker("--- End Environment IDs ---");
+            cg.EmitDebugMarker("--- End Environment IDs ---");
         }
 
         private static void EmitSetVariableName(CodeGen cg, int index, SymbolId name) {
@@ -348,7 +348,7 @@
         internal EnvironmentSlot EmitEnvironmentAllocation(CodeGen cg) {
             Debug.Assert(_environmentFactory != null);
 
-            //cg.EmitDebugMarker("-- ENV ALLOC START --");
+            cg.EmitDebugMarker("-- ENV ALLOC START --");
 
             _environmentFactory.EmitStorage(cg);
             cg.Emit(OpCodes.Dup);
@@ -362,7 +362,7 @@
 
             _environmentFactory.EmitNewEnvironment(cg);
 
-            //cg.EmitDebugMarker("-- ENV ALLOC END --");
+            cg.EmitDebugMarker("-- ENV ALLOC END --");
 
             return environmentSlot;
         }
@@ -697,7 +697,7 @@
         }
 
         // Return a delegate to execute this block in interpreted mode.
-        public virtual Delegate GetDelegateForInterpreter(CodeContext context, Type delegateType, bool forceWrapperMethod) {
+        internal protected virtual Delegate GetDelegateForInterpreter(CodeContext context, Type delegateType, bool forceWrapperMethod) {
             FlowChecker.Check(this);
 
             bool delayedEmit = context.LanguageContext.Engine.Options.ProfileDrivenCompilation;
--- Ast/GeneratorCodeBlock.cs	Sat Oct 20 12:53:52 2007
+++ Ast/GeneratorCodeBlock.cs	Wed Oct 17 07:51:12 2007
@@ -65,7 +65,7 @@
             _next = next;
         }
 
-        public override Delegate GetDelegateForInterpreter(CodeContext context, Type delegateType, bool forceWrapperMethod) {
+        internal protected override Delegate GetDelegateForInterpreter(CodeContext context, Type delegateType, bool forceWrapperMethod) {
             // For now, always return a compiled delegate (since yield is not implemented)
             lock (this) {
                 if (_delegate == null) {
--- Ast/MethodCallExpression.cs	Sat Oct 27 11:31:56 2007
+++ Ast/MethodCallExpression.cs	Wed Oct 17 07:51:12 2007
@@ -168,15 +168,7 @@
             }
 
             // Emit the actual call
-            cg.EmitCall(_method, tailcall);
-        }
-
-        bool tailcall = false;
-
-        public bool TailCall
-        {
-          get { return tailcall; }
-          set { tailcall = value; }
+            cg.EmitCall(_method);
         }
 
         private static void EmitArgument(CodeGen cg, Expression argument, Type type) {
--- Ast/Variable.cs	Sat Oct 20 12:40:32 2007
+++ Ast/Variable.cs	Wed Oct 17 07:51:12 2007
@@ -214,7 +214,7 @@
         /// the variable in the current scope (so that it can be initialized)
         /// </summary>
         private Slot AllocInEnv(CodeGen cg) {
-            //Debug.Assert(_storage == null);
+            Debug.Assert(_storage == null);
             Debug.Assert(_block.EnvironmentFactory != null, "Allocating in environment without environment factory.\nIs HasEnvironment set?");
             _storage = _block.EnvironmentFactory.MakeEnvironmentReference(_name, _type);
             return _storage.CreateSlot(cg.Allocator.GetClosureAccessSlot(_block));
--- Ast/VariableReference.cs	Sat Oct 20 12:40:32 2007
+++ Ast/VariableReference.cs	Wed Oct 17 07:51:12 2007
@@ -47,16 +47,5 @@
         public void CreateSlot(CodeGen cg) {
             _slot = _variable.CreateSlot(cg);
         }
-
-      public override bool Equals(object obj)
-      {
-        VariableReference b = obj as VariableReference;
-        return b.Variable.Name == Variable.Name && b.Variable.Block == Variable.Block;
-      }
-
-      public override int GetHashCode()
-      {
-        return base.GetHashCode();
-      }
     }
 }
--- Generation/CodeGen.cs	Sat Oct 20 12:40:32 2007
+++ Generation/CodeGen.cs	Wed Oct 17 07:51:14 2007
@@ -1216,28 +1216,6 @@
             }
         }
 
-      public void EmitCall(MethodInfo mi, bool tailcall)
-      {
-        Contract.RequiresNotNull(mi, "mi");
-
-        if (tailcall)
-        {
-          Emit(OpCodes.Tailcall);
-        }
-
-        EmitCall(mi);
-      }
-
-      public void EmitCall(Type type, String name, bool tailcall)
-      {
-        Contract.RequiresNotNull(type, "type");
-        Contract.RequiresNotNull(name, "name");
-        if (!type.IsVisible) throw new ArgumentException(String.Format(Resources.TypeMustBeVisible, type.FullName));
-
-        EmitCall(type.GetMethod(name), tailcall);
-      }
-
-
         public void EmitCall(Type type, String name) {
             Contract.RequiresNotNull(type, "type");
             Contract.RequiresNotNull(name, "name");
--- Generation/MethodTarget.cs	Sat Oct 20 12:40:32 2007
+++ Generation/MethodTarget.cs	Wed Oct 17 07:51:14 2007
@@ -54,11 +54,6 @@
             get { return _parameterCount; }
         }
 
-      public bool NeedsContext
-      {
-        get { return _argBuilders.Count > 0 && _argBuilders[0] is ContextArgBuilder; }
-      }
-
         public bool CheckArgs(CodeContext context, object[] args) {
             //if (!instanceBuilder.Check(context, args)) return false;
             //foreach (ArgBuilder arg in argBuilders) {
--- Hosting/ConsoleHost.cs	Mon Oct 22 20:34:53 2007
+++ Hosting/ConsoleHost.cs	Wed Oct 17 07:51:16 2007
@@ -40,7 +40,7 @@
         protected virtual string ExeName {
             get {
 #if !SILVERLIGHT
-              return Assembly.GetEntryAssembly().GetName().Name;
+                return GetType().Assembly.GetName().Name;
 #else
                 return "ConsoleHost";
 #endif
--- Shell/BasicConsole.cs	Sun Oct 28 11:35:16 2007
+++ Shell/BasicConsole.cs	Wed Oct 17 07:51:16 2007
@@ -80,7 +80,7 @@
         private void SetupColors(bool colorful) {
 
             if (colorful) {
-                _promptColor = ConsoleColor.Cyan;
+                _promptColor = ConsoleColor.Gray;
                 _outColor = ConsoleColor.Green;
                 _errorColor = ConsoleColor.Red;
                 _warningColor = ConsoleColor.Yellow;
--- Shell/CommandLine.cs	Mon Oct 22 22:02:58 2007
+++ Shell/CommandLine.cs	Wed Oct 17 07:51:16 2007
@@ -199,10 +199,6 @@
             return RunInteractiveLoop();
         }
 
-      protected virtual void OnInteractiveLoopStart()
-      {
-      }
-
         /// <summary>
         /// Runs the interactive loop.  Repeatedly parse and run interactive actions
         /// until an exit code is received.  If any exceptions are unhandled displays
@@ -213,8 +209,6 @@
             if (_module == null) {
                 _module = ScriptDomainManager.CurrentManager.CreateModule("<stdin>");
             }
-
-            OnInteractiveLoopStart();
             
             int? res = null;
             do {
--- Shell/SuperConsole.cs	Sun Oct 28 21:49:27 2007
+++ Shell/SuperConsole.cs	Wed Oct 17 07:51:16 2007
@@ -229,7 +229,11 @@
             int len;
             for (len = _input.Length; len > 0; len--) {
                 char c = _input[len - 1];
-                if (c == '(' || c == ' ') {
+                if (Char.IsLetterOrDigit(c)) {
+                    continue;
+                } else if (c == '.' || c == '_') {
+                    continue;
+                } else {
                     break;
                 }
             }
--- MethodBinder.cs	Sat Oct 20 12:40:32 2007
+++ MethodBinder.cs	Wed Oct 17 07:51:06 2007
@@ -475,12 +475,11 @@
         #endregion
 
         public override string ToString() {
-          List<string> res = new List<string>();
-          foreach (int key in _targetSets.Keys)
-          {
-            res.Add(_targetSets[key].ToString());
-          }
-          return string.Join(Environment.NewLine, res.ToArray());
+            string res = "";
+            for (int i = 0; i < _targetSets.Count; i++) {
+                res += _targetSets[i] + Environment.NewLine;
+            }
+            return res;
         }
     }
 
--- Microsoft.Scripting.csproj	Sat Oct 20 12:48:04 2007
+++ Microsoft.Scripting.csproj	Wed Oct 17 07:51:06 2007
@@ -1,27 +1,23 @@
-﻿<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
+<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
   <Import Condition=" '$(BuildingTraversal)' == 'true' " Project="..\..\silverlight.settings.targets" />
   <PropertyGroup>
     <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
     <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProductVersion>8.0.50727</ProductVersion>
+    <ProductVersion>9.0.20706</ProductVersion>
     <SchemaVersion>2.0</SchemaVersion>
     <ProjectGuid>{2AE75F5A-CD1F-4925-9647-AF4D1C282FB4}</ProjectGuid>
     <OutputType>Library</OutputType>
     <AppDesignerFolder>Properties</AppDesignerFolder>
     <RootNamespace>Microsoft.Scripting</RootNamespace>
     <AssemblyName>Microsoft.Scripting</AssemblyName>
-    <DocumentationFile>Bin\Release\Microsoft.Scripting.XML</DocumentationFile>
+    <DocumentationFile>..\..\Bin\Release\Microsoft.Scripting.XML</DocumentationFile>
     <NoWarn>1591</NoWarn>
-    <SccProjectName>%24/IronScheme/IronScheme/Microsoft.Scripting</SccProjectName>
-    <SccLocalPath>.</SccLocalPath>
-    <SccAuxPath>https://tfs02.codeplex.com</SccAuxPath>
-    <SccProvider>{4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}</SccProvider>
     <OldToolsVersion>2.0</OldToolsVersion>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'FxCop|AnyCPU' ">
     <DebugType>pdbonly</DebugType>
     <Optimize>true</Optimize>
-    <OutputPath>Bin\FxCop\</OutputPath>
+    <OutputPath>..\..\Bin\FxCop\</OutputPath>
     <DefineConstants>TRACE</DefineConstants>
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
@@ -33,8 +29,8 @@
     <DebugSymbols>true</DebugSymbols>
     <DebugType>full</DebugType>
     <Optimize>false</Optimize>
-    <OutputPath>Bin\Debug\</OutputPath>
-    <DocumentationFile>Bin\Debug\Microsoft.Scripting.xml</DocumentationFile>
+    <OutputPath>..\..\Bin\Debug\</OutputPath>
+    <DocumentationFile>..\..\Bin\Debug\Microsoft.Scripting.xml</DocumentationFile>
     <DefineConstants>DEBUG;TRACE</DefineConstants>
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
@@ -44,8 +40,8 @@
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
     <DebugType>pdbonly</DebugType>
     <Optimize>true</Optimize>
-    <OutputPath>Bin\Release\</OutputPath>
-    <DocumentationFile>Bin\Release\Microsoft.Scripting.xml</DocumentationFile>
+    <OutputPath>..\..\Bin\Release\</OutputPath>
+    <DocumentationFile>..\..\Bin\Release\Microsoft.Scripting.xml</DocumentationFile>
     <DefineConstants>TRACE</DefineConstants>
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
@@ -55,7 +51,7 @@
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Silverlight Debug|AnyCPU' ">
     <DebugSymbols>true</DebugSymbols>
-    <OutputPath>Bin\Silverlight Debug\</OutputPath>
+    <OutputPath>..\..\Bin\Silverlight Debug\</OutputPath>
     <DefineConstants>TRACE;DEBUG;SILVERLIGHT</DefineConstants>
     <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
     <DebugType>full</DebugType>
@@ -63,15 +59,15 @@
     <RunCodeAnalysis>false</RunCodeAnalysis>
     <ErrorReport>prompt</ErrorReport>
     <NoStdLib>true</NoStdLib>
-    <DocumentationFile>Bin\Silverlight Debug\Microsoft.Scripting.xml</DocumentationFile>
+    <DocumentationFile>..\..\Bin\Silverlight Debug\Microsoft.Scripting.xml</DocumentationFile>
     <NoWarn>1591,618</NoWarn>
     <SilverlightBuild>true</SilverlightBuild>
-    <SilverlightSdkPath>Utilities\Silverlight\x86ret\</SilverlightSdkPath>
+    <SilverlightSdkPath>..\..\Utilities\Silverlight\x86ret\</SilverlightSdkPath>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Silverlight Release|AnyCPU' ">
-    <OutputPath>Bin\Silverlight Release\</OutputPath>
+    <OutputPath>..\..\Bin\Silverlight Release\</OutputPath>
     <DefineConstants>TRACE;SILVERLIGHT</DefineConstants>
-    <DocumentationFile>Bin\Silverlight Release\Microsoft.Scripting.xml</DocumentationFile>
+    <DocumentationFile>..\..\Bin\Silverlight Release\Microsoft.Scripting.xml</DocumentationFile>
     <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
     <NoWarn>1591,618</NoWarn>
     <NoStdLib>true</NoStdLib>
@@ -79,7 +75,7 @@
     <PlatformTarget>AnyCPU</PlatformTarget>
     <ErrorReport>prompt</ErrorReport>
     <SilverlightBuild>true</SilverlightBuild>
-    <SilverlightSdkPath>Utilities\Silverlight\x86ret\</SilverlightSdkPath>
+    <SilverlightSdkPath>..\..\Utilities\Silverlight\x86ret\</SilverlightSdkPath>
   </PropertyGroup>
   <ItemGroup>
     <Reference Include="System" Condition=" $(SilverlightBuild) != 'true' " />
--- ModuleGlobalWrapper.cs	Sat Oct 20 12:40:32 2007
+++ ModuleGlobalWrapper.cs	Wed Oct 17 07:51:06 2007
@@ -103,16 +103,8 @@
         }
 
         private string GetStringDisplay(object val) {
-          try
-          {
             return (string)DynamicHelpers.GetDynamicType(val).InvokeUnaryOperator(_context, Operators.ConvertToString, val);
-          }
-          catch (MissingMemberException)
-          {
-            return val == null ? "null" : val.ToString();
-          }
         }
-        
 
         public override string ToString() {
             return String.Format("ModuleGlobal: {0} Value: {1} ({2})",
--- RuntimeHelpers.cs	Sat Oct 27 10:38:35 2007
+++ RuntimeHelpers.cs	Wed Oct 17 07:51:08 2007
@@ -138,7 +138,7 @@
                     formalCount = minFormalNormalArgumentCount - defaultArgumentCount;
                 } else {
                     formalCountQualifier = "at most";
-                    formalCount = maxFormalNormalArgumentCount;
+                    formalCount = minFormalNormalArgumentCount;
                 }
             } else {
                 formalCountQualifier = "exactly";
