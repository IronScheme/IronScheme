version: 1.0.{build}
branches:
  only:
  - master
configuration: Release
platform: Any CPU
assembly_info:
  patch: true
  file: IronScheme\IronScheme\Properties\AssemblyInfo.cs
  assembly_version: '1.0.0.0'
  assembly_file_version: '{version}'
  assembly_informational_version: '{version}-$(SHA)'environment:
  matrix:
  - FX_VERSION: v2.0
  - FX_VERSION: v4.0install:
- cmd: >-
    set SHA=%APPVEYOR_REPO_COMMIT:~0,7%
    
    set QUIET=1

    cinst ilmerge

    cinst zip

    curl -o xz.zip http://tukaani.org/xz/xz-5.2.1-windows.zip

    unzip -o xz.zip -d xz bin_i686-sse2/xz.exe

    copy xz\bin_i686-sse2\xz.exe "C:\Program Files\Git\usr\bin\"

    set PATH=%PATH%;C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\;%APPVEYOR_BUILD_FOLDER%\IronScheme\tools\;
build_script:
- cmd: msbuild "IronScheme\IronSchemeCore.sln" /v:m /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" /p:TargetFrameworkVersion=%FX_VERSION% /p:Configuration=Release
test_script:
- cmd: >-
    cd IronScheme\IronScheme.Console\bin\Release

    rem these have to be in order

    nunit-console IronScheme.Tests.dll /nologo /labels /run:IronScheme.Tests.Release

    nunit-console IronScheme.Tests.dll /nologo /labels /run:IronScheme.Tests.Debug

    nunit-console IronScheme.Tests.dll /nologo /labels /run:IronScheme.Tests.Setup

    nunit-console IronScheme.Tests.dll /nologo /labels /run:IronScheme.Tests.Conformance

    nunit-console IronScheme.Tests.dll /nologo /labels /run:IronScheme.Tests.SRFI

    nunit-console IronScheme.Tests.dll /nologo /labels /run:IronScheme.Tests.Other

    nunit-console IronScheme.Tests.dll /nologo /labels /run:IronScheme.Tests.Teardown

    rem once everything is happy, we can prep the artefacts

    if "%FX_VERSION%" NEQ "v2.0" exit /b 0

    mkdir merged

    ILMerge /ndebug /keyfile:DEVELOPMENT.snk /out:merged\IronScheme.dll IronScheme.dll IronScheme.Closures.dll IronScheme.Scripting.dll Oyster.IntX.dll ironscheme.boot.dll 

    copy /Y merged\IronScheme.* .

    peverify /nologo /ignore=0x80131820,0x801318DE,0x80131854,0x8013185D,0x80131228 IronScheme.dll

    NamespaceRenamer IronScheme.dll Microsoft=IronScheme Oyster.Math=IronScheme.Scripting.Math gppg=IronScheme.gppg

    ReferenceRemover IronScheme.Web.Runtime.dll "IronScheme\..*|Oyster.IntX.*" IronScheme.dll

    ReferenceRemover IronScheme.Remoting.Server.dll "IronScheme\..*|Oyster.IntX.*" "IronScheme.Remoting.*" IronScheme.dll

    NamespaceRenamer -r IronScheme.Web.Runtime.dll Microsoft=IronScheme

    NamespaceRenamer -r IronScheme.Remoting.Server.dll Microsoft=IronScheme

    peverify /nologo /ignore=0x80131820,0x801318DE,0x80131854,0x8013185D,0x80131228 IronScheme.dll

    peverify /nologo IronScheme.Web.Runtime.dll

    peverify /nologo IronScheme.Remoting.Server.dll

    ILMerge /ndebug /v4 /out:IronScheme.Console-v4.exe IronScheme.Console.exe

    ILMerge /ndebug /v4 /out:IronScheme.Console32-v4.exe IronScheme.Console32.exe

    rem the monolith IronScheme.dll is now built, start with packaging

    mkdir install-stage

    rmdir /s /q install-stage

    mkdir install-stage\IronScheme

    copy IronScheme.Console.exe install-stage\IronScheme\IronScheme.Console-v2.exe

    copy IronScheme.Console32.exe install-stage\IronScheme\IronScheme.Console32-v2.exe

    copy IronScheme.Console-v4.exe install-stage\IronScheme

    copy IronScheme.Console32-v4.exe install-stage\IronScheme

    copy DEVELOPMENT.snk install-stage\IronScheme

    copy system-libraries.ss install-stage\IronScheme

    copy system-libraries.srfi.ss install-stage\IronScheme

    copy IronScheme.dll install-stage\IronScheme

    copy IronScheme.Web.Runtime.dll install-stage\IronScheme

    copy IronScheme.Remoting*.dll install-stage\IronScheme

    copy Executable.cs.template install-stage\IronScheme

    xcopy /e ..\..\examples install-stage\IronScheme\examples\

    xcopy /e ..\..\docs install-stage\IronScheme\docs\

    xcopy /e ..\..\lib install-stage\IronScheme\lib\

    xcopy /e ..\..\tests install-stage\IronScheme\tests\

    del install-stage\IronScheme\lib\minikanren\mktests.scm

    del install-stage\IronScheme\lib\pfds\tests.scm

    del install-stage\IronScheme\tests\*.sps

    del install-stage\IronScheme\lib\wak\fmt\private\test*.scm

    del install-stage\IronScheme\lib\wak\foof-loop\private\test-foof-loop.scm

    rmdir /s /q install-stage\IronScheme\lib\srfi\tests

    rmdir /s /q install-stage\IronScheme\docs\notes

    cd install-stage

    tar -c -fIronScheme-latest.tar IronScheme

    xz IronScheme-latest.tar

    copy ..\ngen-all.cmd IronScheme

    copy ..\un-ngen-all.cmd IronScheme

    zip -r -9 IronScheme-latest.zip IronScheme

    rem rename artefacts and copy to build root

    ren IronScheme-latest.zip IronScheme-%APPVEYOR_BUILD_VERSION%-%SHA%.zip

    ren IronScheme-latest.tar.xz IronScheme-%APPVEYOR_BUILD_VERSION%-%SHA%.tar.xz

    copy Ironscheme-%APPVEYOR_BUILD_VERSION%-%SHA%.* %APPVEYOR_BUILD_FOLDER%

    cd ..
artifacts:
- path: IronScheme-*.zip
- path: IronScheme-*.tar.xz
before_deploy:
- cmd: >-
    rem precompile libraries for Nuget

    echo (compile-system-libraries) | install-stage\IronScheme\IronScheme.Console32-v2.exe

    cd install-stage

    rem prep nuget packages ... WIP
